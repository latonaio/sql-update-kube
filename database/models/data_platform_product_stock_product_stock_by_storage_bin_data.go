// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductStockProductStockByStorageBinDatum is an object representing the database table.
type DataPlatformProductStockProductStockByStorageBinDatum struct {
	Product                                string  `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner                        int     `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                                  string  `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	StorageLocation                        string  `boil:"StorageLocation" json:"StorageLocation" toml:"StorageLocation" yaml:"StorageLocation"`
	StorageBin                             string  `boil:"StorageBin" json:"StorageBin" toml:"StorageBin" yaml:"StorageBin"`
	SupplyChainRelationshipID              int     `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID      int     `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID int     `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	Buyer                                  int     `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                 int     `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                         int     `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverFromParty                       int     `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverToPlant                         string  `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	DeliverFromPlant                       string  `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	InventoryStockType                     string  `boil:"InventoryStockType" json:"InventoryStockType" toml:"InventoryStockType" yaml:"InventoryStockType"`
	ProductStock                           float32 `boil:"ProductStock" json:"ProductStock" toml:"ProductStock" yaml:"ProductStock"`
	CreationDate                           string  `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                           string  `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                         string  `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                         string  `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`

	R *dataPlatformProductStockProductStockByStorageBinDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductStockProductStockByStorageBinDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductStockProductStockByStorageBinDatumColumns = struct {
	Product                                string
	BusinessPartner                        string
	Plant                                  string
	StorageLocation                        string
	StorageBin                             string
	SupplyChainRelationshipID              string
	SupplyChainRelationshipDeliveryID      string
	SupplyChainRelationshipDeliveryPlantID string
	Buyer                                  string
	Seller                                 string
	DeliverToParty                         string
	DeliverFromParty                       string
	DeliverToPlant                         string
	DeliverFromPlant                       string
	InventoryStockType                     string
	ProductStock                           string
	CreationDate                           string
	CreationTime                           string
	LastChangeDate                         string
	LastChangeTime                         string
}{
	Product:                                "Product",
	BusinessPartner:                        "BusinessPartner",
	Plant:                                  "Plant",
	StorageLocation:                        "StorageLocation",
	StorageBin:                             "StorageBin",
	SupplyChainRelationshipID:              "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:      "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID: "SupplyChainRelationshipDeliveryPlantID",
	Buyer:                                  "Buyer",
	Seller:                                 "Seller",
	DeliverToParty:                         "DeliverToParty",
	DeliverFromParty:                       "DeliverFromParty",
	DeliverToPlant:                         "DeliverToPlant",
	DeliverFromPlant:                       "DeliverFromPlant",
	InventoryStockType:                     "InventoryStockType",
	ProductStock:                           "ProductStock",
	CreationDate:                           "CreationDate",
	CreationTime:                           "CreationTime",
	LastChangeDate:                         "LastChangeDate",
	LastChangeTime:                         "LastChangeTime",
}

var DataPlatformProductStockProductStockByStorageBinDatumTableColumns = struct {
	Product                                string
	BusinessPartner                        string
	Plant                                  string
	StorageLocation                        string
	StorageBin                             string
	SupplyChainRelationshipID              string
	SupplyChainRelationshipDeliveryID      string
	SupplyChainRelationshipDeliveryPlantID string
	Buyer                                  string
	Seller                                 string
	DeliverToParty                         string
	DeliverFromParty                       string
	DeliverToPlant                         string
	DeliverFromPlant                       string
	InventoryStockType                     string
	ProductStock                           string
	CreationDate                           string
	CreationTime                           string
	LastChangeDate                         string
	LastChangeTime                         string
}{
	Product:                                "data_platform_product_stock_product_stock_by_storage_bin_data.Product",
	BusinessPartner:                        "data_platform_product_stock_product_stock_by_storage_bin_data.BusinessPartner",
	Plant:                                  "data_platform_product_stock_product_stock_by_storage_bin_data.Plant",
	StorageLocation:                        "data_platform_product_stock_product_stock_by_storage_bin_data.StorageLocation",
	StorageBin:                             "data_platform_product_stock_product_stock_by_storage_bin_data.StorageBin",
	SupplyChainRelationshipID:              "data_platform_product_stock_product_stock_by_storage_bin_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:      "data_platform_product_stock_product_stock_by_storage_bin_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID: "data_platform_product_stock_product_stock_by_storage_bin_data.SupplyChainRelationshipDeliveryPlantID",
	Buyer:                                  "data_platform_product_stock_product_stock_by_storage_bin_data.Buyer",
	Seller:                                 "data_platform_product_stock_product_stock_by_storage_bin_data.Seller",
	DeliverToParty:                         "data_platform_product_stock_product_stock_by_storage_bin_data.DeliverToParty",
	DeliverFromParty:                       "data_platform_product_stock_product_stock_by_storage_bin_data.DeliverFromParty",
	DeliverToPlant:                         "data_platform_product_stock_product_stock_by_storage_bin_data.DeliverToPlant",
	DeliverFromPlant:                       "data_platform_product_stock_product_stock_by_storage_bin_data.DeliverFromPlant",
	InventoryStockType:                     "data_platform_product_stock_product_stock_by_storage_bin_data.InventoryStockType",
	ProductStock:                           "data_platform_product_stock_product_stock_by_storage_bin_data.ProductStock",
	CreationDate:                           "data_platform_product_stock_product_stock_by_storage_bin_data.CreationDate",
	CreationTime:                           "data_platform_product_stock_product_stock_by_storage_bin_data.CreationTime",
	LastChangeDate:                         "data_platform_product_stock_product_stock_by_storage_bin_data.LastChangeDate",
	LastChangeTime:                         "data_platform_product_stock_product_stock_by_storage_bin_data.LastChangeTime",
}

// Generated where

var DataPlatformProductStockProductStockByStorageBinDatumWhere = struct {
	Product                                whereHelperstring
	BusinessPartner                        whereHelperint
	Plant                                  whereHelperstring
	StorageLocation                        whereHelperstring
	StorageBin                             whereHelperstring
	SupplyChainRelationshipID              whereHelperint
	SupplyChainRelationshipDeliveryID      whereHelperint
	SupplyChainRelationshipDeliveryPlantID whereHelperint
	Buyer                                  whereHelperint
	Seller                                 whereHelperint
	DeliverToParty                         whereHelperint
	DeliverFromParty                       whereHelperint
	DeliverToPlant                         whereHelperstring
	DeliverFromPlant                       whereHelperstring
	InventoryStockType                     whereHelperstring
	ProductStock                           whereHelperfloat32
	CreationDate                           whereHelperstring
	CreationTime                           whereHelperstring
	LastChangeDate                         whereHelperstring
	LastChangeTime                         whereHelperstring
}{
	Product:                                whereHelperstring{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`Product`"},
	BusinessPartner:                        whereHelperint{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`BusinessPartner`"},
	Plant:                                  whereHelperstring{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`Plant`"},
	StorageLocation:                        whereHelperstring{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`StorageLocation`"},
	StorageBin:                             whereHelperstring{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`StorageBin`"},
	SupplyChainRelationshipID:              whereHelperint{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:      whereHelperint{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID: whereHelperint{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	Buyer:                                  whereHelperint{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`Buyer`"},
	Seller:                                 whereHelperint{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`Seller`"},
	DeliverToParty:                         whereHelperint{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`DeliverToParty`"},
	DeliverFromParty:                       whereHelperint{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`DeliverFromParty`"},
	DeliverToPlant:                         whereHelperstring{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`DeliverToPlant`"},
	DeliverFromPlant:                       whereHelperstring{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`DeliverFromPlant`"},
	InventoryStockType:                     whereHelperstring{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`InventoryStockType`"},
	ProductStock:                           whereHelperfloat32{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`ProductStock`"},
	CreationDate:                           whereHelperstring{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`CreationDate`"},
	CreationTime:                           whereHelperstring{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`CreationTime`"},
	LastChangeDate:                         whereHelperstring{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`LastChangeDate`"},
	LastChangeTime:                         whereHelperstring{field: "`data_platform_product_stock_product_stock_by_storage_bin_data`.`LastChangeTime`"},
}

// DataPlatformProductStockProductStockByStorageBinDatumRels is where relationship names are stored.
var DataPlatformProductStockProductStockByStorageBinDatumRels = struct {
	BusinessPartnerDataPlatformProductMasterBPPlantDatum string
	BuyerDataPlatformSCRDeliveryRelationDatum            string
	BuyerDataPlatformSCRDeliveryPlantRelationDatum       string
	BuyerDataPlatformSCRGeneralDatum                     string
	BusinessPartnerDataPlatformStorageBinGeneralDatum    string
}{
	BusinessPartnerDataPlatformProductMasterBPPlantDatum: "BusinessPartnerDataPlatformProductMasterBPPlantDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:            "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformSCRDeliveryPlantRelationDatum:       "BuyerDataPlatformSCRDeliveryPlantRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:                     "BuyerDataPlatformSCRGeneralDatum",
	BusinessPartnerDataPlatformStorageBinGeneralDatum:    "BusinessPartnerDataPlatformStorageBinGeneralDatum",
}

// dataPlatformProductStockProductStockByStorageBinDatumR is where relationships are stored.
type dataPlatformProductStockProductStockByStorageBinDatumR struct {
	BusinessPartnerDataPlatformProductMasterBPPlantDatum *DataPlatformProductMasterBPPlantDatum     `boil:"BusinessPartnerDataPlatformProductMasterBPPlantDatum" json:"BusinessPartnerDataPlatformProductMasterBPPlantDatum" toml:"BusinessPartnerDataPlatformProductMasterBPPlantDatum" yaml:"BusinessPartnerDataPlatformProductMasterBPPlantDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum            *DataPlatformSCRDeliveryRelationDatum      `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformSCRDeliveryPlantRelationDatum       *DataPlatformSCRDeliveryPlantRelationDatum `boil:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" json:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" toml:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryPlantRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum                     *DataPlatformSCRGeneralDatum               `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	BusinessPartnerDataPlatformStorageBinGeneralDatum    *DataPlatformStorageBinGeneralDatum        `boil:"BusinessPartnerDataPlatformStorageBinGeneralDatum" json:"BusinessPartnerDataPlatformStorageBinGeneralDatum" toml:"BusinessPartnerDataPlatformStorageBinGeneralDatum" yaml:"BusinessPartnerDataPlatformStorageBinGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductStockProductStockByStorageBinDatumR) NewStruct() *dataPlatformProductStockProductStockByStorageBinDatumR {
	return &dataPlatformProductStockProductStockByStorageBinDatumR{}
}

func (r *dataPlatformProductStockProductStockByStorageBinDatumR) GetBusinessPartnerDataPlatformProductMasterBPPlantDatum() *DataPlatformProductMasterBPPlantDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterBPPlantDatum
}

func (r *dataPlatformProductStockProductStockByStorageBinDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformProductStockProductStockByStorageBinDatumR) GetBuyerDataPlatformSCRDeliveryPlantRelationDatum() *DataPlatformSCRDeliveryPlantRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryPlantRelationDatum
}

func (r *dataPlatformProductStockProductStockByStorageBinDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformProductStockProductStockByStorageBinDatumR) GetBusinessPartnerDataPlatformStorageBinGeneralDatum() *DataPlatformStorageBinGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformStorageBinGeneralDatum
}

// dataPlatformProductStockProductStockByStorageBinDatumL is where Load methods for each relationship are stored.
type dataPlatformProductStockProductStockByStorageBinDatumL struct{}

var (
	dataPlatformProductStockProductStockByStorageBinDatumAllColumns            = []string{"Product", "BusinessPartner", "Plant", "StorageLocation", "StorageBin", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "InventoryStockType", "ProductStock", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime"}
	dataPlatformProductStockProductStockByStorageBinDatumColumnsWithoutDefault = []string{"Product", "BusinessPartner", "Plant", "StorageLocation", "StorageBin", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "InventoryStockType", "ProductStock", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime"}
	dataPlatformProductStockProductStockByStorageBinDatumColumnsWithDefault    = []string{}
	dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns     = []string{"Product", "BusinessPartner", "Plant", "StorageLocation", "StorageBin", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "InventoryStockType"}
	dataPlatformProductStockProductStockByStorageBinDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductStockProductStockByStorageBinDatumSlice is an alias for a slice of pointers to DataPlatformProductStockProductStockByStorageBinDatum.
	// This should almost always be used instead of []DataPlatformProductStockProductStockByStorageBinDatum.
	DataPlatformProductStockProductStockByStorageBinDatumSlice []*DataPlatformProductStockProductStockByStorageBinDatum

	dataPlatformProductStockProductStockByStorageBinDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductStockProductStockByStorageBinDatumType                 = reflect.TypeOf(&DataPlatformProductStockProductStockByStorageBinDatum{})
	dataPlatformProductStockProductStockByStorageBinDatumMapping              = queries.MakeStructMapping(dataPlatformProductStockProductStockByStorageBinDatumType)
	dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductStockProductStockByStorageBinDatumType, dataPlatformProductStockProductStockByStorageBinDatumMapping, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns)
	dataPlatformProductStockProductStockByStorageBinDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductStockProductStockByStorageBinDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductStockProductStockByStorageBinDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductStockProductStockByStorageBinDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductStockProductStockByStorageBinDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductStockProductStockByStorageBinDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductStockProductStockByStorageBinDatum record from the query.
func (q dataPlatformProductStockProductStockByStorageBinDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductStockProductStockByStorageBinDatum, error) {
	o := &DataPlatformProductStockProductStockByStorageBinDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	return o, nil
}

// All returns all DataPlatformProductStockProductStockByStorageBinDatum records from the query.
func (q dataPlatformProductStockProductStockByStorageBinDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductStockProductStockByStorageBinDatumSlice, error) {
	var o []*DataPlatformProductStockProductStockByStorageBinDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductStockProductStockByStorageBinDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductStockProductStockByStorageBinDatum records in the query.
func (q dataPlatformProductStockProductStockByStorageBinDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_stock_product_stock_by_storage_bin_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductStockProductStockByStorageBinDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_stock_product_stock_by_storage_bin_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformProductMasterBPPlantDatum pointed to by the foreign key.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) BusinessPartnerDataPlatformProductMasterBPPlantDatum(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryPlantRelationDatum pointed to by the foreign key.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) BuyerDataPlatformSCRDeliveryPlantRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryPlantRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// BusinessPartnerDataPlatformStorageBinGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) BusinessPartnerDataPlatformStorageBinGeneralDatum(mods ...qm.QueryMod) dataPlatformStorageBinGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformStorageBinGeneralData(queryMods...)
}

// LoadBusinessPartnerDataPlatformProductMasterBPPlantDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductStockProductStockByStorageBinDatumL) LoadBusinessPartnerDataPlatformProductMasterBPPlantDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockProductStockByStorageBinDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockProductStockByStorageBinDatum
	var object *DataPlatformProductStockProductStockByStorageBinDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockProductStockByStorageBinDatum.(*DataPlatformProductStockProductStockByStorageBinDatum)
		if !ok {
			object = new(DataPlatformProductStockProductStockByStorageBinDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockProductStockByStorageBinDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockProductStockByStorageBinDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockProductStockByStorageBinDatum.(*[]*DataPlatformProductStockProductStockByStorageBinDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockProductStockByStorageBinDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockProductStockByStorageBinDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockProductStockByStorageBinDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockProductStockByStorageBinDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterBPPlantDatum")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterBPPlantDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformProductMasterBPPlantDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterBPPlantDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductStockProductStockByStorageBinDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockProductStockByStorageBinDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockProductStockByStorageBinDatum
	var object *DataPlatformProductStockProductStockByStorageBinDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockProductStockByStorageBinDatum.(*DataPlatformProductStockProductStockByStorageBinDatum)
		if !ok {
			object = new(DataPlatformProductStockProductStockByStorageBinDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockProductStockByStorageBinDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockProductStockByStorageBinDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockProductStockByStorageBinDatum.(*[]*DataPlatformProductStockProductStockByStorageBinDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockProductStockByStorageBinDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockProductStockByStorageBinDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockProductStockByStorageBinDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockProductStockByStorageBinDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryPlantRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductStockProductStockByStorageBinDatumL) LoadBuyerDataPlatformSCRDeliveryPlantRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockProductStockByStorageBinDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockProductStockByStorageBinDatum
	var object *DataPlatformProductStockProductStockByStorageBinDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockProductStockByStorageBinDatum.(*DataPlatformProductStockProductStockByStorageBinDatum)
		if !ok {
			object = new(DataPlatformProductStockProductStockByStorageBinDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockProductStockByStorageBinDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockProductStockByStorageBinDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockProductStockByStorageBinDatum.(*[]*DataPlatformProductStockProductStockByStorageBinDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockProductStockByStorageBinDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockProductStockByStorageBinDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockProductStockByStorageBinDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockProductStockByStorageBinDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_plant_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryPlantRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryPlantRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_plant_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductStockProductStockByStorageBinDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockProductStockByStorageBinDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockProductStockByStorageBinDatum
	var object *DataPlatformProductStockProductStockByStorageBinDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockProductStockByStorageBinDatum.(*DataPlatformProductStockProductStockByStorageBinDatum)
		if !ok {
			object = new(DataPlatformProductStockProductStockByStorageBinDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockProductStockByStorageBinDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockProductStockByStorageBinDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockProductStockByStorageBinDatum.(*[]*DataPlatformProductStockProductStockByStorageBinDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockProductStockByStorageBinDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockProductStockByStorageBinDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockProductStockByStorageBinDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockProductStockByStorageBinDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformStorageBinGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductStockProductStockByStorageBinDatumL) LoadBusinessPartnerDataPlatformStorageBinGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockProductStockByStorageBinDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockProductStockByStorageBinDatum
	var object *DataPlatformProductStockProductStockByStorageBinDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockProductStockByStorageBinDatum.(*DataPlatformProductStockProductStockByStorageBinDatum)
		if !ok {
			object = new(DataPlatformProductStockProductStockByStorageBinDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockProductStockByStorageBinDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockProductStockByStorageBinDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockProductStockByStorageBinDatum.(*[]*DataPlatformProductStockProductStockByStorageBinDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockProductStockByStorageBinDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockProductStockByStorageBinDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockProductStockByStorageBinDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockProductStockByStorageBinDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_storage_bin_general_data`),
		qm.WhereIn(`data_platform_storage_bin_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformStorageBinGeneralDatum")
	}

	var resultSlice []*DataPlatformStorageBinGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformStorageBinGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_storage_bin_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_storage_bin_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformStorageBinGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformStorageBinGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformProductMasterBPPlantDatum of the dataPlatformProductStockProductStockByStorageBinDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformProductMasterBPPlantDatum to related.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) SetBusinessPartnerDataPlatformProductMasterBPPlantDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterBPPlantDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_stock_product_stock_by_storage_bin_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Product, o.BusinessPartner, o.Plant, o.StorageLocation, o.StorageBin, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.InventoryStockType}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProductStockProductStockByStorageBinDatumR{
			BusinessPartnerDataPlatformProductMasterBPPlantDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterBPPlantDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformProductStockProductStockByStorageBinDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_stock_product_stock_by_storage_bin_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Product, o.BusinessPartner, o.Plant, o.StorageLocation, o.StorageBin, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.InventoryStockType}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformProductStockProductStockByStorageBinDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryPlantRelationDatum of the dataPlatformProductStockProductStockByStorageBinDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum to related.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) SetBuyerDataPlatformSCRDeliveryPlantRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryPlantRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_stock_product_stock_by_storage_bin_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Product, o.BusinessPartner, o.Plant, o.StorageLocation, o.StorageBin, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.InventoryStockType}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformProductStockProductStockByStorageBinDatumR{
			BuyerDataPlatformSCRDeliveryPlantRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformProductStockProductStockByStorageBinDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_stock_product_stock_by_storage_bin_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Product, o.BusinessPartner, o.Plant, o.StorageLocation, o.StorageBin, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.InventoryStockType}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformProductStockProductStockByStorageBinDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// SetBusinessPartnerDataPlatformStorageBinGeneralDatum of the dataPlatformProductStockProductStockByStorageBinDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformStorageBinGeneralDatum to related.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) SetBusinessPartnerDataPlatformStorageBinGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformStorageBinGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_stock_product_stock_by_storage_bin_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Product, o.BusinessPartner, o.Plant, o.StorageLocation, o.StorageBin, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.InventoryStockType}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProductStockProductStockByStorageBinDatumR{
			BusinessPartnerDataPlatformStorageBinGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformStorageBinGeneralDatum = related
	}

	return nil
}

// DataPlatformProductStockProductStockByStorageBinData retrieves all the records using an executor.
func DataPlatformProductStockProductStockByStorageBinData(mods ...qm.QueryMod) dataPlatformProductStockProductStockByStorageBinDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_stock_product_stock_by_storage_bin_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_stock_product_stock_by_storage_bin_data`.*"})
	}

	return dataPlatformProductStockProductStockByStorageBinDatumQuery{q}
}

// FindDataPlatformProductStockProductStockByStorageBinDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductStockProductStockByStorageBinDatum(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, storageLocation string, storageBin string, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, supplyChainRelationshipDeliveryPlantID int, buyer int, seller int, deliverToParty int, deliverFromParty int, deliverToPlant string, deliverFromPlant string, inventoryStockType string, selectCols ...string) (*DataPlatformProductStockProductStockByStorageBinDatum, error) {
	dataPlatformProductStockProductStockByStorageBinDatumObj := &DataPlatformProductStockProductStockByStorageBinDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_stock_product_stock_by_storage_bin_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=? AND `StorageBin`=? AND `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? AND `InventoryStockType`=?", sel,
	)

	q := queries.Raw(query, product, businessPartner, plant, storageLocation, storageBin, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant, inventoryStockType)

	err := q.Bind(ctx, exec, dataPlatformProductStockProductStockByStorageBinDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	return dataPlatformProductStockProductStockByStorageBinDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_stock_product_stock_by_storage_bin_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductStockProductStockByStorageBinDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductStockProductStockByStorageBinDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductStockProductStockByStorageBinDatumInsertCache[key]
	dataPlatformProductStockProductStockByStorageBinDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductStockProductStockByStorageBinDatumAllColumns,
			dataPlatformProductStockProductStockByStorageBinDatumColumnsWithDefault,
			dataPlatformProductStockProductStockByStorageBinDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductStockProductStockByStorageBinDatumType, dataPlatformProductStockProductStockByStorageBinDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductStockProductStockByStorageBinDatumType, dataPlatformProductStockProductStockByStorageBinDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_stock_product_stock_by_storage_bin_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_stock_product_stock_by_storage_bin_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_stock_product_stock_by_storage_bin_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.BusinessPartner,
		o.Plant,
		o.StorageLocation,
		o.StorageBin,
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipDeliveryID,
		o.SupplyChainRelationshipDeliveryPlantID,
		o.Buyer,
		o.Seller,
		o.DeliverToParty,
		o.DeliverFromParty,
		o.DeliverToPlant,
		o.DeliverFromPlant,
		o.InventoryStockType,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_stock_product_stock_by_storage_bin_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductStockProductStockByStorageBinDatumInsertCacheMut.Lock()
		dataPlatformProductStockProductStockByStorageBinDatumInsertCache[key] = cache
		dataPlatformProductStockProductStockByStorageBinDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductStockProductStockByStorageBinDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductStockProductStockByStorageBinDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductStockProductStockByStorageBinDatumUpdateCache[key]
	dataPlatformProductStockProductStockByStorageBinDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductStockProductStockByStorageBinDatumAllColumns,
			dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_stock_product_stock_by_storage_bin_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_stock_product_stock_by_storage_bin_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductStockProductStockByStorageBinDatumType, dataPlatformProductStockProductStockByStorageBinDatumMapping, append(wl, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_stock_product_stock_by_storage_bin_data row")
	}

	if !cached {
		dataPlatformProductStockProductStockByStorageBinDatumUpdateCacheMut.Lock()
		dataPlatformProductStockProductStockByStorageBinDatumUpdateCache[key] = cache
		dataPlatformProductStockProductStockByStorageBinDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductStockProductStockByStorageBinDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductStockProductStockByStorageBinDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_stock_product_stock_by_storage_bin_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductStockProductStockByStorageBinDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductStockProductStockByStorageBinDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_stock_product_stock_by_storage_bin_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductStockProductStockByStorageBinDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductStockProductStockByStorageBinDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductStockProductStockByStorageBinDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductStockProductStockByStorageBinDatumUpsertCache[key]
	dataPlatformProductStockProductStockByStorageBinDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductStockProductStockByStorageBinDatumAllColumns,
			dataPlatformProductStockProductStockByStorageBinDatumColumnsWithDefault,
			dataPlatformProductStockProductStockByStorageBinDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductStockProductStockByStorageBinDatumAllColumns,
			dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_stock_product_stock_by_storage_bin_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_stock_product_stock_by_storage_bin_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_stock_product_stock_by_storage_bin_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductStockProductStockByStorageBinDatumType, dataPlatformProductStockProductStockByStorageBinDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductStockProductStockByStorageBinDatumType, dataPlatformProductStockProductStockByStorageBinDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductStockProductStockByStorageBinDatumType, dataPlatformProductStockProductStockByStorageBinDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_stock_product_stock_by_storage_bin_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_stock_product_stock_by_storage_bin_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductStockProductStockByStorageBinDatumUpsertCacheMut.Lock()
		dataPlatformProductStockProductStockByStorageBinDatumUpsertCache[key] = cache
		dataPlatformProductStockProductStockByStorageBinDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductStockProductStockByStorageBinDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductStockProductStockByStorageBinDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_stock_product_stock_by_storage_bin_data` WHERE `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=? AND `StorageBin`=? AND `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? AND `InventoryStockType`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductStockProductStockByStorageBinDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductStockProductStockByStorageBinDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductStockProductStockByStorageBinDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_stock_product_stock_by_storage_bin_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductStockProductStockByStorageBinDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductStockProductStockByStorageBinDatum(ctx, exec, o.Product, o.BusinessPartner, o.Plant, o.StorageLocation, o.StorageBin, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.InventoryStockType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductStockProductStockByStorageBinDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductStockProductStockByStorageBinDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_stock_product_stock_by_storage_bin_data`.* FROM `data_platform_product_stock_product_stock_by_storage_bin_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductStockProductStockByStorageBinDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductStockProductStockByStorageBinDatumExists checks if the DataPlatformProductStockProductStockByStorageBinDatum row exists.
func DataPlatformProductStockProductStockByStorageBinDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, storageLocation string, storageBin string, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, supplyChainRelationshipDeliveryPlantID int, buyer int, seller int, deliverToParty int, deliverFromParty int, deliverToPlant string, deliverFromPlant string, inventoryStockType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_stock_product_stock_by_storage_bin_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=? AND `StorageBin`=? AND `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? AND `InventoryStockType`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, businessPartner, plant, storageLocation, storageBin, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant, inventoryStockType)
	}
	row := exec.QueryRowContext(ctx, sql, product, businessPartner, plant, storageLocation, storageBin, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant, inventoryStockType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_stock_product_stock_by_storage_bin_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductStockProductStockByStorageBinDatum row exists.
func (o *DataPlatformProductStockProductStockByStorageBinDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductStockProductStockByStorageBinDatumExists(ctx, exec, o.Product, o.BusinessPartner, o.Plant, o.StorageLocation, o.StorageBin, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.InventoryStockType)
}
