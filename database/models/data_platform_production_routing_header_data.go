// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionRoutingHeaderDatum is an object representing the database table.
type DataPlatformProductionRoutingHeaderDatum struct {
	BusinessPartner               int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	ProductionRoutingGroup        string      `boil:"ProductionRoutingGroup" json:"ProductionRoutingGroup" toml:"ProductionRoutingGroup" yaml:"ProductionRoutingGroup"`
	ProductionRouting             string      `boil:"ProductionRouting" json:"ProductionRouting" toml:"ProductionRouting" yaml:"ProductionRouting"`
	ProductionRoutingInternalVers string      `boil:"ProductionRoutingInternalVers" json:"ProductionRoutingInternalVers" toml:"ProductionRoutingInternalVers" yaml:"ProductionRoutingInternalVers"`
	IsMarkedForDeletion           null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`
	BillOfOperationsDesc          null.String `boil:"BillOfOperationsDesc" json:"BillOfOperationsDesc,omitempty" toml:"BillOfOperationsDesc" yaml:"BillOfOperationsDesc,omitempty"`
	Plant                         null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	BillOfOperationsUsage         null.String `boil:"BillOfOperationsUsage" json:"BillOfOperationsUsage,omitempty" toml:"BillOfOperationsUsage" yaml:"BillOfOperationsUsage,omitempty"`
	BillOfOperationsStatus        null.String `boil:"BillOfOperationsStatus" json:"BillOfOperationsStatus,omitempty" toml:"BillOfOperationsStatus" yaml:"BillOfOperationsStatus,omitempty"`
	ResponsiblePlannerGroup       null.String `boil:"ResponsiblePlannerGroup" json:"ResponsiblePlannerGroup,omitempty" toml:"ResponsiblePlannerGroup" yaml:"ResponsiblePlannerGroup,omitempty"`
	MinimumLotSizeQuantity        null.String `boil:"MinimumLotSizeQuantity" json:"MinimumLotSizeQuantity,omitempty" toml:"MinimumLotSizeQuantity" yaml:"MinimumLotSizeQuantity,omitempty"`
	MaximumLotSizeQuantity        null.String `boil:"MaximumLotSizeQuantity" json:"MaximumLotSizeQuantity,omitempty" toml:"MaximumLotSizeQuantity" yaml:"MaximumLotSizeQuantity,omitempty"`
	BillOfOperationsUnit          null.String `boil:"BillOfOperationsUnit" json:"BillOfOperationsUnit,omitempty" toml:"BillOfOperationsUnit" yaml:"BillOfOperationsUnit,omitempty"`
	CreationDate                  null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	ValidityStartDate             null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate               null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	ChangeNumber                  null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`
	PlainLongText                 null.String `boil:"PlainLongText" json:"PlainLongText,omitempty" toml:"PlainLongText" yaml:"PlainLongText,omitempty"`
	MaterialAssignment            null.String `boil:"MaterialAssignment" json:"MaterialAssignment,omitempty" toml:"MaterialAssignment" yaml:"MaterialAssignment,omitempty"`

	R *dataPlatformProductionRoutingHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionRoutingHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionRoutingHeaderDatumColumns = struct {
	BusinessPartner               string
	ProductionRoutingGroup        string
	ProductionRouting             string
	ProductionRoutingInternalVers string
	IsMarkedForDeletion           string
	BillOfOperationsDesc          string
	Plant                         string
	BillOfOperationsUsage         string
	BillOfOperationsStatus        string
	ResponsiblePlannerGroup       string
	MinimumLotSizeQuantity        string
	MaximumLotSizeQuantity        string
	BillOfOperationsUnit          string
	CreationDate                  string
	LastChangeDate                string
	ValidityStartDate             string
	ValidityEndDate               string
	ChangeNumber                  string
	PlainLongText                 string
	MaterialAssignment            string
}{
	BusinessPartner:               "BusinessPartner",
	ProductionRoutingGroup:        "ProductionRoutingGroup",
	ProductionRouting:             "ProductionRouting",
	ProductionRoutingInternalVers: "ProductionRoutingInternalVers",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
	BillOfOperationsDesc:          "BillOfOperationsDesc",
	Plant:                         "Plant",
	BillOfOperationsUsage:         "BillOfOperationsUsage",
	BillOfOperationsStatus:        "BillOfOperationsStatus",
	ResponsiblePlannerGroup:       "ResponsiblePlannerGroup",
	MinimumLotSizeQuantity:        "MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:        "MaximumLotSizeQuantity",
	BillOfOperationsUnit:          "BillOfOperationsUnit",
	CreationDate:                  "CreationDate",
	LastChangeDate:                "LastChangeDate",
	ValidityStartDate:             "ValidityStartDate",
	ValidityEndDate:               "ValidityEndDate",
	ChangeNumber:                  "ChangeNumber",
	PlainLongText:                 "PlainLongText",
	MaterialAssignment:            "MaterialAssignment",
}

var DataPlatformProductionRoutingHeaderDatumTableColumns = struct {
	BusinessPartner               string
	ProductionRoutingGroup        string
	ProductionRouting             string
	ProductionRoutingInternalVers string
	IsMarkedForDeletion           string
	BillOfOperationsDesc          string
	Plant                         string
	BillOfOperationsUsage         string
	BillOfOperationsStatus        string
	ResponsiblePlannerGroup       string
	MinimumLotSizeQuantity        string
	MaximumLotSizeQuantity        string
	BillOfOperationsUnit          string
	CreationDate                  string
	LastChangeDate                string
	ValidityStartDate             string
	ValidityEndDate               string
	ChangeNumber                  string
	PlainLongText                 string
	MaterialAssignment            string
}{
	BusinessPartner:               "data_platform_production_routing_header_data.BusinessPartner",
	ProductionRoutingGroup:        "data_platform_production_routing_header_data.ProductionRoutingGroup",
	ProductionRouting:             "data_platform_production_routing_header_data.ProductionRouting",
	ProductionRoutingInternalVers: "data_platform_production_routing_header_data.ProductionRoutingInternalVers",
	IsMarkedForDeletion:           "data_platform_production_routing_header_data.IsMarkedForDeletion",
	BillOfOperationsDesc:          "data_platform_production_routing_header_data.BillOfOperationsDesc",
	Plant:                         "data_platform_production_routing_header_data.Plant",
	BillOfOperationsUsage:         "data_platform_production_routing_header_data.BillOfOperationsUsage",
	BillOfOperationsStatus:        "data_platform_production_routing_header_data.BillOfOperationsStatus",
	ResponsiblePlannerGroup:       "data_platform_production_routing_header_data.ResponsiblePlannerGroup",
	MinimumLotSizeQuantity:        "data_platform_production_routing_header_data.MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:        "data_platform_production_routing_header_data.MaximumLotSizeQuantity",
	BillOfOperationsUnit:          "data_platform_production_routing_header_data.BillOfOperationsUnit",
	CreationDate:                  "data_platform_production_routing_header_data.CreationDate",
	LastChangeDate:                "data_platform_production_routing_header_data.LastChangeDate",
	ValidityStartDate:             "data_platform_production_routing_header_data.ValidityStartDate",
	ValidityEndDate:               "data_platform_production_routing_header_data.ValidityEndDate",
	ChangeNumber:                  "data_platform_production_routing_header_data.ChangeNumber",
	PlainLongText:                 "data_platform_production_routing_header_data.PlainLongText",
	MaterialAssignment:            "data_platform_production_routing_header_data.MaterialAssignment",
}

// Generated where

var DataPlatformProductionRoutingHeaderDatumWhere = struct {
	BusinessPartner               whereHelperint
	ProductionRoutingGroup        whereHelperstring
	ProductionRouting             whereHelperstring
	ProductionRoutingInternalVers whereHelperstring
	IsMarkedForDeletion           whereHelpernull_Bool
	BillOfOperationsDesc          whereHelpernull_String
	Plant                         whereHelpernull_String
	BillOfOperationsUsage         whereHelpernull_String
	BillOfOperationsStatus        whereHelpernull_String
	ResponsiblePlannerGroup       whereHelpernull_String
	MinimumLotSizeQuantity        whereHelpernull_String
	MaximumLotSizeQuantity        whereHelpernull_String
	BillOfOperationsUnit          whereHelpernull_String
	CreationDate                  whereHelpernull_String
	LastChangeDate                whereHelpernull_String
	ValidityStartDate             whereHelpernull_String
	ValidityEndDate               whereHelpernull_String
	ChangeNumber                  whereHelpernull_String
	PlainLongText                 whereHelpernull_String
	MaterialAssignment            whereHelpernull_String
}{
	BusinessPartner:               whereHelperint{field: "`data_platform_production_routing_header_data`.`BusinessPartner`"},
	ProductionRoutingGroup:        whereHelperstring{field: "`data_platform_production_routing_header_data`.`ProductionRoutingGroup`"},
	ProductionRouting:             whereHelperstring{field: "`data_platform_production_routing_header_data`.`ProductionRouting`"},
	ProductionRoutingInternalVers: whereHelperstring{field: "`data_platform_production_routing_header_data`.`ProductionRoutingInternalVers`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`data_platform_production_routing_header_data`.`IsMarkedForDeletion`"},
	BillOfOperationsDesc:          whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`BillOfOperationsDesc`"},
	Plant:                         whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`Plant`"},
	BillOfOperationsUsage:         whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`BillOfOperationsUsage`"},
	BillOfOperationsStatus:        whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`BillOfOperationsStatus`"},
	ResponsiblePlannerGroup:       whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`ResponsiblePlannerGroup`"},
	MinimumLotSizeQuantity:        whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`MinimumLotSizeQuantity`"},
	MaximumLotSizeQuantity:        whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`MaximumLotSizeQuantity`"},
	BillOfOperationsUnit:          whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`BillOfOperationsUnit`"},
	CreationDate:                  whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`CreationDate`"},
	LastChangeDate:                whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`LastChangeDate`"},
	ValidityStartDate:             whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`ValidityStartDate`"},
	ValidityEndDate:               whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`ValidityEndDate`"},
	ChangeNumber:                  whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`ChangeNumber`"},
	PlainLongText:                 whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`PlainLongText`"},
	MaterialAssignment:            whereHelpernull_String{field: "`data_platform_production_routing_header_data`.`MaterialAssignment`"},
}

// DataPlatformProductionRoutingHeaderDatumRels is where relationship names are stored.
var DataPlatformProductionRoutingHeaderDatumRels = struct {
}{}

// dataPlatformProductionRoutingHeaderDatumR is where relationships are stored.
type dataPlatformProductionRoutingHeaderDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionRoutingHeaderDatumR) NewStruct() *dataPlatformProductionRoutingHeaderDatumR {
	return &dataPlatformProductionRoutingHeaderDatumR{}
}

// dataPlatformProductionRoutingHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionRoutingHeaderDatumL struct{}

var (
	dataPlatformProductionRoutingHeaderDatumAllColumns            = []string{"BusinessPartner", "ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingInternalVers", "IsMarkedForDeletion", "BillOfOperationsDesc", "Plant", "BillOfOperationsUsage", "BillOfOperationsStatus", "ResponsiblePlannerGroup", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "BillOfOperationsUnit", "CreationDate", "LastChangeDate", "ValidityStartDate", "ValidityEndDate", "ChangeNumber", "PlainLongText", "MaterialAssignment"}
	dataPlatformProductionRoutingHeaderDatumColumnsWithoutDefault = []string{"BusinessPartner", "ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingInternalVers", "IsMarkedForDeletion", "BillOfOperationsDesc", "Plant", "BillOfOperationsUsage", "BillOfOperationsStatus", "ResponsiblePlannerGroup", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "BillOfOperationsUnit", "CreationDate", "LastChangeDate", "ValidityStartDate", "ValidityEndDate", "ChangeNumber", "PlainLongText", "MaterialAssignment"}
	dataPlatformProductionRoutingHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformProductionRoutingHeaderDatumPrimaryKeyColumns     = []string{"BusinessPartner", "ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingInternalVers"}
	dataPlatformProductionRoutingHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionRoutingHeaderDatumSlice is an alias for a slice of pointers to DataPlatformProductionRoutingHeaderDatum.
	// This should almost always be used instead of []DataPlatformProductionRoutingHeaderDatum.
	DataPlatformProductionRoutingHeaderDatumSlice []*DataPlatformProductionRoutingHeaderDatum

	dataPlatformProductionRoutingHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionRoutingHeaderDatumType                 = reflect.TypeOf(&DataPlatformProductionRoutingHeaderDatum{})
	dataPlatformProductionRoutingHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformProductionRoutingHeaderDatumType)
	dataPlatformProductionRoutingHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionRoutingHeaderDatumType, dataPlatformProductionRoutingHeaderDatumMapping, dataPlatformProductionRoutingHeaderDatumPrimaryKeyColumns)
	dataPlatformProductionRoutingHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionRoutingHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionRoutingHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionRoutingHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionRoutingHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionRoutingHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionRoutingHeaderDatum record from the query.
func (q dataPlatformProductionRoutingHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionRoutingHeaderDatum, error) {
	o := &DataPlatformProductionRoutingHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_routing_header_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionRoutingHeaderDatum records from the query.
func (q dataPlatformProductionRoutingHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionRoutingHeaderDatumSlice, error) {
	var o []*DataPlatformProductionRoutingHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionRoutingHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionRoutingHeaderDatum records in the query.
func (q dataPlatformProductionRoutingHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_routing_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionRoutingHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_routing_header_data exists")
	}

	return count > 0, nil
}

// DataPlatformProductionRoutingHeaderData retrieves all the records using an executor.
func DataPlatformProductionRoutingHeaderData(mods ...qm.QueryMod) dataPlatformProductionRoutingHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_routing_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_routing_header_data`.*"})
	}

	return dataPlatformProductionRoutingHeaderDatumQuery{q}
}

// FindDataPlatformProductionRoutingHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionRoutingHeaderDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, productionRoutingGroup string, productionRouting string, productionRoutingInternalVers string, selectCols ...string) (*DataPlatformProductionRoutingHeaderDatum, error) {
	dataPlatformProductionRoutingHeaderDatumObj := &DataPlatformProductionRoutingHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_routing_header_data` where `BusinessPartner`=? AND `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingInternalVers`=?", sel,
	)

	q := queries.Raw(query, businessPartner, productionRoutingGroup, productionRouting, productionRoutingInternalVers)

	err := q.Bind(ctx, exec, dataPlatformProductionRoutingHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_routing_header_data")
	}

	return dataPlatformProductionRoutingHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionRoutingHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_routing_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionRoutingHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionRoutingHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionRoutingHeaderDatumInsertCache[key]
	dataPlatformProductionRoutingHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionRoutingHeaderDatumAllColumns,
			dataPlatformProductionRoutingHeaderDatumColumnsWithDefault,
			dataPlatformProductionRoutingHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionRoutingHeaderDatumType, dataPlatformProductionRoutingHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionRoutingHeaderDatumType, dataPlatformProductionRoutingHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_routing_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_routing_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_routing_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionRoutingHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_routing_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.ProductionRoutingGroup,
		o.ProductionRouting,
		o.ProductionRoutingInternalVers,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_routing_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionRoutingHeaderDatumInsertCacheMut.Lock()
		dataPlatformProductionRoutingHeaderDatumInsertCache[key] = cache
		dataPlatformProductionRoutingHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionRoutingHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionRoutingHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionRoutingHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionRoutingHeaderDatumUpdateCache[key]
	dataPlatformProductionRoutingHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionRoutingHeaderDatumAllColumns,
			dataPlatformProductionRoutingHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_routing_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_routing_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionRoutingHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionRoutingHeaderDatumType, dataPlatformProductionRoutingHeaderDatumMapping, append(wl, dataPlatformProductionRoutingHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_routing_header_data row")
	}

	if !cached {
		dataPlatformProductionRoutingHeaderDatumUpdateCacheMut.Lock()
		dataPlatformProductionRoutingHeaderDatumUpdateCache[key] = cache
		dataPlatformProductionRoutingHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionRoutingHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_routing_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionRoutingHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionRoutingHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_routing_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionRoutingHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionRoutingHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionRoutingHeaderDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionRoutingHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_routing_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionRoutingHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionRoutingHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionRoutingHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionRoutingHeaderDatumUpsertCache[key]
	dataPlatformProductionRoutingHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionRoutingHeaderDatumAllColumns,
			dataPlatformProductionRoutingHeaderDatumColumnsWithDefault,
			dataPlatformProductionRoutingHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionRoutingHeaderDatumAllColumns,
			dataPlatformProductionRoutingHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_routing_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_routing_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_routing_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionRoutingHeaderDatumType, dataPlatformProductionRoutingHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionRoutingHeaderDatumType, dataPlatformProductionRoutingHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_routing_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionRoutingHeaderDatumType, dataPlatformProductionRoutingHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_routing_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_routing_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionRoutingHeaderDatumUpsertCacheMut.Lock()
		dataPlatformProductionRoutingHeaderDatumUpsertCache[key] = cache
		dataPlatformProductionRoutingHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionRoutingHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionRoutingHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionRoutingHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionRoutingHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_routing_header_data` WHERE `BusinessPartner`=? AND `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingInternalVers`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_routing_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionRoutingHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionRoutingHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_routing_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionRoutingHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionRoutingHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_routing_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionRoutingHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionRoutingHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionRoutingHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionRoutingHeaderDatum(ctx, exec, o.BusinessPartner, o.ProductionRoutingGroup, o.ProductionRouting, o.ProductionRoutingInternalVers)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionRoutingHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionRoutingHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionRoutingHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_routing_header_data`.* FROM `data_platform_production_routing_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionRoutingHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionRoutingHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionRoutingHeaderDatumExists checks if the DataPlatformProductionRoutingHeaderDatum row exists.
func DataPlatformProductionRoutingHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, productionRoutingGroup string, productionRouting string, productionRoutingInternalVers string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_routing_header_data` where `BusinessPartner`=? AND `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingInternalVers`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, productionRoutingGroup, productionRouting, productionRoutingInternalVers)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, productionRoutingGroup, productionRouting, productionRoutingInternalVers)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_routing_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionRoutingHeaderDatum row exists.
func (o *DataPlatformProductionRoutingHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionRoutingHeaderDatumExists(ctx, exec, o.BusinessPartner, o.ProductionRoutingGroup, o.ProductionRouting, o.ProductionRoutingInternalVers)
}
