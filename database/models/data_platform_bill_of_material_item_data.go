// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBillOfMaterialItemDatum is an object representing the database table.
type DataPlatformBillOfMaterialItemDatum struct {
	BillOfMaterial                                 int          `boil:"BillOfMaterial" json:"BillOfMaterial" toml:"BillOfMaterial" yaml:"BillOfMaterial"`
	BillOfMaterialItem                             int          `boil:"BillOfMaterialItem" json:"BillOfMaterialItem" toml:"BillOfMaterialItem" yaml:"BillOfMaterialItem"`
	SupplyChainRelationshipID                      int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID              int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID         int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipStockConfPlantID        int          `boil:"SupplyChainRelationshipStockConfPlantID" json:"SupplyChainRelationshipStockConfPlantID" toml:"SupplyChainRelationshipStockConfPlantID" yaml:"SupplyChainRelationshipStockConfPlantID"`
	Product                                        string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ProductionPlantBusinessPartner                 int          `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner"`
	ProductionPlant                                string       `boil:"ProductionPlant" json:"ProductionPlant" toml:"ProductionPlant" yaml:"ProductionPlant"`
	ComponentProduct                               string       `boil:"ComponentProduct" json:"ComponentProduct" toml:"ComponentProduct" yaml:"ComponentProduct"`
	ComponentProductBuyer                          int          `boil:"ComponentProductBuyer" json:"ComponentProductBuyer" toml:"ComponentProductBuyer" yaml:"ComponentProductBuyer"`
	ComponentProductSeller                         int          `boil:"ComponentProductSeller" json:"ComponentProductSeller" toml:"ComponentProductSeller" yaml:"ComponentProductSeller"`
	ComponentProductDeliverToParty                 int          `boil:"ComponentProductDeliverToParty" json:"ComponentProductDeliverToParty" toml:"ComponentProductDeliverToParty" yaml:"ComponentProductDeliverToParty"`
	ComponentProductDeliverToPlant                 string       `boil:"ComponentProductDeliverToPlant" json:"ComponentProductDeliverToPlant" toml:"ComponentProductDeliverToPlant" yaml:"ComponentProductDeliverToPlant"`
	ComponentProductDeliverFromParty               int          `boil:"ComponentProductDeliverFromParty" json:"ComponentProductDeliverFromParty" toml:"ComponentProductDeliverFromParty" yaml:"ComponentProductDeliverFromParty"`
	ComponentProductDeliverFromPlant               string       `boil:"ComponentProductDeliverFromPlant" json:"ComponentProductDeliverFromPlant" toml:"ComponentProductDeliverFromPlant" yaml:"ComponentProductDeliverFromPlant"`
	StockConfirmationBusinessPartner               int          `boil:"StockConfirmationBusinessPartner" json:"StockConfirmationBusinessPartner" toml:"StockConfirmationBusinessPartner" yaml:"StockConfirmationBusinessPartner"`
	StockConfirmationPlant                         string       `boil:"StockConfirmationPlant" json:"StockConfirmationPlant" toml:"StockConfirmationPlant" yaml:"StockConfirmationPlant"`
	ComponentProductStandardQuantityInBaseUnit     float32      `boil:"ComponentProductStandardQuantityInBaseUnit" json:"ComponentProductStandardQuantityInBaseUnit" toml:"ComponentProductStandardQuantityInBaseUnit" yaml:"ComponentProductStandardQuantityInBaseUnit"`
	ComponentProductStandardQuantityInDeliveryUnit float32      `boil:"ComponentProductStandardQuantityInDeliveryUnit" json:"ComponentProductStandardQuantityInDeliveryUnit" toml:"ComponentProductStandardQuantityInDeliveryUnit" yaml:"ComponentProductStandardQuantityInDeliveryUnit"`
	ComponentProductBaseUnit                       string       `boil:"ComponentProductBaseUnit" json:"ComponentProductBaseUnit" toml:"ComponentProductBaseUnit" yaml:"ComponentProductBaseUnit"`
	ComponentProductDeliveryUnit                   string       `boil:"ComponentProductDeliveryUnit" json:"ComponentProductDeliveryUnit" toml:"ComponentProductDeliveryUnit" yaml:"ComponentProductDeliveryUnit"`
	ComponentProductStandardScrapInPercent         null.Float32 `boil:"ComponentProductStandardScrapInPercent" json:"ComponentProductStandardScrapInPercent,omitempty" toml:"ComponentProductStandardScrapInPercent" yaml:"ComponentProductStandardScrapInPercent,omitempty"`
	IsMarkedForBackflush                           null.Bool    `boil:"IsMarkedForBackflush" json:"IsMarkedForBackflush,omitempty" toml:"IsMarkedForBackflush" yaml:"IsMarkedForBackflush,omitempty"`
	BillOfMaterialItemText                         null.String  `boil:"BillOfMaterialItemText" json:"BillOfMaterialItemText,omitempty" toml:"BillOfMaterialItemText" yaml:"BillOfMaterialItemText,omitempty"`
	ValidityStartDate                              null.String  `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate                                null.String  `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	CreationDate                                   string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                                 string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                            null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBillOfMaterialItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBillOfMaterialItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBillOfMaterialItemDatumColumns = struct {
	BillOfMaterial                                 string
	BillOfMaterialItem                             string
	SupplyChainRelationshipID                      string
	SupplyChainRelationshipDeliveryID              string
	SupplyChainRelationshipDeliveryPlantID         string
	SupplyChainRelationshipStockConfPlantID        string
	Product                                        string
	ProductionPlantBusinessPartner                 string
	ProductionPlant                                string
	ComponentProduct                               string
	ComponentProductBuyer                          string
	ComponentProductSeller                         string
	ComponentProductDeliverToParty                 string
	ComponentProductDeliverToPlant                 string
	ComponentProductDeliverFromParty               string
	ComponentProductDeliverFromPlant               string
	StockConfirmationBusinessPartner               string
	StockConfirmationPlant                         string
	ComponentProductStandardQuantityInBaseUnit     string
	ComponentProductStandardQuantityInDeliveryUnit string
	ComponentProductBaseUnit                       string
	ComponentProductDeliveryUnit                   string
	ComponentProductStandardScrapInPercent         string
	IsMarkedForBackflush                           string
	BillOfMaterialItemText                         string
	ValidityStartDate                              string
	ValidityEndDate                                string
	CreationDate                                   string
	LastChangeDate                                 string
	IsMarkedForDeletion                            string
}{
	BillOfMaterial:                                 "BillOfMaterial",
	BillOfMaterialItem:                             "BillOfMaterialItem",
	SupplyChainRelationshipID:                      "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:              "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:         "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipStockConfPlantID:        "SupplyChainRelationshipStockConfPlantID",
	Product:                                        "Product",
	ProductionPlantBusinessPartner:                 "ProductionPlantBusinessPartner",
	ProductionPlant:                                "ProductionPlant",
	ComponentProduct:                               "ComponentProduct",
	ComponentProductBuyer:                          "ComponentProductBuyer",
	ComponentProductSeller:                         "ComponentProductSeller",
	ComponentProductDeliverToParty:                 "ComponentProductDeliverToParty",
	ComponentProductDeliverToPlant:                 "ComponentProductDeliverToPlant",
	ComponentProductDeliverFromParty:               "ComponentProductDeliverFromParty",
	ComponentProductDeliverFromPlant:               "ComponentProductDeliverFromPlant",
	StockConfirmationBusinessPartner:               "StockConfirmationBusinessPartner",
	StockConfirmationPlant:                         "StockConfirmationPlant",
	ComponentProductStandardQuantityInBaseUnit:     "ComponentProductStandardQuantityInBaseUnit",
	ComponentProductStandardQuantityInDeliveryUnit: "ComponentProductStandardQuantityInDeliveryUnit",
	ComponentProductBaseUnit:                       "ComponentProductBaseUnit",
	ComponentProductDeliveryUnit:                   "ComponentProductDeliveryUnit",
	ComponentProductStandardScrapInPercent:         "ComponentProductStandardScrapInPercent",
	IsMarkedForBackflush:                           "IsMarkedForBackflush",
	BillOfMaterialItemText:                         "BillOfMaterialItemText",
	ValidityStartDate:                              "ValidityStartDate",
	ValidityEndDate:                                "ValidityEndDate",
	CreationDate:                                   "CreationDate",
	LastChangeDate:                                 "LastChangeDate",
	IsMarkedForDeletion:                            "IsMarkedForDeletion",
}

var DataPlatformBillOfMaterialItemDatumTableColumns = struct {
	BillOfMaterial                                 string
	BillOfMaterialItem                             string
	SupplyChainRelationshipID                      string
	SupplyChainRelationshipDeliveryID              string
	SupplyChainRelationshipDeliveryPlantID         string
	SupplyChainRelationshipStockConfPlantID        string
	Product                                        string
	ProductionPlantBusinessPartner                 string
	ProductionPlant                                string
	ComponentProduct                               string
	ComponentProductBuyer                          string
	ComponentProductSeller                         string
	ComponentProductDeliverToParty                 string
	ComponentProductDeliverToPlant                 string
	ComponentProductDeliverFromParty               string
	ComponentProductDeliverFromPlant               string
	StockConfirmationBusinessPartner               string
	StockConfirmationPlant                         string
	ComponentProductStandardQuantityInBaseUnit     string
	ComponentProductStandardQuantityInDeliveryUnit string
	ComponentProductBaseUnit                       string
	ComponentProductDeliveryUnit                   string
	ComponentProductStandardScrapInPercent         string
	IsMarkedForBackflush                           string
	BillOfMaterialItemText                         string
	ValidityStartDate                              string
	ValidityEndDate                                string
	CreationDate                                   string
	LastChangeDate                                 string
	IsMarkedForDeletion                            string
}{
	BillOfMaterial:                                 "data_platform_bill_of_material_item_data.BillOfMaterial",
	BillOfMaterialItem:                             "data_platform_bill_of_material_item_data.BillOfMaterialItem",
	SupplyChainRelationshipID:                      "data_platform_bill_of_material_item_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:              "data_platform_bill_of_material_item_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:         "data_platform_bill_of_material_item_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipStockConfPlantID:        "data_platform_bill_of_material_item_data.SupplyChainRelationshipStockConfPlantID",
	Product:                                        "data_platform_bill_of_material_item_data.Product",
	ProductionPlantBusinessPartner:                 "data_platform_bill_of_material_item_data.ProductionPlantBusinessPartner",
	ProductionPlant:                                "data_platform_bill_of_material_item_data.ProductionPlant",
	ComponentProduct:                               "data_platform_bill_of_material_item_data.ComponentProduct",
	ComponentProductBuyer:                          "data_platform_bill_of_material_item_data.ComponentProductBuyer",
	ComponentProductSeller:                         "data_platform_bill_of_material_item_data.ComponentProductSeller",
	ComponentProductDeliverToParty:                 "data_platform_bill_of_material_item_data.ComponentProductDeliverToParty",
	ComponentProductDeliverToPlant:                 "data_platform_bill_of_material_item_data.ComponentProductDeliverToPlant",
	ComponentProductDeliverFromParty:               "data_platform_bill_of_material_item_data.ComponentProductDeliverFromParty",
	ComponentProductDeliverFromPlant:               "data_platform_bill_of_material_item_data.ComponentProductDeliverFromPlant",
	StockConfirmationBusinessPartner:               "data_platform_bill_of_material_item_data.StockConfirmationBusinessPartner",
	StockConfirmationPlant:                         "data_platform_bill_of_material_item_data.StockConfirmationPlant",
	ComponentProductStandardQuantityInBaseUnit:     "data_platform_bill_of_material_item_data.ComponentProductStandardQuantityInBaseUnit",
	ComponentProductStandardQuantityInDeliveryUnit: "data_platform_bill_of_material_item_data.ComponentProductStandardQuantityInDeliveryUnit",
	ComponentProductBaseUnit:                       "data_platform_bill_of_material_item_data.ComponentProductBaseUnit",
	ComponentProductDeliveryUnit:                   "data_platform_bill_of_material_item_data.ComponentProductDeliveryUnit",
	ComponentProductStandardScrapInPercent:         "data_platform_bill_of_material_item_data.ComponentProductStandardScrapInPercent",
	IsMarkedForBackflush:                           "data_platform_bill_of_material_item_data.IsMarkedForBackflush",
	BillOfMaterialItemText:                         "data_platform_bill_of_material_item_data.BillOfMaterialItemText",
	ValidityStartDate:                              "data_platform_bill_of_material_item_data.ValidityStartDate",
	ValidityEndDate:                                "data_platform_bill_of_material_item_data.ValidityEndDate",
	CreationDate:                                   "data_platform_bill_of_material_item_data.CreationDate",
	LastChangeDate:                                 "data_platform_bill_of_material_item_data.LastChangeDate",
	IsMarkedForDeletion:                            "data_platform_bill_of_material_item_data.IsMarkedForDeletion",
}

// Generated where

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DataPlatformBillOfMaterialItemDatumWhere = struct {
	BillOfMaterial                                 whereHelperint
	BillOfMaterialItem                             whereHelperint
	SupplyChainRelationshipID                      whereHelperint
	SupplyChainRelationshipDeliveryID              whereHelperint
	SupplyChainRelationshipDeliveryPlantID         whereHelperint
	SupplyChainRelationshipStockConfPlantID        whereHelperint
	Product                                        whereHelperstring
	ProductionPlantBusinessPartner                 whereHelperint
	ProductionPlant                                whereHelperstring
	ComponentProduct                               whereHelperstring
	ComponentProductBuyer                          whereHelperint
	ComponentProductSeller                         whereHelperint
	ComponentProductDeliverToParty                 whereHelperint
	ComponentProductDeliverToPlant                 whereHelperstring
	ComponentProductDeliverFromParty               whereHelperint
	ComponentProductDeliverFromPlant               whereHelperstring
	StockConfirmationBusinessPartner               whereHelperint
	StockConfirmationPlant                         whereHelperstring
	ComponentProductStandardQuantityInBaseUnit     whereHelperfloat32
	ComponentProductStandardQuantityInDeliveryUnit whereHelperfloat32
	ComponentProductBaseUnit                       whereHelperstring
	ComponentProductDeliveryUnit                   whereHelperstring
	ComponentProductStandardScrapInPercent         whereHelpernull_Float32
	IsMarkedForBackflush                           whereHelpernull_Bool
	BillOfMaterialItemText                         whereHelpernull_String
	ValidityStartDate                              whereHelpernull_String
	ValidityEndDate                                whereHelpernull_String
	CreationDate                                   whereHelperstring
	LastChangeDate                                 whereHelperstring
	IsMarkedForDeletion                            whereHelpernull_Bool
}{
	BillOfMaterial:                                 whereHelperint{field: "`data_platform_bill_of_material_item_data`.`BillOfMaterial`"},
	BillOfMaterialItem:                             whereHelperint{field: "`data_platform_bill_of_material_item_data`.`BillOfMaterialItem`"},
	SupplyChainRelationshipID:                      whereHelperint{field: "`data_platform_bill_of_material_item_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:              whereHelperint{field: "`data_platform_bill_of_material_item_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:         whereHelperint{field: "`data_platform_bill_of_material_item_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipStockConfPlantID:        whereHelperint{field: "`data_platform_bill_of_material_item_data`.`SupplyChainRelationshipStockConfPlantID`"},
	Product:                                        whereHelperstring{field: "`data_platform_bill_of_material_item_data`.`Product`"},
	ProductionPlantBusinessPartner:                 whereHelperint{field: "`data_platform_bill_of_material_item_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                                whereHelperstring{field: "`data_platform_bill_of_material_item_data`.`ProductionPlant`"},
	ComponentProduct:                               whereHelperstring{field: "`data_platform_bill_of_material_item_data`.`ComponentProduct`"},
	ComponentProductBuyer:                          whereHelperint{field: "`data_platform_bill_of_material_item_data`.`ComponentProductBuyer`"},
	ComponentProductSeller:                         whereHelperint{field: "`data_platform_bill_of_material_item_data`.`ComponentProductSeller`"},
	ComponentProductDeliverToParty:                 whereHelperint{field: "`data_platform_bill_of_material_item_data`.`ComponentProductDeliverToParty`"},
	ComponentProductDeliverToPlant:                 whereHelperstring{field: "`data_platform_bill_of_material_item_data`.`ComponentProductDeliverToPlant`"},
	ComponentProductDeliverFromParty:               whereHelperint{field: "`data_platform_bill_of_material_item_data`.`ComponentProductDeliverFromParty`"},
	ComponentProductDeliverFromPlant:               whereHelperstring{field: "`data_platform_bill_of_material_item_data`.`ComponentProductDeliverFromPlant`"},
	StockConfirmationBusinessPartner:               whereHelperint{field: "`data_platform_bill_of_material_item_data`.`StockConfirmationBusinessPartner`"},
	StockConfirmationPlant:                         whereHelperstring{field: "`data_platform_bill_of_material_item_data`.`StockConfirmationPlant`"},
	ComponentProductStandardQuantityInBaseUnit:     whereHelperfloat32{field: "`data_platform_bill_of_material_item_data`.`ComponentProductStandardQuantityInBaseUnit`"},
	ComponentProductStandardQuantityInDeliveryUnit: whereHelperfloat32{field: "`data_platform_bill_of_material_item_data`.`ComponentProductStandardQuantityInDeliveryUnit`"},
	ComponentProductBaseUnit:                       whereHelperstring{field: "`data_platform_bill_of_material_item_data`.`ComponentProductBaseUnit`"},
	ComponentProductDeliveryUnit:                   whereHelperstring{field: "`data_platform_bill_of_material_item_data`.`ComponentProductDeliveryUnit`"},
	ComponentProductStandardScrapInPercent:         whereHelpernull_Float32{field: "`data_platform_bill_of_material_item_data`.`ComponentProductStandardScrapInPercent`"},
	IsMarkedForBackflush:                           whereHelpernull_Bool{field: "`data_platform_bill_of_material_item_data`.`IsMarkedForBackflush`"},
	BillOfMaterialItemText:                         whereHelpernull_String{field: "`data_platform_bill_of_material_item_data`.`BillOfMaterialItemText`"},
	ValidityStartDate:                              whereHelpernull_String{field: "`data_platform_bill_of_material_item_data`.`ValidityStartDate`"},
	ValidityEndDate:                                whereHelpernull_String{field: "`data_platform_bill_of_material_item_data`.`ValidityEndDate`"},
	CreationDate:                                   whereHelperstring{field: "`data_platform_bill_of_material_item_data`.`CreationDate`"},
	LastChangeDate:                                 whereHelperstring{field: "`data_platform_bill_of_material_item_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                            whereHelpernull_Bool{field: "`data_platform_bill_of_material_item_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBillOfMaterialItemDatumRels is where relationship names are stored.
var DataPlatformBillOfMaterialItemDatumRels = struct {
	ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum             string
	ComponentProductBuyerDataPlatformSCRGeneralDatum                      string
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum                   string
	ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum     string
	ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum string
	BillOfMaterialDataPlatformOrdersItemData                              string
	BillOfMaterialDataPlatformProductionOrderItemComponentData            string
}{
	ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum:             "ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum",
	ComponentProductBuyerDataPlatformSCRGeneralDatum:                      "ComponentProductBuyerDataPlatformSCRGeneralDatum",
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum:                   "BillOfMaterialDataPlatformBillOfMaterialHeaderDatum",
	ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum:     "ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: "ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	BillOfMaterialDataPlatformOrdersItemData:                              "BillOfMaterialDataPlatformOrdersItemData",
	BillOfMaterialDataPlatformProductionOrderItemComponentData:            "BillOfMaterialDataPlatformProductionOrderItemComponentData",
}

// dataPlatformBillOfMaterialItemDatumR is where relationships are stored.
type dataPlatformBillOfMaterialItemDatumR struct {
	ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum             *DataPlatformSCRDeliveryRelationDatum              `boil:"ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum" json:"ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum" toml:"ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum" yaml:"ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum"`
	ComponentProductBuyerDataPlatformSCRGeneralDatum                      *DataPlatformSCRGeneralDatum                       `boil:"ComponentProductBuyerDataPlatformSCRGeneralDatum" json:"ComponentProductBuyerDataPlatformSCRGeneralDatum" toml:"ComponentProductBuyerDataPlatformSCRGeneralDatum" yaml:"ComponentProductBuyerDataPlatformSCRGeneralDatum"`
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum                   *DataPlatformBillOfMaterialHeaderDatum             `boil:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" json:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" toml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" yaml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum"`
	ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum     *DataPlatformQuantityUnitQuantityUnitDatum         `boil:"ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum         `boil:"ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	BillOfMaterialDataPlatformOrdersItemData                              DataPlatformOrdersItemDatumSlice                   `boil:"BillOfMaterialDataPlatformOrdersItemData" json:"BillOfMaterialDataPlatformOrdersItemData" toml:"BillOfMaterialDataPlatformOrdersItemData" yaml:"BillOfMaterialDataPlatformOrdersItemData"`
	BillOfMaterialDataPlatformProductionOrderItemComponentData            DataPlatformProductionOrderItemComponentDatumSlice `boil:"BillOfMaterialDataPlatformProductionOrderItemComponentData" json:"BillOfMaterialDataPlatformProductionOrderItemComponentData" toml:"BillOfMaterialDataPlatformProductionOrderItemComponentData" yaml:"BillOfMaterialDataPlatformProductionOrderItemComponentData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBillOfMaterialItemDatumR) NewStruct() *dataPlatformBillOfMaterialItemDatumR {
	return &dataPlatformBillOfMaterialItemDatumR{}
}

func (r *dataPlatformBillOfMaterialItemDatumR) GetComponentProductBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformBillOfMaterialItemDatumR) GetComponentProductBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformBillOfMaterialItemDatumR) GetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum() *DataPlatformBillOfMaterialHeaderDatum {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum
}

func (r *dataPlatformBillOfMaterialItemDatumR) GetComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformBillOfMaterialItemDatumR) GetComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformBillOfMaterialItemDatumR) GetBillOfMaterialDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformOrdersItemData
}

func (r *dataPlatformBillOfMaterialItemDatumR) GetBillOfMaterialDataPlatformProductionOrderItemComponentData() DataPlatformProductionOrderItemComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformProductionOrderItemComponentData
}

// dataPlatformBillOfMaterialItemDatumL is where Load methods for each relationship are stored.
type dataPlatformBillOfMaterialItemDatumL struct{}

var (
	dataPlatformBillOfMaterialItemDatumAllColumns            = []string{"BillOfMaterial", "BillOfMaterialItem", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipStockConfPlantID", "Product", "ProductionPlantBusinessPartner", "ProductionPlant", "ComponentProduct", "ComponentProductBuyer", "ComponentProductSeller", "ComponentProductDeliverToParty", "ComponentProductDeliverToPlant", "ComponentProductDeliverFromParty", "ComponentProductDeliverFromPlant", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "ComponentProductStandardQuantityInBaseUnit", "ComponentProductStandardQuantityInDeliveryUnit", "ComponentProductBaseUnit", "ComponentProductDeliveryUnit", "ComponentProductStandardScrapInPercent", "IsMarkedForBackflush", "BillOfMaterialItemText", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformBillOfMaterialItemDatumColumnsWithoutDefault = []string{"BillOfMaterial", "BillOfMaterialItem", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipStockConfPlantID", "Product", "ProductionPlantBusinessPartner", "ProductionPlant", "ComponentProduct", "ComponentProductBuyer", "ComponentProductSeller", "ComponentProductDeliverToParty", "ComponentProductDeliverToPlant", "ComponentProductDeliverFromParty", "ComponentProductDeliverFromPlant", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "ComponentProductStandardQuantityInBaseUnit", "ComponentProductStandardQuantityInDeliveryUnit", "ComponentProductBaseUnit", "ComponentProductDeliveryUnit", "ComponentProductStandardScrapInPercent", "IsMarkedForBackflush", "BillOfMaterialItemText", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformBillOfMaterialItemDatumColumnsWithDefault    = []string{}
	dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns     = []string{"BillOfMaterial", "BillOfMaterialItem"}
	dataPlatformBillOfMaterialItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBillOfMaterialItemDatumSlice is an alias for a slice of pointers to DataPlatformBillOfMaterialItemDatum.
	// This should almost always be used instead of []DataPlatformBillOfMaterialItemDatum.
	DataPlatformBillOfMaterialItemDatumSlice []*DataPlatformBillOfMaterialItemDatum

	dataPlatformBillOfMaterialItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBillOfMaterialItemDatumType                 = reflect.TypeOf(&DataPlatformBillOfMaterialItemDatum{})
	dataPlatformBillOfMaterialItemDatumMapping              = queries.MakeStructMapping(dataPlatformBillOfMaterialItemDatumType)
	dataPlatformBillOfMaterialItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBillOfMaterialItemDatumType, dataPlatformBillOfMaterialItemDatumMapping, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns)
	dataPlatformBillOfMaterialItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformBillOfMaterialItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBillOfMaterialItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBillOfMaterialItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBillOfMaterialItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBillOfMaterialItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformBillOfMaterialItemDatum record from the query.
func (q dataPlatformBillOfMaterialItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBillOfMaterialItemDatum, error) {
	o := &DataPlatformBillOfMaterialItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_bill_of_material_item_data")
	}

	return o, nil
}

// All returns all DataPlatformBillOfMaterialItemDatum records from the query.
func (q dataPlatformBillOfMaterialItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBillOfMaterialItemDatumSlice, error) {
	var o []*DataPlatformBillOfMaterialItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBillOfMaterialItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformBillOfMaterialItemDatum records in the query.
func (q dataPlatformBillOfMaterialItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_bill_of_material_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBillOfMaterialItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_bill_of_material_item_data exists")
	}

	return count > 0, nil
}

// ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformBillOfMaterialItemDatum) ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.ComponentProductBuyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// ComponentProductBuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformBillOfMaterialItemDatum) ComponentProductBuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.ComponentProductBuyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// BillOfMaterialDataPlatformBillOfMaterialHeaderDatum pointed to by the foreign key.
func (o *DataPlatformBillOfMaterialItemDatum) BillOfMaterialDataPlatformBillOfMaterialHeaderDatum(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillOfMaterial` = ?", o.BillOfMaterial),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformBillOfMaterialItemDatum) ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ComponentProductBaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformBillOfMaterialItemDatum) ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ComponentProductDeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// BillOfMaterialDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via BillOfMaterial column.
func (o *DataPlatformBillOfMaterialItemDatum) BillOfMaterialDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`BillOfMaterial`=?", o.BillOfMaterial),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// BillOfMaterialDataPlatformProductionOrderItemComponentData retrieves all the data_platform_production_order_item_component_datum's DataPlatformProductionOrderItemComponentData with an executor via BillOfMaterial column.
func (o *DataPlatformBillOfMaterialItemDatum) BillOfMaterialDataPlatformProductionOrderItemComponentData(mods ...qm.QueryMod) dataPlatformProductionOrderItemComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_component_data`.`BillOfMaterial`=?", o.BillOfMaterial),
	)

	return DataPlatformProductionOrderItemComponentData(queryMods...)
}

// LoadComponentProductBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBillOfMaterialItemDatumL) LoadComponentProductBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialItemDatum
	var object *DataPlatformBillOfMaterialItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialItemDatum.(*DataPlatformBillOfMaterialItemDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialItemDatum.(*[]*DataPlatformBillOfMaterialItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialItemDatumR{}
		}
		args = append(args, object.ComponentProductBuyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialItemDatumR{}
			}

			for _, a := range args {
				if a == obj.ComponentProductBuyer {
					continue Outer
				}
			}

			args = append(args, obj.ComponentProductBuyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentProductBuyer == foreign.Buyer {
				local.R.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBillOfMaterialItemDatumL) LoadComponentProductBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialItemDatum
	var object *DataPlatformBillOfMaterialItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialItemDatum.(*DataPlatformBillOfMaterialItemDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialItemDatum.(*[]*DataPlatformBillOfMaterialItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialItemDatumR{}
		}
		args = append(args, object.ComponentProductBuyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialItemDatumR{}
			}

			for _, a := range args {
				if a == obj.ComponentProductBuyer {
					continue Outer
				}
			}

			args = append(args, obj.ComponentProductBuyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ComponentProductBuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentProductBuyer == foreign.Buyer {
				local.R.ComponentProductBuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBillOfMaterialItemDatumL) LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialItemDatum
	var object *DataPlatformBillOfMaterialItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialItemDatum.(*DataPlatformBillOfMaterialItemDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialItemDatum.(*[]*DataPlatformBillOfMaterialItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialItemDatumR{}
		}
		args = append(args, object.BillOfMaterial)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialItemDatumR{}
			}

			for _, a := range args {
				if a == obj.BillOfMaterial {
					continue Outer
				}
			}

			args = append(args, obj.BillOfMaterial)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBillOfMaterialHeaderDatum")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBillOfMaterialHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillOfMaterial == foreign.BillOfMaterial {
				local.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBillOfMaterialItemDatumL) LoadComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialItemDatum
	var object *DataPlatformBillOfMaterialItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialItemDatum.(*DataPlatformBillOfMaterialItemDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialItemDatum.(*[]*DataPlatformBillOfMaterialItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialItemDatumR{}
		}
		args = append(args, object.ComponentProductBaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialItemDatumR{}
			}

			for _, a := range args {
				if a == obj.ComponentProductBaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.ComponentProductBaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentProductBaseUnit == foreign.QuantityUnit {
				local.R.ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBillOfMaterialItemDatumL) LoadComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialItemDatum
	var object *DataPlatformBillOfMaterialItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialItemDatum.(*DataPlatformBillOfMaterialItemDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialItemDatum.(*[]*DataPlatformBillOfMaterialItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialItemDatumR{}
		}
		args = append(args, object.ComponentProductDeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialItemDatumR{}
			}

			for _, a := range args {
				if a == obj.ComponentProductDeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.ComponentProductDeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentProductDeliveryUnit == foreign.QuantityUnit {
				local.R.ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillOfMaterialDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBillOfMaterialItemDatumL) LoadBillOfMaterialDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialItemDatum
	var object *DataPlatformBillOfMaterialItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialItemDatum.(*DataPlatformBillOfMaterialItemDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialItemDatum.(*[]*DataPlatformBillOfMaterialItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialItemDatumR{}
		}
		args = append(args, object.BillOfMaterial)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillOfMaterial) {
					continue Outer
				}
			}

			args = append(args, obj.BillOfMaterial)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.BillOfMaterialDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BillOfMaterial, foreign.BillOfMaterial) {
				local.R.BillOfMaterialDataPlatformOrdersItemData = append(local.R.BillOfMaterialDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillOfMaterialDataPlatformProductionOrderItemComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBillOfMaterialItemDatumL) LoadBillOfMaterialDataPlatformProductionOrderItemComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialItemDatum
	var object *DataPlatformBillOfMaterialItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialItemDatum.(*DataPlatformBillOfMaterialItemDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialItemDatum.(*[]*DataPlatformBillOfMaterialItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialItemDatumR{}
		}
		args = append(args, object.BillOfMaterial)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialItemDatumR{}
			}

			for _, a := range args {
				if a == obj.BillOfMaterial {
					continue Outer
				}
			}

			args = append(args, obj.BillOfMaterial)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_component_data`),
		qm.WhereIn(`data_platform_production_order_item_component_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_component_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_component_data")
	}

	if singular {
		object.R.BillOfMaterialDataPlatformProductionOrderItemComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BillOfMaterial == foreign.BillOfMaterial {
				local.R.BillOfMaterialDataPlatformProductionOrderItemComponentData = append(local.R.BillOfMaterialDataPlatformProductionOrderItemComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// SetComponentProductBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformBillOfMaterialItemDatum to the related item.
// Sets o.R.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformBillOfMaterialItemDatum) SetComponentProductBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentProductBuyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialItemDatumR{
			ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetComponentProductBuyerDataPlatformSCRGeneralDatum of the dataPlatformBillOfMaterialItemDatum to the related item.
// Sets o.R.ComponentProductBuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformBillOfMaterialItemDatum) SetComponentProductBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentProductBuyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialItemDatumR{
			ComponentProductBuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum of the dataPlatformBillOfMaterialItemDatum to the related item.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum to related.
func (o *DataPlatformBillOfMaterialItemDatum) SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillOfMaterial, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillOfMaterial = related.BillOfMaterial
	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialItemDatumR{
			BillOfMaterialDataPlatformBillOfMaterialHeaderDatum: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = related
	}

	return nil
}

// SetComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformBillOfMaterialItemDatum to the related item.
// Sets o.R.ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformBillOfMaterialItemDatum) SetComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentProductBaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialItemDatumR{
			ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ComponentProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformBillOfMaterialItemDatum to the related item.
// Sets o.R.ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformBillOfMaterialItemDatum) SetComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductDeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentProductDeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialItemDatumR{
			ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ComponentProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// AddBillOfMaterialDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_bill_of_material_item_datum, optionally inserting them as new records.
// Appends related to o.R.BillOfMaterialDataPlatformOrdersItemData.
func (o *DataPlatformBillOfMaterialItemDatum) AddBillOfMaterialDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillOfMaterial, o.BillOfMaterial)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillOfMaterial, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillOfMaterial, o.BillOfMaterial)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialItemDatumR{
			BillOfMaterialDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformOrdersItemData = append(o.R.BillOfMaterialDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetBillOfMaterialDataPlatformOrdersItemData removes all previously related items of the
// data_platform_bill_of_material_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum's BillOfMaterialDataPlatformOrdersItemData accordingly.
// Replaces o.R.BillOfMaterialDataPlatformOrdersItemData with related.
func (o *DataPlatformBillOfMaterialItemDatum) SetBillOfMaterialDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `BillOfMaterial` = null where `BillOfMaterial` = ?"
	values := []interface{}{o.BillOfMaterial}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillOfMaterialDataPlatformOrdersItemData = nil
	}

	return o.AddBillOfMaterialDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveBillOfMaterialDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.BillOfMaterialDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBillOfMaterialItemDatum) RemoveBillOfMaterialDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillOfMaterial, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillOfMaterial")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillOfMaterialDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillOfMaterialDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.BillOfMaterialDataPlatformOrdersItemData[i] = o.R.BillOfMaterialDataPlatformOrdersItemData[ln-1]
			}
			o.R.BillOfMaterialDataPlatformOrdersItemData = o.R.BillOfMaterialDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillOfMaterialDataPlatformProductionOrderItemComponentData adds the given related objects to the existing relationships
// of the data_platform_bill_of_material_item_datum, optionally inserting them as new records.
// Appends related to o.R.BillOfMaterialDataPlatformProductionOrderItemComponentData.
func (o *DataPlatformBillOfMaterialItemDatum) AddBillOfMaterialDataPlatformProductionOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillOfMaterial = o.BillOfMaterial
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillOfMaterial, rel.ProductionOrder, rel.ProductionOrderItem, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillOfMaterial = o.BillOfMaterial
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialItemDatumR{
			BillOfMaterialDataPlatformProductionOrderItemComponentData: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformProductionOrderItemComponentData = append(o.R.BillOfMaterialDataPlatformProductionOrderItemComponentData, related...)
	}

	return nil
}

// DataPlatformBillOfMaterialItemData retrieves all the records using an executor.
func DataPlatformBillOfMaterialItemData(mods ...qm.QueryMod) dataPlatformBillOfMaterialItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_bill_of_material_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_bill_of_material_item_data`.*"})
	}

	return dataPlatformBillOfMaterialItemDatumQuery{q}
}

// FindDataPlatformBillOfMaterialItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBillOfMaterialItemDatum(ctx context.Context, exec boil.ContextExecutor, billOfMaterial int, billOfMaterialItem int, selectCols ...string) (*DataPlatformBillOfMaterialItemDatum, error) {
	dataPlatformBillOfMaterialItemDatumObj := &DataPlatformBillOfMaterialItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_bill_of_material_item_data` where `BillOfMaterial`=? AND `BillOfMaterialItem`=?", sel,
	)

	q := queries.Raw(query, billOfMaterial, billOfMaterialItem)

	err := q.Bind(ctx, exec, dataPlatformBillOfMaterialItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_bill_of_material_item_data")
	}

	return dataPlatformBillOfMaterialItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBillOfMaterialItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_bill_of_material_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBillOfMaterialItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBillOfMaterialItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBillOfMaterialItemDatumInsertCache[key]
	dataPlatformBillOfMaterialItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBillOfMaterialItemDatumAllColumns,
			dataPlatformBillOfMaterialItemDatumColumnsWithDefault,
			dataPlatformBillOfMaterialItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBillOfMaterialItemDatumType, dataPlatformBillOfMaterialItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBillOfMaterialItemDatumType, dataPlatformBillOfMaterialItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_bill_of_material_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_bill_of_material_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_bill_of_material_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_bill_of_material_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BillOfMaterial,
		o.BillOfMaterialItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_bill_of_material_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBillOfMaterialItemDatumInsertCacheMut.Lock()
		dataPlatformBillOfMaterialItemDatumInsertCache[key] = cache
		dataPlatformBillOfMaterialItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformBillOfMaterialItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBillOfMaterialItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformBillOfMaterialItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBillOfMaterialItemDatumUpdateCache[key]
	dataPlatformBillOfMaterialItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBillOfMaterialItemDatumAllColumns,
			dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_bill_of_material_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBillOfMaterialItemDatumType, dataPlatformBillOfMaterialItemDatumMapping, append(wl, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_bill_of_material_item_data row")
	}

	if !cached {
		dataPlatformBillOfMaterialItemDatumUpdateCacheMut.Lock()
		dataPlatformBillOfMaterialItemDatumUpdateCache[key] = cache
		dataPlatformBillOfMaterialItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBillOfMaterialItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_bill_of_material_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBillOfMaterialItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBillOfMaterialItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformBillOfMaterialItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformBillOfMaterialItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBillOfMaterialItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_bill_of_material_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBillOfMaterialItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBillOfMaterialItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBillOfMaterialItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBillOfMaterialItemDatumUpsertCache[key]
	dataPlatformBillOfMaterialItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBillOfMaterialItemDatumAllColumns,
			dataPlatformBillOfMaterialItemDatumColumnsWithDefault,
			dataPlatformBillOfMaterialItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBillOfMaterialItemDatumAllColumns,
			dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_bill_of_material_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_bill_of_material_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_bill_of_material_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBillOfMaterialItemDatumType, dataPlatformBillOfMaterialItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBillOfMaterialItemDatumType, dataPlatformBillOfMaterialItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_bill_of_material_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBillOfMaterialItemDatumType, dataPlatformBillOfMaterialItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_bill_of_material_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_bill_of_material_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBillOfMaterialItemDatumUpsertCacheMut.Lock()
		dataPlatformBillOfMaterialItemDatumUpsertCache[key] = cache
		dataPlatformBillOfMaterialItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformBillOfMaterialItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBillOfMaterialItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformBillOfMaterialItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBillOfMaterialItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_bill_of_material_item_data` WHERE `BillOfMaterial`=? AND `BillOfMaterialItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_bill_of_material_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBillOfMaterialItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformBillOfMaterialItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_bill_of_material_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBillOfMaterialItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBillOfMaterialItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_bill_of_material_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformBillOfMaterialItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBillOfMaterialItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBillOfMaterialItemDatum(ctx, exec, o.BillOfMaterial, o.BillOfMaterialItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBillOfMaterialItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBillOfMaterialItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBillOfMaterialItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_bill_of_material_item_data`.* FROM `data_platform_bill_of_material_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBillOfMaterialItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBillOfMaterialItemDatumExists checks if the DataPlatformBillOfMaterialItemDatum row exists.
func DataPlatformBillOfMaterialItemDatumExists(ctx context.Context, exec boil.ContextExecutor, billOfMaterial int, billOfMaterialItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_bill_of_material_item_data` where `BillOfMaterial`=? AND `BillOfMaterialItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, billOfMaterial, billOfMaterialItem)
	}
	row := exec.QueryRowContext(ctx, sql, billOfMaterial, billOfMaterialItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_bill_of_material_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBillOfMaterialItemDatum row exists.
func (o *DataPlatformBillOfMaterialItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBillOfMaterialItemDatumExists(ctx, exec, o.BillOfMaterial, o.BillOfMaterialItem)
}
