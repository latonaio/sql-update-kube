// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSCRFreightPaymentRelationDatum is an object representing the database table.
type DataPlatformSCRFreightPaymentRelationDatum struct {
	SupplyChainRelationshipID               int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipFreightID        int         `boil:"SupplyChainRelationshipFreightID" json:"SupplyChainRelationshipFreightID" toml:"SupplyChainRelationshipFreightID" yaml:"SupplyChainRelationshipFreightID"`
	SupplyChainRelationshipFreightBillingID int         `boil:"SupplyChainRelationshipFreightBillingID" json:"SupplyChainRelationshipFreightBillingID" toml:"SupplyChainRelationshipFreightBillingID" yaml:"SupplyChainRelationshipFreightBillingID"`
	SupplyChainRelationshipFreightPaymentID int         `boil:"SupplyChainRelationshipFreightPaymentID" json:"SupplyChainRelationshipFreightPaymentID" toml:"SupplyChainRelationshipFreightPaymentID" yaml:"SupplyChainRelationshipFreightPaymentID"`
	Buyer                                   int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                  int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	FreightPartner                          int         `boil:"FreightPartner" json:"FreightPartner" toml:"FreightPartner" yaml:"FreightPartner"`
	FreightBillToParty                      int         `boil:"FreightBillToParty" json:"FreightBillToParty" toml:"FreightBillToParty" yaml:"FreightBillToParty"`
	FreightBillFromParty                    int         `boil:"FreightBillFromParty" json:"FreightBillFromParty" toml:"FreightBillFromParty" yaml:"FreightBillFromParty"`
	FreightPayer                            int         `boil:"FreightPayer" json:"FreightPayer" toml:"FreightPayer" yaml:"FreightPayer"`
	FreightPayee                            int         `boil:"FreightPayee" json:"FreightPayee" toml:"FreightPayee" yaml:"FreightPayee"`
	DefaultRelation                         null.Bool   `boil:"DefaultRelation" json:"DefaultRelation,omitempty" toml:"DefaultRelation" yaml:"DefaultRelation,omitempty"`
	PayerHouseBank                          null.String `boil:"PayerHouseBank" json:"PayerHouseBank,omitempty" toml:"PayerHouseBank" yaml:"PayerHouseBank,omitempty"`
	PayerHouseBankAccount                   null.String `boil:"PayerHouseBankAccount" json:"PayerHouseBankAccount,omitempty" toml:"PayerHouseBankAccount" yaml:"PayerHouseBankAccount,omitempty"`
	PayeeHouseBank                          null.String `boil:"PayeeHouseBank" json:"PayeeHouseBank,omitempty" toml:"PayeeHouseBank" yaml:"PayeeHouseBank,omitempty"`
	PayeeHouseBankAccount                   null.String `boil:"PayeeHouseBankAccount" json:"PayeeHouseBankAccount,omitempty" toml:"PayeeHouseBankAccount" yaml:"PayeeHouseBankAccount,omitempty"`
	CreationDate                            string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                          string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                     null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSCRFreightPaymentRelationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSCRFreightPaymentRelationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSCRFreightPaymentRelationDatumColumns = struct {
	SupplyChainRelationshipID               string
	SupplyChainRelationshipFreightID        string
	SupplyChainRelationshipFreightBillingID string
	SupplyChainRelationshipFreightPaymentID string
	Buyer                                   string
	Seller                                  string
	FreightPartner                          string
	FreightBillToParty                      string
	FreightBillFromParty                    string
	FreightPayer                            string
	FreightPayee                            string
	DefaultRelation                         string
	PayerHouseBank                          string
	PayerHouseBankAccount                   string
	PayeeHouseBank                          string
	PayeeHouseBankAccount                   string
	CreationDate                            string
	LastChangeDate                          string
	IsMarkedForDeletion                     string
}{
	SupplyChainRelationshipID:               "SupplyChainRelationshipID",
	SupplyChainRelationshipFreightID:        "SupplyChainRelationshipFreightID",
	SupplyChainRelationshipFreightBillingID: "SupplyChainRelationshipFreightBillingID",
	SupplyChainRelationshipFreightPaymentID: "SupplyChainRelationshipFreightPaymentID",
	Buyer:                                   "Buyer",
	Seller:                                  "Seller",
	FreightPartner:                          "FreightPartner",
	FreightBillToParty:                      "FreightBillToParty",
	FreightBillFromParty:                    "FreightBillFromParty",
	FreightPayer:                            "FreightPayer",
	FreightPayee:                            "FreightPayee",
	DefaultRelation:                         "DefaultRelation",
	PayerHouseBank:                          "PayerHouseBank",
	PayerHouseBankAccount:                   "PayerHouseBankAccount",
	PayeeHouseBank:                          "PayeeHouseBank",
	PayeeHouseBankAccount:                   "PayeeHouseBankAccount",
	CreationDate:                            "CreationDate",
	LastChangeDate:                          "LastChangeDate",
	IsMarkedForDeletion:                     "IsMarkedForDeletion",
}

var DataPlatformSCRFreightPaymentRelationDatumTableColumns = struct {
	SupplyChainRelationshipID               string
	SupplyChainRelationshipFreightID        string
	SupplyChainRelationshipFreightBillingID string
	SupplyChainRelationshipFreightPaymentID string
	Buyer                                   string
	Seller                                  string
	FreightPartner                          string
	FreightBillToParty                      string
	FreightBillFromParty                    string
	FreightPayer                            string
	FreightPayee                            string
	DefaultRelation                         string
	PayerHouseBank                          string
	PayerHouseBankAccount                   string
	PayeeHouseBank                          string
	PayeeHouseBankAccount                   string
	CreationDate                            string
	LastChangeDate                          string
	IsMarkedForDeletion                     string
}{
	SupplyChainRelationshipID:               "data_platform_scr_freight_payment_relation_data.SupplyChainRelationshipID",
	SupplyChainRelationshipFreightID:        "data_platform_scr_freight_payment_relation_data.SupplyChainRelationshipFreightID",
	SupplyChainRelationshipFreightBillingID: "data_platform_scr_freight_payment_relation_data.SupplyChainRelationshipFreightBillingID",
	SupplyChainRelationshipFreightPaymentID: "data_platform_scr_freight_payment_relation_data.SupplyChainRelationshipFreightPaymentID",
	Buyer:                                   "data_platform_scr_freight_payment_relation_data.Buyer",
	Seller:                                  "data_platform_scr_freight_payment_relation_data.Seller",
	FreightPartner:                          "data_platform_scr_freight_payment_relation_data.FreightPartner",
	FreightBillToParty:                      "data_platform_scr_freight_payment_relation_data.FreightBillToParty",
	FreightBillFromParty:                    "data_platform_scr_freight_payment_relation_data.FreightBillFromParty",
	FreightPayer:                            "data_platform_scr_freight_payment_relation_data.FreightPayer",
	FreightPayee:                            "data_platform_scr_freight_payment_relation_data.FreightPayee",
	DefaultRelation:                         "data_platform_scr_freight_payment_relation_data.DefaultRelation",
	PayerHouseBank:                          "data_platform_scr_freight_payment_relation_data.PayerHouseBank",
	PayerHouseBankAccount:                   "data_platform_scr_freight_payment_relation_data.PayerHouseBankAccount",
	PayeeHouseBank:                          "data_platform_scr_freight_payment_relation_data.PayeeHouseBank",
	PayeeHouseBankAccount:                   "data_platform_scr_freight_payment_relation_data.PayeeHouseBankAccount",
	CreationDate:                            "data_platform_scr_freight_payment_relation_data.CreationDate",
	LastChangeDate:                          "data_platform_scr_freight_payment_relation_data.LastChangeDate",
	IsMarkedForDeletion:                     "data_platform_scr_freight_payment_relation_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSCRFreightPaymentRelationDatumWhere = struct {
	SupplyChainRelationshipID               whereHelperint
	SupplyChainRelationshipFreightID        whereHelperint
	SupplyChainRelationshipFreightBillingID whereHelperint
	SupplyChainRelationshipFreightPaymentID whereHelperint
	Buyer                                   whereHelperint
	Seller                                  whereHelperint
	FreightPartner                          whereHelperint
	FreightBillToParty                      whereHelperint
	FreightBillFromParty                    whereHelperint
	FreightPayer                            whereHelperint
	FreightPayee                            whereHelperint
	DefaultRelation                         whereHelpernull_Bool
	PayerHouseBank                          whereHelpernull_String
	PayerHouseBankAccount                   whereHelpernull_String
	PayeeHouseBank                          whereHelpernull_String
	PayeeHouseBankAccount                   whereHelpernull_String
	CreationDate                            whereHelperstring
	LastChangeDate                          whereHelperstring
	IsMarkedForDeletion                     whereHelpernull_Bool
}{
	SupplyChainRelationshipID:               whereHelperint{field: "`data_platform_scr_freight_payment_relation_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipFreightID:        whereHelperint{field: "`data_platform_scr_freight_payment_relation_data`.`SupplyChainRelationshipFreightID`"},
	SupplyChainRelationshipFreightBillingID: whereHelperint{field: "`data_platform_scr_freight_payment_relation_data`.`SupplyChainRelationshipFreightBillingID`"},
	SupplyChainRelationshipFreightPaymentID: whereHelperint{field: "`data_platform_scr_freight_payment_relation_data`.`SupplyChainRelationshipFreightPaymentID`"},
	Buyer:                                   whereHelperint{field: "`data_platform_scr_freight_payment_relation_data`.`Buyer`"},
	Seller:                                  whereHelperint{field: "`data_platform_scr_freight_payment_relation_data`.`Seller`"},
	FreightPartner:                          whereHelperint{field: "`data_platform_scr_freight_payment_relation_data`.`FreightPartner`"},
	FreightBillToParty:                      whereHelperint{field: "`data_platform_scr_freight_payment_relation_data`.`FreightBillToParty`"},
	FreightBillFromParty:                    whereHelperint{field: "`data_platform_scr_freight_payment_relation_data`.`FreightBillFromParty`"},
	FreightPayer:                            whereHelperint{field: "`data_platform_scr_freight_payment_relation_data`.`FreightPayer`"},
	FreightPayee:                            whereHelperint{field: "`data_platform_scr_freight_payment_relation_data`.`FreightPayee`"},
	DefaultRelation:                         whereHelpernull_Bool{field: "`data_platform_scr_freight_payment_relation_data`.`DefaultRelation`"},
	PayerHouseBank:                          whereHelpernull_String{field: "`data_platform_scr_freight_payment_relation_data`.`PayerHouseBank`"},
	PayerHouseBankAccount:                   whereHelpernull_String{field: "`data_platform_scr_freight_payment_relation_data`.`PayerHouseBankAccount`"},
	PayeeHouseBank:                          whereHelpernull_String{field: "`data_platform_scr_freight_payment_relation_data`.`PayeeHouseBank`"},
	PayeeHouseBankAccount:                   whereHelpernull_String{field: "`data_platform_scr_freight_payment_relation_data`.`PayeeHouseBankAccount`"},
	CreationDate:                            whereHelperstring{field: "`data_platform_scr_freight_payment_relation_data`.`CreationDate`"},
	LastChangeDate:                          whereHelperstring{field: "`data_platform_scr_freight_payment_relation_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                     whereHelpernull_Bool{field: "`data_platform_scr_freight_payment_relation_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSCRFreightPaymentRelationDatumRels is where relationship names are stored.
var DataPlatformSCRFreightPaymentRelationDatumRels = struct {
	FreightPayeeDataPlatformBusinessPartnerGeneralDatum string
	FreightPayerDataPlatformBusinessPartnerGeneralDatum string
	BuyerDataPlatformSCRFreightBillingRelationDatum     string
}{
	FreightPayeeDataPlatformBusinessPartnerGeneralDatum: "FreightPayeeDataPlatformBusinessPartnerGeneralDatum",
	FreightPayerDataPlatformBusinessPartnerGeneralDatum: "FreightPayerDataPlatformBusinessPartnerGeneralDatum",
	BuyerDataPlatformSCRFreightBillingRelationDatum:     "BuyerDataPlatformSCRFreightBillingRelationDatum",
}

// dataPlatformSCRFreightPaymentRelationDatumR is where relationships are stored.
type dataPlatformSCRFreightPaymentRelationDatumR struct {
	FreightPayeeDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum    `boil:"FreightPayeeDataPlatformBusinessPartnerGeneralDatum" json:"FreightPayeeDataPlatformBusinessPartnerGeneralDatum" toml:"FreightPayeeDataPlatformBusinessPartnerGeneralDatum" yaml:"FreightPayeeDataPlatformBusinessPartnerGeneralDatum"`
	FreightPayerDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum    `boil:"FreightPayerDataPlatformBusinessPartnerGeneralDatum" json:"FreightPayerDataPlatformBusinessPartnerGeneralDatum" toml:"FreightPayerDataPlatformBusinessPartnerGeneralDatum" yaml:"FreightPayerDataPlatformBusinessPartnerGeneralDatum"`
	BuyerDataPlatformSCRFreightBillingRelationDatum     *DataPlatformSCRFreightBillingRelationDatum `boil:"BuyerDataPlatformSCRFreightBillingRelationDatum" json:"BuyerDataPlatformSCRFreightBillingRelationDatum" toml:"BuyerDataPlatformSCRFreightBillingRelationDatum" yaml:"BuyerDataPlatformSCRFreightBillingRelationDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSCRFreightPaymentRelationDatumR) NewStruct() *dataPlatformSCRFreightPaymentRelationDatumR {
	return &dataPlatformSCRFreightPaymentRelationDatumR{}
}

func (r *dataPlatformSCRFreightPaymentRelationDatumR) GetFreightPayeeDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.FreightPayeeDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRFreightPaymentRelationDatumR) GetFreightPayerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.FreightPayerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRFreightPaymentRelationDatumR) GetBuyerDataPlatformSCRFreightBillingRelationDatum() *DataPlatformSCRFreightBillingRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRFreightBillingRelationDatum
}

// dataPlatformSCRFreightPaymentRelationDatumL is where Load methods for each relationship are stored.
type dataPlatformSCRFreightPaymentRelationDatumL struct{}

var (
	dataPlatformSCRFreightPaymentRelationDatumAllColumns            = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipFreightID", "SupplyChainRelationshipFreightBillingID", "SupplyChainRelationshipFreightPaymentID", "Buyer", "Seller", "FreightPartner", "FreightBillToParty", "FreightBillFromParty", "FreightPayer", "FreightPayee", "DefaultRelation", "PayerHouseBank", "PayerHouseBankAccount", "PayeeHouseBank", "PayeeHouseBankAccount", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRFreightPaymentRelationDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipFreightID", "SupplyChainRelationshipFreightBillingID", "SupplyChainRelationshipFreightPaymentID", "Buyer", "Seller", "FreightPartner", "FreightBillToParty", "FreightBillFromParty", "FreightPayer", "FreightPayee", "DefaultRelation", "PayerHouseBank", "PayerHouseBankAccount", "PayeeHouseBank", "PayeeHouseBankAccount", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRFreightPaymentRelationDatumColumnsWithDefault    = []string{}
	dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipFreightID", "SupplyChainRelationshipFreightBillingID", "SupplyChainRelationshipFreightPaymentID", "Buyer", "Seller", "FreightPartner", "FreightBillToParty", "FreightBillFromParty", "FreightPayer", "FreightPayee"}
	dataPlatformSCRFreightPaymentRelationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSCRFreightPaymentRelationDatumSlice is an alias for a slice of pointers to DataPlatformSCRFreightPaymentRelationDatum.
	// This should almost always be used instead of []DataPlatformSCRFreightPaymentRelationDatum.
	DataPlatformSCRFreightPaymentRelationDatumSlice []*DataPlatformSCRFreightPaymentRelationDatum

	dataPlatformSCRFreightPaymentRelationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSCRFreightPaymentRelationDatumType                 = reflect.TypeOf(&DataPlatformSCRFreightPaymentRelationDatum{})
	dataPlatformSCRFreightPaymentRelationDatumMapping              = queries.MakeStructMapping(dataPlatformSCRFreightPaymentRelationDatumType)
	dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSCRFreightPaymentRelationDatumType, dataPlatformSCRFreightPaymentRelationDatumMapping, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns)
	dataPlatformSCRFreightPaymentRelationDatumInsertCacheMut       sync.RWMutex
	dataPlatformSCRFreightPaymentRelationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSCRFreightPaymentRelationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSCRFreightPaymentRelationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSCRFreightPaymentRelationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSCRFreightPaymentRelationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSCRFreightPaymentRelationDatum record from the query.
func (q dataPlatformSCRFreightPaymentRelationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSCRFreightPaymentRelationDatum, error) {
	o := &DataPlatformSCRFreightPaymentRelationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_scr_freight_payment_relation_data")
	}

	return o, nil
}

// All returns all DataPlatformSCRFreightPaymentRelationDatum records from the query.
func (q dataPlatformSCRFreightPaymentRelationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSCRFreightPaymentRelationDatumSlice, error) {
	var o []*DataPlatformSCRFreightPaymentRelationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSCRFreightPaymentRelationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSCRFreightPaymentRelationDatum records in the query.
func (q dataPlatformSCRFreightPaymentRelationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_scr_freight_payment_relation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSCRFreightPaymentRelationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_scr_freight_payment_relation_data exists")
	}

	return count > 0, nil
}

// FreightPayeeDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRFreightPaymentRelationDatum) FreightPayeeDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.FreightPayee),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// FreightPayerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRFreightPaymentRelationDatum) FreightPayerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.FreightPayer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// BuyerDataPlatformSCRFreightBillingRelationDatum pointed to by the foreign key.
func (o *DataPlatformSCRFreightPaymentRelationDatum) BuyerDataPlatformSCRFreightBillingRelationDatum(mods ...qm.QueryMod) dataPlatformSCRFreightBillingRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRFreightBillingRelationData(queryMods...)
}

// LoadFreightPayeeDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRFreightPaymentRelationDatumL) LoadFreightPayeeDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRFreightPaymentRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRFreightPaymentRelationDatum
	var object *DataPlatformSCRFreightPaymentRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRFreightPaymentRelationDatum.(*DataPlatformSCRFreightPaymentRelationDatum)
		if !ok {
			object = new(DataPlatformSCRFreightPaymentRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRFreightPaymentRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRFreightPaymentRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRFreightPaymentRelationDatum.(*[]*DataPlatformSCRFreightPaymentRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRFreightPaymentRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRFreightPaymentRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRFreightPaymentRelationDatumR{}
		}
		args = append(args, object.FreightPayee)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRFreightPaymentRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.FreightPayee {
					continue Outer
				}
			}

			args = append(args, obj.FreightPayee)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FreightPayeeDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FreightPayee == foreign.BusinessPartner {
				local.R.FreightPayeeDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadFreightPayerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRFreightPaymentRelationDatumL) LoadFreightPayerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRFreightPaymentRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRFreightPaymentRelationDatum
	var object *DataPlatformSCRFreightPaymentRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRFreightPaymentRelationDatum.(*DataPlatformSCRFreightPaymentRelationDatum)
		if !ok {
			object = new(DataPlatformSCRFreightPaymentRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRFreightPaymentRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRFreightPaymentRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRFreightPaymentRelationDatum.(*[]*DataPlatformSCRFreightPaymentRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRFreightPaymentRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRFreightPaymentRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRFreightPaymentRelationDatumR{}
		}
		args = append(args, object.FreightPayer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRFreightPaymentRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.FreightPayer {
					continue Outer
				}
			}

			args = append(args, obj.FreightPayer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FreightPayerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FreightPayer == foreign.BusinessPartner {
				local.R.FreightPayerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRFreightBillingRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRFreightPaymentRelationDatumL) LoadBuyerDataPlatformSCRFreightBillingRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRFreightPaymentRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRFreightPaymentRelationDatum
	var object *DataPlatformSCRFreightPaymentRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRFreightPaymentRelationDatum.(*DataPlatformSCRFreightPaymentRelationDatum)
		if !ok {
			object = new(DataPlatformSCRFreightPaymentRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRFreightPaymentRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRFreightPaymentRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRFreightPaymentRelationDatum.(*[]*DataPlatformSCRFreightPaymentRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRFreightPaymentRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRFreightPaymentRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRFreightPaymentRelationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRFreightPaymentRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_freight_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_freight_billing_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRFreightBillingRelationDatum")
	}

	var resultSlice []*DataPlatformSCRFreightBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRFreightBillingRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_freight_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_freight_billing_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRFreightBillingRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRFreightBillingRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetFreightPayeeDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRFreightPaymentRelationDatum to the related item.
// Sets o.R.FreightPayeeDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRFreightPaymentRelationDatum) SetFreightPayeeDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_freight_payment_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"FreightPayee"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.SupplyChainRelationshipFreightBillingID, o.SupplyChainRelationshipFreightPaymentID, o.Buyer, o.Seller, o.FreightPartner, o.FreightBillToParty, o.FreightBillFromParty, o.FreightPayer, o.FreightPayee}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FreightPayee = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRFreightPaymentRelationDatumR{
			FreightPayeeDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.FreightPayeeDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetFreightPayerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRFreightPaymentRelationDatum to the related item.
// Sets o.R.FreightPayerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRFreightPaymentRelationDatum) SetFreightPayerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_freight_payment_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"FreightPayer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.SupplyChainRelationshipFreightBillingID, o.SupplyChainRelationshipFreightPaymentID, o.Buyer, o.Seller, o.FreightPartner, o.FreightBillToParty, o.FreightBillFromParty, o.FreightPayer, o.FreightPayee}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FreightPayer = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRFreightPaymentRelationDatumR{
			FreightPayerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.FreightPayerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRFreightBillingRelationDatum of the dataPlatformSCRFreightPaymentRelationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRFreightBillingRelationDatum to related.
func (o *DataPlatformSCRFreightPaymentRelationDatum) SetBuyerDataPlatformSCRFreightBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRFreightBillingRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_freight_payment_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.SupplyChainRelationshipFreightBillingID, o.SupplyChainRelationshipFreightPaymentID, o.Buyer, o.Seller, o.FreightPartner, o.FreightBillToParty, o.FreightBillFromParty, o.FreightPayer, o.FreightPayee}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformSCRFreightPaymentRelationDatumR{
			BuyerDataPlatformSCRFreightBillingRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRFreightBillingRelationDatum = related
	}

	return nil
}

// DataPlatformSCRFreightPaymentRelationData retrieves all the records using an executor.
func DataPlatformSCRFreightPaymentRelationData(mods ...qm.QueryMod) dataPlatformSCRFreightPaymentRelationDatumQuery {
	mods = append(mods, qm.From("`data_platform_scr_freight_payment_relation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_scr_freight_payment_relation_data`.*"})
	}

	return dataPlatformSCRFreightPaymentRelationDatumQuery{q}
}

// FindDataPlatformSCRFreightPaymentRelationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSCRFreightPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipFreightID int, supplyChainRelationshipFreightBillingID int, supplyChainRelationshipFreightPaymentID int, buyer int, seller int, freightPartner int, freightBillToParty int, freightBillFromParty int, freightPayer int, freightPayee int, selectCols ...string) (*DataPlatformSCRFreightPaymentRelationDatum, error) {
	dataPlatformSCRFreightPaymentRelationDatumObj := &DataPlatformSCRFreightPaymentRelationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_scr_freight_payment_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipFreightID`=? AND `SupplyChainRelationshipFreightBillingID`=? AND `SupplyChainRelationshipFreightPaymentID`=? AND `Buyer`=? AND `Seller`=? AND `FreightPartner`=? AND `FreightBillToParty`=? AND `FreightBillFromParty`=? AND `FreightPayer`=? AND `FreightPayee`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, supplyChainRelationshipFreightID, supplyChainRelationshipFreightBillingID, supplyChainRelationshipFreightPaymentID, buyer, seller, freightPartner, freightBillToParty, freightBillFromParty, freightPayer, freightPayee)

	err := q.Bind(ctx, exec, dataPlatformSCRFreightPaymentRelationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_scr_freight_payment_relation_data")
	}

	return dataPlatformSCRFreightPaymentRelationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSCRFreightPaymentRelationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_freight_payment_relation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRFreightPaymentRelationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSCRFreightPaymentRelationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSCRFreightPaymentRelationDatumInsertCache[key]
	dataPlatformSCRFreightPaymentRelationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSCRFreightPaymentRelationDatumAllColumns,
			dataPlatformSCRFreightPaymentRelationDatumColumnsWithDefault,
			dataPlatformSCRFreightPaymentRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRFreightPaymentRelationDatumType, dataPlatformSCRFreightPaymentRelationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSCRFreightPaymentRelationDatumType, dataPlatformSCRFreightPaymentRelationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_scr_freight_payment_relation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_scr_freight_payment_relation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_scr_freight_payment_relation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_scr_freight_payment_relation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipFreightID,
		o.SupplyChainRelationshipFreightBillingID,
		o.SupplyChainRelationshipFreightPaymentID,
		o.Buyer,
		o.Seller,
		o.FreightPartner,
		o.FreightBillToParty,
		o.FreightBillFromParty,
		o.FreightPayer,
		o.FreightPayee,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_freight_payment_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRFreightPaymentRelationDatumInsertCacheMut.Lock()
		dataPlatformSCRFreightPaymentRelationDatumInsertCache[key] = cache
		dataPlatformSCRFreightPaymentRelationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSCRFreightPaymentRelationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSCRFreightPaymentRelationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSCRFreightPaymentRelationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSCRFreightPaymentRelationDatumUpdateCache[key]
	dataPlatformSCRFreightPaymentRelationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSCRFreightPaymentRelationDatumAllColumns,
			dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_scr_freight_payment_relation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_scr_freight_payment_relation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRFreightPaymentRelationDatumType, dataPlatformSCRFreightPaymentRelationDatumMapping, append(wl, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_scr_freight_payment_relation_data row")
	}

	if !cached {
		dataPlatformSCRFreightPaymentRelationDatumUpdateCacheMut.Lock()
		dataPlatformSCRFreightPaymentRelationDatumUpdateCache[key] = cache
		dataPlatformSCRFreightPaymentRelationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSCRFreightPaymentRelationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_scr_freight_payment_relation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSCRFreightPaymentRelationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_scr_freight_payment_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSCRFreightPaymentRelationDatum slice")
	}

	return nil
}

var mySQLDataPlatformSCRFreightPaymentRelationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSCRFreightPaymentRelationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_freight_payment_relation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRFreightPaymentRelationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSCRFreightPaymentRelationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSCRFreightPaymentRelationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSCRFreightPaymentRelationDatumUpsertCache[key]
	dataPlatformSCRFreightPaymentRelationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSCRFreightPaymentRelationDatumAllColumns,
			dataPlatformSCRFreightPaymentRelationDatumColumnsWithDefault,
			dataPlatformSCRFreightPaymentRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSCRFreightPaymentRelationDatumAllColumns,
			dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_scr_freight_payment_relation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_scr_freight_payment_relation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_scr_freight_payment_relation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRFreightPaymentRelationDatumType, dataPlatformSCRFreightPaymentRelationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSCRFreightPaymentRelationDatumType, dataPlatformSCRFreightPaymentRelationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_scr_freight_payment_relation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSCRFreightPaymentRelationDatumType, dataPlatformSCRFreightPaymentRelationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_scr_freight_payment_relation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_freight_payment_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRFreightPaymentRelationDatumUpsertCacheMut.Lock()
		dataPlatformSCRFreightPaymentRelationDatumUpsertCache[key] = cache
		dataPlatformSCRFreightPaymentRelationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSCRFreightPaymentRelationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSCRFreightPaymentRelationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSCRFreightPaymentRelationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_scr_freight_payment_relation_data` WHERE `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipFreightID`=? AND `SupplyChainRelationshipFreightBillingID`=? AND `SupplyChainRelationshipFreightPaymentID`=? AND `Buyer`=? AND `Seller`=? AND `FreightPartner`=? AND `FreightBillToParty`=? AND `FreightBillFromParty`=? AND `FreightPayer`=? AND `FreightPayee`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_scr_freight_payment_relation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSCRFreightPaymentRelationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSCRFreightPaymentRelationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_scr_freight_payment_relation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSCRFreightPaymentRelationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_scr_freight_payment_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSCRFreightPaymentRelationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSCRFreightPaymentRelationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSCRFreightPaymentRelationDatum(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.SupplyChainRelationshipFreightBillingID, o.SupplyChainRelationshipFreightPaymentID, o.Buyer, o.Seller, o.FreightPartner, o.FreightBillToParty, o.FreightBillFromParty, o.FreightPayer, o.FreightPayee)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSCRFreightPaymentRelationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSCRFreightPaymentRelationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_scr_freight_payment_relation_data`.* FROM `data_platform_scr_freight_payment_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSCRFreightPaymentRelationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSCRFreightPaymentRelationDatumExists checks if the DataPlatformSCRFreightPaymentRelationDatum row exists.
func DataPlatformSCRFreightPaymentRelationDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipFreightID int, supplyChainRelationshipFreightBillingID int, supplyChainRelationshipFreightPaymentID int, buyer int, seller int, freightPartner int, freightBillToParty int, freightBillFromParty int, freightPayer int, freightPayee int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_scr_freight_payment_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipFreightID`=? AND `SupplyChainRelationshipFreightBillingID`=? AND `SupplyChainRelationshipFreightPaymentID`=? AND `Buyer`=? AND `Seller`=? AND `FreightPartner`=? AND `FreightBillToParty`=? AND `FreightBillFromParty`=? AND `FreightPayer`=? AND `FreightPayee`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, supplyChainRelationshipFreightID, supplyChainRelationshipFreightBillingID, supplyChainRelationshipFreightPaymentID, buyer, seller, freightPartner, freightBillToParty, freightBillFromParty, freightPayer, freightPayee)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, supplyChainRelationshipFreightID, supplyChainRelationshipFreightBillingID, supplyChainRelationshipFreightPaymentID, buyer, seller, freightPartner, freightBillToParty, freightBillFromParty, freightPayer, freightPayee)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_scr_freight_payment_relation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSCRFreightPaymentRelationDatum row exists.
func (o *DataPlatformSCRFreightPaymentRelationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSCRFreightPaymentRelationDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.SupplyChainRelationshipFreightBillingID, o.SupplyChainRelationshipFreightPaymentID, o.Buyer, o.Seller, o.FreightPartner, o.FreightBillToParty, o.FreightBillFromParty, o.FreightPayer, o.FreightPayee)
}
