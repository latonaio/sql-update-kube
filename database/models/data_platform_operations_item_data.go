// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformOperationsItemDatum is an object representing the database table.
type DataPlatformOperationsItemDatum struct {
	Operations                               int          `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	OperationsItem                           int          `boil:"OperationsItem" json:"OperationsItem" toml:"OperationsItem" yaml:"OperationsItem"`
	SupplyChainRelationshipID                int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID        int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID   int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipProductionPlantID int          `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID"`
	Product                                  string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Buyer                                    int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                   int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverFromParty                         int          `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverFromPlant                         string       `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	DeliverToParty                           int          `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverToPlant                           string       `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	ProductionPlantBusinessPartner           int          `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner"`
	ProductionPlant                          string       `boil:"ProductionPlant" json:"ProductionPlant" toml:"ProductionPlant" yaml:"ProductionPlant"`
	OperationsText                           string       `boil:"OperationsText" json:"OperationsText" toml:"OperationsText" yaml:"OperationsText"`
	BillOfMaterial                           null.Int     `boil:"BillOfMaterial" json:"BillOfMaterial,omitempty" toml:"BillOfMaterial" yaml:"BillOfMaterial,omitempty"`
	OperationsStatus                         null.String  `boil:"OperationsStatus" json:"OperationsStatus,omitempty" toml:"OperationsStatus" yaml:"OperationsStatus,omitempty"`
	ResponsiblePlannerGroup                  null.String  `boil:"ResponsiblePlannerGroup" json:"ResponsiblePlannerGroup,omitempty" toml:"ResponsiblePlannerGroup" yaml:"ResponsiblePlannerGroup,omitempty"`
	OperationsUnit                           null.String  `boil:"OperationsUnit" json:"OperationsUnit,omitempty" toml:"OperationsUnit" yaml:"OperationsUnit,omitempty"`
	StandardLotSizeQuantity                  null.Float32 `boil:"StandardLotSizeQuantity" json:"StandardLotSizeQuantity,omitempty" toml:"StandardLotSizeQuantity" yaml:"StandardLotSizeQuantity,omitempty"`
	MinimumLotSizeQuantity                   null.Float32 `boil:"MinimumLotSizeQuantity" json:"MinimumLotSizeQuantity,omitempty" toml:"MinimumLotSizeQuantity" yaml:"MinimumLotSizeQuantity,omitempty"`
	MaximumLotSizeQuantity                   null.Float32 `boil:"MaximumLotSizeQuantity" json:"MaximumLotSizeQuantity,omitempty" toml:"MaximumLotSizeQuantity" yaml:"MaximumLotSizeQuantity,omitempty"`
	PlainLongText                            null.String  `boil:"PlainLongText" json:"PlainLongText,omitempty" toml:"PlainLongText" yaml:"PlainLongText,omitempty"`
	WorkCenter                               null.Int     `boil:"WorkCenter" json:"WorkCenter,omitempty" toml:"WorkCenter" yaml:"WorkCenter,omitempty"`
	ValidityStartDate                        null.String  `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate                          null.String  `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	CreationDate                             string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                           string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                      null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformOperationsItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformOperationsItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformOperationsItemDatumColumns = struct {
	Operations                               string
	OperationsItem                           string
	SupplyChainRelationshipID                string
	SupplyChainRelationshipDeliveryID        string
	SupplyChainRelationshipDeliveryPlantID   string
	SupplyChainRelationshipProductionPlantID string
	Product                                  string
	Buyer                                    string
	Seller                                   string
	DeliverFromParty                         string
	DeliverFromPlant                         string
	DeliverToParty                           string
	DeliverToPlant                           string
	ProductionPlantBusinessPartner           string
	ProductionPlant                          string
	OperationsText                           string
	BillOfMaterial                           string
	OperationsStatus                         string
	ResponsiblePlannerGroup                  string
	OperationsUnit                           string
	StandardLotSizeQuantity                  string
	MinimumLotSizeQuantity                   string
	MaximumLotSizeQuantity                   string
	PlainLongText                            string
	WorkCenter                               string
	ValidityStartDate                        string
	ValidityEndDate                          string
	CreationDate                             string
	LastChangeDate                           string
	IsMarkedForDeletion                      string
}{
	Operations:                               "Operations",
	OperationsItem:                           "OperationsItem",
	SupplyChainRelationshipID:                "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:        "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:   "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID: "SupplyChainRelationshipProductionPlantID",
	Product:                                  "Product",
	Buyer:                                    "Buyer",
	Seller:                                   "Seller",
	DeliverFromParty:                         "DeliverFromParty",
	DeliverFromPlant:                         "DeliverFromPlant",
	DeliverToParty:                           "DeliverToParty",
	DeliverToPlant:                           "DeliverToPlant",
	ProductionPlantBusinessPartner:           "ProductionPlantBusinessPartner",
	ProductionPlant:                          "ProductionPlant",
	OperationsText:                           "OperationsText",
	BillOfMaterial:                           "BillOfMaterial",
	OperationsStatus:                         "OperationsStatus",
	ResponsiblePlannerGroup:                  "ResponsiblePlannerGroup",
	OperationsUnit:                           "OperationsUnit",
	StandardLotSizeQuantity:                  "StandardLotSizeQuantity",
	MinimumLotSizeQuantity:                   "MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:                   "MaximumLotSizeQuantity",
	PlainLongText:                            "PlainLongText",
	WorkCenter:                               "WorkCenter",
	ValidityStartDate:                        "ValidityStartDate",
	ValidityEndDate:                          "ValidityEndDate",
	CreationDate:                             "CreationDate",
	LastChangeDate:                           "LastChangeDate",
	IsMarkedForDeletion:                      "IsMarkedForDeletion",
}

var DataPlatformOperationsItemDatumTableColumns = struct {
	Operations                               string
	OperationsItem                           string
	SupplyChainRelationshipID                string
	SupplyChainRelationshipDeliveryID        string
	SupplyChainRelationshipDeliveryPlantID   string
	SupplyChainRelationshipProductionPlantID string
	Product                                  string
	Buyer                                    string
	Seller                                   string
	DeliverFromParty                         string
	DeliverFromPlant                         string
	DeliverToParty                           string
	DeliverToPlant                           string
	ProductionPlantBusinessPartner           string
	ProductionPlant                          string
	OperationsText                           string
	BillOfMaterial                           string
	OperationsStatus                         string
	ResponsiblePlannerGroup                  string
	OperationsUnit                           string
	StandardLotSizeQuantity                  string
	MinimumLotSizeQuantity                   string
	MaximumLotSizeQuantity                   string
	PlainLongText                            string
	WorkCenter                               string
	ValidityStartDate                        string
	ValidityEndDate                          string
	CreationDate                             string
	LastChangeDate                           string
	IsMarkedForDeletion                      string
}{
	Operations:                               "data_platform_operations_item_data.Operations",
	OperationsItem:                           "data_platform_operations_item_data.OperationsItem",
	SupplyChainRelationshipID:                "data_platform_operations_item_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:        "data_platform_operations_item_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:   "data_platform_operations_item_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID: "data_platform_operations_item_data.SupplyChainRelationshipProductionPlantID",
	Product:                                  "data_platform_operations_item_data.Product",
	Buyer:                                    "data_platform_operations_item_data.Buyer",
	Seller:                                   "data_platform_operations_item_data.Seller",
	DeliverFromParty:                         "data_platform_operations_item_data.DeliverFromParty",
	DeliverFromPlant:                         "data_platform_operations_item_data.DeliverFromPlant",
	DeliverToParty:                           "data_platform_operations_item_data.DeliverToParty",
	DeliverToPlant:                           "data_platform_operations_item_data.DeliverToPlant",
	ProductionPlantBusinessPartner:           "data_platform_operations_item_data.ProductionPlantBusinessPartner",
	ProductionPlant:                          "data_platform_operations_item_data.ProductionPlant",
	OperationsText:                           "data_platform_operations_item_data.OperationsText",
	BillOfMaterial:                           "data_platform_operations_item_data.BillOfMaterial",
	OperationsStatus:                         "data_platform_operations_item_data.OperationsStatus",
	ResponsiblePlannerGroup:                  "data_platform_operations_item_data.ResponsiblePlannerGroup",
	OperationsUnit:                           "data_platform_operations_item_data.OperationsUnit",
	StandardLotSizeQuantity:                  "data_platform_operations_item_data.StandardLotSizeQuantity",
	MinimumLotSizeQuantity:                   "data_platform_operations_item_data.MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:                   "data_platform_operations_item_data.MaximumLotSizeQuantity",
	PlainLongText:                            "data_platform_operations_item_data.PlainLongText",
	WorkCenter:                               "data_platform_operations_item_data.WorkCenter",
	ValidityStartDate:                        "data_platform_operations_item_data.ValidityStartDate",
	ValidityEndDate:                          "data_platform_operations_item_data.ValidityEndDate",
	CreationDate:                             "data_platform_operations_item_data.CreationDate",
	LastChangeDate:                           "data_platform_operations_item_data.LastChangeDate",
	IsMarkedForDeletion:                      "data_platform_operations_item_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformOperationsItemDatumWhere = struct {
	Operations                               whereHelperint
	OperationsItem                           whereHelperint
	SupplyChainRelationshipID                whereHelperint
	SupplyChainRelationshipDeliveryID        whereHelperint
	SupplyChainRelationshipDeliveryPlantID   whereHelperint
	SupplyChainRelationshipProductionPlantID whereHelperint
	Product                                  whereHelperstring
	Buyer                                    whereHelperint
	Seller                                   whereHelperint
	DeliverFromParty                         whereHelperint
	DeliverFromPlant                         whereHelperstring
	DeliverToParty                           whereHelperint
	DeliverToPlant                           whereHelperstring
	ProductionPlantBusinessPartner           whereHelperint
	ProductionPlant                          whereHelperstring
	OperationsText                           whereHelperstring
	BillOfMaterial                           whereHelpernull_Int
	OperationsStatus                         whereHelpernull_String
	ResponsiblePlannerGroup                  whereHelpernull_String
	OperationsUnit                           whereHelpernull_String
	StandardLotSizeQuantity                  whereHelpernull_Float32
	MinimumLotSizeQuantity                   whereHelpernull_Float32
	MaximumLotSizeQuantity                   whereHelpernull_Float32
	PlainLongText                            whereHelpernull_String
	WorkCenter                               whereHelpernull_Int
	ValidityStartDate                        whereHelpernull_String
	ValidityEndDate                          whereHelpernull_String
	CreationDate                             whereHelperstring
	LastChangeDate                           whereHelperstring
	IsMarkedForDeletion                      whereHelpernull_Bool
}{
	Operations:                               whereHelperint{field: "`data_platform_operations_item_data`.`Operations`"},
	OperationsItem:                           whereHelperint{field: "`data_platform_operations_item_data`.`OperationsItem`"},
	SupplyChainRelationshipID:                whereHelperint{field: "`data_platform_operations_item_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:        whereHelperint{field: "`data_platform_operations_item_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:   whereHelperint{field: "`data_platform_operations_item_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipProductionPlantID: whereHelperint{field: "`data_platform_operations_item_data`.`SupplyChainRelationshipProductionPlantID`"},
	Product:                                  whereHelperstring{field: "`data_platform_operations_item_data`.`Product`"},
	Buyer:                                    whereHelperint{field: "`data_platform_operations_item_data`.`Buyer`"},
	Seller:                                   whereHelperint{field: "`data_platform_operations_item_data`.`Seller`"},
	DeliverFromParty:                         whereHelperint{field: "`data_platform_operations_item_data`.`DeliverFromParty`"},
	DeliverFromPlant:                         whereHelperstring{field: "`data_platform_operations_item_data`.`DeliverFromPlant`"},
	DeliverToParty:                           whereHelperint{field: "`data_platform_operations_item_data`.`DeliverToParty`"},
	DeliverToPlant:                           whereHelperstring{field: "`data_platform_operations_item_data`.`DeliverToPlant`"},
	ProductionPlantBusinessPartner:           whereHelperint{field: "`data_platform_operations_item_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                          whereHelperstring{field: "`data_platform_operations_item_data`.`ProductionPlant`"},
	OperationsText:                           whereHelperstring{field: "`data_platform_operations_item_data`.`OperationsText`"},
	BillOfMaterial:                           whereHelpernull_Int{field: "`data_platform_operations_item_data`.`BillOfMaterial`"},
	OperationsStatus:                         whereHelpernull_String{field: "`data_platform_operations_item_data`.`OperationsStatus`"},
	ResponsiblePlannerGroup:                  whereHelpernull_String{field: "`data_platform_operations_item_data`.`ResponsiblePlannerGroup`"},
	OperationsUnit:                           whereHelpernull_String{field: "`data_platform_operations_item_data`.`OperationsUnit`"},
	StandardLotSizeQuantity:                  whereHelpernull_Float32{field: "`data_platform_operations_item_data`.`StandardLotSizeQuantity`"},
	MinimumLotSizeQuantity:                   whereHelpernull_Float32{field: "`data_platform_operations_item_data`.`MinimumLotSizeQuantity`"},
	MaximumLotSizeQuantity:                   whereHelpernull_Float32{field: "`data_platform_operations_item_data`.`MaximumLotSizeQuantity`"},
	PlainLongText:                            whereHelpernull_String{field: "`data_platform_operations_item_data`.`PlainLongText`"},
	WorkCenter:                               whereHelpernull_Int{field: "`data_platform_operations_item_data`.`WorkCenter`"},
	ValidityStartDate:                        whereHelpernull_String{field: "`data_platform_operations_item_data`.`ValidityStartDate`"},
	ValidityEndDate:                          whereHelpernull_String{field: "`data_platform_operations_item_data`.`ValidityEndDate`"},
	CreationDate:                             whereHelperstring{field: "`data_platform_operations_item_data`.`CreationDate`"},
	LastChangeDate:                           whereHelperstring{field: "`data_platform_operations_item_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                      whereHelpernull_Bool{field: "`data_platform_operations_item_data`.`IsMarkedForDeletion`"},
}

// DataPlatformOperationsItemDatumRels is where relationship names are stored.
var DataPlatformOperationsItemDatumRels = struct {
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum           string
	OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum       string
	BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum string
	BuyerDataPlatformSupplyChainRelationshipGeneralDatum          string
	WorkCenterDataPlatformWorkCenterGeneralDatum                  string
	Operation                                                     string
}{
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum:           "BillOfMaterialDataPlatformBillOfMaterialHeaderDatum",
	OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum:       "OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum",
	BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum: "BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum",
	BuyerDataPlatformSupplyChainRelationshipGeneralDatum:          "BuyerDataPlatformSupplyChainRelationshipGeneralDatum",
	WorkCenterDataPlatformWorkCenterGeneralDatum:                  "WorkCenterDataPlatformWorkCenterGeneralDatum",
	Operation: "Operation",
}

// dataPlatformOperationsItemDatumR is where relationships are stored.
type dataPlatformOperationsItemDatumR struct {
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum           *DataPlatformBillOfMaterialHeaderDatum                    `boil:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" json:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" toml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" yaml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum"`
	OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum       *DataPlatformQuantityUnitQuantityUnitDatum                `boil:"OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum *DataPlatformSupplyChainRelationshipDeliveryRelationDatum `boil:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum" json:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum" toml:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum" yaml:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum"`
	BuyerDataPlatformSupplyChainRelationshipGeneralDatum          *DataPlatformSupplyChainRelationshipGeneralDatum          `boil:"BuyerDataPlatformSupplyChainRelationshipGeneralDatum" json:"BuyerDataPlatformSupplyChainRelationshipGeneralDatum" toml:"BuyerDataPlatformSupplyChainRelationshipGeneralDatum" yaml:"BuyerDataPlatformSupplyChainRelationshipGeneralDatum"`
	WorkCenterDataPlatformWorkCenterGeneralDatum                  *DataPlatformWorkCenterGeneralDatum                       `boil:"WorkCenterDataPlatformWorkCenterGeneralDatum" json:"WorkCenterDataPlatformWorkCenterGeneralDatum" toml:"WorkCenterDataPlatformWorkCenterGeneralDatum" yaml:"WorkCenterDataPlatformWorkCenterGeneralDatum"`
	Operation                                                     *DataPlatformOperationsHeaderDatum                        `boil:"Operation" json:"Operation" toml:"Operation" yaml:"Operation"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformOperationsItemDatumR) NewStruct() *dataPlatformOperationsItemDatumR {
	return &dataPlatformOperationsItemDatumR{}
}

func (r *dataPlatformOperationsItemDatumR) GetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum() *DataPlatformBillOfMaterialHeaderDatum {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum
}

func (r *dataPlatformOperationsItemDatumR) GetOperationsUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformOperationsItemDatumR) GetBuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum() *DataPlatformSupplyChainRelationshipDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum
}

func (r *dataPlatformOperationsItemDatumR) GetBuyerDataPlatformSupplyChainRelationshipGeneralDatum() *DataPlatformSupplyChainRelationshipGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSupplyChainRelationshipGeneralDatum
}

func (r *dataPlatformOperationsItemDatumR) GetWorkCenterDataPlatformWorkCenterGeneralDatum() *DataPlatformWorkCenterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.WorkCenterDataPlatformWorkCenterGeneralDatum
}

func (r *dataPlatformOperationsItemDatumR) GetOperation() *DataPlatformOperationsHeaderDatum {
	if r == nil {
		return nil
	}
	return r.Operation
}

// dataPlatformOperationsItemDatumL is where Load methods for each relationship are stored.
type dataPlatformOperationsItemDatumL struct{}

var (
	dataPlatformOperationsItemDatumAllColumns            = []string{"Operations", "OperationsItem", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "Product", "Buyer", "Seller", "DeliverFromParty", "DeliverFromPlant", "DeliverToParty", "DeliverToPlant", "ProductionPlantBusinessPartner", "ProductionPlant", "OperationsText", "BillOfMaterial", "OperationsStatus", "ResponsiblePlannerGroup", "OperationsUnit", "StandardLotSizeQuantity", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "PlainLongText", "WorkCenter", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformOperationsItemDatumColumnsWithoutDefault = []string{"Operations", "OperationsItem", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "Product", "Buyer", "Seller", "DeliverFromParty", "DeliverFromPlant", "DeliverToParty", "DeliverToPlant", "ProductionPlantBusinessPartner", "ProductionPlant", "OperationsText", "BillOfMaterial", "OperationsStatus", "ResponsiblePlannerGroup", "OperationsUnit", "StandardLotSizeQuantity", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "PlainLongText", "WorkCenter", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformOperationsItemDatumColumnsWithDefault    = []string{}
	dataPlatformOperationsItemDatumPrimaryKeyColumns     = []string{"Operations", "OperationsItem"}
	dataPlatformOperationsItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformOperationsItemDatumSlice is an alias for a slice of pointers to DataPlatformOperationsItemDatum.
	// This should almost always be used instead of []DataPlatformOperationsItemDatum.
	DataPlatformOperationsItemDatumSlice []*DataPlatformOperationsItemDatum

	dataPlatformOperationsItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformOperationsItemDatumType                 = reflect.TypeOf(&DataPlatformOperationsItemDatum{})
	dataPlatformOperationsItemDatumMapping              = queries.MakeStructMapping(dataPlatformOperationsItemDatumType)
	dataPlatformOperationsItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformOperationsItemDatumType, dataPlatformOperationsItemDatumMapping, dataPlatformOperationsItemDatumPrimaryKeyColumns)
	dataPlatformOperationsItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformOperationsItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformOperationsItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformOperationsItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformOperationsItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformOperationsItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformOperationsItemDatum record from the query.
func (q dataPlatformOperationsItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformOperationsItemDatum, error) {
	o := &DataPlatformOperationsItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_operations_item_data")
	}

	return o, nil
}

// All returns all DataPlatformOperationsItemDatum records from the query.
func (q dataPlatformOperationsItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformOperationsItemDatumSlice, error) {
	var o []*DataPlatformOperationsItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformOperationsItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformOperationsItemDatum records in the query.
func (q dataPlatformOperationsItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_operations_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformOperationsItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_operations_item_data exists")
	}

	return count > 0, nil
}

// BillOfMaterialDataPlatformBillOfMaterialHeaderDatum pointed to by the foreign key.
func (o *DataPlatformOperationsItemDatum) BillOfMaterialDataPlatformBillOfMaterialHeaderDatum(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillOfMaterial` = ?", o.BillOfMaterial),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformOperationsItemDatum) OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.OperationsUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformOperationsItemDatum) BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSupplyChainRelationshipDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSupplyChainRelationshipGeneralDatum pointed to by the foreign key.
func (o *DataPlatformOperationsItemDatum) BuyerDataPlatformSupplyChainRelationshipGeneralDatum(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSupplyChainRelationshipGeneralData(queryMods...)
}

// WorkCenterDataPlatformWorkCenterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformOperationsItemDatum) WorkCenterDataPlatformWorkCenterGeneralDatum(mods ...qm.QueryMod) dataPlatformWorkCenterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`WorkCenter` = ?", o.WorkCenter),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformWorkCenterGeneralData(queryMods...)
}

// Operation pointed to by the foreign key.
func (o *DataPlatformOperationsItemDatum) Operation(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Operations` = ?", o.Operations),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsItemDatumL) LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsItemDatum
	var object *DataPlatformOperationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsItemDatum.(*DataPlatformOperationsItemDatum)
		if !ok {
			object = new(DataPlatformOperationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsItemDatum.(*[]*DataPlatformOperationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsItemDatumR{}
		}
		if !queries.IsNil(object.BillOfMaterial) {
			args = append(args, object.BillOfMaterial)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillOfMaterial) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillOfMaterial) {
				args = append(args, obj.BillOfMaterial)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBillOfMaterialHeaderDatum")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBillOfMaterialHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillOfMaterial, foreign.BillOfMaterial) {
				local.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperationsUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsItemDatumL) LoadOperationsUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsItemDatum
	var object *DataPlatformOperationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsItemDatum.(*DataPlatformOperationsItemDatum)
		if !ok {
			object = new(DataPlatformOperationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsItemDatum.(*[]*DataPlatformOperationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsItemDatumR{}
		}
		if !queries.IsNil(object.OperationsUnit) {
			args = append(args, object.OperationsUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OperationsUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OperationsUnit) {
				args = append(args, obj.OperationsUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OperationsUnit, foreign.QuantityUnit) {
				local.R.OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsItemDatumL) LoadBuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsItemDatum
	var object *DataPlatformOperationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsItemDatum.(*DataPlatformOperationsItemDatum)
		if !ok {
			object = new(DataPlatformOperationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsItemDatum.(*[]*DataPlatformOperationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsItemDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_delivery_relation_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSupplyChainRelationshipDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSupplyChainRelationshipDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_supply_chain_relationship_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSupplyChainRelationshipGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsItemDatumL) LoadBuyerDataPlatformSupplyChainRelationshipGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsItemDatum
	var object *DataPlatformOperationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsItemDatum.(*DataPlatformOperationsItemDatum)
		if !ok {
			object = new(DataPlatformOperationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsItemDatum.(*[]*DataPlatformOperationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsItemDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_general_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSupplyChainRelationshipGeneralDatum")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSupplyChainRelationshipGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_supply_chain_relationship_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSupplyChainRelationshipGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSupplyChainRelationshipGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadWorkCenterDataPlatformWorkCenterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsItemDatumL) LoadWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsItemDatum
	var object *DataPlatformOperationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsItemDatum.(*DataPlatformOperationsItemDatum)
		if !ok {
			object = new(DataPlatformOperationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsItemDatum.(*[]*DataPlatformOperationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsItemDatumR{}
		}
		if !queries.IsNil(object.WorkCenter) {
			args = append(args, object.WorkCenter)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WorkCenter) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.WorkCenter) {
				args = append(args, obj.WorkCenter)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_work_center_general_data`),
		qm.WhereIn(`data_platform_work_center_general_data.WorkCenter in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformWorkCenterGeneralDatum")
	}

	var resultSlice []*DataPlatformWorkCenterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformWorkCenterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_work_center_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_work_center_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WorkCenterDataPlatformWorkCenterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WorkCenter, foreign.WorkCenter) {
				local.R.WorkCenterDataPlatformWorkCenterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsItemDatumL) LoadOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsItemDatum
	var object *DataPlatformOperationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsItemDatum.(*DataPlatformOperationsItemDatum)
		if !ok {
			object = new(DataPlatformOperationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsItemDatum.(*[]*DataPlatformOperationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsItemDatumR{}
		}
		args = append(args, object.Operations)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Operations {
					continue Outer
				}
			}

			args = append(args, obj.Operations)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.Operations in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOperationsHeaderDatum")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOperationsHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Operation = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Operations == foreign.Operations {
				local.R.Operation = foreign
				break
			}
		}
	}

	return nil
}

// SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum of the dataPlatformOperationsItemDatum to the related item.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum to related.
func (o *DataPlatformOperationsItemDatum) SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillOfMaterial, o.Operations, o.OperationsItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillOfMaterial, related.BillOfMaterial)
	if o.R == nil {
		o.R = &dataPlatformOperationsItemDatumR{
			BillOfMaterialDataPlatformBillOfMaterialHeaderDatum: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = related
	}

	return nil
}

// RemoveBillOfMaterialDataPlatformBillOfMaterialHeaderDatum relationship.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum to nil.
func (o *DataPlatformOperationsItemDatum) RemoveBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformBillOfMaterialHeaderDatum) error {
	var err error

	queries.SetScanner(&o.BillOfMaterial, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillOfMaterial")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOperationsUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformOperationsItemDatum to the related item.
// Sets o.R.OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformOperationsItemDatum) SetOperationsUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OperationsUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.Operations, o.OperationsItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OperationsUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformOperationsItemDatumR{
			OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveOperationsUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformOperationsItemDatum) RemoveOperationsUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.OperationsUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("OperationsUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum of the dataPlatformOperationsItemDatum to the related item.
// Sets o.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum to related.
func (o *DataPlatformOperationsItemDatum) SetBuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSupplyChainRelationshipDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Operations, o.OperationsItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformOperationsItemDatumR{
			BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSupplyChainRelationshipGeneralDatum of the dataPlatformOperationsItemDatum to the related item.
// Sets o.R.BuyerDataPlatformSupplyChainRelationshipGeneralDatum to related.
func (o *DataPlatformOperationsItemDatum) SetBuyerDataPlatformSupplyChainRelationshipGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSupplyChainRelationshipGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Operations, o.OperationsItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformOperationsItemDatumR{
			BuyerDataPlatformSupplyChainRelationshipGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSupplyChainRelationshipGeneralDatum = related
	}

	return nil
}

// SetWorkCenterDataPlatformWorkCenterGeneralDatum of the dataPlatformOperationsItemDatum to the related item.
// Sets o.R.WorkCenterDataPlatformWorkCenterGeneralDatum to related.
func (o *DataPlatformOperationsItemDatum) SetWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformWorkCenterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"WorkCenter"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.WorkCenter, o.Operations, o.OperationsItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WorkCenter, related.WorkCenter)
	if o.R == nil {
		o.R = &dataPlatformOperationsItemDatumR{
			WorkCenterDataPlatformWorkCenterGeneralDatum: related,
		}
	} else {
		o.R.WorkCenterDataPlatformWorkCenterGeneralDatum = related
	}

	return nil
}

// RemoveWorkCenterDataPlatformWorkCenterGeneralDatum relationship.
// Sets o.R.WorkCenterDataPlatformWorkCenterGeneralDatum to nil.
func (o *DataPlatformOperationsItemDatum) RemoveWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformWorkCenterGeneralDatum) error {
	var err error

	queries.SetScanner(&o.WorkCenter, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("WorkCenter")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.WorkCenterDataPlatformWorkCenterGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOperation of the dataPlatformOperationsItemDatum to the related item.
// Sets o.R.Operation to related.
func (o *DataPlatformOperationsItemDatum) SetOperation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOperationsHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Operations"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Operations, o.Operations, o.OperationsItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Operations = related.Operations
	if o.R == nil {
		o.R = &dataPlatformOperationsItemDatumR{
			Operation: related,
		}
	} else {
		o.R.Operation = related
	}

	return nil
}

// DataPlatformOperationsItemData retrieves all the records using an executor.
func DataPlatformOperationsItemData(mods ...qm.QueryMod) dataPlatformOperationsItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_operations_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_operations_item_data`.*"})
	}

	return dataPlatformOperationsItemDatumQuery{q}
}

// FindDataPlatformOperationsItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformOperationsItemDatum(ctx context.Context, exec boil.ContextExecutor, operations int, operationsItem int, selectCols ...string) (*DataPlatformOperationsItemDatum, error) {
	dataPlatformOperationsItemDatumObj := &DataPlatformOperationsItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_operations_item_data` where `Operations`=? AND `OperationsItem`=?", sel,
	)

	q := queries.Raw(query, operations, operationsItem)

	err := q.Bind(ctx, exec, dataPlatformOperationsItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_operations_item_data")
	}

	return dataPlatformOperationsItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformOperationsItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_operations_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOperationsItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformOperationsItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformOperationsItemDatumInsertCache[key]
	dataPlatformOperationsItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformOperationsItemDatumAllColumns,
			dataPlatformOperationsItemDatumColumnsWithDefault,
			dataPlatformOperationsItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOperationsItemDatumType, dataPlatformOperationsItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformOperationsItemDatumType, dataPlatformOperationsItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_operations_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_operations_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_operations_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_operations_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Operations,
		o.OperationsItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_operations_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOperationsItemDatumInsertCacheMut.Lock()
		dataPlatformOperationsItemDatumInsertCache[key] = cache
		dataPlatformOperationsItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformOperationsItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformOperationsItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformOperationsItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformOperationsItemDatumUpdateCache[key]
	dataPlatformOperationsItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformOperationsItemDatumAllColumns,
			dataPlatformOperationsItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_operations_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformOperationsItemDatumType, dataPlatformOperationsItemDatumMapping, append(wl, dataPlatformOperationsItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_operations_item_data row")
	}

	if !cached {
		dataPlatformOperationsItemDatumUpdateCacheMut.Lock()
		dataPlatformOperationsItemDatumUpdateCache[key] = cache
		dataPlatformOperationsItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformOperationsItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_operations_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformOperationsItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOperationsItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOperationsItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformOperationsItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformOperationsItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformOperationsItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_operations_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOperationsItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformOperationsItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformOperationsItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformOperationsItemDatumUpsertCache[key]
	dataPlatformOperationsItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformOperationsItemDatumAllColumns,
			dataPlatformOperationsItemDatumColumnsWithDefault,
			dataPlatformOperationsItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformOperationsItemDatumAllColumns,
			dataPlatformOperationsItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_operations_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_operations_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_operations_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOperationsItemDatumType, dataPlatformOperationsItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformOperationsItemDatumType, dataPlatformOperationsItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_operations_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformOperationsItemDatumType, dataPlatformOperationsItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_operations_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_operations_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOperationsItemDatumUpsertCacheMut.Lock()
		dataPlatformOperationsItemDatumUpsertCache[key] = cache
		dataPlatformOperationsItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformOperationsItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformOperationsItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformOperationsItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformOperationsItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_operations_item_data` WHERE `Operations`=? AND `OperationsItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_operations_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformOperationsItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformOperationsItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_operations_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformOperationsItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOperationsItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_operations_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOperationsItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformOperationsItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformOperationsItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformOperationsItemDatum(ctx, exec, o.Operations, o.OperationsItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformOperationsItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformOperationsItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOperationsItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_operations_item_data`.* FROM `data_platform_operations_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOperationsItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformOperationsItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformOperationsItemDatumExists checks if the DataPlatformOperationsItemDatum row exists.
func DataPlatformOperationsItemDatumExists(ctx context.Context, exec boil.ContextExecutor, operations int, operationsItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_operations_item_data` where `Operations`=? AND `OperationsItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, operations, operationsItem)
	}
	row := exec.QueryRowContext(ctx, sql, operations, operationsItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_operations_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformOperationsItemDatum row exists.
func (o *DataPlatformOperationsItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformOperationsItemDatumExists(ctx, exec, o.Operations, o.OperationsItem)
}
