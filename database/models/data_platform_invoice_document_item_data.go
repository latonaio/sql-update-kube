// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInvoiceDocumentItemDatum is an object representing the database table.
type DataPlatformInvoiceDocumentItemDatum struct {
	InvoiceDocument                         int          `boil:"InvoiceDocument" json:"InvoiceDocument" toml:"InvoiceDocument" yaml:"InvoiceDocument"`
	InvoiceDocumentItem                     int          `boil:"InvoiceDocumentItem" json:"InvoiceDocumentItem" toml:"InvoiceDocumentItem" yaml:"InvoiceDocumentItem"`
	InvoiceDocumentItemCategory             string       `boil:"InvoiceDocumentItemCategory" json:"InvoiceDocumentItemCategory" toml:"InvoiceDocumentItemCategory" yaml:"InvoiceDocumentItemCategory"`
	SupplyChainRelationshipID               int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID       null.Int     `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID,omitempty" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID,omitempty"`
	SupplyChainRelationshipDeliveryPlantID  null.Int     `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID,omitempty" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID,omitempty"`
	InvoiceDocumentItemText                 null.String  `boil:"InvoiceDocumentItemText" json:"InvoiceDocumentItemText,omitempty" toml:"InvoiceDocumentItemText" yaml:"InvoiceDocumentItemText,omitempty"`
	InvoiceDocumentItemTextByBuyer          string       `boil:"InvoiceDocumentItemTextByBuyer" json:"InvoiceDocumentItemTextByBuyer" toml:"InvoiceDocumentItemTextByBuyer" yaml:"InvoiceDocumentItemTextByBuyer"`
	InvoiceDocumentItemTextBySeller         string       `boil:"InvoiceDocumentItemTextBySeller" json:"InvoiceDocumentItemTextBySeller" toml:"InvoiceDocumentItemTextBySeller" yaml:"InvoiceDocumentItemTextBySeller"`
	Product                                 string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ProductGroup                            null.String  `boil:"ProductGroup" json:"ProductGroup,omitempty" toml:"ProductGroup" yaml:"ProductGroup,omitempty"`
	ProductStandardID                       null.String  `boil:"ProductStandardID" json:"ProductStandardID,omitempty" toml:"ProductStandardID" yaml:"ProductStandardID,omitempty"`
	ItemBillingIsConfirmed                  null.Bool    `boil:"ItemBillingIsConfirmed" json:"ItemBillingIsConfirmed,omitempty" toml:"ItemBillingIsConfirmed" yaml:"ItemBillingIsConfirmed,omitempty"`
	Buyer                                   int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                  int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                          null.Int     `boil:"DeliverToParty" json:"DeliverToParty,omitempty" toml:"DeliverToParty" yaml:"DeliverToParty,omitempty"`
	DeliverFromParty                        null.Int     `boil:"DeliverFromParty" json:"DeliverFromParty,omitempty" toml:"DeliverFromParty" yaml:"DeliverFromParty,omitempty"`
	DeliverToPlant                          null.String  `boil:"DeliverToPlant" json:"DeliverToPlant,omitempty" toml:"DeliverToPlant" yaml:"DeliverToPlant,omitempty"`
	DeliverToPlantStorageLocation           null.String  `boil:"DeliverToPlantStorageLocation" json:"DeliverToPlantStorageLocation,omitempty" toml:"DeliverToPlantStorageLocation" yaml:"DeliverToPlantStorageLocation,omitempty"`
	DeliverFromPlant                        null.String  `boil:"DeliverFromPlant" json:"DeliverFromPlant,omitempty" toml:"DeliverFromPlant" yaml:"DeliverFromPlant,omitempty"`
	DeliverFromPlantStorageLocation         null.String  `boil:"DeliverFromPlantStorageLocation" json:"DeliverFromPlantStorageLocation,omitempty" toml:"DeliverFromPlantStorageLocation" yaml:"DeliverFromPlantStorageLocation,omitempty"`
	ProductionPlantBusinessPartner          null.Int     `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner,omitempty" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner,omitempty"`
	ProductionPlant                         null.String  `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	ProductionPlantStorageLocation          null.String  `boil:"ProductionPlantStorageLocation" json:"ProductionPlantStorageLocation,omitempty" toml:"ProductionPlantStorageLocation" yaml:"ProductionPlantStorageLocation,omitempty"`
	ServicesRenderedDate                    null.String  `boil:"ServicesRenderedDate" json:"ServicesRenderedDate,omitempty" toml:"ServicesRenderedDate" yaml:"ServicesRenderedDate,omitempty"`
	InvoiceQuantity                         float32      `boil:"InvoiceQuantity" json:"InvoiceQuantity" toml:"InvoiceQuantity" yaml:"InvoiceQuantity"`
	InvoiceQuantityUnit                     string       `boil:"InvoiceQuantityUnit" json:"InvoiceQuantityUnit" toml:"InvoiceQuantityUnit" yaml:"InvoiceQuantityUnit"`
	InvoiceQuantityInBaseUnit               float32      `boil:"InvoiceQuantityInBaseUnit" json:"InvoiceQuantityInBaseUnit" toml:"InvoiceQuantityInBaseUnit" yaml:"InvoiceQuantityInBaseUnit"`
	BaseUnit                                string       `boil:"BaseUnit" json:"BaseUnit" toml:"BaseUnit" yaml:"BaseUnit"`
	DeliveryUnit                            null.String  `boil:"DeliveryUnit" json:"DeliveryUnit,omitempty" toml:"DeliveryUnit" yaml:"DeliveryUnit,omitempty"`
	ActualGoodsIssueDate                    null.String  `boil:"ActualGoodsIssueDate" json:"ActualGoodsIssueDate,omitempty" toml:"ActualGoodsIssueDate" yaml:"ActualGoodsIssueDate,omitempty"`
	ActualGoodsIssueTime                    null.String  `boil:"ActualGoodsIssueTime" json:"ActualGoodsIssueTime,omitempty" toml:"ActualGoodsIssueTime" yaml:"ActualGoodsIssueTime,omitempty"`
	ActualGoodsReceiptDate                  null.String  `boil:"ActualGoodsReceiptDate" json:"ActualGoodsReceiptDate,omitempty" toml:"ActualGoodsReceiptDate" yaml:"ActualGoodsReceiptDate,omitempty"`
	ActualGoodsReceiptTime                  null.String  `boil:"ActualGoodsReceiptTime" json:"ActualGoodsReceiptTime,omitempty" toml:"ActualGoodsReceiptTime" yaml:"ActualGoodsReceiptTime,omitempty"`
	ItemGrossWeight                         null.Float32 `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ItemNetWeight                           null.Float32 `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemWeightUnit                          null.String  `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	NetAmount                               float32      `boil:"NetAmount" json:"NetAmount" toml:"NetAmount" yaml:"NetAmount"`
	TaxAmount                               float32      `boil:"TaxAmount" json:"TaxAmount" toml:"TaxAmount" yaml:"TaxAmount"`
	GrossAmount                             float32      `boil:"GrossAmount" json:"GrossAmount" toml:"GrossAmount" yaml:"GrossAmount"`
	GoodsIssueOrReceiptSlipNumber           null.String  `boil:"GoodsIssueOrReceiptSlipNumber" json:"GoodsIssueOrReceiptSlipNumber,omitempty" toml:"GoodsIssueOrReceiptSlipNumber" yaml:"GoodsIssueOrReceiptSlipNumber,omitempty"`
	TransactionCurrency                     null.String  `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	PricingDate                             null.String  `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	TransactionTaxClassification            string       `boil:"TransactionTaxClassification" json:"TransactionTaxClassification" toml:"TransactionTaxClassification" yaml:"TransactionTaxClassification"`
	ProductTaxClassificationBillToCountry   string       `boil:"ProductTaxClassificationBillToCountry" json:"ProductTaxClassificationBillToCountry" toml:"ProductTaxClassificationBillToCountry" yaml:"ProductTaxClassificationBillToCountry"`
	ProductTaxClassificationBillFromCountry string       `boil:"ProductTaxClassificationBillFromCountry" json:"ProductTaxClassificationBillFromCountry" toml:"ProductTaxClassificationBillFromCountry" yaml:"ProductTaxClassificationBillFromCountry"`
	DefinedTaxClassification                string       `boil:"DefinedTaxClassification" json:"DefinedTaxClassification" toml:"DefinedTaxClassification" yaml:"DefinedTaxClassification"`
	Project                                 null.Int     `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	WBSElement                              null.Int     `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	OrderID                                 null.Int     `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                               null.Int     `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	OrderType                               null.String  `boil:"OrderType" json:"OrderType,omitempty" toml:"OrderType" yaml:"OrderType,omitempty"`
	ContractType                            null.String  `boil:"ContractType" json:"ContractType,omitempty" toml:"ContractType" yaml:"ContractType,omitempty"`
	OrderVaridityStartDate                  null.String  `boil:"OrderVaridityStartDate" json:"OrderVaridityStartDate,omitempty" toml:"OrderVaridityStartDate" yaml:"OrderVaridityStartDate,omitempty"`
	OrderVaridityEndDate                    null.String  `boil:"OrderVaridityEndDate" json:"OrderVaridityEndDate,omitempty" toml:"OrderVaridityEndDate" yaml:"OrderVaridityEndDate,omitempty"`
	InvoicePeriodStartDate                  null.String  `boil:"InvoicePeriodStartDate" json:"InvoicePeriodStartDate,omitempty" toml:"InvoicePeriodStartDate" yaml:"InvoicePeriodStartDate,omitempty"`
	InvoicePeriodEndDate                    null.String  `boil:"InvoicePeriodEndDate" json:"InvoicePeriodEndDate,omitempty" toml:"InvoicePeriodEndDate" yaml:"InvoicePeriodEndDate,omitempty"`
	DeliveryDocument                        null.Int     `boil:"DeliveryDocument" json:"DeliveryDocument,omitempty" toml:"DeliveryDocument" yaml:"DeliveryDocument,omitempty"`
	DeliveryDocumentItem                    null.Int     `boil:"DeliveryDocumentItem" json:"DeliveryDocumentItem,omitempty" toml:"DeliveryDocumentItem" yaml:"DeliveryDocumentItem,omitempty"`
	OriginDocument                          null.Int     `boil:"OriginDocument" json:"OriginDocument,omitempty" toml:"OriginDocument" yaml:"OriginDocument,omitempty"`
	OriginDocumentItem                      null.Int     `boil:"OriginDocumentItem" json:"OriginDocumentItem,omitempty" toml:"OriginDocumentItem" yaml:"OriginDocumentItem,omitempty"`
	ReferenceDocument                       null.Int     `boil:"ReferenceDocument" json:"ReferenceDocument,omitempty" toml:"ReferenceDocument" yaml:"ReferenceDocument,omitempty"`
	ReferenceDocumentItem                   null.Int     `boil:"ReferenceDocumentItem" json:"ReferenceDocumentItem,omitempty" toml:"ReferenceDocumentItem" yaml:"ReferenceDocumentItem,omitempty"`
	ExternalReferenceDocument               null.String  `boil:"ExternalReferenceDocument" json:"ExternalReferenceDocument,omitempty" toml:"ExternalReferenceDocument" yaml:"ExternalReferenceDocument,omitempty"`
	ExternalReferenceDocumentItem           null.String  `boil:"ExternalReferenceDocumentItem" json:"ExternalReferenceDocumentItem,omitempty" toml:"ExternalReferenceDocumentItem" yaml:"ExternalReferenceDocumentItem,omitempty"`
	TaxCode                                 null.String  `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	TaxRate                                 null.Float32 `boil:"TaxRate" json:"TaxRate,omitempty" toml:"TaxRate" yaml:"TaxRate,omitempty"`
	CountryOfOrigin                         null.String  `boil:"CountryOfOrigin" json:"CountryOfOrigin,omitempty" toml:"CountryOfOrigin" yaml:"CountryOfOrigin,omitempty"`
	CountryOfOriginLanguage                 null.String  `boil:"CountryOfOriginLanguage" json:"CountryOfOriginLanguage,omitempty" toml:"CountryOfOriginLanguage" yaml:"CountryOfOriginLanguage,omitempty"`
	Equipment                               null.Int     `boil:"Equipment" json:"Equipment,omitempty" toml:"Equipment" yaml:"Equipment,omitempty"`
	ItemPaymentRequisitionIsCreated         null.Bool    `boil:"ItemPaymentRequisitionIsCreated" json:"ItemPaymentRequisitionIsCreated,omitempty" toml:"ItemPaymentRequisitionIsCreated" yaml:"ItemPaymentRequisitionIsCreated,omitempty"`
	ItemIsCleared                           null.Bool    `boil:"ItemIsCleared" json:"ItemIsCleared,omitempty" toml:"ItemIsCleared" yaml:"ItemIsCleared,omitempty"`
	ItemPaymentBlockStatus                  null.Bool    `boil:"ItemPaymentBlockStatus" json:"ItemPaymentBlockStatus,omitempty" toml:"ItemPaymentBlockStatus" yaml:"ItemPaymentBlockStatus,omitempty"`
	CreationDate                            string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                            string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                          string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                          string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsCancelled                             null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`

	R *dataPlatformInvoiceDocumentItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInvoiceDocumentItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInvoiceDocumentItemDatumColumns = struct {
	InvoiceDocument                         string
	InvoiceDocumentItem                     string
	InvoiceDocumentItemCategory             string
	SupplyChainRelationshipID               string
	SupplyChainRelationshipDeliveryID       string
	SupplyChainRelationshipDeliveryPlantID  string
	InvoiceDocumentItemText                 string
	InvoiceDocumentItemTextByBuyer          string
	InvoiceDocumentItemTextBySeller         string
	Product                                 string
	ProductGroup                            string
	ProductStandardID                       string
	ItemBillingIsConfirmed                  string
	Buyer                                   string
	Seller                                  string
	DeliverToParty                          string
	DeliverFromParty                        string
	DeliverToPlant                          string
	DeliverToPlantStorageLocation           string
	DeliverFromPlant                        string
	DeliverFromPlantStorageLocation         string
	ProductionPlantBusinessPartner          string
	ProductionPlant                         string
	ProductionPlantStorageLocation          string
	ServicesRenderedDate                    string
	InvoiceQuantity                         string
	InvoiceQuantityUnit                     string
	InvoiceQuantityInBaseUnit               string
	BaseUnit                                string
	DeliveryUnit                            string
	ActualGoodsIssueDate                    string
	ActualGoodsIssueTime                    string
	ActualGoodsReceiptDate                  string
	ActualGoodsReceiptTime                  string
	ItemGrossWeight                         string
	ItemNetWeight                           string
	ItemWeightUnit                          string
	NetAmount                               string
	TaxAmount                               string
	GrossAmount                             string
	GoodsIssueOrReceiptSlipNumber           string
	TransactionCurrency                     string
	PricingDate                             string
	TransactionTaxClassification            string
	ProductTaxClassificationBillToCountry   string
	ProductTaxClassificationBillFromCountry string
	DefinedTaxClassification                string
	Project                                 string
	WBSElement                              string
	OrderID                                 string
	OrderItem                               string
	OrderType                               string
	ContractType                            string
	OrderVaridityStartDate                  string
	OrderVaridityEndDate                    string
	InvoicePeriodStartDate                  string
	InvoicePeriodEndDate                    string
	DeliveryDocument                        string
	DeliveryDocumentItem                    string
	OriginDocument                          string
	OriginDocumentItem                      string
	ReferenceDocument                       string
	ReferenceDocumentItem                   string
	ExternalReferenceDocument               string
	ExternalReferenceDocumentItem           string
	TaxCode                                 string
	TaxRate                                 string
	CountryOfOrigin                         string
	CountryOfOriginLanguage                 string
	Equipment                               string
	ItemPaymentRequisitionIsCreated         string
	ItemIsCleared                           string
	ItemPaymentBlockStatus                  string
	CreationDate                            string
	CreationTime                            string
	LastChangeDate                          string
	LastChangeTime                          string
	IsCancelled                             string
}{
	InvoiceDocument:                         "InvoiceDocument",
	InvoiceDocumentItem:                     "InvoiceDocumentItem",
	InvoiceDocumentItemCategory:             "InvoiceDocumentItemCategory",
	SupplyChainRelationshipID:               "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:       "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:  "SupplyChainRelationshipDeliveryPlantID",
	InvoiceDocumentItemText:                 "InvoiceDocumentItemText",
	InvoiceDocumentItemTextByBuyer:          "InvoiceDocumentItemTextByBuyer",
	InvoiceDocumentItemTextBySeller:         "InvoiceDocumentItemTextBySeller",
	Product:                                 "Product",
	ProductGroup:                            "ProductGroup",
	ProductStandardID:                       "ProductStandardID",
	ItemBillingIsConfirmed:                  "ItemBillingIsConfirmed",
	Buyer:                                   "Buyer",
	Seller:                                  "Seller",
	DeliverToParty:                          "DeliverToParty",
	DeliverFromParty:                        "DeliverFromParty",
	DeliverToPlant:                          "DeliverToPlant",
	DeliverToPlantStorageLocation:           "DeliverToPlantStorageLocation",
	DeliverFromPlant:                        "DeliverFromPlant",
	DeliverFromPlantStorageLocation:         "DeliverFromPlantStorageLocation",
	ProductionPlantBusinessPartner:          "ProductionPlantBusinessPartner",
	ProductionPlant:                         "ProductionPlant",
	ProductionPlantStorageLocation:          "ProductionPlantStorageLocation",
	ServicesRenderedDate:                    "ServicesRenderedDate",
	InvoiceQuantity:                         "InvoiceQuantity",
	InvoiceQuantityUnit:                     "InvoiceQuantityUnit",
	InvoiceQuantityInBaseUnit:               "InvoiceQuantityInBaseUnit",
	BaseUnit:                                "BaseUnit",
	DeliveryUnit:                            "DeliveryUnit",
	ActualGoodsIssueDate:                    "ActualGoodsIssueDate",
	ActualGoodsIssueTime:                    "ActualGoodsIssueTime",
	ActualGoodsReceiptDate:                  "ActualGoodsReceiptDate",
	ActualGoodsReceiptTime:                  "ActualGoodsReceiptTime",
	ItemGrossWeight:                         "ItemGrossWeight",
	ItemNetWeight:                           "ItemNetWeight",
	ItemWeightUnit:                          "ItemWeightUnit",
	NetAmount:                               "NetAmount",
	TaxAmount:                               "TaxAmount",
	GrossAmount:                             "GrossAmount",
	GoodsIssueOrReceiptSlipNumber:           "GoodsIssueOrReceiptSlipNumber",
	TransactionCurrency:                     "TransactionCurrency",
	PricingDate:                             "PricingDate",
	TransactionTaxClassification:            "TransactionTaxClassification",
	ProductTaxClassificationBillToCountry:   "ProductTaxClassificationBillToCountry",
	ProductTaxClassificationBillFromCountry: "ProductTaxClassificationBillFromCountry",
	DefinedTaxClassification:                "DefinedTaxClassification",
	Project:                                 "Project",
	WBSElement:                              "WBSElement",
	OrderID:                                 "OrderID",
	OrderItem:                               "OrderItem",
	OrderType:                               "OrderType",
	ContractType:                            "ContractType",
	OrderVaridityStartDate:                  "OrderVaridityStartDate",
	OrderVaridityEndDate:                    "OrderVaridityEndDate",
	InvoicePeriodStartDate:                  "InvoicePeriodStartDate",
	InvoicePeriodEndDate:                    "InvoicePeriodEndDate",
	DeliveryDocument:                        "DeliveryDocument",
	DeliveryDocumentItem:                    "DeliveryDocumentItem",
	OriginDocument:                          "OriginDocument",
	OriginDocumentItem:                      "OriginDocumentItem",
	ReferenceDocument:                       "ReferenceDocument",
	ReferenceDocumentItem:                   "ReferenceDocumentItem",
	ExternalReferenceDocument:               "ExternalReferenceDocument",
	ExternalReferenceDocumentItem:           "ExternalReferenceDocumentItem",
	TaxCode:                                 "TaxCode",
	TaxRate:                                 "TaxRate",
	CountryOfOrigin:                         "CountryOfOrigin",
	CountryOfOriginLanguage:                 "CountryOfOriginLanguage",
	Equipment:                               "Equipment",
	ItemPaymentRequisitionIsCreated:         "ItemPaymentRequisitionIsCreated",
	ItemIsCleared:                           "ItemIsCleared",
	ItemPaymentBlockStatus:                  "ItemPaymentBlockStatus",
	CreationDate:                            "CreationDate",
	CreationTime:                            "CreationTime",
	LastChangeDate:                          "LastChangeDate",
	LastChangeTime:                          "LastChangeTime",
	IsCancelled:                             "IsCancelled",
}

var DataPlatformInvoiceDocumentItemDatumTableColumns = struct {
	InvoiceDocument                         string
	InvoiceDocumentItem                     string
	InvoiceDocumentItemCategory             string
	SupplyChainRelationshipID               string
	SupplyChainRelationshipDeliveryID       string
	SupplyChainRelationshipDeliveryPlantID  string
	InvoiceDocumentItemText                 string
	InvoiceDocumentItemTextByBuyer          string
	InvoiceDocumentItemTextBySeller         string
	Product                                 string
	ProductGroup                            string
	ProductStandardID                       string
	ItemBillingIsConfirmed                  string
	Buyer                                   string
	Seller                                  string
	DeliverToParty                          string
	DeliverFromParty                        string
	DeliverToPlant                          string
	DeliverToPlantStorageLocation           string
	DeliverFromPlant                        string
	DeliverFromPlantStorageLocation         string
	ProductionPlantBusinessPartner          string
	ProductionPlant                         string
	ProductionPlantStorageLocation          string
	ServicesRenderedDate                    string
	InvoiceQuantity                         string
	InvoiceQuantityUnit                     string
	InvoiceQuantityInBaseUnit               string
	BaseUnit                                string
	DeliveryUnit                            string
	ActualGoodsIssueDate                    string
	ActualGoodsIssueTime                    string
	ActualGoodsReceiptDate                  string
	ActualGoodsReceiptTime                  string
	ItemGrossWeight                         string
	ItemNetWeight                           string
	ItemWeightUnit                          string
	NetAmount                               string
	TaxAmount                               string
	GrossAmount                             string
	GoodsIssueOrReceiptSlipNumber           string
	TransactionCurrency                     string
	PricingDate                             string
	TransactionTaxClassification            string
	ProductTaxClassificationBillToCountry   string
	ProductTaxClassificationBillFromCountry string
	DefinedTaxClassification                string
	Project                                 string
	WBSElement                              string
	OrderID                                 string
	OrderItem                               string
	OrderType                               string
	ContractType                            string
	OrderVaridityStartDate                  string
	OrderVaridityEndDate                    string
	InvoicePeriodStartDate                  string
	InvoicePeriodEndDate                    string
	DeliveryDocument                        string
	DeliveryDocumentItem                    string
	OriginDocument                          string
	OriginDocumentItem                      string
	ReferenceDocument                       string
	ReferenceDocumentItem                   string
	ExternalReferenceDocument               string
	ExternalReferenceDocumentItem           string
	TaxCode                                 string
	TaxRate                                 string
	CountryOfOrigin                         string
	CountryOfOriginLanguage                 string
	Equipment                               string
	ItemPaymentRequisitionIsCreated         string
	ItemIsCleared                           string
	ItemPaymentBlockStatus                  string
	CreationDate                            string
	CreationTime                            string
	LastChangeDate                          string
	LastChangeTime                          string
	IsCancelled                             string
}{
	InvoiceDocument:                         "data_platform_invoice_document_item_data.InvoiceDocument",
	InvoiceDocumentItem:                     "data_platform_invoice_document_item_data.InvoiceDocumentItem",
	InvoiceDocumentItemCategory:             "data_platform_invoice_document_item_data.InvoiceDocumentItemCategory",
	SupplyChainRelationshipID:               "data_platform_invoice_document_item_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:       "data_platform_invoice_document_item_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:  "data_platform_invoice_document_item_data.SupplyChainRelationshipDeliveryPlantID",
	InvoiceDocumentItemText:                 "data_platform_invoice_document_item_data.InvoiceDocumentItemText",
	InvoiceDocumentItemTextByBuyer:          "data_platform_invoice_document_item_data.InvoiceDocumentItemTextByBuyer",
	InvoiceDocumentItemTextBySeller:         "data_platform_invoice_document_item_data.InvoiceDocumentItemTextBySeller",
	Product:                                 "data_platform_invoice_document_item_data.Product",
	ProductGroup:                            "data_platform_invoice_document_item_data.ProductGroup",
	ProductStandardID:                       "data_platform_invoice_document_item_data.ProductStandardID",
	ItemBillingIsConfirmed:                  "data_platform_invoice_document_item_data.ItemBillingIsConfirmed",
	Buyer:                                   "data_platform_invoice_document_item_data.Buyer",
	Seller:                                  "data_platform_invoice_document_item_data.Seller",
	DeliverToParty:                          "data_platform_invoice_document_item_data.DeliverToParty",
	DeliverFromParty:                        "data_platform_invoice_document_item_data.DeliverFromParty",
	DeliverToPlant:                          "data_platform_invoice_document_item_data.DeliverToPlant",
	DeliverToPlantStorageLocation:           "data_platform_invoice_document_item_data.DeliverToPlantStorageLocation",
	DeliverFromPlant:                        "data_platform_invoice_document_item_data.DeliverFromPlant",
	DeliverFromPlantStorageLocation:         "data_platform_invoice_document_item_data.DeliverFromPlantStorageLocation",
	ProductionPlantBusinessPartner:          "data_platform_invoice_document_item_data.ProductionPlantBusinessPartner",
	ProductionPlant:                         "data_platform_invoice_document_item_data.ProductionPlant",
	ProductionPlantStorageLocation:          "data_platform_invoice_document_item_data.ProductionPlantStorageLocation",
	ServicesRenderedDate:                    "data_platform_invoice_document_item_data.ServicesRenderedDate",
	InvoiceQuantity:                         "data_platform_invoice_document_item_data.InvoiceQuantity",
	InvoiceQuantityUnit:                     "data_platform_invoice_document_item_data.InvoiceQuantityUnit",
	InvoiceQuantityInBaseUnit:               "data_platform_invoice_document_item_data.InvoiceQuantityInBaseUnit",
	BaseUnit:                                "data_platform_invoice_document_item_data.BaseUnit",
	DeliveryUnit:                            "data_platform_invoice_document_item_data.DeliveryUnit",
	ActualGoodsIssueDate:                    "data_platform_invoice_document_item_data.ActualGoodsIssueDate",
	ActualGoodsIssueTime:                    "data_platform_invoice_document_item_data.ActualGoodsIssueTime",
	ActualGoodsReceiptDate:                  "data_platform_invoice_document_item_data.ActualGoodsReceiptDate",
	ActualGoodsReceiptTime:                  "data_platform_invoice_document_item_data.ActualGoodsReceiptTime",
	ItemGrossWeight:                         "data_platform_invoice_document_item_data.ItemGrossWeight",
	ItemNetWeight:                           "data_platform_invoice_document_item_data.ItemNetWeight",
	ItemWeightUnit:                          "data_platform_invoice_document_item_data.ItemWeightUnit",
	NetAmount:                               "data_platform_invoice_document_item_data.NetAmount",
	TaxAmount:                               "data_platform_invoice_document_item_data.TaxAmount",
	GrossAmount:                             "data_platform_invoice_document_item_data.GrossAmount",
	GoodsIssueOrReceiptSlipNumber:           "data_platform_invoice_document_item_data.GoodsIssueOrReceiptSlipNumber",
	TransactionCurrency:                     "data_platform_invoice_document_item_data.TransactionCurrency",
	PricingDate:                             "data_platform_invoice_document_item_data.PricingDate",
	TransactionTaxClassification:            "data_platform_invoice_document_item_data.TransactionTaxClassification",
	ProductTaxClassificationBillToCountry:   "data_platform_invoice_document_item_data.ProductTaxClassificationBillToCountry",
	ProductTaxClassificationBillFromCountry: "data_platform_invoice_document_item_data.ProductTaxClassificationBillFromCountry",
	DefinedTaxClassification:                "data_platform_invoice_document_item_data.DefinedTaxClassification",
	Project:                                 "data_platform_invoice_document_item_data.Project",
	WBSElement:                              "data_platform_invoice_document_item_data.WBSElement",
	OrderID:                                 "data_platform_invoice_document_item_data.OrderID",
	OrderItem:                               "data_platform_invoice_document_item_data.OrderItem",
	OrderType:                               "data_platform_invoice_document_item_data.OrderType",
	ContractType:                            "data_platform_invoice_document_item_data.ContractType",
	OrderVaridityStartDate:                  "data_platform_invoice_document_item_data.OrderVaridityStartDate",
	OrderVaridityEndDate:                    "data_platform_invoice_document_item_data.OrderVaridityEndDate",
	InvoicePeriodStartDate:                  "data_platform_invoice_document_item_data.InvoicePeriodStartDate",
	InvoicePeriodEndDate:                    "data_platform_invoice_document_item_data.InvoicePeriodEndDate",
	DeliveryDocument:                        "data_platform_invoice_document_item_data.DeliveryDocument",
	DeliveryDocumentItem:                    "data_platform_invoice_document_item_data.DeliveryDocumentItem",
	OriginDocument:                          "data_platform_invoice_document_item_data.OriginDocument",
	OriginDocumentItem:                      "data_platform_invoice_document_item_data.OriginDocumentItem",
	ReferenceDocument:                       "data_platform_invoice_document_item_data.ReferenceDocument",
	ReferenceDocumentItem:                   "data_platform_invoice_document_item_data.ReferenceDocumentItem",
	ExternalReferenceDocument:               "data_platform_invoice_document_item_data.ExternalReferenceDocument",
	ExternalReferenceDocumentItem:           "data_platform_invoice_document_item_data.ExternalReferenceDocumentItem",
	TaxCode:                                 "data_platform_invoice_document_item_data.TaxCode",
	TaxRate:                                 "data_platform_invoice_document_item_data.TaxRate",
	CountryOfOrigin:                         "data_platform_invoice_document_item_data.CountryOfOrigin",
	CountryOfOriginLanguage:                 "data_platform_invoice_document_item_data.CountryOfOriginLanguage",
	Equipment:                               "data_platform_invoice_document_item_data.Equipment",
	ItemPaymentRequisitionIsCreated:         "data_platform_invoice_document_item_data.ItemPaymentRequisitionIsCreated",
	ItemIsCleared:                           "data_platform_invoice_document_item_data.ItemIsCleared",
	ItemPaymentBlockStatus:                  "data_platform_invoice_document_item_data.ItemPaymentBlockStatus",
	CreationDate:                            "data_platform_invoice_document_item_data.CreationDate",
	CreationTime:                            "data_platform_invoice_document_item_data.CreationTime",
	LastChangeDate:                          "data_platform_invoice_document_item_data.LastChangeDate",
	LastChangeTime:                          "data_platform_invoice_document_item_data.LastChangeTime",
	IsCancelled:                             "data_platform_invoice_document_item_data.IsCancelled",
}

// Generated where

var DataPlatformInvoiceDocumentItemDatumWhere = struct {
	InvoiceDocument                         whereHelperint
	InvoiceDocumentItem                     whereHelperint
	InvoiceDocumentItemCategory             whereHelperstring
	SupplyChainRelationshipID               whereHelperint
	SupplyChainRelationshipDeliveryID       whereHelpernull_Int
	SupplyChainRelationshipDeliveryPlantID  whereHelpernull_Int
	InvoiceDocumentItemText                 whereHelpernull_String
	InvoiceDocumentItemTextByBuyer          whereHelperstring
	InvoiceDocumentItemTextBySeller         whereHelperstring
	Product                                 whereHelperstring
	ProductGroup                            whereHelpernull_String
	ProductStandardID                       whereHelpernull_String
	ItemBillingIsConfirmed                  whereHelpernull_Bool
	Buyer                                   whereHelperint
	Seller                                  whereHelperint
	DeliverToParty                          whereHelpernull_Int
	DeliverFromParty                        whereHelpernull_Int
	DeliverToPlant                          whereHelpernull_String
	DeliverToPlantStorageLocation           whereHelpernull_String
	DeliverFromPlant                        whereHelpernull_String
	DeliverFromPlantStorageLocation         whereHelpernull_String
	ProductionPlantBusinessPartner          whereHelpernull_Int
	ProductionPlant                         whereHelpernull_String
	ProductionPlantStorageLocation          whereHelpernull_String
	ServicesRenderedDate                    whereHelpernull_String
	InvoiceQuantity                         whereHelperfloat32
	InvoiceQuantityUnit                     whereHelperstring
	InvoiceQuantityInBaseUnit               whereHelperfloat32
	BaseUnit                                whereHelperstring
	DeliveryUnit                            whereHelpernull_String
	ActualGoodsIssueDate                    whereHelpernull_String
	ActualGoodsIssueTime                    whereHelpernull_String
	ActualGoodsReceiptDate                  whereHelpernull_String
	ActualGoodsReceiptTime                  whereHelpernull_String
	ItemGrossWeight                         whereHelpernull_Float32
	ItemNetWeight                           whereHelpernull_Float32
	ItemWeightUnit                          whereHelpernull_String
	NetAmount                               whereHelperfloat32
	TaxAmount                               whereHelperfloat32
	GrossAmount                             whereHelperfloat32
	GoodsIssueOrReceiptSlipNumber           whereHelpernull_String
	TransactionCurrency                     whereHelpernull_String
	PricingDate                             whereHelpernull_String
	TransactionTaxClassification            whereHelperstring
	ProductTaxClassificationBillToCountry   whereHelperstring
	ProductTaxClassificationBillFromCountry whereHelperstring
	DefinedTaxClassification                whereHelperstring
	Project                                 whereHelpernull_Int
	WBSElement                              whereHelpernull_Int
	OrderID                                 whereHelpernull_Int
	OrderItem                               whereHelpernull_Int
	OrderType                               whereHelpernull_String
	ContractType                            whereHelpernull_String
	OrderVaridityStartDate                  whereHelpernull_String
	OrderVaridityEndDate                    whereHelpernull_String
	InvoicePeriodStartDate                  whereHelpernull_String
	InvoicePeriodEndDate                    whereHelpernull_String
	DeliveryDocument                        whereHelpernull_Int
	DeliveryDocumentItem                    whereHelpernull_Int
	OriginDocument                          whereHelpernull_Int
	OriginDocumentItem                      whereHelpernull_Int
	ReferenceDocument                       whereHelpernull_Int
	ReferenceDocumentItem                   whereHelpernull_Int
	ExternalReferenceDocument               whereHelpernull_String
	ExternalReferenceDocumentItem           whereHelpernull_String
	TaxCode                                 whereHelpernull_String
	TaxRate                                 whereHelpernull_Float32
	CountryOfOrigin                         whereHelpernull_String
	CountryOfOriginLanguage                 whereHelpernull_String
	Equipment                               whereHelpernull_Int
	ItemPaymentRequisitionIsCreated         whereHelpernull_Bool
	ItemIsCleared                           whereHelpernull_Bool
	ItemPaymentBlockStatus                  whereHelpernull_Bool
	CreationDate                            whereHelperstring
	CreationTime                            whereHelperstring
	LastChangeDate                          whereHelperstring
	LastChangeTime                          whereHelperstring
	IsCancelled                             whereHelpernull_Bool
}{
	InvoiceDocument:                         whereHelperint{field: "`data_platform_invoice_document_item_data`.`InvoiceDocument`"},
	InvoiceDocumentItem:                     whereHelperint{field: "`data_platform_invoice_document_item_data`.`InvoiceDocumentItem`"},
	InvoiceDocumentItemCategory:             whereHelperstring{field: "`data_platform_invoice_document_item_data`.`InvoiceDocumentItemCategory`"},
	SupplyChainRelationshipID:               whereHelperint{field: "`data_platform_invoice_document_item_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:       whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:  whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	InvoiceDocumentItemText:                 whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`InvoiceDocumentItemText`"},
	InvoiceDocumentItemTextByBuyer:          whereHelperstring{field: "`data_platform_invoice_document_item_data`.`InvoiceDocumentItemTextByBuyer`"},
	InvoiceDocumentItemTextBySeller:         whereHelperstring{field: "`data_platform_invoice_document_item_data`.`InvoiceDocumentItemTextBySeller`"},
	Product:                                 whereHelperstring{field: "`data_platform_invoice_document_item_data`.`Product`"},
	ProductGroup:                            whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ProductGroup`"},
	ProductStandardID:                       whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ProductStandardID`"},
	ItemBillingIsConfirmed:                  whereHelpernull_Bool{field: "`data_platform_invoice_document_item_data`.`ItemBillingIsConfirmed`"},
	Buyer:                                   whereHelperint{field: "`data_platform_invoice_document_item_data`.`Buyer`"},
	Seller:                                  whereHelperint{field: "`data_platform_invoice_document_item_data`.`Seller`"},
	DeliverToParty:                          whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`DeliverToParty`"},
	DeliverFromParty:                        whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`DeliverFromParty`"},
	DeliverToPlant:                          whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`DeliverToPlant`"},
	DeliverToPlantStorageLocation:           whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`DeliverToPlantStorageLocation`"},
	DeliverFromPlant:                        whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`DeliverFromPlant`"},
	DeliverFromPlantStorageLocation:         whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`DeliverFromPlantStorageLocation`"},
	ProductionPlantBusinessPartner:          whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                         whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ProductionPlant`"},
	ProductionPlantStorageLocation:          whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ProductionPlantStorageLocation`"},
	ServicesRenderedDate:                    whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ServicesRenderedDate`"},
	InvoiceQuantity:                         whereHelperfloat32{field: "`data_platform_invoice_document_item_data`.`InvoiceQuantity`"},
	InvoiceQuantityUnit:                     whereHelperstring{field: "`data_platform_invoice_document_item_data`.`InvoiceQuantityUnit`"},
	InvoiceQuantityInBaseUnit:               whereHelperfloat32{field: "`data_platform_invoice_document_item_data`.`InvoiceQuantityInBaseUnit`"},
	BaseUnit:                                whereHelperstring{field: "`data_platform_invoice_document_item_data`.`BaseUnit`"},
	DeliveryUnit:                            whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`DeliveryUnit`"},
	ActualGoodsIssueDate:                    whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ActualGoodsIssueDate`"},
	ActualGoodsIssueTime:                    whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ActualGoodsIssueTime`"},
	ActualGoodsReceiptDate:                  whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ActualGoodsReceiptDate`"},
	ActualGoodsReceiptTime:                  whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ActualGoodsReceiptTime`"},
	ItemGrossWeight:                         whereHelpernull_Float32{field: "`data_platform_invoice_document_item_data`.`ItemGrossWeight`"},
	ItemNetWeight:                           whereHelpernull_Float32{field: "`data_platform_invoice_document_item_data`.`ItemNetWeight`"},
	ItemWeightUnit:                          whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ItemWeightUnit`"},
	NetAmount:                               whereHelperfloat32{field: "`data_platform_invoice_document_item_data`.`NetAmount`"},
	TaxAmount:                               whereHelperfloat32{field: "`data_platform_invoice_document_item_data`.`TaxAmount`"},
	GrossAmount:                             whereHelperfloat32{field: "`data_platform_invoice_document_item_data`.`GrossAmount`"},
	GoodsIssueOrReceiptSlipNumber:           whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`GoodsIssueOrReceiptSlipNumber`"},
	TransactionCurrency:                     whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`TransactionCurrency`"},
	PricingDate:                             whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`PricingDate`"},
	TransactionTaxClassification:            whereHelperstring{field: "`data_platform_invoice_document_item_data`.`TransactionTaxClassification`"},
	ProductTaxClassificationBillToCountry:   whereHelperstring{field: "`data_platform_invoice_document_item_data`.`ProductTaxClassificationBillToCountry`"},
	ProductTaxClassificationBillFromCountry: whereHelperstring{field: "`data_platform_invoice_document_item_data`.`ProductTaxClassificationBillFromCountry`"},
	DefinedTaxClassification:                whereHelperstring{field: "`data_platform_invoice_document_item_data`.`DefinedTaxClassification`"},
	Project:                                 whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`Project`"},
	WBSElement:                              whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`WBSElement`"},
	OrderID:                                 whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`OrderID`"},
	OrderItem:                               whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`OrderItem`"},
	OrderType:                               whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`OrderType`"},
	ContractType:                            whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ContractType`"},
	OrderVaridityStartDate:                  whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`OrderVaridityStartDate`"},
	OrderVaridityEndDate:                    whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`OrderVaridityEndDate`"},
	InvoicePeriodStartDate:                  whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`InvoicePeriodStartDate`"},
	InvoicePeriodEndDate:                    whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`InvoicePeriodEndDate`"},
	DeliveryDocument:                        whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`DeliveryDocument`"},
	DeliveryDocumentItem:                    whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`DeliveryDocumentItem`"},
	OriginDocument:                          whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`OriginDocument`"},
	OriginDocumentItem:                      whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`OriginDocumentItem`"},
	ReferenceDocument:                       whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`ReferenceDocument`"},
	ReferenceDocumentItem:                   whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`ReferenceDocumentItem`"},
	ExternalReferenceDocument:               whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ExternalReferenceDocument`"},
	ExternalReferenceDocumentItem:           whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ExternalReferenceDocumentItem`"},
	TaxCode:                                 whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`TaxCode`"},
	TaxRate:                                 whereHelpernull_Float32{field: "`data_platform_invoice_document_item_data`.`TaxRate`"},
	CountryOfOrigin:                         whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`CountryOfOrigin`"},
	CountryOfOriginLanguage:                 whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`CountryOfOriginLanguage`"},
	Equipment:                               whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`Equipment`"},
	ItemPaymentRequisitionIsCreated:         whereHelpernull_Bool{field: "`data_platform_invoice_document_item_data`.`ItemPaymentRequisitionIsCreated`"},
	ItemIsCleared:                           whereHelpernull_Bool{field: "`data_platform_invoice_document_item_data`.`ItemIsCleared`"},
	ItemPaymentBlockStatus:                  whereHelpernull_Bool{field: "`data_platform_invoice_document_item_data`.`ItemPaymentBlockStatus`"},
	CreationDate:                            whereHelperstring{field: "`data_platform_invoice_document_item_data`.`CreationDate`"},
	CreationTime:                            whereHelperstring{field: "`data_platform_invoice_document_item_data`.`CreationTime`"},
	LastChangeDate:                          whereHelperstring{field: "`data_platform_invoice_document_item_data`.`LastChangeDate`"},
	LastChangeTime:                          whereHelperstring{field: "`data_platform_invoice_document_item_data`.`LastChangeTime`"},
	IsCancelled:                             whereHelpernull_Bool{field: "`data_platform_invoice_document_item_data`.`IsCancelled`"},
}

// DataPlatformInvoiceDocumentItemDatumRels is where relationship names are stored.
var DataPlatformInvoiceDocumentItemDatumRels = struct {
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum                string
	CountryOfOriginLanguageDataPlatformLanguageLanguageDatum         string
	CountryOfOriginDataPlatformCountryCountryDatum                   string
	DeliveryDocumentDataPlatformDeliveryDocumentItemDatum            string
	EquipmentDataPlatformEquipmentMasterGeneralDatum                 string
	InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum     string
	ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum          string
	OrderIDDataPlatformOrdersItemDatum                               string
	ProductGroupDataPlatformProductGroupProductGroupDatum            string
	ProductionPlantDataPlatformPlantGeneralDatum                     string
	BuyerDataPlatformSCRDeliveryRelationDatum                        string
	BuyerDataPlatformSCRDeliveryPlantRelationDatum                   string
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum             string
	InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum            string
	InvoiceDocumentDataPlatformInvoiceDocumentItemDocData            string
	InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData string
}{
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum:                "BaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	CountryOfOriginLanguageDataPlatformLanguageLanguageDatum:         "CountryOfOriginLanguageDataPlatformLanguageLanguageDatum",
	CountryOfOriginDataPlatformCountryCountryDatum:                   "CountryOfOriginDataPlatformCountryCountryDatum",
	DeliveryDocumentDataPlatformDeliveryDocumentItemDatum:            "DeliveryDocumentDataPlatformDeliveryDocumentItemDatum",
	EquipmentDataPlatformEquipmentMasterGeneralDatum:                 "EquipmentDataPlatformEquipmentMasterGeneralDatum",
	InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum:     "InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum:          "ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum",
	OrderIDDataPlatformOrdersItemDatum:                               "OrderIDDataPlatformOrdersItemDatum",
	ProductGroupDataPlatformProductGroupProductGroupDatum:            "ProductGroupDataPlatformProductGroupProductGroupDatum",
	ProductionPlantDataPlatformPlantGeneralDatum:                     "ProductionPlantDataPlatformPlantGeneralDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:                        "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformSCRDeliveryPlantRelationDatum:                   "BuyerDataPlatformSCRDeliveryPlantRelationDatum",
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum:             "TransactionCurrencyDataPlatformCurrencyCurrencyDatum",
	InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum:            "InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum",
	InvoiceDocumentDataPlatformInvoiceDocumentItemDocData:            "InvoiceDocumentDataPlatformInvoiceDocumentItemDocData",
	InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData: "InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData",
}

// dataPlatformInvoiceDocumentItemDatumR is where relationships are stored.
type dataPlatformInvoiceDocumentItemDatumR struct {
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum                *DataPlatformQuantityUnitQuantityUnitDatum              `boil:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	CountryOfOriginLanguageDataPlatformLanguageLanguageDatum         *DataPlatformLanguageLanguageDatum                      `boil:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum" json:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum" toml:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum" yaml:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum"`
	CountryOfOriginDataPlatformCountryCountryDatum                   *DataPlatformCountryCountryDatum                        `boil:"CountryOfOriginDataPlatformCountryCountryDatum" json:"CountryOfOriginDataPlatformCountryCountryDatum" toml:"CountryOfOriginDataPlatformCountryCountryDatum" yaml:"CountryOfOriginDataPlatformCountryCountryDatum"`
	DeliveryDocumentDataPlatformDeliveryDocumentItemDatum            *DataPlatformDeliveryDocumentItemDatum                  `boil:"DeliveryDocumentDataPlatformDeliveryDocumentItemDatum" json:"DeliveryDocumentDataPlatformDeliveryDocumentItemDatum" toml:"DeliveryDocumentDataPlatformDeliveryDocumentItemDatum" yaml:"DeliveryDocumentDataPlatformDeliveryDocumentItemDatum"`
	EquipmentDataPlatformEquipmentMasterGeneralDatum                 *DataPlatformEquipmentMasterGeneralDatum                `boil:"EquipmentDataPlatformEquipmentMasterGeneralDatum" json:"EquipmentDataPlatformEquipmentMasterGeneralDatum" toml:"EquipmentDataPlatformEquipmentMasterGeneralDatum" yaml:"EquipmentDataPlatformEquipmentMasterGeneralDatum"`
	InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum     *DataPlatformQuantityUnitQuantityUnitDatum              `boil:"InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum          *DataPlatformQuantityUnitQuantityUnitDatum              `boil:"ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	OrderIDDataPlatformOrdersItemDatum                               *DataPlatformOrdersItemDatum                            `boil:"OrderIDDataPlatformOrdersItemDatum" json:"OrderIDDataPlatformOrdersItemDatum" toml:"OrderIDDataPlatformOrdersItemDatum" yaml:"OrderIDDataPlatformOrdersItemDatum"`
	ProductGroupDataPlatformProductGroupProductGroupDatum            *DataPlatformProductGroupProductGroupDatum              `boil:"ProductGroupDataPlatformProductGroupProductGroupDatum" json:"ProductGroupDataPlatformProductGroupProductGroupDatum" toml:"ProductGroupDataPlatformProductGroupProductGroupDatum" yaml:"ProductGroupDataPlatformProductGroupProductGroupDatum"`
	ProductionPlantDataPlatformPlantGeneralDatum                     *DataPlatformPlantGeneralDatum                          `boil:"ProductionPlantDataPlatformPlantGeneralDatum" json:"ProductionPlantDataPlatformPlantGeneralDatum" toml:"ProductionPlantDataPlatformPlantGeneralDatum" yaml:"ProductionPlantDataPlatformPlantGeneralDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum                        *DataPlatformSCRDeliveryRelationDatum                   `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformSCRDeliveryPlantRelationDatum                   *DataPlatformSCRDeliveryPlantRelationDatum              `boil:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" json:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" toml:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryPlantRelationDatum"`
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum             *DataPlatformCurrencyCurrencyDatum                      `boil:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" json:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" toml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" yaml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum"`
	InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum            *DataPlatformInvoiceDocumentHeaderDatum                 `boil:"InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum" json:"InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum" toml:"InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum" yaml:"InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum"`
	InvoiceDocumentDataPlatformInvoiceDocumentItemDocData            DataPlatformInvoiceDocumentItemDocDatumSlice            `boil:"InvoiceDocumentDataPlatformInvoiceDocumentItemDocData" json:"InvoiceDocumentDataPlatformInvoiceDocumentItemDocData" toml:"InvoiceDocumentDataPlatformInvoiceDocumentItemDocData" yaml:"InvoiceDocumentDataPlatformInvoiceDocumentItemDocData"`
	InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData DataPlatformInvoiceDocumentItemPricingElementDatumSlice `boil:"InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData" json:"InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData" toml:"InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData" yaml:"InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInvoiceDocumentItemDatumR) NewStruct() *dataPlatformInvoiceDocumentItemDatumR {
	return &dataPlatformInvoiceDocumentItemDatumR{}
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetCountryOfOriginLanguageDataPlatformLanguageLanguageDatum() *DataPlatformLanguageLanguageDatum {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetCountryOfOriginDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginDataPlatformCountryCountryDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetDeliveryDocumentDataPlatformDeliveryDocumentItemDatum() *DataPlatformDeliveryDocumentItemDatum {
	if r == nil {
		return nil
	}
	return r.DeliveryDocumentDataPlatformDeliveryDocumentItemDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetEquipmentDataPlatformEquipmentMasterGeneralDatum() *DataPlatformEquipmentMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.EquipmentDataPlatformEquipmentMasterGeneralDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetInvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetOrderIDDataPlatformOrdersItemDatum() *DataPlatformOrdersItemDatum {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersItemDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetProductGroupDataPlatformProductGroupProductGroupDatum() *DataPlatformProductGroupProductGroupDatum {
	if r == nil {
		return nil
	}
	return r.ProductGroupDataPlatformProductGroupProductGroupDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetProductionPlantDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductionPlantDataPlatformPlantGeneralDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetBuyerDataPlatformSCRDeliveryPlantRelationDatum() *DataPlatformSCRDeliveryPlantRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryPlantRelationDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetTransactionCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.TransactionCurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetInvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum() *DataPlatformInvoiceDocumentHeaderDatum {
	if r == nil {
		return nil
	}
	return r.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetInvoiceDocumentDataPlatformInvoiceDocumentItemDocData() DataPlatformInvoiceDocumentItemDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceDocumentDataPlatformInvoiceDocumentItemDocData
}

func (r *dataPlatformInvoiceDocumentItemDatumR) GetInvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData() DataPlatformInvoiceDocumentItemPricingElementDatumSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData
}

// dataPlatformInvoiceDocumentItemDatumL is where Load methods for each relationship are stored.
type dataPlatformInvoiceDocumentItemDatumL struct{}

var (
	dataPlatformInvoiceDocumentItemDatumAllColumns            = []string{"InvoiceDocument", "InvoiceDocumentItem", "InvoiceDocumentItemCategory", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "InvoiceDocumentItemText", "InvoiceDocumentItemTextByBuyer", "InvoiceDocumentItemTextBySeller", "Product", "ProductGroup", "ProductStandardID", "ItemBillingIsConfirmed", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverToPlantStorageLocation", "DeliverFromPlant", "DeliverFromPlantStorageLocation", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantStorageLocation", "ServicesRenderedDate", "InvoiceQuantity", "InvoiceQuantityUnit", "InvoiceQuantityInBaseUnit", "BaseUnit", "DeliveryUnit", "ActualGoodsIssueDate", "ActualGoodsIssueTime", "ActualGoodsReceiptDate", "ActualGoodsReceiptTime", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "NetAmount", "TaxAmount", "GrossAmount", "GoodsIssueOrReceiptSlipNumber", "TransactionCurrency", "PricingDate", "TransactionTaxClassification", "ProductTaxClassificationBillToCountry", "ProductTaxClassificationBillFromCountry", "DefinedTaxClassification", "Project", "WBSElement", "OrderID", "OrderItem", "OrderType", "ContractType", "OrderVaridityStartDate", "OrderVaridityEndDate", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "DeliveryDocument", "DeliveryDocumentItem", "OriginDocument", "OriginDocumentItem", "ReferenceDocument", "ReferenceDocumentItem", "ExternalReferenceDocument", "ExternalReferenceDocumentItem", "TaxCode", "TaxRate", "CountryOfOrigin", "CountryOfOriginLanguage", "Equipment", "ItemPaymentRequisitionIsCreated", "ItemIsCleared", "ItemPaymentBlockStatus", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled"}
	dataPlatformInvoiceDocumentItemDatumColumnsWithoutDefault = []string{"InvoiceDocument", "InvoiceDocumentItem", "InvoiceDocumentItemCategory", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "InvoiceDocumentItemText", "InvoiceDocumentItemTextByBuyer", "InvoiceDocumentItemTextBySeller", "Product", "ProductGroup", "ProductStandardID", "ItemBillingIsConfirmed", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverToPlantStorageLocation", "DeliverFromPlant", "DeliverFromPlantStorageLocation", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantStorageLocation", "ServicesRenderedDate", "InvoiceQuantity", "InvoiceQuantityUnit", "InvoiceQuantityInBaseUnit", "BaseUnit", "DeliveryUnit", "ActualGoodsIssueDate", "ActualGoodsIssueTime", "ActualGoodsReceiptDate", "ActualGoodsReceiptTime", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "NetAmount", "TaxAmount", "GrossAmount", "GoodsIssueOrReceiptSlipNumber", "TransactionCurrency", "PricingDate", "TransactionTaxClassification", "ProductTaxClassificationBillToCountry", "ProductTaxClassificationBillFromCountry", "DefinedTaxClassification", "Project", "WBSElement", "OrderID", "OrderItem", "OrderType", "ContractType", "OrderVaridityStartDate", "OrderVaridityEndDate", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "DeliveryDocument", "DeliveryDocumentItem", "OriginDocument", "OriginDocumentItem", "ReferenceDocument", "ReferenceDocumentItem", "ExternalReferenceDocument", "ExternalReferenceDocumentItem", "TaxCode", "TaxRate", "CountryOfOrigin", "CountryOfOriginLanguage", "Equipment", "ItemPaymentRequisitionIsCreated", "ItemIsCleared", "ItemPaymentBlockStatus", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled"}
	dataPlatformInvoiceDocumentItemDatumColumnsWithDefault    = []string{}
	dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns     = []string{"InvoiceDocument", "InvoiceDocumentItem"}
	dataPlatformInvoiceDocumentItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInvoiceDocumentItemDatumSlice is an alias for a slice of pointers to DataPlatformInvoiceDocumentItemDatum.
	// This should almost always be used instead of []DataPlatformInvoiceDocumentItemDatum.
	DataPlatformInvoiceDocumentItemDatumSlice []*DataPlatformInvoiceDocumentItemDatum

	dataPlatformInvoiceDocumentItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInvoiceDocumentItemDatumType                 = reflect.TypeOf(&DataPlatformInvoiceDocumentItemDatum{})
	dataPlatformInvoiceDocumentItemDatumMapping              = queries.MakeStructMapping(dataPlatformInvoiceDocumentItemDatumType)
	dataPlatformInvoiceDocumentItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns)
	dataPlatformInvoiceDocumentItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInvoiceDocumentItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInvoiceDocumentItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInvoiceDocumentItemDatum record from the query.
func (q dataPlatformInvoiceDocumentItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInvoiceDocumentItemDatum, error) {
	o := &DataPlatformInvoiceDocumentItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_invoice_document_item_data")
	}

	return o, nil
}

// All returns all DataPlatformInvoiceDocumentItemDatum records from the query.
func (q dataPlatformInvoiceDocumentItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInvoiceDocumentItemDatumSlice, error) {
	var o []*DataPlatformInvoiceDocumentItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInvoiceDocumentItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInvoiceDocumentItemDatum records in the query.
func (q dataPlatformInvoiceDocumentItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_invoice_document_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInvoiceDocumentItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_invoice_document_item_data exists")
	}

	return count > 0, nil
}

// BaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) BaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.BaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// CountryOfOriginLanguageDataPlatformLanguageLanguageDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) CountryOfOriginLanguageDataPlatformLanguageLanguageDatum(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.CountryOfOriginLanguage),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformLanguageLanguageData(queryMods...)
}

// CountryOfOriginDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) CountryOfOriginDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.CountryOfOrigin),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// DeliveryDocumentDataPlatformDeliveryDocumentItemDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) DeliveryDocumentDataPlatformDeliveryDocumentItemDatum(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`DeliveryDocument` = ?", o.DeliveryDocument),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// EquipmentDataPlatformEquipmentMasterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) EquipmentDataPlatformEquipmentMasterGeneralDatum(mods ...qm.QueryMod) dataPlatformEquipmentMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Equipment` = ?", o.Equipment),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformEquipmentMasterGeneralData(queryMods...)
}

// InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.InvoiceQuantityUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ItemWeightUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// OrderIDDataPlatformOrdersItemDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) OrderIDDataPlatformOrdersItemDatum(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersItemData(queryMods...)
}

// ProductGroupDataPlatformProductGroupProductGroupDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) ProductGroupDataPlatformProductGroupProductGroupDatum(mods ...qm.QueryMod) dataPlatformProductGroupProductGroupDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductGroup` = ?", o.ProductGroup),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductGroupProductGroupData(queryMods...)
}

// ProductionPlantDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) ProductionPlantDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Plant` = ?", o.ProductionPlant),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryPlantRelationDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) BuyerDataPlatformSCRDeliveryPlantRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryPlantRelationData(queryMods...)
}

// TransactionCurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) TransactionCurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.TransactionCurrency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum pointed to by the foreign key.
func (o *DataPlatformInvoiceDocumentItemDatum) InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum(mods ...qm.QueryMod) dataPlatformInvoiceDocumentHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InvoiceDocument` = ?", o.InvoiceDocument),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInvoiceDocumentHeaderData(queryMods...)
}

// InvoiceDocumentDataPlatformInvoiceDocumentItemDocData retrieves all the data_platform_invoice_document_item_doc_datum's DataPlatformInvoiceDocumentItemDocData with an executor via InvoiceDocument column.
func (o *DataPlatformInvoiceDocumentItemDatum) InvoiceDocumentDataPlatformInvoiceDocumentItemDocData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_doc_data`.`InvoiceDocument`=?", o.InvoiceDocument),
	)

	return DataPlatformInvoiceDocumentItemDocData(queryMods...)
}

// InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData retrieves all the data_platform_invoice_document_item_pricing_element_datum's DataPlatformInvoiceDocumentItemPricingElementData with an executor via InvoiceDocument column.
func (o *DataPlatformInvoiceDocumentItemDatum) InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_pricing_element_data`.`InvoiceDocument`=?", o.InvoiceDocument),
	)

	return DataPlatformInvoiceDocumentItemPricingElementData(queryMods...)
}

// LoadBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		args = append(args, object.BaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.BaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.BaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BaseUnit == foreign.QuantityUnit {
				local.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginLanguageDataPlatformLanguageLanguageDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadCountryOfOriginLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		if !queries.IsNil(object.CountryOfOriginLanguage) {
			args = append(args, object.CountryOfOriginLanguage)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CountryOfOriginLanguage) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CountryOfOriginLanguage) {
				args = append(args, obj.CountryOfOriginLanguage)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_data`),
		qm.WhereIn(`data_platform_language_language_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformLanguageLanguageDatum")
	}

	var resultSlice []*DataPlatformLanguageLanguageDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformLanguageLanguageDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_language_language_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CountryOfOriginLanguage, foreign.Language) {
				local.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadCountryOfOriginDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		if !queries.IsNil(object.CountryOfOrigin) {
			args = append(args, object.CountryOfOrigin)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CountryOfOrigin) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CountryOfOrigin) {
				args = append(args, obj.CountryOfOrigin)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryOfOriginDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CountryOfOrigin, foreign.Country) {
				local.R.CountryOfOriginDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliveryDocumentDataPlatformDeliveryDocumentItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadDeliveryDocumentDataPlatformDeliveryDocumentItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		if !queries.IsNil(object.DeliveryDocument) {
			args = append(args, object.DeliveryDocument)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DeliveryDocument) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DeliveryDocument) {
				args = append(args, obj.DeliveryDocument)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.DeliveryDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformDeliveryDocumentItemDatum")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformDeliveryDocumentItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DeliveryDocument, foreign.DeliveryDocument) {
				local.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadEquipmentDataPlatformEquipmentMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadEquipmentDataPlatformEquipmentMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		if !queries.IsNil(object.Equipment) {
			args = append(args, object.Equipment)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Equipment) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Equipment) {
				args = append(args, obj.Equipment)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_general_data`),
		qm.WhereIn(`data_platform_equipment_master_general_data.Equipment in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformEquipmentMasterGeneralDatum")
	}

	var resultSlice []*DataPlatformEquipmentMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformEquipmentMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_equipment_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Equipment, foreign.Equipment) {
				local.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadInvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		args = append(args, object.InvoiceQuantityUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.InvoiceQuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.InvoiceQuantityUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InvoiceQuantityUnit == foreign.QuantityUnit {
				local.R.InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		if !queries.IsNil(object.ItemWeightUnit) {
			args = append(args, object.ItemWeightUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ItemWeightUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ItemWeightUnit) {
				args = append(args, obj.ItemWeightUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ItemWeightUnit, foreign.QuantityUnit) {
				local.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadOrderIDDataPlatformOrdersItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersItemDatum")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDDataPlatformOrdersItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDDataPlatformOrdersItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductGroupDataPlatformProductGroupProductGroupDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadProductGroupDataPlatformProductGroupProductGroupDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		if !queries.IsNil(object.ProductGroup) {
			args = append(args, object.ProductGroup)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductGroup) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductGroup) {
				args = append(args, obj.ProductGroup)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_group_product_group_data`),
		qm.WhereIn(`data_platform_product_group_product_group_data.ProductGroup in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductGroupProductGroupDatum")
	}

	var resultSlice []*DataPlatformProductGroupProductGroupDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductGroupProductGroupDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_group_product_group_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_group_product_group_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductGroupDataPlatformProductGroupProductGroupDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductGroup, foreign.ProductGroup) {
				local.R.ProductGroupDataPlatformProductGroupProductGroupDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionPlantDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadProductionPlantDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		if !queries.IsNil(object.ProductionPlant) {
			args = append(args, object.ProductionPlant)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionPlant) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductionPlant) {
				args = append(args, obj.ProductionPlant)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.Plant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionPlantDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductionPlant, foreign.Plant) {
				local.R.ProductionPlantDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryPlantRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadBuyerDataPlatformSCRDeliveryPlantRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_plant_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryPlantRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryPlantRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_plant_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		if !queries.IsNil(object.TransactionCurrency) {
			args = append(args, object.TransactionCurrency)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TransactionCurrency) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TransactionCurrency) {
				args = append(args, obj.TransactionCurrency)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TransactionCurrency, foreign.Currency) {
				local.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadInvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		args = append(args, object.InvoiceDocument)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.InvoiceDocument {
					continue Outer
				}
			}

			args = append(args, obj.InvoiceDocument)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_header_data`),
		qm.WhereIn(`data_platform_invoice_document_header_data.InvoiceDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInvoiceDocumentHeaderDatum")
	}

	var resultSlice []*DataPlatformInvoiceDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInvoiceDocumentHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_invoice_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InvoiceDocument == foreign.InvoiceDocument {
				local.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInvoiceDocumentDataPlatformInvoiceDocumentItemDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadInvoiceDocumentDataPlatformInvoiceDocumentItemDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		args = append(args, object.InvoiceDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.InvoiceDocument {
					continue Outer
				}
			}

			args = append(args, obj.InvoiceDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_doc_data`),
		qm.WhereIn(`data_platform_invoice_document_item_doc_data.InvoiceDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_doc_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_doc_data")
	}

	if singular {
		object.R.InvoiceDocumentDataPlatformInvoiceDocumentItemDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InvoiceDocument == foreign.InvoiceDocument {
				local.R.InvoiceDocumentDataPlatformInvoiceDocumentItemDocData = append(local.R.InvoiceDocumentDataPlatformInvoiceDocumentItemDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInvoiceDocumentItemDatumL) LoadInvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInvoiceDocumentItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInvoiceDocumentItemDatum
	var object *DataPlatformInvoiceDocumentItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInvoiceDocumentItemDatum.(*DataPlatformInvoiceDocumentItemDatum)
		if !ok {
			object = new(DataPlatformInvoiceDocumentItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInvoiceDocumentItemDatum.(*[]*DataPlatformInvoiceDocumentItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInvoiceDocumentItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInvoiceDocumentItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInvoiceDocumentItemDatumR{}
		}
		args = append(args, object.InvoiceDocument)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInvoiceDocumentItemDatumR{}
			}

			for _, a := range args {
				if a == obj.InvoiceDocument {
					continue Outer
				}
			}

			args = append(args, obj.InvoiceDocument)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_pricing_element_data`),
		qm.WhereIn(`data_platform_invoice_document_item_pricing_element_data.InvoiceDocument in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_pricing_element_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_pricing_element_data")
	}

	if singular {
		object.R.InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InvoiceDocument == foreign.InvoiceDocument {
				local.R.InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData = append(local.R.InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			BaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetCountryOfOriginLanguageDataPlatformLanguageLanguageDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetCountryOfOriginLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformLanguageLanguageDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOriginLanguage"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CountryOfOriginLanguage, related.Language)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			CountryOfOriginLanguageDataPlatformLanguageLanguageDatum: related,
		}
	} else {
		o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = related
	}

	return nil
}

// RemoveCountryOfOriginLanguageDataPlatformLanguageLanguageDatum relationship.
// Sets o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum to nil.
func (o *DataPlatformInvoiceDocumentItemDatum) RemoveCountryOfOriginLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformLanguageLanguageDatum) error {
	var err error

	queries.SetScanner(&o.CountryOfOriginLanguage, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("CountryOfOriginLanguage")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetCountryOfOriginDataPlatformCountryCountryDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.CountryOfOriginDataPlatformCountryCountryDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetCountryOfOriginDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOrigin"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CountryOfOrigin, related.Country)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			CountryOfOriginDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.CountryOfOriginDataPlatformCountryCountryDatum = related
	}

	return nil
}

// RemoveCountryOfOriginDataPlatformCountryCountryDatum relationship.
// Sets o.R.CountryOfOriginDataPlatformCountryCountryDatum to nil.
func (o *DataPlatformInvoiceDocumentItemDatum) RemoveCountryOfOriginDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCountryCountryDatum) error {
	var err error

	queries.SetScanner(&o.CountryOfOrigin, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("CountryOfOrigin")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CountryOfOriginDataPlatformCountryCountryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetDeliveryDocumentDataPlatformDeliveryDocumentItemDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetDeliveryDocumentDataPlatformDeliveryDocumentItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliveryDocument"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.DeliveryDocument, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DeliveryDocument, related.DeliveryDocument)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			DeliveryDocumentDataPlatformDeliveryDocumentItemDatum: related,
		}
	} else {
		o.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDatum = related
	}

	return nil
}

// RemoveDeliveryDocumentDataPlatformDeliveryDocumentItemDatum relationship.
// Sets o.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDatum to nil.
func (o *DataPlatformInvoiceDocumentItemDatum) RemoveDeliveryDocumentDataPlatformDeliveryDocumentItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformDeliveryDocumentItemDatum) error {
	var err error

	queries.SetScanner(&o.DeliveryDocument, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("DeliveryDocument")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DeliveryDocumentDataPlatformDeliveryDocumentItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetEquipmentDataPlatformEquipmentMasterGeneralDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.EquipmentDataPlatformEquipmentMasterGeneralDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetEquipmentDataPlatformEquipmentMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformEquipmentMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Equipment"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Equipment, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Equipment, related.Equipment)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			EquipmentDataPlatformEquipmentMasterGeneralDatum: related,
		}
	} else {
		o.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = related
	}

	return nil
}

// RemoveEquipmentDataPlatformEquipmentMasterGeneralDatum relationship.
// Sets o.R.EquipmentDataPlatformEquipmentMasterGeneralDatum to nil.
func (o *DataPlatformInvoiceDocumentItemDatum) RemoveEquipmentDataPlatformEquipmentMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformEquipmentMasterGeneralDatum) error {
	var err error

	queries.SetScanner(&o.Equipment, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Equipment")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetInvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetInvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InvoiceQuantityUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InvoiceQuantityUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.InvoiceQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ItemWeightUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ItemWeightUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformInvoiceDocumentItemDatum) RemoveItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.ItemWeightUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ItemWeightUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOrderIDDataPlatformOrdersItemDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.OrderID)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			OrderIDDataPlatformOrdersItemDatum: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersItemDatum = related
	}

	return nil
}

// RemoveOrderIDDataPlatformOrdersItemDatum relationship.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to nil.
func (o *DataPlatformInvoiceDocumentItemDatum) RemoveOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformOrdersItemDatum) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderIDDataPlatformOrdersItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductGroupDataPlatformProductGroupProductGroupDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetProductGroupDataPlatformProductGroupProductGroupDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductGroupProductGroupDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductGroup"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductGroup, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductGroup, related.ProductGroup)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			ProductGroupDataPlatformProductGroupProductGroupDatum: related,
		}
	} else {
		o.R.ProductGroupDataPlatformProductGroupProductGroupDatum = related
	}

	return nil
}

// RemoveProductGroupDataPlatformProductGroupProductGroupDatum relationship.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum to nil.
func (o *DataPlatformInvoiceDocumentItemDatum) RemoveProductGroupDataPlatformProductGroupProductGroupDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductGroupProductGroupDatum) error {
	var err error

	queries.SetScanner(&o.ProductGroup, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductGroup")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductGroupDataPlatformProductGroupProductGroupDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductionPlantDataPlatformPlantGeneralDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.ProductionPlantDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetProductionPlantDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionPlant"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Plant, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductionPlant, related.Plant)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			ProductionPlantDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.ProductionPlantDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// RemoveProductionPlantDataPlatformPlantGeneralDatum relationship.
// Sets o.R.ProductionPlantDataPlatformPlantGeneralDatum to nil.
func (o *DataPlatformInvoiceDocumentItemDatum) RemoveProductionPlantDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPlantGeneralDatum) error {
	var err error

	queries.SetScanner(&o.ProductionPlant, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductionPlant")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductionPlantDataPlatformPlantGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryPlantRelationDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetBuyerDataPlatformSCRDeliveryPlantRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryPlantRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			BuyerDataPlatformSCRDeliveryPlantRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = related
	}

	return nil
}

// SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"TransactionCurrency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TransactionCurrency, related.Currency)
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			TransactionCurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	return nil
}

// RemoveTransactionCurrencyDataPlatformCurrencyCurrencyDatum relationship.
// Sets o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum to nil.
func (o *DataPlatformInvoiceDocumentItemDatum) RemoveTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error

	queries.SetScanner(&o.TransactionCurrency, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("TransactionCurrency")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetInvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum of the dataPlatformInvoiceDocumentItemDatum to the related item.
// Sets o.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum to related.
func (o *DataPlatformInvoiceDocumentItemDatum) SetInvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInvoiceDocumentHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InvoiceDocument"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.InvoiceDocument, o.InvoiceDocument, o.InvoiceDocumentItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InvoiceDocument = related.InvoiceDocument
	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum: related,
		}
	} else {
		o.R.InvoiceDocumentDataPlatformInvoiceDocumentHeaderDatum = related
	}

	return nil
}

// AddInvoiceDocumentDataPlatformInvoiceDocumentItemDocData adds the given related objects to the existing relationships
// of the data_platform_invoice_document_item_datum, optionally inserting them as new records.
// Appends related to o.R.InvoiceDocumentDataPlatformInvoiceDocumentItemDocData.
func (o *DataPlatformInvoiceDocumentItemDatum) AddInvoiceDocumentDataPlatformInvoiceDocumentItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceDocument = o.InvoiceDocument
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InvoiceDocument"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InvoiceDocument, rel.InvoiceDocument, rel.InvoiceDocumentItem, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceDocument = o.InvoiceDocument
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			InvoiceDocumentDataPlatformInvoiceDocumentItemDocData: related,
		}
	} else {
		o.R.InvoiceDocumentDataPlatformInvoiceDocumentItemDocData = append(o.R.InvoiceDocumentDataPlatformInvoiceDocumentItemDocData, related...)
	}

	return nil
}

// AddInvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData adds the given related objects to the existing relationships
// of the data_platform_invoice_document_item_datum, optionally inserting them as new records.
// Appends related to o.R.InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData.
func (o *DataPlatformInvoiceDocumentItemDatum) AddInvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceDocument = o.InvoiceDocument
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InvoiceDocument"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InvoiceDocument, rel.InvoiceDocument, rel.InvoiceDocumentItem, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceDocument = o.InvoiceDocument
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInvoiceDocumentItemDatumR{
			InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData: related,
		}
	} else {
		o.R.InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData = append(o.R.InvoiceDocumentDataPlatformInvoiceDocumentItemPricingElementData, related...)
	}

	return nil
}

// DataPlatformInvoiceDocumentItemData retrieves all the records using an executor.
func DataPlatformInvoiceDocumentItemData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_invoice_document_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_invoice_document_item_data`.*"})
	}

	return dataPlatformInvoiceDocumentItemDatumQuery{q}
}

// FindDataPlatformInvoiceDocumentItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInvoiceDocumentItemDatum(ctx context.Context, exec boil.ContextExecutor, invoiceDocument int, invoiceDocumentItem int, selectCols ...string) (*DataPlatformInvoiceDocumentItemDatum, error) {
	dataPlatformInvoiceDocumentItemDatumObj := &DataPlatformInvoiceDocumentItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_invoice_document_item_data` where `InvoiceDocument`=? AND `InvoiceDocumentItem`=?", sel,
	)

	q := queries.Raw(query, invoiceDocument, invoiceDocumentItem)

	err := q.Bind(ctx, exec, dataPlatformInvoiceDocumentItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_invoice_document_item_data")
	}

	return dataPlatformInvoiceDocumentItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInvoiceDocumentItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_invoice_document_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInvoiceDocumentItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInvoiceDocumentItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentItemDatumInsertCache[key]
	dataPlatformInvoiceDocumentItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInvoiceDocumentItemDatumAllColumns,
			dataPlatformInvoiceDocumentItemDatumColumnsWithDefault,
			dataPlatformInvoiceDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_invoice_document_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_invoice_document_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_invoice_document_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_invoice_document_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InvoiceDocument,
		o.InvoiceDocumentItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_invoice_document_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInvoiceDocumentItemDatumInsertCacheMut.Lock()
		dataPlatformInvoiceDocumentItemDatumInsertCache[key] = cache
		dataPlatformInvoiceDocumentItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInvoiceDocumentItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInvoiceDocumentItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInvoiceDocumentItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentItemDatumUpdateCache[key]
	dataPlatformInvoiceDocumentItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInvoiceDocumentItemDatumAllColumns,
			dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_invoice_document_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, append(wl, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_invoice_document_item_data row")
	}

	if !cached {
		dataPlatformInvoiceDocumentItemDatumUpdateCacheMut.Lock()
		dataPlatformInvoiceDocumentItemDatumUpdateCache[key] = cache
		dataPlatformInvoiceDocumentItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInvoiceDocumentItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_invoice_document_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInvoiceDocumentItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInvoiceDocumentItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformInvoiceDocumentItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInvoiceDocumentItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_invoice_document_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInvoiceDocumentItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInvoiceDocumentItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInvoiceDocumentItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentItemDatumUpsertCache[key]
	dataPlatformInvoiceDocumentItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInvoiceDocumentItemDatumAllColumns,
			dataPlatformInvoiceDocumentItemDatumColumnsWithDefault,
			dataPlatformInvoiceDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInvoiceDocumentItemDatumAllColumns,
			dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_invoice_document_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_invoice_document_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_invoice_document_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_invoice_document_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_invoice_document_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_invoice_document_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInvoiceDocumentItemDatumUpsertCacheMut.Lock()
		dataPlatformInvoiceDocumentItemDatumUpsertCache[key] = cache
		dataPlatformInvoiceDocumentItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInvoiceDocumentItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInvoiceDocumentItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInvoiceDocumentItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInvoiceDocumentItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_invoice_document_item_data` WHERE `InvoiceDocument`=? AND `InvoiceDocumentItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_invoice_document_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInvoiceDocumentItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInvoiceDocumentItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_invoice_document_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInvoiceDocumentItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_invoice_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInvoiceDocumentItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInvoiceDocumentItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInvoiceDocumentItemDatum(ctx, exec, o.InvoiceDocument, o.InvoiceDocumentItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInvoiceDocumentItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInvoiceDocumentItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_invoice_document_item_data`.* FROM `data_platform_invoice_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInvoiceDocumentItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInvoiceDocumentItemDatumExists checks if the DataPlatformInvoiceDocumentItemDatum row exists.
func DataPlatformInvoiceDocumentItemDatumExists(ctx context.Context, exec boil.ContextExecutor, invoiceDocument int, invoiceDocumentItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_invoice_document_item_data` where `InvoiceDocument`=? AND `InvoiceDocumentItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, invoiceDocument, invoiceDocumentItem)
	}
	row := exec.QueryRowContext(ctx, sql, invoiceDocument, invoiceDocumentItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_invoice_document_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInvoiceDocumentItemDatum row exists.
func (o *DataPlatformInvoiceDocumentItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInvoiceDocumentItemDatumExists(ctx, exec, o.InvoiceDocument, o.InvoiceDocumentItem)
}
