// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInvoiceDocumentItemDatum is an object representing the database table.
type DataPlatformInvoiceDocumentItemDatum struct {
	InvoiceDocument                         int          `boil:"InvoiceDocument" json:"InvoiceDocument" toml:"InvoiceDocument" yaml:"InvoiceDocument"`
	InvoiceDocumentItem                     int          `boil:"InvoiceDocumentItem" json:"InvoiceDocumentItem" toml:"InvoiceDocumentItem" yaml:"InvoiceDocumentItem"`
	InvoiceDocumentItemCategory             null.String  `boil:"InvoiceDocumentItemCategory" json:"InvoiceDocumentItemCategory,omitempty" toml:"InvoiceDocumentItemCategory" yaml:"InvoiceDocumentItemCategory,omitempty"`
	SupplyChainRelationshipID               int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID       int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID  int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	InvoiceDocumentItemText                 null.String  `boil:"InvoiceDocumentItemText" json:"InvoiceDocumentItemText,omitempty" toml:"InvoiceDocumentItemText" yaml:"InvoiceDocumentItemText,omitempty"`
	InvoiceDocumentItemTextByBuyer          string       `boil:"InvoiceDocumentItemTextByBuyer" json:"InvoiceDocumentItemTextByBuyer" toml:"InvoiceDocumentItemTextByBuyer" yaml:"InvoiceDocumentItemTextByBuyer"`
	InvoiceDocumentItemTextBySeller         string       `boil:"InvoiceDocumentItemTextBySeller" json:"InvoiceDocumentItemTextBySeller" toml:"InvoiceDocumentItemTextBySeller" yaml:"InvoiceDocumentItemTextBySeller"`
	Product                                 null.String  `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	ProductGroup                            null.String  `boil:"ProductGroup" json:"ProductGroup,omitempty" toml:"ProductGroup" yaml:"ProductGroup,omitempty"`
	ProductStandardID                       null.String  `boil:"ProductStandardID" json:"ProductStandardID,omitempty" toml:"ProductStandardID" yaml:"ProductStandardID,omitempty"`
	CreationDate                            string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                            string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                          string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                          string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	ItemBillingIsConfirmed                  null.Bool    `boil:"ItemBillingIsConfirmed" json:"ItemBillingIsConfirmed,omitempty" toml:"ItemBillingIsConfirmed" yaml:"ItemBillingIsConfirmed,omitempty"`
	Buyer                                   null.Int     `boil:"Buyer" json:"Buyer,omitempty" toml:"Buyer" yaml:"Buyer,omitempty"`
	Seller                                  null.Int     `boil:"Seller" json:"Seller,omitempty" toml:"Seller" yaml:"Seller,omitempty"`
	DeliverToParty                          null.Int     `boil:"DeliverToParty" json:"DeliverToParty,omitempty" toml:"DeliverToParty" yaml:"DeliverToParty,omitempty"`
	DeliverFromParty                        null.Int     `boil:"DeliverFromParty" json:"DeliverFromParty,omitempty" toml:"DeliverFromParty" yaml:"DeliverFromParty,omitempty"`
	DeliverToPlant                          null.String  `boil:"DeliverToPlant" json:"DeliverToPlant,omitempty" toml:"DeliverToPlant" yaml:"DeliverToPlant,omitempty"`
	DeliverToPlantStorageLocation           null.String  `boil:"DeliverToPlantStorageLocation" json:"DeliverToPlantStorageLocation,omitempty" toml:"DeliverToPlantStorageLocation" yaml:"DeliverToPlantStorageLocation,omitempty"`
	DeliverFromPlant                        null.String  `boil:"DeliverFromPlant" json:"DeliverFromPlant,omitempty" toml:"DeliverFromPlant" yaml:"DeliverFromPlant,omitempty"`
	DeliverFromPlantStorageLocation         null.String  `boil:"DeliverFromPlantStorageLocation" json:"DeliverFromPlantStorageLocation,omitempty" toml:"DeliverFromPlantStorageLocation" yaml:"DeliverFromPlantStorageLocation,omitempty"`
	ProductionPlantBusinessPartner          null.Int     `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner,omitempty" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner,omitempty"`
	ProductionPlant                         null.String  `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	ProductionPlantStorageLocation          null.String  `boil:"ProductionPlantStorageLocation" json:"ProductionPlantStorageLocation,omitempty" toml:"ProductionPlantStorageLocation" yaml:"ProductionPlantStorageLocation,omitempty"`
	ServicesRenderedDate                    null.String  `boil:"ServicesRenderedDate" json:"ServicesRenderedDate,omitempty" toml:"ServicesRenderedDate" yaml:"ServicesRenderedDate,omitempty"`
	InvoiceQuantity                         null.Float32 `boil:"InvoiceQuantity" json:"InvoiceQuantity,omitempty" toml:"InvoiceQuantity" yaml:"InvoiceQuantity,omitempty"`
	InvoiceQuantityUnit                     null.String  `boil:"InvoiceQuantityUnit" json:"InvoiceQuantityUnit,omitempty" toml:"InvoiceQuantityUnit" yaml:"InvoiceQuantityUnit,omitempty"`
	InvoiceQuantityInBaseUnit               null.Float32 `boil:"InvoiceQuantityInBaseUnit" json:"InvoiceQuantityInBaseUnit,omitempty" toml:"InvoiceQuantityInBaseUnit" yaml:"InvoiceQuantityInBaseUnit,omitempty"`
	BaseUnit                                null.String  `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	ActualGoodsIssueDate                    null.String  `boil:"ActualGoodsIssueDate" json:"ActualGoodsIssueDate,omitempty" toml:"ActualGoodsIssueDate" yaml:"ActualGoodsIssueDate,omitempty"`
	ActualGoodsIssueTime                    null.String  `boil:"ActualGoodsIssueTime" json:"ActualGoodsIssueTime,omitempty" toml:"ActualGoodsIssueTime" yaml:"ActualGoodsIssueTime,omitempty"`
	ActualGoodsReceiptDate                  null.String  `boil:"ActualGoodsReceiptDate" json:"ActualGoodsReceiptDate,omitempty" toml:"ActualGoodsReceiptDate" yaml:"ActualGoodsReceiptDate,omitempty"`
	ActualGoodsReceiptTime                  null.String  `boil:"ActualGoodsReceiptTime" json:"ActualGoodsReceiptTime,omitempty" toml:"ActualGoodsReceiptTime" yaml:"ActualGoodsReceiptTime,omitempty"`
	ItemGrossWeight                         null.Float32 `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ItemNetWeight                           null.Float32 `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	ItemWeightUnit                          null.String  `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	NetAmount                               null.Float32 `boil:"NetAmount" json:"NetAmount,omitempty" toml:"NetAmount" yaml:"NetAmount,omitempty"`
	TaxAmount                               null.Float32 `boil:"TaxAmount" json:"TaxAmount,omitempty" toml:"TaxAmount" yaml:"TaxAmount,omitempty"`
	GrossAmount                             null.Float32 `boil:"GrossAmount" json:"GrossAmount,omitempty" toml:"GrossAmount" yaml:"GrossAmount,omitempty"`
	GoodsIssueOrReceiptSlipNumber           null.String  `boil:"GoodsIssueOrReceiptSlipNumber" json:"GoodsIssueOrReceiptSlipNumber,omitempty" toml:"GoodsIssueOrReceiptSlipNumber" yaml:"GoodsIssueOrReceiptSlipNumber,omitempty"`
	TransactionCurrency                     null.String  `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	PricingDate                             null.String  `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	TransactionTaxClassification            string       `boil:"TransactionTaxClassification" json:"TransactionTaxClassification" toml:"TransactionTaxClassification" yaml:"TransactionTaxClassification"`
	ProductTaxClassificationBillToCountry   string       `boil:"ProductTaxClassificationBillToCountry" json:"ProductTaxClassificationBillToCountry" toml:"ProductTaxClassificationBillToCountry" yaml:"ProductTaxClassificationBillToCountry"`
	ProductTaxClassificationBillFromCountry string       `boil:"ProductTaxClassificationBillFromCountry" json:"ProductTaxClassificationBillFromCountry" toml:"ProductTaxClassificationBillFromCountry" yaml:"ProductTaxClassificationBillFromCountry"`
	DefinedTaxClassification                string       `boil:"DefinedTaxClassification" json:"DefinedTaxClassification" toml:"DefinedTaxClassification" yaml:"DefinedTaxClassification"`
	Project                                 null.String  `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	OrderID                                 null.Int     `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                               null.Int     `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	OrderType                               null.String  `boil:"OrderType" json:"OrderType,omitempty" toml:"OrderType" yaml:"OrderType,omitempty"`
	ContractType                            null.String  `boil:"ContractType" json:"ContractType,omitempty" toml:"ContractType" yaml:"ContractType,omitempty"`
	OrderVaridityStartDate                  null.String  `boil:"OrderVaridityStartDate" json:"OrderVaridityStartDate,omitempty" toml:"OrderVaridityStartDate" yaml:"OrderVaridityStartDate,omitempty"`
	OrderVaridityEndDate                    null.String  `boil:"OrderVaridityEndDate" json:"OrderVaridityEndDate,omitempty" toml:"OrderVaridityEndDate" yaml:"OrderVaridityEndDate,omitempty"`
	InvoicePeriodStartDate                  null.String  `boil:"InvoicePeriodStartDate" json:"InvoicePeriodStartDate,omitempty" toml:"InvoicePeriodStartDate" yaml:"InvoicePeriodStartDate,omitempty"`
	InvoicePeriodEndDate                    null.String  `boil:"InvoicePeriodEndDate" json:"InvoicePeriodEndDate,omitempty" toml:"InvoicePeriodEndDate" yaml:"InvoicePeriodEndDate,omitempty"`
	DeliveryDocument                        null.Int     `boil:"DeliveryDocument" json:"DeliveryDocument,omitempty" toml:"DeliveryDocument" yaml:"DeliveryDocument,omitempty"`
	DeliveryDocumentItem                    null.Int     `boil:"DeliveryDocumentItem" json:"DeliveryDocumentItem,omitempty" toml:"DeliveryDocumentItem" yaml:"DeliveryDocumentItem,omitempty"`
	OriginDocument                          null.Int     `boil:"OriginDocument" json:"OriginDocument,omitempty" toml:"OriginDocument" yaml:"OriginDocument,omitempty"`
	OriginDocumentItem                      null.Int     `boil:"OriginDocumentItem" json:"OriginDocumentItem,omitempty" toml:"OriginDocumentItem" yaml:"OriginDocumentItem,omitempty"`
	ReferenceDocument                       null.Int     `boil:"ReferenceDocument" json:"ReferenceDocument,omitempty" toml:"ReferenceDocument" yaml:"ReferenceDocument,omitempty"`
	ReferenceDocumentItem                   null.Int     `boil:"ReferenceDocumentItem" json:"ReferenceDocumentItem,omitempty" toml:"ReferenceDocumentItem" yaml:"ReferenceDocumentItem,omitempty"`
	ExternalReferenceDocument               null.String  `boil:"ExternalReferenceDocument" json:"ExternalReferenceDocument,omitempty" toml:"ExternalReferenceDocument" yaml:"ExternalReferenceDocument,omitempty"`
	ExternalReferenceDocumentItem           null.String  `boil:"ExternalReferenceDocumentItem" json:"ExternalReferenceDocumentItem,omitempty" toml:"ExternalReferenceDocumentItem" yaml:"ExternalReferenceDocumentItem,omitempty"`
	TaxCode                                 null.String  `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	TaxRate                                 null.Float32 `boil:"TaxRate" json:"TaxRate,omitempty" toml:"TaxRate" yaml:"TaxRate,omitempty"`
	CountryOfOrigin                         null.String  `boil:"CountryOfOrigin" json:"CountryOfOrigin,omitempty" toml:"CountryOfOrigin" yaml:"CountryOfOrigin,omitempty"`
	CountryOfOriginLanguage                 null.String  `boil:"CountryOfOriginLanguage" json:"CountryOfOriginLanguage,omitempty" toml:"CountryOfOriginLanguage" yaml:"CountryOfOriginLanguage,omitempty"`
	ItemPaymentRequisitionIsCreated         null.Bool    `boil:"ItemPaymentRequisitionIsCreated" json:"ItemPaymentRequisitionIsCreated,omitempty" toml:"ItemPaymentRequisitionIsCreated" yaml:"ItemPaymentRequisitionIsCreated,omitempty"`
	ItemIsCleared                           null.Bool    `boil:"ItemIsCleared" json:"ItemIsCleared,omitempty" toml:"ItemIsCleared" yaml:"ItemIsCleared,omitempty"`
	ItemPaymentBlockStatus                  null.Bool    `boil:"ItemPaymentBlockStatus" json:"ItemPaymentBlockStatus,omitempty" toml:"ItemPaymentBlockStatus" yaml:"ItemPaymentBlockStatus,omitempty"`
	IsCancelled                             null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`

	R *dataPlatformInvoiceDocumentItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInvoiceDocumentItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInvoiceDocumentItemDatumColumns = struct {
	InvoiceDocument                         string
	InvoiceDocumentItem                     string
	InvoiceDocumentItemCategory             string
	SupplyChainRelationshipID               string
	SupplyChainRelationshipDeliveryID       string
	SupplyChainRelationshipDeliveryPlantID  string
	InvoiceDocumentItemText                 string
	InvoiceDocumentItemTextByBuyer          string
	InvoiceDocumentItemTextBySeller         string
	Product                                 string
	ProductGroup                            string
	ProductStandardID                       string
	CreationDate                            string
	CreationTime                            string
	LastChangeDate                          string
	LastChangeTime                          string
	ItemBillingIsConfirmed                  string
	Buyer                                   string
	Seller                                  string
	DeliverToParty                          string
	DeliverFromParty                        string
	DeliverToPlant                          string
	DeliverToPlantStorageLocation           string
	DeliverFromPlant                        string
	DeliverFromPlantStorageLocation         string
	ProductionPlantBusinessPartner          string
	ProductionPlant                         string
	ProductionPlantStorageLocation          string
	ServicesRenderedDate                    string
	InvoiceQuantity                         string
	InvoiceQuantityUnit                     string
	InvoiceQuantityInBaseUnit               string
	BaseUnit                                string
	ActualGoodsIssueDate                    string
	ActualGoodsIssueTime                    string
	ActualGoodsReceiptDate                  string
	ActualGoodsReceiptTime                  string
	ItemGrossWeight                         string
	ItemNetWeight                           string
	ItemWeightUnit                          string
	NetAmount                               string
	TaxAmount                               string
	GrossAmount                             string
	GoodsIssueOrReceiptSlipNumber           string
	TransactionCurrency                     string
	PricingDate                             string
	TransactionTaxClassification            string
	ProductTaxClassificationBillToCountry   string
	ProductTaxClassificationBillFromCountry string
	DefinedTaxClassification                string
	Project                                 string
	OrderID                                 string
	OrderItem                               string
	OrderType                               string
	ContractType                            string
	OrderVaridityStartDate                  string
	OrderVaridityEndDate                    string
	InvoicePeriodStartDate                  string
	InvoicePeriodEndDate                    string
	DeliveryDocument                        string
	DeliveryDocumentItem                    string
	OriginDocument                          string
	OriginDocumentItem                      string
	ReferenceDocument                       string
	ReferenceDocumentItem                   string
	ExternalReferenceDocument               string
	ExternalReferenceDocumentItem           string
	TaxCode                                 string
	TaxRate                                 string
	CountryOfOrigin                         string
	CountryOfOriginLanguage                 string
	ItemPaymentRequisitionIsCreated         string
	ItemIsCleared                           string
	ItemPaymentBlockStatus                  string
	IsCancelled                             string
}{
	InvoiceDocument:                         "InvoiceDocument",
	InvoiceDocumentItem:                     "InvoiceDocumentItem",
	InvoiceDocumentItemCategory:             "InvoiceDocumentItemCategory",
	SupplyChainRelationshipID:               "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:       "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:  "SupplyChainRelationshipDeliveryPlantID",
	InvoiceDocumentItemText:                 "InvoiceDocumentItemText",
	InvoiceDocumentItemTextByBuyer:          "InvoiceDocumentItemTextByBuyer",
	InvoiceDocumentItemTextBySeller:         "InvoiceDocumentItemTextBySeller",
	Product:                                 "Product",
	ProductGroup:                            "ProductGroup",
	ProductStandardID:                       "ProductStandardID",
	CreationDate:                            "CreationDate",
	CreationTime:                            "CreationTime",
	LastChangeDate:                          "LastChangeDate",
	LastChangeTime:                          "LastChangeTime",
	ItemBillingIsConfirmed:                  "ItemBillingIsConfirmed",
	Buyer:                                   "Buyer",
	Seller:                                  "Seller",
	DeliverToParty:                          "DeliverToParty",
	DeliverFromParty:                        "DeliverFromParty",
	DeliverToPlant:                          "DeliverToPlant",
	DeliverToPlantStorageLocation:           "DeliverToPlantStorageLocation",
	DeliverFromPlant:                        "DeliverFromPlant",
	DeliverFromPlantStorageLocation:         "DeliverFromPlantStorageLocation",
	ProductionPlantBusinessPartner:          "ProductionPlantBusinessPartner",
	ProductionPlant:                         "ProductionPlant",
	ProductionPlantStorageLocation:          "ProductionPlantStorageLocation",
	ServicesRenderedDate:                    "ServicesRenderedDate",
	InvoiceQuantity:                         "InvoiceQuantity",
	InvoiceQuantityUnit:                     "InvoiceQuantityUnit",
	InvoiceQuantityInBaseUnit:               "InvoiceQuantityInBaseUnit",
	BaseUnit:                                "BaseUnit",
	ActualGoodsIssueDate:                    "ActualGoodsIssueDate",
	ActualGoodsIssueTime:                    "ActualGoodsIssueTime",
	ActualGoodsReceiptDate:                  "ActualGoodsReceiptDate",
	ActualGoodsReceiptTime:                  "ActualGoodsReceiptTime",
	ItemGrossWeight:                         "ItemGrossWeight",
	ItemNetWeight:                           "ItemNetWeight",
	ItemWeightUnit:                          "ItemWeightUnit",
	NetAmount:                               "NetAmount",
	TaxAmount:                               "TaxAmount",
	GrossAmount:                             "GrossAmount",
	GoodsIssueOrReceiptSlipNumber:           "GoodsIssueOrReceiptSlipNumber",
	TransactionCurrency:                     "TransactionCurrency",
	PricingDate:                             "PricingDate",
	TransactionTaxClassification:            "TransactionTaxClassification",
	ProductTaxClassificationBillToCountry:   "ProductTaxClassificationBillToCountry",
	ProductTaxClassificationBillFromCountry: "ProductTaxClassificationBillFromCountry",
	DefinedTaxClassification:                "DefinedTaxClassification",
	Project:                                 "Project",
	OrderID:                                 "OrderID",
	OrderItem:                               "OrderItem",
	OrderType:                               "OrderType",
	ContractType:                            "ContractType",
	OrderVaridityStartDate:                  "OrderVaridityStartDate",
	OrderVaridityEndDate:                    "OrderVaridityEndDate",
	InvoicePeriodStartDate:                  "InvoicePeriodStartDate",
	InvoicePeriodEndDate:                    "InvoicePeriodEndDate",
	DeliveryDocument:                        "DeliveryDocument",
	DeliveryDocumentItem:                    "DeliveryDocumentItem",
	OriginDocument:                          "OriginDocument",
	OriginDocumentItem:                      "OriginDocumentItem",
	ReferenceDocument:                       "ReferenceDocument",
	ReferenceDocumentItem:                   "ReferenceDocumentItem",
	ExternalReferenceDocument:               "ExternalReferenceDocument",
	ExternalReferenceDocumentItem:           "ExternalReferenceDocumentItem",
	TaxCode:                                 "TaxCode",
	TaxRate:                                 "TaxRate",
	CountryOfOrigin:                         "CountryOfOrigin",
	CountryOfOriginLanguage:                 "CountryOfOriginLanguage",
	ItemPaymentRequisitionIsCreated:         "ItemPaymentRequisitionIsCreated",
	ItemIsCleared:                           "ItemIsCleared",
	ItemPaymentBlockStatus:                  "ItemPaymentBlockStatus",
	IsCancelled:                             "IsCancelled",
}

var DataPlatformInvoiceDocumentItemDatumTableColumns = struct {
	InvoiceDocument                         string
	InvoiceDocumentItem                     string
	InvoiceDocumentItemCategory             string
	SupplyChainRelationshipID               string
	SupplyChainRelationshipDeliveryID       string
	SupplyChainRelationshipDeliveryPlantID  string
	InvoiceDocumentItemText                 string
	InvoiceDocumentItemTextByBuyer          string
	InvoiceDocumentItemTextBySeller         string
	Product                                 string
	ProductGroup                            string
	ProductStandardID                       string
	CreationDate                            string
	CreationTime                            string
	LastChangeDate                          string
	LastChangeTime                          string
	ItemBillingIsConfirmed                  string
	Buyer                                   string
	Seller                                  string
	DeliverToParty                          string
	DeliverFromParty                        string
	DeliverToPlant                          string
	DeliverToPlantStorageLocation           string
	DeliverFromPlant                        string
	DeliverFromPlantStorageLocation         string
	ProductionPlantBusinessPartner          string
	ProductionPlant                         string
	ProductionPlantStorageLocation          string
	ServicesRenderedDate                    string
	InvoiceQuantity                         string
	InvoiceQuantityUnit                     string
	InvoiceQuantityInBaseUnit               string
	BaseUnit                                string
	ActualGoodsIssueDate                    string
	ActualGoodsIssueTime                    string
	ActualGoodsReceiptDate                  string
	ActualGoodsReceiptTime                  string
	ItemGrossWeight                         string
	ItemNetWeight                           string
	ItemWeightUnit                          string
	NetAmount                               string
	TaxAmount                               string
	GrossAmount                             string
	GoodsIssueOrReceiptSlipNumber           string
	TransactionCurrency                     string
	PricingDate                             string
	TransactionTaxClassification            string
	ProductTaxClassificationBillToCountry   string
	ProductTaxClassificationBillFromCountry string
	DefinedTaxClassification                string
	Project                                 string
	OrderID                                 string
	OrderItem                               string
	OrderType                               string
	ContractType                            string
	OrderVaridityStartDate                  string
	OrderVaridityEndDate                    string
	InvoicePeriodStartDate                  string
	InvoicePeriodEndDate                    string
	DeliveryDocument                        string
	DeliveryDocumentItem                    string
	OriginDocument                          string
	OriginDocumentItem                      string
	ReferenceDocument                       string
	ReferenceDocumentItem                   string
	ExternalReferenceDocument               string
	ExternalReferenceDocumentItem           string
	TaxCode                                 string
	TaxRate                                 string
	CountryOfOrigin                         string
	CountryOfOriginLanguage                 string
	ItemPaymentRequisitionIsCreated         string
	ItemIsCleared                           string
	ItemPaymentBlockStatus                  string
	IsCancelled                             string
}{
	InvoiceDocument:                         "data_platform_invoice_document_item_data.InvoiceDocument",
	InvoiceDocumentItem:                     "data_platform_invoice_document_item_data.InvoiceDocumentItem",
	InvoiceDocumentItemCategory:             "data_platform_invoice_document_item_data.InvoiceDocumentItemCategory",
	SupplyChainRelationshipID:               "data_platform_invoice_document_item_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:       "data_platform_invoice_document_item_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:  "data_platform_invoice_document_item_data.SupplyChainRelationshipDeliveryPlantID",
	InvoiceDocumentItemText:                 "data_platform_invoice_document_item_data.InvoiceDocumentItemText",
	InvoiceDocumentItemTextByBuyer:          "data_platform_invoice_document_item_data.InvoiceDocumentItemTextByBuyer",
	InvoiceDocumentItemTextBySeller:         "data_platform_invoice_document_item_data.InvoiceDocumentItemTextBySeller",
	Product:                                 "data_platform_invoice_document_item_data.Product",
	ProductGroup:                            "data_platform_invoice_document_item_data.ProductGroup",
	ProductStandardID:                       "data_platform_invoice_document_item_data.ProductStandardID",
	CreationDate:                            "data_platform_invoice_document_item_data.CreationDate",
	CreationTime:                            "data_platform_invoice_document_item_data.CreationTime",
	LastChangeDate:                          "data_platform_invoice_document_item_data.LastChangeDate",
	LastChangeTime:                          "data_platform_invoice_document_item_data.LastChangeTime",
	ItemBillingIsConfirmed:                  "data_platform_invoice_document_item_data.ItemBillingIsConfirmed",
	Buyer:                                   "data_platform_invoice_document_item_data.Buyer",
	Seller:                                  "data_platform_invoice_document_item_data.Seller",
	DeliverToParty:                          "data_platform_invoice_document_item_data.DeliverToParty",
	DeliverFromParty:                        "data_platform_invoice_document_item_data.DeliverFromParty",
	DeliverToPlant:                          "data_platform_invoice_document_item_data.DeliverToPlant",
	DeliverToPlantStorageLocation:           "data_platform_invoice_document_item_data.DeliverToPlantStorageLocation",
	DeliverFromPlant:                        "data_platform_invoice_document_item_data.DeliverFromPlant",
	DeliverFromPlantStorageLocation:         "data_platform_invoice_document_item_data.DeliverFromPlantStorageLocation",
	ProductionPlantBusinessPartner:          "data_platform_invoice_document_item_data.ProductionPlantBusinessPartner",
	ProductionPlant:                         "data_platform_invoice_document_item_data.ProductionPlant",
	ProductionPlantStorageLocation:          "data_platform_invoice_document_item_data.ProductionPlantStorageLocation",
	ServicesRenderedDate:                    "data_platform_invoice_document_item_data.ServicesRenderedDate",
	InvoiceQuantity:                         "data_platform_invoice_document_item_data.InvoiceQuantity",
	InvoiceQuantityUnit:                     "data_platform_invoice_document_item_data.InvoiceQuantityUnit",
	InvoiceQuantityInBaseUnit:               "data_platform_invoice_document_item_data.InvoiceQuantityInBaseUnit",
	BaseUnit:                                "data_platform_invoice_document_item_data.BaseUnit",
	ActualGoodsIssueDate:                    "data_platform_invoice_document_item_data.ActualGoodsIssueDate",
	ActualGoodsIssueTime:                    "data_platform_invoice_document_item_data.ActualGoodsIssueTime",
	ActualGoodsReceiptDate:                  "data_platform_invoice_document_item_data.ActualGoodsReceiptDate",
	ActualGoodsReceiptTime:                  "data_platform_invoice_document_item_data.ActualGoodsReceiptTime",
	ItemGrossWeight:                         "data_platform_invoice_document_item_data.ItemGrossWeight",
	ItemNetWeight:                           "data_platform_invoice_document_item_data.ItemNetWeight",
	ItemWeightUnit:                          "data_platform_invoice_document_item_data.ItemWeightUnit",
	NetAmount:                               "data_platform_invoice_document_item_data.NetAmount",
	TaxAmount:                               "data_platform_invoice_document_item_data.TaxAmount",
	GrossAmount:                             "data_platform_invoice_document_item_data.GrossAmount",
	GoodsIssueOrReceiptSlipNumber:           "data_platform_invoice_document_item_data.GoodsIssueOrReceiptSlipNumber",
	TransactionCurrency:                     "data_platform_invoice_document_item_data.TransactionCurrency",
	PricingDate:                             "data_platform_invoice_document_item_data.PricingDate",
	TransactionTaxClassification:            "data_platform_invoice_document_item_data.TransactionTaxClassification",
	ProductTaxClassificationBillToCountry:   "data_platform_invoice_document_item_data.ProductTaxClassificationBillToCountry",
	ProductTaxClassificationBillFromCountry: "data_platform_invoice_document_item_data.ProductTaxClassificationBillFromCountry",
	DefinedTaxClassification:                "data_platform_invoice_document_item_data.DefinedTaxClassification",
	Project:                                 "data_platform_invoice_document_item_data.Project",
	OrderID:                                 "data_platform_invoice_document_item_data.OrderID",
	OrderItem:                               "data_platform_invoice_document_item_data.OrderItem",
	OrderType:                               "data_platform_invoice_document_item_data.OrderType",
	ContractType:                            "data_platform_invoice_document_item_data.ContractType",
	OrderVaridityStartDate:                  "data_platform_invoice_document_item_data.OrderVaridityStartDate",
	OrderVaridityEndDate:                    "data_platform_invoice_document_item_data.OrderVaridityEndDate",
	InvoicePeriodStartDate:                  "data_platform_invoice_document_item_data.InvoicePeriodStartDate",
	InvoicePeriodEndDate:                    "data_platform_invoice_document_item_data.InvoicePeriodEndDate",
	DeliveryDocument:                        "data_platform_invoice_document_item_data.DeliveryDocument",
	DeliveryDocumentItem:                    "data_platform_invoice_document_item_data.DeliveryDocumentItem",
	OriginDocument:                          "data_platform_invoice_document_item_data.OriginDocument",
	OriginDocumentItem:                      "data_platform_invoice_document_item_data.OriginDocumentItem",
	ReferenceDocument:                       "data_platform_invoice_document_item_data.ReferenceDocument",
	ReferenceDocumentItem:                   "data_platform_invoice_document_item_data.ReferenceDocumentItem",
	ExternalReferenceDocument:               "data_platform_invoice_document_item_data.ExternalReferenceDocument",
	ExternalReferenceDocumentItem:           "data_platform_invoice_document_item_data.ExternalReferenceDocumentItem",
	TaxCode:                                 "data_platform_invoice_document_item_data.TaxCode",
	TaxRate:                                 "data_platform_invoice_document_item_data.TaxRate",
	CountryOfOrigin:                         "data_platform_invoice_document_item_data.CountryOfOrigin",
	CountryOfOriginLanguage:                 "data_platform_invoice_document_item_data.CountryOfOriginLanguage",
	ItemPaymentRequisitionIsCreated:         "data_platform_invoice_document_item_data.ItemPaymentRequisitionIsCreated",
	ItemIsCleared:                           "data_platform_invoice_document_item_data.ItemIsCleared",
	ItemPaymentBlockStatus:                  "data_platform_invoice_document_item_data.ItemPaymentBlockStatus",
	IsCancelled:                             "data_platform_invoice_document_item_data.IsCancelled",
}

// Generated where

var DataPlatformInvoiceDocumentItemDatumWhere = struct {
	InvoiceDocument                         whereHelperint
	InvoiceDocumentItem                     whereHelperint
	InvoiceDocumentItemCategory             whereHelpernull_String
	SupplyChainRelationshipID               whereHelperint
	SupplyChainRelationshipDeliveryID       whereHelperint
	SupplyChainRelationshipDeliveryPlantID  whereHelperint
	InvoiceDocumentItemText                 whereHelpernull_String
	InvoiceDocumentItemTextByBuyer          whereHelperstring
	InvoiceDocumentItemTextBySeller         whereHelperstring
	Product                                 whereHelpernull_String
	ProductGroup                            whereHelpernull_String
	ProductStandardID                       whereHelpernull_String
	CreationDate                            whereHelperstring
	CreationTime                            whereHelperstring
	LastChangeDate                          whereHelperstring
	LastChangeTime                          whereHelperstring
	ItemBillingIsConfirmed                  whereHelpernull_Bool
	Buyer                                   whereHelpernull_Int
	Seller                                  whereHelpernull_Int
	DeliverToParty                          whereHelpernull_Int
	DeliverFromParty                        whereHelpernull_Int
	DeliverToPlant                          whereHelpernull_String
	DeliverToPlantStorageLocation           whereHelpernull_String
	DeliverFromPlant                        whereHelpernull_String
	DeliverFromPlantStorageLocation         whereHelpernull_String
	ProductionPlantBusinessPartner          whereHelpernull_Int
	ProductionPlant                         whereHelpernull_String
	ProductionPlantStorageLocation          whereHelpernull_String
	ServicesRenderedDate                    whereHelpernull_String
	InvoiceQuantity                         whereHelpernull_Float32
	InvoiceQuantityUnit                     whereHelpernull_String
	InvoiceQuantityInBaseUnit               whereHelpernull_Float32
	BaseUnit                                whereHelpernull_String
	ActualGoodsIssueDate                    whereHelpernull_String
	ActualGoodsIssueTime                    whereHelpernull_String
	ActualGoodsReceiptDate                  whereHelpernull_String
	ActualGoodsReceiptTime                  whereHelpernull_String
	ItemGrossWeight                         whereHelpernull_Float32
	ItemNetWeight                           whereHelpernull_Float32
	ItemWeightUnit                          whereHelpernull_String
	NetAmount                               whereHelpernull_Float32
	TaxAmount                               whereHelpernull_Float32
	GrossAmount                             whereHelpernull_Float32
	GoodsIssueOrReceiptSlipNumber           whereHelpernull_String
	TransactionCurrency                     whereHelpernull_String
	PricingDate                             whereHelpernull_String
	TransactionTaxClassification            whereHelperstring
	ProductTaxClassificationBillToCountry   whereHelperstring
	ProductTaxClassificationBillFromCountry whereHelperstring
	DefinedTaxClassification                whereHelperstring
	Project                                 whereHelpernull_String
	OrderID                                 whereHelpernull_Int
	OrderItem                               whereHelpernull_Int
	OrderType                               whereHelpernull_String
	ContractType                            whereHelpernull_String
	OrderVaridityStartDate                  whereHelpernull_String
	OrderVaridityEndDate                    whereHelpernull_String
	InvoicePeriodStartDate                  whereHelpernull_String
	InvoicePeriodEndDate                    whereHelpernull_String
	DeliveryDocument                        whereHelpernull_Int
	DeliveryDocumentItem                    whereHelpernull_Int
	OriginDocument                          whereHelpernull_Int
	OriginDocumentItem                      whereHelpernull_Int
	ReferenceDocument                       whereHelpernull_Int
	ReferenceDocumentItem                   whereHelpernull_Int
	ExternalReferenceDocument               whereHelpernull_String
	ExternalReferenceDocumentItem           whereHelpernull_String
	TaxCode                                 whereHelpernull_String
	TaxRate                                 whereHelpernull_Float32
	CountryOfOrigin                         whereHelpernull_String
	CountryOfOriginLanguage                 whereHelpernull_String
	ItemPaymentRequisitionIsCreated         whereHelpernull_Bool
	ItemIsCleared                           whereHelpernull_Bool
	ItemPaymentBlockStatus                  whereHelpernull_Bool
	IsCancelled                             whereHelpernull_Bool
}{
	InvoiceDocument:                         whereHelperint{field: "`data_platform_invoice_document_item_data`.`InvoiceDocument`"},
	InvoiceDocumentItem:                     whereHelperint{field: "`data_platform_invoice_document_item_data`.`InvoiceDocumentItem`"},
	InvoiceDocumentItemCategory:             whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`InvoiceDocumentItemCategory`"},
	SupplyChainRelationshipID:               whereHelperint{field: "`data_platform_invoice_document_item_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:       whereHelperint{field: "`data_platform_invoice_document_item_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:  whereHelperint{field: "`data_platform_invoice_document_item_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	InvoiceDocumentItemText:                 whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`InvoiceDocumentItemText`"},
	InvoiceDocumentItemTextByBuyer:          whereHelperstring{field: "`data_platform_invoice_document_item_data`.`InvoiceDocumentItemTextByBuyer`"},
	InvoiceDocumentItemTextBySeller:         whereHelperstring{field: "`data_platform_invoice_document_item_data`.`InvoiceDocumentItemTextBySeller`"},
	Product:                                 whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`Product`"},
	ProductGroup:                            whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ProductGroup`"},
	ProductStandardID:                       whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ProductStandardID`"},
	CreationDate:                            whereHelperstring{field: "`data_platform_invoice_document_item_data`.`CreationDate`"},
	CreationTime:                            whereHelperstring{field: "`data_platform_invoice_document_item_data`.`CreationTime`"},
	LastChangeDate:                          whereHelperstring{field: "`data_platform_invoice_document_item_data`.`LastChangeDate`"},
	LastChangeTime:                          whereHelperstring{field: "`data_platform_invoice_document_item_data`.`LastChangeTime`"},
	ItemBillingIsConfirmed:                  whereHelpernull_Bool{field: "`data_platform_invoice_document_item_data`.`ItemBillingIsConfirmed`"},
	Buyer:                                   whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`Buyer`"},
	Seller:                                  whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`Seller`"},
	DeliverToParty:                          whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`DeliverToParty`"},
	DeliverFromParty:                        whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`DeliverFromParty`"},
	DeliverToPlant:                          whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`DeliverToPlant`"},
	DeliverToPlantStorageLocation:           whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`DeliverToPlantStorageLocation`"},
	DeliverFromPlant:                        whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`DeliverFromPlant`"},
	DeliverFromPlantStorageLocation:         whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`DeliverFromPlantStorageLocation`"},
	ProductionPlantBusinessPartner:          whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                         whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ProductionPlant`"},
	ProductionPlantStorageLocation:          whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ProductionPlantStorageLocation`"},
	ServicesRenderedDate:                    whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ServicesRenderedDate`"},
	InvoiceQuantity:                         whereHelpernull_Float32{field: "`data_platform_invoice_document_item_data`.`InvoiceQuantity`"},
	InvoiceQuantityUnit:                     whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`InvoiceQuantityUnit`"},
	InvoiceQuantityInBaseUnit:               whereHelpernull_Float32{field: "`data_platform_invoice_document_item_data`.`InvoiceQuantityInBaseUnit`"},
	BaseUnit:                                whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`BaseUnit`"},
	ActualGoodsIssueDate:                    whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ActualGoodsIssueDate`"},
	ActualGoodsIssueTime:                    whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ActualGoodsIssueTime`"},
	ActualGoodsReceiptDate:                  whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ActualGoodsReceiptDate`"},
	ActualGoodsReceiptTime:                  whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ActualGoodsReceiptTime`"},
	ItemGrossWeight:                         whereHelpernull_Float32{field: "`data_platform_invoice_document_item_data`.`ItemGrossWeight`"},
	ItemNetWeight:                           whereHelpernull_Float32{field: "`data_platform_invoice_document_item_data`.`ItemNetWeight`"},
	ItemWeightUnit:                          whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ItemWeightUnit`"},
	NetAmount:                               whereHelpernull_Float32{field: "`data_platform_invoice_document_item_data`.`NetAmount`"},
	TaxAmount:                               whereHelpernull_Float32{field: "`data_platform_invoice_document_item_data`.`TaxAmount`"},
	GrossAmount:                             whereHelpernull_Float32{field: "`data_platform_invoice_document_item_data`.`GrossAmount`"},
	GoodsIssueOrReceiptSlipNumber:           whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`GoodsIssueOrReceiptSlipNumber`"},
	TransactionCurrency:                     whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`TransactionCurrency`"},
	PricingDate:                             whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`PricingDate`"},
	TransactionTaxClassification:            whereHelperstring{field: "`data_platform_invoice_document_item_data`.`TransactionTaxClassification`"},
	ProductTaxClassificationBillToCountry:   whereHelperstring{field: "`data_platform_invoice_document_item_data`.`ProductTaxClassificationBillToCountry`"},
	ProductTaxClassificationBillFromCountry: whereHelperstring{field: "`data_platform_invoice_document_item_data`.`ProductTaxClassificationBillFromCountry`"},
	DefinedTaxClassification:                whereHelperstring{field: "`data_platform_invoice_document_item_data`.`DefinedTaxClassification`"},
	Project:                                 whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`Project`"},
	OrderID:                                 whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`OrderID`"},
	OrderItem:                               whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`OrderItem`"},
	OrderType:                               whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`OrderType`"},
	ContractType:                            whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ContractType`"},
	OrderVaridityStartDate:                  whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`OrderVaridityStartDate`"},
	OrderVaridityEndDate:                    whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`OrderVaridityEndDate`"},
	InvoicePeriodStartDate:                  whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`InvoicePeriodStartDate`"},
	InvoicePeriodEndDate:                    whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`InvoicePeriodEndDate`"},
	DeliveryDocument:                        whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`DeliveryDocument`"},
	DeliveryDocumentItem:                    whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`DeliveryDocumentItem`"},
	OriginDocument:                          whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`OriginDocument`"},
	OriginDocumentItem:                      whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`OriginDocumentItem`"},
	ReferenceDocument:                       whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`ReferenceDocument`"},
	ReferenceDocumentItem:                   whereHelpernull_Int{field: "`data_platform_invoice_document_item_data`.`ReferenceDocumentItem`"},
	ExternalReferenceDocument:               whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ExternalReferenceDocument`"},
	ExternalReferenceDocumentItem:           whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`ExternalReferenceDocumentItem`"},
	TaxCode:                                 whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`TaxCode`"},
	TaxRate:                                 whereHelpernull_Float32{field: "`data_platform_invoice_document_item_data`.`TaxRate`"},
	CountryOfOrigin:                         whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`CountryOfOrigin`"},
	CountryOfOriginLanguage:                 whereHelpernull_String{field: "`data_platform_invoice_document_item_data`.`CountryOfOriginLanguage`"},
	ItemPaymentRequisitionIsCreated:         whereHelpernull_Bool{field: "`data_platform_invoice_document_item_data`.`ItemPaymentRequisitionIsCreated`"},
	ItemIsCleared:                           whereHelpernull_Bool{field: "`data_platform_invoice_document_item_data`.`ItemIsCleared`"},
	ItemPaymentBlockStatus:                  whereHelpernull_Bool{field: "`data_platform_invoice_document_item_data`.`ItemPaymentBlockStatus`"},
	IsCancelled:                             whereHelpernull_Bool{field: "`data_platform_invoice_document_item_data`.`IsCancelled`"},
}

// DataPlatformInvoiceDocumentItemDatumRels is where relationship names are stored.
var DataPlatformInvoiceDocumentItemDatumRels = struct {
}{}

// dataPlatformInvoiceDocumentItemDatumR is where relationships are stored.
type dataPlatformInvoiceDocumentItemDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformInvoiceDocumentItemDatumR) NewStruct() *dataPlatformInvoiceDocumentItemDatumR {
	return &dataPlatformInvoiceDocumentItemDatumR{}
}

// dataPlatformInvoiceDocumentItemDatumL is where Load methods for each relationship are stored.
type dataPlatformInvoiceDocumentItemDatumL struct{}

var (
	dataPlatformInvoiceDocumentItemDatumAllColumns            = []string{"InvoiceDocument", "InvoiceDocumentItem", "InvoiceDocumentItemCategory", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "InvoiceDocumentItemText", "InvoiceDocumentItemTextByBuyer", "InvoiceDocumentItemTextBySeller", "Product", "ProductGroup", "ProductStandardID", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "ItemBillingIsConfirmed", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverToPlantStorageLocation", "DeliverFromPlant", "DeliverFromPlantStorageLocation", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantStorageLocation", "ServicesRenderedDate", "InvoiceQuantity", "InvoiceQuantityUnit", "InvoiceQuantityInBaseUnit", "BaseUnit", "ActualGoodsIssueDate", "ActualGoodsIssueTime", "ActualGoodsReceiptDate", "ActualGoodsReceiptTime", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "NetAmount", "TaxAmount", "GrossAmount", "GoodsIssueOrReceiptSlipNumber", "TransactionCurrency", "PricingDate", "TransactionTaxClassification", "ProductTaxClassificationBillToCountry", "ProductTaxClassificationBillFromCountry", "DefinedTaxClassification", "Project", "OrderID", "OrderItem", "OrderType", "ContractType", "OrderVaridityStartDate", "OrderVaridityEndDate", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "DeliveryDocument", "DeliveryDocumentItem", "OriginDocument", "OriginDocumentItem", "ReferenceDocument", "ReferenceDocumentItem", "ExternalReferenceDocument", "ExternalReferenceDocumentItem", "TaxCode", "TaxRate", "CountryOfOrigin", "CountryOfOriginLanguage", "ItemPaymentRequisitionIsCreated", "ItemIsCleared", "ItemPaymentBlockStatus", "IsCancelled"}
	dataPlatformInvoiceDocumentItemDatumColumnsWithoutDefault = []string{"InvoiceDocument", "InvoiceDocumentItem", "InvoiceDocumentItemCategory", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "InvoiceDocumentItemText", "InvoiceDocumentItemTextByBuyer", "InvoiceDocumentItemTextBySeller", "Product", "ProductGroup", "ProductStandardID", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "ItemBillingIsConfirmed", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverToPlantStorageLocation", "DeliverFromPlant", "DeliverFromPlantStorageLocation", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantStorageLocation", "ServicesRenderedDate", "InvoiceQuantity", "InvoiceQuantityUnit", "InvoiceQuantityInBaseUnit", "BaseUnit", "ActualGoodsIssueDate", "ActualGoodsIssueTime", "ActualGoodsReceiptDate", "ActualGoodsReceiptTime", "ItemGrossWeight", "ItemNetWeight", "ItemWeightUnit", "NetAmount", "TaxAmount", "GrossAmount", "GoodsIssueOrReceiptSlipNumber", "TransactionCurrency", "PricingDate", "TransactionTaxClassification", "ProductTaxClassificationBillToCountry", "ProductTaxClassificationBillFromCountry", "DefinedTaxClassification", "Project", "OrderID", "OrderItem", "OrderType", "ContractType", "OrderVaridityStartDate", "OrderVaridityEndDate", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "DeliveryDocument", "DeliveryDocumentItem", "OriginDocument", "OriginDocumentItem", "ReferenceDocument", "ReferenceDocumentItem", "ExternalReferenceDocument", "ExternalReferenceDocumentItem", "TaxCode", "TaxRate", "CountryOfOrigin", "CountryOfOriginLanguage", "ItemPaymentRequisitionIsCreated", "ItemIsCleared", "ItemPaymentBlockStatus", "IsCancelled"}
	dataPlatformInvoiceDocumentItemDatumColumnsWithDefault    = []string{}
	dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns     = []string{"InvoiceDocument", "InvoiceDocumentItem"}
	dataPlatformInvoiceDocumentItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInvoiceDocumentItemDatumSlice is an alias for a slice of pointers to DataPlatformInvoiceDocumentItemDatum.
	// This should almost always be used instead of []DataPlatformInvoiceDocumentItemDatum.
	DataPlatformInvoiceDocumentItemDatumSlice []*DataPlatformInvoiceDocumentItemDatum

	dataPlatformInvoiceDocumentItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInvoiceDocumentItemDatumType                 = reflect.TypeOf(&DataPlatformInvoiceDocumentItemDatum{})
	dataPlatformInvoiceDocumentItemDatumMapping              = queries.MakeStructMapping(dataPlatformInvoiceDocumentItemDatumType)
	dataPlatformInvoiceDocumentItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns)
	dataPlatformInvoiceDocumentItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInvoiceDocumentItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInvoiceDocumentItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInvoiceDocumentItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInvoiceDocumentItemDatum record from the query.
func (q dataPlatformInvoiceDocumentItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInvoiceDocumentItemDatum, error) {
	o := &DataPlatformInvoiceDocumentItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_invoice_document_item_data")
	}

	return o, nil
}

// All returns all DataPlatformInvoiceDocumentItemDatum records from the query.
func (q dataPlatformInvoiceDocumentItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInvoiceDocumentItemDatumSlice, error) {
	var o []*DataPlatformInvoiceDocumentItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInvoiceDocumentItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInvoiceDocumentItemDatum records in the query.
func (q dataPlatformInvoiceDocumentItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_invoice_document_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInvoiceDocumentItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_invoice_document_item_data exists")
	}

	return count > 0, nil
}

// DataPlatformInvoiceDocumentItemData retrieves all the records using an executor.
func DataPlatformInvoiceDocumentItemData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_invoice_document_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_invoice_document_item_data`.*"})
	}

	return dataPlatformInvoiceDocumentItemDatumQuery{q}
}

// FindDataPlatformInvoiceDocumentItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInvoiceDocumentItemDatum(ctx context.Context, exec boil.ContextExecutor, invoiceDocument int, invoiceDocumentItem int, selectCols ...string) (*DataPlatformInvoiceDocumentItemDatum, error) {
	dataPlatformInvoiceDocumentItemDatumObj := &DataPlatformInvoiceDocumentItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_invoice_document_item_data` where `InvoiceDocument`=? AND `InvoiceDocumentItem`=?", sel,
	)

	q := queries.Raw(query, invoiceDocument, invoiceDocumentItem)

	err := q.Bind(ctx, exec, dataPlatformInvoiceDocumentItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_invoice_document_item_data")
	}

	return dataPlatformInvoiceDocumentItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInvoiceDocumentItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_invoice_document_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInvoiceDocumentItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInvoiceDocumentItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentItemDatumInsertCache[key]
	dataPlatformInvoiceDocumentItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInvoiceDocumentItemDatumAllColumns,
			dataPlatformInvoiceDocumentItemDatumColumnsWithDefault,
			dataPlatformInvoiceDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_invoice_document_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_invoice_document_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_invoice_document_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_invoice_document_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InvoiceDocument,
		o.InvoiceDocumentItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_invoice_document_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInvoiceDocumentItemDatumInsertCacheMut.Lock()
		dataPlatformInvoiceDocumentItemDatumInsertCache[key] = cache
		dataPlatformInvoiceDocumentItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInvoiceDocumentItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInvoiceDocumentItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInvoiceDocumentItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentItemDatumUpdateCache[key]
	dataPlatformInvoiceDocumentItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInvoiceDocumentItemDatumAllColumns,
			dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_invoice_document_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, append(wl, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_invoice_document_item_data row")
	}

	if !cached {
		dataPlatformInvoiceDocumentItemDatumUpdateCacheMut.Lock()
		dataPlatformInvoiceDocumentItemDatumUpdateCache[key] = cache
		dataPlatformInvoiceDocumentItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInvoiceDocumentItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_invoice_document_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInvoiceDocumentItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInvoiceDocumentItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformInvoiceDocumentItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInvoiceDocumentItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_invoice_document_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInvoiceDocumentItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInvoiceDocumentItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInvoiceDocumentItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInvoiceDocumentItemDatumUpsertCache[key]
	dataPlatformInvoiceDocumentItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInvoiceDocumentItemDatumAllColumns,
			dataPlatformInvoiceDocumentItemDatumColumnsWithDefault,
			dataPlatformInvoiceDocumentItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInvoiceDocumentItemDatumAllColumns,
			dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_invoice_document_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_invoice_document_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_invoice_document_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_invoice_document_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInvoiceDocumentItemDatumType, dataPlatformInvoiceDocumentItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_invoice_document_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_invoice_document_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInvoiceDocumentItemDatumUpsertCacheMut.Lock()
		dataPlatformInvoiceDocumentItemDatumUpsertCache[key] = cache
		dataPlatformInvoiceDocumentItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInvoiceDocumentItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInvoiceDocumentItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInvoiceDocumentItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInvoiceDocumentItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_invoice_document_item_data` WHERE `InvoiceDocument`=? AND `InvoiceDocumentItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_invoice_document_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInvoiceDocumentItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInvoiceDocumentItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_invoice_document_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInvoiceDocumentItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_invoice_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInvoiceDocumentItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInvoiceDocumentItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInvoiceDocumentItemDatum(ctx, exec, o.InvoiceDocument, o.InvoiceDocumentItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInvoiceDocumentItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInvoiceDocumentItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInvoiceDocumentItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_invoice_document_item_data`.* FROM `data_platform_invoice_document_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInvoiceDocumentItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInvoiceDocumentItemDatumExists checks if the DataPlatformInvoiceDocumentItemDatum row exists.
func DataPlatformInvoiceDocumentItemDatumExists(ctx context.Context, exec boil.ContextExecutor, invoiceDocument int, invoiceDocumentItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_invoice_document_item_data` where `InvoiceDocument`=? AND `InvoiceDocumentItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, invoiceDocument, invoiceDocumentItem)
	}
	row := exec.QueryRowContext(ctx, sql, invoiceDocument, invoiceDocumentItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_invoice_document_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInvoiceDocumentItemDatum row exists.
func (o *DataPlatformInvoiceDocumentItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInvoiceDocumentItemDatumExists(ctx, exec, o.InvoiceDocument, o.InvoiceDocumentItem)
}
