// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformNumberRangeNumberRangeDatum is an object representing the database table.
type DataPlatformNumberRangeNumberRangeDatum struct {
	NumberRangeID            string   `boil:"NumberRangeID" json:"NumberRangeID" toml:"NumberRangeID" yaml:"NumberRangeID"`
	ServiceLabel             string   `boil:"ServiceLabel" json:"ServiceLabel" toml:"ServiceLabel" yaml:"ServiceLabel"`
	FieldNameWithNumberRange string   `boil:"FieldNameWithNumberRange" json:"FieldNameWithNumberRange" toml:"FieldNameWithNumberRange" yaml:"FieldNameWithNumberRange"`
	NumberRangeFrom          null.Int `boil:"NumberRangeFrom" json:"NumberRangeFrom,omitempty" toml:"NumberRangeFrom" yaml:"NumberRangeFrom,omitempty"`
	NumberRangeTo            null.Int `boil:"NumberRangeTo" json:"NumberRangeTo,omitempty" toml:"NumberRangeTo" yaml:"NumberRangeTo,omitempty"`

	R *dataPlatformNumberRangeNumberRangeDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformNumberRangeNumberRangeDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformNumberRangeNumberRangeDatumColumns = struct {
	NumberRangeID            string
	ServiceLabel             string
	FieldNameWithNumberRange string
	NumberRangeFrom          string
	NumberRangeTo            string
}{
	NumberRangeID:            "NumberRangeID",
	ServiceLabel:             "ServiceLabel",
	FieldNameWithNumberRange: "FieldNameWithNumberRange",
	NumberRangeFrom:          "NumberRangeFrom",
	NumberRangeTo:            "NumberRangeTo",
}

var DataPlatformNumberRangeNumberRangeDatumTableColumns = struct {
	NumberRangeID            string
	ServiceLabel             string
	FieldNameWithNumberRange string
	NumberRangeFrom          string
	NumberRangeTo            string
}{
	NumberRangeID:            "data_platform_number_range_number_range_data.NumberRangeID",
	ServiceLabel:             "data_platform_number_range_number_range_data.ServiceLabel",
	FieldNameWithNumberRange: "data_platform_number_range_number_range_data.FieldNameWithNumberRange",
	NumberRangeFrom:          "data_platform_number_range_number_range_data.NumberRangeFrom",
	NumberRangeTo:            "data_platform_number_range_number_range_data.NumberRangeTo",
}

// Generated where

var DataPlatformNumberRangeNumberRangeDatumWhere = struct {
	NumberRangeID            whereHelperstring
	ServiceLabel             whereHelperstring
	FieldNameWithNumberRange whereHelperstring
	NumberRangeFrom          whereHelpernull_Int
	NumberRangeTo            whereHelpernull_Int
}{
	NumberRangeID:            whereHelperstring{field: "`data_platform_number_range_number_range_data`.`NumberRangeID`"},
	ServiceLabel:             whereHelperstring{field: "`data_platform_number_range_number_range_data`.`ServiceLabel`"},
	FieldNameWithNumberRange: whereHelperstring{field: "`data_platform_number_range_number_range_data`.`FieldNameWithNumberRange`"},
	NumberRangeFrom:          whereHelpernull_Int{field: "`data_platform_number_range_number_range_data`.`NumberRangeFrom`"},
	NumberRangeTo:            whereHelpernull_Int{field: "`data_platform_number_range_number_range_data`.`NumberRangeTo`"},
}

// DataPlatformNumberRangeNumberRangeDatumRels is where relationship names are stored.
var DataPlatformNumberRangeNumberRangeDatumRels = struct {
	FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData string
}{
	FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData: "FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData",
}

// dataPlatformNumberRangeNumberRangeDatumR is where relationships are stored.
type dataPlatformNumberRangeNumberRangeDatumR struct {
	FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData DataPlatformNumberRangeLatestNumberDatumSlice `boil:"FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData" json:"FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData" toml:"FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData" yaml:"FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformNumberRangeNumberRangeDatumR) NewStruct() *dataPlatformNumberRangeNumberRangeDatumR {
	return &dataPlatformNumberRangeNumberRangeDatumR{}
}

func (r *dataPlatformNumberRangeNumberRangeDatumR) GetFieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData() DataPlatformNumberRangeLatestNumberDatumSlice {
	if r == nil {
		return nil
	}
	return r.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData
}

// dataPlatformNumberRangeNumberRangeDatumL is where Load methods for each relationship are stored.
type dataPlatformNumberRangeNumberRangeDatumL struct{}

var (
	dataPlatformNumberRangeNumberRangeDatumAllColumns            = []string{"NumberRangeID", "ServiceLabel", "FieldNameWithNumberRange", "NumberRangeFrom", "NumberRangeTo"}
	dataPlatformNumberRangeNumberRangeDatumColumnsWithoutDefault = []string{"NumberRangeID", "ServiceLabel", "FieldNameWithNumberRange", "NumberRangeFrom", "NumberRangeTo"}
	dataPlatformNumberRangeNumberRangeDatumColumnsWithDefault    = []string{}
	dataPlatformNumberRangeNumberRangeDatumPrimaryKeyColumns     = []string{"NumberRangeID", "ServiceLabel", "FieldNameWithNumberRange"}
	dataPlatformNumberRangeNumberRangeDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformNumberRangeNumberRangeDatumSlice is an alias for a slice of pointers to DataPlatformNumberRangeNumberRangeDatum.
	// This should almost always be used instead of []DataPlatformNumberRangeNumberRangeDatum.
	DataPlatformNumberRangeNumberRangeDatumSlice []*DataPlatformNumberRangeNumberRangeDatum
	// DataPlatformNumberRangeNumberRangeDatumHook is the signature for custom DataPlatformNumberRangeNumberRangeDatum hook methods
	DataPlatformNumberRangeNumberRangeDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformNumberRangeNumberRangeDatum) error

	dataPlatformNumberRangeNumberRangeDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformNumberRangeNumberRangeDatumType                 = reflect.TypeOf(&DataPlatformNumberRangeNumberRangeDatum{})
	dataPlatformNumberRangeNumberRangeDatumMapping              = queries.MakeStructMapping(dataPlatformNumberRangeNumberRangeDatumType)
	dataPlatformNumberRangeNumberRangeDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformNumberRangeNumberRangeDatumType, dataPlatformNumberRangeNumberRangeDatumMapping, dataPlatformNumberRangeNumberRangeDatumPrimaryKeyColumns)
	dataPlatformNumberRangeNumberRangeDatumInsertCacheMut       sync.RWMutex
	dataPlatformNumberRangeNumberRangeDatumInsertCache          = make(map[string]insertCache)
	dataPlatformNumberRangeNumberRangeDatumUpdateCacheMut       sync.RWMutex
	dataPlatformNumberRangeNumberRangeDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformNumberRangeNumberRangeDatumUpsertCacheMut       sync.RWMutex
	dataPlatformNumberRangeNumberRangeDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformNumberRangeNumberRangeDatumAfterSelectHooks []DataPlatformNumberRangeNumberRangeDatumHook

var dataPlatformNumberRangeNumberRangeDatumBeforeInsertHooks []DataPlatformNumberRangeNumberRangeDatumHook
var dataPlatformNumberRangeNumberRangeDatumAfterInsertHooks []DataPlatformNumberRangeNumberRangeDatumHook

var dataPlatformNumberRangeNumberRangeDatumBeforeUpdateHooks []DataPlatformNumberRangeNumberRangeDatumHook
var dataPlatformNumberRangeNumberRangeDatumAfterUpdateHooks []DataPlatformNumberRangeNumberRangeDatumHook

var dataPlatformNumberRangeNumberRangeDatumBeforeDeleteHooks []DataPlatformNumberRangeNumberRangeDatumHook
var dataPlatformNumberRangeNumberRangeDatumAfterDeleteHooks []DataPlatformNumberRangeNumberRangeDatumHook

var dataPlatformNumberRangeNumberRangeDatumBeforeUpsertHooks []DataPlatformNumberRangeNumberRangeDatumHook
var dataPlatformNumberRangeNumberRangeDatumAfterUpsertHooks []DataPlatformNumberRangeNumberRangeDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformNumberRangeNumberRangeDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeNumberRangeDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformNumberRangeNumberRangeDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeNumberRangeDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformNumberRangeNumberRangeDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeNumberRangeDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformNumberRangeNumberRangeDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeNumberRangeDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformNumberRangeNumberRangeDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeNumberRangeDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformNumberRangeNumberRangeDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeNumberRangeDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformNumberRangeNumberRangeDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeNumberRangeDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformNumberRangeNumberRangeDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeNumberRangeDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformNumberRangeNumberRangeDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeNumberRangeDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformNumberRangeNumberRangeDatumHook registers your hook function for all future operations.
func AddDataPlatformNumberRangeNumberRangeDatumHook(hookPoint boil.HookPoint, dataPlatformNumberRangeNumberRangeDatumHook DataPlatformNumberRangeNumberRangeDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformNumberRangeNumberRangeDatumAfterSelectHooks = append(dataPlatformNumberRangeNumberRangeDatumAfterSelectHooks, dataPlatformNumberRangeNumberRangeDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformNumberRangeNumberRangeDatumBeforeInsertHooks = append(dataPlatformNumberRangeNumberRangeDatumBeforeInsertHooks, dataPlatformNumberRangeNumberRangeDatumHook)
	case boil.AfterInsertHook:
		dataPlatformNumberRangeNumberRangeDatumAfterInsertHooks = append(dataPlatformNumberRangeNumberRangeDatumAfterInsertHooks, dataPlatformNumberRangeNumberRangeDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformNumberRangeNumberRangeDatumBeforeUpdateHooks = append(dataPlatformNumberRangeNumberRangeDatumBeforeUpdateHooks, dataPlatformNumberRangeNumberRangeDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformNumberRangeNumberRangeDatumAfterUpdateHooks = append(dataPlatformNumberRangeNumberRangeDatumAfterUpdateHooks, dataPlatformNumberRangeNumberRangeDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformNumberRangeNumberRangeDatumBeforeDeleteHooks = append(dataPlatformNumberRangeNumberRangeDatumBeforeDeleteHooks, dataPlatformNumberRangeNumberRangeDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformNumberRangeNumberRangeDatumAfterDeleteHooks = append(dataPlatformNumberRangeNumberRangeDatumAfterDeleteHooks, dataPlatformNumberRangeNumberRangeDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformNumberRangeNumberRangeDatumBeforeUpsertHooks = append(dataPlatformNumberRangeNumberRangeDatumBeforeUpsertHooks, dataPlatformNumberRangeNumberRangeDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformNumberRangeNumberRangeDatumAfterUpsertHooks = append(dataPlatformNumberRangeNumberRangeDatumAfterUpsertHooks, dataPlatformNumberRangeNumberRangeDatumHook)
	}
}

// One returns a single dataPlatformNumberRangeNumberRangeDatum record from the query.
func (q dataPlatformNumberRangeNumberRangeDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformNumberRangeNumberRangeDatum, error) {
	o := &DataPlatformNumberRangeNumberRangeDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_number_range_number_range_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformNumberRangeNumberRangeDatum records from the query.
func (q dataPlatformNumberRangeNumberRangeDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformNumberRangeNumberRangeDatumSlice, error) {
	var o []*DataPlatformNumberRangeNumberRangeDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformNumberRangeNumberRangeDatum slice")
	}

	if len(dataPlatformNumberRangeNumberRangeDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformNumberRangeNumberRangeDatum records in the query.
func (q dataPlatformNumberRangeNumberRangeDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_number_range_number_range_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformNumberRangeNumberRangeDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_number_range_number_range_data exists")
	}

	return count > 0, nil
}

// FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData retrieves all the data_platform_number_range_latest_number_datum's DataPlatformNumberRangeLatestNumberData with an executor via FieldNameWithNumberRange column.
func (o *DataPlatformNumberRangeNumberRangeDatum) FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData(mods ...qm.QueryMod) dataPlatformNumberRangeLatestNumberDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_number_range_latest_number_data`.`FieldNameWithNumberRange`=?", o.FieldNameWithNumberRange),
	)

	return DataPlatformNumberRangeLatestNumberData(queryMods...)
}

// LoadFieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformNumberRangeNumberRangeDatumL) LoadFieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformNumberRangeNumberRangeDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformNumberRangeNumberRangeDatum
	var object *DataPlatformNumberRangeNumberRangeDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformNumberRangeNumberRangeDatum.(*DataPlatformNumberRangeNumberRangeDatum)
		if !ok {
			object = new(DataPlatformNumberRangeNumberRangeDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformNumberRangeNumberRangeDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformNumberRangeNumberRangeDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformNumberRangeNumberRangeDatum.(*[]*DataPlatformNumberRangeNumberRangeDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformNumberRangeNumberRangeDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformNumberRangeNumberRangeDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformNumberRangeNumberRangeDatumR{}
		}
		args = append(args, object.FieldNameWithNumberRange)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformNumberRangeNumberRangeDatumR{}
			}

			for _, a := range args {
				if a == obj.FieldNameWithNumberRange {
					continue Outer
				}
			}

			args = append(args, obj.FieldNameWithNumberRange)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_number_range_latest_number_data`),
		qm.WhereIn(`data_platform_number_range_latest_number_data.FieldNameWithNumberRange in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_number_range_latest_number_data")
	}

	var resultSlice []*DataPlatformNumberRangeLatestNumberDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_number_range_latest_number_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_number_range_latest_number_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_number_range_latest_number_data")
	}

	if len(dataPlatformNumberRangeLatestNumberDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformNumberRangeLatestNumberDatumR{}
			}
			foreign.R.FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.FieldNameWithNumberRange == foreign.FieldNameWithNumberRange {
				local.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData = append(local.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformNumberRangeLatestNumberDatumR{}
				}
				foreign.R.FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum = local
				break
			}
		}
	}

	return nil
}

// AddFieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData adds the given related objects to the existing relationships
// of the data_platform_number_range_number_range_datum, optionally inserting them as new records.
// Appends related to o.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData.
// Sets related.R.FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum appropriately.
func (o *DataPlatformNumberRangeNumberRangeDatum) AddFieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformNumberRangeLatestNumberDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FieldNameWithNumberRange = o.FieldNameWithNumberRange
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_number_range_latest_number_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"FieldNameWithNumberRange"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformNumberRangeLatestNumberDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.FieldNameWithNumberRange, rel.NumberRangeID, rel.ServiceLabel, rel.FieldNameWithNumberRange}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FieldNameWithNumberRange = o.FieldNameWithNumberRange
		}
	}

	if o.R == nil {
		o.R = &dataPlatformNumberRangeNumberRangeDatumR{
			FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData: related,
		}
	} else {
		o.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData = append(o.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformNumberRangeLatestNumberDatumR{
				FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum: o,
			}
		} else {
			rel.R.FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum = o
		}
	}
	return nil
}

// DataPlatformNumberRangeNumberRangeData retrieves all the records using an executor.
func DataPlatformNumberRangeNumberRangeData(mods ...qm.QueryMod) dataPlatformNumberRangeNumberRangeDatumQuery {
	mods = append(mods, qm.From("`data_platform_number_range_number_range_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_number_range_number_range_data`.*"})
	}

	return dataPlatformNumberRangeNumberRangeDatumQuery{q}
}

// FindDataPlatformNumberRangeNumberRangeDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformNumberRangeNumberRangeDatum(ctx context.Context, exec boil.ContextExecutor, numberRangeID string, serviceLabel string, fieldNameWithNumberRange string, selectCols ...string) (*DataPlatformNumberRangeNumberRangeDatum, error) {
	dataPlatformNumberRangeNumberRangeDatumObj := &DataPlatformNumberRangeNumberRangeDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_number_range_number_range_data` where `NumberRangeID`=? AND `ServiceLabel`=? AND `FieldNameWithNumberRange`=?", sel,
	)

	q := queries.Raw(query, numberRangeID, serviceLabel, fieldNameWithNumberRange)

	err := q.Bind(ctx, exec, dataPlatformNumberRangeNumberRangeDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_number_range_number_range_data")
	}

	if err = dataPlatformNumberRangeNumberRangeDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformNumberRangeNumberRangeDatumObj, err
	}

	return dataPlatformNumberRangeNumberRangeDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformNumberRangeNumberRangeDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_number_range_number_range_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformNumberRangeNumberRangeDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformNumberRangeNumberRangeDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformNumberRangeNumberRangeDatumInsertCache[key]
	dataPlatformNumberRangeNumberRangeDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformNumberRangeNumberRangeDatumAllColumns,
			dataPlatformNumberRangeNumberRangeDatumColumnsWithDefault,
			dataPlatformNumberRangeNumberRangeDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformNumberRangeNumberRangeDatumType, dataPlatformNumberRangeNumberRangeDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformNumberRangeNumberRangeDatumType, dataPlatformNumberRangeNumberRangeDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_number_range_number_range_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_number_range_number_range_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_number_range_number_range_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformNumberRangeNumberRangeDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_number_range_number_range_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.NumberRangeID,
		o.ServiceLabel,
		o.FieldNameWithNumberRange,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_number_range_number_range_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformNumberRangeNumberRangeDatumInsertCacheMut.Lock()
		dataPlatformNumberRangeNumberRangeDatumInsertCache[key] = cache
		dataPlatformNumberRangeNumberRangeDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformNumberRangeNumberRangeDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformNumberRangeNumberRangeDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformNumberRangeNumberRangeDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformNumberRangeNumberRangeDatumUpdateCache[key]
	dataPlatformNumberRangeNumberRangeDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformNumberRangeNumberRangeDatumAllColumns,
			dataPlatformNumberRangeNumberRangeDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_number_range_number_range_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_number_range_number_range_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformNumberRangeNumberRangeDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformNumberRangeNumberRangeDatumType, dataPlatformNumberRangeNumberRangeDatumMapping, append(wl, dataPlatformNumberRangeNumberRangeDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_number_range_number_range_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_number_range_number_range_data")
	}

	if !cached {
		dataPlatformNumberRangeNumberRangeDatumUpdateCacheMut.Lock()
		dataPlatformNumberRangeNumberRangeDatumUpdateCache[key] = cache
		dataPlatformNumberRangeNumberRangeDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformNumberRangeNumberRangeDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_number_range_number_range_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_number_range_number_range_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformNumberRangeNumberRangeDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformNumberRangeNumberRangeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_number_range_number_range_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformNumberRangeNumberRangeDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformNumberRangeNumberRangeDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformNumberRangeNumberRangeDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformNumberRangeNumberRangeDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformNumberRangeNumberRangeDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_number_range_number_range_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformNumberRangeNumberRangeDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformNumberRangeNumberRangeDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformNumberRangeNumberRangeDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformNumberRangeNumberRangeDatumUpsertCache[key]
	dataPlatformNumberRangeNumberRangeDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformNumberRangeNumberRangeDatumAllColumns,
			dataPlatformNumberRangeNumberRangeDatumColumnsWithDefault,
			dataPlatformNumberRangeNumberRangeDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformNumberRangeNumberRangeDatumAllColumns,
			dataPlatformNumberRangeNumberRangeDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_number_range_number_range_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_number_range_number_range_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_number_range_number_range_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformNumberRangeNumberRangeDatumType, dataPlatformNumberRangeNumberRangeDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformNumberRangeNumberRangeDatumType, dataPlatformNumberRangeNumberRangeDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_number_range_number_range_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformNumberRangeNumberRangeDatumType, dataPlatformNumberRangeNumberRangeDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_number_range_number_range_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_number_range_number_range_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformNumberRangeNumberRangeDatumUpsertCacheMut.Lock()
		dataPlatformNumberRangeNumberRangeDatumUpsertCache[key] = cache
		dataPlatformNumberRangeNumberRangeDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformNumberRangeNumberRangeDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformNumberRangeNumberRangeDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformNumberRangeNumberRangeDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformNumberRangeNumberRangeDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_number_range_number_range_data` WHERE `NumberRangeID`=? AND `ServiceLabel`=? AND `FieldNameWithNumberRange`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_number_range_number_range_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_number_range_number_range_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformNumberRangeNumberRangeDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformNumberRangeNumberRangeDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_number_range_number_range_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_number_range_number_range_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformNumberRangeNumberRangeDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformNumberRangeNumberRangeDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformNumberRangeNumberRangeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_number_range_number_range_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformNumberRangeNumberRangeDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformNumberRangeNumberRangeDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_number_range_number_range_data")
	}

	if len(dataPlatformNumberRangeNumberRangeDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformNumberRangeNumberRangeDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformNumberRangeNumberRangeDatum(ctx, exec, o.NumberRangeID, o.ServiceLabel, o.FieldNameWithNumberRange)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformNumberRangeNumberRangeDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformNumberRangeNumberRangeDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformNumberRangeNumberRangeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_number_range_number_range_data`.* FROM `data_platform_number_range_number_range_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformNumberRangeNumberRangeDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformNumberRangeNumberRangeDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformNumberRangeNumberRangeDatumExists checks if the DataPlatformNumberRangeNumberRangeDatum row exists.
func DataPlatformNumberRangeNumberRangeDatumExists(ctx context.Context, exec boil.ContextExecutor, numberRangeID string, serviceLabel string, fieldNameWithNumberRange string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_number_range_number_range_data` where `NumberRangeID`=? AND `ServiceLabel`=? AND `FieldNameWithNumberRange`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, numberRangeID, serviceLabel, fieldNameWithNumberRange)
	}
	row := exec.QueryRowContext(ctx, sql, numberRangeID, serviceLabel, fieldNameWithNumberRange)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_number_range_number_range_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformNumberRangeNumberRangeDatum row exists.
func (o *DataPlatformNumberRangeNumberRangeDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformNumberRangeNumberRangeDatumExists(ctx, exec, o.NumberRangeID, o.ServiceLabel, o.FieldNameWithNumberRange)
}
