// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformOperationsItemOperationComponentDatum is an object representing the database table.
type DataPlatformOperationsItemOperationComponentDatum struct {
	Operations                                      int          `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	OperationsItem                                  int          `boil:"OperationsItem" json:"OperationsItem" toml:"OperationsItem" yaml:"OperationsItem"`
	OperationID                                     int          `boil:"OperationID" json:"OperationID" toml:"OperationID" yaml:"OperationID"`
	BillOfMaterial                                  int          `boil:"BillOfMaterial" json:"BillOfMaterial" toml:"BillOfMaterial" yaml:"BillOfMaterial"`
	BillOfMaterialItem                              int          `boil:"BillOfMaterialItem" json:"BillOfMaterialItem" toml:"BillOfMaterialItem" yaml:"BillOfMaterialItem"`
	SupplyChainRelationshipID                       int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID               int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID          int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipStockConfPlantID         int          `boil:"SupplyChainRelationshipStockConfPlantID" json:"SupplyChainRelationshipStockConfPlantID" toml:"SupplyChainRelationshipStockConfPlantID" yaml:"SupplyChainRelationshipStockConfPlantID"`
	ProductionPlantBusinessPartner                  int          `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner"`
	ProductionPlant                                 string       `boil:"ProductionPlant" json:"ProductionPlant" toml:"ProductionPlant" yaml:"ProductionPlant"`
	ComponentProduct                                string       `boil:"ComponentProduct" json:"ComponentProduct" toml:"ComponentProduct" yaml:"ComponentProduct"`
	ComponentProductBuyer                           int          `boil:"ComponentProductBuyer" json:"ComponentProductBuyer" toml:"ComponentProductBuyer" yaml:"ComponentProductBuyer"`
	ComponentProductSeller                          int          `boil:"ComponentProductSeller" json:"ComponentProductSeller" toml:"ComponentProductSeller" yaml:"ComponentProductSeller"`
	ComponentProductDeliverFromParty                int          `boil:"ComponentProductDeliverFromParty" json:"ComponentProductDeliverFromParty" toml:"ComponentProductDeliverFromParty" yaml:"ComponentProductDeliverFromParty"`
	ComponentProductDeliverFromPlant                string       `boil:"ComponentProductDeliverFromPlant" json:"ComponentProductDeliverFromPlant" toml:"ComponentProductDeliverFromPlant" yaml:"ComponentProductDeliverFromPlant"`
	ComponentProductDeliverToParty                  int          `boil:"ComponentProductDeliverToParty" json:"ComponentProductDeliverToParty" toml:"ComponentProductDeliverToParty" yaml:"ComponentProductDeliverToParty"`
	ComponentProductDeliverToPlant                  string       `boil:"ComponentProductDeliverToPlant" json:"ComponentProductDeliverToPlant" toml:"ComponentProductDeliverToPlant" yaml:"ComponentProductDeliverToPlant"`
	ComponentProductStandardQuantityInBaseUnuit     float32      `boil:"ComponentProductStandardQuantityInBaseUnuit" json:"ComponentProductStandardQuantityInBaseUnuit" toml:"ComponentProductStandardQuantityInBaseUnuit" yaml:"ComponentProductStandardQuantityInBaseUnuit"`
	ComponentProductStandardQuantityInDeliveryUnuit float32      `boil:"ComponentProductStandardQuantityInDeliveryUnuit" json:"ComponentProductStandardQuantityInDeliveryUnuit" toml:"ComponentProductStandardQuantityInDeliveryUnuit" yaml:"ComponentProductStandardQuantityInDeliveryUnuit"`
	ComponentProductStandardScrapInPercent          null.Float32 `boil:"ComponentProductStandardScrapInPercent" json:"ComponentProductStandardScrapInPercent,omitempty" toml:"ComponentProductStandardScrapInPercent" yaml:"ComponentProductStandardScrapInPercent,omitempty"`
	ComponentProductBaseUnit                        string       `boil:"ComponentProductBaseUnit" json:"ComponentProductBaseUnit" toml:"ComponentProductBaseUnit" yaml:"ComponentProductBaseUnit"`
	ComponentProductDeliveryUnit                    string       `boil:"ComponentProductDeliveryUnit" json:"ComponentProductDeliveryUnit" toml:"ComponentProductDeliveryUnit" yaml:"ComponentProductDeliveryUnit"`
	StockConfirmationBusinessPartner                int          `boil:"StockConfirmationBusinessPartner" json:"StockConfirmationBusinessPartner" toml:"StockConfirmationBusinessPartner" yaml:"StockConfirmationBusinessPartner"`
	StockConfirmationPlant                          string       `boil:"StockConfirmationPlant" json:"StockConfirmationPlant" toml:"StockConfirmationPlant" yaml:"StockConfirmationPlant"`
	IsMarkedForBackflush                            null.Bool    `boil:"IsMarkedForBackflush" json:"IsMarkedForBackflush,omitempty" toml:"IsMarkedForBackflush" yaml:"IsMarkedForBackflush,omitempty"`
	ValidityStartDate                               null.String  `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate                                 null.String  `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	CreationDate                                    string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                                  string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                             null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformOperationsItemOperationComponentDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformOperationsItemOperationComponentDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformOperationsItemOperationComponentDatumColumns = struct {
	Operations                                      string
	OperationsItem                                  string
	OperationID                                     string
	BillOfMaterial                                  string
	BillOfMaterialItem                              string
	SupplyChainRelationshipID                       string
	SupplyChainRelationshipDeliveryID               string
	SupplyChainRelationshipDeliveryPlantID          string
	SupplyChainRelationshipStockConfPlantID         string
	ProductionPlantBusinessPartner                  string
	ProductionPlant                                 string
	ComponentProduct                                string
	ComponentProductBuyer                           string
	ComponentProductSeller                          string
	ComponentProductDeliverFromParty                string
	ComponentProductDeliverFromPlant                string
	ComponentProductDeliverToParty                  string
	ComponentProductDeliverToPlant                  string
	ComponentProductStandardQuantityInBaseUnuit     string
	ComponentProductStandardQuantityInDeliveryUnuit string
	ComponentProductStandardScrapInPercent          string
	ComponentProductBaseUnit                        string
	ComponentProductDeliveryUnit                    string
	StockConfirmationBusinessPartner                string
	StockConfirmationPlant                          string
	IsMarkedForBackflush                            string
	ValidityStartDate                               string
	ValidityEndDate                                 string
	CreationDate                                    string
	LastChangeDate                                  string
	IsMarkedForDeletion                             string
}{
	Operations:                                      "Operations",
	OperationsItem:                                  "OperationsItem",
	OperationID:                                     "OperationID",
	BillOfMaterial:                                  "BillOfMaterial",
	BillOfMaterialItem:                              "BillOfMaterialItem",
	SupplyChainRelationshipID:                       "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:               "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:          "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipStockConfPlantID:         "SupplyChainRelationshipStockConfPlantID",
	ProductionPlantBusinessPartner:                  "ProductionPlantBusinessPartner",
	ProductionPlant:                                 "ProductionPlant",
	ComponentProduct:                                "ComponentProduct",
	ComponentProductBuyer:                           "ComponentProductBuyer",
	ComponentProductSeller:                          "ComponentProductSeller",
	ComponentProductDeliverFromParty:                "ComponentProductDeliverFromParty",
	ComponentProductDeliverFromPlant:                "ComponentProductDeliverFromPlant",
	ComponentProductDeliverToParty:                  "ComponentProductDeliverToParty",
	ComponentProductDeliverToPlant:                  "ComponentProductDeliverToPlant",
	ComponentProductStandardQuantityInBaseUnuit:     "ComponentProductStandardQuantityInBaseUnuit",
	ComponentProductStandardQuantityInDeliveryUnuit: "ComponentProductStandardQuantityInDeliveryUnuit",
	ComponentProductStandardScrapInPercent:          "ComponentProductStandardScrapInPercent",
	ComponentProductBaseUnit:                        "ComponentProductBaseUnit",
	ComponentProductDeliveryUnit:                    "ComponentProductDeliveryUnit",
	StockConfirmationBusinessPartner:                "StockConfirmationBusinessPartner",
	StockConfirmationPlant:                          "StockConfirmationPlant",
	IsMarkedForBackflush:                            "IsMarkedForBackflush",
	ValidityStartDate:                               "ValidityStartDate",
	ValidityEndDate:                                 "ValidityEndDate",
	CreationDate:                                    "CreationDate",
	LastChangeDate:                                  "LastChangeDate",
	IsMarkedForDeletion:                             "IsMarkedForDeletion",
}

var DataPlatformOperationsItemOperationComponentDatumTableColumns = struct {
	Operations                                      string
	OperationsItem                                  string
	OperationID                                     string
	BillOfMaterial                                  string
	BillOfMaterialItem                              string
	SupplyChainRelationshipID                       string
	SupplyChainRelationshipDeliveryID               string
	SupplyChainRelationshipDeliveryPlantID          string
	SupplyChainRelationshipStockConfPlantID         string
	ProductionPlantBusinessPartner                  string
	ProductionPlant                                 string
	ComponentProduct                                string
	ComponentProductBuyer                           string
	ComponentProductSeller                          string
	ComponentProductDeliverFromParty                string
	ComponentProductDeliverFromPlant                string
	ComponentProductDeliverToParty                  string
	ComponentProductDeliverToPlant                  string
	ComponentProductStandardQuantityInBaseUnuit     string
	ComponentProductStandardQuantityInDeliveryUnuit string
	ComponentProductStandardScrapInPercent          string
	ComponentProductBaseUnit                        string
	ComponentProductDeliveryUnit                    string
	StockConfirmationBusinessPartner                string
	StockConfirmationPlant                          string
	IsMarkedForBackflush                            string
	ValidityStartDate                               string
	ValidityEndDate                                 string
	CreationDate                                    string
	LastChangeDate                                  string
	IsMarkedForDeletion                             string
}{
	Operations:                                      "data_platform_operations_item_operation_component_data.Operations",
	OperationsItem:                                  "data_platform_operations_item_operation_component_data.OperationsItem",
	OperationID:                                     "data_platform_operations_item_operation_component_data.OperationID",
	BillOfMaterial:                                  "data_platform_operations_item_operation_component_data.BillOfMaterial",
	BillOfMaterialItem:                              "data_platform_operations_item_operation_component_data.BillOfMaterialItem",
	SupplyChainRelationshipID:                       "data_platform_operations_item_operation_component_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:               "data_platform_operations_item_operation_component_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:          "data_platform_operations_item_operation_component_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipStockConfPlantID:         "data_platform_operations_item_operation_component_data.SupplyChainRelationshipStockConfPlantID",
	ProductionPlantBusinessPartner:                  "data_platform_operations_item_operation_component_data.ProductionPlantBusinessPartner",
	ProductionPlant:                                 "data_platform_operations_item_operation_component_data.ProductionPlant",
	ComponentProduct:                                "data_platform_operations_item_operation_component_data.ComponentProduct",
	ComponentProductBuyer:                           "data_platform_operations_item_operation_component_data.ComponentProductBuyer",
	ComponentProductSeller:                          "data_platform_operations_item_operation_component_data.ComponentProductSeller",
	ComponentProductDeliverFromParty:                "data_platform_operations_item_operation_component_data.ComponentProductDeliverFromParty",
	ComponentProductDeliverFromPlant:                "data_platform_operations_item_operation_component_data.ComponentProductDeliverFromPlant",
	ComponentProductDeliverToParty:                  "data_platform_operations_item_operation_component_data.ComponentProductDeliverToParty",
	ComponentProductDeliverToPlant:                  "data_platform_operations_item_operation_component_data.ComponentProductDeliverToPlant",
	ComponentProductStandardQuantityInBaseUnuit:     "data_platform_operations_item_operation_component_data.ComponentProductStandardQuantityInBaseUnuit",
	ComponentProductStandardQuantityInDeliveryUnuit: "data_platform_operations_item_operation_component_data.ComponentProductStandardQuantityInDeliveryUnuit",
	ComponentProductStandardScrapInPercent:          "data_platform_operations_item_operation_component_data.ComponentProductStandardScrapInPercent",
	ComponentProductBaseUnit:                        "data_platform_operations_item_operation_component_data.ComponentProductBaseUnit",
	ComponentProductDeliveryUnit:                    "data_platform_operations_item_operation_component_data.ComponentProductDeliveryUnit",
	StockConfirmationBusinessPartner:                "data_platform_operations_item_operation_component_data.StockConfirmationBusinessPartner",
	StockConfirmationPlant:                          "data_platform_operations_item_operation_component_data.StockConfirmationPlant",
	IsMarkedForBackflush:                            "data_platform_operations_item_operation_component_data.IsMarkedForBackflush",
	ValidityStartDate:                               "data_platform_operations_item_operation_component_data.ValidityStartDate",
	ValidityEndDate:                                 "data_platform_operations_item_operation_component_data.ValidityEndDate",
	CreationDate:                                    "data_platform_operations_item_operation_component_data.CreationDate",
	LastChangeDate:                                  "data_platform_operations_item_operation_component_data.LastChangeDate",
	IsMarkedForDeletion:                             "data_platform_operations_item_operation_component_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformOperationsItemOperationComponentDatumWhere = struct {
	Operations                                      whereHelperint
	OperationsItem                                  whereHelperint
	OperationID                                     whereHelperint
	BillOfMaterial                                  whereHelperint
	BillOfMaterialItem                              whereHelperint
	SupplyChainRelationshipID                       whereHelperint
	SupplyChainRelationshipDeliveryID               whereHelperint
	SupplyChainRelationshipDeliveryPlantID          whereHelperint
	SupplyChainRelationshipStockConfPlantID         whereHelperint
	ProductionPlantBusinessPartner                  whereHelperint
	ProductionPlant                                 whereHelperstring
	ComponentProduct                                whereHelperstring
	ComponentProductBuyer                           whereHelperint
	ComponentProductSeller                          whereHelperint
	ComponentProductDeliverFromParty                whereHelperint
	ComponentProductDeliverFromPlant                whereHelperstring
	ComponentProductDeliverToParty                  whereHelperint
	ComponentProductDeliverToPlant                  whereHelperstring
	ComponentProductStandardQuantityInBaseUnuit     whereHelperfloat32
	ComponentProductStandardQuantityInDeliveryUnuit whereHelperfloat32
	ComponentProductStandardScrapInPercent          whereHelpernull_Float32
	ComponentProductBaseUnit                        whereHelperstring
	ComponentProductDeliveryUnit                    whereHelperstring
	StockConfirmationBusinessPartner                whereHelperint
	StockConfirmationPlant                          whereHelperstring
	IsMarkedForBackflush                            whereHelpernull_Bool
	ValidityStartDate                               whereHelpernull_String
	ValidityEndDate                                 whereHelpernull_String
	CreationDate                                    whereHelperstring
	LastChangeDate                                  whereHelperstring
	IsMarkedForDeletion                             whereHelpernull_Bool
}{
	Operations:                                      whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`Operations`"},
	OperationsItem:                                  whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`OperationsItem`"},
	OperationID:                                     whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`OperationID`"},
	BillOfMaterial:                                  whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`BillOfMaterial`"},
	BillOfMaterialItem:                              whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`BillOfMaterialItem`"},
	SupplyChainRelationshipID:                       whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:               whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:          whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipStockConfPlantID:         whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`SupplyChainRelationshipStockConfPlantID`"},
	ProductionPlantBusinessPartner:                  whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                                 whereHelperstring{field: "`data_platform_operations_item_operation_component_data`.`ProductionPlant`"},
	ComponentProduct:                                whereHelperstring{field: "`data_platform_operations_item_operation_component_data`.`ComponentProduct`"},
	ComponentProductBuyer:                           whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`ComponentProductBuyer`"},
	ComponentProductSeller:                          whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`ComponentProductSeller`"},
	ComponentProductDeliverFromParty:                whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`ComponentProductDeliverFromParty`"},
	ComponentProductDeliverFromPlant:                whereHelperstring{field: "`data_platform_operations_item_operation_component_data`.`ComponentProductDeliverFromPlant`"},
	ComponentProductDeliverToParty:                  whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`ComponentProductDeliverToParty`"},
	ComponentProductDeliverToPlant:                  whereHelperstring{field: "`data_platform_operations_item_operation_component_data`.`ComponentProductDeliverToPlant`"},
	ComponentProductStandardQuantityInBaseUnuit:     whereHelperfloat32{field: "`data_platform_operations_item_operation_component_data`.`ComponentProductStandardQuantityInBaseUnuit`"},
	ComponentProductStandardQuantityInDeliveryUnuit: whereHelperfloat32{field: "`data_platform_operations_item_operation_component_data`.`ComponentProductStandardQuantityInDeliveryUnuit`"},
	ComponentProductStandardScrapInPercent:          whereHelpernull_Float32{field: "`data_platform_operations_item_operation_component_data`.`ComponentProductStandardScrapInPercent`"},
	ComponentProductBaseUnit:                        whereHelperstring{field: "`data_platform_operations_item_operation_component_data`.`ComponentProductBaseUnit`"},
	ComponentProductDeliveryUnit:                    whereHelperstring{field: "`data_platform_operations_item_operation_component_data`.`ComponentProductDeliveryUnit`"},
	StockConfirmationBusinessPartner:                whereHelperint{field: "`data_platform_operations_item_operation_component_data`.`StockConfirmationBusinessPartner`"},
	StockConfirmationPlant:                          whereHelperstring{field: "`data_platform_operations_item_operation_component_data`.`StockConfirmationPlant`"},
	IsMarkedForBackflush:                            whereHelpernull_Bool{field: "`data_platform_operations_item_operation_component_data`.`IsMarkedForBackflush`"},
	ValidityStartDate:                               whereHelpernull_String{field: "`data_platform_operations_item_operation_component_data`.`ValidityStartDate`"},
	ValidityEndDate:                                 whereHelpernull_String{field: "`data_platform_operations_item_operation_component_data`.`ValidityEndDate`"},
	CreationDate:                                    whereHelperstring{field: "`data_platform_operations_item_operation_component_data`.`CreationDate`"},
	LastChangeDate:                                  whereHelperstring{field: "`data_platform_operations_item_operation_component_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                             whereHelpernull_Bool{field: "`data_platform_operations_item_operation_component_data`.`IsMarkedForDeletion`"},
}

// DataPlatformOperationsItemOperationComponentDatumRels is where relationship names are stored.
var DataPlatformOperationsItemOperationComponentDatumRels = struct {
	BillOfMaterialDataPlatformBillOfMaterialItemDatum         string
	ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum string
	ComponentProductBuyerDataPlatformSCRGeneralDatum          string
	OperationIDDataPlatformOperationsItemOperationDatum       string
}{
	BillOfMaterialDataPlatformBillOfMaterialItemDatum:         "BillOfMaterialDataPlatformBillOfMaterialItemDatum",
	ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum: "ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum",
	ComponentProductBuyerDataPlatformSCRGeneralDatum:          "ComponentProductBuyerDataPlatformSCRGeneralDatum",
	OperationIDDataPlatformOperationsItemOperationDatum:       "OperationIDDataPlatformOperationsItemOperationDatum",
}

// dataPlatformOperationsItemOperationComponentDatumR is where relationships are stored.
type dataPlatformOperationsItemOperationComponentDatumR struct {
	BillOfMaterialDataPlatformBillOfMaterialItemDatum         *DataPlatformBillOfMaterialItemDatum      `boil:"BillOfMaterialDataPlatformBillOfMaterialItemDatum" json:"BillOfMaterialDataPlatformBillOfMaterialItemDatum" toml:"BillOfMaterialDataPlatformBillOfMaterialItemDatum" yaml:"BillOfMaterialDataPlatformBillOfMaterialItemDatum"`
	ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum *DataPlatformSCRDeliveryRelationDatum     `boil:"ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum" json:"ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum" toml:"ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum" yaml:"ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum"`
	ComponentProductBuyerDataPlatformSCRGeneralDatum          *DataPlatformSCRGeneralDatum              `boil:"ComponentProductBuyerDataPlatformSCRGeneralDatum" json:"ComponentProductBuyerDataPlatformSCRGeneralDatum" toml:"ComponentProductBuyerDataPlatformSCRGeneralDatum" yaml:"ComponentProductBuyerDataPlatformSCRGeneralDatum"`
	OperationIDDataPlatformOperationsItemOperationDatum       *DataPlatformOperationsItemOperationDatum `boil:"OperationIDDataPlatformOperationsItemOperationDatum" json:"OperationIDDataPlatformOperationsItemOperationDatum" toml:"OperationIDDataPlatformOperationsItemOperationDatum" yaml:"OperationIDDataPlatformOperationsItemOperationDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformOperationsItemOperationComponentDatumR) NewStruct() *dataPlatformOperationsItemOperationComponentDatumR {
	return &dataPlatformOperationsItemOperationComponentDatumR{}
}

func (r *dataPlatformOperationsItemOperationComponentDatumR) GetBillOfMaterialDataPlatformBillOfMaterialItemDatum() *DataPlatformBillOfMaterialItemDatum {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformBillOfMaterialItemDatum
}

func (r *dataPlatformOperationsItemOperationComponentDatumR) GetComponentProductBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformOperationsItemOperationComponentDatumR) GetComponentProductBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformOperationsItemOperationComponentDatumR) GetOperationIDDataPlatformOperationsItemOperationDatum() *DataPlatformOperationsItemOperationDatum {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformOperationsItemOperationDatum
}

// dataPlatformOperationsItemOperationComponentDatumL is where Load methods for each relationship are stored.
type dataPlatformOperationsItemOperationComponentDatumL struct{}

var (
	dataPlatformOperationsItemOperationComponentDatumAllColumns            = []string{"Operations", "OperationsItem", "OperationID", "BillOfMaterial", "BillOfMaterialItem", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipStockConfPlantID", "ProductionPlantBusinessPartner", "ProductionPlant", "ComponentProduct", "ComponentProductBuyer", "ComponentProductSeller", "ComponentProductDeliverFromParty", "ComponentProductDeliverFromPlant", "ComponentProductDeliverToParty", "ComponentProductDeliverToPlant", "ComponentProductStandardQuantityInBaseUnuit", "ComponentProductStandardQuantityInDeliveryUnuit", "ComponentProductStandardScrapInPercent", "ComponentProductBaseUnit", "ComponentProductDeliveryUnit", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "IsMarkedForBackflush", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformOperationsItemOperationComponentDatumColumnsWithoutDefault = []string{"Operations", "OperationsItem", "OperationID", "BillOfMaterial", "BillOfMaterialItem", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipStockConfPlantID", "ProductionPlantBusinessPartner", "ProductionPlant", "ComponentProduct", "ComponentProductBuyer", "ComponentProductSeller", "ComponentProductDeliverFromParty", "ComponentProductDeliverFromPlant", "ComponentProductDeliverToParty", "ComponentProductDeliverToPlant", "ComponentProductStandardQuantityInBaseUnuit", "ComponentProductStandardQuantityInDeliveryUnuit", "ComponentProductStandardScrapInPercent", "ComponentProductBaseUnit", "ComponentProductDeliveryUnit", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "IsMarkedForBackflush", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformOperationsItemOperationComponentDatumColumnsWithDefault    = []string{}
	dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns     = []string{"Operations", "OperationsItem", "OperationID", "BillOfMaterial", "BillOfMaterialItem"}
	dataPlatformOperationsItemOperationComponentDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformOperationsItemOperationComponentDatumSlice is an alias for a slice of pointers to DataPlatformOperationsItemOperationComponentDatum.
	// This should almost always be used instead of []DataPlatformOperationsItemOperationComponentDatum.
	DataPlatformOperationsItemOperationComponentDatumSlice []*DataPlatformOperationsItemOperationComponentDatum

	dataPlatformOperationsItemOperationComponentDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformOperationsItemOperationComponentDatumType                 = reflect.TypeOf(&DataPlatformOperationsItemOperationComponentDatum{})
	dataPlatformOperationsItemOperationComponentDatumMapping              = queries.MakeStructMapping(dataPlatformOperationsItemOperationComponentDatumType)
	dataPlatformOperationsItemOperationComponentDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformOperationsItemOperationComponentDatumType, dataPlatformOperationsItemOperationComponentDatumMapping, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns)
	dataPlatformOperationsItemOperationComponentDatumInsertCacheMut       sync.RWMutex
	dataPlatformOperationsItemOperationComponentDatumInsertCache          = make(map[string]insertCache)
	dataPlatformOperationsItemOperationComponentDatumUpdateCacheMut       sync.RWMutex
	dataPlatformOperationsItemOperationComponentDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformOperationsItemOperationComponentDatumUpsertCacheMut       sync.RWMutex
	dataPlatformOperationsItemOperationComponentDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformOperationsItemOperationComponentDatum record from the query.
func (q dataPlatformOperationsItemOperationComponentDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformOperationsItemOperationComponentDatum, error) {
	o := &DataPlatformOperationsItemOperationComponentDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_operations_item_operation_component_data")
	}

	return o, nil
}

// All returns all DataPlatformOperationsItemOperationComponentDatum records from the query.
func (q dataPlatformOperationsItemOperationComponentDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformOperationsItemOperationComponentDatumSlice, error) {
	var o []*DataPlatformOperationsItemOperationComponentDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformOperationsItemOperationComponentDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformOperationsItemOperationComponentDatum records in the query.
func (q dataPlatformOperationsItemOperationComponentDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_operations_item_operation_component_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformOperationsItemOperationComponentDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_operations_item_operation_component_data exists")
	}

	return count > 0, nil
}

// BillOfMaterialDataPlatformBillOfMaterialItemDatum pointed to by the foreign key.
func (o *DataPlatformOperationsItemOperationComponentDatum) BillOfMaterialDataPlatformBillOfMaterialItemDatum(mods ...qm.QueryMod) dataPlatformBillOfMaterialItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillOfMaterial` = ?", o.BillOfMaterial),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBillOfMaterialItemData(queryMods...)
}

// ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformOperationsItemOperationComponentDatum) ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.ComponentProductBuyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// ComponentProductBuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformOperationsItemOperationComponentDatum) ComponentProductBuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.ComponentProductBuyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// OperationIDDataPlatformOperationsItemOperationDatum pointed to by the foreign key.
func (o *DataPlatformOperationsItemOperationComponentDatum) OperationIDDataPlatformOperationsItemOperationDatum(mods ...qm.QueryMod) dataPlatformOperationsItemOperationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OperationID` = ?", o.OperationID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOperationsItemOperationData(queryMods...)
}

// LoadBillOfMaterialDataPlatformBillOfMaterialItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsItemOperationComponentDatumL) LoadBillOfMaterialDataPlatformBillOfMaterialItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsItemOperationComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsItemOperationComponentDatum
	var object *DataPlatformOperationsItemOperationComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsItemOperationComponentDatum.(*DataPlatformOperationsItemOperationComponentDatum)
		if !ok {
			object = new(DataPlatformOperationsItemOperationComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsItemOperationComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsItemOperationComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsItemOperationComponentDatum.(*[]*DataPlatformOperationsItemOperationComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsItemOperationComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsItemOperationComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsItemOperationComponentDatumR{}
		}
		args = append(args, object.BillOfMaterial)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsItemOperationComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.BillOfMaterial {
					continue Outer
				}
			}

			args = append(args, obj.BillOfMaterial)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_item_data`),
		qm.WhereIn(`data_platform_bill_of_material_item_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBillOfMaterialItemDatum")
	}

	var resultSlice []*DataPlatformBillOfMaterialItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBillOfMaterialItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_bill_of_material_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillOfMaterial == foreign.BillOfMaterial {
				local.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsItemOperationComponentDatumL) LoadComponentProductBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsItemOperationComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsItemOperationComponentDatum
	var object *DataPlatformOperationsItemOperationComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsItemOperationComponentDatum.(*DataPlatformOperationsItemOperationComponentDatum)
		if !ok {
			object = new(DataPlatformOperationsItemOperationComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsItemOperationComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsItemOperationComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsItemOperationComponentDatum.(*[]*DataPlatformOperationsItemOperationComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsItemOperationComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsItemOperationComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsItemOperationComponentDatumR{}
		}
		args = append(args, object.ComponentProductBuyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsItemOperationComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.ComponentProductBuyer {
					continue Outer
				}
			}

			args = append(args, obj.ComponentProductBuyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentProductBuyer == foreign.Buyer {
				local.R.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsItemOperationComponentDatumL) LoadComponentProductBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsItemOperationComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsItemOperationComponentDatum
	var object *DataPlatformOperationsItemOperationComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsItemOperationComponentDatum.(*DataPlatformOperationsItemOperationComponentDatum)
		if !ok {
			object = new(DataPlatformOperationsItemOperationComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsItemOperationComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsItemOperationComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsItemOperationComponentDatum.(*[]*DataPlatformOperationsItemOperationComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsItemOperationComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsItemOperationComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsItemOperationComponentDatumR{}
		}
		args = append(args, object.ComponentProductBuyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsItemOperationComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.ComponentProductBuyer {
					continue Outer
				}
			}

			args = append(args, obj.ComponentProductBuyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ComponentProductBuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ComponentProductBuyer == foreign.Buyer {
				local.R.ComponentProductBuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformOperationsItemOperationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsItemOperationComponentDatumL) LoadOperationIDDataPlatformOperationsItemOperationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsItemOperationComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsItemOperationComponentDatum
	var object *DataPlatformOperationsItemOperationComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsItemOperationComponentDatum.(*DataPlatformOperationsItemOperationComponentDatum)
		if !ok {
			object = new(DataPlatformOperationsItemOperationComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsItemOperationComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsItemOperationComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsItemOperationComponentDatum.(*[]*DataPlatformOperationsItemOperationComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsItemOperationComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsItemOperationComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsItemOperationComponentDatumR{}
		}
		args = append(args, object.OperationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsItemOperationComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.OperationID {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_operation_data`),
		qm.WhereIn(`data_platform_operations_item_operation_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOperationsItemOperationDatum")
	}

	var resultSlice []*DataPlatformOperationsItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOperationsItemOperationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_operations_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_operation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OperationIDDataPlatformOperationsItemOperationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OperationID == foreign.OperationID {
				local.R.OperationIDDataPlatformOperationsItemOperationDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetBillOfMaterialDataPlatformBillOfMaterialItemDatum of the dataPlatformOperationsItemOperationComponentDatum to the related item.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum to related.
func (o *DataPlatformOperationsItemOperationComponentDatum) SetBillOfMaterialDataPlatformBillOfMaterialItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBillOfMaterialItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_item_operation_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillOfMaterial, o.Operations, o.OperationsItem, o.OperationID, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillOfMaterial = related.BillOfMaterial
	if o.R == nil {
		o.R = &dataPlatformOperationsItemOperationComponentDatumR{
			BillOfMaterialDataPlatformBillOfMaterialItemDatum: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformBillOfMaterialItemDatum = related
	}

	return nil
}

// SetComponentProductBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformOperationsItemOperationComponentDatum to the related item.
// Sets o.R.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformOperationsItemOperationComponentDatum) SetComponentProductBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_item_operation_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Operations, o.OperationsItem, o.OperationID, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentProductBuyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformOperationsItemOperationComponentDatumR{
			ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetComponentProductBuyerDataPlatformSCRGeneralDatum of the dataPlatformOperationsItemOperationComponentDatum to the related item.
// Sets o.R.ComponentProductBuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformOperationsItemOperationComponentDatum) SetComponentProductBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_item_operation_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Operations, o.OperationsItem, o.OperationID, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ComponentProductBuyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformOperationsItemOperationComponentDatumR{
			ComponentProductBuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// SetOperationIDDataPlatformOperationsItemOperationDatum of the dataPlatformOperationsItemOperationComponentDatum to the related item.
// Sets o.R.OperationIDDataPlatformOperationsItemOperationDatum to related.
func (o *DataPlatformOperationsItemOperationComponentDatum) SetOperationIDDataPlatformOperationsItemOperationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOperationsItemOperationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_item_operation_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OperationID, o.Operations, o.OperationsItem, o.OperationID, o.BillOfMaterial, o.BillOfMaterialItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OperationID = related.OperationID
	if o.R == nil {
		o.R = &dataPlatformOperationsItemOperationComponentDatumR{
			OperationIDDataPlatformOperationsItemOperationDatum: related,
		}
	} else {
		o.R.OperationIDDataPlatformOperationsItemOperationDatum = related
	}

	return nil
}

// DataPlatformOperationsItemOperationComponentData retrieves all the records using an executor.
func DataPlatformOperationsItemOperationComponentData(mods ...qm.QueryMod) dataPlatformOperationsItemOperationComponentDatumQuery {
	mods = append(mods, qm.From("`data_platform_operations_item_operation_component_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_operations_item_operation_component_data`.*"})
	}

	return dataPlatformOperationsItemOperationComponentDatumQuery{q}
}

// FindDataPlatformOperationsItemOperationComponentDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformOperationsItemOperationComponentDatum(ctx context.Context, exec boil.ContextExecutor, operations int, operationsItem int, operationID int, billOfMaterial int, billOfMaterialItem int, selectCols ...string) (*DataPlatformOperationsItemOperationComponentDatum, error) {
	dataPlatformOperationsItemOperationComponentDatumObj := &DataPlatformOperationsItemOperationComponentDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_operations_item_operation_component_data` where `Operations`=? AND `OperationsItem`=? AND `OperationID`=? AND `BillOfMaterial`=? AND `BillOfMaterialItem`=?", sel,
	)

	q := queries.Raw(query, operations, operationsItem, operationID, billOfMaterial, billOfMaterialItem)

	err := q.Bind(ctx, exec, dataPlatformOperationsItemOperationComponentDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_operations_item_operation_component_data")
	}

	return dataPlatformOperationsItemOperationComponentDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformOperationsItemOperationComponentDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_operations_item_operation_component_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOperationsItemOperationComponentDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformOperationsItemOperationComponentDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformOperationsItemOperationComponentDatumInsertCache[key]
	dataPlatformOperationsItemOperationComponentDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformOperationsItemOperationComponentDatumAllColumns,
			dataPlatformOperationsItemOperationComponentDatumColumnsWithDefault,
			dataPlatformOperationsItemOperationComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOperationsItemOperationComponentDatumType, dataPlatformOperationsItemOperationComponentDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformOperationsItemOperationComponentDatumType, dataPlatformOperationsItemOperationComponentDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_operations_item_operation_component_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_operations_item_operation_component_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_operations_item_operation_component_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_operations_item_operation_component_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Operations,
		o.OperationsItem,
		o.OperationID,
		o.BillOfMaterial,
		o.BillOfMaterialItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_operations_item_operation_component_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOperationsItemOperationComponentDatumInsertCacheMut.Lock()
		dataPlatformOperationsItemOperationComponentDatumInsertCache[key] = cache
		dataPlatformOperationsItemOperationComponentDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformOperationsItemOperationComponentDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformOperationsItemOperationComponentDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformOperationsItemOperationComponentDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformOperationsItemOperationComponentDatumUpdateCache[key]
	dataPlatformOperationsItemOperationComponentDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformOperationsItemOperationComponentDatumAllColumns,
			dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_operations_item_operation_component_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_operations_item_operation_component_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformOperationsItemOperationComponentDatumType, dataPlatformOperationsItemOperationComponentDatumMapping, append(wl, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_operations_item_operation_component_data row")
	}

	if !cached {
		dataPlatformOperationsItemOperationComponentDatumUpdateCacheMut.Lock()
		dataPlatformOperationsItemOperationComponentDatumUpdateCache[key] = cache
		dataPlatformOperationsItemOperationComponentDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformOperationsItemOperationComponentDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_operations_item_operation_component_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformOperationsItemOperationComponentDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOperationsItemOperationComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_operations_item_operation_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformOperationsItemOperationComponentDatum slice")
	}

	return nil
}

var mySQLDataPlatformOperationsItemOperationComponentDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformOperationsItemOperationComponentDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_operations_item_operation_component_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOperationsItemOperationComponentDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformOperationsItemOperationComponentDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformOperationsItemOperationComponentDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformOperationsItemOperationComponentDatumUpsertCache[key]
	dataPlatformOperationsItemOperationComponentDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformOperationsItemOperationComponentDatumAllColumns,
			dataPlatformOperationsItemOperationComponentDatumColumnsWithDefault,
			dataPlatformOperationsItemOperationComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformOperationsItemOperationComponentDatumAllColumns,
			dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_operations_item_operation_component_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_operations_item_operation_component_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_operations_item_operation_component_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOperationsItemOperationComponentDatumType, dataPlatformOperationsItemOperationComponentDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformOperationsItemOperationComponentDatumType, dataPlatformOperationsItemOperationComponentDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_operations_item_operation_component_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformOperationsItemOperationComponentDatumType, dataPlatformOperationsItemOperationComponentDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_operations_item_operation_component_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_operations_item_operation_component_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOperationsItemOperationComponentDatumUpsertCacheMut.Lock()
		dataPlatformOperationsItemOperationComponentDatumUpsertCache[key] = cache
		dataPlatformOperationsItemOperationComponentDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformOperationsItemOperationComponentDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformOperationsItemOperationComponentDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformOperationsItemOperationComponentDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformOperationsItemOperationComponentDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_operations_item_operation_component_data` WHERE `Operations`=? AND `OperationsItem`=? AND `OperationID`=? AND `BillOfMaterial`=? AND `BillOfMaterialItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_operations_item_operation_component_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformOperationsItemOperationComponentDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformOperationsItemOperationComponentDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_operations_item_operation_component_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformOperationsItemOperationComponentDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOperationsItemOperationComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_operations_item_operation_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformOperationsItemOperationComponentDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformOperationsItemOperationComponentDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformOperationsItemOperationComponentDatum(ctx, exec, o.Operations, o.OperationsItem, o.OperationID, o.BillOfMaterial, o.BillOfMaterialItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformOperationsItemOperationComponentDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformOperationsItemOperationComponentDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOperationsItemOperationComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_operations_item_operation_component_data`.* FROM `data_platform_operations_item_operation_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformOperationsItemOperationComponentDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformOperationsItemOperationComponentDatumExists checks if the DataPlatformOperationsItemOperationComponentDatum row exists.
func DataPlatformOperationsItemOperationComponentDatumExists(ctx context.Context, exec boil.ContextExecutor, operations int, operationsItem int, operationID int, billOfMaterial int, billOfMaterialItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_operations_item_operation_component_data` where `Operations`=? AND `OperationsItem`=? AND `OperationID`=? AND `BillOfMaterial`=? AND `BillOfMaterialItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, operations, operationsItem, operationID, billOfMaterial, billOfMaterialItem)
	}
	row := exec.QueryRowContext(ctx, sql, operations, operationsItem, operationID, billOfMaterial, billOfMaterialItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_operations_item_operation_component_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformOperationsItemOperationComponentDatum row exists.
func (o *DataPlatformOperationsItemOperationComponentDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformOperationsItemOperationComponentDatumExists(ctx, exec, o.Operations, o.OperationsItem, o.OperationID, o.BillOfMaterial, o.BillOfMaterialItem)
}
