// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformLanguageLanguageDatum is an object representing the database table.
type DataPlatformLanguageLanguageDatum struct {
	Language string `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`

	R *dataPlatformLanguageLanguageDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformLanguageLanguageDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformLanguageLanguageDatumColumns = struct {
	Language string
}{
	Language: "Language",
}

var DataPlatformLanguageLanguageDatumTableColumns = struct {
	Language string
}{
	Language: "data_platform_language_language_data.Language",
}

// Generated where

var DataPlatformLanguageLanguageDatumWhere = struct {
	Language whereHelperstring
}{
	Language: whereHelperstring{field: "`data_platform_language_language_data`.`Language`"},
}

// DataPlatformLanguageLanguageDatumRels is where relationship names are stored.
var DataPlatformLanguageLanguageDatumRels = struct {
	LanguageDataPlatformAllergenAllergenTextData                string
	LanguageDataPlatformBusinessPartnerGeneralData              string
	LanguageDataPlatformCountryCountryTextData                  string
	CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData string
	LanguageDataPlatformDeliveryDocumentPartnerData             string
	LanguageDataPlatformDivisionDivisionTextData                string
	LanguageDataPlatformIndustryIndustryTextData                string
	CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData  string
	LanguageDataPlatformInvoiceDocumentPartnerData              string
	LanguageDataPlatformLanguageLanguageTextData                string
	CountryOfOriginLanguageDataPlatformOrdersItemData           string
	LanguageDataPlatformOrdersPartnerData                       string
	LanguageDataPlatformPartnerFunctionPartnerFunctionTextData  string
	LanguageDataPlatformPlantGeneralData                        string
	CountryOfOriginLanguageDataPlatformProductMasterGeneralData string
	LanguageDataPlatformProductMasterProductDescriptionData     string
	LanguageDataPlatformProductionOrderPartnerData              string
	LanguageDataPlatformQuotationsPartnerData                   string
	LanguageDataPlatformSpecTypeSpecTypeTextData                string
}{
	LanguageDataPlatformAllergenAllergenTextData:                "LanguageDataPlatformAllergenAllergenTextData",
	LanguageDataPlatformBusinessPartnerGeneralData:              "LanguageDataPlatformBusinessPartnerGeneralData",
	LanguageDataPlatformCountryCountryTextData:                  "LanguageDataPlatformCountryCountryTextData",
	CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData: "CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData",
	LanguageDataPlatformDeliveryDocumentPartnerData:             "LanguageDataPlatformDeliveryDocumentPartnerData",
	LanguageDataPlatformDivisionDivisionTextData:                "LanguageDataPlatformDivisionDivisionTextData",
	LanguageDataPlatformIndustryIndustryTextData:                "LanguageDataPlatformIndustryIndustryTextData",
	CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData:  "CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData",
	LanguageDataPlatformInvoiceDocumentPartnerData:              "LanguageDataPlatformInvoiceDocumentPartnerData",
	LanguageDataPlatformLanguageLanguageTextData:                "LanguageDataPlatformLanguageLanguageTextData",
	CountryOfOriginLanguageDataPlatformOrdersItemData:           "CountryOfOriginLanguageDataPlatformOrdersItemData",
	LanguageDataPlatformOrdersPartnerData:                       "LanguageDataPlatformOrdersPartnerData",
	LanguageDataPlatformPartnerFunctionPartnerFunctionTextData:  "LanguageDataPlatformPartnerFunctionPartnerFunctionTextData",
	LanguageDataPlatformPlantGeneralData:                        "LanguageDataPlatformPlantGeneralData",
	CountryOfOriginLanguageDataPlatformProductMasterGeneralData: "CountryOfOriginLanguageDataPlatformProductMasterGeneralData",
	LanguageDataPlatformProductMasterProductDescriptionData:     "LanguageDataPlatformProductMasterProductDescriptionData",
	LanguageDataPlatformProductionOrderPartnerData:              "LanguageDataPlatformProductionOrderPartnerData",
	LanguageDataPlatformQuotationsPartnerData:                   "LanguageDataPlatformQuotationsPartnerData",
	LanguageDataPlatformSpecTypeSpecTypeTextData:                "LanguageDataPlatformSpecTypeSpecTypeTextData",
}

// dataPlatformLanguageLanguageDatumR is where relationships are stored.
type dataPlatformLanguageLanguageDatumR struct {
	LanguageDataPlatformAllergenAllergenTextData                DataPlatformAllergenAllergenTextDatumSlice               `boil:"LanguageDataPlatformAllergenAllergenTextData" json:"LanguageDataPlatformAllergenAllergenTextData" toml:"LanguageDataPlatformAllergenAllergenTextData" yaml:"LanguageDataPlatformAllergenAllergenTextData"`
	LanguageDataPlatformBusinessPartnerGeneralData              DataPlatformBusinessPartnerGeneralDatumSlice             `boil:"LanguageDataPlatformBusinessPartnerGeneralData" json:"LanguageDataPlatformBusinessPartnerGeneralData" toml:"LanguageDataPlatformBusinessPartnerGeneralData" yaml:"LanguageDataPlatformBusinessPartnerGeneralData"`
	LanguageDataPlatformCountryCountryTextData                  DataPlatformCountryCountryTextDatumSlice                 `boil:"LanguageDataPlatformCountryCountryTextData" json:"LanguageDataPlatformCountryCountryTextData" toml:"LanguageDataPlatformCountryCountryTextData" yaml:"LanguageDataPlatformCountryCountryTextData"`
	CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData DataPlatformDeliveryDocumentItemDatumSlice               `boil:"CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData" json:"CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData" toml:"CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData" yaml:"CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData"`
	LanguageDataPlatformDeliveryDocumentPartnerData             DataPlatformDeliveryDocumentPartnerDatumSlice            `boil:"LanguageDataPlatformDeliveryDocumentPartnerData" json:"LanguageDataPlatformDeliveryDocumentPartnerData" toml:"LanguageDataPlatformDeliveryDocumentPartnerData" yaml:"LanguageDataPlatformDeliveryDocumentPartnerData"`
	LanguageDataPlatformDivisionDivisionTextData                DataPlatformDivisionDivisionTextDatumSlice               `boil:"LanguageDataPlatformDivisionDivisionTextData" json:"LanguageDataPlatformDivisionDivisionTextData" toml:"LanguageDataPlatformDivisionDivisionTextData" yaml:"LanguageDataPlatformDivisionDivisionTextData"`
	LanguageDataPlatformIndustryIndustryTextData                DataPlatformIndustryIndustryTextDatumSlice               `boil:"LanguageDataPlatformIndustryIndustryTextData" json:"LanguageDataPlatformIndustryIndustryTextData" toml:"LanguageDataPlatformIndustryIndustryTextData" yaml:"LanguageDataPlatformIndustryIndustryTextData"`
	CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData  DataPlatformInvoiceDocumentItemDatumSlice                `boil:"CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData" json:"CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData" toml:"CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData" yaml:"CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData"`
	LanguageDataPlatformInvoiceDocumentPartnerData              DataPlatformInvoiceDocumentPartnerDatumSlice             `boil:"LanguageDataPlatformInvoiceDocumentPartnerData" json:"LanguageDataPlatformInvoiceDocumentPartnerData" toml:"LanguageDataPlatformInvoiceDocumentPartnerData" yaml:"LanguageDataPlatformInvoiceDocumentPartnerData"`
	LanguageDataPlatformLanguageLanguageTextData                DataPlatformLanguageLanguageTextDatumSlice               `boil:"LanguageDataPlatformLanguageLanguageTextData" json:"LanguageDataPlatformLanguageLanguageTextData" toml:"LanguageDataPlatformLanguageLanguageTextData" yaml:"LanguageDataPlatformLanguageLanguageTextData"`
	CountryOfOriginLanguageDataPlatformOrdersItemData           DataPlatformOrdersItemDatumSlice                         `boil:"CountryOfOriginLanguageDataPlatformOrdersItemData" json:"CountryOfOriginLanguageDataPlatformOrdersItemData" toml:"CountryOfOriginLanguageDataPlatformOrdersItemData" yaml:"CountryOfOriginLanguageDataPlatformOrdersItemData"`
	LanguageDataPlatformOrdersPartnerData                       DataPlatformOrdersPartnerDatumSlice                      `boil:"LanguageDataPlatformOrdersPartnerData" json:"LanguageDataPlatformOrdersPartnerData" toml:"LanguageDataPlatformOrdersPartnerData" yaml:"LanguageDataPlatformOrdersPartnerData"`
	LanguageDataPlatformPartnerFunctionPartnerFunctionTextData  DataPlatformPartnerFunctionPartnerFunctionTextDatumSlice `boil:"LanguageDataPlatformPartnerFunctionPartnerFunctionTextData" json:"LanguageDataPlatformPartnerFunctionPartnerFunctionTextData" toml:"LanguageDataPlatformPartnerFunctionPartnerFunctionTextData" yaml:"LanguageDataPlatformPartnerFunctionPartnerFunctionTextData"`
	LanguageDataPlatformPlantGeneralData                        DataPlatformPlantGeneralDatumSlice                       `boil:"LanguageDataPlatformPlantGeneralData" json:"LanguageDataPlatformPlantGeneralData" toml:"LanguageDataPlatformPlantGeneralData" yaml:"LanguageDataPlatformPlantGeneralData"`
	CountryOfOriginLanguageDataPlatformProductMasterGeneralData DataPlatformProductMasterGeneralDatumSlice               `boil:"CountryOfOriginLanguageDataPlatformProductMasterGeneralData" json:"CountryOfOriginLanguageDataPlatformProductMasterGeneralData" toml:"CountryOfOriginLanguageDataPlatformProductMasterGeneralData" yaml:"CountryOfOriginLanguageDataPlatformProductMasterGeneralData"`
	LanguageDataPlatformProductMasterProductDescriptionData     DataPlatformProductMasterProductDescriptionDatumSlice    `boil:"LanguageDataPlatformProductMasterProductDescriptionData" json:"LanguageDataPlatformProductMasterProductDescriptionData" toml:"LanguageDataPlatformProductMasterProductDescriptionData" yaml:"LanguageDataPlatformProductMasterProductDescriptionData"`
	LanguageDataPlatformProductionOrderPartnerData              DataPlatformProductionOrderPartnerDatumSlice             `boil:"LanguageDataPlatformProductionOrderPartnerData" json:"LanguageDataPlatformProductionOrderPartnerData" toml:"LanguageDataPlatformProductionOrderPartnerData" yaml:"LanguageDataPlatformProductionOrderPartnerData"`
	LanguageDataPlatformQuotationsPartnerData                   DataPlatformQuotationsPartnerDatumSlice                  `boil:"LanguageDataPlatformQuotationsPartnerData" json:"LanguageDataPlatformQuotationsPartnerData" toml:"LanguageDataPlatformQuotationsPartnerData" yaml:"LanguageDataPlatformQuotationsPartnerData"`
	LanguageDataPlatformSpecTypeSpecTypeTextData                DataPlatformSpecTypeSpecTypeTextDatumSlice               `boil:"LanguageDataPlatformSpecTypeSpecTypeTextData" json:"LanguageDataPlatformSpecTypeSpecTypeTextData" toml:"LanguageDataPlatformSpecTypeSpecTypeTextData" yaml:"LanguageDataPlatformSpecTypeSpecTypeTextData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformLanguageLanguageDatumR) NewStruct() *dataPlatformLanguageLanguageDatumR {
	return &dataPlatformLanguageLanguageDatumR{}
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformAllergenAllergenTextData() DataPlatformAllergenAllergenTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformAllergenAllergenTextData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformBusinessPartnerGeneralData() DataPlatformBusinessPartnerGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformBusinessPartnerGeneralData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformCountryCountryTextData() DataPlatformCountryCountryTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformCountryCountryTextData
}

func (r *dataPlatformLanguageLanguageDatumR) GetCountryOfOriginLanguageDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformDeliveryDocumentPartnerData() DataPlatformDeliveryDocumentPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformDeliveryDocumentPartnerData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformDivisionDivisionTextData() DataPlatformDivisionDivisionTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformDivisionDivisionTextData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformIndustryIndustryTextData() DataPlatformIndustryIndustryTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformIndustryIndustryTextData
}

func (r *dataPlatformLanguageLanguageDatumR) GetCountryOfOriginLanguageDataPlatformInvoiceDocumentItemData() DataPlatformInvoiceDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformInvoiceDocumentPartnerData() DataPlatformInvoiceDocumentPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformInvoiceDocumentPartnerData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformLanguageLanguageTextData() DataPlatformLanguageLanguageTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformLanguageLanguageTextData
}

func (r *dataPlatformLanguageLanguageDatumR) GetCountryOfOriginLanguageDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginLanguageDataPlatformOrdersItemData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformOrdersPartnerData() DataPlatformOrdersPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformOrdersPartnerData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformPartnerFunctionPartnerFunctionTextData() DataPlatformPartnerFunctionPartnerFunctionTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformPlantGeneralData() DataPlatformPlantGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformPlantGeneralData
}

func (r *dataPlatformLanguageLanguageDatumR) GetCountryOfOriginLanguageDataPlatformProductMasterGeneralData() DataPlatformProductMasterGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginLanguageDataPlatformProductMasterGeneralData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformProductMasterProductDescriptionData() DataPlatformProductMasterProductDescriptionDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformProductMasterProductDescriptionData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformProductionOrderPartnerData() DataPlatformProductionOrderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformProductionOrderPartnerData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformQuotationsPartnerData() DataPlatformQuotationsPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformQuotationsPartnerData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformSpecTypeSpecTypeTextData() DataPlatformSpecTypeSpecTypeTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformSpecTypeSpecTypeTextData
}

// dataPlatformLanguageLanguageDatumL is where Load methods for each relationship are stored.
type dataPlatformLanguageLanguageDatumL struct{}

var (
	dataPlatformLanguageLanguageDatumAllColumns            = []string{"Language"}
	dataPlatformLanguageLanguageDatumColumnsWithoutDefault = []string{"Language"}
	dataPlatformLanguageLanguageDatumColumnsWithDefault    = []string{}
	dataPlatformLanguageLanguageDatumPrimaryKeyColumns     = []string{"Language"}
	dataPlatformLanguageLanguageDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformLanguageLanguageDatumSlice is an alias for a slice of pointers to DataPlatformLanguageLanguageDatum.
	// This should almost always be used instead of []DataPlatformLanguageLanguageDatum.
	DataPlatformLanguageLanguageDatumSlice []*DataPlatformLanguageLanguageDatum

	dataPlatformLanguageLanguageDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformLanguageLanguageDatumType                 = reflect.TypeOf(&DataPlatformLanguageLanguageDatum{})
	dataPlatformLanguageLanguageDatumMapping              = queries.MakeStructMapping(dataPlatformLanguageLanguageDatumType)
	dataPlatformLanguageLanguageDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, dataPlatformLanguageLanguageDatumPrimaryKeyColumns)
	dataPlatformLanguageLanguageDatumInsertCacheMut       sync.RWMutex
	dataPlatformLanguageLanguageDatumInsertCache          = make(map[string]insertCache)
	dataPlatformLanguageLanguageDatumUpdateCacheMut       sync.RWMutex
	dataPlatformLanguageLanguageDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformLanguageLanguageDatumUpsertCacheMut       sync.RWMutex
	dataPlatformLanguageLanguageDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformLanguageLanguageDatum record from the query.
func (q dataPlatformLanguageLanguageDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformLanguageLanguageDatum, error) {
	o := &DataPlatformLanguageLanguageDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_language_language_data")
	}

	return o, nil
}

// All returns all DataPlatformLanguageLanguageDatum records from the query.
func (q dataPlatformLanguageLanguageDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformLanguageLanguageDatumSlice, error) {
	var o []*DataPlatformLanguageLanguageDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformLanguageLanguageDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformLanguageLanguageDatum records in the query.
func (q dataPlatformLanguageLanguageDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_language_language_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformLanguageLanguageDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_language_language_data exists")
	}

	return count > 0, nil
}

// LanguageDataPlatformAllergenAllergenTextData retrieves all the data_platform_allergen_allergen_text_datum's DataPlatformAllergenAllergenTextData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformAllergenAllergenTextData(mods ...qm.QueryMod) dataPlatformAllergenAllergenTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_allergen_allergen_text_data`.`Language`=?", o.Language),
	)

	return DataPlatformAllergenAllergenTextData(queryMods...)
}

// LanguageDataPlatformBusinessPartnerGeneralData retrieves all the data_platform_business_partner_general_datum's DataPlatformBusinessPartnerGeneralData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformBusinessPartnerGeneralData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_general_data`.`Language`=?", o.Language),
	)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// LanguageDataPlatformCountryCountryTextData retrieves all the data_platform_country_country_text_datum's DataPlatformCountryCountryTextData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformCountryCountryTextData(mods ...qm.QueryMod) dataPlatformCountryCountryTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_country_country_text_data`.`Language`=?", o.Language),
	)

	return DataPlatformCountryCountryTextData(queryMods...)
}

// CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via CountryOfOriginLanguage column.
func (o *DataPlatformLanguageLanguageDatum) CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`CountryOfOriginLanguage`=?", o.Language),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// LanguageDataPlatformDeliveryDocumentPartnerData retrieves all the data_platform_delivery_document_partner_datum's DataPlatformDeliveryDocumentPartnerData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformDeliveryDocumentPartnerData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_partner_data`.`Language`=?", o.Language),
	)

	return DataPlatformDeliveryDocumentPartnerData(queryMods...)
}

// LanguageDataPlatformDivisionDivisionTextData retrieves all the data_platform_division_division_text_datum's DataPlatformDivisionDivisionTextData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformDivisionDivisionTextData(mods ...qm.QueryMod) dataPlatformDivisionDivisionTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_division_division_text_data`.`Language`=?", o.Language),
	)

	return DataPlatformDivisionDivisionTextData(queryMods...)
}

// LanguageDataPlatformIndustryIndustryTextData retrieves all the data_platform_industry_industry_text_datum's DataPlatformIndustryIndustryTextData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformIndustryIndustryTextData(mods ...qm.QueryMod) dataPlatformIndustryIndustryTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_industry_industry_text_data`.`Language`=?", o.Language),
	)

	return DataPlatformIndustryIndustryTextData(queryMods...)
}

// CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData retrieves all the data_platform_invoice_document_item_datum's DataPlatformInvoiceDocumentItemData with an executor via CountryOfOriginLanguage column.
func (o *DataPlatformLanguageLanguageDatum) CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_data`.`CountryOfOriginLanguage`=?", o.Language),
	)

	return DataPlatformInvoiceDocumentItemData(queryMods...)
}

// LanguageDataPlatformInvoiceDocumentPartnerData retrieves all the data_platform_invoice_document_partner_datum's DataPlatformInvoiceDocumentPartnerData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformInvoiceDocumentPartnerData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_partner_data`.`Language`=?", o.Language),
	)

	return DataPlatformInvoiceDocumentPartnerData(queryMods...)
}

// LanguageDataPlatformLanguageLanguageTextData retrieves all the data_platform_language_language_text_datum's DataPlatformLanguageLanguageTextData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformLanguageLanguageTextData(mods ...qm.QueryMod) dataPlatformLanguageLanguageTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_language_language_text_data`.`Language`=?", o.Language),
	)

	return DataPlatformLanguageLanguageTextData(queryMods...)
}

// CountryOfOriginLanguageDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via CountryOfOriginLanguage column.
func (o *DataPlatformLanguageLanguageDatum) CountryOfOriginLanguageDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`CountryOfOriginLanguage`=?", o.Language),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// LanguageDataPlatformOrdersPartnerData retrieves all the data_platform_orders_partner_datum's DataPlatformOrdersPartnerData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformOrdersPartnerData(mods ...qm.QueryMod) dataPlatformOrdersPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_partner_data`.`Language`=?", o.Language),
	)

	return DataPlatformOrdersPartnerData(queryMods...)
}

// LanguageDataPlatformPartnerFunctionPartnerFunctionTextData retrieves all the data_platform_partner_function_partner_function_text_datum's DataPlatformPartnerFunctionPartnerFunctionTextData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformPartnerFunctionPartnerFunctionTextData(mods ...qm.QueryMod) dataPlatformPartnerFunctionPartnerFunctionTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_partner_function_partner_function_text_data`.`Language`=?", o.Language),
	)

	return DataPlatformPartnerFunctionPartnerFunctionTextData(queryMods...)
}

// LanguageDataPlatformPlantGeneralData retrieves all the data_platform_plant_general_datum's DataPlatformPlantGeneralData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformPlantGeneralData(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_plant_general_data`.`Language`=?", o.Language),
	)

	return DataPlatformPlantGeneralData(queryMods...)
}

// CountryOfOriginLanguageDataPlatformProductMasterGeneralData retrieves all the data_platform_product_master_general_datum's DataPlatformProductMasterGeneralData with an executor via CountryOfOriginLanguage column.
func (o *DataPlatformLanguageLanguageDatum) CountryOfOriginLanguageDataPlatformProductMasterGeneralData(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_general_data`.`CountryOfOriginLanguage`=?", o.Language),
	)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// LanguageDataPlatformProductMasterProductDescriptionData retrieves all the data_platform_product_master_product_description_datum's DataPlatformProductMasterProductDescriptionData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformProductMasterProductDescriptionData(mods ...qm.QueryMod) dataPlatformProductMasterProductDescriptionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_product_description_data`.`Language`=?", o.Language),
	)

	return DataPlatformProductMasterProductDescriptionData(queryMods...)
}

// LanguageDataPlatformProductionOrderPartnerData retrieves all the data_platform_production_order_partner_datum's DataPlatformProductionOrderPartnerData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformProductionOrderPartnerData(mods ...qm.QueryMod) dataPlatformProductionOrderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_partner_data`.`Language`=?", o.Language),
	)

	return DataPlatformProductionOrderPartnerData(queryMods...)
}

// LanguageDataPlatformQuotationsPartnerData retrieves all the data_platform_quotations_partner_datum's DataPlatformQuotationsPartnerData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformQuotationsPartnerData(mods ...qm.QueryMod) dataPlatformQuotationsPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_partner_data`.`Language`=?", o.Language),
	)

	return DataPlatformQuotationsPartnerData(queryMods...)
}

// LanguageDataPlatformSpecTypeSpecTypeTextData retrieves all the data_platform_spec_type_spec_type_text_datum's DataPlatformSpecTypeSpecTypeTextData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformSpecTypeSpecTypeTextData(mods ...qm.QueryMod) dataPlatformSpecTypeSpecTypeTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_spec_type_spec_type_text_data`.`Language`=?", o.Language),
	)

	return DataPlatformSpecTypeSpecTypeTextData(queryMods...)
}

// LoadLanguageDataPlatformAllergenAllergenTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformAllergenAllergenTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_allergen_allergen_text_data`),
		qm.WhereIn(`data_platform_allergen_allergen_text_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_allergen_allergen_text_data")
	}

	var resultSlice []*DataPlatformAllergenAllergenTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_allergen_allergen_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_allergen_allergen_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_allergen_allergen_text_data")
	}

	if singular {
		object.R.LanguageDataPlatformAllergenAllergenTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformAllergenAllergenTextData = append(local.R.LanguageDataPlatformAllergenAllergenTextData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformBusinessPartnerGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformBusinessPartnerGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_general_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if singular {
		object.R.LanguageDataPlatformBusinessPartnerGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformBusinessPartnerGeneralData = append(local.R.LanguageDataPlatformBusinessPartnerGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformCountryCountryTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformCountryCountryTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_text_data`),
		qm.WhereIn(`data_platform_country_country_text_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_country_country_text_data")
	}

	var resultSlice []*DataPlatformCountryCountryTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_country_country_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_country_country_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_text_data")
	}

	if singular {
		object.R.LanguageDataPlatformCountryCountryTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformCountryCountryTextData = append(local.R.LanguageDataPlatformCountryCountryTextData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginLanguageDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadCountryOfOriginLanguageDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Language) {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.CountryOfOriginLanguage in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Language, foreign.CountryOfOriginLanguage) {
				local.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData = append(local.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformDeliveryDocumentPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformDeliveryDocumentPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Language) {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_partner_data`),
		qm.WhereIn(`data_platform_delivery_document_partner_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_partner_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_partner_data")
	}

	if singular {
		object.R.LanguageDataPlatformDeliveryDocumentPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Language, foreign.Language) {
				local.R.LanguageDataPlatformDeliveryDocumentPartnerData = append(local.R.LanguageDataPlatformDeliveryDocumentPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformDivisionDivisionTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformDivisionDivisionTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_division_division_text_data`),
		qm.WhereIn(`data_platform_division_division_text_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_division_division_text_data")
	}

	var resultSlice []*DataPlatformDivisionDivisionTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_division_division_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_division_division_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_division_division_text_data")
	}

	if singular {
		object.R.LanguageDataPlatformDivisionDivisionTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformDivisionDivisionTextData = append(local.R.LanguageDataPlatformDivisionDivisionTextData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformIndustryIndustryTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformIndustryIndustryTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_industry_industry_text_data`),
		qm.WhereIn(`data_platform_industry_industry_text_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_industry_industry_text_data")
	}

	var resultSlice []*DataPlatformIndustryIndustryTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_industry_industry_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_industry_industry_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_industry_industry_text_data")
	}

	if singular {
		object.R.LanguageDataPlatformIndustryIndustryTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformIndustryIndustryTextData = append(local.R.LanguageDataPlatformIndustryIndustryTextData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginLanguageDataPlatformInvoiceDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadCountryOfOriginLanguageDataPlatformInvoiceDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Language) {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_data`),
		qm.WhereIn(`data_platform_invoice_document_item_data.CountryOfOriginLanguage in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_data")
	}

	if singular {
		object.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Language, foreign.CountryOfOriginLanguage) {
				local.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData = append(local.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformInvoiceDocumentPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformInvoiceDocumentPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Language) {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_partner_data`),
		qm.WhereIn(`data_platform_invoice_document_partner_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_partner_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_partner_data")
	}

	if singular {
		object.R.LanguageDataPlatformInvoiceDocumentPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Language, foreign.Language) {
				local.R.LanguageDataPlatformInvoiceDocumentPartnerData = append(local.R.LanguageDataPlatformInvoiceDocumentPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformLanguageLanguageTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformLanguageLanguageTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_text_data`),
		qm.WhereIn(`data_platform_language_language_text_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_language_language_text_data")
	}

	var resultSlice []*DataPlatformLanguageLanguageTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_language_language_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_language_language_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_text_data")
	}

	if singular {
		object.R.LanguageDataPlatformLanguageLanguageTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformLanguageLanguageTextData = append(local.R.LanguageDataPlatformLanguageLanguageTextData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginLanguageDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadCountryOfOriginLanguageDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Language) {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.CountryOfOriginLanguage in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.CountryOfOriginLanguageDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Language, foreign.CountryOfOriginLanguage) {
				local.R.CountryOfOriginLanguageDataPlatformOrdersItemData = append(local.R.CountryOfOriginLanguageDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformOrdersPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformOrdersPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Language) {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_partner_data`),
		qm.WhereIn(`data_platform_orders_partner_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_partner_data")
	}

	var resultSlice []*DataPlatformOrdersPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_partner_data")
	}

	if singular {
		object.R.LanguageDataPlatformOrdersPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Language, foreign.Language) {
				local.R.LanguageDataPlatformOrdersPartnerData = append(local.R.LanguageDataPlatformOrdersPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformPartnerFunctionPartnerFunctionTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformPartnerFunctionPartnerFunctionTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_partner_function_partner_function_text_data`),
		qm.WhereIn(`data_platform_partner_function_partner_function_text_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_partner_function_partner_function_text_data")
	}

	var resultSlice []*DataPlatformPartnerFunctionPartnerFunctionTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_partner_function_partner_function_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_partner_function_partner_function_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_partner_function_partner_function_text_data")
	}

	if singular {
		object.R.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData = append(local.R.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformPlantGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformPlantGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_plant_general_data")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_plant_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if singular {
		object.R.LanguageDataPlatformPlantGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformPlantGeneralData = append(local.R.LanguageDataPlatformPlantGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginLanguageDataPlatformProductMasterGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadCountryOfOriginLanguageDataPlatformProductMasterGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Language) {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.CountryOfOriginLanguage in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_general_data")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if singular {
		object.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Language, foreign.CountryOfOriginLanguage) {
				local.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData = append(local.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformProductMasterProductDescriptionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformProductMasterProductDescriptionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_product_description_data`),
		qm.WhereIn(`data_platform_product_master_product_description_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_product_description_data")
	}

	var resultSlice []*DataPlatformProductMasterProductDescriptionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_product_description_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_product_description_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_product_description_data")
	}

	if singular {
		object.R.LanguageDataPlatformProductMasterProductDescriptionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformProductMasterProductDescriptionData = append(local.R.LanguageDataPlatformProductMasterProductDescriptionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformProductionOrderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformProductionOrderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Language) {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_partner_data`),
		qm.WhereIn(`data_platform_production_order_partner_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_partner_data")
	}

	var resultSlice []*DataPlatformProductionOrderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_partner_data")
	}

	if singular {
		object.R.LanguageDataPlatformProductionOrderPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Language, foreign.Language) {
				local.R.LanguageDataPlatformProductionOrderPartnerData = append(local.R.LanguageDataPlatformProductionOrderPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformQuotationsPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformQuotationsPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Language) {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_partner_data`),
		qm.WhereIn(`data_platform_quotations_partner_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_partner_data")
	}

	var resultSlice []*DataPlatformQuotationsPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_partner_data")
	}

	if singular {
		object.R.LanguageDataPlatformQuotationsPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Language, foreign.Language) {
				local.R.LanguageDataPlatformQuotationsPartnerData = append(local.R.LanguageDataPlatformQuotationsPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformSpecTypeSpecTypeTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformSpecTypeSpecTypeTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_spec_type_spec_type_text_data`),
		qm.WhereIn(`data_platform_spec_type_spec_type_text_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_spec_type_spec_type_text_data")
	}

	var resultSlice []*DataPlatformSpecTypeSpecTypeTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_spec_type_spec_type_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_spec_type_spec_type_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_spec_type_spec_type_text_data")
	}

	if singular {
		object.R.LanguageDataPlatformSpecTypeSpecTypeTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformSpecTypeSpecTypeTextData = append(local.R.LanguageDataPlatformSpecTypeSpecTypeTextData, foreign)
				break
			}
		}
	}

	return nil
}

// AddLanguageDataPlatformAllergenAllergenTextData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformAllergenAllergenTextData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformAllergenAllergenTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformAllergenAllergenTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_allergen_allergen_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformAllergenAllergenTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.Allergen, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformAllergenAllergenTextData: related,
		}
	} else {
		o.R.LanguageDataPlatformAllergenAllergenTextData = append(o.R.LanguageDataPlatformAllergenAllergenTextData, related...)
	}

	return nil
}

// AddLanguageDataPlatformBusinessPartnerGeneralData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformBusinessPartnerGeneralData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformBusinessPartnerGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformBusinessPartnerGeneralData: related,
		}
	} else {
		o.R.LanguageDataPlatformBusinessPartnerGeneralData = append(o.R.LanguageDataPlatformBusinessPartnerGeneralData, related...)
	}

	return nil
}

// AddLanguageDataPlatformCountryCountryTextData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformCountryCountryTextData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformCountryCountryTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformCountryCountryTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_country_country_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformCountryCountryTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.Country, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformCountryCountryTextData: related,
		}
	} else {
		o.R.LanguageDataPlatformCountryCountryTextData = append(o.R.LanguageDataPlatformCountryCountryTextData, related...)
	}

	return nil
}

// AddCountryOfOriginLanguageDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformLanguageLanguageDatum) AddCountryOfOriginLanguageDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryOfOriginLanguage, o.Language)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOriginLanguage"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryOfOriginLanguage, o.Language)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData = append(o.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetCountryOfOriginLanguageDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_language_language_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum's CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformLanguageLanguageDatum) SetCountryOfOriginLanguageDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `CountryOfOriginLanguage` = null where `CountryOfOriginLanguage` = ?"
	values := []interface{}{o.Language}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddCountryOfOriginLanguageDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveCountryOfOriginLanguageDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformLanguageLanguageDatum) RemoveCountryOfOriginLanguageDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryOfOriginLanguage, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("CountryOfOriginLanguage")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData[i] = o.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData = o.R.CountryOfOriginLanguageDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddLanguageDataPlatformDeliveryDocumentPartnerData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformDeliveryDocumentPartnerData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformDeliveryDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Language, o.Language)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.DeliveryDocument, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Language, o.Language)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformDeliveryDocumentPartnerData: related,
		}
	} else {
		o.R.LanguageDataPlatformDeliveryDocumentPartnerData = append(o.R.LanguageDataPlatformDeliveryDocumentPartnerData, related...)
	}

	return nil
}

// SetLanguageDataPlatformDeliveryDocumentPartnerData removes all previously related items of the
// data_platform_language_language_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum's LanguageDataPlatformDeliveryDocumentPartnerData accordingly.
// Replaces o.R.LanguageDataPlatformDeliveryDocumentPartnerData with related.
func (o *DataPlatformLanguageLanguageDatum) SetLanguageDataPlatformDeliveryDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentPartnerDatum) error {
	query := "update `data_platform_delivery_document_partner_data` set `Language` = null where `Language` = ?"
	values := []interface{}{o.Language}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.LanguageDataPlatformDeliveryDocumentPartnerData = nil
	}

	return o.AddLanguageDataPlatformDeliveryDocumentPartnerData(ctx, exec, insert, related...)
}

// RemoveLanguageDataPlatformDeliveryDocumentPartnerData relationships from objects passed in.
// Removes related items from R.LanguageDataPlatformDeliveryDocumentPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformLanguageLanguageDatum) RemoveLanguageDataPlatformDeliveryDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Language, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Language")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LanguageDataPlatformDeliveryDocumentPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.LanguageDataPlatformDeliveryDocumentPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.LanguageDataPlatformDeliveryDocumentPartnerData[i] = o.R.LanguageDataPlatformDeliveryDocumentPartnerData[ln-1]
			}
			o.R.LanguageDataPlatformDeliveryDocumentPartnerData = o.R.LanguageDataPlatformDeliveryDocumentPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddLanguageDataPlatformDivisionDivisionTextData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformDivisionDivisionTextData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformDivisionDivisionTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDivisionDivisionTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_division_division_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDivisionDivisionTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.Division, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformDivisionDivisionTextData: related,
		}
	} else {
		o.R.LanguageDataPlatformDivisionDivisionTextData = append(o.R.LanguageDataPlatformDivisionDivisionTextData, related...)
	}

	return nil
}

// AddLanguageDataPlatformIndustryIndustryTextData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformIndustryIndustryTextData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformIndustryIndustryTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformIndustryIndustryTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_industry_industry_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformIndustryIndustryTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.Industry, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformIndustryIndustryTextData: related,
		}
	} else {
		o.R.LanguageDataPlatformIndustryIndustryTextData = append(o.R.LanguageDataPlatformIndustryIndustryTextData, related...)
	}

	return nil
}

// AddCountryOfOriginLanguageDataPlatformInvoiceDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData.
func (o *DataPlatformLanguageLanguageDatum) AddCountryOfOriginLanguageDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryOfOriginLanguage, o.Language)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOriginLanguage"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.InvoiceDocument, rel.InvoiceDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryOfOriginLanguage, o.Language)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData: related,
		}
	} else {
		o.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData = append(o.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData, related...)
	}

	return nil
}

// SetCountryOfOriginLanguageDataPlatformInvoiceDocumentItemData removes all previously related items of the
// data_platform_language_language_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum's CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData accordingly.
// Replaces o.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData with related.
func (o *DataPlatformLanguageLanguageDatum) SetCountryOfOriginLanguageDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	query := "update `data_platform_invoice_document_item_data` set `CountryOfOriginLanguage` = null where `CountryOfOriginLanguage` = ?"
	values := []interface{}{o.Language}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData = nil
	}

	return o.AddCountryOfOriginLanguageDataPlatformInvoiceDocumentItemData(ctx, exec, insert, related...)
}

// RemoveCountryOfOriginLanguageDataPlatformInvoiceDocumentItemData relationships from objects passed in.
// Removes related items from R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformLanguageLanguageDatum) RemoveCountryOfOriginLanguageDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryOfOriginLanguage, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("CountryOfOriginLanguage")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData[i] = o.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData[ln-1]
			}
			o.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData = o.R.CountryOfOriginLanguageDataPlatformInvoiceDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddLanguageDataPlatformInvoiceDocumentPartnerData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformInvoiceDocumentPartnerData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformInvoiceDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Language, o.Language)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.InvoiceDocument, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Language, o.Language)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformInvoiceDocumentPartnerData: related,
		}
	} else {
		o.R.LanguageDataPlatformInvoiceDocumentPartnerData = append(o.R.LanguageDataPlatformInvoiceDocumentPartnerData, related...)
	}

	return nil
}

// SetLanguageDataPlatformInvoiceDocumentPartnerData removes all previously related items of the
// data_platform_language_language_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum's LanguageDataPlatformInvoiceDocumentPartnerData accordingly.
// Replaces o.R.LanguageDataPlatformInvoiceDocumentPartnerData with related.
func (o *DataPlatformLanguageLanguageDatum) SetLanguageDataPlatformInvoiceDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentPartnerDatum) error {
	query := "update `data_platform_invoice_document_partner_data` set `Language` = null where `Language` = ?"
	values := []interface{}{o.Language}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.LanguageDataPlatformInvoiceDocumentPartnerData = nil
	}

	return o.AddLanguageDataPlatformInvoiceDocumentPartnerData(ctx, exec, insert, related...)
}

// RemoveLanguageDataPlatformInvoiceDocumentPartnerData relationships from objects passed in.
// Removes related items from R.LanguageDataPlatformInvoiceDocumentPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformLanguageLanguageDatum) RemoveLanguageDataPlatformInvoiceDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInvoiceDocumentPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Language, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Language")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LanguageDataPlatformInvoiceDocumentPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.LanguageDataPlatformInvoiceDocumentPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.LanguageDataPlatformInvoiceDocumentPartnerData[i] = o.R.LanguageDataPlatformInvoiceDocumentPartnerData[ln-1]
			}
			o.R.LanguageDataPlatformInvoiceDocumentPartnerData = o.R.LanguageDataPlatformInvoiceDocumentPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddLanguageDataPlatformLanguageLanguageTextData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformLanguageLanguageTextData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformLanguageLanguageTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformLanguageLanguageTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_language_language_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformLanguageLanguageTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.Language, rel.CorrespondingLanguage}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformLanguageLanguageTextData: related,
		}
	} else {
		o.R.LanguageDataPlatformLanguageLanguageTextData = append(o.R.LanguageDataPlatformLanguageLanguageTextData, related...)
	}

	return nil
}

// AddCountryOfOriginLanguageDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.CountryOfOriginLanguageDataPlatformOrdersItemData.
func (o *DataPlatformLanguageLanguageDatum) AddCountryOfOriginLanguageDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryOfOriginLanguage, o.Language)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOriginLanguage"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryOfOriginLanguage, o.Language)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			CountryOfOriginLanguageDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.CountryOfOriginLanguageDataPlatformOrdersItemData = append(o.R.CountryOfOriginLanguageDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetCountryOfOriginLanguageDataPlatformOrdersItemData removes all previously related items of the
// data_platform_language_language_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum's CountryOfOriginLanguageDataPlatformOrdersItemData accordingly.
// Replaces o.R.CountryOfOriginLanguageDataPlatformOrdersItemData with related.
func (o *DataPlatformLanguageLanguageDatum) SetCountryOfOriginLanguageDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `CountryOfOriginLanguage` = null where `CountryOfOriginLanguage` = ?"
	values := []interface{}{o.Language}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryOfOriginLanguageDataPlatformOrdersItemData = nil
	}

	return o.AddCountryOfOriginLanguageDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveCountryOfOriginLanguageDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.CountryOfOriginLanguageDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformLanguageLanguageDatum) RemoveCountryOfOriginLanguageDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryOfOriginLanguage, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("CountryOfOriginLanguage")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryOfOriginLanguageDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryOfOriginLanguageDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.CountryOfOriginLanguageDataPlatformOrdersItemData[i] = o.R.CountryOfOriginLanguageDataPlatformOrdersItemData[ln-1]
			}
			o.R.CountryOfOriginLanguageDataPlatformOrdersItemData = o.R.CountryOfOriginLanguageDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddLanguageDataPlatformOrdersPartnerData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformOrdersPartnerData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformOrdersPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Language, o.Language)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.OrderID, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Language, o.Language)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformOrdersPartnerData: related,
		}
	} else {
		o.R.LanguageDataPlatformOrdersPartnerData = append(o.R.LanguageDataPlatformOrdersPartnerData, related...)
	}

	return nil
}

// SetLanguageDataPlatformOrdersPartnerData removes all previously related items of the
// data_platform_language_language_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum's LanguageDataPlatformOrdersPartnerData accordingly.
// Replaces o.R.LanguageDataPlatformOrdersPartnerData with related.
func (o *DataPlatformLanguageLanguageDatum) SetLanguageDataPlatformOrdersPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersPartnerDatum) error {
	query := "update `data_platform_orders_partner_data` set `Language` = null where `Language` = ?"
	values := []interface{}{o.Language}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.LanguageDataPlatformOrdersPartnerData = nil
	}

	return o.AddLanguageDataPlatformOrdersPartnerData(ctx, exec, insert, related...)
}

// RemoveLanguageDataPlatformOrdersPartnerData relationships from objects passed in.
// Removes related items from R.LanguageDataPlatformOrdersPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformLanguageLanguageDatum) RemoveLanguageDataPlatformOrdersPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Language, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Language")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LanguageDataPlatformOrdersPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.LanguageDataPlatformOrdersPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.LanguageDataPlatformOrdersPartnerData[i] = o.R.LanguageDataPlatformOrdersPartnerData[ln-1]
			}
			o.R.LanguageDataPlatformOrdersPartnerData = o.R.LanguageDataPlatformOrdersPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddLanguageDataPlatformPartnerFunctionPartnerFunctionTextData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformPartnerFunctionPartnerFunctionTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPartnerFunctionPartnerFunctionTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_partner_function_partner_function_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPartnerFunctionPartnerFunctionTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.PartnerFunction, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformPartnerFunctionPartnerFunctionTextData: related,
		}
	} else {
		o.R.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData = append(o.R.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData, related...)
	}

	return nil
}

// AddLanguageDataPlatformPlantGeneralData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformPlantGeneralData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlantGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformPlantGeneralData: related,
		}
	} else {
		o.R.LanguageDataPlatformPlantGeneralData = append(o.R.LanguageDataPlatformPlantGeneralData, related...)
	}

	return nil
}

// AddCountryOfOriginLanguageDataPlatformProductMasterGeneralData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData.
func (o *DataPlatformLanguageLanguageDatum) AddCountryOfOriginLanguageDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryOfOriginLanguage, o.Language)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOriginLanguage"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.Product}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryOfOriginLanguage, o.Language)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			CountryOfOriginLanguageDataPlatformProductMasterGeneralData: related,
		}
	} else {
		o.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData = append(o.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData, related...)
	}

	return nil
}

// SetCountryOfOriginLanguageDataPlatformProductMasterGeneralData removes all previously related items of the
// data_platform_language_language_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum's CountryOfOriginLanguageDataPlatformProductMasterGeneralData accordingly.
// Replaces o.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData with related.
func (o *DataPlatformLanguageLanguageDatum) SetCountryOfOriginLanguageDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	query := "update `data_platform_product_master_general_data` set `CountryOfOriginLanguage` = null where `CountryOfOriginLanguage` = ?"
	values := []interface{}{o.Language}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData = nil
	}

	return o.AddCountryOfOriginLanguageDataPlatformProductMasterGeneralData(ctx, exec, insert, related...)
}

// RemoveCountryOfOriginLanguageDataPlatformProductMasterGeneralData relationships from objects passed in.
// Removes related items from R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformLanguageLanguageDatum) RemoveCountryOfOriginLanguageDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryOfOriginLanguage, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("CountryOfOriginLanguage")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData[i] = o.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData[ln-1]
			}
			o.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData = o.R.CountryOfOriginLanguageDataPlatformProductMasterGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddLanguageDataPlatformProductMasterProductDescriptionData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformProductMasterProductDescriptionData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformProductMasterProductDescriptionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterProductDescriptionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_product_description_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductDescriptionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.Product, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformProductMasterProductDescriptionData: related,
		}
	} else {
		o.R.LanguageDataPlatformProductMasterProductDescriptionData = append(o.R.LanguageDataPlatformProductMasterProductDescriptionData, related...)
	}

	return nil
}

// AddLanguageDataPlatformProductionOrderPartnerData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformProductionOrderPartnerData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformProductionOrderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Language, o.Language)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.ProductionOrder, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Language, o.Language)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformProductionOrderPartnerData: related,
		}
	} else {
		o.R.LanguageDataPlatformProductionOrderPartnerData = append(o.R.LanguageDataPlatformProductionOrderPartnerData, related...)
	}

	return nil
}

// SetLanguageDataPlatformProductionOrderPartnerData removes all previously related items of the
// data_platform_language_language_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum's LanguageDataPlatformProductionOrderPartnerData accordingly.
// Replaces o.R.LanguageDataPlatformProductionOrderPartnerData with related.
func (o *DataPlatformLanguageLanguageDatum) SetLanguageDataPlatformProductionOrderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderPartnerDatum) error {
	query := "update `data_platform_production_order_partner_data` set `Language` = null where `Language` = ?"
	values := []interface{}{o.Language}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.LanguageDataPlatformProductionOrderPartnerData = nil
	}

	return o.AddLanguageDataPlatformProductionOrderPartnerData(ctx, exec, insert, related...)
}

// RemoveLanguageDataPlatformProductionOrderPartnerData relationships from objects passed in.
// Removes related items from R.LanguageDataPlatformProductionOrderPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformLanguageLanguageDatum) RemoveLanguageDataPlatformProductionOrderPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Language, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Language")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LanguageDataPlatformProductionOrderPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.LanguageDataPlatformProductionOrderPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.LanguageDataPlatformProductionOrderPartnerData[i] = o.R.LanguageDataPlatformProductionOrderPartnerData[ln-1]
			}
			o.R.LanguageDataPlatformProductionOrderPartnerData = o.R.LanguageDataPlatformProductionOrderPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddLanguageDataPlatformQuotationsPartnerData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformQuotationsPartnerData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformQuotationsPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Language, o.Language)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.Quotation, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Language, o.Language)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformQuotationsPartnerData: related,
		}
	} else {
		o.R.LanguageDataPlatformQuotationsPartnerData = append(o.R.LanguageDataPlatformQuotationsPartnerData, related...)
	}

	return nil
}

// SetLanguageDataPlatformQuotationsPartnerData removes all previously related items of the
// data_platform_language_language_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum's LanguageDataPlatformQuotationsPartnerData accordingly.
// Replaces o.R.LanguageDataPlatformQuotationsPartnerData with related.
func (o *DataPlatformLanguageLanguageDatum) SetLanguageDataPlatformQuotationsPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsPartnerDatum) error {
	query := "update `data_platform_quotations_partner_data` set `Language` = null where `Language` = ?"
	values := []interface{}{o.Language}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.LanguageDataPlatformQuotationsPartnerData = nil
	}

	return o.AddLanguageDataPlatformQuotationsPartnerData(ctx, exec, insert, related...)
}

// RemoveLanguageDataPlatformQuotationsPartnerData relationships from objects passed in.
// Removes related items from R.LanguageDataPlatformQuotationsPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformLanguageLanguageDatum) RemoveLanguageDataPlatformQuotationsPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformQuotationsPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Language, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Language")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LanguageDataPlatformQuotationsPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.LanguageDataPlatformQuotationsPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.LanguageDataPlatformQuotationsPartnerData[i] = o.R.LanguageDataPlatformQuotationsPartnerData[ln-1]
			}
			o.R.LanguageDataPlatformQuotationsPartnerData = o.R.LanguageDataPlatformQuotationsPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddLanguageDataPlatformSpecTypeSpecTypeTextData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformSpecTypeSpecTypeTextData.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformSpecTypeSpecTypeTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSpecTypeSpecTypeTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_spec_type_spec_type_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.SpecType, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformSpecTypeSpecTypeTextData: related,
		}
	} else {
		o.R.LanguageDataPlatformSpecTypeSpecTypeTextData = append(o.R.LanguageDataPlatformSpecTypeSpecTypeTextData, related...)
	}

	return nil
}

// DataPlatformLanguageLanguageData retrieves all the records using an executor.
func DataPlatformLanguageLanguageData(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	mods = append(mods, qm.From("`data_platform_language_language_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_language_language_data`.*"})
	}

	return dataPlatformLanguageLanguageDatumQuery{q}
}

// FindDataPlatformLanguageLanguageDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, language string, selectCols ...string) (*DataPlatformLanguageLanguageDatum, error) {
	dataPlatformLanguageLanguageDatumObj := &DataPlatformLanguageLanguageDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_language_language_data` where `Language`=?", sel,
	)

	q := queries.Raw(query, language)

	err := q.Bind(ctx, exec, dataPlatformLanguageLanguageDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_language_language_data")
	}

	return dataPlatformLanguageLanguageDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformLanguageLanguageDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_language_language_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformLanguageLanguageDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformLanguageLanguageDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformLanguageLanguageDatumInsertCache[key]
	dataPlatformLanguageLanguageDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformLanguageLanguageDatumAllColumns,
			dataPlatformLanguageLanguageDatumColumnsWithDefault,
			dataPlatformLanguageLanguageDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_language_language_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_language_language_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_language_language_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformLanguageLanguageDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_language_language_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Language,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_language_language_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformLanguageLanguageDatumInsertCacheMut.Lock()
		dataPlatformLanguageLanguageDatumInsertCache[key] = cache
		dataPlatformLanguageLanguageDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformLanguageLanguageDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformLanguageLanguageDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformLanguageLanguageDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformLanguageLanguageDatumUpdateCache[key]
	dataPlatformLanguageLanguageDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformLanguageLanguageDatumAllColumns,
			dataPlatformLanguageLanguageDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_language_language_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_language_language_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformLanguageLanguageDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, append(wl, dataPlatformLanguageLanguageDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_language_language_data row")
	}

	if !cached {
		dataPlatformLanguageLanguageDatumUpdateCacheMut.Lock()
		dataPlatformLanguageLanguageDatumUpdateCache[key] = cache
		dataPlatformLanguageLanguageDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformLanguageLanguageDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_language_language_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformLanguageLanguageDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformLanguageLanguageDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_language_language_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformLanguageLanguageDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformLanguageLanguageDatum slice")
	}

	return nil
}

var mySQLDataPlatformLanguageLanguageDatumUniqueColumns = []string{
	"Language",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformLanguageLanguageDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_language_language_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformLanguageLanguageDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformLanguageLanguageDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformLanguageLanguageDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformLanguageLanguageDatumUpsertCache[key]
	dataPlatformLanguageLanguageDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformLanguageLanguageDatumAllColumns,
			dataPlatformLanguageLanguageDatumColumnsWithDefault,
			dataPlatformLanguageLanguageDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformLanguageLanguageDatumAllColumns,
			dataPlatformLanguageLanguageDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_language_language_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_language_language_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_language_language_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_language_language_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_language_language_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_language_language_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformLanguageLanguageDatumUpsertCacheMut.Lock()
		dataPlatformLanguageLanguageDatumUpsertCache[key] = cache
		dataPlatformLanguageLanguageDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformLanguageLanguageDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformLanguageLanguageDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformLanguageLanguageDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformLanguageLanguageDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_language_language_data` WHERE `Language`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_language_language_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformLanguageLanguageDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformLanguageLanguageDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_language_language_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformLanguageLanguageDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformLanguageLanguageDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_language_language_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformLanguageLanguageDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformLanguageLanguageDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformLanguageLanguageDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformLanguageLanguageDatum(ctx, exec, o.Language)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformLanguageLanguageDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformLanguageLanguageDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformLanguageLanguageDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_language_language_data`.* FROM `data_platform_language_language_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformLanguageLanguageDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformLanguageLanguageDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformLanguageLanguageDatumExists checks if the DataPlatformLanguageLanguageDatum row exists.
func DataPlatformLanguageLanguageDatumExists(ctx context.Context, exec boil.ContextExecutor, language string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_language_language_data` where `Language`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, language)
	}
	row := exec.QueryRowContext(ctx, sql, language)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_language_language_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformLanguageLanguageDatum row exists.
func (o *DataPlatformLanguageLanguageDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformLanguageLanguageDatumExists(ctx, exec, o.Language)
}
