// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformLanguageLanguageDatum is an object representing the database table.
type DataPlatformLanguageLanguageDatum struct {
	Language string `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`

	R *dataPlatformLanguageLanguageDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformLanguageLanguageDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformLanguageLanguageDatumColumns = struct {
	Language string
}{
	Language: "Language",
}

var DataPlatformLanguageLanguageDatumTableColumns = struct {
	Language string
}{
	Language: "data_platform_language_language_data.Language",
}

// Generated where

var DataPlatformLanguageLanguageDatumWhere = struct {
	Language whereHelperstring
}{
	Language: whereHelperstring{field: "`data_platform_language_language_data`.`Language`"},
}

// DataPlatformLanguageLanguageDatumRels is where relationship names are stored.
var DataPlatformLanguageLanguageDatumRels = struct {
	LanguageDataPlatformBusinessPartnerGeneralData             string
	LanguageDataPlatformOrdersHeaderPartnerData                string
	LanguageDataPlatformPartnerFunctionPartnerFunctionTextData string
	LanguageDataPlatformPlantGeneralData                       string
	LanguageDataPlatformProductMasterProductDescriptionData    string
}{
	LanguageDataPlatformBusinessPartnerGeneralData:             "LanguageDataPlatformBusinessPartnerGeneralData",
	LanguageDataPlatformOrdersHeaderPartnerData:                "LanguageDataPlatformOrdersHeaderPartnerData",
	LanguageDataPlatformPartnerFunctionPartnerFunctionTextData: "LanguageDataPlatformPartnerFunctionPartnerFunctionTextData",
	LanguageDataPlatformPlantGeneralData:                       "LanguageDataPlatformPlantGeneralData",
	LanguageDataPlatformProductMasterProductDescriptionData:    "LanguageDataPlatformProductMasterProductDescriptionData",
}

// dataPlatformLanguageLanguageDatumR is where relationships are stored.
type dataPlatformLanguageLanguageDatumR struct {
	LanguageDataPlatformBusinessPartnerGeneralData             DataPlatformBusinessPartnerGeneralDatumSlice             `boil:"LanguageDataPlatformBusinessPartnerGeneralData" json:"LanguageDataPlatformBusinessPartnerGeneralData" toml:"LanguageDataPlatformBusinessPartnerGeneralData" yaml:"LanguageDataPlatformBusinessPartnerGeneralData"`
	LanguageDataPlatformOrdersHeaderPartnerData                DataPlatformOrdersHeaderPartnerDatumSlice                `boil:"LanguageDataPlatformOrdersHeaderPartnerData" json:"LanguageDataPlatformOrdersHeaderPartnerData" toml:"LanguageDataPlatformOrdersHeaderPartnerData" yaml:"LanguageDataPlatformOrdersHeaderPartnerData"`
	LanguageDataPlatformPartnerFunctionPartnerFunctionTextData DataPlatformPartnerFunctionPartnerFunctionTextDatumSlice `boil:"LanguageDataPlatformPartnerFunctionPartnerFunctionTextData" json:"LanguageDataPlatformPartnerFunctionPartnerFunctionTextData" toml:"LanguageDataPlatformPartnerFunctionPartnerFunctionTextData" yaml:"LanguageDataPlatformPartnerFunctionPartnerFunctionTextData"`
	LanguageDataPlatformPlantGeneralData                       DataPlatformPlantGeneralDatumSlice                       `boil:"LanguageDataPlatformPlantGeneralData" json:"LanguageDataPlatformPlantGeneralData" toml:"LanguageDataPlatformPlantGeneralData" yaml:"LanguageDataPlatformPlantGeneralData"`
	LanguageDataPlatformProductMasterProductDescriptionData    DataPlatformProductMasterProductDescriptionDatumSlice    `boil:"LanguageDataPlatformProductMasterProductDescriptionData" json:"LanguageDataPlatformProductMasterProductDescriptionData" toml:"LanguageDataPlatformProductMasterProductDescriptionData" yaml:"LanguageDataPlatformProductMasterProductDescriptionData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformLanguageLanguageDatumR) NewStruct() *dataPlatformLanguageLanguageDatumR {
	return &dataPlatformLanguageLanguageDatumR{}
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformBusinessPartnerGeneralData() DataPlatformBusinessPartnerGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformBusinessPartnerGeneralData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformOrdersHeaderPartnerData() DataPlatformOrdersHeaderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformOrdersHeaderPartnerData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformPartnerFunctionPartnerFunctionTextData() DataPlatformPartnerFunctionPartnerFunctionTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformPlantGeneralData() DataPlatformPlantGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformPlantGeneralData
}

func (r *dataPlatformLanguageLanguageDatumR) GetLanguageDataPlatformProductMasterProductDescriptionData() DataPlatformProductMasterProductDescriptionDatumSlice {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformProductMasterProductDescriptionData
}

// dataPlatformLanguageLanguageDatumL is where Load methods for each relationship are stored.
type dataPlatformLanguageLanguageDatumL struct{}

var (
	dataPlatformLanguageLanguageDatumAllColumns            = []string{"Language"}
	dataPlatformLanguageLanguageDatumColumnsWithoutDefault = []string{"Language"}
	dataPlatformLanguageLanguageDatumColumnsWithDefault    = []string{}
	dataPlatformLanguageLanguageDatumPrimaryKeyColumns     = []string{"Language"}
	dataPlatformLanguageLanguageDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformLanguageLanguageDatumSlice is an alias for a slice of pointers to DataPlatformLanguageLanguageDatum.
	// This should almost always be used instead of []DataPlatformLanguageLanguageDatum.
	DataPlatformLanguageLanguageDatumSlice []*DataPlatformLanguageLanguageDatum
	// DataPlatformLanguageLanguageDatumHook is the signature for custom DataPlatformLanguageLanguageDatum hook methods
	DataPlatformLanguageLanguageDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformLanguageLanguageDatum) error

	dataPlatformLanguageLanguageDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformLanguageLanguageDatumType                 = reflect.TypeOf(&DataPlatformLanguageLanguageDatum{})
	dataPlatformLanguageLanguageDatumMapping              = queries.MakeStructMapping(dataPlatformLanguageLanguageDatumType)
	dataPlatformLanguageLanguageDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, dataPlatformLanguageLanguageDatumPrimaryKeyColumns)
	dataPlatformLanguageLanguageDatumInsertCacheMut       sync.RWMutex
	dataPlatformLanguageLanguageDatumInsertCache          = make(map[string]insertCache)
	dataPlatformLanguageLanguageDatumUpdateCacheMut       sync.RWMutex
	dataPlatformLanguageLanguageDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformLanguageLanguageDatumUpsertCacheMut       sync.RWMutex
	dataPlatformLanguageLanguageDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformLanguageLanguageDatumAfterSelectHooks []DataPlatformLanguageLanguageDatumHook

var dataPlatformLanguageLanguageDatumBeforeInsertHooks []DataPlatformLanguageLanguageDatumHook
var dataPlatformLanguageLanguageDatumAfterInsertHooks []DataPlatformLanguageLanguageDatumHook

var dataPlatformLanguageLanguageDatumBeforeUpdateHooks []DataPlatformLanguageLanguageDatumHook
var dataPlatformLanguageLanguageDatumAfterUpdateHooks []DataPlatformLanguageLanguageDatumHook

var dataPlatformLanguageLanguageDatumBeforeDeleteHooks []DataPlatformLanguageLanguageDatumHook
var dataPlatformLanguageLanguageDatumAfterDeleteHooks []DataPlatformLanguageLanguageDatumHook

var dataPlatformLanguageLanguageDatumBeforeUpsertHooks []DataPlatformLanguageLanguageDatumHook
var dataPlatformLanguageLanguageDatumAfterUpsertHooks []DataPlatformLanguageLanguageDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformLanguageLanguageDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformLanguageLanguageDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformLanguageLanguageDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformLanguageLanguageDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformLanguageLanguageDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformLanguageLanguageDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformLanguageLanguageDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformLanguageLanguageDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformLanguageLanguageDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformLanguageLanguageDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformLanguageLanguageDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformLanguageLanguageDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformLanguageLanguageDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformLanguageLanguageDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformLanguageLanguageDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformLanguageLanguageDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformLanguageLanguageDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformLanguageLanguageDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformLanguageLanguageDatumHook registers your hook function for all future operations.
func AddDataPlatformLanguageLanguageDatumHook(hookPoint boil.HookPoint, dataPlatformLanguageLanguageDatumHook DataPlatformLanguageLanguageDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformLanguageLanguageDatumAfterSelectHooks = append(dataPlatformLanguageLanguageDatumAfterSelectHooks, dataPlatformLanguageLanguageDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformLanguageLanguageDatumBeforeInsertHooks = append(dataPlatformLanguageLanguageDatumBeforeInsertHooks, dataPlatformLanguageLanguageDatumHook)
	case boil.AfterInsertHook:
		dataPlatformLanguageLanguageDatumAfterInsertHooks = append(dataPlatformLanguageLanguageDatumAfterInsertHooks, dataPlatformLanguageLanguageDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformLanguageLanguageDatumBeforeUpdateHooks = append(dataPlatformLanguageLanguageDatumBeforeUpdateHooks, dataPlatformLanguageLanguageDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformLanguageLanguageDatumAfterUpdateHooks = append(dataPlatformLanguageLanguageDatumAfterUpdateHooks, dataPlatformLanguageLanguageDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformLanguageLanguageDatumBeforeDeleteHooks = append(dataPlatformLanguageLanguageDatumBeforeDeleteHooks, dataPlatformLanguageLanguageDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformLanguageLanguageDatumAfterDeleteHooks = append(dataPlatformLanguageLanguageDatumAfterDeleteHooks, dataPlatformLanguageLanguageDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformLanguageLanguageDatumBeforeUpsertHooks = append(dataPlatformLanguageLanguageDatumBeforeUpsertHooks, dataPlatformLanguageLanguageDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformLanguageLanguageDatumAfterUpsertHooks = append(dataPlatformLanguageLanguageDatumAfterUpsertHooks, dataPlatformLanguageLanguageDatumHook)
	}
}

// One returns a single dataPlatformLanguageLanguageDatum record from the query.
func (q dataPlatformLanguageLanguageDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformLanguageLanguageDatum, error) {
	o := &DataPlatformLanguageLanguageDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_language_language_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformLanguageLanguageDatum records from the query.
func (q dataPlatformLanguageLanguageDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformLanguageLanguageDatumSlice, error) {
	var o []*DataPlatformLanguageLanguageDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformLanguageLanguageDatum slice")
	}

	if len(dataPlatformLanguageLanguageDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformLanguageLanguageDatum records in the query.
func (q dataPlatformLanguageLanguageDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_language_language_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformLanguageLanguageDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_language_language_data exists")
	}

	return count > 0, nil
}

// LanguageDataPlatformBusinessPartnerGeneralData retrieves all the data_platform_business_partner_general_datum's DataPlatformBusinessPartnerGeneralData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformBusinessPartnerGeneralData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_general_data`.`Language`=?", o.Language),
	)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// LanguageDataPlatformOrdersHeaderPartnerData retrieves all the data_platform_orders_header_partner_datum's DataPlatformOrdersHeaderPartnerData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformOrdersHeaderPartnerData(mods ...qm.QueryMod) dataPlatformOrdersHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_partner_data`.`Language`=?", o.Language),
	)

	return DataPlatformOrdersHeaderPartnerData(queryMods...)
}

// LanguageDataPlatformPartnerFunctionPartnerFunctionTextData retrieves all the data_platform_partner_function_partner_function_text_datum's DataPlatformPartnerFunctionPartnerFunctionTextData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformPartnerFunctionPartnerFunctionTextData(mods ...qm.QueryMod) dataPlatformPartnerFunctionPartnerFunctionTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_partner_function_partner_function_text_data`.`Language`=?", o.Language),
	)

	return DataPlatformPartnerFunctionPartnerFunctionTextData(queryMods...)
}

// LanguageDataPlatformPlantGeneralData retrieves all the data_platform_plant_general_datum's DataPlatformPlantGeneralData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformPlantGeneralData(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_plant_general_data`.`Language`=?", o.Language),
	)

	return DataPlatformPlantGeneralData(queryMods...)
}

// LanguageDataPlatformProductMasterProductDescriptionData retrieves all the data_platform_product_master_product_description_datum's DataPlatformProductMasterProductDescriptionData with an executor via Language column.
func (o *DataPlatformLanguageLanguageDatum) LanguageDataPlatformProductMasterProductDescriptionData(mods ...qm.QueryMod) dataPlatformProductMasterProductDescriptionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_product_description_data`.`Language`=?", o.Language),
	)

	return DataPlatformProductMasterProductDescriptionData(queryMods...)
}

// LoadLanguageDataPlatformBusinessPartnerGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformBusinessPartnerGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_general_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LanguageDataPlatformBusinessPartnerGeneralData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}
			foreign.R.LanguageDataPlatformLanguageLanguageDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformBusinessPartnerGeneralData = append(local.R.LanguageDataPlatformBusinessPartnerGeneralData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
				}
				foreign.R.LanguageDataPlatformLanguageLanguageDatum = local
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformOrdersHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformOrdersHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Language) {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_partner_data`),
		qm.WhereIn(`data_platform_orders_header_partner_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_partner_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_partner_data")
	}

	if len(dataPlatformOrdersHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LanguageDataPlatformOrdersHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}
			foreign.R.LanguageDataPlatformLanguageLanguageDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Language, foreign.Language) {
				local.R.LanguageDataPlatformOrdersHeaderPartnerData = append(local.R.LanguageDataPlatformOrdersHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformOrdersHeaderPartnerDatumR{}
				}
				foreign.R.LanguageDataPlatformLanguageLanguageDatum = local
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformPartnerFunctionPartnerFunctionTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformPartnerFunctionPartnerFunctionTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_partner_function_partner_function_text_data`),
		qm.WhereIn(`data_platform_partner_function_partner_function_text_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_partner_function_partner_function_text_data")
	}

	var resultSlice []*DataPlatformPartnerFunctionPartnerFunctionTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_partner_function_partner_function_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_partner_function_partner_function_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_partner_function_partner_function_text_data")
	}

	if len(dataPlatformPartnerFunctionPartnerFunctionTextDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformPartnerFunctionPartnerFunctionTextDatumR{}
			}
			foreign.R.LanguageDataPlatformLanguageLanguageDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData = append(local.R.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformPartnerFunctionPartnerFunctionTextDatumR{}
				}
				foreign.R.LanguageDataPlatformLanguageLanguageDatum = local
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformPlantGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformPlantGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_plant_general_data")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_plant_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(dataPlatformPlantGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LanguageDataPlatformPlantGeneralData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformPlantGeneralDatumR{}
			}
			foreign.R.LanguageDataPlatformLanguageLanguageDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformPlantGeneralData = append(local.R.LanguageDataPlatformPlantGeneralData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformPlantGeneralDatumR{}
				}
				foreign.R.LanguageDataPlatformLanguageLanguageDatum = local
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformProductMasterProductDescriptionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformLanguageLanguageDatumL) LoadLanguageDataPlatformProductMasterProductDescriptionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformLanguageLanguageDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformLanguageLanguageDatum
	var object *DataPlatformLanguageLanguageDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformLanguageLanguageDatum.(*DataPlatformLanguageLanguageDatum)
		if !ok {
			object = new(DataPlatformLanguageLanguageDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformLanguageLanguageDatum.(*[]*DataPlatformLanguageLanguageDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformLanguageLanguageDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformLanguageLanguageDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformLanguageLanguageDatumR{}
		}
		args = append(args, object.Language)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformLanguageLanguageDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_product_description_data`),
		qm.WhereIn(`data_platform_product_master_product_description_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_product_description_data")
	}

	var resultSlice []*DataPlatformProductMasterProductDescriptionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_product_description_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_product_description_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_product_description_data")
	}

	if len(dataPlatformProductMasterProductDescriptionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LanguageDataPlatformProductMasterProductDescriptionData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterProductDescriptionDatumR{}
			}
			foreign.R.LanguageDataPlatformLanguageLanguageDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformProductMasterProductDescriptionData = append(local.R.LanguageDataPlatformProductMasterProductDescriptionData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterProductDescriptionDatumR{}
				}
				foreign.R.LanguageDataPlatformLanguageLanguageDatum = local
				break
			}
		}
	}

	return nil
}

// AddLanguageDataPlatformBusinessPartnerGeneralData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformBusinessPartnerGeneralData.
// Sets related.R.LanguageDataPlatformLanguageLanguageDatum appropriately.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformBusinessPartnerGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformBusinessPartnerGeneralData: related,
		}
	} else {
		o.R.LanguageDataPlatformBusinessPartnerGeneralData = append(o.R.LanguageDataPlatformBusinessPartnerGeneralData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerGeneralDatumR{
				LanguageDataPlatformLanguageLanguageDatum: o,
			}
		} else {
			rel.R.LanguageDataPlatformLanguageLanguageDatum = o
		}
	}
	return nil
}

// AddLanguageDataPlatformOrdersHeaderPartnerData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformOrdersHeaderPartnerData.
// Sets related.R.LanguageDataPlatformLanguageLanguageDatum appropriately.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformOrdersHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Language, o.Language)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.OrderID, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Language, o.Language)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformOrdersHeaderPartnerData: related,
		}
	} else {
		o.R.LanguageDataPlatformOrdersHeaderPartnerData = append(o.R.LanguageDataPlatformOrdersHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformOrdersHeaderPartnerDatumR{
				LanguageDataPlatformLanguageLanguageDatum: o,
			}
		} else {
			rel.R.LanguageDataPlatformLanguageLanguageDatum = o
		}
	}
	return nil
}

// SetLanguageDataPlatformOrdersHeaderPartnerData removes all previously related items of the
// data_platform_language_language_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum's LanguageDataPlatformOrdersHeaderPartnerData accordingly.
// Replaces o.R.LanguageDataPlatformOrdersHeaderPartnerData with related.
// Sets related.R.LanguageDataPlatformLanguageLanguageDatum's LanguageDataPlatformOrdersHeaderPartnerData accordingly.
func (o *DataPlatformLanguageLanguageDatum) SetLanguageDataPlatformOrdersHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderPartnerDatum) error {
	query := "update `data_platform_orders_header_partner_data` set `Language` = null where `Language` = ?"
	values := []interface{}{o.Language}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.LanguageDataPlatformOrdersHeaderPartnerData {
			queries.SetScanner(&rel.Language, nil)
			if rel.R == nil {
				continue
			}

			rel.R.LanguageDataPlatformLanguageLanguageDatum = nil
		}
		o.R.LanguageDataPlatformOrdersHeaderPartnerData = nil
	}

	return o.AddLanguageDataPlatformOrdersHeaderPartnerData(ctx, exec, insert, related...)
}

// RemoveLanguageDataPlatformOrdersHeaderPartnerData relationships from objects passed in.
// Removes related items from R.LanguageDataPlatformOrdersHeaderPartnerData (uses pointer comparison, removal does not keep order)
// Sets related.R.LanguageDataPlatformLanguageLanguageDatum.
func (o *DataPlatformLanguageLanguageDatum) RemoveLanguageDataPlatformOrdersHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersHeaderPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Language, nil)
		if rel.R != nil {
			rel.R.LanguageDataPlatformLanguageLanguageDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("Language")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LanguageDataPlatformOrdersHeaderPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.LanguageDataPlatformOrdersHeaderPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.LanguageDataPlatformOrdersHeaderPartnerData[i] = o.R.LanguageDataPlatformOrdersHeaderPartnerData[ln-1]
			}
			o.R.LanguageDataPlatformOrdersHeaderPartnerData = o.R.LanguageDataPlatformOrdersHeaderPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddLanguageDataPlatformPartnerFunctionPartnerFunctionTextData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData.
// Sets related.R.LanguageDataPlatformLanguageLanguageDatum appropriately.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformPartnerFunctionPartnerFunctionTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPartnerFunctionPartnerFunctionTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_partner_function_partner_function_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPartnerFunctionPartnerFunctionTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.PartnerFunction, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformPartnerFunctionPartnerFunctionTextData: related,
		}
	} else {
		o.R.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData = append(o.R.LanguageDataPlatformPartnerFunctionPartnerFunctionTextData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformPartnerFunctionPartnerFunctionTextDatumR{
				LanguageDataPlatformLanguageLanguageDatum: o,
			}
		} else {
			rel.R.LanguageDataPlatformLanguageLanguageDatum = o
		}
	}
	return nil
}

// AddLanguageDataPlatformPlantGeneralData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformPlantGeneralData.
// Sets related.R.LanguageDataPlatformLanguageLanguageDatum appropriately.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlantGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformPlantGeneralData: related,
		}
	} else {
		o.R.LanguageDataPlatformPlantGeneralData = append(o.R.LanguageDataPlatformPlantGeneralData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformPlantGeneralDatumR{
				LanguageDataPlatformLanguageLanguageDatum: o,
			}
		} else {
			rel.R.LanguageDataPlatformLanguageLanguageDatum = o
		}
	}
	return nil
}

// AddLanguageDataPlatformProductMasterProductDescriptionData adds the given related objects to the existing relationships
// of the data_platform_language_language_datum, optionally inserting them as new records.
// Appends related to o.R.LanguageDataPlatformProductMasterProductDescriptionData.
// Sets related.R.LanguageDataPlatformLanguageLanguageDatum appropriately.
func (o *DataPlatformLanguageLanguageDatum) AddLanguageDataPlatformProductMasterProductDescriptionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterProductDescriptionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Language = o.Language
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_product_description_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductDescriptionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Language, rel.Product, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Language = o.Language
		}
	}

	if o.R == nil {
		o.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformProductMasterProductDescriptionData: related,
		}
	} else {
		o.R.LanguageDataPlatformProductMasterProductDescriptionData = append(o.R.LanguageDataPlatformProductMasterProductDescriptionData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterProductDescriptionDatumR{
				LanguageDataPlatformLanguageLanguageDatum: o,
			}
		} else {
			rel.R.LanguageDataPlatformLanguageLanguageDatum = o
		}
	}
	return nil
}

// DataPlatformLanguageLanguageData retrieves all the records using an executor.
func DataPlatformLanguageLanguageData(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	mods = append(mods, qm.From("`data_platform_language_language_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_language_language_data`.*"})
	}

	return dataPlatformLanguageLanguageDatumQuery{q}
}

// FindDataPlatformLanguageLanguageDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, language string, selectCols ...string) (*DataPlatformLanguageLanguageDatum, error) {
	dataPlatformLanguageLanguageDatumObj := &DataPlatformLanguageLanguageDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_language_language_data` where `Language`=?", sel,
	)

	q := queries.Raw(query, language)

	err := q.Bind(ctx, exec, dataPlatformLanguageLanguageDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_language_language_data")
	}

	if err = dataPlatformLanguageLanguageDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformLanguageLanguageDatumObj, err
	}

	return dataPlatformLanguageLanguageDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformLanguageLanguageDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_language_language_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformLanguageLanguageDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformLanguageLanguageDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformLanguageLanguageDatumInsertCache[key]
	dataPlatformLanguageLanguageDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformLanguageLanguageDatumAllColumns,
			dataPlatformLanguageLanguageDatumColumnsWithDefault,
			dataPlatformLanguageLanguageDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_language_language_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_language_language_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_language_language_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformLanguageLanguageDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_language_language_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Language,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_language_language_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformLanguageLanguageDatumInsertCacheMut.Lock()
		dataPlatformLanguageLanguageDatumInsertCache[key] = cache
		dataPlatformLanguageLanguageDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformLanguageLanguageDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformLanguageLanguageDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformLanguageLanguageDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformLanguageLanguageDatumUpdateCache[key]
	dataPlatformLanguageLanguageDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformLanguageLanguageDatumAllColumns,
			dataPlatformLanguageLanguageDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_language_language_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_language_language_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformLanguageLanguageDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, append(wl, dataPlatformLanguageLanguageDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_language_language_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_language_language_data")
	}

	if !cached {
		dataPlatformLanguageLanguageDatumUpdateCacheMut.Lock()
		dataPlatformLanguageLanguageDatumUpdateCache[key] = cache
		dataPlatformLanguageLanguageDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformLanguageLanguageDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_language_language_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_language_language_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformLanguageLanguageDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformLanguageLanguageDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_language_language_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformLanguageLanguageDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformLanguageLanguageDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformLanguageLanguageDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformLanguageLanguageDatumUniqueColumns = []string{
	"Language",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformLanguageLanguageDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_language_language_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformLanguageLanguageDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformLanguageLanguageDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformLanguageLanguageDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformLanguageLanguageDatumUpsertCache[key]
	dataPlatformLanguageLanguageDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformLanguageLanguageDatumAllColumns,
			dataPlatformLanguageLanguageDatumColumnsWithDefault,
			dataPlatformLanguageLanguageDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformLanguageLanguageDatumAllColumns,
			dataPlatformLanguageLanguageDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_language_language_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_language_language_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_language_language_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_language_language_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformLanguageLanguageDatumType, dataPlatformLanguageLanguageDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_language_language_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_language_language_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformLanguageLanguageDatumUpsertCacheMut.Lock()
		dataPlatformLanguageLanguageDatumUpsertCache[key] = cache
		dataPlatformLanguageLanguageDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformLanguageLanguageDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformLanguageLanguageDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformLanguageLanguageDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformLanguageLanguageDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_language_language_data` WHERE `Language`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_language_language_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_language_language_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformLanguageLanguageDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformLanguageLanguageDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_language_language_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_language_language_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformLanguageLanguageDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformLanguageLanguageDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformLanguageLanguageDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_language_language_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformLanguageLanguageDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformLanguageLanguageDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_language_language_data")
	}

	if len(dataPlatformLanguageLanguageDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformLanguageLanguageDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformLanguageLanguageDatum(ctx, exec, o.Language)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformLanguageLanguageDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformLanguageLanguageDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformLanguageLanguageDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_language_language_data`.* FROM `data_platform_language_language_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformLanguageLanguageDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformLanguageLanguageDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformLanguageLanguageDatumExists checks if the DataPlatformLanguageLanguageDatum row exists.
func DataPlatformLanguageLanguageDatumExists(ctx context.Context, exec boil.ContextExecutor, language string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_language_language_data` where `Language`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, language)
	}
	row := exec.QueryRowContext(ctx, sql, language)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_language_language_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformLanguageLanguageDatum row exists.
func (o *DataPlatformLanguageLanguageDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformLanguageLanguageDatumExists(ctx, exec, o.Language)
}
