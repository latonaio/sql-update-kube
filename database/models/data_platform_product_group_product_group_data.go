// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductGroupProductGroupDatum is an object representing the database table.
type DataPlatformProductGroupProductGroupDatum struct {
	ProductGroup string `boil:"ProductGroup" json:"ProductGroup" toml:"ProductGroup" yaml:"ProductGroup"`

	R *dataPlatformProductGroupProductGroupDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductGroupProductGroupDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductGroupProductGroupDatumColumns = struct {
	ProductGroup string
}{
	ProductGroup: "ProductGroup",
}

var DataPlatformProductGroupProductGroupDatumTableColumns = struct {
	ProductGroup string
}{
	ProductGroup: "data_platform_product_group_product_group_data.ProductGroup",
}

// Generated where

var DataPlatformProductGroupProductGroupDatumWhere = struct {
	ProductGroup whereHelperstring
}{
	ProductGroup: whereHelperstring{field: "`data_platform_product_group_product_group_data`.`ProductGroup`"},
}

// DataPlatformProductGroupProductGroupDatumRels is where relationship names are stored.
var DataPlatformProductGroupProductGroupDatumRels = struct {
	ProductGroupDataPlatformDeliveryDocumentItemData    string
	ProductGroupDataPlatformInvoiceDocumentItemData     string
	ProductGroupDataPlatformOrdersItemData              string
	ProductGroupDataPlatformProductMasterGeneralData    string
	ProductGroupDataPlatformPurchaseRequisitionItemData string
}{
	ProductGroupDataPlatformDeliveryDocumentItemData:    "ProductGroupDataPlatformDeliveryDocumentItemData",
	ProductGroupDataPlatformInvoiceDocumentItemData:     "ProductGroupDataPlatformInvoiceDocumentItemData",
	ProductGroupDataPlatformOrdersItemData:              "ProductGroupDataPlatformOrdersItemData",
	ProductGroupDataPlatformProductMasterGeneralData:    "ProductGroupDataPlatformProductMasterGeneralData",
	ProductGroupDataPlatformPurchaseRequisitionItemData: "ProductGroupDataPlatformPurchaseRequisitionItemData",
}

// dataPlatformProductGroupProductGroupDatumR is where relationships are stored.
type dataPlatformProductGroupProductGroupDatumR struct {
	ProductGroupDataPlatformDeliveryDocumentItemData    DataPlatformDeliveryDocumentItemDatumSlice    `boil:"ProductGroupDataPlatformDeliveryDocumentItemData" json:"ProductGroupDataPlatformDeliveryDocumentItemData" toml:"ProductGroupDataPlatformDeliveryDocumentItemData" yaml:"ProductGroupDataPlatformDeliveryDocumentItemData"`
	ProductGroupDataPlatformInvoiceDocumentItemData     DataPlatformInvoiceDocumentItemDatumSlice     `boil:"ProductGroupDataPlatformInvoiceDocumentItemData" json:"ProductGroupDataPlatformInvoiceDocumentItemData" toml:"ProductGroupDataPlatformInvoiceDocumentItemData" yaml:"ProductGroupDataPlatformInvoiceDocumentItemData"`
	ProductGroupDataPlatformOrdersItemData              DataPlatformOrdersItemDatumSlice              `boil:"ProductGroupDataPlatformOrdersItemData" json:"ProductGroupDataPlatformOrdersItemData" toml:"ProductGroupDataPlatformOrdersItemData" yaml:"ProductGroupDataPlatformOrdersItemData"`
	ProductGroupDataPlatformProductMasterGeneralData    DataPlatformProductMasterGeneralDatumSlice    `boil:"ProductGroupDataPlatformProductMasterGeneralData" json:"ProductGroupDataPlatformProductMasterGeneralData" toml:"ProductGroupDataPlatformProductMasterGeneralData" yaml:"ProductGroupDataPlatformProductMasterGeneralData"`
	ProductGroupDataPlatformPurchaseRequisitionItemData DataPlatformPurchaseRequisitionItemDatumSlice `boil:"ProductGroupDataPlatformPurchaseRequisitionItemData" json:"ProductGroupDataPlatformPurchaseRequisitionItemData" toml:"ProductGroupDataPlatformPurchaseRequisitionItemData" yaml:"ProductGroupDataPlatformPurchaseRequisitionItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductGroupProductGroupDatumR) NewStruct() *dataPlatformProductGroupProductGroupDatumR {
	return &dataPlatformProductGroupProductGroupDatumR{}
}

func (r *dataPlatformProductGroupProductGroupDatumR) GetProductGroupDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductGroupDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformProductGroupProductGroupDatumR) GetProductGroupDataPlatformInvoiceDocumentItemData() DataPlatformInvoiceDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductGroupDataPlatformInvoiceDocumentItemData
}

func (r *dataPlatformProductGroupProductGroupDatumR) GetProductGroupDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductGroupDataPlatformOrdersItemData
}

func (r *dataPlatformProductGroupProductGroupDatumR) GetProductGroupDataPlatformProductMasterGeneralData() DataPlatformProductMasterGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductGroupDataPlatformProductMasterGeneralData
}

func (r *dataPlatformProductGroupProductGroupDatumR) GetProductGroupDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductGroupDataPlatformPurchaseRequisitionItemData
}

// dataPlatformProductGroupProductGroupDatumL is where Load methods for each relationship are stored.
type dataPlatformProductGroupProductGroupDatumL struct{}

var (
	dataPlatformProductGroupProductGroupDatumAllColumns            = []string{"ProductGroup"}
	dataPlatformProductGroupProductGroupDatumColumnsWithoutDefault = []string{"ProductGroup"}
	dataPlatformProductGroupProductGroupDatumColumnsWithDefault    = []string{}
	dataPlatformProductGroupProductGroupDatumPrimaryKeyColumns     = []string{"ProductGroup"}
	dataPlatformProductGroupProductGroupDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductGroupProductGroupDatumSlice is an alias for a slice of pointers to DataPlatformProductGroupProductGroupDatum.
	// This should almost always be used instead of []DataPlatformProductGroupProductGroupDatum.
	DataPlatformProductGroupProductGroupDatumSlice []*DataPlatformProductGroupProductGroupDatum

	dataPlatformProductGroupProductGroupDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductGroupProductGroupDatumType                 = reflect.TypeOf(&DataPlatformProductGroupProductGroupDatum{})
	dataPlatformProductGroupProductGroupDatumMapping              = queries.MakeStructMapping(dataPlatformProductGroupProductGroupDatumType)
	dataPlatformProductGroupProductGroupDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductGroupProductGroupDatumType, dataPlatformProductGroupProductGroupDatumMapping, dataPlatformProductGroupProductGroupDatumPrimaryKeyColumns)
	dataPlatformProductGroupProductGroupDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductGroupProductGroupDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductGroupProductGroupDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductGroupProductGroupDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductGroupProductGroupDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductGroupProductGroupDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductGroupProductGroupDatum record from the query.
func (q dataPlatformProductGroupProductGroupDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductGroupProductGroupDatum, error) {
	o := &DataPlatformProductGroupProductGroupDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_group_product_group_data")
	}

	return o, nil
}

// All returns all DataPlatformProductGroupProductGroupDatum records from the query.
func (q dataPlatformProductGroupProductGroupDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductGroupProductGroupDatumSlice, error) {
	var o []*DataPlatformProductGroupProductGroupDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductGroupProductGroupDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductGroupProductGroupDatum records in the query.
func (q dataPlatformProductGroupProductGroupDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_group_product_group_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductGroupProductGroupDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_group_product_group_data exists")
	}

	return count > 0, nil
}

// ProductGroupDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via ProductGroup column.
func (o *DataPlatformProductGroupProductGroupDatum) ProductGroupDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`ProductGroup`=?", o.ProductGroup),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// ProductGroupDataPlatformInvoiceDocumentItemData retrieves all the data_platform_invoice_document_item_datum's DataPlatformInvoiceDocumentItemData with an executor via ProductGroup column.
func (o *DataPlatformProductGroupProductGroupDatum) ProductGroupDataPlatformInvoiceDocumentItemData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_data`.`ProductGroup`=?", o.ProductGroup),
	)

	return DataPlatformInvoiceDocumentItemData(queryMods...)
}

// ProductGroupDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via ProductGroup column.
func (o *DataPlatformProductGroupProductGroupDatum) ProductGroupDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`ProductGroup`=?", o.ProductGroup),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// ProductGroupDataPlatformProductMasterGeneralData retrieves all the data_platform_product_master_general_datum's DataPlatformProductMasterGeneralData with an executor via ProductGroup column.
func (o *DataPlatformProductGroupProductGroupDatum) ProductGroupDataPlatformProductMasterGeneralData(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_general_data`.`ProductGroup`=?", o.ProductGroup),
	)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// ProductGroupDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via ProductGroup column.
func (o *DataPlatformProductGroupProductGroupDatum) ProductGroupDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`ProductGroup`=?", o.ProductGroup),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// LoadProductGroupDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductGroupProductGroupDatumL) LoadProductGroupDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductGroupProductGroupDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductGroupProductGroupDatum
	var object *DataPlatformProductGroupProductGroupDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductGroupProductGroupDatum.(*DataPlatformProductGroupProductGroupDatum)
		if !ok {
			object = new(DataPlatformProductGroupProductGroupDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductGroupProductGroupDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductGroupProductGroupDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductGroupProductGroupDatum.(*[]*DataPlatformProductGroupProductGroupDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductGroupProductGroupDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductGroupProductGroupDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductGroupProductGroupDatumR{}
		}
		args = append(args, object.ProductGroup)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductGroupProductGroupDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductGroup) {
					continue Outer
				}
			}

			args = append(args, obj.ProductGroup)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.ProductGroup in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.ProductGroupDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductGroup, foreign.ProductGroup) {
				local.R.ProductGroupDataPlatformDeliveryDocumentItemData = append(local.R.ProductGroupDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductGroupDataPlatformInvoiceDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductGroupProductGroupDatumL) LoadProductGroupDataPlatformInvoiceDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductGroupProductGroupDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductGroupProductGroupDatum
	var object *DataPlatformProductGroupProductGroupDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductGroupProductGroupDatum.(*DataPlatformProductGroupProductGroupDatum)
		if !ok {
			object = new(DataPlatformProductGroupProductGroupDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductGroupProductGroupDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductGroupProductGroupDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductGroupProductGroupDatum.(*[]*DataPlatformProductGroupProductGroupDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductGroupProductGroupDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductGroupProductGroupDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductGroupProductGroupDatumR{}
		}
		args = append(args, object.ProductGroup)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductGroupProductGroupDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductGroup) {
					continue Outer
				}
			}

			args = append(args, obj.ProductGroup)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_data`),
		qm.WhereIn(`data_platform_invoice_document_item_data.ProductGroup in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_data")
	}

	if singular {
		object.R.ProductGroupDataPlatformInvoiceDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductGroup, foreign.ProductGroup) {
				local.R.ProductGroupDataPlatformInvoiceDocumentItemData = append(local.R.ProductGroupDataPlatformInvoiceDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductGroupDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductGroupProductGroupDatumL) LoadProductGroupDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductGroupProductGroupDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductGroupProductGroupDatum
	var object *DataPlatformProductGroupProductGroupDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductGroupProductGroupDatum.(*DataPlatformProductGroupProductGroupDatum)
		if !ok {
			object = new(DataPlatformProductGroupProductGroupDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductGroupProductGroupDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductGroupProductGroupDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductGroupProductGroupDatum.(*[]*DataPlatformProductGroupProductGroupDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductGroupProductGroupDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductGroupProductGroupDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductGroupProductGroupDatumR{}
		}
		args = append(args, object.ProductGroup)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductGroupProductGroupDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductGroup) {
					continue Outer
				}
			}

			args = append(args, obj.ProductGroup)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.ProductGroup in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.ProductGroupDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductGroup, foreign.ProductGroup) {
				local.R.ProductGroupDataPlatformOrdersItemData = append(local.R.ProductGroupDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductGroupDataPlatformProductMasterGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductGroupProductGroupDatumL) LoadProductGroupDataPlatformProductMasterGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductGroupProductGroupDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductGroupProductGroupDatum
	var object *DataPlatformProductGroupProductGroupDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductGroupProductGroupDatum.(*DataPlatformProductGroupProductGroupDatum)
		if !ok {
			object = new(DataPlatformProductGroupProductGroupDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductGroupProductGroupDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductGroupProductGroupDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductGroupProductGroupDatum.(*[]*DataPlatformProductGroupProductGroupDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductGroupProductGroupDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductGroupProductGroupDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductGroupProductGroupDatumR{}
		}
		args = append(args, object.ProductGroup)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductGroupProductGroupDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductGroup) {
					continue Outer
				}
			}

			args = append(args, obj.ProductGroup)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.ProductGroup in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_general_data")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if singular {
		object.R.ProductGroupDataPlatformProductMasterGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductGroup, foreign.ProductGroup) {
				local.R.ProductGroupDataPlatformProductMasterGeneralData = append(local.R.ProductGroupDataPlatformProductMasterGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductGroupDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductGroupProductGroupDatumL) LoadProductGroupDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductGroupProductGroupDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductGroupProductGroupDatum
	var object *DataPlatformProductGroupProductGroupDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductGroupProductGroupDatum.(*DataPlatformProductGroupProductGroupDatum)
		if !ok {
			object = new(DataPlatformProductGroupProductGroupDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductGroupProductGroupDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductGroupProductGroupDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductGroupProductGroupDatum.(*[]*DataPlatformProductGroupProductGroupDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductGroupProductGroupDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductGroupProductGroupDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductGroupProductGroupDatumR{}
		}
		args = append(args, object.ProductGroup)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductGroupProductGroupDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductGroup) {
					continue Outer
				}
			}

			args = append(args, obj.ProductGroup)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.ProductGroup in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.ProductGroupDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductGroup, foreign.ProductGroup) {
				local.R.ProductGroupDataPlatformPurchaseRequisitionItemData = append(local.R.ProductGroupDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// AddProductGroupDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_product_group_product_group_datum, optionally inserting them as new records.
// Appends related to o.R.ProductGroupDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformProductGroupProductGroupDatum) AddProductGroupDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductGroup, o.ProductGroup)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductGroup"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductGroup, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductGroup, o.ProductGroup)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductGroupProductGroupDatumR{
			ProductGroupDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.ProductGroupDataPlatformDeliveryDocumentItemData = append(o.R.ProductGroupDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetProductGroupDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_product_group_product_group_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum's ProductGroupDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.ProductGroupDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformProductGroupProductGroupDatum) SetProductGroupDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `ProductGroup` = null where `ProductGroup` = ?"
	values := []interface{}{o.ProductGroup}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductGroupDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddProductGroupDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveProductGroupDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.ProductGroupDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductGroupProductGroupDatum) RemoveProductGroupDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductGroup, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductGroup")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductGroupDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductGroupDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductGroupDataPlatformDeliveryDocumentItemData[i] = o.R.ProductGroupDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.ProductGroupDataPlatformDeliveryDocumentItemData = o.R.ProductGroupDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductGroupDataPlatformInvoiceDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_product_group_product_group_datum, optionally inserting them as new records.
// Appends related to o.R.ProductGroupDataPlatformInvoiceDocumentItemData.
func (o *DataPlatformProductGroupProductGroupDatum) AddProductGroupDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductGroup, o.ProductGroup)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductGroup"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductGroup, rel.InvoiceDocument, rel.InvoiceDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductGroup, o.ProductGroup)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductGroupProductGroupDatumR{
			ProductGroupDataPlatformInvoiceDocumentItemData: related,
		}
	} else {
		o.R.ProductGroupDataPlatformInvoiceDocumentItemData = append(o.R.ProductGroupDataPlatformInvoiceDocumentItemData, related...)
	}

	return nil
}

// SetProductGroupDataPlatformInvoiceDocumentItemData removes all previously related items of the
// data_platform_product_group_product_group_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum's ProductGroupDataPlatformInvoiceDocumentItemData accordingly.
// Replaces o.R.ProductGroupDataPlatformInvoiceDocumentItemData with related.
func (o *DataPlatformProductGroupProductGroupDatum) SetProductGroupDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	query := "update `data_platform_invoice_document_item_data` set `ProductGroup` = null where `ProductGroup` = ?"
	values := []interface{}{o.ProductGroup}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductGroupDataPlatformInvoiceDocumentItemData = nil
	}

	return o.AddProductGroupDataPlatformInvoiceDocumentItemData(ctx, exec, insert, related...)
}

// RemoveProductGroupDataPlatformInvoiceDocumentItemData relationships from objects passed in.
// Removes related items from R.ProductGroupDataPlatformInvoiceDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductGroupProductGroupDatum) RemoveProductGroupDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductGroup, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductGroup")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductGroupDataPlatformInvoiceDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductGroupDataPlatformInvoiceDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductGroupDataPlatformInvoiceDocumentItemData[i] = o.R.ProductGroupDataPlatformInvoiceDocumentItemData[ln-1]
			}
			o.R.ProductGroupDataPlatformInvoiceDocumentItemData = o.R.ProductGroupDataPlatformInvoiceDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductGroupDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_product_group_product_group_datum, optionally inserting them as new records.
// Appends related to o.R.ProductGroupDataPlatformOrdersItemData.
func (o *DataPlatformProductGroupProductGroupDatum) AddProductGroupDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductGroup, o.ProductGroup)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductGroup"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductGroup, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductGroup, o.ProductGroup)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductGroupProductGroupDatumR{
			ProductGroupDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.ProductGroupDataPlatformOrdersItemData = append(o.R.ProductGroupDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetProductGroupDataPlatformOrdersItemData removes all previously related items of the
// data_platform_product_group_product_group_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum's ProductGroupDataPlatformOrdersItemData accordingly.
// Replaces o.R.ProductGroupDataPlatformOrdersItemData with related.
func (o *DataPlatformProductGroupProductGroupDatum) SetProductGroupDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `ProductGroup` = null where `ProductGroup` = ?"
	values := []interface{}{o.ProductGroup}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductGroupDataPlatformOrdersItemData = nil
	}

	return o.AddProductGroupDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveProductGroupDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.ProductGroupDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductGroupProductGroupDatum) RemoveProductGroupDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductGroup, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductGroup")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductGroupDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductGroupDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductGroupDataPlatformOrdersItemData[i] = o.R.ProductGroupDataPlatformOrdersItemData[ln-1]
			}
			o.R.ProductGroupDataPlatformOrdersItemData = o.R.ProductGroupDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductGroupDataPlatformProductMasterGeneralData adds the given related objects to the existing relationships
// of the data_platform_product_group_product_group_datum, optionally inserting them as new records.
// Appends related to o.R.ProductGroupDataPlatformProductMasterGeneralData.
func (o *DataPlatformProductGroupProductGroupDatum) AddProductGroupDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductGroup, o.ProductGroup)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductGroup"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductGroup, rel.Product}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductGroup, o.ProductGroup)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductGroupProductGroupDatumR{
			ProductGroupDataPlatformProductMasterGeneralData: related,
		}
	} else {
		o.R.ProductGroupDataPlatformProductMasterGeneralData = append(o.R.ProductGroupDataPlatformProductMasterGeneralData, related...)
	}

	return nil
}

// SetProductGroupDataPlatformProductMasterGeneralData removes all previously related items of the
// data_platform_product_group_product_group_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum's ProductGroupDataPlatformProductMasterGeneralData accordingly.
// Replaces o.R.ProductGroupDataPlatformProductMasterGeneralData with related.
func (o *DataPlatformProductGroupProductGroupDatum) SetProductGroupDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	query := "update `data_platform_product_master_general_data` set `ProductGroup` = null where `ProductGroup` = ?"
	values := []interface{}{o.ProductGroup}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductGroupDataPlatformProductMasterGeneralData = nil
	}

	return o.AddProductGroupDataPlatformProductMasterGeneralData(ctx, exec, insert, related...)
}

// RemoveProductGroupDataPlatformProductMasterGeneralData relationships from objects passed in.
// Removes related items from R.ProductGroupDataPlatformProductMasterGeneralData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductGroupProductGroupDatum) RemoveProductGroupDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductGroup, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductGroup")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductGroupDataPlatformProductMasterGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductGroupDataPlatformProductMasterGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.ProductGroupDataPlatformProductMasterGeneralData[i] = o.R.ProductGroupDataPlatformProductMasterGeneralData[ln-1]
			}
			o.R.ProductGroupDataPlatformProductMasterGeneralData = o.R.ProductGroupDataPlatformProductMasterGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductGroupDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_product_group_product_group_datum, optionally inserting them as new records.
// Appends related to o.R.ProductGroupDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformProductGroupProductGroupDatum) AddProductGroupDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductGroup, o.ProductGroup)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductGroup"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductGroup, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductGroup, o.ProductGroup)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductGroupProductGroupDatumR{
			ProductGroupDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.ProductGroupDataPlatformPurchaseRequisitionItemData = append(o.R.ProductGroupDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// SetProductGroupDataPlatformPurchaseRequisitionItemData removes all previously related items of the
// data_platform_product_group_product_group_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum's ProductGroupDataPlatformPurchaseRequisitionItemData accordingly.
// Replaces o.R.ProductGroupDataPlatformPurchaseRequisitionItemData with related.
func (o *DataPlatformProductGroupProductGroupDatum) SetProductGroupDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	query := "update `data_platform_purchase_requisition_item_data` set `ProductGroup` = null where `ProductGroup` = ?"
	values := []interface{}{o.ProductGroup}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductGroupDataPlatformPurchaseRequisitionItemData = nil
	}

	return o.AddProductGroupDataPlatformPurchaseRequisitionItemData(ctx, exec, insert, related...)
}

// RemoveProductGroupDataPlatformPurchaseRequisitionItemData relationships from objects passed in.
// Removes related items from R.ProductGroupDataPlatformPurchaseRequisitionItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductGroupProductGroupDatum) RemoveProductGroupDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductGroup, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductGroup")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductGroupDataPlatformPurchaseRequisitionItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductGroupDataPlatformPurchaseRequisitionItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductGroupDataPlatformPurchaseRequisitionItemData[i] = o.R.ProductGroupDataPlatformPurchaseRequisitionItemData[ln-1]
			}
			o.R.ProductGroupDataPlatformPurchaseRequisitionItemData = o.R.ProductGroupDataPlatformPurchaseRequisitionItemData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformProductGroupProductGroupData retrieves all the records using an executor.
func DataPlatformProductGroupProductGroupData(mods ...qm.QueryMod) dataPlatformProductGroupProductGroupDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_group_product_group_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_group_product_group_data`.*"})
	}

	return dataPlatformProductGroupProductGroupDatumQuery{q}
}

// FindDataPlatformProductGroupProductGroupDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductGroupProductGroupDatum(ctx context.Context, exec boil.ContextExecutor, productGroup string, selectCols ...string) (*DataPlatformProductGroupProductGroupDatum, error) {
	dataPlatformProductGroupProductGroupDatumObj := &DataPlatformProductGroupProductGroupDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_group_product_group_data` where `ProductGroup`=?", sel,
	)

	q := queries.Raw(query, productGroup)

	err := q.Bind(ctx, exec, dataPlatformProductGroupProductGroupDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_group_product_group_data")
	}

	return dataPlatformProductGroupProductGroupDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductGroupProductGroupDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_group_product_group_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductGroupProductGroupDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductGroupProductGroupDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductGroupProductGroupDatumInsertCache[key]
	dataPlatformProductGroupProductGroupDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductGroupProductGroupDatumAllColumns,
			dataPlatformProductGroupProductGroupDatumColumnsWithDefault,
			dataPlatformProductGroupProductGroupDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductGroupProductGroupDatumType, dataPlatformProductGroupProductGroupDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductGroupProductGroupDatumType, dataPlatformProductGroupProductGroupDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_group_product_group_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_group_product_group_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_group_product_group_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductGroupProductGroupDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_group_product_group_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductGroup,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_group_product_group_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductGroupProductGroupDatumInsertCacheMut.Lock()
		dataPlatformProductGroupProductGroupDatumInsertCache[key] = cache
		dataPlatformProductGroupProductGroupDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductGroupProductGroupDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductGroupProductGroupDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductGroupProductGroupDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductGroupProductGroupDatumUpdateCache[key]
	dataPlatformProductGroupProductGroupDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductGroupProductGroupDatumAllColumns,
			dataPlatformProductGroupProductGroupDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_group_product_group_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_group_product_group_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductGroupProductGroupDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductGroupProductGroupDatumType, dataPlatformProductGroupProductGroupDatumMapping, append(wl, dataPlatformProductGroupProductGroupDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_group_product_group_data row")
	}

	if !cached {
		dataPlatformProductGroupProductGroupDatumUpdateCacheMut.Lock()
		dataPlatformProductGroupProductGroupDatumUpdateCache[key] = cache
		dataPlatformProductGroupProductGroupDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductGroupProductGroupDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_group_product_group_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductGroupProductGroupDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductGroupProductGroupDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_group_product_group_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductGroupProductGroupDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductGroupProductGroupDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductGroupProductGroupDatumUniqueColumns = []string{
	"ProductGroup",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductGroupProductGroupDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_group_product_group_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductGroupProductGroupDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductGroupProductGroupDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductGroupProductGroupDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductGroupProductGroupDatumUpsertCache[key]
	dataPlatformProductGroupProductGroupDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductGroupProductGroupDatumAllColumns,
			dataPlatformProductGroupProductGroupDatumColumnsWithDefault,
			dataPlatformProductGroupProductGroupDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductGroupProductGroupDatumAllColumns,
			dataPlatformProductGroupProductGroupDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_group_product_group_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_group_product_group_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_group_product_group_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductGroupProductGroupDatumType, dataPlatformProductGroupProductGroupDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductGroupProductGroupDatumType, dataPlatformProductGroupProductGroupDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_group_product_group_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductGroupProductGroupDatumType, dataPlatformProductGroupProductGroupDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_group_product_group_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_group_product_group_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductGroupProductGroupDatumUpsertCacheMut.Lock()
		dataPlatformProductGroupProductGroupDatumUpsertCache[key] = cache
		dataPlatformProductGroupProductGroupDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductGroupProductGroupDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductGroupProductGroupDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductGroupProductGroupDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductGroupProductGroupDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_group_product_group_data` WHERE `ProductGroup`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_group_product_group_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductGroupProductGroupDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductGroupProductGroupDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_group_product_group_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductGroupProductGroupDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductGroupProductGroupDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_group_product_group_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductGroupProductGroupDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductGroupProductGroupDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductGroupProductGroupDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductGroupProductGroupDatum(ctx, exec, o.ProductGroup)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductGroupProductGroupDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductGroupProductGroupDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductGroupProductGroupDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_group_product_group_data`.* FROM `data_platform_product_group_product_group_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductGroupProductGroupDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductGroupProductGroupDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductGroupProductGroupDatumExists checks if the DataPlatformProductGroupProductGroupDatum row exists.
func DataPlatformProductGroupProductGroupDatumExists(ctx context.Context, exec boil.ContextExecutor, productGroup string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_group_product_group_data` where `ProductGroup`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productGroup)
	}
	row := exec.QueryRowContext(ctx, sql, productGroup)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_group_product_group_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductGroupProductGroupDatum row exists.
func (o *DataPlatformProductGroupProductGroupDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductGroupProductGroupDatumExists(ctx, exec, o.ProductGroup)
}
