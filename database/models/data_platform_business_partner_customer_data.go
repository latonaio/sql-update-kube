// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerCustomerDatum is an object representing the database table.
type DataPlatformBusinessPartnerCustomerDatum struct {
	BusinessPartner               int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Customer                      int         `boil:"Customer" json:"Customer" toml:"Customer" yaml:"Customer"`
	Currency                      null.String `boil:"Currency" json:"Currency,omitempty" toml:"Currency" yaml:"Currency,omitempty"`
	PaymentTerms                  null.String `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	PaymentMethod                 null.String `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	Incoterms                     null.String `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	BPAccountAssignmentGroup      null.String `boil:"BPAccountAssignmentGroup" json:"BPAccountAssignmentGroup,omitempty" toml:"BPAccountAssignmentGroup" yaml:"BPAccountAssignmentGroup,omitempty"`
	CreationDate                  null.Time   `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	QuotationIsBlockedForCustomer null.Bool   `boil:"QuotationIsBlockedForCustomer" json:"QuotationIsBlockedForCustomer,omitempty" toml:"QuotationIsBlockedForCustomer" yaml:"QuotationIsBlockedForCustomer,omitempty"`
	OrderIsBlockedForCustomer     null.Bool   `boil:"OrderIsBlockedForCustomer" json:"OrderIsBlockedForCustomer,omitempty" toml:"OrderIsBlockedForCustomer" yaml:"OrderIsBlockedForCustomer,omitempty"`
	DeliveryIsBlockedForCustomer  null.Bool   `boil:"DeliveryIsBlockedForCustomer" json:"DeliveryIsBlockedForCustomer,omitempty" toml:"DeliveryIsBlockedForCustomer" yaml:"DeliveryIsBlockedForCustomer,omitempty"`
	BillingIsBlockedForCustomer   null.Bool   `boil:"BillingIsBlockedForCustomer" json:"BillingIsBlockedForCustomer,omitempty" toml:"BillingIsBlockedForCustomer" yaml:"BillingIsBlockedForCustomer,omitempty"`
	PostingIsBlockedForCustomer   null.Bool   `boil:"PostingIsBlockedForCustomer" json:"PostingIsBlockedForCustomer,omitempty" toml:"PostingIsBlockedForCustomer" yaml:"PostingIsBlockedForCustomer,omitempty"`
	IsMarkedForDeletion           null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBusinessPartnerCustomerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerCustomerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerCustomerDatumColumns = struct {
	BusinessPartner               string
	Customer                      string
	Currency                      string
	PaymentTerms                  string
	PaymentMethod                 string
	Incoterms                     string
	BPAccountAssignmentGroup      string
	CreationDate                  string
	QuotationIsBlockedForCustomer string
	OrderIsBlockedForCustomer     string
	DeliveryIsBlockedForCustomer  string
	BillingIsBlockedForCustomer   string
	PostingIsBlockedForCustomer   string
	IsMarkedForDeletion           string
}{
	BusinessPartner:               "BusinessPartner",
	Customer:                      "Customer",
	Currency:                      "Currency",
	PaymentTerms:                  "PaymentTerms",
	PaymentMethod:                 "PaymentMethod",
	Incoterms:                     "Incoterms",
	BPAccountAssignmentGroup:      "BPAccountAssignmentGroup",
	CreationDate:                  "CreationDate",
	QuotationIsBlockedForCustomer: "QuotationIsBlockedForCustomer",
	OrderIsBlockedForCustomer:     "OrderIsBlockedForCustomer",
	DeliveryIsBlockedForCustomer:  "DeliveryIsBlockedForCustomer",
	BillingIsBlockedForCustomer:   "BillingIsBlockedForCustomer",
	PostingIsBlockedForCustomer:   "PostingIsBlockedForCustomer",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
}

var DataPlatformBusinessPartnerCustomerDatumTableColumns = struct {
	BusinessPartner               string
	Customer                      string
	Currency                      string
	PaymentTerms                  string
	PaymentMethod                 string
	Incoterms                     string
	BPAccountAssignmentGroup      string
	CreationDate                  string
	QuotationIsBlockedForCustomer string
	OrderIsBlockedForCustomer     string
	DeliveryIsBlockedForCustomer  string
	BillingIsBlockedForCustomer   string
	PostingIsBlockedForCustomer   string
	IsMarkedForDeletion           string
}{
	BusinessPartner:               "data_platform_business_partner_customer_data.BusinessPartner",
	Customer:                      "data_platform_business_partner_customer_data.Customer",
	Currency:                      "data_platform_business_partner_customer_data.Currency",
	PaymentTerms:                  "data_platform_business_partner_customer_data.PaymentTerms",
	PaymentMethod:                 "data_platform_business_partner_customer_data.PaymentMethod",
	Incoterms:                     "data_platform_business_partner_customer_data.Incoterms",
	BPAccountAssignmentGroup:      "data_platform_business_partner_customer_data.BPAccountAssignmentGroup",
	CreationDate:                  "data_platform_business_partner_customer_data.CreationDate",
	QuotationIsBlockedForCustomer: "data_platform_business_partner_customer_data.QuotationIsBlockedForCustomer",
	OrderIsBlockedForCustomer:     "data_platform_business_partner_customer_data.OrderIsBlockedForCustomer",
	DeliveryIsBlockedForCustomer:  "data_platform_business_partner_customer_data.DeliveryIsBlockedForCustomer",
	BillingIsBlockedForCustomer:   "data_platform_business_partner_customer_data.BillingIsBlockedForCustomer",
	PostingIsBlockedForCustomer:   "data_platform_business_partner_customer_data.PostingIsBlockedForCustomer",
	IsMarkedForDeletion:           "data_platform_business_partner_customer_data.IsMarkedForDeletion",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DataPlatformBusinessPartnerCustomerDatumWhere = struct {
	BusinessPartner               whereHelperint
	Customer                      whereHelperint
	Currency                      whereHelpernull_String
	PaymentTerms                  whereHelpernull_String
	PaymentMethod                 whereHelpernull_String
	Incoterms                     whereHelpernull_String
	BPAccountAssignmentGroup      whereHelpernull_String
	CreationDate                  whereHelpernull_Time
	QuotationIsBlockedForCustomer whereHelpernull_Bool
	OrderIsBlockedForCustomer     whereHelpernull_Bool
	DeliveryIsBlockedForCustomer  whereHelpernull_Bool
	BillingIsBlockedForCustomer   whereHelpernull_Bool
	PostingIsBlockedForCustomer   whereHelpernull_Bool
	IsMarkedForDeletion           whereHelpernull_Bool
}{
	BusinessPartner:               whereHelperint{field: "`data_platform_business_partner_customer_data`.`BusinessPartner`"},
	Customer:                      whereHelperint{field: "`data_platform_business_partner_customer_data`.`Customer`"},
	Currency:                      whereHelpernull_String{field: "`data_platform_business_partner_customer_data`.`Currency`"},
	PaymentTerms:                  whereHelpernull_String{field: "`data_platform_business_partner_customer_data`.`PaymentTerms`"},
	PaymentMethod:                 whereHelpernull_String{field: "`data_platform_business_partner_customer_data`.`PaymentMethod`"},
	Incoterms:                     whereHelpernull_String{field: "`data_platform_business_partner_customer_data`.`Incoterms`"},
	BPAccountAssignmentGroup:      whereHelpernull_String{field: "`data_platform_business_partner_customer_data`.`BPAccountAssignmentGroup`"},
	CreationDate:                  whereHelpernull_Time{field: "`data_platform_business_partner_customer_data`.`CreationDate`"},
	QuotationIsBlockedForCustomer: whereHelpernull_Bool{field: "`data_platform_business_partner_customer_data`.`QuotationIsBlockedForCustomer`"},
	OrderIsBlockedForCustomer:     whereHelpernull_Bool{field: "`data_platform_business_partner_customer_data`.`OrderIsBlockedForCustomer`"},
	DeliveryIsBlockedForCustomer:  whereHelpernull_Bool{field: "`data_platform_business_partner_customer_data`.`DeliveryIsBlockedForCustomer`"},
	BillingIsBlockedForCustomer:   whereHelpernull_Bool{field: "`data_platform_business_partner_customer_data`.`BillingIsBlockedForCustomer`"},
	PostingIsBlockedForCustomer:   whereHelpernull_Bool{field: "`data_platform_business_partner_customer_data`.`PostingIsBlockedForCustomer`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`data_platform_business_partner_customer_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBusinessPartnerCustomerDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerCustomerDatumRels = struct {
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum                string
	BusinessPartnerDataPlatformBusinessPartnerCustomerContactData         string
	BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData string
	BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData             string
}{
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum:                "BusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	BusinessPartnerDataPlatformBusinessPartnerCustomerContactData:         "BusinessPartnerDataPlatformBusinessPartnerCustomerContactData",
	BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData: "BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData",
	BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData:             "BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData",
}

// dataPlatformBusinessPartnerCustomerDatumR is where relationships are stored.
type dataPlatformBusinessPartnerCustomerDatumR struct {
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum                *DataPlatformBusinessPartnerGeneralDatum                     `boil:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	BusinessPartnerDataPlatformBusinessPartnerCustomerContactData         DataPlatformBusinessPartnerCustomerContactDatumSlice         `boil:"BusinessPartnerDataPlatformBusinessPartnerCustomerContactData" json:"BusinessPartnerDataPlatformBusinessPartnerCustomerContactData" toml:"BusinessPartnerDataPlatformBusinessPartnerCustomerContactData" yaml:"BusinessPartnerDataPlatformBusinessPartnerCustomerContactData"`
	BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice `boil:"BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData" json:"BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData" toml:"BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData" yaml:"BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData"`
	BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData             DataPlatformBusinessPartnerCustomerTaxDatumSlice             `boil:"BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData" json:"BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData" toml:"BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData" yaml:"BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerCustomerDatumR) NewStruct() *dataPlatformBusinessPartnerCustomerDatumR {
	return &dataPlatformBusinessPartnerCustomerDatumR{}
}

func (r *dataPlatformBusinessPartnerCustomerDatumR) GetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformBusinessPartnerCustomerDatumR) GetBusinessPartnerDataPlatformBusinessPartnerCustomerContactData() DataPlatformBusinessPartnerCustomerContactDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData
}

func (r *dataPlatformBusinessPartnerCustomerDatumR) GetBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData() DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData
}

func (r *dataPlatformBusinessPartnerCustomerDatumR) GetBusinessPartnerDataPlatformBusinessPartnerCustomerTaxData() DataPlatformBusinessPartnerCustomerTaxDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData
}

// dataPlatformBusinessPartnerCustomerDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerCustomerDatumL struct{}

var (
	dataPlatformBusinessPartnerCustomerDatumAllColumns            = []string{"BusinessPartner", "Customer", "Currency", "PaymentTerms", "PaymentMethod", "Incoterms", "BPAccountAssignmentGroup", "CreationDate", "QuotationIsBlockedForCustomer", "OrderIsBlockedForCustomer", "DeliveryIsBlockedForCustomer", "BillingIsBlockedForCustomer", "PostingIsBlockedForCustomer", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerCustomerDatumColumnsWithoutDefault = []string{"BusinessPartner", "Customer", "Currency", "PaymentTerms", "PaymentMethod", "Incoterms", "BPAccountAssignmentGroup", "CreationDate", "QuotationIsBlockedForCustomer", "OrderIsBlockedForCustomer", "DeliveryIsBlockedForCustomer", "BillingIsBlockedForCustomer", "PostingIsBlockedForCustomer", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerCustomerDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerCustomerDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Customer"}
	dataPlatformBusinessPartnerCustomerDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerCustomerDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerCustomerDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerCustomerDatum.
	DataPlatformBusinessPartnerCustomerDatumSlice []*DataPlatformBusinessPartnerCustomerDatum
	// DataPlatformBusinessPartnerCustomerDatumHook is the signature for custom DataPlatformBusinessPartnerCustomerDatum hook methods
	DataPlatformBusinessPartnerCustomerDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformBusinessPartnerCustomerDatum) error

	dataPlatformBusinessPartnerCustomerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerCustomerDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerCustomerDatum{})
	dataPlatformBusinessPartnerCustomerDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerCustomerDatumType)
	dataPlatformBusinessPartnerCustomerDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerCustomerDatumType, dataPlatformBusinessPartnerCustomerDatumMapping, dataPlatformBusinessPartnerCustomerDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerCustomerDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerCustomerDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerCustomerDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerCustomerDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerCustomerDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerCustomerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformBusinessPartnerCustomerDatumAfterSelectHooks []DataPlatformBusinessPartnerCustomerDatumHook

var dataPlatformBusinessPartnerCustomerDatumBeforeInsertHooks []DataPlatformBusinessPartnerCustomerDatumHook
var dataPlatformBusinessPartnerCustomerDatumAfterInsertHooks []DataPlatformBusinessPartnerCustomerDatumHook

var dataPlatformBusinessPartnerCustomerDatumBeforeUpdateHooks []DataPlatformBusinessPartnerCustomerDatumHook
var dataPlatformBusinessPartnerCustomerDatumAfterUpdateHooks []DataPlatformBusinessPartnerCustomerDatumHook

var dataPlatformBusinessPartnerCustomerDatumBeforeDeleteHooks []DataPlatformBusinessPartnerCustomerDatumHook
var dataPlatformBusinessPartnerCustomerDatumAfterDeleteHooks []DataPlatformBusinessPartnerCustomerDatumHook

var dataPlatformBusinessPartnerCustomerDatumBeforeUpsertHooks []DataPlatformBusinessPartnerCustomerDatumHook
var dataPlatformBusinessPartnerCustomerDatumAfterUpsertHooks []DataPlatformBusinessPartnerCustomerDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformBusinessPartnerCustomerDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformBusinessPartnerCustomerDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformBusinessPartnerCustomerDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformBusinessPartnerCustomerDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformBusinessPartnerCustomerDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformBusinessPartnerCustomerDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformBusinessPartnerCustomerDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformBusinessPartnerCustomerDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformBusinessPartnerCustomerDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformBusinessPartnerCustomerDatumHook registers your hook function for all future operations.
func AddDataPlatformBusinessPartnerCustomerDatumHook(hookPoint boil.HookPoint, dataPlatformBusinessPartnerCustomerDatumHook DataPlatformBusinessPartnerCustomerDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformBusinessPartnerCustomerDatumAfterSelectHooks = append(dataPlatformBusinessPartnerCustomerDatumAfterSelectHooks, dataPlatformBusinessPartnerCustomerDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformBusinessPartnerCustomerDatumBeforeInsertHooks = append(dataPlatformBusinessPartnerCustomerDatumBeforeInsertHooks, dataPlatformBusinessPartnerCustomerDatumHook)
	case boil.AfterInsertHook:
		dataPlatformBusinessPartnerCustomerDatumAfterInsertHooks = append(dataPlatformBusinessPartnerCustomerDatumAfterInsertHooks, dataPlatformBusinessPartnerCustomerDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformBusinessPartnerCustomerDatumBeforeUpdateHooks = append(dataPlatformBusinessPartnerCustomerDatumBeforeUpdateHooks, dataPlatformBusinessPartnerCustomerDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformBusinessPartnerCustomerDatumAfterUpdateHooks = append(dataPlatformBusinessPartnerCustomerDatumAfterUpdateHooks, dataPlatformBusinessPartnerCustomerDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformBusinessPartnerCustomerDatumBeforeDeleteHooks = append(dataPlatformBusinessPartnerCustomerDatumBeforeDeleteHooks, dataPlatformBusinessPartnerCustomerDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformBusinessPartnerCustomerDatumAfterDeleteHooks = append(dataPlatformBusinessPartnerCustomerDatumAfterDeleteHooks, dataPlatformBusinessPartnerCustomerDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformBusinessPartnerCustomerDatumBeforeUpsertHooks = append(dataPlatformBusinessPartnerCustomerDatumBeforeUpsertHooks, dataPlatformBusinessPartnerCustomerDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformBusinessPartnerCustomerDatumAfterUpsertHooks = append(dataPlatformBusinessPartnerCustomerDatumAfterUpsertHooks, dataPlatformBusinessPartnerCustomerDatumHook)
	}
}

// One returns a single dataPlatformBusinessPartnerCustomerDatum record from the query.
func (q dataPlatformBusinessPartnerCustomerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerCustomerDatum, error) {
	o := &DataPlatformBusinessPartnerCustomerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_customer_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerCustomerDatum records from the query.
func (q dataPlatformBusinessPartnerCustomerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerCustomerDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerCustomerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerCustomerDatum slice")
	}

	if len(dataPlatformBusinessPartnerCustomerDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerCustomerDatum records in the query.
func (q dataPlatformBusinessPartnerCustomerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_customer_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerCustomerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_customer_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerCustomerDatum) BusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerCustomerContactData retrieves all the data_platform_business_partner_customer_contact_datum's DataPlatformBusinessPartnerCustomerContactData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerCustomerDatum) BusinessPartnerDataPlatformBusinessPartnerCustomerContactData(mods ...qm.QueryMod) dataPlatformBusinessPartnerCustomerContactDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_customer_contact_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerCustomerContactData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData retrieves all the data_platform_business_partner_customer_partner_function_datum's DataPlatformBusinessPartnerCustomerPartnerFunctionData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerCustomerDatum) BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData(mods ...qm.QueryMod) dataPlatformBusinessPartnerCustomerPartnerFunctionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_customer_partner_function_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerCustomerPartnerFunctionData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData retrieves all the data_platform_business_partner_customer_tax_datum's DataPlatformBusinessPartnerCustomerTaxData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerCustomerDatum) BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData(mods ...qm.QueryMod) dataPlatformBusinessPartnerCustomerTaxDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_customer_tax_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerCustomerTaxData(queryMods...)
}

// LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerCustomerDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerCustomerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerCustomerDatum
	var object *DataPlatformBusinessPartnerCustomerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerCustomerDatum.(*DataPlatformBusinessPartnerCustomerDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerCustomerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerCustomerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerCustomerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerCustomerDatum.(*[]*DataPlatformBusinessPartnerCustomerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerCustomerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerCustomerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerCustomerDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerCustomerDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerCustomerContactData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerCustomerDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerCustomerContactData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerCustomerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerCustomerDatum
	var object *DataPlatformBusinessPartnerCustomerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerCustomerDatum.(*DataPlatformBusinessPartnerCustomerDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerCustomerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerCustomerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerCustomerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerCustomerDatum.(*[]*DataPlatformBusinessPartnerCustomerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerCustomerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerCustomerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerCustomerDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerCustomerDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_customer_contact_data`),
		qm.WhereIn(`data_platform_business_partner_customer_contact_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_customer_contact_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerCustomerContactDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_customer_contact_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_customer_contact_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_customer_contact_data")
	}

	if len(dataPlatformBusinessPartnerCustomerContactDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerCustomerContactDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData = append(local.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerCustomerContactDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerCustomerDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerCustomerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerCustomerDatum
	var object *DataPlatformBusinessPartnerCustomerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerCustomerDatum.(*DataPlatformBusinessPartnerCustomerDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerCustomerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerCustomerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerCustomerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerCustomerDatum.(*[]*DataPlatformBusinessPartnerCustomerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerCustomerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerCustomerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerCustomerDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerCustomerDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_customer_partner_function_data`),
		qm.WhereIn(`data_platform_business_partner_customer_partner_function_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_customer_partner_function_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_customer_partner_function_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_customer_partner_function_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_customer_partner_function_data")
	}

	if len(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(local.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerCustomerTaxData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerCustomerDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerCustomerTaxData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerCustomerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerCustomerDatum
	var object *DataPlatformBusinessPartnerCustomerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerCustomerDatum.(*DataPlatformBusinessPartnerCustomerDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerCustomerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerCustomerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerCustomerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerCustomerDatum.(*[]*DataPlatformBusinessPartnerCustomerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerCustomerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerCustomerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerCustomerDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerCustomerDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_customer_tax_data`),
		qm.WhereIn(`data_platform_business_partner_customer_tax_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_customer_tax_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerCustomerTaxDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_customer_tax_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_customer_tax_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_customer_tax_data")
	}

	if len(dataPlatformBusinessPartnerCustomerTaxDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerCustomerTaxDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData = append(local.R.BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerCustomerTaxDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = local
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformBusinessPartnerCustomerDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData.
func (o *DataPlatformBusinessPartnerCustomerDatum) SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_customer_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Customer}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerCustomerDatumR{
			BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformBusinessPartnerCustomerData: DataPlatformBusinessPartnerCustomerDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData = append(related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData, o)
	}

	return nil
}

// AddBusinessPartnerDataPlatformBusinessPartnerCustomerContactData adds the given related objects to the existing relationships
// of the data_platform_business_partner_customer_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum appropriately.
func (o *DataPlatformBusinessPartnerCustomerDatum) AddBusinessPartnerDataPlatformBusinessPartnerCustomerContactData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerCustomerContactDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_customer_contact_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Customer, rel.ContactID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerCustomerDatumR{
			BusinessPartnerDataPlatformBusinessPartnerCustomerContactData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData = append(o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerCustomerContactDatumR{
				BusinessPartnerDataPlatformBusinessPartnerCustomerDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData adds the given related objects to the existing relationships
// of the data_platform_business_partner_customer_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum appropriately.
func (o *DataPlatformBusinessPartnerCustomerDatum) AddBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_customer_partner_function_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Customer, rel.PartnerCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerCustomerDatumR{
			BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{
				BusinessPartnerDataPlatformBusinessPartnerCustomerDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerDataPlatformBusinessPartnerCustomerTaxData adds the given related objects to the existing relationships
// of the data_platform_business_partner_customer_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum appropriately.
func (o *DataPlatformBusinessPartnerCustomerDatum) AddBusinessPartnerDataPlatformBusinessPartnerCustomerTaxData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerCustomerTaxDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_customer_tax_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerTaxDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Customer, rel.DepartureCountry}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerCustomerDatumR{
			BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData = append(o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerTaxData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerCustomerTaxDatumR{
				BusinessPartnerDataPlatformBusinessPartnerCustomerDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = o
		}
	}
	return nil
}

// DataPlatformBusinessPartnerCustomerData retrieves all the records using an executor.
func DataPlatformBusinessPartnerCustomerData(mods ...qm.QueryMod) dataPlatformBusinessPartnerCustomerDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_customer_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_customer_data`.*"})
	}

	return dataPlatformBusinessPartnerCustomerDatumQuery{q}
}

// FindDataPlatformBusinessPartnerCustomerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerCustomerDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, customer int, selectCols ...string) (*DataPlatformBusinessPartnerCustomerDatum, error) {
	dataPlatformBusinessPartnerCustomerDatumObj := &DataPlatformBusinessPartnerCustomerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_customer_data` where `BusinessPartner`=? AND `Customer`=?", sel,
	)

	q := queries.Raw(query, businessPartner, customer)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerCustomerDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_customer_data")
	}

	if err = dataPlatformBusinessPartnerCustomerDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformBusinessPartnerCustomerDatumObj, err
	}

	return dataPlatformBusinessPartnerCustomerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerCustomerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_customer_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerCustomerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerCustomerDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerCustomerDatumInsertCache[key]
	dataPlatformBusinessPartnerCustomerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerCustomerDatumAllColumns,
			dataPlatformBusinessPartnerCustomerDatumColumnsWithDefault,
			dataPlatformBusinessPartnerCustomerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerDatumType, dataPlatformBusinessPartnerCustomerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerDatumType, dataPlatformBusinessPartnerCustomerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_customer_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_customer_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_customer_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_customer_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Customer,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_customer_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerCustomerDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerCustomerDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerCustomerDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformBusinessPartnerCustomerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerCustomerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerCustomerDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerCustomerDatumUpdateCache[key]
	dataPlatformBusinessPartnerCustomerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerCustomerDatumAllColumns,
			dataPlatformBusinessPartnerCustomerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_business_partner_customer_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_customer_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerDatumType, dataPlatformBusinessPartnerCustomerDatumMapping, append(wl, dataPlatformBusinessPartnerCustomerDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_business_partner_customer_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_business_partner_customer_data")
	}

	if !cached {
		dataPlatformBusinessPartnerCustomerDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerCustomerDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerCustomerDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerCustomerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_business_partner_customer_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_business_partner_customer_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerCustomerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerCustomerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_customer_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerCustomerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerCustomerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformBusinessPartnerCustomerDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformBusinessPartnerCustomerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerCustomerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_customer_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerCustomerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerCustomerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerCustomerDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerCustomerDatumUpsertCache[key]
	dataPlatformBusinessPartnerCustomerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerCustomerDatumAllColumns,
			dataPlatformBusinessPartnerCustomerDatumColumnsWithDefault,
			dataPlatformBusinessPartnerCustomerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerCustomerDatumAllColumns,
			dataPlatformBusinessPartnerCustomerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_customer_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_customer_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_customer_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerDatumType, dataPlatformBusinessPartnerCustomerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerDatumType, dataPlatformBusinessPartnerCustomerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_customer_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerDatumType, dataPlatformBusinessPartnerCustomerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_customer_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_customer_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerCustomerDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerCustomerDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerCustomerDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformBusinessPartnerCustomerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerCustomerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformBusinessPartnerCustomerDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerCustomerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_customer_data` WHERE `BusinessPartner`=? AND `Customer`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_business_partner_customer_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_business_partner_customer_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerCustomerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformBusinessPartnerCustomerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_customer_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_customer_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerCustomerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformBusinessPartnerCustomerDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerCustomerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_customer_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerCustomerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerCustomerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_customer_data")
	}

	if len(dataPlatformBusinessPartnerCustomerDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerCustomerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerCustomerDatum(ctx, exec, o.BusinessPartner, o.Customer)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerCustomerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerCustomerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerCustomerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_customer_data`.* FROM `data_platform_business_partner_customer_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerCustomerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerCustomerDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerCustomerDatumExists checks if the DataPlatformBusinessPartnerCustomerDatum row exists.
func DataPlatformBusinessPartnerCustomerDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, customer int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_customer_data` where `BusinessPartner`=? AND `Customer`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, customer)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, customer)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_customer_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerCustomerDatum row exists.
func (o *DataPlatformBusinessPartnerCustomerDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerCustomerDatumExists(ctx, exec, o.BusinessPartner, o.Customer)
}
