// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSCRDeliveryRelationDatum is an object representing the database table.
type DataPlatformSCRDeliveryRelationDatum struct {
	SupplyChainRelationshipID         int       `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID int       `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	Buyer                             int       `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                            int       `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                    int       `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverFromParty                  int       `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DefaultRelation                   null.Bool `boil:"DefaultRelation" json:"DefaultRelation,omitempty" toml:"DefaultRelation" yaml:"DefaultRelation,omitempty"`
	CreationDate                      string    `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                    string    `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion               null.Bool `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSCRDeliveryRelationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSCRDeliveryRelationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSCRDeliveryRelationDatumColumns = struct {
	SupplyChainRelationshipID         string
	SupplyChainRelationshipDeliveryID string
	Buyer                             string
	Seller                            string
	DeliverToParty                    string
	DeliverFromParty                  string
	DefaultRelation                   string
	CreationDate                      string
	LastChangeDate                    string
	IsMarkedForDeletion               string
}{
	SupplyChainRelationshipID:         "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID: "SupplyChainRelationshipDeliveryID",
	Buyer:                             "Buyer",
	Seller:                            "Seller",
	DeliverToParty:                    "DeliverToParty",
	DeliverFromParty:                  "DeliverFromParty",
	DefaultRelation:                   "DefaultRelation",
	CreationDate:                      "CreationDate",
	LastChangeDate:                    "LastChangeDate",
	IsMarkedForDeletion:               "IsMarkedForDeletion",
}

var DataPlatformSCRDeliveryRelationDatumTableColumns = struct {
	SupplyChainRelationshipID         string
	SupplyChainRelationshipDeliveryID string
	Buyer                             string
	Seller                            string
	DeliverToParty                    string
	DeliverFromParty                  string
	DefaultRelation                   string
	CreationDate                      string
	LastChangeDate                    string
	IsMarkedForDeletion               string
}{
	SupplyChainRelationshipID:         "data_platform_scr_delivery_relation_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID: "data_platform_scr_delivery_relation_data.SupplyChainRelationshipDeliveryID",
	Buyer:                             "data_platform_scr_delivery_relation_data.Buyer",
	Seller:                            "data_platform_scr_delivery_relation_data.Seller",
	DeliverToParty:                    "data_platform_scr_delivery_relation_data.DeliverToParty",
	DeliverFromParty:                  "data_platform_scr_delivery_relation_data.DeliverFromParty",
	DefaultRelation:                   "data_platform_scr_delivery_relation_data.DefaultRelation",
	CreationDate:                      "data_platform_scr_delivery_relation_data.CreationDate",
	LastChangeDate:                    "data_platform_scr_delivery_relation_data.LastChangeDate",
	IsMarkedForDeletion:               "data_platform_scr_delivery_relation_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSCRDeliveryRelationDatumWhere = struct {
	SupplyChainRelationshipID         whereHelperint
	SupplyChainRelationshipDeliveryID whereHelperint
	Buyer                             whereHelperint
	Seller                            whereHelperint
	DeliverToParty                    whereHelperint
	DeliverFromParty                  whereHelperint
	DefaultRelation                   whereHelpernull_Bool
	CreationDate                      whereHelperstring
	LastChangeDate                    whereHelperstring
	IsMarkedForDeletion               whereHelpernull_Bool
}{
	SupplyChainRelationshipID:         whereHelperint{field: "`data_platform_scr_delivery_relation_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID: whereHelperint{field: "`data_platform_scr_delivery_relation_data`.`SupplyChainRelationshipDeliveryID`"},
	Buyer:                             whereHelperint{field: "`data_platform_scr_delivery_relation_data`.`Buyer`"},
	Seller:                            whereHelperint{field: "`data_platform_scr_delivery_relation_data`.`Seller`"},
	DeliverToParty:                    whereHelperint{field: "`data_platform_scr_delivery_relation_data`.`DeliverToParty`"},
	DeliverFromParty:                  whereHelperint{field: "`data_platform_scr_delivery_relation_data`.`DeliverFromParty`"},
	DefaultRelation:                   whereHelpernull_Bool{field: "`data_platform_scr_delivery_relation_data`.`DefaultRelation`"},
	CreationDate:                      whereHelperstring{field: "`data_platform_scr_delivery_relation_data`.`CreationDate`"},
	LastChangeDate:                    whereHelperstring{field: "`data_platform_scr_delivery_relation_data`.`LastChangeDate`"},
	IsMarkedForDeletion:               whereHelpernull_Bool{field: "`data_platform_scr_delivery_relation_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSCRDeliveryRelationDatumRels is where relationship names are stored.
var DataPlatformSCRDeliveryRelationDatumRels = struct {
	DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum                 string
	DeliverToPartyDataPlatformBusinessPartnerGeneralDatum                   string
	BuyerDataPlatformSCRGeneralDatum                                        string
	BuyerDataPlatformBillOfMaterialHeaderData                               string
	ComponentProductBuyerDataPlatformBillOfMaterialItemData                 string
	BuyerDataPlatformDeliveryDocumentHeaderData                             string
	BuyerDataPlatformDeliveryDocumentItemData                               string
	BuyerDataPlatformInspectionLotOperationData                             string
	BuyerDataPlatformInvoiceDocumentItemData                                string
	BuyerDataPlatformOperationsHeaderData                                   string
	BuyerDataPlatformOperationsItemData                                     string
	ComponentProductBuyerDataPlatformOperationsItemOperationComponentData   string
	BuyerDataPlatformOperationsItemOperationData                            string
	BuyerDataPlatformOrdersItemData                                         string
	BuyerDataPlatformPlannedOrderHeaderData                                 string
	ComponentProductBuyerDataPlatformPlannedOrderItemComponentData          string
	BuyerDataPlatformPlannedOrderItemData                                   string
	ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData string
	BuyerDataPlatformPlannedOrderItemOperationData                          string
	BuyerDataPlatformProductStockAvailabilityByBatchData                    string
	BuyerDataPlatformProductStockAvailabilityByProjectData                  string
	BuyerDataPlatformProductStockByStorageBinByBatchData                    string
	BuyerDataPlatformProductStockProductStockAvailabilityData               string
	BuyerDataPlatformProductStockProductStockByBatchData                    string
	BuyerDataPlatformProductStockProductStockByOrderData                    string
	BuyerDataPlatformProductStockProductStockByProjectData                  string
	BuyerDataPlatformProductStockProductStockByStorageBinData               string
	BuyerDataPlatformProductStockProductStockData                           string
	BuyerDataPlatformProductionOrderHeaderData                              string
	BuyerDataPlatformProductionOrderItemData                                string
	BuyerDataPlatformProductionOrderItemOperationData                       string
	BuyerDataPlatformSCRDeliveryPlantRelationData                           string
}{
	DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum:                 "DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum",
	DeliverToPartyDataPlatformBusinessPartnerGeneralDatum:                   "DeliverToPartyDataPlatformBusinessPartnerGeneralDatum",
	BuyerDataPlatformSCRGeneralDatum:                                        "BuyerDataPlatformSCRGeneralDatum",
	BuyerDataPlatformBillOfMaterialHeaderData:                               "BuyerDataPlatformBillOfMaterialHeaderData",
	ComponentProductBuyerDataPlatformBillOfMaterialItemData:                 "ComponentProductBuyerDataPlatformBillOfMaterialItemData",
	BuyerDataPlatformDeliveryDocumentHeaderData:                             "BuyerDataPlatformDeliveryDocumentHeaderData",
	BuyerDataPlatformDeliveryDocumentItemData:                               "BuyerDataPlatformDeliveryDocumentItemData",
	BuyerDataPlatformInspectionLotOperationData:                             "BuyerDataPlatformInspectionLotOperationData",
	BuyerDataPlatformInvoiceDocumentItemData:                                "BuyerDataPlatformInvoiceDocumentItemData",
	BuyerDataPlatformOperationsHeaderData:                                   "BuyerDataPlatformOperationsHeaderData",
	BuyerDataPlatformOperationsItemData:                                     "BuyerDataPlatformOperationsItemData",
	ComponentProductBuyerDataPlatformOperationsItemOperationComponentData:   "ComponentProductBuyerDataPlatformOperationsItemOperationComponentData",
	BuyerDataPlatformOperationsItemOperationData:                            "BuyerDataPlatformOperationsItemOperationData",
	BuyerDataPlatformOrdersItemData:                                         "BuyerDataPlatformOrdersItemData",
	BuyerDataPlatformPlannedOrderHeaderData:                                 "BuyerDataPlatformPlannedOrderHeaderData",
	ComponentProductBuyerDataPlatformPlannedOrderItemComponentData:          "ComponentProductBuyerDataPlatformPlannedOrderItemComponentData",
	BuyerDataPlatformPlannedOrderItemData:                                   "BuyerDataPlatformPlannedOrderItemData",
	ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData: "ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData",
	BuyerDataPlatformPlannedOrderItemOperationData:                          "BuyerDataPlatformPlannedOrderItemOperationData",
	BuyerDataPlatformProductStockAvailabilityByBatchData:                    "BuyerDataPlatformProductStockAvailabilityByBatchData",
	BuyerDataPlatformProductStockAvailabilityByProjectData:                  "BuyerDataPlatformProductStockAvailabilityByProjectData",
	BuyerDataPlatformProductStockByStorageBinByBatchData:                    "BuyerDataPlatformProductStockByStorageBinByBatchData",
	BuyerDataPlatformProductStockProductStockAvailabilityData:               "BuyerDataPlatformProductStockProductStockAvailabilityData",
	BuyerDataPlatformProductStockProductStockByBatchData:                    "BuyerDataPlatformProductStockProductStockByBatchData",
	BuyerDataPlatformProductStockProductStockByOrderData:                    "BuyerDataPlatformProductStockProductStockByOrderData",
	BuyerDataPlatformProductStockProductStockByProjectData:                  "BuyerDataPlatformProductStockProductStockByProjectData",
	BuyerDataPlatformProductStockProductStockByStorageBinData:               "BuyerDataPlatformProductStockProductStockByStorageBinData",
	BuyerDataPlatformProductStockProductStockData:                           "BuyerDataPlatformProductStockProductStockData",
	BuyerDataPlatformProductionOrderHeaderData:                              "BuyerDataPlatformProductionOrderHeaderData",
	BuyerDataPlatformProductionOrderItemData:                                "BuyerDataPlatformProductionOrderItemData",
	BuyerDataPlatformProductionOrderItemOperationData:                       "BuyerDataPlatformProductionOrderItemOperationData",
	BuyerDataPlatformSCRDeliveryPlantRelationData:                           "BuyerDataPlatformSCRDeliveryPlantRelationData",
}

// dataPlatformSCRDeliveryRelationDatumR is where relationships are stored.
type dataPlatformSCRDeliveryRelationDatumR struct {
	DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum                 *DataPlatformBusinessPartnerGeneralDatum                   `boil:"DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum" json:"DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum" toml:"DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum" yaml:"DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum"`
	DeliverToPartyDataPlatformBusinessPartnerGeneralDatum                   *DataPlatformBusinessPartnerGeneralDatum                   `boil:"DeliverToPartyDataPlatformBusinessPartnerGeneralDatum" json:"DeliverToPartyDataPlatformBusinessPartnerGeneralDatum" toml:"DeliverToPartyDataPlatformBusinessPartnerGeneralDatum" yaml:"DeliverToPartyDataPlatformBusinessPartnerGeneralDatum"`
	BuyerDataPlatformSCRGeneralDatum                                        *DataPlatformSCRGeneralDatum                               `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	BuyerDataPlatformBillOfMaterialHeaderData                               DataPlatformBillOfMaterialHeaderDatumSlice                 `boil:"BuyerDataPlatformBillOfMaterialHeaderData" json:"BuyerDataPlatformBillOfMaterialHeaderData" toml:"BuyerDataPlatformBillOfMaterialHeaderData" yaml:"BuyerDataPlatformBillOfMaterialHeaderData"`
	ComponentProductBuyerDataPlatformBillOfMaterialItemData                 DataPlatformBillOfMaterialItemDatumSlice                   `boil:"ComponentProductBuyerDataPlatformBillOfMaterialItemData" json:"ComponentProductBuyerDataPlatformBillOfMaterialItemData" toml:"ComponentProductBuyerDataPlatformBillOfMaterialItemData" yaml:"ComponentProductBuyerDataPlatformBillOfMaterialItemData"`
	BuyerDataPlatformDeliveryDocumentHeaderData                             DataPlatformDeliveryDocumentHeaderDatumSlice               `boil:"BuyerDataPlatformDeliveryDocumentHeaderData" json:"BuyerDataPlatformDeliveryDocumentHeaderData" toml:"BuyerDataPlatformDeliveryDocumentHeaderData" yaml:"BuyerDataPlatformDeliveryDocumentHeaderData"`
	BuyerDataPlatformDeliveryDocumentItemData                               DataPlatformDeliveryDocumentItemDatumSlice                 `boil:"BuyerDataPlatformDeliveryDocumentItemData" json:"BuyerDataPlatformDeliveryDocumentItemData" toml:"BuyerDataPlatformDeliveryDocumentItemData" yaml:"BuyerDataPlatformDeliveryDocumentItemData"`
	BuyerDataPlatformInspectionLotOperationData                             DataPlatformInspectionLotOperationDatumSlice               `boil:"BuyerDataPlatformInspectionLotOperationData" json:"BuyerDataPlatformInspectionLotOperationData" toml:"BuyerDataPlatformInspectionLotOperationData" yaml:"BuyerDataPlatformInspectionLotOperationData"`
	BuyerDataPlatformInvoiceDocumentItemData                                DataPlatformInvoiceDocumentItemDatumSlice                  `boil:"BuyerDataPlatformInvoiceDocumentItemData" json:"BuyerDataPlatformInvoiceDocumentItemData" toml:"BuyerDataPlatformInvoiceDocumentItemData" yaml:"BuyerDataPlatformInvoiceDocumentItemData"`
	BuyerDataPlatformOperationsHeaderData                                   DataPlatformOperationsHeaderDatumSlice                     `boil:"BuyerDataPlatformOperationsHeaderData" json:"BuyerDataPlatformOperationsHeaderData" toml:"BuyerDataPlatformOperationsHeaderData" yaml:"BuyerDataPlatformOperationsHeaderData"`
	BuyerDataPlatformOperationsItemData                                     DataPlatformOperationsItemDatumSlice                       `boil:"BuyerDataPlatformOperationsItemData" json:"BuyerDataPlatformOperationsItemData" toml:"BuyerDataPlatformOperationsItemData" yaml:"BuyerDataPlatformOperationsItemData"`
	ComponentProductBuyerDataPlatformOperationsItemOperationComponentData   DataPlatformOperationsItemOperationComponentDatumSlice     `boil:"ComponentProductBuyerDataPlatformOperationsItemOperationComponentData" json:"ComponentProductBuyerDataPlatformOperationsItemOperationComponentData" toml:"ComponentProductBuyerDataPlatformOperationsItemOperationComponentData" yaml:"ComponentProductBuyerDataPlatformOperationsItemOperationComponentData"`
	BuyerDataPlatformOperationsItemOperationData                            DataPlatformOperationsItemOperationDatumSlice              `boil:"BuyerDataPlatformOperationsItemOperationData" json:"BuyerDataPlatformOperationsItemOperationData" toml:"BuyerDataPlatformOperationsItemOperationData" yaml:"BuyerDataPlatformOperationsItemOperationData"`
	BuyerDataPlatformOrdersItemData                                         DataPlatformOrdersItemDatumSlice                           `boil:"BuyerDataPlatformOrdersItemData" json:"BuyerDataPlatformOrdersItemData" toml:"BuyerDataPlatformOrdersItemData" yaml:"BuyerDataPlatformOrdersItemData"`
	BuyerDataPlatformPlannedOrderHeaderData                                 DataPlatformPlannedOrderHeaderDatumSlice                   `boil:"BuyerDataPlatformPlannedOrderHeaderData" json:"BuyerDataPlatformPlannedOrderHeaderData" toml:"BuyerDataPlatformPlannedOrderHeaderData" yaml:"BuyerDataPlatformPlannedOrderHeaderData"`
	ComponentProductBuyerDataPlatformPlannedOrderItemComponentData          DataPlatformPlannedOrderItemComponentDatumSlice            `boil:"ComponentProductBuyerDataPlatformPlannedOrderItemComponentData" json:"ComponentProductBuyerDataPlatformPlannedOrderItemComponentData" toml:"ComponentProductBuyerDataPlatformPlannedOrderItemComponentData" yaml:"ComponentProductBuyerDataPlatformPlannedOrderItemComponentData"`
	BuyerDataPlatformPlannedOrderItemData                                   DataPlatformPlannedOrderItemDatumSlice                     `boil:"BuyerDataPlatformPlannedOrderItemData" json:"BuyerDataPlatformPlannedOrderItemData" toml:"BuyerDataPlatformPlannedOrderItemData" yaml:"BuyerDataPlatformPlannedOrderItemData"`
	ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData DataPlatformPlannedOrderItemOperationComponentDatumSlice   `boil:"ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData" json:"ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData" toml:"ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData" yaml:"ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData"`
	BuyerDataPlatformPlannedOrderItemOperationData                          DataPlatformPlannedOrderItemOperationDatumSlice            `boil:"BuyerDataPlatformPlannedOrderItemOperationData" json:"BuyerDataPlatformPlannedOrderItemOperationData" toml:"BuyerDataPlatformPlannedOrderItemOperationData" yaml:"BuyerDataPlatformPlannedOrderItemOperationData"`
	BuyerDataPlatformProductStockAvailabilityByBatchData                    DataPlatformProductStockAvailabilityByBatchDatumSlice      `boil:"BuyerDataPlatformProductStockAvailabilityByBatchData" json:"BuyerDataPlatformProductStockAvailabilityByBatchData" toml:"BuyerDataPlatformProductStockAvailabilityByBatchData" yaml:"BuyerDataPlatformProductStockAvailabilityByBatchData"`
	BuyerDataPlatformProductStockAvailabilityByProjectData                  DataPlatformProductStockAvailabilityByProjectDatumSlice    `boil:"BuyerDataPlatformProductStockAvailabilityByProjectData" json:"BuyerDataPlatformProductStockAvailabilityByProjectData" toml:"BuyerDataPlatformProductStockAvailabilityByProjectData" yaml:"BuyerDataPlatformProductStockAvailabilityByProjectData"`
	BuyerDataPlatformProductStockByStorageBinByBatchData                    DataPlatformProductStockByStorageBinByBatchDatumSlice      `boil:"BuyerDataPlatformProductStockByStorageBinByBatchData" json:"BuyerDataPlatformProductStockByStorageBinByBatchData" toml:"BuyerDataPlatformProductStockByStorageBinByBatchData" yaml:"BuyerDataPlatformProductStockByStorageBinByBatchData"`
	BuyerDataPlatformProductStockProductStockAvailabilityData               DataPlatformProductStockProductStockAvailabilityDatumSlice `boil:"BuyerDataPlatformProductStockProductStockAvailabilityData" json:"BuyerDataPlatformProductStockProductStockAvailabilityData" toml:"BuyerDataPlatformProductStockProductStockAvailabilityData" yaml:"BuyerDataPlatformProductStockProductStockAvailabilityData"`
	BuyerDataPlatformProductStockProductStockByBatchData                    DataPlatformProductStockProductStockByBatchDatumSlice      `boil:"BuyerDataPlatformProductStockProductStockByBatchData" json:"BuyerDataPlatformProductStockProductStockByBatchData" toml:"BuyerDataPlatformProductStockProductStockByBatchData" yaml:"BuyerDataPlatformProductStockProductStockByBatchData"`
	BuyerDataPlatformProductStockProductStockByOrderData                    DataPlatformProductStockProductStockByOrderDatumSlice      `boil:"BuyerDataPlatformProductStockProductStockByOrderData" json:"BuyerDataPlatformProductStockProductStockByOrderData" toml:"BuyerDataPlatformProductStockProductStockByOrderData" yaml:"BuyerDataPlatformProductStockProductStockByOrderData"`
	BuyerDataPlatformProductStockProductStockByProjectData                  DataPlatformProductStockProductStockByProjectDatumSlice    `boil:"BuyerDataPlatformProductStockProductStockByProjectData" json:"BuyerDataPlatformProductStockProductStockByProjectData" toml:"BuyerDataPlatformProductStockProductStockByProjectData" yaml:"BuyerDataPlatformProductStockProductStockByProjectData"`
	BuyerDataPlatformProductStockProductStockByStorageBinData               DataPlatformProductStockProductStockByStorageBinDatumSlice `boil:"BuyerDataPlatformProductStockProductStockByStorageBinData" json:"BuyerDataPlatformProductStockProductStockByStorageBinData" toml:"BuyerDataPlatformProductStockProductStockByStorageBinData" yaml:"BuyerDataPlatformProductStockProductStockByStorageBinData"`
	BuyerDataPlatformProductStockProductStockData                           DataPlatformProductStockProductStockDatumSlice             `boil:"BuyerDataPlatformProductStockProductStockData" json:"BuyerDataPlatformProductStockProductStockData" toml:"BuyerDataPlatformProductStockProductStockData" yaml:"BuyerDataPlatformProductStockProductStockData"`
	BuyerDataPlatformProductionOrderHeaderData                              DataPlatformProductionOrderHeaderDatumSlice                `boil:"BuyerDataPlatformProductionOrderHeaderData" json:"BuyerDataPlatformProductionOrderHeaderData" toml:"BuyerDataPlatformProductionOrderHeaderData" yaml:"BuyerDataPlatformProductionOrderHeaderData"`
	BuyerDataPlatformProductionOrderItemData                                DataPlatformProductionOrderItemDatumSlice                  `boil:"BuyerDataPlatformProductionOrderItemData" json:"BuyerDataPlatformProductionOrderItemData" toml:"BuyerDataPlatformProductionOrderItemData" yaml:"BuyerDataPlatformProductionOrderItemData"`
	BuyerDataPlatformProductionOrderItemOperationData                       DataPlatformProductionOrderItemOperationDatumSlice         `boil:"BuyerDataPlatformProductionOrderItemOperationData" json:"BuyerDataPlatformProductionOrderItemOperationData" toml:"BuyerDataPlatformProductionOrderItemOperationData" yaml:"BuyerDataPlatformProductionOrderItemOperationData"`
	BuyerDataPlatformSCRDeliveryPlantRelationData                           DataPlatformSCRDeliveryPlantRelationDatumSlice             `boil:"BuyerDataPlatformSCRDeliveryPlantRelationData" json:"BuyerDataPlatformSCRDeliveryPlantRelationData" toml:"BuyerDataPlatformSCRDeliveryPlantRelationData" yaml:"BuyerDataPlatformSCRDeliveryPlantRelationData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSCRDeliveryRelationDatumR) NewStruct() *dataPlatformSCRDeliveryRelationDatumR {
	return &dataPlatformSCRDeliveryRelationDatumR{}
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetDeliverFromPartyDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetDeliverToPartyDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformBillOfMaterialHeaderData() DataPlatformBillOfMaterialHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformBillOfMaterialHeaderData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetComponentProductBuyerDataPlatformBillOfMaterialItemData() DataPlatformBillOfMaterialItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformBillOfMaterialItemData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformInspectionLotOperationData() DataPlatformInspectionLotOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformInspectionLotOperationData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformInvoiceDocumentItemData() DataPlatformInvoiceDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformInvoiceDocumentItemData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformOperationsHeaderData() DataPlatformOperationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOperationsHeaderData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformOperationsItemData() DataPlatformOperationsItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOperationsItemData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetComponentProductBuyerDataPlatformOperationsItemOperationComponentData() DataPlatformOperationsItemOperationComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformOperationsItemOperationData() DataPlatformOperationsItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOperationsItemOperationData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOrdersItemData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformPlannedOrderHeaderData() DataPlatformPlannedOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformPlannedOrderHeaderData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetComponentProductBuyerDataPlatformPlannedOrderItemComponentData() DataPlatformPlannedOrderItemComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformPlannedOrderItemData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData() DataPlatformPlannedOrderItemOperationComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformPlannedOrderItemOperationData() DataPlatformPlannedOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformPlannedOrderItemOperationData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformProductStockAvailabilityByBatchData() DataPlatformProductStockAvailabilityByBatchDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockAvailabilityByBatchData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformProductStockAvailabilityByProjectData() DataPlatformProductStockAvailabilityByProjectDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockAvailabilityByProjectData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformProductStockByStorageBinByBatchData() DataPlatformProductStockByStorageBinByBatchDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockByStorageBinByBatchData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformProductStockProductStockAvailabilityData() DataPlatformProductStockProductStockAvailabilityDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockProductStockAvailabilityData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformProductStockProductStockByBatchData() DataPlatformProductStockProductStockByBatchDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockProductStockByBatchData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformProductStockProductStockByOrderData() DataPlatformProductStockProductStockByOrderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockProductStockByOrderData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformProductStockProductStockByProjectData() DataPlatformProductStockProductStockByProjectDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockProductStockByProjectData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformProductStockProductStockByStorageBinData() DataPlatformProductStockProductStockByStorageBinDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockProductStockByStorageBinData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformProductStockProductStockData() DataPlatformProductStockProductStockDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockProductStockData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformProductionOrderHeaderData() DataPlatformProductionOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductionOrderHeaderData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformProductionOrderItemData() DataPlatformProductionOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductionOrderItemData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformProductionOrderItemOperationData() DataPlatformProductionOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductionOrderItemOperationData
}

func (r *dataPlatformSCRDeliveryRelationDatumR) GetBuyerDataPlatformSCRDeliveryPlantRelationData() DataPlatformSCRDeliveryPlantRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryPlantRelationData
}

// dataPlatformSCRDeliveryRelationDatumL is where Load methods for each relationship are stored.
type dataPlatformSCRDeliveryRelationDatumL struct{}

var (
	dataPlatformSCRDeliveryRelationDatumAllColumns            = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DefaultRelation", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRDeliveryRelationDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DefaultRelation", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRDeliveryRelationDatumColumnsWithDefault    = []string{}
	dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty"}
	dataPlatformSCRDeliveryRelationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSCRDeliveryRelationDatumSlice is an alias for a slice of pointers to DataPlatformSCRDeliveryRelationDatum.
	// This should almost always be used instead of []DataPlatformSCRDeliveryRelationDatum.
	DataPlatformSCRDeliveryRelationDatumSlice []*DataPlatformSCRDeliveryRelationDatum

	dataPlatformSCRDeliveryRelationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSCRDeliveryRelationDatumType                 = reflect.TypeOf(&DataPlatformSCRDeliveryRelationDatum{})
	dataPlatformSCRDeliveryRelationDatumMapping              = queries.MakeStructMapping(dataPlatformSCRDeliveryRelationDatumType)
	dataPlatformSCRDeliveryRelationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSCRDeliveryRelationDatumType, dataPlatformSCRDeliveryRelationDatumMapping, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns)
	dataPlatformSCRDeliveryRelationDatumInsertCacheMut       sync.RWMutex
	dataPlatformSCRDeliveryRelationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSCRDeliveryRelationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSCRDeliveryRelationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSCRDeliveryRelationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSCRDeliveryRelationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSCRDeliveryRelationDatum record from the query.
func (q dataPlatformSCRDeliveryRelationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSCRDeliveryRelationDatum, error) {
	o := &DataPlatformSCRDeliveryRelationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_scr_delivery_relation_data")
	}

	return o, nil
}

// All returns all DataPlatformSCRDeliveryRelationDatum records from the query.
func (q dataPlatformSCRDeliveryRelationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSCRDeliveryRelationDatumSlice, error) {
	var o []*DataPlatformSCRDeliveryRelationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSCRDeliveryRelationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSCRDeliveryRelationDatum records in the query.
func (q dataPlatformSCRDeliveryRelationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_scr_delivery_relation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSCRDeliveryRelationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_scr_delivery_relation_data exists")
	}

	return count > 0, nil
}

// DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRDeliveryRelationDatum) DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DeliverFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// DeliverToPartyDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRDeliveryRelationDatum) DeliverToPartyDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DeliverToParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// BuyerDataPlatformBillOfMaterialHeaderData retrieves all the data_platform_bill_of_material_header_datum's DataPlatformBillOfMaterialHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformBillOfMaterialHeaderData(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// ComponentProductBuyerDataPlatformBillOfMaterialItemData retrieves all the data_platform_bill_of_material_item_datum's DataPlatformBillOfMaterialItemData with an executor via ComponentProductBuyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) ComponentProductBuyerDataPlatformBillOfMaterialItemData(mods ...qm.QueryMod) dataPlatformBillOfMaterialItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_item_data`.`ComponentProductBuyer`=?", o.Buyer),
	)

	return DataPlatformBillOfMaterialItemData(queryMods...)
}

// BuyerDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// BuyerDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// BuyerDataPlatformInspectionLotOperationData retrieves all the data_platform_inspection_lot_operation_datum's DataPlatformInspectionLotOperationData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformInspectionLotOperationData(mods ...qm.QueryMod) dataPlatformInspectionLotOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_lot_operation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformInspectionLotOperationData(queryMods...)
}

// BuyerDataPlatformInvoiceDocumentItemData retrieves all the data_platform_invoice_document_item_datum's DataPlatformInvoiceDocumentItemData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformInvoiceDocumentItemData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformInvoiceDocumentItemData(queryMods...)
}

// BuyerDataPlatformOperationsHeaderData retrieves all the data_platform_operations_header_datum's DataPlatformOperationsHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformOperationsHeaderData(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// BuyerDataPlatformOperationsItemData retrieves all the data_platform_operations_item_datum's DataPlatformOperationsItemData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformOperationsItemData(mods ...qm.QueryMod) dataPlatformOperationsItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOperationsItemData(queryMods...)
}

// ComponentProductBuyerDataPlatformOperationsItemOperationComponentData retrieves all the data_platform_operations_item_operation_component_datum's DataPlatformOperationsItemOperationComponentData with an executor via ComponentProductBuyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) ComponentProductBuyerDataPlatformOperationsItemOperationComponentData(mods ...qm.QueryMod) dataPlatformOperationsItemOperationComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_operation_component_data`.`ComponentProductBuyer`=?", o.Buyer),
	)

	return DataPlatformOperationsItemOperationComponentData(queryMods...)
}

// BuyerDataPlatformOperationsItemOperationData retrieves all the data_platform_operations_item_operation_datum's DataPlatformOperationsItemOperationData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformOperationsItemOperationData(mods ...qm.QueryMod) dataPlatformOperationsItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_operation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOperationsItemOperationData(queryMods...)
}

// BuyerDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// BuyerDataPlatformPlannedOrderHeaderData retrieves all the data_platform_planned_order_header_datum's DataPlatformPlannedOrderHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformPlannedOrderHeaderData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformPlannedOrderHeaderData(queryMods...)
}

// ComponentProductBuyerDataPlatformPlannedOrderItemComponentData retrieves all the data_platform_planned_order_item_component_datum's DataPlatformPlannedOrderItemComponentData with an executor via ComponentProductBuyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) ComponentProductBuyerDataPlatformPlannedOrderItemComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_component_data`.`ComponentProductBuyer`=?", o.Buyer),
	)

	return DataPlatformPlannedOrderItemComponentData(queryMods...)
}

// BuyerDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData retrieves all the data_platform_planned_order_item_operation_component_datum's DataPlatformPlannedOrderItemOperationComponentData with an executor via ComponentProductBuyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_component_data`.`ComponentProductBuyer`=?", o.Buyer),
	)

	return DataPlatformPlannedOrderItemOperationComponentData(queryMods...)
}

// BuyerDataPlatformPlannedOrderItemOperationData retrieves all the data_platform_planned_order_item_operation_datum's DataPlatformPlannedOrderItemOperationData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformPlannedOrderItemOperationData(queryMods...)
}

// BuyerDataPlatformProductStockAvailabilityByBatchData retrieves all the data_platform_product_stock_availability_by_batch_datum's DataPlatformProductStockAvailabilityByBatchData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformProductStockAvailabilityByBatchData(mods ...qm.QueryMod) dataPlatformProductStockAvailabilityByBatchDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_availability_by_batch_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockAvailabilityByBatchData(queryMods...)
}

// BuyerDataPlatformProductStockAvailabilityByProjectData retrieves all the data_platform_product_stock_availability_by_project_datum's DataPlatformProductStockAvailabilityByProjectData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformProductStockAvailabilityByProjectData(mods ...qm.QueryMod) dataPlatformProductStockAvailabilityByProjectDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_availability_by_project_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockAvailabilityByProjectData(queryMods...)
}

// BuyerDataPlatformProductStockByStorageBinByBatchData retrieves all the data_platform_product_stock_by_storage_bin_by_batch_datum's DataPlatformProductStockByStorageBinByBatchData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformProductStockByStorageBinByBatchData(mods ...qm.QueryMod) dataPlatformProductStockByStorageBinByBatchDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_by_storage_bin_by_batch_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockByStorageBinByBatchData(queryMods...)
}

// BuyerDataPlatformProductStockProductStockAvailabilityData retrieves all the data_platform_product_stock_product_stock_availability_datum's DataPlatformProductStockProductStockAvailabilityData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformProductStockProductStockAvailabilityData(mods ...qm.QueryMod) dataPlatformProductStockProductStockAvailabilityDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_availability_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockProductStockAvailabilityData(queryMods...)
}

// BuyerDataPlatformProductStockProductStockByBatchData retrieves all the data_platform_product_stock_product_stock_by_batch_datum's DataPlatformProductStockProductStockByBatchData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformProductStockProductStockByBatchData(mods ...qm.QueryMod) dataPlatformProductStockProductStockByBatchDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_by_batch_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockProductStockByBatchData(queryMods...)
}

// BuyerDataPlatformProductStockProductStockByOrderData retrieves all the data_platform_product_stock_product_stock_by_order_datum's DataPlatformProductStockProductStockByOrderData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformProductStockProductStockByOrderData(mods ...qm.QueryMod) dataPlatformProductStockProductStockByOrderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_by_order_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockProductStockByOrderData(queryMods...)
}

// BuyerDataPlatformProductStockProductStockByProjectData retrieves all the data_platform_product_stock_product_stock_by_project_datum's DataPlatformProductStockProductStockByProjectData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformProductStockProductStockByProjectData(mods ...qm.QueryMod) dataPlatformProductStockProductStockByProjectDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_by_project_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockProductStockByProjectData(queryMods...)
}

// BuyerDataPlatformProductStockProductStockByStorageBinData retrieves all the data_platform_product_stock_product_stock_by_storage_bin_datum's DataPlatformProductStockProductStockByStorageBinData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformProductStockProductStockByStorageBinData(mods ...qm.QueryMod) dataPlatformProductStockProductStockByStorageBinDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_by_storage_bin_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockProductStockByStorageBinData(queryMods...)
}

// BuyerDataPlatformProductStockProductStockData retrieves all the data_platform_product_stock_product_stock_datum's DataPlatformProductStockProductStockData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformProductStockProductStockData(mods ...qm.QueryMod) dataPlatformProductStockProductStockDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockProductStockData(queryMods...)
}

// BuyerDataPlatformProductionOrderHeaderData retrieves all the data_platform_production_order_header_datum's DataPlatformProductionOrderHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductionOrderHeaderData(queryMods...)
}

// BuyerDataPlatformProductionOrderItemData retrieves all the data_platform_production_order_item_datum's DataPlatformProductionOrderItemData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformProductionOrderItemData(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// BuyerDataPlatformProductionOrderItemOperationData retrieves all the data_platform_production_order_item_operation_datum's DataPlatformProductionOrderItemOperationData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryPlantRelationData retrieves all the data_platform_scr_delivery_plant_relation_datum's DataPlatformSCRDeliveryPlantRelationData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryRelationDatum) BuyerDataPlatformSCRDeliveryPlantRelationData(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_delivery_plant_relation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSCRDeliveryPlantRelationData(queryMods...)
}

// LoadDeliverFromPartyDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadDeliverFromPartyDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.DeliverFromParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliverFromParty {
					continue Outer
				}
			}

			args = append(args, obj.DeliverFromParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliverFromParty == foreign.BusinessPartner {
				local.R.DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadDeliverToPartyDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.DeliverToParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliverToParty {
					continue Outer
				}
			}

			args = append(args, obj.DeliverToParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliverToPartyDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliverToParty == foreign.BusinessPartner {
				local.R.DeliverToPartyDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformBillOfMaterialHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformBillOfMaterialHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_header_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformBillOfMaterialHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformBillOfMaterialHeaderData = append(local.R.BuyerDataPlatformBillOfMaterialHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformBillOfMaterialItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadComponentProductBuyerDataPlatformBillOfMaterialItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_item_data`),
		qm.WhereIn(`data_platform_bill_of_material_item_data.ComponentProductBuyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_item_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_item_data")
	}

	if singular {
		object.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.ComponentProductBuyer {
				local.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData = append(local.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformDeliveryDocumentHeaderData = append(local.R.BuyerDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformDeliveryDocumentItemData = append(local.R.BuyerDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformInspectionLotOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformInspectionLotOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_operation_data`),
		qm.WhereIn(`data_platform_inspection_lot_operation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_lot_operation_data")
	}

	var resultSlice []*DataPlatformInspectionLotOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_lot_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_lot_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_operation_data")
	}

	if singular {
		object.R.BuyerDataPlatformInspectionLotOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformInspectionLotOperationData = append(local.R.BuyerDataPlatformInspectionLotOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformInvoiceDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformInvoiceDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_data`),
		qm.WhereIn(`data_platform_invoice_document_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformInvoiceDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformInvoiceDocumentItemData = append(local.R.BuyerDataPlatformInvoiceDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOperationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformOperationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_header_data")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformOperationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOperationsHeaderData = append(local.R.BuyerDataPlatformOperationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOperationsItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformOperationsItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_data`),
		qm.WhereIn(`data_platform_operations_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_data")
	}

	var resultSlice []*DataPlatformOperationsItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformOperationsItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOperationsItemData = append(local.R.BuyerDataPlatformOperationsItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformOperationsItemOperationComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadComponentProductBuyerDataPlatformOperationsItemOperationComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_operation_component_data`),
		qm.WhereIn(`data_platform_operations_item_operation_component_data.ComponentProductBuyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_operation_component_data")
	}

	var resultSlice []*DataPlatformOperationsItemOperationComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_operation_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_operation_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_operation_component_data")
	}

	if singular {
		object.R.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.ComponentProductBuyer {
				local.R.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData = append(local.R.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOperationsItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformOperationsItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_operation_data`),
		qm.WhereIn(`data_platform_operations_item_operation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_operation_data")
	}

	var resultSlice []*DataPlatformOperationsItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_operation_data")
	}

	if singular {
		object.R.BuyerDataPlatformOperationsItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOperationsItemOperationData = append(local.R.BuyerDataPlatformOperationsItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOrdersItemData = append(local.R.BuyerDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformPlannedOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformPlannedOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_data`),
		qm.WhereIn(`data_platform_planned_order_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_header_data")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformPlannedOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformPlannedOrderHeaderData = append(local.R.BuyerDataPlatformPlannedOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformPlannedOrderItemComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadComponentProductBuyerDataPlatformPlannedOrderItemComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_component_data`),
		qm.WhereIn(`data_platform_planned_order_item_component_data.ComponentProductBuyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_component_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_component_data")
	}

	if singular {
		object.R.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.ComponentProductBuyer {
				local.R.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData = append(local.R.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformPlannedOrderItemData = append(local.R.BuyerDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_component_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_component_data.ComponentProductBuyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_component_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_component_data")
	}

	if singular {
		object.R.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.ComponentProductBuyer {
				local.R.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData = append(local.R.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformPlannedOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformPlannedOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_data")
	}

	if singular {
		object.R.BuyerDataPlatformPlannedOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformPlannedOrderItemOperationData = append(local.R.BuyerDataPlatformPlannedOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockAvailabilityByBatchData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformProductStockAvailabilityByBatchData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_availability_by_batch_data`),
		qm.WhereIn(`data_platform_product_stock_availability_by_batch_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_availability_by_batch_data")
	}

	var resultSlice []*DataPlatformProductStockAvailabilityByBatchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_availability_by_batch_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_availability_by_batch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_availability_by_batch_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockAvailabilityByBatchData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockAvailabilityByBatchData = append(local.R.BuyerDataPlatformProductStockAvailabilityByBatchData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockAvailabilityByProjectData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformProductStockAvailabilityByProjectData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_availability_by_project_data`),
		qm.WhereIn(`data_platform_product_stock_availability_by_project_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_availability_by_project_data")
	}

	var resultSlice []*DataPlatformProductStockAvailabilityByProjectDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_availability_by_project_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_availability_by_project_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_availability_by_project_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockAvailabilityByProjectData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockAvailabilityByProjectData = append(local.R.BuyerDataPlatformProductStockAvailabilityByProjectData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockByStorageBinByBatchData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformProductStockByStorageBinByBatchData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_by_storage_bin_by_batch_data`),
		qm.WhereIn(`data_platform_product_stock_by_storage_bin_by_batch_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_by_storage_bin_by_batch_data")
	}

	var resultSlice []*DataPlatformProductStockByStorageBinByBatchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_by_storage_bin_by_batch_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_by_storage_bin_by_batch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_by_storage_bin_by_batch_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockByStorageBinByBatchData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockByStorageBinByBatchData = append(local.R.BuyerDataPlatformProductStockByStorageBinByBatchData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockProductStockAvailabilityData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformProductStockProductStockAvailabilityData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_availability_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_availability_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_availability_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockAvailabilityDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_availability_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_availability_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_availability_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockProductStockAvailabilityData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockProductStockAvailabilityData = append(local.R.BuyerDataPlatformProductStockProductStockAvailabilityData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockProductStockByBatchData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformProductStockProductStockByBatchData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_by_batch_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_by_batch_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_by_batch_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockByBatchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_by_batch_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_by_batch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_by_batch_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockProductStockByBatchData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockProductStockByBatchData = append(local.R.BuyerDataPlatformProductStockProductStockByBatchData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockProductStockByOrderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformProductStockProductStockByOrderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_by_order_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_by_order_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_by_order_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockByOrderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_by_order_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_by_order_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_by_order_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockProductStockByOrderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockProductStockByOrderData = append(local.R.BuyerDataPlatformProductStockProductStockByOrderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockProductStockByProjectData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformProductStockProductStockByProjectData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_by_project_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_by_project_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_by_project_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockByProjectDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_by_project_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_by_project_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_by_project_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockProductStockByProjectData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockProductStockByProjectData = append(local.R.BuyerDataPlatformProductStockProductStockByProjectData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockProductStockByStorageBinData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformProductStockProductStockByStorageBinData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_by_storage_bin_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_by_storage_bin_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockByStorageBinDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_by_storage_bin_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockProductStockByStorageBinData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockProductStockByStorageBinData = append(local.R.BuyerDataPlatformProductStockProductStockByStorageBinData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockProductStockData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformProductStockProductStockData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockProductStockData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockProductStockData = append(local.R.BuyerDataPlatformProductStockProductStockData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductionOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformProductionOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_data`),
		qm.WhereIn(`data_platform_production_order_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductionOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductionOrderHeaderData = append(local.R.BuyerDataPlatformProductionOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductionOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformProductionOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductionOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductionOrderItemData = append(local.R.BuyerDataPlatformProductionOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductionOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformProductionOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductionOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductionOrderItemOperationData = append(local.R.BuyerDataPlatformProductionOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryPlantRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryRelationDatumL) LoadBuyerDataPlatformSCRDeliveryPlantRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryRelationDatum
	var object *DataPlatformSCRDeliveryRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryRelationDatum.(*DataPlatformSCRDeliveryRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryRelationDatum.(*[]*DataPlatformSCRDeliveryRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_plant_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_delivery_plant_relation_data")
	}

	var resultSlice []*DataPlatformSCRDeliveryPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_delivery_plant_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_delivery_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_plant_relation_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRDeliveryPlantRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryPlantRelationData = append(local.R.BuyerDataPlatformSCRDeliveryPlantRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// SetDeliverFromPartyDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRDeliveryRelationDatum to the related item.
// Sets o.R.DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRDeliveryRelationDatum) SetDeliverFromPartyDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_delivery_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliverFromParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetDeliverToPartyDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRDeliveryRelationDatum to the related item.
// Sets o.R.DeliverToPartyDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRDeliveryRelationDatum) SetDeliverToPartyDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_delivery_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliverToParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			DeliverToPartyDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformSCRDeliveryRelationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformSCRDeliveryRelationDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_delivery_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// AddBuyerDataPlatformBillOfMaterialHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformBillOfMaterialHeaderData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformBillOfMaterialHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.BillOfMaterial}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformBillOfMaterialHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformBillOfMaterialHeaderData = append(o.R.BuyerDataPlatformBillOfMaterialHeaderData, related...)
	}

	return nil
}

// AddComponentProductBuyerDataPlatformBillOfMaterialItemData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddComponentProductBuyerDataPlatformBillOfMaterialItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBuyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBuyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			ComponentProductBuyerDataPlatformBillOfMaterialItemData: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData = append(o.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData, related...)
	}

	return nil
}

// AddBuyerDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformDeliveryDocumentHeaderData = append(o.R.BuyerDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// AddBuyerDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformDeliveryDocumentItemData = append(o.R.BuyerDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// AddBuyerDataPlatformInspectionLotOperationData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformInspectionLotOperationData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformInspectionLotOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_lot_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.InspectionLot, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformInspectionLotOperationData: related,
		}
	} else {
		o.R.BuyerDataPlatformInspectionLotOperationData = append(o.R.BuyerDataPlatformInspectionLotOperationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformInvoiceDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformInvoiceDocumentItemData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.InvoiceDocument, rel.InvoiceDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformInvoiceDocumentItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformInvoiceDocumentItemData = append(o.R.BuyerDataPlatformInvoiceDocumentItemData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOperationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOperationsHeaderData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformOperationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Operations}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformOperationsHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformOperationsHeaderData = append(o.R.BuyerDataPlatformOperationsHeaderData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOperationsItemData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOperationsItemData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformOperationsItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Operations, rel.OperationsItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformOperationsItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformOperationsItemData = append(o.R.BuyerDataPlatformOperationsItemData, related...)
	}

	return nil
}

// AddComponentProductBuyerDataPlatformOperationsItemOperationComponentData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddComponentProductBuyerDataPlatformOperationsItemOperationComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBuyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_operation_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Operations, rel.OperationsItem, rel.OperationID, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBuyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			ComponentProductBuyerDataPlatformOperationsItemOperationComponentData: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData = append(o.R.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOperationsItemOperationData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOperationsItemOperationData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformOperationsItemOperationData: related,
		}
	} else {
		o.R.BuyerDataPlatformOperationsItemOperationData = append(o.R.BuyerDataPlatformOperationsItemOperationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOrdersItemData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformOrdersItemData = append(o.R.BuyerDataPlatformOrdersItemData, related...)
	}

	return nil
}

// AddBuyerDataPlatformPlannedOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformPlannedOrderHeaderData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.PlannedOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformPlannedOrderHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformPlannedOrderHeaderData = append(o.R.BuyerDataPlatformPlannedOrderHeaderData, related...)
	}

	return nil
}

// AddComponentProductBuyerDataPlatformPlannedOrderItemComponentData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddComponentProductBuyerDataPlatformPlannedOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBuyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.PlannedOrder, rel.PlannedOrderItem, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBuyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			ComponentProductBuyerDataPlatformPlannedOrderItemComponentData: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData = append(o.R.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData, related...)
	}

	return nil
}

// AddBuyerDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformPlannedOrderItemData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformPlannedOrderItemData = append(o.R.BuyerDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// AddComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBuyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBuyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData = append(o.R.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData, related...)
	}

	return nil
}

// AddBuyerDataPlatformPlannedOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformPlannedOrderItemOperationData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformPlannedOrderItemOperationData: related,
		}
	} else {
		o.R.BuyerDataPlatformPlannedOrderItemOperationData = append(o.R.BuyerDataPlatformPlannedOrderItemOperationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockAvailabilityByBatchData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockAvailabilityByBatchData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformProductStockAvailabilityByBatchData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockAvailabilityByBatchDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_availability_by_batch_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockAvailabilityByBatchDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.BusinessPartner, rel.Plant, rel.Batch, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.ProductStockAvailabilityDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformProductStockAvailabilityByBatchData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockAvailabilityByBatchData = append(o.R.BuyerDataPlatformProductStockAvailabilityByBatchData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockAvailabilityByProjectData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockAvailabilityByProjectData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformProductStockAvailabilityByProjectData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockAvailabilityByProjectDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_availability_by_project_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.Project, rel.WBSElement, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.ProductStockAvailabilityDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformProductStockAvailabilityByProjectData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockAvailabilityByProjectData = append(o.R.BuyerDataPlatformProductStockAvailabilityByProjectData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockByStorageBinByBatchData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockByStorageBinByBatchData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformProductStockByStorageBinByBatchData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockByStorageBinByBatchDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_by_storage_bin_by_batch_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockByStorageBinByBatchDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.BusinessPartner, rel.Plant, rel.StorageLocation, rel.StorageBin, rel.Batch, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformProductStockByStorageBinByBatchData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockByStorageBinByBatchData = append(o.R.BuyerDataPlatformProductStockByStorageBinByBatchData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockProductStockAvailabilityData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockProductStockAvailabilityData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformProductStockProductStockAvailabilityData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockAvailabilityDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_availability_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockAvailabilityDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.BusinessPartner, rel.Plant, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.ProductStockAvailabilityDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformProductStockProductStockAvailabilityData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockProductStockAvailabilityData = append(o.R.BuyerDataPlatformProductStockProductStockAvailabilityData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockProductStockByBatchData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockProductStockByBatchData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformProductStockProductStockByBatchData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockByBatchDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_by_batch_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByBatchDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.BusinessPartner, rel.Plant, rel.Batch, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformProductStockProductStockByBatchData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockProductStockByBatchData = append(o.R.BuyerDataPlatformProductStockProductStockByBatchData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockProductStockByOrderData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockProductStockByOrderData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformProductStockProductStockByOrderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockByOrderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_by_order_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByOrderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.OrderID, rel.OrderItem, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformProductStockProductStockByOrderData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockProductStockByOrderData = append(o.R.BuyerDataPlatformProductStockProductStockByOrderData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockProductStockByProjectData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockProductStockByProjectData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformProductStockProductStockByProjectData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockByProjectDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_by_project_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByProjectDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.Project, rel.WBSElement, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformProductStockProductStockByProjectData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockProductStockByProjectData = append(o.R.BuyerDataPlatformProductStockProductStockByProjectData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockProductStockByStorageBinData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockProductStockByStorageBinData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformProductStockProductStockByStorageBinData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockByStorageBinDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_by_storage_bin_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.BusinessPartner, rel.Plant, rel.StorageLocation, rel.StorageBin, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformProductStockProductStockByStorageBinData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockProductStockByStorageBinData = append(o.R.BuyerDataPlatformProductStockProductStockByStorageBinData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockProductStockData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockProductStockData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformProductStockProductStockData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.BusinessPartner, rel.Plant, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformProductStockProductStockData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockProductStockData = append(o.R.BuyerDataPlatformProductStockProductStockData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductionOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductionOrderHeaderData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformProductionOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.ProductionOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformProductionOrderHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductionOrderHeaderData = append(o.R.BuyerDataPlatformProductionOrderHeaderData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductionOrderItemData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductionOrderItemData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformProductionOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.ProductionOrder, rel.ProductionOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformProductionOrderItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductionOrderItemData = append(o.R.BuyerDataPlatformProductionOrderItemData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductionOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductionOrderItemOperationData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformProductionOrderItemOperationData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductionOrderItemOperationData = append(o.R.BuyerDataPlatformProductionOrderItemOperationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSCRDeliveryPlantRelationData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRDeliveryPlantRelationData.
func (o *DataPlatformSCRDeliveryRelationDatum) AddBuyerDataPlatformSCRDeliveryPlantRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryPlantRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_delivery_plant_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryRelationDatumR{
			BuyerDataPlatformSCRDeliveryPlantRelationData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryPlantRelationData = append(o.R.BuyerDataPlatformSCRDeliveryPlantRelationData, related...)
	}

	return nil
}

// DataPlatformSCRDeliveryRelationData retrieves all the records using an executor.
func DataPlatformSCRDeliveryRelationData(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	mods = append(mods, qm.From("`data_platform_scr_delivery_relation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_scr_delivery_relation_data`.*"})
	}

	return dataPlatformSCRDeliveryRelationDatumQuery{q}
}

// FindDataPlatformSCRDeliveryRelationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, buyer int, seller int, deliverToParty int, deliverFromParty int, selectCols ...string) (*DataPlatformSCRDeliveryRelationDatum, error) {
	dataPlatformSCRDeliveryRelationDatumObj := &DataPlatformSCRDeliveryRelationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_scr_delivery_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, buyer, seller, deliverToParty, deliverFromParty)

	err := q.Bind(ctx, exec, dataPlatformSCRDeliveryRelationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_scr_delivery_relation_data")
	}

	return dataPlatformSCRDeliveryRelationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSCRDeliveryRelationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_delivery_relation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRDeliveryRelationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSCRDeliveryRelationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSCRDeliveryRelationDatumInsertCache[key]
	dataPlatformSCRDeliveryRelationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSCRDeliveryRelationDatumAllColumns,
			dataPlatformSCRDeliveryRelationDatumColumnsWithDefault,
			dataPlatformSCRDeliveryRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRDeliveryRelationDatumType, dataPlatformSCRDeliveryRelationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSCRDeliveryRelationDatumType, dataPlatformSCRDeliveryRelationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_scr_delivery_relation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_scr_delivery_relation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_scr_delivery_relation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_scr_delivery_relation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipDeliveryID,
		o.Buyer,
		o.Seller,
		o.DeliverToParty,
		o.DeliverFromParty,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_delivery_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRDeliveryRelationDatumInsertCacheMut.Lock()
		dataPlatformSCRDeliveryRelationDatumInsertCache[key] = cache
		dataPlatformSCRDeliveryRelationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSCRDeliveryRelationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSCRDeliveryRelationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSCRDeliveryRelationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSCRDeliveryRelationDatumUpdateCache[key]
	dataPlatformSCRDeliveryRelationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSCRDeliveryRelationDatumAllColumns,
			dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_scr_delivery_relation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_scr_delivery_relation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRDeliveryRelationDatumType, dataPlatformSCRDeliveryRelationDatumMapping, append(wl, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_scr_delivery_relation_data row")
	}

	if !cached {
		dataPlatformSCRDeliveryRelationDatumUpdateCacheMut.Lock()
		dataPlatformSCRDeliveryRelationDatumUpdateCache[key] = cache
		dataPlatformSCRDeliveryRelationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSCRDeliveryRelationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_scr_delivery_relation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSCRDeliveryRelationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRDeliveryRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_scr_delivery_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSCRDeliveryRelationDatum slice")
	}

	return nil
}

var mySQLDataPlatformSCRDeliveryRelationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSCRDeliveryRelationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_delivery_relation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRDeliveryRelationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSCRDeliveryRelationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSCRDeliveryRelationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSCRDeliveryRelationDatumUpsertCache[key]
	dataPlatformSCRDeliveryRelationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSCRDeliveryRelationDatumAllColumns,
			dataPlatformSCRDeliveryRelationDatumColumnsWithDefault,
			dataPlatformSCRDeliveryRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSCRDeliveryRelationDatumAllColumns,
			dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_scr_delivery_relation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_scr_delivery_relation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_scr_delivery_relation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRDeliveryRelationDatumType, dataPlatformSCRDeliveryRelationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSCRDeliveryRelationDatumType, dataPlatformSCRDeliveryRelationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_scr_delivery_relation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSCRDeliveryRelationDatumType, dataPlatformSCRDeliveryRelationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_scr_delivery_relation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_delivery_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRDeliveryRelationDatumUpsertCacheMut.Lock()
		dataPlatformSCRDeliveryRelationDatumUpsertCache[key] = cache
		dataPlatformSCRDeliveryRelationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSCRDeliveryRelationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSCRDeliveryRelationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSCRDeliveryRelationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSCRDeliveryRelationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_scr_delivery_relation_data` WHERE `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_scr_delivery_relation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSCRDeliveryRelationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSCRDeliveryRelationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_scr_delivery_relation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSCRDeliveryRelationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRDeliveryRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_scr_delivery_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSCRDeliveryRelationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSCRDeliveryRelationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSCRDeliveryRelationDatum(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSCRDeliveryRelationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSCRDeliveryRelationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRDeliveryRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_scr_delivery_relation_data`.* FROM `data_platform_scr_delivery_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSCRDeliveryRelationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSCRDeliveryRelationDatumExists checks if the DataPlatformSCRDeliveryRelationDatum row exists.
func DataPlatformSCRDeliveryRelationDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, buyer int, seller int, deliverToParty int, deliverFromParty int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_scr_delivery_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, buyer, seller, deliverToParty, deliverFromParty)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, buyer, seller, deliverToParty, deliverFromParty)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_scr_delivery_relation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSCRDeliveryRelationDatum row exists.
func (o *DataPlatformSCRDeliveryRelationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSCRDeliveryRelationDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty)
}
