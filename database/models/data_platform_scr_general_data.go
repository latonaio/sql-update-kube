// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSCRGeneralDatum is an object representing the database table.
type DataPlatformSCRGeneralDatum struct {
	SupplyChainRelationshipID int       `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	Buyer                     int       `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                    int       `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	CreationDate              string    `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate            string    `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion       null.Bool `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSCRGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSCRGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSCRGeneralDatumColumns = struct {
	SupplyChainRelationshipID string
	Buyer                     string
	Seller                    string
	CreationDate              string
	LastChangeDate            string
	IsMarkedForDeletion       string
}{
	SupplyChainRelationshipID: "SupplyChainRelationshipID",
	Buyer:                     "Buyer",
	Seller:                    "Seller",
	CreationDate:              "CreationDate",
	LastChangeDate:            "LastChangeDate",
	IsMarkedForDeletion:       "IsMarkedForDeletion",
}

var DataPlatformSCRGeneralDatumTableColumns = struct {
	SupplyChainRelationshipID string
	Buyer                     string
	Seller                    string
	CreationDate              string
	LastChangeDate            string
	IsMarkedForDeletion       string
}{
	SupplyChainRelationshipID: "data_platform_scr_general_data.SupplyChainRelationshipID",
	Buyer:                     "data_platform_scr_general_data.Buyer",
	Seller:                    "data_platform_scr_general_data.Seller",
	CreationDate:              "data_platform_scr_general_data.CreationDate",
	LastChangeDate:            "data_platform_scr_general_data.LastChangeDate",
	IsMarkedForDeletion:       "data_platform_scr_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSCRGeneralDatumWhere = struct {
	SupplyChainRelationshipID whereHelperint
	Buyer                     whereHelperint
	Seller                    whereHelperint
	CreationDate              whereHelperstring
	LastChangeDate            whereHelperstring
	IsMarkedForDeletion       whereHelpernull_Bool
}{
	SupplyChainRelationshipID: whereHelperint{field: "`data_platform_scr_general_data`.`SupplyChainRelationshipID`"},
	Buyer:                     whereHelperint{field: "`data_platform_scr_general_data`.`Buyer`"},
	Seller:                    whereHelperint{field: "`data_platform_scr_general_data`.`Seller`"},
	CreationDate:              whereHelperstring{field: "`data_platform_scr_general_data`.`CreationDate`"},
	LastChangeDate:            whereHelperstring{field: "`data_platform_scr_general_data`.`LastChangeDate`"},
	IsMarkedForDeletion:       whereHelpernull_Bool{field: "`data_platform_scr_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSCRGeneralDatumRels is where relationship names are stored.
var DataPlatformSCRGeneralDatumRels = struct {
	BuyerDataPlatformBusinessPartnerGeneralDatum                            string
	SellerDataPlatformBusinessPartnerGeneralDatum                           string
	BuyerDataPlatformBillOfMaterialHeaderData                               string
	ComponentProductBuyerDataPlatformBillOfMaterialItemData                 string
	BuyerDataPlatformContractHeaderData                                     string
	BuyerDataPlatformInvoiceDocumentItemPricingElementData                  string
	BuyerDataPlatformOperationsHeaderData                                   string
	BuyerDataPlatformOperationsItemData                                     string
	ComponentProductBuyerDataPlatformOperationsItemOperationComponentData   string
	BuyerDataPlatformOperationsItemOperationData                            string
	BuyerDataPlatformOrdersHeaderData                                       string
	BuyerDataPlatformOrdersItemData                                         string
	BuyerDataPlatformOrdersItemPricingElementData                           string
	BuyerDataPlatformPlannedOrderHeaderData                                 string
	ComponentProductBuyerDataPlatformPlannedOrderItemComponentData          string
	BuyerDataPlatformPlannedOrderItemData                                   string
	ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData string
	BuyerDataPlatformPlannedOrderItemOperationData                          string
	BuyerDataPlatformPriceMasterPriceMasterData                             string
	BuyerDataPlatformProductStockAvailabilityByBatchData                    string
	BuyerDataPlatformProductStockAvailabilityByProjectData                  string
	BuyerDataPlatformProductStockByStorageBinByBatchData                    string
	BuyerDataPlatformProductStockProductStockAvailabilityData               string
	BuyerDataPlatformProductStockProductStockByBatchData                    string
	BuyerDataPlatformProductStockProductStockByOrderData                    string
	BuyerDataPlatformProductStockProductStockByProjectData                  string
	BuyerDataPlatformProductStockProductStockByStorageBinData               string
	BuyerDataPlatformProductStockProductStockData                           string
	BuyerDataPlatformProductionOrderHeaderData                              string
	BuyerDataPlatformProductionOrderItemData                                string
	BuyerDataPlatformProductionOrderItemOperationData                       string
	BuyerDataPlatformQuotationsHeaderData                                   string
	BuyerDataPlatformQuotationsItemPricingElementData                       string
	BuyerDataPlatformSCRBillingRelationData                                 string
	BuyerDataPlatformSCRDeliveryRelationData                                string
	BuyerDataPlatformSCRFreightRelationData                                 string
	BuyerDataPlatformSCRGeneralDocData                                      string
	BuyerDataPlatformSCRProductionPlantRelationData                         string
	BuyerDataPlatformSCRStockConfPlantRelationData                          string
	BuyerDataPlatformSCRTransactionData                                     string
}{
	BuyerDataPlatformBusinessPartnerGeneralDatum:                            "BuyerDataPlatformBusinessPartnerGeneralDatum",
	SellerDataPlatformBusinessPartnerGeneralDatum:                           "SellerDataPlatformBusinessPartnerGeneralDatum",
	BuyerDataPlatformBillOfMaterialHeaderData:                               "BuyerDataPlatformBillOfMaterialHeaderData",
	ComponentProductBuyerDataPlatformBillOfMaterialItemData:                 "ComponentProductBuyerDataPlatformBillOfMaterialItemData",
	BuyerDataPlatformContractHeaderData:                                     "BuyerDataPlatformContractHeaderData",
	BuyerDataPlatformInvoiceDocumentItemPricingElementData:                  "BuyerDataPlatformInvoiceDocumentItemPricingElementData",
	BuyerDataPlatformOperationsHeaderData:                                   "BuyerDataPlatformOperationsHeaderData",
	BuyerDataPlatformOperationsItemData:                                     "BuyerDataPlatformOperationsItemData",
	ComponentProductBuyerDataPlatformOperationsItemOperationComponentData:   "ComponentProductBuyerDataPlatformOperationsItemOperationComponentData",
	BuyerDataPlatformOperationsItemOperationData:                            "BuyerDataPlatformOperationsItemOperationData",
	BuyerDataPlatformOrdersHeaderData:                                       "BuyerDataPlatformOrdersHeaderData",
	BuyerDataPlatformOrdersItemData:                                         "BuyerDataPlatformOrdersItemData",
	BuyerDataPlatformOrdersItemPricingElementData:                           "BuyerDataPlatformOrdersItemPricingElementData",
	BuyerDataPlatformPlannedOrderHeaderData:                                 "BuyerDataPlatformPlannedOrderHeaderData",
	ComponentProductBuyerDataPlatformPlannedOrderItemComponentData:          "ComponentProductBuyerDataPlatformPlannedOrderItemComponentData",
	BuyerDataPlatformPlannedOrderItemData:                                   "BuyerDataPlatformPlannedOrderItemData",
	ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData: "ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData",
	BuyerDataPlatformPlannedOrderItemOperationData:                          "BuyerDataPlatformPlannedOrderItemOperationData",
	BuyerDataPlatformPriceMasterPriceMasterData:                             "BuyerDataPlatformPriceMasterPriceMasterData",
	BuyerDataPlatformProductStockAvailabilityByBatchData:                    "BuyerDataPlatformProductStockAvailabilityByBatchData",
	BuyerDataPlatformProductStockAvailabilityByProjectData:                  "BuyerDataPlatformProductStockAvailabilityByProjectData",
	BuyerDataPlatformProductStockByStorageBinByBatchData:                    "BuyerDataPlatformProductStockByStorageBinByBatchData",
	BuyerDataPlatformProductStockProductStockAvailabilityData:               "BuyerDataPlatformProductStockProductStockAvailabilityData",
	BuyerDataPlatformProductStockProductStockByBatchData:                    "BuyerDataPlatformProductStockProductStockByBatchData",
	BuyerDataPlatformProductStockProductStockByOrderData:                    "BuyerDataPlatformProductStockProductStockByOrderData",
	BuyerDataPlatformProductStockProductStockByProjectData:                  "BuyerDataPlatformProductStockProductStockByProjectData",
	BuyerDataPlatformProductStockProductStockByStorageBinData:               "BuyerDataPlatformProductStockProductStockByStorageBinData",
	BuyerDataPlatformProductStockProductStockData:                           "BuyerDataPlatformProductStockProductStockData",
	BuyerDataPlatformProductionOrderHeaderData:                              "BuyerDataPlatformProductionOrderHeaderData",
	BuyerDataPlatformProductionOrderItemData:                                "BuyerDataPlatformProductionOrderItemData",
	BuyerDataPlatformProductionOrderItemOperationData:                       "BuyerDataPlatformProductionOrderItemOperationData",
	BuyerDataPlatformQuotationsHeaderData:                                   "BuyerDataPlatformQuotationsHeaderData",
	BuyerDataPlatformQuotationsItemPricingElementData:                       "BuyerDataPlatformQuotationsItemPricingElementData",
	BuyerDataPlatformSCRBillingRelationData:                                 "BuyerDataPlatformSCRBillingRelationData",
	BuyerDataPlatformSCRDeliveryRelationData:                                "BuyerDataPlatformSCRDeliveryRelationData",
	BuyerDataPlatformSCRFreightRelationData:                                 "BuyerDataPlatformSCRFreightRelationData",
	BuyerDataPlatformSCRGeneralDocData:                                      "BuyerDataPlatformSCRGeneralDocData",
	BuyerDataPlatformSCRProductionPlantRelationData:                         "BuyerDataPlatformSCRProductionPlantRelationData",
	BuyerDataPlatformSCRStockConfPlantRelationData:                          "BuyerDataPlatformSCRStockConfPlantRelationData",
	BuyerDataPlatformSCRTransactionData:                                     "BuyerDataPlatformSCRTransactionData",
}

// dataPlatformSCRGeneralDatumR is where relationships are stored.
type dataPlatformSCRGeneralDatumR struct {
	BuyerDataPlatformBusinessPartnerGeneralDatum                            *DataPlatformBusinessPartnerGeneralDatum                   `boil:"BuyerDataPlatformBusinessPartnerGeneralDatum" json:"BuyerDataPlatformBusinessPartnerGeneralDatum" toml:"BuyerDataPlatformBusinessPartnerGeneralDatum" yaml:"BuyerDataPlatformBusinessPartnerGeneralDatum"`
	SellerDataPlatformBusinessPartnerGeneralDatum                           *DataPlatformBusinessPartnerGeneralDatum                   `boil:"SellerDataPlatformBusinessPartnerGeneralDatum" json:"SellerDataPlatformBusinessPartnerGeneralDatum" toml:"SellerDataPlatformBusinessPartnerGeneralDatum" yaml:"SellerDataPlatformBusinessPartnerGeneralDatum"`
	BuyerDataPlatformBillOfMaterialHeaderData                               DataPlatformBillOfMaterialHeaderDatumSlice                 `boil:"BuyerDataPlatformBillOfMaterialHeaderData" json:"BuyerDataPlatformBillOfMaterialHeaderData" toml:"BuyerDataPlatformBillOfMaterialHeaderData" yaml:"BuyerDataPlatformBillOfMaterialHeaderData"`
	ComponentProductBuyerDataPlatformBillOfMaterialItemData                 DataPlatformBillOfMaterialItemDatumSlice                   `boil:"ComponentProductBuyerDataPlatformBillOfMaterialItemData" json:"ComponentProductBuyerDataPlatformBillOfMaterialItemData" toml:"ComponentProductBuyerDataPlatformBillOfMaterialItemData" yaml:"ComponentProductBuyerDataPlatformBillOfMaterialItemData"`
	BuyerDataPlatformContractHeaderData                                     DataPlatformContractHeaderDatumSlice                       `boil:"BuyerDataPlatformContractHeaderData" json:"BuyerDataPlatformContractHeaderData" toml:"BuyerDataPlatformContractHeaderData" yaml:"BuyerDataPlatformContractHeaderData"`
	BuyerDataPlatformInvoiceDocumentItemPricingElementData                  DataPlatformInvoiceDocumentItemPricingElementDatumSlice    `boil:"BuyerDataPlatformInvoiceDocumentItemPricingElementData" json:"BuyerDataPlatformInvoiceDocumentItemPricingElementData" toml:"BuyerDataPlatformInvoiceDocumentItemPricingElementData" yaml:"BuyerDataPlatformInvoiceDocumentItemPricingElementData"`
	BuyerDataPlatformOperationsHeaderData                                   DataPlatformOperationsHeaderDatumSlice                     `boil:"BuyerDataPlatformOperationsHeaderData" json:"BuyerDataPlatformOperationsHeaderData" toml:"BuyerDataPlatformOperationsHeaderData" yaml:"BuyerDataPlatformOperationsHeaderData"`
	BuyerDataPlatformOperationsItemData                                     DataPlatformOperationsItemDatumSlice                       `boil:"BuyerDataPlatformOperationsItemData" json:"BuyerDataPlatformOperationsItemData" toml:"BuyerDataPlatformOperationsItemData" yaml:"BuyerDataPlatformOperationsItemData"`
	ComponentProductBuyerDataPlatformOperationsItemOperationComponentData   DataPlatformOperationsItemOperationComponentDatumSlice     `boil:"ComponentProductBuyerDataPlatformOperationsItemOperationComponentData" json:"ComponentProductBuyerDataPlatformOperationsItemOperationComponentData" toml:"ComponentProductBuyerDataPlatformOperationsItemOperationComponentData" yaml:"ComponentProductBuyerDataPlatformOperationsItemOperationComponentData"`
	BuyerDataPlatformOperationsItemOperationData                            DataPlatformOperationsItemOperationDatumSlice              `boil:"BuyerDataPlatformOperationsItemOperationData" json:"BuyerDataPlatformOperationsItemOperationData" toml:"BuyerDataPlatformOperationsItemOperationData" yaml:"BuyerDataPlatformOperationsItemOperationData"`
	BuyerDataPlatformOrdersHeaderData                                       DataPlatformOrdersHeaderDatumSlice                         `boil:"BuyerDataPlatformOrdersHeaderData" json:"BuyerDataPlatformOrdersHeaderData" toml:"BuyerDataPlatformOrdersHeaderData" yaml:"BuyerDataPlatformOrdersHeaderData"`
	BuyerDataPlatformOrdersItemData                                         DataPlatformOrdersItemDatumSlice                           `boil:"BuyerDataPlatformOrdersItemData" json:"BuyerDataPlatformOrdersItemData" toml:"BuyerDataPlatformOrdersItemData" yaml:"BuyerDataPlatformOrdersItemData"`
	BuyerDataPlatformOrdersItemPricingElementData                           DataPlatformOrdersItemPricingElementDatumSlice             `boil:"BuyerDataPlatformOrdersItemPricingElementData" json:"BuyerDataPlatformOrdersItemPricingElementData" toml:"BuyerDataPlatformOrdersItemPricingElementData" yaml:"BuyerDataPlatformOrdersItemPricingElementData"`
	BuyerDataPlatformPlannedOrderHeaderData                                 DataPlatformPlannedOrderHeaderDatumSlice                   `boil:"BuyerDataPlatformPlannedOrderHeaderData" json:"BuyerDataPlatformPlannedOrderHeaderData" toml:"BuyerDataPlatformPlannedOrderHeaderData" yaml:"BuyerDataPlatformPlannedOrderHeaderData"`
	ComponentProductBuyerDataPlatformPlannedOrderItemComponentData          DataPlatformPlannedOrderItemComponentDatumSlice            `boil:"ComponentProductBuyerDataPlatformPlannedOrderItemComponentData" json:"ComponentProductBuyerDataPlatformPlannedOrderItemComponentData" toml:"ComponentProductBuyerDataPlatformPlannedOrderItemComponentData" yaml:"ComponentProductBuyerDataPlatformPlannedOrderItemComponentData"`
	BuyerDataPlatformPlannedOrderItemData                                   DataPlatformPlannedOrderItemDatumSlice                     `boil:"BuyerDataPlatformPlannedOrderItemData" json:"BuyerDataPlatformPlannedOrderItemData" toml:"BuyerDataPlatformPlannedOrderItemData" yaml:"BuyerDataPlatformPlannedOrderItemData"`
	ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData DataPlatformPlannedOrderItemOperationComponentDatumSlice   `boil:"ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData" json:"ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData" toml:"ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData" yaml:"ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData"`
	BuyerDataPlatformPlannedOrderItemOperationData                          DataPlatformPlannedOrderItemOperationDatumSlice            `boil:"BuyerDataPlatformPlannedOrderItemOperationData" json:"BuyerDataPlatformPlannedOrderItemOperationData" toml:"BuyerDataPlatformPlannedOrderItemOperationData" yaml:"BuyerDataPlatformPlannedOrderItemOperationData"`
	BuyerDataPlatformPriceMasterPriceMasterData                             DataPlatformPriceMasterPriceMasterDatumSlice               `boil:"BuyerDataPlatformPriceMasterPriceMasterData" json:"BuyerDataPlatformPriceMasterPriceMasterData" toml:"BuyerDataPlatformPriceMasterPriceMasterData" yaml:"BuyerDataPlatformPriceMasterPriceMasterData"`
	BuyerDataPlatformProductStockAvailabilityByBatchData                    DataPlatformProductStockAvailabilityByBatchDatumSlice      `boil:"BuyerDataPlatformProductStockAvailabilityByBatchData" json:"BuyerDataPlatformProductStockAvailabilityByBatchData" toml:"BuyerDataPlatformProductStockAvailabilityByBatchData" yaml:"BuyerDataPlatformProductStockAvailabilityByBatchData"`
	BuyerDataPlatformProductStockAvailabilityByProjectData                  DataPlatformProductStockAvailabilityByProjectDatumSlice    `boil:"BuyerDataPlatformProductStockAvailabilityByProjectData" json:"BuyerDataPlatformProductStockAvailabilityByProjectData" toml:"BuyerDataPlatformProductStockAvailabilityByProjectData" yaml:"BuyerDataPlatformProductStockAvailabilityByProjectData"`
	BuyerDataPlatformProductStockByStorageBinByBatchData                    DataPlatformProductStockByStorageBinByBatchDatumSlice      `boil:"BuyerDataPlatformProductStockByStorageBinByBatchData" json:"BuyerDataPlatformProductStockByStorageBinByBatchData" toml:"BuyerDataPlatformProductStockByStorageBinByBatchData" yaml:"BuyerDataPlatformProductStockByStorageBinByBatchData"`
	BuyerDataPlatformProductStockProductStockAvailabilityData               DataPlatformProductStockProductStockAvailabilityDatumSlice `boil:"BuyerDataPlatformProductStockProductStockAvailabilityData" json:"BuyerDataPlatformProductStockProductStockAvailabilityData" toml:"BuyerDataPlatformProductStockProductStockAvailabilityData" yaml:"BuyerDataPlatformProductStockProductStockAvailabilityData"`
	BuyerDataPlatformProductStockProductStockByBatchData                    DataPlatformProductStockProductStockByBatchDatumSlice      `boil:"BuyerDataPlatformProductStockProductStockByBatchData" json:"BuyerDataPlatformProductStockProductStockByBatchData" toml:"BuyerDataPlatformProductStockProductStockByBatchData" yaml:"BuyerDataPlatformProductStockProductStockByBatchData"`
	BuyerDataPlatformProductStockProductStockByOrderData                    DataPlatformProductStockProductStockByOrderDatumSlice      `boil:"BuyerDataPlatformProductStockProductStockByOrderData" json:"BuyerDataPlatformProductStockProductStockByOrderData" toml:"BuyerDataPlatformProductStockProductStockByOrderData" yaml:"BuyerDataPlatformProductStockProductStockByOrderData"`
	BuyerDataPlatformProductStockProductStockByProjectData                  DataPlatformProductStockProductStockByProjectDatumSlice    `boil:"BuyerDataPlatformProductStockProductStockByProjectData" json:"BuyerDataPlatformProductStockProductStockByProjectData" toml:"BuyerDataPlatformProductStockProductStockByProjectData" yaml:"BuyerDataPlatformProductStockProductStockByProjectData"`
	BuyerDataPlatformProductStockProductStockByStorageBinData               DataPlatformProductStockProductStockByStorageBinDatumSlice `boil:"BuyerDataPlatformProductStockProductStockByStorageBinData" json:"BuyerDataPlatformProductStockProductStockByStorageBinData" toml:"BuyerDataPlatformProductStockProductStockByStorageBinData" yaml:"BuyerDataPlatformProductStockProductStockByStorageBinData"`
	BuyerDataPlatformProductStockProductStockData                           DataPlatformProductStockProductStockDatumSlice             `boil:"BuyerDataPlatformProductStockProductStockData" json:"BuyerDataPlatformProductStockProductStockData" toml:"BuyerDataPlatformProductStockProductStockData" yaml:"BuyerDataPlatformProductStockProductStockData"`
	BuyerDataPlatformProductionOrderHeaderData                              DataPlatformProductionOrderHeaderDatumSlice                `boil:"BuyerDataPlatformProductionOrderHeaderData" json:"BuyerDataPlatformProductionOrderHeaderData" toml:"BuyerDataPlatformProductionOrderHeaderData" yaml:"BuyerDataPlatformProductionOrderHeaderData"`
	BuyerDataPlatformProductionOrderItemData                                DataPlatformProductionOrderItemDatumSlice                  `boil:"BuyerDataPlatformProductionOrderItemData" json:"BuyerDataPlatformProductionOrderItemData" toml:"BuyerDataPlatformProductionOrderItemData" yaml:"BuyerDataPlatformProductionOrderItemData"`
	BuyerDataPlatformProductionOrderItemOperationData                       DataPlatformProductionOrderItemOperationDatumSlice         `boil:"BuyerDataPlatformProductionOrderItemOperationData" json:"BuyerDataPlatformProductionOrderItemOperationData" toml:"BuyerDataPlatformProductionOrderItemOperationData" yaml:"BuyerDataPlatformProductionOrderItemOperationData"`
	BuyerDataPlatformQuotationsHeaderData                                   DataPlatformQuotationsHeaderDatumSlice                     `boil:"BuyerDataPlatformQuotationsHeaderData" json:"BuyerDataPlatformQuotationsHeaderData" toml:"BuyerDataPlatformQuotationsHeaderData" yaml:"BuyerDataPlatformQuotationsHeaderData"`
	BuyerDataPlatformQuotationsItemPricingElementData                       DataPlatformQuotationsItemPricingElementDatumSlice         `boil:"BuyerDataPlatformQuotationsItemPricingElementData" json:"BuyerDataPlatformQuotationsItemPricingElementData" toml:"BuyerDataPlatformQuotationsItemPricingElementData" yaml:"BuyerDataPlatformQuotationsItemPricingElementData"`
	BuyerDataPlatformSCRBillingRelationData                                 DataPlatformSCRBillingRelationDatumSlice                   `boil:"BuyerDataPlatformSCRBillingRelationData" json:"BuyerDataPlatformSCRBillingRelationData" toml:"BuyerDataPlatformSCRBillingRelationData" yaml:"BuyerDataPlatformSCRBillingRelationData"`
	BuyerDataPlatformSCRDeliveryRelationData                                DataPlatformSCRDeliveryRelationDatumSlice                  `boil:"BuyerDataPlatformSCRDeliveryRelationData" json:"BuyerDataPlatformSCRDeliveryRelationData" toml:"BuyerDataPlatformSCRDeliveryRelationData" yaml:"BuyerDataPlatformSCRDeliveryRelationData"`
	BuyerDataPlatformSCRFreightRelationData                                 DataPlatformSCRFreightRelationDatumSlice                   `boil:"BuyerDataPlatformSCRFreightRelationData" json:"BuyerDataPlatformSCRFreightRelationData" toml:"BuyerDataPlatformSCRFreightRelationData" yaml:"BuyerDataPlatformSCRFreightRelationData"`
	BuyerDataPlatformSCRGeneralDocData                                      DataPlatformSCRGeneralDocDatumSlice                        `boil:"BuyerDataPlatformSCRGeneralDocData" json:"BuyerDataPlatformSCRGeneralDocData" toml:"BuyerDataPlatformSCRGeneralDocData" yaml:"BuyerDataPlatformSCRGeneralDocData"`
	BuyerDataPlatformSCRProductionPlantRelationData                         DataPlatformSCRProductionPlantRelationDatumSlice           `boil:"BuyerDataPlatformSCRProductionPlantRelationData" json:"BuyerDataPlatformSCRProductionPlantRelationData" toml:"BuyerDataPlatformSCRProductionPlantRelationData" yaml:"BuyerDataPlatformSCRProductionPlantRelationData"`
	BuyerDataPlatformSCRStockConfPlantRelationData                          DataPlatformSCRStockConfPlantRelationDatumSlice            `boil:"BuyerDataPlatformSCRStockConfPlantRelationData" json:"BuyerDataPlatformSCRStockConfPlantRelationData" toml:"BuyerDataPlatformSCRStockConfPlantRelationData" yaml:"BuyerDataPlatformSCRStockConfPlantRelationData"`
	BuyerDataPlatformSCRTransactionData                                     DataPlatformSCRTransactionDatumSlice                       `boil:"BuyerDataPlatformSCRTransactionData" json:"BuyerDataPlatformSCRTransactionData" toml:"BuyerDataPlatformSCRTransactionData" yaml:"BuyerDataPlatformSCRTransactionData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSCRGeneralDatumR) NewStruct() *dataPlatformSCRGeneralDatumR {
	return &dataPlatformSCRGeneralDatumR{}
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRGeneralDatumR) GetSellerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.SellerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformBillOfMaterialHeaderData() DataPlatformBillOfMaterialHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformBillOfMaterialHeaderData
}

func (r *dataPlatformSCRGeneralDatumR) GetComponentProductBuyerDataPlatformBillOfMaterialItemData() DataPlatformBillOfMaterialItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformBillOfMaterialItemData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformContractHeaderData() DataPlatformContractHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformContractHeaderData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformInvoiceDocumentItemPricingElementData() DataPlatformInvoiceDocumentItemPricingElementDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformInvoiceDocumentItemPricingElementData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformOperationsHeaderData() DataPlatformOperationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOperationsHeaderData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformOperationsItemData() DataPlatformOperationsItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOperationsItemData
}

func (r *dataPlatformSCRGeneralDatumR) GetComponentProductBuyerDataPlatformOperationsItemOperationComponentData() DataPlatformOperationsItemOperationComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformOperationsItemOperationData() DataPlatformOperationsItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOperationsItemOperationData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformOrdersHeaderData() DataPlatformOrdersHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOrdersHeaderData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOrdersItemData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformOrdersItemPricingElementData() DataPlatformOrdersItemPricingElementDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOrdersItemPricingElementData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformPlannedOrderHeaderData() DataPlatformPlannedOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformPlannedOrderHeaderData
}

func (r *dataPlatformSCRGeneralDatumR) GetComponentProductBuyerDataPlatformPlannedOrderItemComponentData() DataPlatformPlannedOrderItemComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformPlannedOrderItemData
}

func (r *dataPlatformSCRGeneralDatumR) GetComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData() DataPlatformPlannedOrderItemOperationComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformPlannedOrderItemOperationData() DataPlatformPlannedOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformPlannedOrderItemOperationData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformPriceMasterPriceMasterData() DataPlatformPriceMasterPriceMasterDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformPriceMasterPriceMasterData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformProductStockAvailabilityByBatchData() DataPlatformProductStockAvailabilityByBatchDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockAvailabilityByBatchData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformProductStockAvailabilityByProjectData() DataPlatformProductStockAvailabilityByProjectDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockAvailabilityByProjectData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformProductStockByStorageBinByBatchData() DataPlatformProductStockByStorageBinByBatchDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockByStorageBinByBatchData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformProductStockProductStockAvailabilityData() DataPlatformProductStockProductStockAvailabilityDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockProductStockAvailabilityData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformProductStockProductStockByBatchData() DataPlatformProductStockProductStockByBatchDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockProductStockByBatchData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformProductStockProductStockByOrderData() DataPlatformProductStockProductStockByOrderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockProductStockByOrderData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformProductStockProductStockByProjectData() DataPlatformProductStockProductStockByProjectDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockProductStockByProjectData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformProductStockProductStockByStorageBinData() DataPlatformProductStockProductStockByStorageBinDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockProductStockByStorageBinData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformProductStockProductStockData() DataPlatformProductStockProductStockDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductStockProductStockData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformProductionOrderHeaderData() DataPlatformProductionOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductionOrderHeaderData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformProductionOrderItemData() DataPlatformProductionOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductionOrderItemData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformProductionOrderItemOperationData() DataPlatformProductionOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformProductionOrderItemOperationData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformQuotationsHeaderData() DataPlatformQuotationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformQuotationsHeaderData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformQuotationsItemPricingElementData() DataPlatformQuotationsItemPricingElementDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformQuotationsItemPricingElementData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformSCRBillingRelationData() DataPlatformSCRBillingRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRBillingRelationData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformSCRDeliveryRelationData() DataPlatformSCRDeliveryRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformSCRFreightRelationData() DataPlatformSCRFreightRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRFreightRelationData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformSCRGeneralDocData() DataPlatformSCRGeneralDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDocData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformSCRProductionPlantRelationData() DataPlatformSCRProductionPlantRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRProductionPlantRelationData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformSCRStockConfPlantRelationData() DataPlatformSCRStockConfPlantRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRStockConfPlantRelationData
}

func (r *dataPlatformSCRGeneralDatumR) GetBuyerDataPlatformSCRTransactionData() DataPlatformSCRTransactionDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRTransactionData
}

// dataPlatformSCRGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformSCRGeneralDatumL struct{}

var (
	dataPlatformSCRGeneralDatumAllColumns            = []string{"SupplyChainRelationshipID", "Buyer", "Seller", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRGeneralDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "Buyer", "Seller", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformSCRGeneralDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "Buyer", "Seller"}
	dataPlatformSCRGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSCRGeneralDatumSlice is an alias for a slice of pointers to DataPlatformSCRGeneralDatum.
	// This should almost always be used instead of []DataPlatformSCRGeneralDatum.
	DataPlatformSCRGeneralDatumSlice []*DataPlatformSCRGeneralDatum

	dataPlatformSCRGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSCRGeneralDatumType                 = reflect.TypeOf(&DataPlatformSCRGeneralDatum{})
	dataPlatformSCRGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformSCRGeneralDatumType)
	dataPlatformSCRGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSCRGeneralDatumType, dataPlatformSCRGeneralDatumMapping, dataPlatformSCRGeneralDatumPrimaryKeyColumns)
	dataPlatformSCRGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformSCRGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSCRGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSCRGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSCRGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSCRGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSCRGeneralDatum record from the query.
func (q dataPlatformSCRGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSCRGeneralDatum, error) {
	o := &DataPlatformSCRGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_scr_general_data")
	}

	return o, nil
}

// All returns all DataPlatformSCRGeneralDatum records from the query.
func (q dataPlatformSCRGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSCRGeneralDatumSlice, error) {
	var o []*DataPlatformSCRGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSCRGeneralDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSCRGeneralDatum records in the query.
func (q dataPlatformSCRGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_scr_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSCRGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_scr_general_data exists")
	}

	return count > 0, nil
}

// BuyerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// SellerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRGeneralDatum) SellerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Seller),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// BuyerDataPlatformBillOfMaterialHeaderData retrieves all the data_platform_bill_of_material_header_datum's DataPlatformBillOfMaterialHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformBillOfMaterialHeaderData(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// ComponentProductBuyerDataPlatformBillOfMaterialItemData retrieves all the data_platform_bill_of_material_item_datum's DataPlatformBillOfMaterialItemData with an executor via ComponentProductBuyer column.
func (o *DataPlatformSCRGeneralDatum) ComponentProductBuyerDataPlatformBillOfMaterialItemData(mods ...qm.QueryMod) dataPlatformBillOfMaterialItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_item_data`.`ComponentProductBuyer`=?", o.Buyer),
	)

	return DataPlatformBillOfMaterialItemData(queryMods...)
}

// BuyerDataPlatformContractHeaderData retrieves all the data_platform_contract_header_datum's DataPlatformContractHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformContractHeaderData(mods ...qm.QueryMod) dataPlatformContractHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_contract_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformContractHeaderData(queryMods...)
}

// BuyerDataPlatformInvoiceDocumentItemPricingElementData retrieves all the data_platform_invoice_document_item_pricing_element_datum's DataPlatformInvoiceDocumentItemPricingElementData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformInvoiceDocumentItemPricingElementData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_pricing_element_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformInvoiceDocumentItemPricingElementData(queryMods...)
}

// BuyerDataPlatformOperationsHeaderData retrieves all the data_platform_operations_header_datum's DataPlatformOperationsHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformOperationsHeaderData(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// BuyerDataPlatformOperationsItemData retrieves all the data_platform_operations_item_datum's DataPlatformOperationsItemData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformOperationsItemData(mods ...qm.QueryMod) dataPlatformOperationsItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOperationsItemData(queryMods...)
}

// ComponentProductBuyerDataPlatformOperationsItemOperationComponentData retrieves all the data_platform_operations_item_operation_component_datum's DataPlatformOperationsItemOperationComponentData with an executor via ComponentProductBuyer column.
func (o *DataPlatformSCRGeneralDatum) ComponentProductBuyerDataPlatformOperationsItemOperationComponentData(mods ...qm.QueryMod) dataPlatformOperationsItemOperationComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_operation_component_data`.`ComponentProductBuyer`=?", o.Buyer),
	)

	return DataPlatformOperationsItemOperationComponentData(queryMods...)
}

// BuyerDataPlatformOperationsItemOperationData retrieves all the data_platform_operations_item_operation_datum's DataPlatformOperationsItemOperationData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformOperationsItemOperationData(mods ...qm.QueryMod) dataPlatformOperationsItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_operation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOperationsItemOperationData(queryMods...)
}

// BuyerDataPlatformOrdersHeaderData retrieves all the data_platform_orders_header_datum's DataPlatformOrdersHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// BuyerDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// BuyerDataPlatformOrdersItemPricingElementData retrieves all the data_platform_orders_item_pricing_element_datum's DataPlatformOrdersItemPricingElementData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformOrdersItemPricingElementData(mods ...qm.QueryMod) dataPlatformOrdersItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_pricing_element_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOrdersItemPricingElementData(queryMods...)
}

// BuyerDataPlatformPlannedOrderHeaderData retrieves all the data_platform_planned_order_header_datum's DataPlatformPlannedOrderHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformPlannedOrderHeaderData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformPlannedOrderHeaderData(queryMods...)
}

// ComponentProductBuyerDataPlatformPlannedOrderItemComponentData retrieves all the data_platform_planned_order_item_component_datum's DataPlatformPlannedOrderItemComponentData with an executor via ComponentProductBuyer column.
func (o *DataPlatformSCRGeneralDatum) ComponentProductBuyerDataPlatformPlannedOrderItemComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_component_data`.`ComponentProductBuyer`=?", o.Buyer),
	)

	return DataPlatformPlannedOrderItemComponentData(queryMods...)
}

// BuyerDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData retrieves all the data_platform_planned_order_item_operation_component_datum's DataPlatformPlannedOrderItemOperationComponentData with an executor via ComponentProductBuyer column.
func (o *DataPlatformSCRGeneralDatum) ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_component_data`.`ComponentProductBuyer`=?", o.Buyer),
	)

	return DataPlatformPlannedOrderItemOperationComponentData(queryMods...)
}

// BuyerDataPlatformPlannedOrderItemOperationData retrieves all the data_platform_planned_order_item_operation_datum's DataPlatformPlannedOrderItemOperationData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformPlannedOrderItemOperationData(queryMods...)
}

// BuyerDataPlatformPriceMasterPriceMasterData retrieves all the data_platform_price_master_price_master_datum's DataPlatformPriceMasterPriceMasterData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformPriceMasterPriceMasterData(mods ...qm.QueryMod) dataPlatformPriceMasterPriceMasterDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_price_master_price_master_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformPriceMasterPriceMasterData(queryMods...)
}

// BuyerDataPlatformProductStockAvailabilityByBatchData retrieves all the data_platform_product_stock_availability_by_batch_datum's DataPlatformProductStockAvailabilityByBatchData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformProductStockAvailabilityByBatchData(mods ...qm.QueryMod) dataPlatformProductStockAvailabilityByBatchDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_availability_by_batch_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockAvailabilityByBatchData(queryMods...)
}

// BuyerDataPlatformProductStockAvailabilityByProjectData retrieves all the data_platform_product_stock_availability_by_project_datum's DataPlatformProductStockAvailabilityByProjectData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformProductStockAvailabilityByProjectData(mods ...qm.QueryMod) dataPlatformProductStockAvailabilityByProjectDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_availability_by_project_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockAvailabilityByProjectData(queryMods...)
}

// BuyerDataPlatformProductStockByStorageBinByBatchData retrieves all the data_platform_product_stock_by_storage_bin_by_batch_datum's DataPlatformProductStockByStorageBinByBatchData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformProductStockByStorageBinByBatchData(mods ...qm.QueryMod) dataPlatformProductStockByStorageBinByBatchDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_by_storage_bin_by_batch_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockByStorageBinByBatchData(queryMods...)
}

// BuyerDataPlatformProductStockProductStockAvailabilityData retrieves all the data_platform_product_stock_product_stock_availability_datum's DataPlatformProductStockProductStockAvailabilityData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformProductStockProductStockAvailabilityData(mods ...qm.QueryMod) dataPlatformProductStockProductStockAvailabilityDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_availability_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockProductStockAvailabilityData(queryMods...)
}

// BuyerDataPlatformProductStockProductStockByBatchData retrieves all the data_platform_product_stock_product_stock_by_batch_datum's DataPlatformProductStockProductStockByBatchData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformProductStockProductStockByBatchData(mods ...qm.QueryMod) dataPlatformProductStockProductStockByBatchDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_by_batch_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockProductStockByBatchData(queryMods...)
}

// BuyerDataPlatformProductStockProductStockByOrderData retrieves all the data_platform_product_stock_product_stock_by_order_datum's DataPlatformProductStockProductStockByOrderData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformProductStockProductStockByOrderData(mods ...qm.QueryMod) dataPlatformProductStockProductStockByOrderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_by_order_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockProductStockByOrderData(queryMods...)
}

// BuyerDataPlatformProductStockProductStockByProjectData retrieves all the data_platform_product_stock_product_stock_by_project_datum's DataPlatformProductStockProductStockByProjectData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformProductStockProductStockByProjectData(mods ...qm.QueryMod) dataPlatformProductStockProductStockByProjectDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_by_project_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockProductStockByProjectData(queryMods...)
}

// BuyerDataPlatformProductStockProductStockByStorageBinData retrieves all the data_platform_product_stock_product_stock_by_storage_bin_datum's DataPlatformProductStockProductStockByStorageBinData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformProductStockProductStockByStorageBinData(mods ...qm.QueryMod) dataPlatformProductStockProductStockByStorageBinDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_by_storage_bin_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockProductStockByStorageBinData(queryMods...)
}

// BuyerDataPlatformProductStockProductStockData retrieves all the data_platform_product_stock_product_stock_datum's DataPlatformProductStockProductStockData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformProductStockProductStockData(mods ...qm.QueryMod) dataPlatformProductStockProductStockDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductStockProductStockData(queryMods...)
}

// BuyerDataPlatformProductionOrderHeaderData retrieves all the data_platform_production_order_header_datum's DataPlatformProductionOrderHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductionOrderHeaderData(queryMods...)
}

// BuyerDataPlatformProductionOrderItemData retrieves all the data_platform_production_order_item_datum's DataPlatformProductionOrderItemData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformProductionOrderItemData(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// BuyerDataPlatformProductionOrderItemOperationData retrieves all the data_platform_production_order_item_operation_datum's DataPlatformProductionOrderItemOperationData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// BuyerDataPlatformQuotationsHeaderData retrieves all the data_platform_quotations_header_datum's DataPlatformQuotationsHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformQuotationsHeaderData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformQuotationsHeaderData(queryMods...)
}

// BuyerDataPlatformQuotationsItemPricingElementData retrieves all the data_platform_quotations_item_pricing_element_datum's DataPlatformQuotationsItemPricingElementData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformQuotationsItemPricingElementData(mods ...qm.QueryMod) dataPlatformQuotationsItemPricingElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_item_pricing_element_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformQuotationsItemPricingElementData(queryMods...)
}

// BuyerDataPlatformSCRBillingRelationData retrieves all the data_platform_scr_billing_relation_datum's DataPlatformSCRBillingRelationData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformSCRBillingRelationData(mods ...qm.QueryMod) dataPlatformSCRBillingRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_billing_relation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSCRBillingRelationData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationData retrieves all the data_platform_scr_delivery_relation_datum's DataPlatformSCRDeliveryRelationData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformSCRDeliveryRelationData(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_delivery_relation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRFreightRelationData retrieves all the data_platform_scr_freight_relation_datum's DataPlatformSCRFreightRelationData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformSCRFreightRelationData(mods ...qm.QueryMod) dataPlatformSCRFreightRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_freight_relation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSCRFreightRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDocData retrieves all the data_platform_scr_general_doc_datum's DataPlatformSCRGeneralDocData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformSCRGeneralDocData(mods ...qm.QueryMod) dataPlatformSCRGeneralDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_general_doc_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSCRGeneralDocData(queryMods...)
}

// BuyerDataPlatformSCRProductionPlantRelationData retrieves all the data_platform_scr_production_plant_relation_datum's DataPlatformSCRProductionPlantRelationData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformSCRProductionPlantRelationData(mods ...qm.QueryMod) dataPlatformSCRProductionPlantRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_production_plant_relation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSCRProductionPlantRelationData(queryMods...)
}

// BuyerDataPlatformSCRStockConfPlantRelationData retrieves all the data_platform_scr_stock_conf_plant_relation_datum's DataPlatformSCRStockConfPlantRelationData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformSCRStockConfPlantRelationData(mods ...qm.QueryMod) dataPlatformSCRStockConfPlantRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_stock_conf_plant_relation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSCRStockConfPlantRelationData(queryMods...)
}

// BuyerDataPlatformSCRTransactionData retrieves all the data_platform_scr_transaction_datum's DataPlatformSCRTransactionData with an executor via Buyer column.
func (o *DataPlatformSCRGeneralDatum) BuyerDataPlatformSCRTransactionData(mods ...qm.QueryMod) dataPlatformSCRTransactionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_transaction_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSCRTransactionData(queryMods...)
}

// LoadBuyerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.BusinessPartner {
				local.R.BuyerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadSellerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRGeneralDatumL) LoadSellerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Seller)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Seller {
					continue Outer
				}
			}

			args = append(args, obj.Seller)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Seller == foreign.BusinessPartner {
				local.R.SellerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformBillOfMaterialHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformBillOfMaterialHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_header_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformBillOfMaterialHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformBillOfMaterialHeaderData = append(local.R.BuyerDataPlatformBillOfMaterialHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformBillOfMaterialItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadComponentProductBuyerDataPlatformBillOfMaterialItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_item_data`),
		qm.WhereIn(`data_platform_bill_of_material_item_data.ComponentProductBuyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_item_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_item_data")
	}

	if singular {
		object.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.ComponentProductBuyer {
				local.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData = append(local.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformContractHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformContractHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_contract_header_data`),
		qm.WhereIn(`data_platform_contract_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_contract_header_data")
	}

	var resultSlice []*DataPlatformContractHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_contract_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_contract_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_contract_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformContractHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformContractHeaderData = append(local.R.BuyerDataPlatformContractHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformInvoiceDocumentItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformInvoiceDocumentItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_pricing_element_data`),
		qm.WhereIn(`data_platform_invoice_document_item_pricing_element_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_pricing_element_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_pricing_element_data")
	}

	if singular {
		object.R.BuyerDataPlatformInvoiceDocumentItemPricingElementData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformInvoiceDocumentItemPricingElementData = append(local.R.BuyerDataPlatformInvoiceDocumentItemPricingElementData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOperationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformOperationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_header_data")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformOperationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOperationsHeaderData = append(local.R.BuyerDataPlatformOperationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOperationsItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformOperationsItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_data`),
		qm.WhereIn(`data_platform_operations_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_data")
	}

	var resultSlice []*DataPlatformOperationsItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformOperationsItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOperationsItemData = append(local.R.BuyerDataPlatformOperationsItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformOperationsItemOperationComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadComponentProductBuyerDataPlatformOperationsItemOperationComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_operation_component_data`),
		qm.WhereIn(`data_platform_operations_item_operation_component_data.ComponentProductBuyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_operation_component_data")
	}

	var resultSlice []*DataPlatformOperationsItemOperationComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_operation_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_operation_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_operation_component_data")
	}

	if singular {
		object.R.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.ComponentProductBuyer {
				local.R.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData = append(local.R.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOperationsItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformOperationsItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_operation_data`),
		qm.WhereIn(`data_platform_operations_item_operation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_operation_data")
	}

	var resultSlice []*DataPlatformOperationsItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_operation_data")
	}

	if singular {
		object.R.BuyerDataPlatformOperationsItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOperationsItemOperationData = append(local.R.BuyerDataPlatformOperationsItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOrdersHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformOrdersHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformOrdersHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOrdersHeaderData = append(local.R.BuyerDataPlatformOrdersHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOrdersItemData = append(local.R.BuyerDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOrdersItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformOrdersItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_pricing_element_data`),
		qm.WhereIn(`data_platform_orders_item_pricing_element_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_pricing_element_data")
	}

	var resultSlice []*DataPlatformOrdersItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_pricing_element_data")
	}

	if singular {
		object.R.BuyerDataPlatformOrdersItemPricingElementData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOrdersItemPricingElementData = append(local.R.BuyerDataPlatformOrdersItemPricingElementData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformPlannedOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformPlannedOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_data`),
		qm.WhereIn(`data_platform_planned_order_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_header_data")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformPlannedOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformPlannedOrderHeaderData = append(local.R.BuyerDataPlatformPlannedOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformPlannedOrderItemComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadComponentProductBuyerDataPlatformPlannedOrderItemComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_component_data`),
		qm.WhereIn(`data_platform_planned_order_item_component_data.ComponentProductBuyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_component_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_component_data")
	}

	if singular {
		object.R.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.ComponentProductBuyer {
				local.R.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData = append(local.R.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformPlannedOrderItemData = append(local.R.BuyerDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_component_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_component_data.ComponentProductBuyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_component_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_component_data")
	}

	if singular {
		object.R.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.ComponentProductBuyer {
				local.R.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData = append(local.R.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformPlannedOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformPlannedOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_data")
	}

	if singular {
		object.R.BuyerDataPlatformPlannedOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformPlannedOrderItemOperationData = append(local.R.BuyerDataPlatformPlannedOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformPriceMasterPriceMasterData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformPriceMasterPriceMasterData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_price_master_price_master_data`),
		qm.WhereIn(`data_platform_price_master_price_master_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_price_master_price_master_data")
	}

	var resultSlice []*DataPlatformPriceMasterPriceMasterDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_price_master_price_master_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_price_master_price_master_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_price_master_price_master_data")
	}

	if singular {
		object.R.BuyerDataPlatformPriceMasterPriceMasterData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformPriceMasterPriceMasterData = append(local.R.BuyerDataPlatformPriceMasterPriceMasterData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockAvailabilityByBatchData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformProductStockAvailabilityByBatchData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_availability_by_batch_data`),
		qm.WhereIn(`data_platform_product_stock_availability_by_batch_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_availability_by_batch_data")
	}

	var resultSlice []*DataPlatformProductStockAvailabilityByBatchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_availability_by_batch_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_availability_by_batch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_availability_by_batch_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockAvailabilityByBatchData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockAvailabilityByBatchData = append(local.R.BuyerDataPlatformProductStockAvailabilityByBatchData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockAvailabilityByProjectData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformProductStockAvailabilityByProjectData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_availability_by_project_data`),
		qm.WhereIn(`data_platform_product_stock_availability_by_project_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_availability_by_project_data")
	}

	var resultSlice []*DataPlatformProductStockAvailabilityByProjectDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_availability_by_project_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_availability_by_project_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_availability_by_project_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockAvailabilityByProjectData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockAvailabilityByProjectData = append(local.R.BuyerDataPlatformProductStockAvailabilityByProjectData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockByStorageBinByBatchData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformProductStockByStorageBinByBatchData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_by_storage_bin_by_batch_data`),
		qm.WhereIn(`data_platform_product_stock_by_storage_bin_by_batch_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_by_storage_bin_by_batch_data")
	}

	var resultSlice []*DataPlatformProductStockByStorageBinByBatchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_by_storage_bin_by_batch_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_by_storage_bin_by_batch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_by_storage_bin_by_batch_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockByStorageBinByBatchData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockByStorageBinByBatchData = append(local.R.BuyerDataPlatformProductStockByStorageBinByBatchData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockProductStockAvailabilityData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformProductStockProductStockAvailabilityData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_availability_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_availability_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_availability_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockAvailabilityDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_availability_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_availability_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_availability_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockProductStockAvailabilityData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockProductStockAvailabilityData = append(local.R.BuyerDataPlatformProductStockProductStockAvailabilityData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockProductStockByBatchData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformProductStockProductStockByBatchData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_by_batch_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_by_batch_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_by_batch_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockByBatchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_by_batch_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_by_batch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_by_batch_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockProductStockByBatchData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockProductStockByBatchData = append(local.R.BuyerDataPlatformProductStockProductStockByBatchData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockProductStockByOrderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformProductStockProductStockByOrderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_by_order_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_by_order_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_by_order_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockByOrderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_by_order_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_by_order_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_by_order_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockProductStockByOrderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockProductStockByOrderData = append(local.R.BuyerDataPlatformProductStockProductStockByOrderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockProductStockByProjectData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformProductStockProductStockByProjectData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_by_project_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_by_project_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_by_project_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockByProjectDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_by_project_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_by_project_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_by_project_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockProductStockByProjectData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockProductStockByProjectData = append(local.R.BuyerDataPlatformProductStockProductStockByProjectData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockProductStockByStorageBinData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformProductStockProductStockByStorageBinData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_by_storage_bin_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_by_storage_bin_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockByStorageBinDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_by_storage_bin_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockProductStockByStorageBinData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockProductStockByStorageBinData = append(local.R.BuyerDataPlatformProductStockProductStockByStorageBinData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductStockProductStockData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformProductStockProductStockData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductStockProductStockData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductStockProductStockData = append(local.R.BuyerDataPlatformProductStockProductStockData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductionOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformProductionOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_data`),
		qm.WhereIn(`data_platform_production_order_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductionOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductionOrderHeaderData = append(local.R.BuyerDataPlatformProductionOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductionOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformProductionOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductionOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductionOrderItemData = append(local.R.BuyerDataPlatformProductionOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformProductionOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformProductionOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if singular {
		object.R.BuyerDataPlatformProductionOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformProductionOrderItemOperationData = append(local.R.BuyerDataPlatformProductionOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformQuotationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformQuotationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_data`),
		qm.WhereIn(`data_platform_quotations_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_header_data")
	}

	var resultSlice []*DataPlatformQuotationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformQuotationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformQuotationsHeaderData = append(local.R.BuyerDataPlatformQuotationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformQuotationsItemPricingElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformQuotationsItemPricingElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_item_pricing_element_data`),
		qm.WhereIn(`data_platform_quotations_item_pricing_element_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_item_pricing_element_data")
	}

	var resultSlice []*DataPlatformQuotationsItemPricingElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_item_pricing_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_item_pricing_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_item_pricing_element_data")
	}

	if singular {
		object.R.BuyerDataPlatformQuotationsItemPricingElementData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformQuotationsItemPricingElementData = append(local.R.BuyerDataPlatformQuotationsItemPricingElementData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRBillingRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformSCRBillingRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_billing_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_billing_relation_data")
	}

	var resultSlice []*DataPlatformSCRBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_billing_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_billing_relation_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRBillingRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRBillingRelationData = append(local.R.BuyerDataPlatformSCRBillingRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformSCRDeliveryRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_delivery_relation_data")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_delivery_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRDeliveryRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationData = append(local.R.BuyerDataPlatformSCRDeliveryRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRFreightRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformSCRFreightRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_freight_relation_data`),
		qm.WhereIn(`data_platform_scr_freight_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_freight_relation_data")
	}

	var resultSlice []*DataPlatformSCRFreightRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_freight_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_freight_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_freight_relation_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRFreightRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRFreightRelationData = append(local.R.BuyerDataPlatformSCRFreightRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformSCRGeneralDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_doc_data`),
		qm.WhereIn(`data_platform_scr_general_doc_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_general_doc_data")
	}

	var resultSlice []*DataPlatformSCRGeneralDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_general_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_general_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_doc_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRGeneralDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDocData = append(local.R.BuyerDataPlatformSCRGeneralDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRProductionPlantRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformSCRProductionPlantRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_production_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_production_plant_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_production_plant_relation_data")
	}

	var resultSlice []*DataPlatformSCRProductionPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_production_plant_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_production_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_production_plant_relation_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRProductionPlantRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRProductionPlantRelationData = append(local.R.BuyerDataPlatformSCRProductionPlantRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRStockConfPlantRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformSCRStockConfPlantRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_stock_conf_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_stock_conf_plant_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_stock_conf_plant_relation_data")
	}

	var resultSlice []*DataPlatformSCRStockConfPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_stock_conf_plant_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_stock_conf_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_stock_conf_plant_relation_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRStockConfPlantRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRStockConfPlantRelationData = append(local.R.BuyerDataPlatformSCRStockConfPlantRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRTransactionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRGeneralDatumL) LoadBuyerDataPlatformSCRTransactionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDatum
	var object *DataPlatformSCRGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDatum.(*DataPlatformSCRGeneralDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDatum.(*[]*DataPlatformSCRGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_transaction_data`),
		qm.WhereIn(`data_platform_scr_transaction_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_transaction_data")
	}

	var resultSlice []*DataPlatformSCRTransactionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_transaction_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_transaction_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_transaction_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRTransactionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRTransactionData = append(local.R.BuyerDataPlatformSCRTransactionData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBuyerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRGeneralDatum to the related item.
// Sets o.R.BuyerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRGeneralDatum) SetBuyerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.Buyer, o.Seller}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetSellerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRGeneralDatum to the related item.
// Sets o.R.SellerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRGeneralDatum) SetSellerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Seller"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.Buyer, o.Seller}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Seller = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			SellerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.SellerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// AddBuyerDataPlatformBillOfMaterialHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformBillOfMaterialHeaderData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformBillOfMaterialHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.BillOfMaterial}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformBillOfMaterialHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformBillOfMaterialHeaderData = append(o.R.BuyerDataPlatformBillOfMaterialHeaderData, related...)
	}

	return nil
}

// AddComponentProductBuyerDataPlatformBillOfMaterialItemData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData.
func (o *DataPlatformSCRGeneralDatum) AddComponentProductBuyerDataPlatformBillOfMaterialItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBuyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBuyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			ComponentProductBuyerDataPlatformBillOfMaterialItemData: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData = append(o.R.ComponentProductBuyerDataPlatformBillOfMaterialItemData, related...)
	}

	return nil
}

// AddBuyerDataPlatformContractHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformContractHeaderData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformContractHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformContractHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Contract}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformContractHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformContractHeaderData = append(o.R.BuyerDataPlatformContractHeaderData, related...)
	}

	return nil
}

// AddBuyerDataPlatformInvoiceDocumentItemPricingElementData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformInvoiceDocumentItemPricingElementData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformInvoiceDocumentItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.InvoiceDocument, rel.InvoiceDocumentItem, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformInvoiceDocumentItemPricingElementData: related,
		}
	} else {
		o.R.BuyerDataPlatformInvoiceDocumentItemPricingElementData = append(o.R.BuyerDataPlatformInvoiceDocumentItemPricingElementData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOperationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOperationsHeaderData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformOperationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Operations}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformOperationsHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformOperationsHeaderData = append(o.R.BuyerDataPlatformOperationsHeaderData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOperationsItemData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOperationsItemData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformOperationsItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Operations, rel.OperationsItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformOperationsItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformOperationsItemData = append(o.R.BuyerDataPlatformOperationsItemData, related...)
	}

	return nil
}

// AddComponentProductBuyerDataPlatformOperationsItemOperationComponentData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData.
func (o *DataPlatformSCRGeneralDatum) AddComponentProductBuyerDataPlatformOperationsItemOperationComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBuyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_operation_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Operations, rel.OperationsItem, rel.OperationID, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBuyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			ComponentProductBuyerDataPlatformOperationsItemOperationComponentData: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData = append(o.R.ComponentProductBuyerDataPlatformOperationsItemOperationComponentData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOperationsItemOperationData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOperationsItemOperationData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformOperationsItemOperationData: related,
		}
	} else {
		o.R.BuyerDataPlatformOperationsItemOperationData = append(o.R.BuyerDataPlatformOperationsItemOperationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOrdersHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOrdersHeaderData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformOrdersHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformOrdersHeaderData = append(o.R.BuyerDataPlatformOrdersHeaderData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOrdersItemData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformOrdersItemData = append(o.R.BuyerDataPlatformOrdersItemData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOrdersItemPricingElementData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOrdersItemPricingElementData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformOrdersItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.OrderID, rel.OrderItem, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformOrdersItemPricingElementData: related,
		}
	} else {
		o.R.BuyerDataPlatformOrdersItemPricingElementData = append(o.R.BuyerDataPlatformOrdersItemPricingElementData, related...)
	}

	return nil
}

// AddBuyerDataPlatformPlannedOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformPlannedOrderHeaderData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.PlannedOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformPlannedOrderHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformPlannedOrderHeaderData = append(o.R.BuyerDataPlatformPlannedOrderHeaderData, related...)
	}

	return nil
}

// AddComponentProductBuyerDataPlatformPlannedOrderItemComponentData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData.
func (o *DataPlatformSCRGeneralDatum) AddComponentProductBuyerDataPlatformPlannedOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBuyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.PlannedOrder, rel.PlannedOrderItem, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBuyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			ComponentProductBuyerDataPlatformPlannedOrderItemComponentData: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData = append(o.R.ComponentProductBuyerDataPlatformPlannedOrderItemComponentData, related...)
	}

	return nil
}

// AddBuyerDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformPlannedOrderItemData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformPlannedOrderItemData = append(o.R.BuyerDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// AddComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData.
func (o *DataPlatformSCRGeneralDatum) AddComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBuyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBuyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBuyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData: related,
		}
	} else {
		o.R.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData = append(o.R.ComponentProductBuyerDataPlatformPlannedOrderItemOperationComponentData, related...)
	}

	return nil
}

// AddBuyerDataPlatformPlannedOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformPlannedOrderItemOperationData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformPlannedOrderItemOperationData: related,
		}
	} else {
		o.R.BuyerDataPlatformPlannedOrderItemOperationData = append(o.R.BuyerDataPlatformPlannedOrderItemOperationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformPriceMasterPriceMasterData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformPriceMasterPriceMasterData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformPriceMasterPriceMasterData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPriceMasterPriceMasterDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_price_master_price_master_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPriceMasterPriceMasterDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller, rel.ConditionRecord, rel.ConditionSequentialNumber, rel.Product, rel.ConditionValidityStartDate, rel.ConditionValidityEndDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformPriceMasterPriceMasterData: related,
		}
	} else {
		o.R.BuyerDataPlatformPriceMasterPriceMasterData = append(o.R.BuyerDataPlatformPriceMasterPriceMasterData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockAvailabilityByBatchData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockAvailabilityByBatchData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformProductStockAvailabilityByBatchData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockAvailabilityByBatchDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_availability_by_batch_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockAvailabilityByBatchDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.BusinessPartner, rel.Plant, rel.Batch, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.ProductStockAvailabilityDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformProductStockAvailabilityByBatchData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockAvailabilityByBatchData = append(o.R.BuyerDataPlatformProductStockAvailabilityByBatchData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockAvailabilityByProjectData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockAvailabilityByProjectData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformProductStockAvailabilityByProjectData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockAvailabilityByProjectDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_availability_by_project_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.Project, rel.WBSElement, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.ProductStockAvailabilityDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformProductStockAvailabilityByProjectData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockAvailabilityByProjectData = append(o.R.BuyerDataPlatformProductStockAvailabilityByProjectData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockByStorageBinByBatchData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockByStorageBinByBatchData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformProductStockByStorageBinByBatchData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockByStorageBinByBatchDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_by_storage_bin_by_batch_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockByStorageBinByBatchDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.BusinessPartner, rel.Plant, rel.StorageLocation, rel.StorageBin, rel.Batch, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformProductStockByStorageBinByBatchData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockByStorageBinByBatchData = append(o.R.BuyerDataPlatformProductStockByStorageBinByBatchData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockProductStockAvailabilityData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockProductStockAvailabilityData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformProductStockProductStockAvailabilityData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockAvailabilityDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_availability_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockAvailabilityDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.BusinessPartner, rel.Plant, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.ProductStockAvailabilityDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformProductStockProductStockAvailabilityData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockProductStockAvailabilityData = append(o.R.BuyerDataPlatformProductStockProductStockAvailabilityData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockProductStockByBatchData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockProductStockByBatchData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformProductStockProductStockByBatchData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockByBatchDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_by_batch_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByBatchDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.BusinessPartner, rel.Plant, rel.Batch, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformProductStockProductStockByBatchData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockProductStockByBatchData = append(o.R.BuyerDataPlatformProductStockProductStockByBatchData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockProductStockByOrderData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockProductStockByOrderData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformProductStockProductStockByOrderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockByOrderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_by_order_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByOrderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.OrderID, rel.OrderItem, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformProductStockProductStockByOrderData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockProductStockByOrderData = append(o.R.BuyerDataPlatformProductStockProductStockByOrderData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockProductStockByProjectData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockProductStockByProjectData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformProductStockProductStockByProjectData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockByProjectDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_by_project_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByProjectDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.Project, rel.WBSElement, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformProductStockProductStockByProjectData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockProductStockByProjectData = append(o.R.BuyerDataPlatformProductStockProductStockByProjectData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockProductStockByStorageBinData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockProductStockByStorageBinData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformProductStockProductStockByStorageBinData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockByStorageBinDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_by_storage_bin_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.BusinessPartner, rel.Plant, rel.StorageLocation, rel.StorageBin, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformProductStockProductStockByStorageBinData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockProductStockByStorageBinData = append(o.R.BuyerDataPlatformProductStockProductStockByStorageBinData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductStockProductStockData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductStockProductStockData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformProductStockProductStockData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Product, rel.BusinessPartner, rel.Plant, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformProductStockProductStockData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductStockProductStockData = append(o.R.BuyerDataPlatformProductStockProductStockData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductionOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductionOrderHeaderData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformProductionOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.ProductionOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformProductionOrderHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductionOrderHeaderData = append(o.R.BuyerDataPlatformProductionOrderHeaderData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductionOrderItemData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductionOrderItemData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformProductionOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.ProductionOrder, rel.ProductionOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformProductionOrderItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductionOrderItemData = append(o.R.BuyerDataPlatformProductionOrderItemData, related...)
	}

	return nil
}

// AddBuyerDataPlatformProductionOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformProductionOrderItemOperationData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformProductionOrderItemOperationData: related,
		}
	} else {
		o.R.BuyerDataPlatformProductionOrderItemOperationData = append(o.R.BuyerDataPlatformProductionOrderItemOperationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformQuotationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformQuotationsHeaderData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Quotation}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformQuotationsHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformQuotationsHeaderData = append(o.R.BuyerDataPlatformQuotationsHeaderData, related...)
	}

	return nil
}

// AddBuyerDataPlatformQuotationsItemPricingElementData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformQuotationsItemPricingElementData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformQuotationsItemPricingElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsItemPricingElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_item_pricing_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.Quotation, rel.QuotationItem, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller, rel.PricingProcedureCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformQuotationsItemPricingElementData: related,
		}
	} else {
		o.R.BuyerDataPlatformQuotationsItemPricingElementData = append(o.R.BuyerDataPlatformQuotationsItemPricingElementData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSCRBillingRelationData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRBillingRelationData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformSCRBillingRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRBillingRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_billing_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformSCRBillingRelationData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRBillingRelationData = append(o.R.BuyerDataPlatformSCRBillingRelationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSCRDeliveryRelationData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRDeliveryRelationData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformSCRDeliveryRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_delivery_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformSCRDeliveryRelationData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationData = append(o.R.BuyerDataPlatformSCRDeliveryRelationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSCRFreightRelationData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRFreightRelationData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformSCRFreightRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRFreightRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_freight_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipFreightID, rel.Buyer, rel.Seller, rel.FreightPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformSCRFreightRelationData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRFreightRelationData = append(o.R.BuyerDataPlatformSCRFreightRelationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSCRGeneralDocData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRGeneralDocData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformSCRGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRGeneralDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_general_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformSCRGeneralDocData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDocData = append(o.R.BuyerDataPlatformSCRGeneralDocData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSCRProductionPlantRelationData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRProductionPlantRelationData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformSCRProductionPlantRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRProductionPlantRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_production_plant_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipProductionPlantID, rel.Buyer, rel.Seller, rel.ProductionPlantBusinessPartner, rel.ProductionPlant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformSCRProductionPlantRelationData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRProductionPlantRelationData = append(o.R.BuyerDataPlatformSCRProductionPlantRelationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSCRStockConfPlantRelationData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRStockConfPlantRelationData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformSCRStockConfPlantRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRStockConfPlantRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_stock_conf_plant_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRStockConfPlantRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipStockConfPlantID, rel.Buyer, rel.Seller, rel.StockConfirmationBusinessPartner, rel.StockConfirmationPlant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformSCRStockConfPlantRelationData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRStockConfPlantRelationData = append(o.R.BuyerDataPlatformSCRStockConfPlantRelationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSCRTransactionData adds the given related objects to the existing relationships
// of the data_platform_scr_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRTransactionData.
func (o *DataPlatformSCRGeneralDatum) AddBuyerDataPlatformSCRTransactionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRTransactionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_transaction_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRTransactionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDatumR{
			BuyerDataPlatformSCRTransactionData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRTransactionData = append(o.R.BuyerDataPlatformSCRTransactionData, related...)
	}

	return nil
}

// DataPlatformSCRGeneralData retrieves all the records using an executor.
func DataPlatformSCRGeneralData(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_scr_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_scr_general_data`.*"})
	}

	return dataPlatformSCRGeneralDatumQuery{q}
}

// FindDataPlatformSCRGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, buyer int, seller int, selectCols ...string) (*DataPlatformSCRGeneralDatum, error) {
	dataPlatformSCRGeneralDatumObj := &DataPlatformSCRGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_scr_general_data` where `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, buyer, seller)

	err := q.Bind(ctx, exec, dataPlatformSCRGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_scr_general_data")
	}

	return dataPlatformSCRGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSCRGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_general_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSCRGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSCRGeneralDatumInsertCache[key]
	dataPlatformSCRGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSCRGeneralDatumAllColumns,
			dataPlatformSCRGeneralDatumColumnsWithDefault,
			dataPlatformSCRGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRGeneralDatumType, dataPlatformSCRGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSCRGeneralDatumType, dataPlatformSCRGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_scr_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_scr_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_scr_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_scr_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.Buyer,
		o.Seller,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRGeneralDatumInsertCacheMut.Lock()
		dataPlatformSCRGeneralDatumInsertCache[key] = cache
		dataPlatformSCRGeneralDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSCRGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSCRGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSCRGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSCRGeneralDatumUpdateCache[key]
	dataPlatformSCRGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSCRGeneralDatumAllColumns,
			dataPlatformSCRGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_scr_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_scr_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRGeneralDatumType, dataPlatformSCRGeneralDatumMapping, append(wl, dataPlatformSCRGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_scr_general_data row")
	}

	if !cached {
		dataPlatformSCRGeneralDatumUpdateCacheMut.Lock()
		dataPlatformSCRGeneralDatumUpdateCache[key] = cache
		dataPlatformSCRGeneralDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSCRGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_scr_general_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSCRGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_scr_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSCRGeneralDatum slice")
	}

	return nil
}

var mySQLDataPlatformSCRGeneralDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSCRGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_general_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSCRGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSCRGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSCRGeneralDatumUpsertCache[key]
	dataPlatformSCRGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSCRGeneralDatumAllColumns,
			dataPlatformSCRGeneralDatumColumnsWithDefault,
			dataPlatformSCRGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSCRGeneralDatumAllColumns,
			dataPlatformSCRGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_scr_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_scr_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_scr_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRGeneralDatumType, dataPlatformSCRGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSCRGeneralDatumType, dataPlatformSCRGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_scr_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSCRGeneralDatumType, dataPlatformSCRGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_scr_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRGeneralDatumUpsertCacheMut.Lock()
		dataPlatformSCRGeneralDatumUpsertCache[key] = cache
		dataPlatformSCRGeneralDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSCRGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSCRGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSCRGeneralDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSCRGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_scr_general_data` WHERE `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_scr_general_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSCRGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSCRGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_scr_general_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSCRGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_scr_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSCRGeneralDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSCRGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSCRGeneralDatum(ctx, exec, o.SupplyChainRelationshipID, o.Buyer, o.Seller)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSCRGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSCRGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_scr_general_data`.* FROM `data_platform_scr_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSCRGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSCRGeneralDatumExists checks if the DataPlatformSCRGeneralDatum row exists.
func DataPlatformSCRGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, buyer int, seller int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_scr_general_data` where `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, buyer, seller)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, buyer, seller)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_scr_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSCRGeneralDatum row exists.
func (o *DataPlatformSCRGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSCRGeneralDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.Buyer, o.Seller)
}
