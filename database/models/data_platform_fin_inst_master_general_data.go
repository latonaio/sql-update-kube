// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformFinInstMasterGeneralDatum is an object representing the database table.
type DataPlatformFinInstMasterGeneralDatum struct {
	FinInstCountry      string      `boil:"FinInstCountry" json:"FinInstCountry" toml:"FinInstCountry" yaml:"FinInstCountry"`
	FinInstCode         string      `boil:"FinInstCode" json:"FinInstCode" toml:"FinInstCode" yaml:"FinInstCode"`
	FinInstName         null.String `boil:"FinInstName" json:"FinInstName,omitempty" toml:"FinInstName" yaml:"FinInstName,omitempty"`
	FinInstFullName     null.String `boil:"FinInstFullName" json:"FinInstFullName,omitempty" toml:"FinInstFullName" yaml:"FinInstFullName,omitempty"`
	AddressID           null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`
	SWIFTCode           null.String `boil:"SWIFTCode" json:"SWIFTCode,omitempty" toml:"SWIFTCode" yaml:"SWIFTCode,omitempty"`
	IsMarkedForDeletion null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformFinInstMasterGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformFinInstMasterGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformFinInstMasterGeneralDatumColumns = struct {
	FinInstCountry      string
	FinInstCode         string
	FinInstName         string
	FinInstFullName     string
	AddressID           string
	SWIFTCode           string
	IsMarkedForDeletion string
}{
	FinInstCountry:      "FinInstCountry",
	FinInstCode:         "FinInstCode",
	FinInstName:         "FinInstName",
	FinInstFullName:     "FinInstFullName",
	AddressID:           "AddressID",
	SWIFTCode:           "SWIFTCode",
	IsMarkedForDeletion: "IsMarkedForDeletion",
}

var DataPlatformFinInstMasterGeneralDatumTableColumns = struct {
	FinInstCountry      string
	FinInstCode         string
	FinInstName         string
	FinInstFullName     string
	AddressID           string
	SWIFTCode           string
	IsMarkedForDeletion string
}{
	FinInstCountry:      "data_platform_fin_inst_master_general_data.FinInstCountry",
	FinInstCode:         "data_platform_fin_inst_master_general_data.FinInstCode",
	FinInstName:         "data_platform_fin_inst_master_general_data.FinInstName",
	FinInstFullName:     "data_platform_fin_inst_master_general_data.FinInstFullName",
	AddressID:           "data_platform_fin_inst_master_general_data.AddressID",
	SWIFTCode:           "data_platform_fin_inst_master_general_data.SWIFTCode",
	IsMarkedForDeletion: "data_platform_fin_inst_master_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformFinInstMasterGeneralDatumWhere = struct {
	FinInstCountry      whereHelperstring
	FinInstCode         whereHelperstring
	FinInstName         whereHelpernull_String
	FinInstFullName     whereHelpernull_String
	AddressID           whereHelpernull_Int
	SWIFTCode           whereHelpernull_String
	IsMarkedForDeletion whereHelpernull_Bool
}{
	FinInstCountry:      whereHelperstring{field: "`data_platform_fin_inst_master_general_data`.`FinInstCountry`"},
	FinInstCode:         whereHelperstring{field: "`data_platform_fin_inst_master_general_data`.`FinInstCode`"},
	FinInstName:         whereHelpernull_String{field: "`data_platform_fin_inst_master_general_data`.`FinInstName`"},
	FinInstFullName:     whereHelpernull_String{field: "`data_platform_fin_inst_master_general_data`.`FinInstFullName`"},
	AddressID:           whereHelpernull_Int{field: "`data_platform_fin_inst_master_general_data`.`AddressID`"},
	SWIFTCode:           whereHelpernull_String{field: "`data_platform_fin_inst_master_general_data`.`SWIFTCode`"},
	IsMarkedForDeletion: whereHelpernull_Bool{field: "`data_platform_fin_inst_master_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformFinInstMasterGeneralDatumRels is where relationship names are stored.
var DataPlatformFinInstMasterGeneralDatumRels = struct {
	AddressIDDataPlatformAddressAddressDatum       string
	FinInstCountryDataPlatformCountryCountryDatum  string
	FinInstCodeDataPlatformFinInstMasterBranchData string
}{
	AddressIDDataPlatformAddressAddressDatum:       "AddressIDDataPlatformAddressAddressDatum",
	FinInstCountryDataPlatformCountryCountryDatum:  "FinInstCountryDataPlatformCountryCountryDatum",
	FinInstCodeDataPlatformFinInstMasterBranchData: "FinInstCodeDataPlatformFinInstMasterBranchData",
}

// dataPlatformFinInstMasterGeneralDatumR is where relationships are stored.
type dataPlatformFinInstMasterGeneralDatumR struct {
	AddressIDDataPlatformAddressAddressDatum       *DataPlatformAddressAddressDatum          `boil:"AddressIDDataPlatformAddressAddressDatum" json:"AddressIDDataPlatformAddressAddressDatum" toml:"AddressIDDataPlatformAddressAddressDatum" yaml:"AddressIDDataPlatformAddressAddressDatum"`
	FinInstCountryDataPlatformCountryCountryDatum  *DataPlatformCountryCountryDatum          `boil:"FinInstCountryDataPlatformCountryCountryDatum" json:"FinInstCountryDataPlatformCountryCountryDatum" toml:"FinInstCountryDataPlatformCountryCountryDatum" yaml:"FinInstCountryDataPlatformCountryCountryDatum"`
	FinInstCodeDataPlatformFinInstMasterBranchData DataPlatformFinInstMasterBranchDatumSlice `boil:"FinInstCodeDataPlatformFinInstMasterBranchData" json:"FinInstCodeDataPlatformFinInstMasterBranchData" toml:"FinInstCodeDataPlatformFinInstMasterBranchData" yaml:"FinInstCodeDataPlatformFinInstMasterBranchData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformFinInstMasterGeneralDatumR) NewStruct() *dataPlatformFinInstMasterGeneralDatumR {
	return &dataPlatformFinInstMasterGeneralDatumR{}
}

func (r *dataPlatformFinInstMasterGeneralDatumR) GetAddressIDDataPlatformAddressAddressDatum() *DataPlatformAddressAddressDatum {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformAddressAddressDatum
}

func (r *dataPlatformFinInstMasterGeneralDatumR) GetFinInstCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.FinInstCountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformFinInstMasterGeneralDatumR) GetFinInstCodeDataPlatformFinInstMasterBranchData() DataPlatformFinInstMasterBranchDatumSlice {
	if r == nil {
		return nil
	}
	return r.FinInstCodeDataPlatformFinInstMasterBranchData
}

// dataPlatformFinInstMasterGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformFinInstMasterGeneralDatumL struct{}

var (
	dataPlatformFinInstMasterGeneralDatumAllColumns            = []string{"FinInstCountry", "FinInstCode", "FinInstName", "FinInstFullName", "AddressID", "SWIFTCode", "IsMarkedForDeletion"}
	dataPlatformFinInstMasterGeneralDatumColumnsWithoutDefault = []string{"FinInstCountry", "FinInstCode", "FinInstName", "FinInstFullName", "AddressID", "SWIFTCode", "IsMarkedForDeletion"}
	dataPlatformFinInstMasterGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns     = []string{"FinInstCountry", "FinInstCode"}
	dataPlatformFinInstMasterGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformFinInstMasterGeneralDatumSlice is an alias for a slice of pointers to DataPlatformFinInstMasterGeneralDatum.
	// This should almost always be used instead of []DataPlatformFinInstMasterGeneralDatum.
	DataPlatformFinInstMasterGeneralDatumSlice []*DataPlatformFinInstMasterGeneralDatum
	// DataPlatformFinInstMasterGeneralDatumHook is the signature for custom DataPlatformFinInstMasterGeneralDatum hook methods
	DataPlatformFinInstMasterGeneralDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformFinInstMasterGeneralDatum) error

	dataPlatformFinInstMasterGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformFinInstMasterGeneralDatumType                 = reflect.TypeOf(&DataPlatformFinInstMasterGeneralDatum{})
	dataPlatformFinInstMasterGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformFinInstMasterGeneralDatumType)
	dataPlatformFinInstMasterGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformFinInstMasterGeneralDatumType, dataPlatformFinInstMasterGeneralDatumMapping, dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns)
	dataPlatformFinInstMasterGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformFinInstMasterGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformFinInstMasterGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformFinInstMasterGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformFinInstMasterGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformFinInstMasterGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformFinInstMasterGeneralDatumAfterSelectHooks []DataPlatformFinInstMasterGeneralDatumHook

var dataPlatformFinInstMasterGeneralDatumBeforeInsertHooks []DataPlatformFinInstMasterGeneralDatumHook
var dataPlatformFinInstMasterGeneralDatumAfterInsertHooks []DataPlatformFinInstMasterGeneralDatumHook

var dataPlatformFinInstMasterGeneralDatumBeforeUpdateHooks []DataPlatformFinInstMasterGeneralDatumHook
var dataPlatformFinInstMasterGeneralDatumAfterUpdateHooks []DataPlatformFinInstMasterGeneralDatumHook

var dataPlatformFinInstMasterGeneralDatumBeforeDeleteHooks []DataPlatformFinInstMasterGeneralDatumHook
var dataPlatformFinInstMasterGeneralDatumAfterDeleteHooks []DataPlatformFinInstMasterGeneralDatumHook

var dataPlatformFinInstMasterGeneralDatumBeforeUpsertHooks []DataPlatformFinInstMasterGeneralDatumHook
var dataPlatformFinInstMasterGeneralDatumAfterUpsertHooks []DataPlatformFinInstMasterGeneralDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformFinInstMasterGeneralDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterGeneralDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformFinInstMasterGeneralDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterGeneralDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformFinInstMasterGeneralDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterGeneralDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformFinInstMasterGeneralDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterGeneralDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformFinInstMasterGeneralDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterGeneralDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformFinInstMasterGeneralDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterGeneralDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformFinInstMasterGeneralDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterGeneralDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformFinInstMasterGeneralDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterGeneralDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformFinInstMasterGeneralDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterGeneralDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformFinInstMasterGeneralDatumHook registers your hook function for all future operations.
func AddDataPlatformFinInstMasterGeneralDatumHook(hookPoint boil.HookPoint, dataPlatformFinInstMasterGeneralDatumHook DataPlatformFinInstMasterGeneralDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformFinInstMasterGeneralDatumAfterSelectHooks = append(dataPlatformFinInstMasterGeneralDatumAfterSelectHooks, dataPlatformFinInstMasterGeneralDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformFinInstMasterGeneralDatumBeforeInsertHooks = append(dataPlatformFinInstMasterGeneralDatumBeforeInsertHooks, dataPlatformFinInstMasterGeneralDatumHook)
	case boil.AfterInsertHook:
		dataPlatformFinInstMasterGeneralDatumAfterInsertHooks = append(dataPlatformFinInstMasterGeneralDatumAfterInsertHooks, dataPlatformFinInstMasterGeneralDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformFinInstMasterGeneralDatumBeforeUpdateHooks = append(dataPlatformFinInstMasterGeneralDatumBeforeUpdateHooks, dataPlatformFinInstMasterGeneralDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformFinInstMasterGeneralDatumAfterUpdateHooks = append(dataPlatformFinInstMasterGeneralDatumAfterUpdateHooks, dataPlatformFinInstMasterGeneralDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformFinInstMasterGeneralDatumBeforeDeleteHooks = append(dataPlatformFinInstMasterGeneralDatumBeforeDeleteHooks, dataPlatformFinInstMasterGeneralDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformFinInstMasterGeneralDatumAfterDeleteHooks = append(dataPlatformFinInstMasterGeneralDatumAfterDeleteHooks, dataPlatformFinInstMasterGeneralDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformFinInstMasterGeneralDatumBeforeUpsertHooks = append(dataPlatformFinInstMasterGeneralDatumBeforeUpsertHooks, dataPlatformFinInstMasterGeneralDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformFinInstMasterGeneralDatumAfterUpsertHooks = append(dataPlatformFinInstMasterGeneralDatumAfterUpsertHooks, dataPlatformFinInstMasterGeneralDatumHook)
	}
}

// One returns a single dataPlatformFinInstMasterGeneralDatum record from the query.
func (q dataPlatformFinInstMasterGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformFinInstMasterGeneralDatum, error) {
	o := &DataPlatformFinInstMasterGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_fin_inst_master_general_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformFinInstMasterGeneralDatum records from the query.
func (q dataPlatformFinInstMasterGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformFinInstMasterGeneralDatumSlice, error) {
	var o []*DataPlatformFinInstMasterGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformFinInstMasterGeneralDatum slice")
	}

	if len(dataPlatformFinInstMasterGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformFinInstMasterGeneralDatum records in the query.
func (q dataPlatformFinInstMasterGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_fin_inst_master_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformFinInstMasterGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_fin_inst_master_general_data exists")
	}

	return count > 0, nil
}

// AddressIDDataPlatformAddressAddressDatum pointed to by the foreign key.
func (o *DataPlatformFinInstMasterGeneralDatum) AddressIDDataPlatformAddressAddressDatum(mods ...qm.QueryMod) dataPlatformAddressAddressDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`AddressID` = ?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformAddressAddressData(queryMods...)
}

// FinInstCountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformFinInstMasterGeneralDatum) FinInstCountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.FinInstCountry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// FinInstCodeDataPlatformFinInstMasterBranchData retrieves all the data_platform_fin_inst_master_branch_datum's DataPlatformFinInstMasterBranchData with an executor via FinInstCode column.
func (o *DataPlatformFinInstMasterGeneralDatum) FinInstCodeDataPlatformFinInstMasterBranchData(mods ...qm.QueryMod) dataPlatformFinInstMasterBranchDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_fin_inst_master_branch_data`.`FinInstCode`=?", o.FinInstCode),
	)

	return DataPlatformFinInstMasterBranchData(queryMods...)
}

// LoadAddressIDDataPlatformAddressAddressDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformFinInstMasterGeneralDatumL) LoadAddressIDDataPlatformAddressAddressDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformFinInstMasterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformFinInstMasterGeneralDatum
	var object *DataPlatformFinInstMasterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformFinInstMasterGeneralDatum.(*DataPlatformFinInstMasterGeneralDatum)
		if !ok {
			object = new(DataPlatformFinInstMasterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformFinInstMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformFinInstMasterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformFinInstMasterGeneralDatum.(*[]*DataPlatformFinInstMasterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformFinInstMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformFinInstMasterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformFinInstMasterGeneralDatumR{}
		}
		if !queries.IsNil(object.AddressID) {
			args = append(args, object.AddressID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformFinInstMasterGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AddressID) {
				args = append(args, obj.AddressID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_address_address_data`),
		qm.WhereIn(`data_platform_address_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformAddressAddressDatum")
	}

	var resultSlice []*DataPlatformAddressAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformAddressAddressDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_address_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_address_address_data")
	}

	if len(dataPlatformAddressAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AddressIDDataPlatformAddressAddressDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformAddressAddressDatumR{}
		}
		foreign.R.AddressIDDataPlatformFinInstMasterGeneralData = append(foreign.R.AddressIDDataPlatformFinInstMasterGeneralData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformAddressAddressDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformAddressAddressDatumR{}
				}
				foreign.R.AddressIDDataPlatformFinInstMasterGeneralData = append(foreign.R.AddressIDDataPlatformFinInstMasterGeneralData, local)
				break
			}
		}
	}

	return nil
}

// LoadFinInstCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformFinInstMasterGeneralDatumL) LoadFinInstCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformFinInstMasterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformFinInstMasterGeneralDatum
	var object *DataPlatformFinInstMasterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformFinInstMasterGeneralDatum.(*DataPlatformFinInstMasterGeneralDatum)
		if !ok {
			object = new(DataPlatformFinInstMasterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformFinInstMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformFinInstMasterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformFinInstMasterGeneralDatum.(*[]*DataPlatformFinInstMasterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformFinInstMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformFinInstMasterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformFinInstMasterGeneralDatumR{}
		}
		args = append(args, object.FinInstCountry)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformFinInstMasterGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.FinInstCountry {
					continue Outer
				}
			}

			args = append(args, obj.FinInstCountry)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(dataPlatformCountryCountryDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FinInstCountryDataPlatformCountryCountryDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformCountryCountryDatumR{}
		}
		foreign.R.FinInstCountryDataPlatformFinInstMasterGeneralData = append(foreign.R.FinInstCountryDataPlatformFinInstMasterGeneralData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FinInstCountry == foreign.Country {
				local.R.FinInstCountryDataPlatformCountryCountryDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformCountryCountryDatumR{}
				}
				foreign.R.FinInstCountryDataPlatformFinInstMasterGeneralData = append(foreign.R.FinInstCountryDataPlatformFinInstMasterGeneralData, local)
				break
			}
		}
	}

	return nil
}

// LoadFinInstCodeDataPlatformFinInstMasterBranchData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformFinInstMasterGeneralDatumL) LoadFinInstCodeDataPlatformFinInstMasterBranchData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformFinInstMasterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformFinInstMasterGeneralDatum
	var object *DataPlatformFinInstMasterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformFinInstMasterGeneralDatum.(*DataPlatformFinInstMasterGeneralDatum)
		if !ok {
			object = new(DataPlatformFinInstMasterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformFinInstMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformFinInstMasterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformFinInstMasterGeneralDatum.(*[]*DataPlatformFinInstMasterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformFinInstMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformFinInstMasterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformFinInstMasterGeneralDatumR{}
		}
		args = append(args, object.FinInstCode)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformFinInstMasterGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.FinInstCode {
					continue Outer
				}
			}

			args = append(args, obj.FinInstCode)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_fin_inst_master_branch_data`),
		qm.WhereIn(`data_platform_fin_inst_master_branch_data.FinInstCode in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_fin_inst_master_branch_data")
	}

	var resultSlice []*DataPlatformFinInstMasterBranchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_fin_inst_master_branch_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_fin_inst_master_branch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_fin_inst_master_branch_data")
	}

	if len(dataPlatformFinInstMasterBranchDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FinInstCodeDataPlatformFinInstMasterBranchData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformFinInstMasterBranchDatumR{}
			}
			foreign.R.FinInstCodeDataPlatformFinInstMasterGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.FinInstCode == foreign.FinInstCode {
				local.R.FinInstCodeDataPlatformFinInstMasterBranchData = append(local.R.FinInstCodeDataPlatformFinInstMasterBranchData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformFinInstMasterBranchDatumR{}
				}
				foreign.R.FinInstCodeDataPlatformFinInstMasterGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// SetAddressIDDataPlatformAddressAddressDatum of the dataPlatformFinInstMasterGeneralDatum to the related item.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to related.
// Adds o to related.R.AddressIDDataPlatformFinInstMasterGeneralData.
func (o *DataPlatformFinInstMasterGeneralDatum) SetAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformAddressAddressDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_fin_inst_master_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.AddressID, o.FinInstCountry, o.FinInstCode}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AddressID, related.AddressID)
	if o.R == nil {
		o.R = &dataPlatformFinInstMasterGeneralDatumR{
			AddressIDDataPlatformAddressAddressDatum: related,
		}
	} else {
		o.R.AddressIDDataPlatformAddressAddressDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformFinInstMasterGeneralData: DataPlatformFinInstMasterGeneralDatumSlice{o},
		}
	} else {
		related.R.AddressIDDataPlatformFinInstMasterGeneralData = append(related.R.AddressIDDataPlatformFinInstMasterGeneralData, o)
	}

	return nil
}

// RemoveAddressIDDataPlatformAddressAddressDatum relationship.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DataPlatformFinInstMasterGeneralDatum) RemoveAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformAddressAddressDatum) error {
	var err error

	queries.SetScanner(&o.AddressID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformAddressAddressDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AddressIDDataPlatformFinInstMasterGeneralData {
		if queries.Equal(o.AddressID, ri.AddressID) {
			continue
		}

		ln := len(related.R.AddressIDDataPlatformFinInstMasterGeneralData)
		if ln > 1 && i < ln-1 {
			related.R.AddressIDDataPlatformFinInstMasterGeneralData[i] = related.R.AddressIDDataPlatformFinInstMasterGeneralData[ln-1]
		}
		related.R.AddressIDDataPlatformFinInstMasterGeneralData = related.R.AddressIDDataPlatformFinInstMasterGeneralData[:ln-1]
		break
	}
	return nil
}

// SetFinInstCountryDataPlatformCountryCountryDatum of the dataPlatformFinInstMasterGeneralDatum to the related item.
// Sets o.R.FinInstCountryDataPlatformCountryCountryDatum to related.
// Adds o to related.R.FinInstCountryDataPlatformFinInstMasterGeneralData.
func (o *DataPlatformFinInstMasterGeneralDatum) SetFinInstCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_fin_inst_master_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"FinInstCountry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.FinInstCountry, o.FinInstCode}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FinInstCountry = related.Country
	if o.R == nil {
		o.R = &dataPlatformFinInstMasterGeneralDatumR{
			FinInstCountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.FinInstCountryDataPlatformCountryCountryDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformCountryCountryDatumR{
			FinInstCountryDataPlatformFinInstMasterGeneralData: DataPlatformFinInstMasterGeneralDatumSlice{o},
		}
	} else {
		related.R.FinInstCountryDataPlatformFinInstMasterGeneralData = append(related.R.FinInstCountryDataPlatformFinInstMasterGeneralData, o)
	}

	return nil
}

// AddFinInstCodeDataPlatformFinInstMasterBranchData adds the given related objects to the existing relationships
// of the data_platform_fin_inst_master_general_datum, optionally inserting them as new records.
// Appends related to o.R.FinInstCodeDataPlatformFinInstMasterBranchData.
// Sets related.R.FinInstCodeDataPlatformFinInstMasterGeneralDatum appropriately.
func (o *DataPlatformFinInstMasterGeneralDatum) AddFinInstCodeDataPlatformFinInstMasterBranchData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformFinInstMasterBranchDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FinInstCode = o.FinInstCode
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_fin_inst_master_branch_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"FinInstCode"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformFinInstMasterBranchDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.FinInstCode, rel.FinInstCountry, rel.FinInstCode}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FinInstCode = o.FinInstCode
		}
	}

	if o.R == nil {
		o.R = &dataPlatformFinInstMasterGeneralDatumR{
			FinInstCodeDataPlatformFinInstMasterBranchData: related,
		}
	} else {
		o.R.FinInstCodeDataPlatformFinInstMasterBranchData = append(o.R.FinInstCodeDataPlatformFinInstMasterBranchData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformFinInstMasterBranchDatumR{
				FinInstCodeDataPlatformFinInstMasterGeneralDatum: o,
			}
		} else {
			rel.R.FinInstCodeDataPlatformFinInstMasterGeneralDatum = o
		}
	}
	return nil
}

// DataPlatformFinInstMasterGeneralData retrieves all the records using an executor.
func DataPlatformFinInstMasterGeneralData(mods ...qm.QueryMod) dataPlatformFinInstMasterGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_fin_inst_master_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_fin_inst_master_general_data`.*"})
	}

	return dataPlatformFinInstMasterGeneralDatumQuery{q}
}

// FindDataPlatformFinInstMasterGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformFinInstMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, finInstCountry string, finInstCode string, selectCols ...string) (*DataPlatformFinInstMasterGeneralDatum, error) {
	dataPlatformFinInstMasterGeneralDatumObj := &DataPlatformFinInstMasterGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_fin_inst_master_general_data` where `FinInstCountry`=? AND `FinInstCode`=?", sel,
	)

	q := queries.Raw(query, finInstCountry, finInstCode)

	err := q.Bind(ctx, exec, dataPlatformFinInstMasterGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_fin_inst_master_general_data")
	}

	if err = dataPlatformFinInstMasterGeneralDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformFinInstMasterGeneralDatumObj, err
	}

	return dataPlatformFinInstMasterGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformFinInstMasterGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_fin_inst_master_general_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformFinInstMasterGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformFinInstMasterGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformFinInstMasterGeneralDatumInsertCache[key]
	dataPlatformFinInstMasterGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformFinInstMasterGeneralDatumAllColumns,
			dataPlatformFinInstMasterGeneralDatumColumnsWithDefault,
			dataPlatformFinInstMasterGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformFinInstMasterGeneralDatumType, dataPlatformFinInstMasterGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformFinInstMasterGeneralDatumType, dataPlatformFinInstMasterGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_fin_inst_master_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_fin_inst_master_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_fin_inst_master_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_fin_inst_master_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FinInstCountry,
		o.FinInstCode,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_fin_inst_master_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformFinInstMasterGeneralDatumInsertCacheMut.Lock()
		dataPlatformFinInstMasterGeneralDatumInsertCache[key] = cache
		dataPlatformFinInstMasterGeneralDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformFinInstMasterGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformFinInstMasterGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformFinInstMasterGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformFinInstMasterGeneralDatumUpdateCache[key]
	dataPlatformFinInstMasterGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformFinInstMasterGeneralDatumAllColumns,
			dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_fin_inst_master_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_fin_inst_master_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformFinInstMasterGeneralDatumType, dataPlatformFinInstMasterGeneralDatumMapping, append(wl, dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_fin_inst_master_general_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_fin_inst_master_general_data")
	}

	if !cached {
		dataPlatformFinInstMasterGeneralDatumUpdateCacheMut.Lock()
		dataPlatformFinInstMasterGeneralDatumUpdateCache[key] = cache
		dataPlatformFinInstMasterGeneralDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformFinInstMasterGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_fin_inst_master_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_fin_inst_master_general_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformFinInstMasterGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformFinInstMasterGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_fin_inst_master_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformFinInstMasterGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformFinInstMasterGeneralDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformFinInstMasterGeneralDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformFinInstMasterGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_fin_inst_master_general_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformFinInstMasterGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformFinInstMasterGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformFinInstMasterGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformFinInstMasterGeneralDatumUpsertCache[key]
	dataPlatformFinInstMasterGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformFinInstMasterGeneralDatumAllColumns,
			dataPlatformFinInstMasterGeneralDatumColumnsWithDefault,
			dataPlatformFinInstMasterGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformFinInstMasterGeneralDatumAllColumns,
			dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_fin_inst_master_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_fin_inst_master_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_fin_inst_master_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformFinInstMasterGeneralDatumType, dataPlatformFinInstMasterGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformFinInstMasterGeneralDatumType, dataPlatformFinInstMasterGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_fin_inst_master_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformFinInstMasterGeneralDatumType, dataPlatformFinInstMasterGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_fin_inst_master_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_fin_inst_master_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformFinInstMasterGeneralDatumUpsertCacheMut.Lock()
		dataPlatformFinInstMasterGeneralDatumUpsertCache[key] = cache
		dataPlatformFinInstMasterGeneralDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformFinInstMasterGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformFinInstMasterGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformFinInstMasterGeneralDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformFinInstMasterGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_fin_inst_master_general_data` WHERE `FinInstCountry`=? AND `FinInstCode`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_fin_inst_master_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_fin_inst_master_general_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformFinInstMasterGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformFinInstMasterGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_fin_inst_master_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_fin_inst_master_general_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformFinInstMasterGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformFinInstMasterGeneralDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformFinInstMasterGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_fin_inst_master_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformFinInstMasterGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_fin_inst_master_general_data")
	}

	if len(dataPlatformFinInstMasterGeneralDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformFinInstMasterGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformFinInstMasterGeneralDatum(ctx, exec, o.FinInstCountry, o.FinInstCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformFinInstMasterGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformFinInstMasterGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformFinInstMasterGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_fin_inst_master_general_data`.* FROM `data_platform_fin_inst_master_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformFinInstMasterGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformFinInstMasterGeneralDatumExists checks if the DataPlatformFinInstMasterGeneralDatum row exists.
func DataPlatformFinInstMasterGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, finInstCountry string, finInstCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_fin_inst_master_general_data` where `FinInstCountry`=? AND `FinInstCode`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, finInstCountry, finInstCode)
	}
	row := exec.QueryRowContext(ctx, sql, finInstCountry, finInstCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_fin_inst_master_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformFinInstMasterGeneralDatum row exists.
func (o *DataPlatformFinInstMasterGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformFinInstMasterGeneralDatumExists(ctx, exec, o.FinInstCountry, o.FinInstCode)
}
