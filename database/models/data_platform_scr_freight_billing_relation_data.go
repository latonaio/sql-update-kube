// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSCRFreightBillingRelationDatum is an object representing the database table.
type DataPlatformSCRFreightBillingRelationDatum struct {
	SupplyChainRelationshipID               int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipFreightID        int         `boil:"SupplyChainRelationshipFreightID" json:"SupplyChainRelationshipFreightID" toml:"SupplyChainRelationshipFreightID" yaml:"SupplyChainRelationshipFreightID"`
	SupplyChainRelationshipFreightBillingID int         `boil:"SupplyChainRelationshipFreightBillingID" json:"SupplyChainRelationshipFreightBillingID" toml:"SupplyChainRelationshipFreightBillingID" yaml:"SupplyChainRelationshipFreightBillingID"`
	Buyer                                   int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                  int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	FreightPartner                          int         `boil:"FreightPartner" json:"FreightPartner" toml:"FreightPartner" yaml:"FreightPartner"`
	FreightBillToParty                      int         `boil:"FreightBillToParty" json:"FreightBillToParty" toml:"FreightBillToParty" yaml:"FreightBillToParty"`
	FreightBillFromParty                    int         `boil:"FreightBillFromParty" json:"FreightBillFromParty" toml:"FreightBillFromParty" yaml:"FreightBillFromParty"`
	DefaultRelation                         null.Bool   `boil:"DefaultRelation" json:"DefaultRelation,omitempty" toml:"DefaultRelation" yaml:"DefaultRelation,omitempty"`
	FreightBillToCountry                    string      `boil:"FreightBillToCountry" json:"FreightBillToCountry" toml:"FreightBillToCountry" yaml:"FreightBillToCountry"`
	FreightBillFromCountry                  string      `boil:"FreightBillFromCountry" json:"FreightBillFromCountry" toml:"FreightBillFromCountry" yaml:"FreightBillFromCountry"`
	IsExportImport                          null.Bool   `boil:"IsExportImport" json:"IsExportImport,omitempty" toml:"IsExportImport" yaml:"IsExportImport,omitempty"`
	TransactionTaxCategory                  null.String `boil:"TransactionTaxCategory" json:"TransactionTaxCategory,omitempty" toml:"TransactionTaxCategory" yaml:"TransactionTaxCategory,omitempty"`
	TransactionTaxClassification            null.String `boil:"TransactionTaxClassification" json:"TransactionTaxClassification,omitempty" toml:"TransactionTaxClassification" yaml:"TransactionTaxClassification,omitempty"`
	CreationDate                            null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                          null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	IsMarkedForDeletion                     null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSCRFreightBillingRelationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSCRFreightBillingRelationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSCRFreightBillingRelationDatumColumns = struct {
	SupplyChainRelationshipID               string
	SupplyChainRelationshipFreightID        string
	SupplyChainRelationshipFreightBillingID string
	Buyer                                   string
	Seller                                  string
	FreightPartner                          string
	FreightBillToParty                      string
	FreightBillFromParty                    string
	DefaultRelation                         string
	FreightBillToCountry                    string
	FreightBillFromCountry                  string
	IsExportImport                          string
	TransactionTaxCategory                  string
	TransactionTaxClassification            string
	CreationDate                            string
	LastChangeDate                          string
	IsMarkedForDeletion                     string
}{
	SupplyChainRelationshipID:               "SupplyChainRelationshipID",
	SupplyChainRelationshipFreightID:        "SupplyChainRelationshipFreightID",
	SupplyChainRelationshipFreightBillingID: "SupplyChainRelationshipFreightBillingID",
	Buyer:                                   "Buyer",
	Seller:                                  "Seller",
	FreightPartner:                          "FreightPartner",
	FreightBillToParty:                      "FreightBillToParty",
	FreightBillFromParty:                    "FreightBillFromParty",
	DefaultRelation:                         "DefaultRelation",
	FreightBillToCountry:                    "FreightBillToCountry",
	FreightBillFromCountry:                  "FreightBillFromCountry",
	IsExportImport:                          "IsExportImport",
	TransactionTaxCategory:                  "TransactionTaxCategory",
	TransactionTaxClassification:            "TransactionTaxClassification",
	CreationDate:                            "CreationDate",
	LastChangeDate:                          "LastChangeDate",
	IsMarkedForDeletion:                     "IsMarkedForDeletion",
}

var DataPlatformSCRFreightBillingRelationDatumTableColumns = struct {
	SupplyChainRelationshipID               string
	SupplyChainRelationshipFreightID        string
	SupplyChainRelationshipFreightBillingID string
	Buyer                                   string
	Seller                                  string
	FreightPartner                          string
	FreightBillToParty                      string
	FreightBillFromParty                    string
	DefaultRelation                         string
	FreightBillToCountry                    string
	FreightBillFromCountry                  string
	IsExportImport                          string
	TransactionTaxCategory                  string
	TransactionTaxClassification            string
	CreationDate                            string
	LastChangeDate                          string
	IsMarkedForDeletion                     string
}{
	SupplyChainRelationshipID:               "data_platform_scr_freight_billing_relation_data.SupplyChainRelationshipID",
	SupplyChainRelationshipFreightID:        "data_platform_scr_freight_billing_relation_data.SupplyChainRelationshipFreightID",
	SupplyChainRelationshipFreightBillingID: "data_platform_scr_freight_billing_relation_data.SupplyChainRelationshipFreightBillingID",
	Buyer:                                   "data_platform_scr_freight_billing_relation_data.Buyer",
	Seller:                                  "data_platform_scr_freight_billing_relation_data.Seller",
	FreightPartner:                          "data_platform_scr_freight_billing_relation_data.FreightPartner",
	FreightBillToParty:                      "data_platform_scr_freight_billing_relation_data.FreightBillToParty",
	FreightBillFromParty:                    "data_platform_scr_freight_billing_relation_data.FreightBillFromParty",
	DefaultRelation:                         "data_platform_scr_freight_billing_relation_data.DefaultRelation",
	FreightBillToCountry:                    "data_platform_scr_freight_billing_relation_data.FreightBillToCountry",
	FreightBillFromCountry:                  "data_platform_scr_freight_billing_relation_data.FreightBillFromCountry",
	IsExportImport:                          "data_platform_scr_freight_billing_relation_data.IsExportImport",
	TransactionTaxCategory:                  "data_platform_scr_freight_billing_relation_data.TransactionTaxCategory",
	TransactionTaxClassification:            "data_platform_scr_freight_billing_relation_data.TransactionTaxClassification",
	CreationDate:                            "data_platform_scr_freight_billing_relation_data.CreationDate",
	LastChangeDate:                          "data_platform_scr_freight_billing_relation_data.LastChangeDate",
	IsMarkedForDeletion:                     "data_platform_scr_freight_billing_relation_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSCRFreightBillingRelationDatumWhere = struct {
	SupplyChainRelationshipID               whereHelperint
	SupplyChainRelationshipFreightID        whereHelperint
	SupplyChainRelationshipFreightBillingID whereHelperint
	Buyer                                   whereHelperint
	Seller                                  whereHelperint
	FreightPartner                          whereHelperint
	FreightBillToParty                      whereHelperint
	FreightBillFromParty                    whereHelperint
	DefaultRelation                         whereHelpernull_Bool
	FreightBillToCountry                    whereHelperstring
	FreightBillFromCountry                  whereHelperstring
	IsExportImport                          whereHelpernull_Bool
	TransactionTaxCategory                  whereHelpernull_String
	TransactionTaxClassification            whereHelpernull_String
	CreationDate                            whereHelpernull_String
	LastChangeDate                          whereHelpernull_String
	IsMarkedForDeletion                     whereHelpernull_Bool
}{
	SupplyChainRelationshipID:               whereHelperint{field: "`data_platform_scr_freight_billing_relation_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipFreightID:        whereHelperint{field: "`data_platform_scr_freight_billing_relation_data`.`SupplyChainRelationshipFreightID`"},
	SupplyChainRelationshipFreightBillingID: whereHelperint{field: "`data_platform_scr_freight_billing_relation_data`.`SupplyChainRelationshipFreightBillingID`"},
	Buyer:                                   whereHelperint{field: "`data_platform_scr_freight_billing_relation_data`.`Buyer`"},
	Seller:                                  whereHelperint{field: "`data_platform_scr_freight_billing_relation_data`.`Seller`"},
	FreightPartner:                          whereHelperint{field: "`data_platform_scr_freight_billing_relation_data`.`FreightPartner`"},
	FreightBillToParty:                      whereHelperint{field: "`data_platform_scr_freight_billing_relation_data`.`FreightBillToParty`"},
	FreightBillFromParty:                    whereHelperint{field: "`data_platform_scr_freight_billing_relation_data`.`FreightBillFromParty`"},
	DefaultRelation:                         whereHelpernull_Bool{field: "`data_platform_scr_freight_billing_relation_data`.`DefaultRelation`"},
	FreightBillToCountry:                    whereHelperstring{field: "`data_platform_scr_freight_billing_relation_data`.`FreightBillToCountry`"},
	FreightBillFromCountry:                  whereHelperstring{field: "`data_platform_scr_freight_billing_relation_data`.`FreightBillFromCountry`"},
	IsExportImport:                          whereHelpernull_Bool{field: "`data_platform_scr_freight_billing_relation_data`.`IsExportImport`"},
	TransactionTaxCategory:                  whereHelpernull_String{field: "`data_platform_scr_freight_billing_relation_data`.`TransactionTaxCategory`"},
	TransactionTaxClassification:            whereHelpernull_String{field: "`data_platform_scr_freight_billing_relation_data`.`TransactionTaxClassification`"},
	CreationDate:                            whereHelpernull_String{field: "`data_platform_scr_freight_billing_relation_data`.`CreationDate`"},
	LastChangeDate:                          whereHelpernull_String{field: "`data_platform_scr_freight_billing_relation_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                     whereHelpernull_Bool{field: "`data_platform_scr_freight_billing_relation_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSCRFreightBillingRelationDatumRels is where relationship names are stored.
var DataPlatformSCRFreightBillingRelationDatumRels = struct {
	FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum string
	FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum   string
	BuyerDataPlatformSCRFreightRelationDatum                    string
	BuyerDataPlatformSCRFreightPaymentRelationData              string
}{
	FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum: "FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum",
	FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum:   "FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum",
	BuyerDataPlatformSCRFreightRelationDatum:                    "BuyerDataPlatformSCRFreightRelationDatum",
	BuyerDataPlatformSCRFreightPaymentRelationData:              "BuyerDataPlatformSCRFreightPaymentRelationData",
}

// dataPlatformSCRFreightBillingRelationDatumR is where relationships are stored.
type dataPlatformSCRFreightBillingRelationDatumR struct {
	FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum        `boil:"FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum" json:"FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum" toml:"FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum" yaml:"FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum"`
	FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum   *DataPlatformBusinessPartnerGeneralDatum        `boil:"FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum" json:"FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum" toml:"FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum" yaml:"FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum"`
	BuyerDataPlatformSCRFreightRelationDatum                    *DataPlatformSCRFreightRelationDatum            `boil:"BuyerDataPlatformSCRFreightRelationDatum" json:"BuyerDataPlatformSCRFreightRelationDatum" toml:"BuyerDataPlatformSCRFreightRelationDatum" yaml:"BuyerDataPlatformSCRFreightRelationDatum"`
	BuyerDataPlatformSCRFreightPaymentRelationData              DataPlatformSCRFreightPaymentRelationDatumSlice `boil:"BuyerDataPlatformSCRFreightPaymentRelationData" json:"BuyerDataPlatformSCRFreightPaymentRelationData" toml:"BuyerDataPlatformSCRFreightPaymentRelationData" yaml:"BuyerDataPlatformSCRFreightPaymentRelationData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSCRFreightBillingRelationDatumR) NewStruct() *dataPlatformSCRFreightBillingRelationDatumR {
	return &dataPlatformSCRFreightBillingRelationDatumR{}
}

func (r *dataPlatformSCRFreightBillingRelationDatumR) GetFreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRFreightBillingRelationDatumR) GetFreightBillToPartyDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRFreightBillingRelationDatumR) GetBuyerDataPlatformSCRFreightRelationDatum() *DataPlatformSCRFreightRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRFreightRelationDatum
}

func (r *dataPlatformSCRFreightBillingRelationDatumR) GetBuyerDataPlatformSCRFreightPaymentRelationData() DataPlatformSCRFreightPaymentRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRFreightPaymentRelationData
}

// dataPlatformSCRFreightBillingRelationDatumL is where Load methods for each relationship are stored.
type dataPlatformSCRFreightBillingRelationDatumL struct{}

var (
	dataPlatformSCRFreightBillingRelationDatumAllColumns            = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipFreightID", "SupplyChainRelationshipFreightBillingID", "Buyer", "Seller", "FreightPartner", "FreightBillToParty", "FreightBillFromParty", "DefaultRelation", "FreightBillToCountry", "FreightBillFromCountry", "IsExportImport", "TransactionTaxCategory", "TransactionTaxClassification", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRFreightBillingRelationDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipFreightID", "SupplyChainRelationshipFreightBillingID", "Buyer", "Seller", "FreightPartner", "FreightBillToParty", "FreightBillFromParty", "DefaultRelation", "FreightBillToCountry", "FreightBillFromCountry", "IsExportImport", "TransactionTaxCategory", "TransactionTaxClassification", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRFreightBillingRelationDatumColumnsWithDefault    = []string{}
	dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipFreightID", "SupplyChainRelationshipFreightBillingID", "Buyer", "Seller", "FreightPartner", "FreightBillToParty", "FreightBillFromParty"}
	dataPlatformSCRFreightBillingRelationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSCRFreightBillingRelationDatumSlice is an alias for a slice of pointers to DataPlatformSCRFreightBillingRelationDatum.
	// This should almost always be used instead of []DataPlatformSCRFreightBillingRelationDatum.
	DataPlatformSCRFreightBillingRelationDatumSlice []*DataPlatformSCRFreightBillingRelationDatum

	dataPlatformSCRFreightBillingRelationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSCRFreightBillingRelationDatumType                 = reflect.TypeOf(&DataPlatformSCRFreightBillingRelationDatum{})
	dataPlatformSCRFreightBillingRelationDatumMapping              = queries.MakeStructMapping(dataPlatformSCRFreightBillingRelationDatumType)
	dataPlatformSCRFreightBillingRelationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSCRFreightBillingRelationDatumType, dataPlatformSCRFreightBillingRelationDatumMapping, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns)
	dataPlatformSCRFreightBillingRelationDatumInsertCacheMut       sync.RWMutex
	dataPlatformSCRFreightBillingRelationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSCRFreightBillingRelationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSCRFreightBillingRelationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSCRFreightBillingRelationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSCRFreightBillingRelationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSCRFreightBillingRelationDatum record from the query.
func (q dataPlatformSCRFreightBillingRelationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSCRFreightBillingRelationDatum, error) {
	o := &DataPlatformSCRFreightBillingRelationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_scr_freight_billing_relation_data")
	}

	return o, nil
}

// All returns all DataPlatformSCRFreightBillingRelationDatum records from the query.
func (q dataPlatformSCRFreightBillingRelationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSCRFreightBillingRelationDatumSlice, error) {
	var o []*DataPlatformSCRFreightBillingRelationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSCRFreightBillingRelationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSCRFreightBillingRelationDatum records in the query.
func (q dataPlatformSCRFreightBillingRelationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_scr_freight_billing_relation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSCRFreightBillingRelationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_scr_freight_billing_relation_data exists")
	}

	return count > 0, nil
}

// FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRFreightBillingRelationDatum) FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.FreightBillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRFreightBillingRelationDatum) FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.FreightBillToParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// BuyerDataPlatformSCRFreightRelationDatum pointed to by the foreign key.
func (o *DataPlatformSCRFreightBillingRelationDatum) BuyerDataPlatformSCRFreightRelationDatum(mods ...qm.QueryMod) dataPlatformSCRFreightRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRFreightRelationData(queryMods...)
}

// BuyerDataPlatformSCRFreightPaymentRelationData retrieves all the data_platform_scr_freight_payment_relation_datum's DataPlatformSCRFreightPaymentRelationData with an executor via Buyer column.
func (o *DataPlatformSCRFreightBillingRelationDatum) BuyerDataPlatformSCRFreightPaymentRelationData(mods ...qm.QueryMod) dataPlatformSCRFreightPaymentRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_freight_payment_relation_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformSCRFreightPaymentRelationData(queryMods...)
}

// LoadFreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRFreightBillingRelationDatumL) LoadFreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRFreightBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRFreightBillingRelationDatum
	var object *DataPlatformSCRFreightBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRFreightBillingRelationDatum.(*DataPlatformSCRFreightBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRFreightBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRFreightBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRFreightBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRFreightBillingRelationDatum.(*[]*DataPlatformSCRFreightBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRFreightBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRFreightBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRFreightBillingRelationDatumR{}
		}
		args = append(args, object.FreightBillFromParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRFreightBillingRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.FreightBillFromParty {
					continue Outer
				}
			}

			args = append(args, obj.FreightBillFromParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FreightBillFromParty == foreign.BusinessPartner {
				local.R.FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadFreightBillToPartyDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRFreightBillingRelationDatumL) LoadFreightBillToPartyDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRFreightBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRFreightBillingRelationDatum
	var object *DataPlatformSCRFreightBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRFreightBillingRelationDatum.(*DataPlatformSCRFreightBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRFreightBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRFreightBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRFreightBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRFreightBillingRelationDatum.(*[]*DataPlatformSCRFreightBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRFreightBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRFreightBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRFreightBillingRelationDatumR{}
		}
		args = append(args, object.FreightBillToParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRFreightBillingRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.FreightBillToParty {
					continue Outer
				}
			}

			args = append(args, obj.FreightBillToParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FreightBillToParty == foreign.BusinessPartner {
				local.R.FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRFreightRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRFreightBillingRelationDatumL) LoadBuyerDataPlatformSCRFreightRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRFreightBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRFreightBillingRelationDatum
	var object *DataPlatformSCRFreightBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRFreightBillingRelationDatum.(*DataPlatformSCRFreightBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRFreightBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRFreightBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRFreightBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRFreightBillingRelationDatum.(*[]*DataPlatformSCRFreightBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRFreightBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRFreightBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRFreightBillingRelationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRFreightBillingRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_freight_relation_data`),
		qm.WhereIn(`data_platform_scr_freight_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRFreightRelationDatum")
	}

	var resultSlice []*DataPlatformSCRFreightRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRFreightRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_freight_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_freight_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRFreightRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRFreightRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRFreightPaymentRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRFreightBillingRelationDatumL) LoadBuyerDataPlatformSCRFreightPaymentRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRFreightBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRFreightBillingRelationDatum
	var object *DataPlatformSCRFreightBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRFreightBillingRelationDatum.(*DataPlatformSCRFreightBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRFreightBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRFreightBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRFreightBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRFreightBillingRelationDatum.(*[]*DataPlatformSCRFreightBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRFreightBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRFreightBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRFreightBillingRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRFreightBillingRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_freight_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_freight_payment_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_freight_payment_relation_data")
	}

	var resultSlice []*DataPlatformSCRFreightPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_freight_payment_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_freight_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_freight_payment_relation_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRFreightPaymentRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRFreightPaymentRelationData = append(local.R.BuyerDataPlatformSCRFreightPaymentRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// SetFreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRFreightBillingRelationDatum to the related item.
// Sets o.R.FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRFreightBillingRelationDatum) SetFreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_freight_billing_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"FreightBillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.SupplyChainRelationshipFreightBillingID, o.Buyer, o.Seller, o.FreightPartner, o.FreightBillToParty, o.FreightBillFromParty}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FreightBillFromParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRFreightBillingRelationDatumR{
			FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.FreightBillFromPartyDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetFreightBillToPartyDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRFreightBillingRelationDatum to the related item.
// Sets o.R.FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRFreightBillingRelationDatum) SetFreightBillToPartyDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_freight_billing_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"FreightBillToParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.SupplyChainRelationshipFreightBillingID, o.Buyer, o.Seller, o.FreightPartner, o.FreightBillToParty, o.FreightBillFromParty}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FreightBillToParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRFreightBillingRelationDatumR{
			FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.FreightBillToPartyDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRFreightRelationDatum of the dataPlatformSCRFreightBillingRelationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRFreightRelationDatum to related.
func (o *DataPlatformSCRFreightBillingRelationDatum) SetBuyerDataPlatformSCRFreightRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRFreightRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_freight_billing_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.SupplyChainRelationshipFreightBillingID, o.Buyer, o.Seller, o.FreightPartner, o.FreightBillToParty, o.FreightBillFromParty}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformSCRFreightBillingRelationDatumR{
			BuyerDataPlatformSCRFreightRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRFreightRelationDatum = related
	}

	return nil
}

// AddBuyerDataPlatformSCRFreightPaymentRelationData adds the given related objects to the existing relationships
// of the data_platform_scr_freight_billing_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRFreightPaymentRelationData.
func (o *DataPlatformSCRFreightBillingRelationDatum) AddBuyerDataPlatformSCRFreightPaymentRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRFreightPaymentRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_freight_payment_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipFreightID, rel.SupplyChainRelationshipFreightBillingID, rel.SupplyChainRelationshipFreightPaymentID, rel.Buyer, rel.Seller, rel.FreightPartner, rel.FreightBillToParty, rel.FreightBillFromParty, rel.FreightPayer, rel.FreightPayee}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRFreightBillingRelationDatumR{
			BuyerDataPlatformSCRFreightPaymentRelationData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRFreightPaymentRelationData = append(o.R.BuyerDataPlatformSCRFreightPaymentRelationData, related...)
	}

	return nil
}

// DataPlatformSCRFreightBillingRelationData retrieves all the records using an executor.
func DataPlatformSCRFreightBillingRelationData(mods ...qm.QueryMod) dataPlatformSCRFreightBillingRelationDatumQuery {
	mods = append(mods, qm.From("`data_platform_scr_freight_billing_relation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_scr_freight_billing_relation_data`.*"})
	}

	return dataPlatformSCRFreightBillingRelationDatumQuery{q}
}

// FindDataPlatformSCRFreightBillingRelationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSCRFreightBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipFreightID int, supplyChainRelationshipFreightBillingID int, buyer int, seller int, freightPartner int, freightBillToParty int, freightBillFromParty int, selectCols ...string) (*DataPlatformSCRFreightBillingRelationDatum, error) {
	dataPlatformSCRFreightBillingRelationDatumObj := &DataPlatformSCRFreightBillingRelationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_scr_freight_billing_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipFreightID`=? AND `SupplyChainRelationshipFreightBillingID`=? AND `Buyer`=? AND `Seller`=? AND `FreightPartner`=? AND `FreightBillToParty`=? AND `FreightBillFromParty`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, supplyChainRelationshipFreightID, supplyChainRelationshipFreightBillingID, buyer, seller, freightPartner, freightBillToParty, freightBillFromParty)

	err := q.Bind(ctx, exec, dataPlatformSCRFreightBillingRelationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_scr_freight_billing_relation_data")
	}

	return dataPlatformSCRFreightBillingRelationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSCRFreightBillingRelationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_freight_billing_relation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRFreightBillingRelationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSCRFreightBillingRelationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSCRFreightBillingRelationDatumInsertCache[key]
	dataPlatformSCRFreightBillingRelationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSCRFreightBillingRelationDatumAllColumns,
			dataPlatformSCRFreightBillingRelationDatumColumnsWithDefault,
			dataPlatformSCRFreightBillingRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRFreightBillingRelationDatumType, dataPlatformSCRFreightBillingRelationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSCRFreightBillingRelationDatumType, dataPlatformSCRFreightBillingRelationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_scr_freight_billing_relation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_scr_freight_billing_relation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_scr_freight_billing_relation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_scr_freight_billing_relation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipFreightID,
		o.SupplyChainRelationshipFreightBillingID,
		o.Buyer,
		o.Seller,
		o.FreightPartner,
		o.FreightBillToParty,
		o.FreightBillFromParty,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_freight_billing_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRFreightBillingRelationDatumInsertCacheMut.Lock()
		dataPlatformSCRFreightBillingRelationDatumInsertCache[key] = cache
		dataPlatformSCRFreightBillingRelationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSCRFreightBillingRelationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSCRFreightBillingRelationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSCRFreightBillingRelationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSCRFreightBillingRelationDatumUpdateCache[key]
	dataPlatformSCRFreightBillingRelationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSCRFreightBillingRelationDatumAllColumns,
			dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_scr_freight_billing_relation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_scr_freight_billing_relation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRFreightBillingRelationDatumType, dataPlatformSCRFreightBillingRelationDatumMapping, append(wl, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_scr_freight_billing_relation_data row")
	}

	if !cached {
		dataPlatformSCRFreightBillingRelationDatumUpdateCacheMut.Lock()
		dataPlatformSCRFreightBillingRelationDatumUpdateCache[key] = cache
		dataPlatformSCRFreightBillingRelationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSCRFreightBillingRelationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_scr_freight_billing_relation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSCRFreightBillingRelationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRFreightBillingRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_scr_freight_billing_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSCRFreightBillingRelationDatum slice")
	}

	return nil
}

var mySQLDataPlatformSCRFreightBillingRelationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSCRFreightBillingRelationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_freight_billing_relation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRFreightBillingRelationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSCRFreightBillingRelationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSCRFreightBillingRelationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSCRFreightBillingRelationDatumUpsertCache[key]
	dataPlatformSCRFreightBillingRelationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSCRFreightBillingRelationDatumAllColumns,
			dataPlatformSCRFreightBillingRelationDatumColumnsWithDefault,
			dataPlatformSCRFreightBillingRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSCRFreightBillingRelationDatumAllColumns,
			dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_scr_freight_billing_relation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_scr_freight_billing_relation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_scr_freight_billing_relation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRFreightBillingRelationDatumType, dataPlatformSCRFreightBillingRelationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSCRFreightBillingRelationDatumType, dataPlatformSCRFreightBillingRelationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_scr_freight_billing_relation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSCRFreightBillingRelationDatumType, dataPlatformSCRFreightBillingRelationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_scr_freight_billing_relation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_freight_billing_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRFreightBillingRelationDatumUpsertCacheMut.Lock()
		dataPlatformSCRFreightBillingRelationDatumUpsertCache[key] = cache
		dataPlatformSCRFreightBillingRelationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSCRFreightBillingRelationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSCRFreightBillingRelationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSCRFreightBillingRelationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSCRFreightBillingRelationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_scr_freight_billing_relation_data` WHERE `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipFreightID`=? AND `SupplyChainRelationshipFreightBillingID`=? AND `Buyer`=? AND `Seller`=? AND `FreightPartner`=? AND `FreightBillToParty`=? AND `FreightBillFromParty`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_scr_freight_billing_relation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSCRFreightBillingRelationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSCRFreightBillingRelationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_scr_freight_billing_relation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSCRFreightBillingRelationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRFreightBillingRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_scr_freight_billing_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSCRFreightBillingRelationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSCRFreightBillingRelationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSCRFreightBillingRelationDatum(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.SupplyChainRelationshipFreightBillingID, o.Buyer, o.Seller, o.FreightPartner, o.FreightBillToParty, o.FreightBillFromParty)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSCRFreightBillingRelationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSCRFreightBillingRelationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRFreightBillingRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_scr_freight_billing_relation_data`.* FROM `data_platform_scr_freight_billing_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSCRFreightBillingRelationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSCRFreightBillingRelationDatumExists checks if the DataPlatformSCRFreightBillingRelationDatum row exists.
func DataPlatformSCRFreightBillingRelationDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipFreightID int, supplyChainRelationshipFreightBillingID int, buyer int, seller int, freightPartner int, freightBillToParty int, freightBillFromParty int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_scr_freight_billing_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipFreightID`=? AND `SupplyChainRelationshipFreightBillingID`=? AND `Buyer`=? AND `Seller`=? AND `FreightPartner`=? AND `FreightBillToParty`=? AND `FreightBillFromParty`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, supplyChainRelationshipFreightID, supplyChainRelationshipFreightBillingID, buyer, seller, freightPartner, freightBillToParty, freightBillFromParty)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, supplyChainRelationshipFreightID, supplyChainRelationshipFreightBillingID, buyer, seller, freightPartner, freightBillToParty, freightBillFromParty)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_scr_freight_billing_relation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSCRFreightBillingRelationDatum row exists.
func (o *DataPlatformSCRFreightBillingRelationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSCRFreightBillingRelationDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipFreightID, o.SupplyChainRelationshipFreightBillingID, o.Buyer, o.Seller, o.FreightPartner, o.FreightBillToParty, o.FreightBillFromParty)
}
