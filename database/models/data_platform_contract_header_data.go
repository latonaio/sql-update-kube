// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformContractHeaderDatum is an object representing the database table.
type DataPlatformContractHeaderDatum struct {
	Contract                         int          `boil:"Contract" json:"Contract" toml:"Contract" yaml:"Contract"`
	ContractDate                     string       `boil:"ContractDate" json:"ContractDate" toml:"ContractDate" yaml:"ContractDate"`
	ContractType                     string       `boil:"ContractType" json:"ContractType" toml:"ContractType" yaml:"ContractType"`
	ContractStatus                   string       `boil:"ContractStatus" json:"ContractStatus" toml:"ContractStatus" yaml:"ContractStatus"`
	SupplyChainRelationshipID        int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipBillingID null.Int     `boil:"SupplyChainRelationshipBillingID" json:"SupplyChainRelationshipBillingID,omitempty" toml:"SupplyChainRelationshipBillingID" yaml:"SupplyChainRelationshipBillingID,omitempty"`
	SupplyChainRelationshipPaymentID null.Int     `boil:"SupplyChainRelationshipPaymentID" json:"SupplyChainRelationshipPaymentID,omitempty" toml:"SupplyChainRelationshipPaymentID" yaml:"SupplyChainRelationshipPaymentID,omitempty"`
	Buyer                            int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                           int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	BillToParty                      null.Int     `boil:"BillToParty" json:"BillToParty,omitempty" toml:"BillToParty" yaml:"BillToParty,omitempty"`
	BillFromParty                    null.Int     `boil:"BillFromParty" json:"BillFromParty,omitempty" toml:"BillFromParty" yaml:"BillFromParty,omitempty"`
	BillToCountry                    null.String  `boil:"BillToCountry" json:"BillToCountry,omitempty" toml:"BillToCountry" yaml:"BillToCountry,omitempty"`
	BillFromCountry                  null.String  `boil:"BillFromCountry" json:"BillFromCountry,omitempty" toml:"BillFromCountry" yaml:"BillFromCountry,omitempty"`
	Payer                            null.Int     `boil:"Payer" json:"Payer,omitempty" toml:"Payer" yaml:"Payer,omitempty"`
	Payee                            null.Int     `boil:"Payee" json:"Payee,omitempty" toml:"Payee" yaml:"Payee,omitempty"`
	ContractValidityStartDate        null.String  `boil:"ContractValidityStartDate" json:"ContractValidityStartDate,omitempty" toml:"ContractValidityStartDate" yaml:"ContractValidityStartDate,omitempty"`
	ContractValidityEndDate          null.String  `boil:"ContractValidityEndDate" json:"ContractValidityEndDate,omitempty" toml:"ContractValidityEndDate" yaml:"ContractValidityEndDate,omitempty"`
	InvoicePeriodStartDate           null.String  `boil:"InvoicePeriodStartDate" json:"InvoicePeriodStartDate,omitempty" toml:"InvoicePeriodStartDate" yaml:"InvoicePeriodStartDate,omitempty"`
	InvoicePeriodEndDate             null.String  `boil:"InvoicePeriodEndDate" json:"InvoicePeriodEndDate,omitempty" toml:"InvoicePeriodEndDate" yaml:"InvoicePeriodEndDate,omitempty"`
	TotalNetAmount                   null.Float32 `boil:"TotalNetAmount" json:"TotalNetAmount,omitempty" toml:"TotalNetAmount" yaml:"TotalNetAmount,omitempty"`
	TotalTaxAmount                   null.Float32 `boil:"TotalTaxAmount" json:"TotalTaxAmount,omitempty" toml:"TotalTaxAmount" yaml:"TotalTaxAmount,omitempty"`
	TotalGrossAmount                 null.Float32 `boil:"TotalGrossAmount" json:"TotalGrossAmount,omitempty" toml:"TotalGrossAmount" yaml:"TotalGrossAmount,omitempty"`
	TransactionCurrency              null.String  `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	PricingDate                      null.String  `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	PriceDetnExchangeRate            null.Float32 `boil:"PriceDetnExchangeRate" json:"PriceDetnExchangeRate,omitempty" toml:"PriceDetnExchangeRate" yaml:"PriceDetnExchangeRate,omitempty"`
	PaymentTerms                     null.String  `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	PaymentMethod                    null.String  `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	ReferenceDocument                null.Int     `boil:"ReferenceDocument" json:"ReferenceDocument,omitempty" toml:"ReferenceDocument" yaml:"ReferenceDocument,omitempty"`
	ReferenceDocumentItem            null.Int     `boil:"ReferenceDocumentItem" json:"ReferenceDocumentItem,omitempty" toml:"ReferenceDocumentItem" yaml:"ReferenceDocumentItem,omitempty"`
	AccountAssignmentGroup           null.String  `boil:"AccountAssignmentGroup" json:"AccountAssignmentGroup,omitempty" toml:"AccountAssignmentGroup" yaml:"AccountAssignmentGroup,omitempty"`
	AccountingExchangeRate           null.Float32 `boil:"AccountingExchangeRate" json:"AccountingExchangeRate,omitempty" toml:"AccountingExchangeRate" yaml:"AccountingExchangeRate,omitempty"`
	InvoiceDocumentDate              null.String  `boil:"InvoiceDocumentDate" json:"InvoiceDocumentDate,omitempty" toml:"InvoiceDocumentDate" yaml:"InvoiceDocumentDate,omitempty"`
	IsExportImport                   null.Bool    `boil:"IsExportImport" json:"IsExportImport,omitempty" toml:"IsExportImport" yaml:"IsExportImport,omitempty"`
	HeaderText                       null.String  `boil:"HeaderText" json:"HeaderText,omitempty" toml:"HeaderText" yaml:"HeaderText,omitempty"`
	HeaderBlockStatus                null.Bool    `boil:"HeaderBlockStatus" json:"HeaderBlockStatus,omitempty" toml:"HeaderBlockStatus" yaml:"HeaderBlockStatus,omitempty"`
	ExternalReferenceDocument        null.String  `boil:"ExternalReferenceDocument" json:"ExternalReferenceDocument,omitempty" toml:"ExternalReferenceDocument" yaml:"ExternalReferenceDocument,omitempty"`
	CertificateAuthorityChain        null.String  `boil:"CertificateAuthorityChain" json:"CertificateAuthorityChain,omitempty" toml:"CertificateAuthorityChain" yaml:"CertificateAuthorityChain,omitempty"`
	UsageControlChain                null.String  `boil:"UsageControlChain" json:"UsageControlChain,omitempty" toml:"UsageControlChain" yaml:"UsageControlChain,omitempty"`
	CreationDate                     string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                     string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                   string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                   string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsCancelled                      null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion              null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformContractHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformContractHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformContractHeaderDatumColumns = struct {
	Contract                         string
	ContractDate                     string
	ContractType                     string
	ContractStatus                   string
	SupplyChainRelationshipID        string
	SupplyChainRelationshipBillingID string
	SupplyChainRelationshipPaymentID string
	Buyer                            string
	Seller                           string
	BillToParty                      string
	BillFromParty                    string
	BillToCountry                    string
	BillFromCountry                  string
	Payer                            string
	Payee                            string
	ContractValidityStartDate        string
	ContractValidityEndDate          string
	InvoicePeriodStartDate           string
	InvoicePeriodEndDate             string
	TotalNetAmount                   string
	TotalTaxAmount                   string
	TotalGrossAmount                 string
	TransactionCurrency              string
	PricingDate                      string
	PriceDetnExchangeRate            string
	PaymentTerms                     string
	PaymentMethod                    string
	ReferenceDocument                string
	ReferenceDocumentItem            string
	AccountAssignmentGroup           string
	AccountingExchangeRate           string
	InvoiceDocumentDate              string
	IsExportImport                   string
	HeaderText                       string
	HeaderBlockStatus                string
	ExternalReferenceDocument        string
	CertificateAuthorityChain        string
	UsageControlChain                string
	CreationDate                     string
	CreationTime                     string
	LastChangeDate                   string
	LastChangeTime                   string
	IsCancelled                      string
	IsMarkedForDeletion              string
}{
	Contract:                         "Contract",
	ContractDate:                     "ContractDate",
	ContractType:                     "ContractType",
	ContractStatus:                   "ContractStatus",
	SupplyChainRelationshipID:        "SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID: "SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID: "SupplyChainRelationshipPaymentID",
	Buyer:                            "Buyer",
	Seller:                           "Seller",
	BillToParty:                      "BillToParty",
	BillFromParty:                    "BillFromParty",
	BillToCountry:                    "BillToCountry",
	BillFromCountry:                  "BillFromCountry",
	Payer:                            "Payer",
	Payee:                            "Payee",
	ContractValidityStartDate:        "ContractValidityStartDate",
	ContractValidityEndDate:          "ContractValidityEndDate",
	InvoicePeriodStartDate:           "InvoicePeriodStartDate",
	InvoicePeriodEndDate:             "InvoicePeriodEndDate",
	TotalNetAmount:                   "TotalNetAmount",
	TotalTaxAmount:                   "TotalTaxAmount",
	TotalGrossAmount:                 "TotalGrossAmount",
	TransactionCurrency:              "TransactionCurrency",
	PricingDate:                      "PricingDate",
	PriceDetnExchangeRate:            "PriceDetnExchangeRate",
	PaymentTerms:                     "PaymentTerms",
	PaymentMethod:                    "PaymentMethod",
	ReferenceDocument:                "ReferenceDocument",
	ReferenceDocumentItem:            "ReferenceDocumentItem",
	AccountAssignmentGroup:           "AccountAssignmentGroup",
	AccountingExchangeRate:           "AccountingExchangeRate",
	InvoiceDocumentDate:              "InvoiceDocumentDate",
	IsExportImport:                   "IsExportImport",
	HeaderText:                       "HeaderText",
	HeaderBlockStatus:                "HeaderBlockStatus",
	ExternalReferenceDocument:        "ExternalReferenceDocument",
	CertificateAuthorityChain:        "CertificateAuthorityChain",
	UsageControlChain:                "UsageControlChain",
	CreationDate:                     "CreationDate",
	CreationTime:                     "CreationTime",
	LastChangeDate:                   "LastChangeDate",
	LastChangeTime:                   "LastChangeTime",
	IsCancelled:                      "IsCancelled",
	IsMarkedForDeletion:              "IsMarkedForDeletion",
}

var DataPlatformContractHeaderDatumTableColumns = struct {
	Contract                         string
	ContractDate                     string
	ContractType                     string
	ContractStatus                   string
	SupplyChainRelationshipID        string
	SupplyChainRelationshipBillingID string
	SupplyChainRelationshipPaymentID string
	Buyer                            string
	Seller                           string
	BillToParty                      string
	BillFromParty                    string
	BillToCountry                    string
	BillFromCountry                  string
	Payer                            string
	Payee                            string
	ContractValidityStartDate        string
	ContractValidityEndDate          string
	InvoicePeriodStartDate           string
	InvoicePeriodEndDate             string
	TotalNetAmount                   string
	TotalTaxAmount                   string
	TotalGrossAmount                 string
	TransactionCurrency              string
	PricingDate                      string
	PriceDetnExchangeRate            string
	PaymentTerms                     string
	PaymentMethod                    string
	ReferenceDocument                string
	ReferenceDocumentItem            string
	AccountAssignmentGroup           string
	AccountingExchangeRate           string
	InvoiceDocumentDate              string
	IsExportImport                   string
	HeaderText                       string
	HeaderBlockStatus                string
	ExternalReferenceDocument        string
	CertificateAuthorityChain        string
	UsageControlChain                string
	CreationDate                     string
	CreationTime                     string
	LastChangeDate                   string
	LastChangeTime                   string
	IsCancelled                      string
	IsMarkedForDeletion              string
}{
	Contract:                         "data_platform_contract_header_data.Contract",
	ContractDate:                     "data_platform_contract_header_data.ContractDate",
	ContractType:                     "data_platform_contract_header_data.ContractType",
	ContractStatus:                   "data_platform_contract_header_data.ContractStatus",
	SupplyChainRelationshipID:        "data_platform_contract_header_data.SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID: "data_platform_contract_header_data.SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID: "data_platform_contract_header_data.SupplyChainRelationshipPaymentID",
	Buyer:                            "data_platform_contract_header_data.Buyer",
	Seller:                           "data_platform_contract_header_data.Seller",
	BillToParty:                      "data_platform_contract_header_data.BillToParty",
	BillFromParty:                    "data_platform_contract_header_data.BillFromParty",
	BillToCountry:                    "data_platform_contract_header_data.BillToCountry",
	BillFromCountry:                  "data_platform_contract_header_data.BillFromCountry",
	Payer:                            "data_platform_contract_header_data.Payer",
	Payee:                            "data_platform_contract_header_data.Payee",
	ContractValidityStartDate:        "data_platform_contract_header_data.ContractValidityStartDate",
	ContractValidityEndDate:          "data_platform_contract_header_data.ContractValidityEndDate",
	InvoicePeriodStartDate:           "data_platform_contract_header_data.InvoicePeriodStartDate",
	InvoicePeriodEndDate:             "data_platform_contract_header_data.InvoicePeriodEndDate",
	TotalNetAmount:                   "data_platform_contract_header_data.TotalNetAmount",
	TotalTaxAmount:                   "data_platform_contract_header_data.TotalTaxAmount",
	TotalGrossAmount:                 "data_platform_contract_header_data.TotalGrossAmount",
	TransactionCurrency:              "data_platform_contract_header_data.TransactionCurrency",
	PricingDate:                      "data_platform_contract_header_data.PricingDate",
	PriceDetnExchangeRate:            "data_platform_contract_header_data.PriceDetnExchangeRate",
	PaymentTerms:                     "data_platform_contract_header_data.PaymentTerms",
	PaymentMethod:                    "data_platform_contract_header_data.PaymentMethod",
	ReferenceDocument:                "data_platform_contract_header_data.ReferenceDocument",
	ReferenceDocumentItem:            "data_platform_contract_header_data.ReferenceDocumentItem",
	AccountAssignmentGroup:           "data_platform_contract_header_data.AccountAssignmentGroup",
	AccountingExchangeRate:           "data_platform_contract_header_data.AccountingExchangeRate",
	InvoiceDocumentDate:              "data_platform_contract_header_data.InvoiceDocumentDate",
	IsExportImport:                   "data_platform_contract_header_data.IsExportImport",
	HeaderText:                       "data_platform_contract_header_data.HeaderText",
	HeaderBlockStatus:                "data_platform_contract_header_data.HeaderBlockStatus",
	ExternalReferenceDocument:        "data_platform_contract_header_data.ExternalReferenceDocument",
	CertificateAuthorityChain:        "data_platform_contract_header_data.CertificateAuthorityChain",
	UsageControlChain:                "data_platform_contract_header_data.UsageControlChain",
	CreationDate:                     "data_platform_contract_header_data.CreationDate",
	CreationTime:                     "data_platform_contract_header_data.CreationTime",
	LastChangeDate:                   "data_platform_contract_header_data.LastChangeDate",
	LastChangeTime:                   "data_platform_contract_header_data.LastChangeTime",
	IsCancelled:                      "data_platform_contract_header_data.IsCancelled",
	IsMarkedForDeletion:              "data_platform_contract_header_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformContractHeaderDatumWhere = struct {
	Contract                         whereHelperint
	ContractDate                     whereHelperstring
	ContractType                     whereHelperstring
	ContractStatus                   whereHelperstring
	SupplyChainRelationshipID        whereHelperint
	SupplyChainRelationshipBillingID whereHelpernull_Int
	SupplyChainRelationshipPaymentID whereHelpernull_Int
	Buyer                            whereHelperint
	Seller                           whereHelperint
	BillToParty                      whereHelpernull_Int
	BillFromParty                    whereHelpernull_Int
	BillToCountry                    whereHelpernull_String
	BillFromCountry                  whereHelpernull_String
	Payer                            whereHelpernull_Int
	Payee                            whereHelpernull_Int
	ContractValidityStartDate        whereHelpernull_String
	ContractValidityEndDate          whereHelpernull_String
	InvoicePeriodStartDate           whereHelpernull_String
	InvoicePeriodEndDate             whereHelpernull_String
	TotalNetAmount                   whereHelpernull_Float32
	TotalTaxAmount                   whereHelpernull_Float32
	TotalGrossAmount                 whereHelpernull_Float32
	TransactionCurrency              whereHelpernull_String
	PricingDate                      whereHelpernull_String
	PriceDetnExchangeRate            whereHelpernull_Float32
	PaymentTerms                     whereHelpernull_String
	PaymentMethod                    whereHelpernull_String
	ReferenceDocument                whereHelpernull_Int
	ReferenceDocumentItem            whereHelpernull_Int
	AccountAssignmentGroup           whereHelpernull_String
	AccountingExchangeRate           whereHelpernull_Float32
	InvoiceDocumentDate              whereHelpernull_String
	IsExportImport                   whereHelpernull_Bool
	HeaderText                       whereHelpernull_String
	HeaderBlockStatus                whereHelpernull_Bool
	ExternalReferenceDocument        whereHelpernull_String
	CertificateAuthorityChain        whereHelpernull_String
	UsageControlChain                whereHelpernull_String
	CreationDate                     whereHelperstring
	CreationTime                     whereHelperstring
	LastChangeDate                   whereHelperstring
	LastChangeTime                   whereHelperstring
	IsCancelled                      whereHelpernull_Bool
	IsMarkedForDeletion              whereHelpernull_Bool
}{
	Contract:                         whereHelperint{field: "`data_platform_contract_header_data`.`Contract`"},
	ContractDate:                     whereHelperstring{field: "`data_platform_contract_header_data`.`ContractDate`"},
	ContractType:                     whereHelperstring{field: "`data_platform_contract_header_data`.`ContractType`"},
	ContractStatus:                   whereHelperstring{field: "`data_platform_contract_header_data`.`ContractStatus`"},
	SupplyChainRelationshipID:        whereHelperint{field: "`data_platform_contract_header_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipBillingID: whereHelpernull_Int{field: "`data_platform_contract_header_data`.`SupplyChainRelationshipBillingID`"},
	SupplyChainRelationshipPaymentID: whereHelpernull_Int{field: "`data_platform_contract_header_data`.`SupplyChainRelationshipPaymentID`"},
	Buyer:                            whereHelperint{field: "`data_platform_contract_header_data`.`Buyer`"},
	Seller:                           whereHelperint{field: "`data_platform_contract_header_data`.`Seller`"},
	BillToParty:                      whereHelpernull_Int{field: "`data_platform_contract_header_data`.`BillToParty`"},
	BillFromParty:                    whereHelpernull_Int{field: "`data_platform_contract_header_data`.`BillFromParty`"},
	BillToCountry:                    whereHelpernull_String{field: "`data_platform_contract_header_data`.`BillToCountry`"},
	BillFromCountry:                  whereHelpernull_String{field: "`data_platform_contract_header_data`.`BillFromCountry`"},
	Payer:                            whereHelpernull_Int{field: "`data_platform_contract_header_data`.`Payer`"},
	Payee:                            whereHelpernull_Int{field: "`data_platform_contract_header_data`.`Payee`"},
	ContractValidityStartDate:        whereHelpernull_String{field: "`data_platform_contract_header_data`.`ContractValidityStartDate`"},
	ContractValidityEndDate:          whereHelpernull_String{field: "`data_platform_contract_header_data`.`ContractValidityEndDate`"},
	InvoicePeriodStartDate:           whereHelpernull_String{field: "`data_platform_contract_header_data`.`InvoicePeriodStartDate`"},
	InvoicePeriodEndDate:             whereHelpernull_String{field: "`data_platform_contract_header_data`.`InvoicePeriodEndDate`"},
	TotalNetAmount:                   whereHelpernull_Float32{field: "`data_platform_contract_header_data`.`TotalNetAmount`"},
	TotalTaxAmount:                   whereHelpernull_Float32{field: "`data_platform_contract_header_data`.`TotalTaxAmount`"},
	TotalGrossAmount:                 whereHelpernull_Float32{field: "`data_platform_contract_header_data`.`TotalGrossAmount`"},
	TransactionCurrency:              whereHelpernull_String{field: "`data_platform_contract_header_data`.`TransactionCurrency`"},
	PricingDate:                      whereHelpernull_String{field: "`data_platform_contract_header_data`.`PricingDate`"},
	PriceDetnExchangeRate:            whereHelpernull_Float32{field: "`data_platform_contract_header_data`.`PriceDetnExchangeRate`"},
	PaymentTerms:                     whereHelpernull_String{field: "`data_platform_contract_header_data`.`PaymentTerms`"},
	PaymentMethod:                    whereHelpernull_String{field: "`data_platform_contract_header_data`.`PaymentMethod`"},
	ReferenceDocument:                whereHelpernull_Int{field: "`data_platform_contract_header_data`.`ReferenceDocument`"},
	ReferenceDocumentItem:            whereHelpernull_Int{field: "`data_platform_contract_header_data`.`ReferenceDocumentItem`"},
	AccountAssignmentGroup:           whereHelpernull_String{field: "`data_platform_contract_header_data`.`AccountAssignmentGroup`"},
	AccountingExchangeRate:           whereHelpernull_Float32{field: "`data_platform_contract_header_data`.`AccountingExchangeRate`"},
	InvoiceDocumentDate:              whereHelpernull_String{field: "`data_platform_contract_header_data`.`InvoiceDocumentDate`"},
	IsExportImport:                   whereHelpernull_Bool{field: "`data_platform_contract_header_data`.`IsExportImport`"},
	HeaderText:                       whereHelpernull_String{field: "`data_platform_contract_header_data`.`HeaderText`"},
	HeaderBlockStatus:                whereHelpernull_Bool{field: "`data_platform_contract_header_data`.`HeaderBlockStatus`"},
	ExternalReferenceDocument:        whereHelpernull_String{field: "`data_platform_contract_header_data`.`ExternalReferenceDocument`"},
	CertificateAuthorityChain:        whereHelpernull_String{field: "`data_platform_contract_header_data`.`CertificateAuthorityChain`"},
	UsageControlChain:                whereHelpernull_String{field: "`data_platform_contract_header_data`.`UsageControlChain`"},
	CreationDate:                     whereHelperstring{field: "`data_platform_contract_header_data`.`CreationDate`"},
	CreationTime:                     whereHelperstring{field: "`data_platform_contract_header_data`.`CreationTime`"},
	LastChangeDate:                   whereHelperstring{field: "`data_platform_contract_header_data`.`LastChangeDate`"},
	LastChangeTime:                   whereHelperstring{field: "`data_platform_contract_header_data`.`LastChangeTime`"},
	IsCancelled:                      whereHelpernull_Bool{field: "`data_platform_contract_header_data`.`IsCancelled`"},
	IsMarkedForDeletion:              whereHelpernull_Bool{field: "`data_platform_contract_header_data`.`IsMarkedForDeletion`"},
}

// DataPlatformContractHeaderDatumRels is where relationship names are stored.
var DataPlatformContractHeaderDatumRels = struct {
	BillFromCountryDataPlatformCountryCountryDatum           string
	BillToCountryDataPlatformCountryCountryDatum             string
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum string
	PaymentTerm                                              string
	BillFromPartyDataPlatformSCRBillingRelationDatum         string
	BuyerDataPlatformSCRGeneralDatum                         string
	BillFromPartyDataPlatformSCRPaymentRelationDatum         string
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum     string
	ContractDataPlatformDeliveryDocumentHeaderData           string
	ContractDataPlatformDeliveryDocumentItemData             string
	ContractDataPlatformOrdersHeaderData                     string
	ContractDataPlatformOrdersItemData                       string
	ContractDataPlatformQuotationsHeaderData                 string
	ContractDataPlatformQuotationsItemData                   string
}{
	BillFromCountryDataPlatformCountryCountryDatum:           "BillFromCountryDataPlatformCountryCountryDatum",
	BillToCountryDataPlatformCountryCountryDatum:             "BillToCountryDataPlatformCountryCountryDatum",
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: "PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum",
	PaymentTerm: "PaymentTerm",
	BillFromPartyDataPlatformSCRBillingRelationDatum:     "BillFromPartyDataPlatformSCRBillingRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:                     "BuyerDataPlatformSCRGeneralDatum",
	BillFromPartyDataPlatformSCRPaymentRelationDatum:     "BillFromPartyDataPlatformSCRPaymentRelationDatum",
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum: "TransactionCurrencyDataPlatformCurrencyCurrencyDatum",
	ContractDataPlatformDeliveryDocumentHeaderData:       "ContractDataPlatformDeliveryDocumentHeaderData",
	ContractDataPlatformDeliveryDocumentItemData:         "ContractDataPlatformDeliveryDocumentItemData",
	ContractDataPlatformOrdersHeaderData:                 "ContractDataPlatformOrdersHeaderData",
	ContractDataPlatformOrdersItemData:                   "ContractDataPlatformOrdersItemData",
	ContractDataPlatformQuotationsHeaderData:             "ContractDataPlatformQuotationsHeaderData",
	ContractDataPlatformQuotationsItemData:               "ContractDataPlatformQuotationsItemData",
}

// dataPlatformContractHeaderDatumR is where relationships are stored.
type dataPlatformContractHeaderDatumR struct {
	BillFromCountryDataPlatformCountryCountryDatum           *DataPlatformCountryCountryDatum             `boil:"BillFromCountryDataPlatformCountryCountryDatum" json:"BillFromCountryDataPlatformCountryCountryDatum" toml:"BillFromCountryDataPlatformCountryCountryDatum" yaml:"BillFromCountryDataPlatformCountryCountryDatum"`
	BillToCountryDataPlatformCountryCountryDatum             *DataPlatformCountryCountryDatum             `boil:"BillToCountryDataPlatformCountryCountryDatum" json:"BillToCountryDataPlatformCountryCountryDatum" toml:"BillToCountryDataPlatformCountryCountryDatum" yaml:"BillToCountryDataPlatformCountryCountryDatum"`
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum *DataPlatformPaymentMethodPaymentMethodDatum `boil:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" json:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" toml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" yaml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum"`
	PaymentTerm                                              *DataPlatformPaymentTermsPaymentTermsDatum   `boil:"PaymentTerm" json:"PaymentTerm" toml:"PaymentTerm" yaml:"PaymentTerm"`
	BillFromPartyDataPlatformSCRBillingRelationDatum         *DataPlatformSCRBillingRelationDatum         `boil:"BillFromPartyDataPlatformSCRBillingRelationDatum" json:"BillFromPartyDataPlatformSCRBillingRelationDatum" toml:"BillFromPartyDataPlatformSCRBillingRelationDatum" yaml:"BillFromPartyDataPlatformSCRBillingRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum                         *DataPlatformSCRGeneralDatum                 `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	BillFromPartyDataPlatformSCRPaymentRelationDatum         *DataPlatformSCRPaymentRelationDatum         `boil:"BillFromPartyDataPlatformSCRPaymentRelationDatum" json:"BillFromPartyDataPlatformSCRPaymentRelationDatum" toml:"BillFromPartyDataPlatformSCRPaymentRelationDatum" yaml:"BillFromPartyDataPlatformSCRPaymentRelationDatum"`
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum     *DataPlatformCurrencyCurrencyDatum           `boil:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" json:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" toml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" yaml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum"`
	ContractDataPlatformDeliveryDocumentHeaderData           DataPlatformDeliveryDocumentHeaderDatumSlice `boil:"ContractDataPlatformDeliveryDocumentHeaderData" json:"ContractDataPlatformDeliveryDocumentHeaderData" toml:"ContractDataPlatformDeliveryDocumentHeaderData" yaml:"ContractDataPlatformDeliveryDocumentHeaderData"`
	ContractDataPlatformDeliveryDocumentItemData             DataPlatformDeliveryDocumentItemDatumSlice   `boil:"ContractDataPlatformDeliveryDocumentItemData" json:"ContractDataPlatformDeliveryDocumentItemData" toml:"ContractDataPlatformDeliveryDocumentItemData" yaml:"ContractDataPlatformDeliveryDocumentItemData"`
	ContractDataPlatformOrdersHeaderData                     DataPlatformOrdersHeaderDatumSlice           `boil:"ContractDataPlatformOrdersHeaderData" json:"ContractDataPlatformOrdersHeaderData" toml:"ContractDataPlatformOrdersHeaderData" yaml:"ContractDataPlatformOrdersHeaderData"`
	ContractDataPlatformOrdersItemData                       DataPlatformOrdersItemDatumSlice             `boil:"ContractDataPlatformOrdersItemData" json:"ContractDataPlatformOrdersItemData" toml:"ContractDataPlatformOrdersItemData" yaml:"ContractDataPlatformOrdersItemData"`
	ContractDataPlatformQuotationsHeaderData                 DataPlatformQuotationsHeaderDatumSlice       `boil:"ContractDataPlatformQuotationsHeaderData" json:"ContractDataPlatformQuotationsHeaderData" toml:"ContractDataPlatformQuotationsHeaderData" yaml:"ContractDataPlatformQuotationsHeaderData"`
	ContractDataPlatformQuotationsItemData                   DataPlatformQuotationsItemDatumSlice         `boil:"ContractDataPlatformQuotationsItemData" json:"ContractDataPlatformQuotationsItemData" toml:"ContractDataPlatformQuotationsItemData" yaml:"ContractDataPlatformQuotationsItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformContractHeaderDatumR) NewStruct() *dataPlatformContractHeaderDatumR {
	return &dataPlatformContractHeaderDatumR{}
}

func (r *dataPlatformContractHeaderDatumR) GetBillFromCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.BillFromCountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformContractHeaderDatumR) GetBillToCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.BillToCountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformContractHeaderDatumR) GetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum() *DataPlatformPaymentMethodPaymentMethodDatum {
	if r == nil {
		return nil
	}
	return r.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum
}

func (r *dataPlatformContractHeaderDatumR) GetPaymentTerm() *DataPlatformPaymentTermsPaymentTermsDatum {
	if r == nil {
		return nil
	}
	return r.PaymentTerm
}

func (r *dataPlatformContractHeaderDatumR) GetBillFromPartyDataPlatformSCRBillingRelationDatum() *DataPlatformSCRBillingRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRBillingRelationDatum
}

func (r *dataPlatformContractHeaderDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformContractHeaderDatumR) GetBillFromPartyDataPlatformSCRPaymentRelationDatum() *DataPlatformSCRPaymentRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRPaymentRelationDatum
}

func (r *dataPlatformContractHeaderDatumR) GetTransactionCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.TransactionCurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformContractHeaderDatumR) GetContractDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ContractDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformContractHeaderDatumR) GetContractDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ContractDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformContractHeaderDatumR) GetContractDataPlatformOrdersHeaderData() DataPlatformOrdersHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ContractDataPlatformOrdersHeaderData
}

func (r *dataPlatformContractHeaderDatumR) GetContractDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ContractDataPlatformOrdersItemData
}

func (r *dataPlatformContractHeaderDatumR) GetContractDataPlatformQuotationsHeaderData() DataPlatformQuotationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ContractDataPlatformQuotationsHeaderData
}

func (r *dataPlatformContractHeaderDatumR) GetContractDataPlatformQuotationsItemData() DataPlatformQuotationsItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ContractDataPlatformQuotationsItemData
}

// dataPlatformContractHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformContractHeaderDatumL struct{}

var (
	dataPlatformContractHeaderDatumAllColumns            = []string{"Contract", "ContractDate", "ContractType", "ContractStatus", "SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "ContractValidityStartDate", "ContractValidityEndDate", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "TotalNetAmount", "TotalTaxAmount", "TotalGrossAmount", "TransactionCurrency", "PricingDate", "PriceDetnExchangeRate", "PaymentTerms", "PaymentMethod", "ReferenceDocument", "ReferenceDocumentItem", "AccountAssignmentGroup", "AccountingExchangeRate", "InvoiceDocumentDate", "IsExportImport", "HeaderText", "HeaderBlockStatus", "ExternalReferenceDocument", "CertificateAuthorityChain", "UsageControlChain", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformContractHeaderDatumColumnsWithoutDefault = []string{"Contract", "ContractDate", "ContractType", "ContractStatus", "SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "ContractValidityStartDate", "ContractValidityEndDate", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "TotalNetAmount", "TotalTaxAmount", "TotalGrossAmount", "TransactionCurrency", "PricingDate", "PriceDetnExchangeRate", "PaymentTerms", "PaymentMethod", "ReferenceDocument", "ReferenceDocumentItem", "AccountAssignmentGroup", "AccountingExchangeRate", "InvoiceDocumentDate", "IsExportImport", "HeaderText", "HeaderBlockStatus", "ExternalReferenceDocument", "CertificateAuthorityChain", "UsageControlChain", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformContractHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformContractHeaderDatumPrimaryKeyColumns     = []string{"Contract"}
	dataPlatformContractHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformContractHeaderDatumSlice is an alias for a slice of pointers to DataPlatformContractHeaderDatum.
	// This should almost always be used instead of []DataPlatformContractHeaderDatum.
	DataPlatformContractHeaderDatumSlice []*DataPlatformContractHeaderDatum

	dataPlatformContractHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformContractHeaderDatumType                 = reflect.TypeOf(&DataPlatformContractHeaderDatum{})
	dataPlatformContractHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformContractHeaderDatumType)
	dataPlatformContractHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformContractHeaderDatumType, dataPlatformContractHeaderDatumMapping, dataPlatformContractHeaderDatumPrimaryKeyColumns)
	dataPlatformContractHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformContractHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformContractHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformContractHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformContractHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformContractHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformContractHeaderDatum record from the query.
func (q dataPlatformContractHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformContractHeaderDatum, error) {
	o := &DataPlatformContractHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_contract_header_data")
	}

	return o, nil
}

// All returns all DataPlatformContractHeaderDatum records from the query.
func (q dataPlatformContractHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformContractHeaderDatumSlice, error) {
	var o []*DataPlatformContractHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformContractHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformContractHeaderDatum records in the query.
func (q dataPlatformContractHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_contract_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformContractHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_contract_header_data exists")
	}

	return count > 0, nil
}

// BillFromCountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformContractHeaderDatum) BillFromCountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.BillFromCountry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// BillToCountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformContractHeaderDatum) BillToCountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.BillToCountry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum pointed to by the foreign key.
func (o *DataPlatformContractHeaderDatum) PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(mods ...qm.QueryMod) dataPlatformPaymentMethodPaymentMethodDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentMethod` = ?", o.PaymentMethod),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentMethodPaymentMethodData(queryMods...)
}

// PaymentTerm pointed to by the foreign key.
func (o *DataPlatformContractHeaderDatum) PaymentTerm(mods ...qm.QueryMod) dataPlatformPaymentTermsPaymentTermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentTerms` = ?", o.PaymentTerms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentTermsPaymentTermsData(queryMods...)
}

// BillFromPartyDataPlatformSCRBillingRelationDatum pointed to by the foreign key.
func (o *DataPlatformContractHeaderDatum) BillFromPartyDataPlatformSCRBillingRelationDatum(mods ...qm.QueryMod) dataPlatformSCRBillingRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRBillingRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformContractHeaderDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// BillFromPartyDataPlatformSCRPaymentRelationDatum pointed to by the foreign key.
func (o *DataPlatformContractHeaderDatum) BillFromPartyDataPlatformSCRPaymentRelationDatum(mods ...qm.QueryMod) dataPlatformSCRPaymentRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRPaymentRelationData(queryMods...)
}

// TransactionCurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformContractHeaderDatum) TransactionCurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.TransactionCurrency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// ContractDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via Contract column.
func (o *DataPlatformContractHeaderDatum) ContractDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`Contract`=?", o.Contract),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// ContractDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via Contract column.
func (o *DataPlatformContractHeaderDatum) ContractDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`Contract`=?", o.Contract),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// ContractDataPlatformOrdersHeaderData retrieves all the data_platform_orders_header_datum's DataPlatformOrdersHeaderData with an executor via Contract column.
func (o *DataPlatformContractHeaderDatum) ContractDataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_data`.`Contract`=?", o.Contract),
	)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// ContractDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via Contract column.
func (o *DataPlatformContractHeaderDatum) ContractDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`Contract`=?", o.Contract),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// ContractDataPlatformQuotationsHeaderData retrieves all the data_platform_quotations_header_datum's DataPlatformQuotationsHeaderData with an executor via Contract column.
func (o *DataPlatformContractHeaderDatum) ContractDataPlatformQuotationsHeaderData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_header_data`.`Contract`=?", o.Contract),
	)

	return DataPlatformQuotationsHeaderData(queryMods...)
}

// ContractDataPlatformQuotationsItemData retrieves all the data_platform_quotations_item_datum's DataPlatformQuotationsItemData with an executor via Contract column.
func (o *DataPlatformContractHeaderDatum) ContractDataPlatformQuotationsItemData(mods ...qm.QueryMod) dataPlatformQuotationsItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_item_data`.`Contract`=?", o.Contract),
	)

	return DataPlatformQuotationsItemData(queryMods...)
}

// LoadBillFromCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformContractHeaderDatumL) LoadBillFromCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		if !queries.IsNil(object.BillFromCountry) {
			args = append(args, object.BillFromCountry)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromCountry) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromCountry) {
				args = append(args, obj.BillFromCountry)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromCountryDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromCountry, foreign.Country) {
				local.R.BillFromCountryDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillToCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformContractHeaderDatumL) LoadBillToCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		if !queries.IsNil(object.BillToCountry) {
			args = append(args, object.BillToCountry)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillToCountry) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillToCountry) {
				args = append(args, obj.BillToCountry)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillToCountryDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillToCountry, foreign.Country) {
				local.R.BillToCountryDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformContractHeaderDatumL) LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		if !queries.IsNil(object.PaymentMethod) {
			args = append(args, object.PaymentMethod)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PaymentMethod) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PaymentMethod) {
				args = append(args, obj.PaymentMethod)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_method_payment_method_data`),
		qm.WhereIn(`data_platform_payment_method_payment_method_data.PaymentMethod in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentMethodPaymentMethodDatum")
	}

	var resultSlice []*DataPlatformPaymentMethodPaymentMethodDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentMethodPaymentMethodDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_method_payment_method_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_method_payment_method_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentMethod, foreign.PaymentMethod) {
				local.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentTerm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformContractHeaderDatumL) LoadPaymentTerm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		if !queries.IsNil(object.PaymentTerms) {
			args = append(args, object.PaymentTerms)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PaymentTerms) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PaymentTerms) {
				args = append(args, obj.PaymentTerms)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_terms_payment_terms_data`),
		qm.WhereIn(`data_platform_payment_terms_payment_terms_data.PaymentTerms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentTermsPaymentTermsDatum")
	}

	var resultSlice []*DataPlatformPaymentTermsPaymentTermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentTermsPaymentTermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_terms_payment_terms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_terms_payment_terms_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentTerm = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentTerms, foreign.PaymentTerms) {
				local.R.PaymentTerm = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRBillingRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformContractHeaderDatumL) LoadBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		if !queries.IsNil(object.BillFromParty) {
			args = append(args, object.BillFromParty)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromParty) {
				args = append(args, obj.BillFromParty)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_billing_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRBillingRelationDatum")
	}

	var resultSlice []*DataPlatformSCRBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRBillingRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_billing_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSCRBillingRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformSCRBillingRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformContractHeaderDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRPaymentRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformContractHeaderDatumL) LoadBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		if !queries.IsNil(object.BillFromParty) {
			args = append(args, object.BillFromParty)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromParty) {
				args = append(args, obj.BillFromParty)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_payment_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRPaymentRelationDatum")
	}

	var resultSlice []*DataPlatformSCRPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRPaymentRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_payment_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformContractHeaderDatumL) LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		if !queries.IsNil(object.TransactionCurrency) {
			args = append(args, object.TransactionCurrency)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TransactionCurrency) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TransactionCurrency) {
				args = append(args, obj.TransactionCurrency)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TransactionCurrency, foreign.Currency) {
				local.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadContractDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformContractHeaderDatumL) LoadContractDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		args = append(args, object.Contract)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Contract) {
					continue Outer
				}
			}

			args = append(args, obj.Contract)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.Contract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.ContractDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Contract, foreign.Contract) {
				local.R.ContractDataPlatformDeliveryDocumentHeaderData = append(local.R.ContractDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadContractDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformContractHeaderDatumL) LoadContractDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		args = append(args, object.Contract)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Contract) {
					continue Outer
				}
			}

			args = append(args, obj.Contract)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.Contract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.ContractDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Contract, foreign.Contract) {
				local.R.ContractDataPlatformDeliveryDocumentItemData = append(local.R.ContractDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadContractDataPlatformOrdersHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformContractHeaderDatumL) LoadContractDataPlatformOrdersHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		args = append(args, object.Contract)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Contract) {
					continue Outer
				}
			}

			args = append(args, obj.Contract)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.Contract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if singular {
		object.R.ContractDataPlatformOrdersHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Contract, foreign.Contract) {
				local.R.ContractDataPlatformOrdersHeaderData = append(local.R.ContractDataPlatformOrdersHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadContractDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformContractHeaderDatumL) LoadContractDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		args = append(args, object.Contract)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Contract) {
					continue Outer
				}
			}

			args = append(args, obj.Contract)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.Contract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.ContractDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Contract, foreign.Contract) {
				local.R.ContractDataPlatformOrdersItemData = append(local.R.ContractDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadContractDataPlatformQuotationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformContractHeaderDatumL) LoadContractDataPlatformQuotationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		args = append(args, object.Contract)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Contract) {
					continue Outer
				}
			}

			args = append(args, obj.Contract)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_data`),
		qm.WhereIn(`data_platform_quotations_header_data.Contract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_header_data")
	}

	var resultSlice []*DataPlatformQuotationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_data")
	}

	if singular {
		object.R.ContractDataPlatformQuotationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Contract, foreign.Contract) {
				local.R.ContractDataPlatformQuotationsHeaderData = append(local.R.ContractDataPlatformQuotationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadContractDataPlatformQuotationsItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformContractHeaderDatumL) LoadContractDataPlatformQuotationsItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformContractHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformContractHeaderDatum
	var object *DataPlatformContractHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformContractHeaderDatum.(*DataPlatformContractHeaderDatum)
		if !ok {
			object = new(DataPlatformContractHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformContractHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformContractHeaderDatum.(*[]*DataPlatformContractHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformContractHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformContractHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformContractHeaderDatumR{}
		}
		args = append(args, object.Contract)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformContractHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Contract) {
					continue Outer
				}
			}

			args = append(args, obj.Contract)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_item_data`),
		qm.WhereIn(`data_platform_quotations_item_data.Contract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_item_data")
	}

	var resultSlice []*DataPlatformQuotationsItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_item_data")
	}

	if singular {
		object.R.ContractDataPlatformQuotationsItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Contract, foreign.Contract) {
				local.R.ContractDataPlatformQuotationsItemData = append(local.R.ContractDataPlatformQuotationsItemData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBillFromCountryDataPlatformCountryCountryDatum of the dataPlatformContractHeaderDatum to the related item.
// Sets o.R.BillFromCountryDataPlatformCountryCountryDatum to related.
func (o *DataPlatformContractHeaderDatum) SetBillFromCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromCountry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.Contract}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromCountry, related.Country)
	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			BillFromCountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.BillFromCountryDataPlatformCountryCountryDatum = related
	}

	return nil
}

// RemoveBillFromCountryDataPlatformCountryCountryDatum relationship.
// Sets o.R.BillFromCountryDataPlatformCountryCountryDatum to nil.
func (o *DataPlatformContractHeaderDatum) RemoveBillFromCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCountryCountryDatum) error {
	var err error

	queries.SetScanner(&o.BillFromCountry, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromCountry")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromCountryDataPlatformCountryCountryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBillToCountryDataPlatformCountryCountryDatum of the dataPlatformContractHeaderDatum to the related item.
// Sets o.R.BillToCountryDataPlatformCountryCountryDatum to related.
func (o *DataPlatformContractHeaderDatum) SetBillToCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillToCountry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.Contract}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillToCountry, related.Country)
	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			BillToCountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.BillToCountryDataPlatformCountryCountryDatum = related
	}

	return nil
}

// RemoveBillToCountryDataPlatformCountryCountryDatum relationship.
// Sets o.R.BillToCountryDataPlatformCountryCountryDatum to nil.
func (o *DataPlatformContractHeaderDatum) RemoveBillToCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCountryCountryDatum) error {
	var err error

	queries.SetScanner(&o.BillToCountry, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillToCountry")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillToCountryDataPlatformCountryCountryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum of the dataPlatformContractHeaderDatum to the related item.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to related.
func (o *DataPlatformContractHeaderDatum) SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentMethod"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentMethod, o.Contract}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentMethod, related.PaymentMethod)
	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: related,
		}
	} else {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = related
	}

	return nil
}

// RemovePaymentMethodDataPlatformPaymentMethodPaymentMethodDatum relationship.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to nil.
func (o *DataPlatformContractHeaderDatum) RemovePaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error

	queries.SetScanner(&o.PaymentMethod, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PaymentMethod")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPaymentTerm of the dataPlatformContractHeaderDatum to the related item.
// Sets o.R.PaymentTerm to related.
func (o *DataPlatformContractHeaderDatum) SetPaymentTerm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentTermsPaymentTermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentTerms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentTerms, o.Contract}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentTerms, related.PaymentTerms)
	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			PaymentTerm: related,
		}
	} else {
		o.R.PaymentTerm = related
	}

	return nil
}

// RemovePaymentTerm relationship.
// Sets o.R.PaymentTerm to nil.
func (o *DataPlatformContractHeaderDatum) RemovePaymentTerm(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPaymentTermsPaymentTermsDatum) error {
	var err error

	queries.SetScanner(&o.PaymentTerms, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PaymentTerms")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PaymentTerm = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBillFromPartyDataPlatformSCRBillingRelationDatum of the dataPlatformContractHeaderDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum to related.
func (o *DataPlatformContractHeaderDatum) SetBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRBillingRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.Contract}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromParty, related.BillFromParty)
	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			BillFromPartyDataPlatformSCRBillingRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRBillingRelationDatum = related
	}

	return nil
}

// RemoveBillFromPartyDataPlatformSCRBillingRelationDatum relationship.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum to nil.
func (o *DataPlatformContractHeaderDatum) RemoveBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformSCRBillingRelationDatum) error {
	var err error

	queries.SetScanner(&o.BillFromParty, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformSCRBillingRelationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformContractHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformContractHeaderDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Contract}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// SetBillFromPartyDataPlatformSCRPaymentRelationDatum of the dataPlatformContractHeaderDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum to related.
func (o *DataPlatformContractHeaderDatum) SetBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRPaymentRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.Contract}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromParty, related.BillFromParty)
	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			BillFromPartyDataPlatformSCRPaymentRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = related
	}

	return nil
}

// RemoveBillFromPartyDataPlatformSCRPaymentRelationDatum relationship.
// Sets o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum to nil.
func (o *DataPlatformContractHeaderDatum) RemoveBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformSCRPaymentRelationDatum) error {
	var err error

	queries.SetScanner(&o.BillFromParty, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformContractHeaderDatum to the related item.
// Sets o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum to related.
func (o *DataPlatformContractHeaderDatum) SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"TransactionCurrency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.Contract}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TransactionCurrency, related.Currency)
	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			TransactionCurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	return nil
}

// RemoveTransactionCurrencyDataPlatformCurrencyCurrencyDatum relationship.
// Sets o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum to nil.
func (o *DataPlatformContractHeaderDatum) RemoveTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error

	queries.SetScanner(&o.TransactionCurrency, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("TransactionCurrency")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// AddContractDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_contract_header_datum, optionally inserting them as new records.
// Appends related to o.R.ContractDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformContractHeaderDatum) AddContractDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Contract, o.Contract)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Contract"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Contract, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Contract, o.Contract)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			ContractDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.ContractDataPlatformDeliveryDocumentHeaderData = append(o.R.ContractDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// SetContractDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_contract_header_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContractDataPlatformContractHeaderDatum's ContractDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.ContractDataPlatformDeliveryDocumentHeaderData with related.
func (o *DataPlatformContractHeaderDatum) SetContractDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `Contract` = null where `Contract` = ?"
	values := []interface{}{o.Contract}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ContractDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddContractDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveContractDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.ContractDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformContractHeaderDatum) RemoveContractDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Contract, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Contract")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ContractDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ContractDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.ContractDataPlatformDeliveryDocumentHeaderData[i] = o.R.ContractDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.ContractDataPlatformDeliveryDocumentHeaderData = o.R.ContractDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddContractDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_contract_header_datum, optionally inserting them as new records.
// Appends related to o.R.ContractDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformContractHeaderDatum) AddContractDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Contract, o.Contract)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Contract"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Contract, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Contract, o.Contract)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			ContractDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.ContractDataPlatformDeliveryDocumentItemData = append(o.R.ContractDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetContractDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_contract_header_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContractDataPlatformContractHeaderDatum's ContractDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.ContractDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformContractHeaderDatum) SetContractDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `Contract` = null where `Contract` = ?"
	values := []interface{}{o.Contract}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ContractDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddContractDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveContractDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.ContractDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformContractHeaderDatum) RemoveContractDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Contract, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Contract")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ContractDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ContractDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.ContractDataPlatformDeliveryDocumentItemData[i] = o.R.ContractDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.ContractDataPlatformDeliveryDocumentItemData = o.R.ContractDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddContractDataPlatformOrdersHeaderData adds the given related objects to the existing relationships
// of the data_platform_contract_header_datum, optionally inserting them as new records.
// Appends related to o.R.ContractDataPlatformOrdersHeaderData.
func (o *DataPlatformContractHeaderDatum) AddContractDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Contract, o.Contract)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Contract"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Contract, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Contract, o.Contract)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			ContractDataPlatformOrdersHeaderData: related,
		}
	} else {
		o.R.ContractDataPlatformOrdersHeaderData = append(o.R.ContractDataPlatformOrdersHeaderData, related...)
	}

	return nil
}

// SetContractDataPlatformOrdersHeaderData removes all previously related items of the
// data_platform_contract_header_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContractDataPlatformContractHeaderDatum's ContractDataPlatformOrdersHeaderData accordingly.
// Replaces o.R.ContractDataPlatformOrdersHeaderData with related.
func (o *DataPlatformContractHeaderDatum) SetContractDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	query := "update `data_platform_orders_header_data` set `Contract` = null where `Contract` = ?"
	values := []interface{}{o.Contract}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ContractDataPlatformOrdersHeaderData = nil
	}

	return o.AddContractDataPlatformOrdersHeaderData(ctx, exec, insert, related...)
}

// RemoveContractDataPlatformOrdersHeaderData relationships from objects passed in.
// Removes related items from R.ContractDataPlatformOrdersHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformContractHeaderDatum) RemoveContractDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Contract, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Contract")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ContractDataPlatformOrdersHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ContractDataPlatformOrdersHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.ContractDataPlatformOrdersHeaderData[i] = o.R.ContractDataPlatformOrdersHeaderData[ln-1]
			}
			o.R.ContractDataPlatformOrdersHeaderData = o.R.ContractDataPlatformOrdersHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddContractDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_contract_header_datum, optionally inserting them as new records.
// Appends related to o.R.ContractDataPlatformOrdersItemData.
func (o *DataPlatformContractHeaderDatum) AddContractDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Contract, o.Contract)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Contract"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Contract, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Contract, o.Contract)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			ContractDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.ContractDataPlatformOrdersItemData = append(o.R.ContractDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetContractDataPlatformOrdersItemData removes all previously related items of the
// data_platform_contract_header_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContractDataPlatformContractHeaderDatum's ContractDataPlatformOrdersItemData accordingly.
// Replaces o.R.ContractDataPlatformOrdersItemData with related.
func (o *DataPlatformContractHeaderDatum) SetContractDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `Contract` = null where `Contract` = ?"
	values := []interface{}{o.Contract}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ContractDataPlatformOrdersItemData = nil
	}

	return o.AddContractDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveContractDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.ContractDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformContractHeaderDatum) RemoveContractDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Contract, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Contract")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ContractDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ContractDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.ContractDataPlatformOrdersItemData[i] = o.R.ContractDataPlatformOrdersItemData[ln-1]
			}
			o.R.ContractDataPlatformOrdersItemData = o.R.ContractDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddContractDataPlatformQuotationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_contract_header_datum, optionally inserting them as new records.
// Appends related to o.R.ContractDataPlatformQuotationsHeaderData.
func (o *DataPlatformContractHeaderDatum) AddContractDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Contract, o.Contract)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Contract"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Contract, rel.Quotation}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Contract, o.Contract)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			ContractDataPlatformQuotationsHeaderData: related,
		}
	} else {
		o.R.ContractDataPlatformQuotationsHeaderData = append(o.R.ContractDataPlatformQuotationsHeaderData, related...)
	}

	return nil
}

// SetContractDataPlatformQuotationsHeaderData removes all previously related items of the
// data_platform_contract_header_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContractDataPlatformContractHeaderDatum's ContractDataPlatformQuotationsHeaderData accordingly.
// Replaces o.R.ContractDataPlatformQuotationsHeaderData with related.
func (o *DataPlatformContractHeaderDatum) SetContractDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderDatum) error {
	query := "update `data_platform_quotations_header_data` set `Contract` = null where `Contract` = ?"
	values := []interface{}{o.Contract}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ContractDataPlatformQuotationsHeaderData = nil
	}

	return o.AddContractDataPlatformQuotationsHeaderData(ctx, exec, insert, related...)
}

// RemoveContractDataPlatformQuotationsHeaderData relationships from objects passed in.
// Removes related items from R.ContractDataPlatformQuotationsHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformContractHeaderDatum) RemoveContractDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformQuotationsHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Contract, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Contract")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ContractDataPlatformQuotationsHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ContractDataPlatformQuotationsHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.ContractDataPlatformQuotationsHeaderData[i] = o.R.ContractDataPlatformQuotationsHeaderData[ln-1]
			}
			o.R.ContractDataPlatformQuotationsHeaderData = o.R.ContractDataPlatformQuotationsHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddContractDataPlatformQuotationsItemData adds the given related objects to the existing relationships
// of the data_platform_contract_header_datum, optionally inserting them as new records.
// Appends related to o.R.ContractDataPlatformQuotationsItemData.
func (o *DataPlatformContractHeaderDatum) AddContractDataPlatformQuotationsItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Contract, o.Contract)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Contract"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Contract, rel.Quotation, rel.QuotationItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Contract, o.Contract)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformContractHeaderDatumR{
			ContractDataPlatformQuotationsItemData: related,
		}
	} else {
		o.R.ContractDataPlatformQuotationsItemData = append(o.R.ContractDataPlatformQuotationsItemData, related...)
	}

	return nil
}

// SetContractDataPlatformQuotationsItemData removes all previously related items of the
// data_platform_contract_header_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContractDataPlatformContractHeaderDatum's ContractDataPlatformQuotationsItemData accordingly.
// Replaces o.R.ContractDataPlatformQuotationsItemData with related.
func (o *DataPlatformContractHeaderDatum) SetContractDataPlatformQuotationsItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsItemDatum) error {
	query := "update `data_platform_quotations_item_data` set `Contract` = null where `Contract` = ?"
	values := []interface{}{o.Contract}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ContractDataPlatformQuotationsItemData = nil
	}

	return o.AddContractDataPlatformQuotationsItemData(ctx, exec, insert, related...)
}

// RemoveContractDataPlatformQuotationsItemData relationships from objects passed in.
// Removes related items from R.ContractDataPlatformQuotationsItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformContractHeaderDatum) RemoveContractDataPlatformQuotationsItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformQuotationsItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Contract, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Contract")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ContractDataPlatformQuotationsItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ContractDataPlatformQuotationsItemData)
			if ln > 1 && i < ln-1 {
				o.R.ContractDataPlatformQuotationsItemData[i] = o.R.ContractDataPlatformQuotationsItemData[ln-1]
			}
			o.R.ContractDataPlatformQuotationsItemData = o.R.ContractDataPlatformQuotationsItemData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformContractHeaderData retrieves all the records using an executor.
func DataPlatformContractHeaderData(mods ...qm.QueryMod) dataPlatformContractHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_contract_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_contract_header_data`.*"})
	}

	return dataPlatformContractHeaderDatumQuery{q}
}

// FindDataPlatformContractHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformContractHeaderDatum(ctx context.Context, exec boil.ContextExecutor, contract int, selectCols ...string) (*DataPlatformContractHeaderDatum, error) {
	dataPlatformContractHeaderDatumObj := &DataPlatformContractHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_contract_header_data` where `Contract`=?", sel,
	)

	q := queries.Raw(query, contract)

	err := q.Bind(ctx, exec, dataPlatformContractHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_contract_header_data")
	}

	return dataPlatformContractHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformContractHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_contract_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformContractHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformContractHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformContractHeaderDatumInsertCache[key]
	dataPlatformContractHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformContractHeaderDatumAllColumns,
			dataPlatformContractHeaderDatumColumnsWithDefault,
			dataPlatformContractHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformContractHeaderDatumType, dataPlatformContractHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformContractHeaderDatumType, dataPlatformContractHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_contract_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_contract_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_contract_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_contract_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Contract,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_contract_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformContractHeaderDatumInsertCacheMut.Lock()
		dataPlatformContractHeaderDatumInsertCache[key] = cache
		dataPlatformContractHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformContractHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformContractHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformContractHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformContractHeaderDatumUpdateCache[key]
	dataPlatformContractHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformContractHeaderDatumAllColumns,
			dataPlatformContractHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_contract_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformContractHeaderDatumType, dataPlatformContractHeaderDatumMapping, append(wl, dataPlatformContractHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_contract_header_data row")
	}

	if !cached {
		dataPlatformContractHeaderDatumUpdateCacheMut.Lock()
		dataPlatformContractHeaderDatumUpdateCache[key] = cache
		dataPlatformContractHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformContractHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_contract_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformContractHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformContractHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformContractHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformContractHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformContractHeaderDatumUniqueColumns = []string{
	"Contract",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformContractHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_contract_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformContractHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformContractHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformContractHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformContractHeaderDatumUpsertCache[key]
	dataPlatformContractHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformContractHeaderDatumAllColumns,
			dataPlatformContractHeaderDatumColumnsWithDefault,
			dataPlatformContractHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformContractHeaderDatumAllColumns,
			dataPlatformContractHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_contract_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_contract_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_contract_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformContractHeaderDatumType, dataPlatformContractHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformContractHeaderDatumType, dataPlatformContractHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_contract_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformContractHeaderDatumType, dataPlatformContractHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_contract_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_contract_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformContractHeaderDatumUpsertCacheMut.Lock()
		dataPlatformContractHeaderDatumUpsertCache[key] = cache
		dataPlatformContractHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformContractHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformContractHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformContractHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformContractHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_contract_header_data` WHERE `Contract`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_contract_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformContractHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformContractHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_contract_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformContractHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformContractHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_contract_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformContractHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformContractHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformContractHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformContractHeaderDatum(ctx, exec, o.Contract)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformContractHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformContractHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformContractHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_contract_header_data`.* FROM `data_platform_contract_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformContractHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformContractHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformContractHeaderDatumExists checks if the DataPlatformContractHeaderDatum row exists.
func DataPlatformContractHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, contract int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_contract_header_data` where `Contract`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, contract)
	}
	row := exec.QueryRowContext(ctx, sql, contract)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_contract_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformContractHeaderDatum row exists.
func (o *DataPlatformContractHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformContractHeaderDatumExists(ctx, exec, o.Contract)
}
