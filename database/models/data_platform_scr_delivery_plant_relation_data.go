// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSCRDeliveryPlantRelationDatum is an object representing the database table.
type DataPlatformSCRDeliveryPlantRelationDatum struct {
	SupplyChainRelationshipID              int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID      int         `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID int         `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	Buyer                                  int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                 int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                         int         `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverFromParty                       int         `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverToPlant                         string      `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	DeliverFromPlant                       string      `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	DefaultRelation                        null.Bool   `boil:"DefaultRelation" json:"DefaultRelation,omitempty" toml:"DefaultRelation" yaml:"DefaultRelation,omitempty"`
	MRPType                                null.String `boil:"MRPType" json:"MRPType,omitempty" toml:"MRPType" yaml:"MRPType,omitempty"`
	MRPController                          null.String `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	CreationDate                           string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                         string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                    null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSCRDeliveryPlantRelationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSCRDeliveryPlantRelationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSCRDeliveryPlantRelationDatumColumns = struct {
	SupplyChainRelationshipID              string
	SupplyChainRelationshipDeliveryID      string
	SupplyChainRelationshipDeliveryPlantID string
	Buyer                                  string
	Seller                                 string
	DeliverToParty                         string
	DeliverFromParty                       string
	DeliverToPlant                         string
	DeliverFromPlant                       string
	DefaultRelation                        string
	MRPType                                string
	MRPController                          string
	CreationDate                           string
	LastChangeDate                         string
	IsMarkedForDeletion                    string
}{
	SupplyChainRelationshipID:              "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:      "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID: "SupplyChainRelationshipDeliveryPlantID",
	Buyer:                                  "Buyer",
	Seller:                                 "Seller",
	DeliverToParty:                         "DeliverToParty",
	DeliverFromParty:                       "DeliverFromParty",
	DeliverToPlant:                         "DeliverToPlant",
	DeliverFromPlant:                       "DeliverFromPlant",
	DefaultRelation:                        "DefaultRelation",
	MRPType:                                "MRPType",
	MRPController:                          "MRPController",
	CreationDate:                           "CreationDate",
	LastChangeDate:                         "LastChangeDate",
	IsMarkedForDeletion:                    "IsMarkedForDeletion",
}

var DataPlatformSCRDeliveryPlantRelationDatumTableColumns = struct {
	SupplyChainRelationshipID              string
	SupplyChainRelationshipDeliveryID      string
	SupplyChainRelationshipDeliveryPlantID string
	Buyer                                  string
	Seller                                 string
	DeliverToParty                         string
	DeliverFromParty                       string
	DeliverToPlant                         string
	DeliverFromPlant                       string
	DefaultRelation                        string
	MRPType                                string
	MRPController                          string
	CreationDate                           string
	LastChangeDate                         string
	IsMarkedForDeletion                    string
}{
	SupplyChainRelationshipID:              "data_platform_scr_delivery_plant_relation_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:      "data_platform_scr_delivery_plant_relation_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID: "data_platform_scr_delivery_plant_relation_data.SupplyChainRelationshipDeliveryPlantID",
	Buyer:                                  "data_platform_scr_delivery_plant_relation_data.Buyer",
	Seller:                                 "data_platform_scr_delivery_plant_relation_data.Seller",
	DeliverToParty:                         "data_platform_scr_delivery_plant_relation_data.DeliverToParty",
	DeliverFromParty:                       "data_platform_scr_delivery_plant_relation_data.DeliverFromParty",
	DeliverToPlant:                         "data_platform_scr_delivery_plant_relation_data.DeliverToPlant",
	DeliverFromPlant:                       "data_platform_scr_delivery_plant_relation_data.DeliverFromPlant",
	DefaultRelation:                        "data_platform_scr_delivery_plant_relation_data.DefaultRelation",
	MRPType:                                "data_platform_scr_delivery_plant_relation_data.MRPType",
	MRPController:                          "data_platform_scr_delivery_plant_relation_data.MRPController",
	CreationDate:                           "data_platform_scr_delivery_plant_relation_data.CreationDate",
	LastChangeDate:                         "data_platform_scr_delivery_plant_relation_data.LastChangeDate",
	IsMarkedForDeletion:                    "data_platform_scr_delivery_plant_relation_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSCRDeliveryPlantRelationDatumWhere = struct {
	SupplyChainRelationshipID              whereHelperint
	SupplyChainRelationshipDeliveryID      whereHelperint
	SupplyChainRelationshipDeliveryPlantID whereHelperint
	Buyer                                  whereHelperint
	Seller                                 whereHelperint
	DeliverToParty                         whereHelperint
	DeliverFromParty                       whereHelperint
	DeliverToPlant                         whereHelperstring
	DeliverFromPlant                       whereHelperstring
	DefaultRelation                        whereHelpernull_Bool
	MRPType                                whereHelpernull_String
	MRPController                          whereHelpernull_String
	CreationDate                           whereHelperstring
	LastChangeDate                         whereHelperstring
	IsMarkedForDeletion                    whereHelpernull_Bool
}{
	SupplyChainRelationshipID:              whereHelperint{field: "`data_platform_scr_delivery_plant_relation_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:      whereHelperint{field: "`data_platform_scr_delivery_plant_relation_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID: whereHelperint{field: "`data_platform_scr_delivery_plant_relation_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	Buyer:                                  whereHelperint{field: "`data_platform_scr_delivery_plant_relation_data`.`Buyer`"},
	Seller:                                 whereHelperint{field: "`data_platform_scr_delivery_plant_relation_data`.`Seller`"},
	DeliverToParty:                         whereHelperint{field: "`data_platform_scr_delivery_plant_relation_data`.`DeliverToParty`"},
	DeliverFromParty:                       whereHelperint{field: "`data_platform_scr_delivery_plant_relation_data`.`DeliverFromParty`"},
	DeliverToPlant:                         whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_data`.`DeliverToPlant`"},
	DeliverFromPlant:                       whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_data`.`DeliverFromPlant`"},
	DefaultRelation:                        whereHelpernull_Bool{field: "`data_platform_scr_delivery_plant_relation_data`.`DefaultRelation`"},
	MRPType:                                whereHelpernull_String{field: "`data_platform_scr_delivery_plant_relation_data`.`MRPType`"},
	MRPController:                          whereHelpernull_String{field: "`data_platform_scr_delivery_plant_relation_data`.`MRPController`"},
	CreationDate:                           whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_data`.`CreationDate`"},
	LastChangeDate:                         whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                    whereHelpernull_Bool{field: "`data_platform_scr_delivery_plant_relation_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSCRDeliveryPlantRelationDatumRels is where relationship names are stored.
var DataPlatformSCRDeliveryPlantRelationDatumRels = struct {
	DeliverFromPartyDataPlatformPlantGeneralDatum string
	DeliverToPartyDataPlatformPlantGeneralDatum   string
	BuyerDataPlatformSCRDeliveryRelationDatum     string
	BuyerDataPlatformDeliveryDocumentHeaderData   string
	BuyerDataPlatformOrdersItemData               string
}{
	DeliverFromPartyDataPlatformPlantGeneralDatum: "DeliverFromPartyDataPlatformPlantGeneralDatum",
	DeliverToPartyDataPlatformPlantGeneralDatum:   "DeliverToPartyDataPlatformPlantGeneralDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:     "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformDeliveryDocumentHeaderData:   "BuyerDataPlatformDeliveryDocumentHeaderData",
	BuyerDataPlatformOrdersItemData:               "BuyerDataPlatformOrdersItemData",
}

// dataPlatformSCRDeliveryPlantRelationDatumR is where relationships are stored.
type dataPlatformSCRDeliveryPlantRelationDatumR struct {
	DeliverFromPartyDataPlatformPlantGeneralDatum *DataPlatformPlantGeneralDatum               `boil:"DeliverFromPartyDataPlatformPlantGeneralDatum" json:"DeliverFromPartyDataPlatformPlantGeneralDatum" toml:"DeliverFromPartyDataPlatformPlantGeneralDatum" yaml:"DeliverFromPartyDataPlatformPlantGeneralDatum"`
	DeliverToPartyDataPlatformPlantGeneralDatum   *DataPlatformPlantGeneralDatum               `boil:"DeliverToPartyDataPlatformPlantGeneralDatum" json:"DeliverToPartyDataPlatformPlantGeneralDatum" toml:"DeliverToPartyDataPlatformPlantGeneralDatum" yaml:"DeliverToPartyDataPlatformPlantGeneralDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum     *DataPlatformSCRDeliveryRelationDatum        `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformDeliveryDocumentHeaderData   DataPlatformDeliveryDocumentHeaderDatumSlice `boil:"BuyerDataPlatformDeliveryDocumentHeaderData" json:"BuyerDataPlatformDeliveryDocumentHeaderData" toml:"BuyerDataPlatformDeliveryDocumentHeaderData" yaml:"BuyerDataPlatformDeliveryDocumentHeaderData"`
	BuyerDataPlatformOrdersItemData               DataPlatformOrdersItemDatumSlice             `boil:"BuyerDataPlatformOrdersItemData" json:"BuyerDataPlatformOrdersItemData" toml:"BuyerDataPlatformOrdersItemData" yaml:"BuyerDataPlatformOrdersItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSCRDeliveryPlantRelationDatumR) NewStruct() *dataPlatformSCRDeliveryPlantRelationDatumR {
	return &dataPlatformSCRDeliveryPlantRelationDatumR{}
}

func (r *dataPlatformSCRDeliveryPlantRelationDatumR) GetDeliverFromPartyDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformPlantGeneralDatum
}

func (r *dataPlatformSCRDeliveryPlantRelationDatumR) GetDeliverToPartyDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformPlantGeneralDatum
}

func (r *dataPlatformSCRDeliveryPlantRelationDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformSCRDeliveryPlantRelationDatumR) GetBuyerDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformSCRDeliveryPlantRelationDatumR) GetBuyerDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOrdersItemData
}

// dataPlatformSCRDeliveryPlantRelationDatumL is where Load methods for each relationship are stored.
type dataPlatformSCRDeliveryPlantRelationDatumL struct{}

var (
	dataPlatformSCRDeliveryPlantRelationDatumAllColumns            = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "DefaultRelation", "MRPType", "MRPController", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRDeliveryPlantRelationDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "DefaultRelation", "MRPType", "MRPController", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRDeliveryPlantRelationDatumColumnsWithDefault    = []string{}
	dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant"}
	dataPlatformSCRDeliveryPlantRelationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSCRDeliveryPlantRelationDatumSlice is an alias for a slice of pointers to DataPlatformSCRDeliveryPlantRelationDatum.
	// This should almost always be used instead of []DataPlatformSCRDeliveryPlantRelationDatum.
	DataPlatformSCRDeliveryPlantRelationDatumSlice []*DataPlatformSCRDeliveryPlantRelationDatum

	dataPlatformSCRDeliveryPlantRelationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSCRDeliveryPlantRelationDatumType                 = reflect.TypeOf(&DataPlatformSCRDeliveryPlantRelationDatum{})
	dataPlatformSCRDeliveryPlantRelationDatumMapping              = queries.MakeStructMapping(dataPlatformSCRDeliveryPlantRelationDatumType)
	dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationDatumType, dataPlatformSCRDeliveryPlantRelationDatumMapping, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns)
	dataPlatformSCRDeliveryPlantRelationDatumInsertCacheMut       sync.RWMutex
	dataPlatformSCRDeliveryPlantRelationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSCRDeliveryPlantRelationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSCRDeliveryPlantRelationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSCRDeliveryPlantRelationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSCRDeliveryPlantRelationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSCRDeliveryPlantRelationDatum record from the query.
func (q dataPlatformSCRDeliveryPlantRelationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSCRDeliveryPlantRelationDatum, error) {
	o := &DataPlatformSCRDeliveryPlantRelationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_scr_delivery_plant_relation_data")
	}

	return o, nil
}

// All returns all DataPlatformSCRDeliveryPlantRelationDatum records from the query.
func (q dataPlatformSCRDeliveryPlantRelationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSCRDeliveryPlantRelationDatumSlice, error) {
	var o []*DataPlatformSCRDeliveryPlantRelationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSCRDeliveryPlantRelationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSCRDeliveryPlantRelationDatum records in the query.
func (q dataPlatformSCRDeliveryPlantRelationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_scr_delivery_plant_relation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSCRDeliveryPlantRelationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_scr_delivery_plant_relation_data exists")
	}

	return count > 0, nil
}

// DeliverFromPartyDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) DeliverFromPartyDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DeliverFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// DeliverToPartyDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) DeliverToPartyDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DeliverToParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) BuyerDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// BuyerDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via Buyer column.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) BuyerDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// LoadDeliverFromPartyDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRDeliveryPlantRelationDatumL) LoadDeliverFromPartyDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryPlantRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryPlantRelationDatum
	var object *DataPlatformSCRDeliveryPlantRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryPlantRelationDatum.(*DataPlatformSCRDeliveryPlantRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryPlantRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryPlantRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryPlantRelationDatum.(*[]*DataPlatformSCRDeliveryPlantRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryPlantRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryPlantRelationDatumR{}
		}
		args = append(args, object.DeliverFromParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryPlantRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliverFromParty {
					continue Outer
				}
			}

			args = append(args, obj.DeliverFromParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliverFromPartyDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliverFromParty == foreign.BusinessPartner {
				local.R.DeliverFromPartyDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRDeliveryPlantRelationDatumL) LoadDeliverToPartyDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryPlantRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryPlantRelationDatum
	var object *DataPlatformSCRDeliveryPlantRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryPlantRelationDatum.(*DataPlatformSCRDeliveryPlantRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryPlantRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryPlantRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryPlantRelationDatum.(*[]*DataPlatformSCRDeliveryPlantRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryPlantRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryPlantRelationDatumR{}
		}
		args = append(args, object.DeliverToParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryPlantRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliverToParty {
					continue Outer
				}
			}

			args = append(args, obj.DeliverToParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliverToPartyDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliverToParty == foreign.BusinessPartner {
				local.R.DeliverToPartyDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRDeliveryPlantRelationDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryPlantRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryPlantRelationDatum
	var object *DataPlatformSCRDeliveryPlantRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryPlantRelationDatum.(*DataPlatformSCRDeliveryPlantRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryPlantRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryPlantRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryPlantRelationDatum.(*[]*DataPlatformSCRDeliveryPlantRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryPlantRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryPlantRelationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryPlantRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryPlantRelationDatumL) LoadBuyerDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryPlantRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryPlantRelationDatum
	var object *DataPlatformSCRDeliveryPlantRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryPlantRelationDatum.(*DataPlatformSCRDeliveryPlantRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryPlantRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryPlantRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryPlantRelationDatum.(*[]*DataPlatformSCRDeliveryPlantRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryPlantRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryPlantRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryPlantRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformDeliveryDocumentHeaderData = append(local.R.BuyerDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRDeliveryPlantRelationDatumL) LoadBuyerDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryPlantRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryPlantRelationDatum
	var object *DataPlatformSCRDeliveryPlantRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryPlantRelationDatum.(*DataPlatformSCRDeliveryPlantRelationDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryPlantRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryPlantRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryPlantRelationDatum.(*[]*DataPlatformSCRDeliveryPlantRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryPlantRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryPlantRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryPlantRelationDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryPlantRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformOrdersItemData = append(local.R.BuyerDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// SetDeliverFromPartyDataPlatformPlantGeneralDatum of the dataPlatformSCRDeliveryPlantRelationDatum to the related item.
// Sets o.R.DeliverFromPartyDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) SetDeliverFromPartyDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_delivery_plant_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliverFromParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryPlantRelationDatumR{
			DeliverFromPartyDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// SetDeliverToPartyDataPlatformPlantGeneralDatum of the dataPlatformSCRDeliveryPlantRelationDatum to the related item.
// Sets o.R.DeliverToPartyDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) SetDeliverToPartyDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_delivery_plant_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliverToParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryPlantRelationDatumR{
			DeliverToPartyDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformSCRDeliveryPlantRelationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_delivery_plant_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryPlantRelationDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// AddBuyerDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_plant_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) AddBuyerDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryPlantRelationDatumR{
			BuyerDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformDeliveryDocumentHeaderData = append(o.R.BuyerDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// AddBuyerDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_scr_delivery_plant_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOrdersItemData.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) AddBuyerDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryPlantRelationDatumR{
			BuyerDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformOrdersItemData = append(o.R.BuyerDataPlatformOrdersItemData, related...)
	}

	return nil
}

// DataPlatformSCRDeliveryPlantRelationData retrieves all the records using an executor.
func DataPlatformSCRDeliveryPlantRelationData(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationDatumQuery {
	mods = append(mods, qm.From("`data_platform_scr_delivery_plant_relation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_scr_delivery_plant_relation_data`.*"})
	}

	return dataPlatformSCRDeliveryPlantRelationDatumQuery{q}
}

// FindDataPlatformSCRDeliveryPlantRelationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSCRDeliveryPlantRelationDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, supplyChainRelationshipDeliveryPlantID int, buyer int, seller int, deliverToParty int, deliverFromParty int, deliverToPlant string, deliverFromPlant string, selectCols ...string) (*DataPlatformSCRDeliveryPlantRelationDatum, error) {
	dataPlatformSCRDeliveryPlantRelationDatumObj := &DataPlatformSCRDeliveryPlantRelationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_scr_delivery_plant_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant)

	err := q.Bind(ctx, exec, dataPlatformSCRDeliveryPlantRelationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_scr_delivery_plant_relation_data")
	}

	return dataPlatformSCRDeliveryPlantRelationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_delivery_plant_relation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRDeliveryPlantRelationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSCRDeliveryPlantRelationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSCRDeliveryPlantRelationDatumInsertCache[key]
	dataPlatformSCRDeliveryPlantRelationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSCRDeliveryPlantRelationDatumAllColumns,
			dataPlatformSCRDeliveryPlantRelationDatumColumnsWithDefault,
			dataPlatformSCRDeliveryPlantRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationDatumType, dataPlatformSCRDeliveryPlantRelationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationDatumType, dataPlatformSCRDeliveryPlantRelationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_scr_delivery_plant_relation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_scr_delivery_plant_relation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_scr_delivery_plant_relation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_scr_delivery_plant_relation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipDeliveryID,
		o.SupplyChainRelationshipDeliveryPlantID,
		o.Buyer,
		o.Seller,
		o.DeliverToParty,
		o.DeliverFromParty,
		o.DeliverToPlant,
		o.DeliverFromPlant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_delivery_plant_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRDeliveryPlantRelationDatumInsertCacheMut.Lock()
		dataPlatformSCRDeliveryPlantRelationDatumInsertCache[key] = cache
		dataPlatformSCRDeliveryPlantRelationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSCRDeliveryPlantRelationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSCRDeliveryPlantRelationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSCRDeliveryPlantRelationDatumUpdateCache[key]
	dataPlatformSCRDeliveryPlantRelationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSCRDeliveryPlantRelationDatumAllColumns,
			dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_scr_delivery_plant_relation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_scr_delivery_plant_relation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationDatumType, dataPlatformSCRDeliveryPlantRelationDatumMapping, append(wl, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_scr_delivery_plant_relation_data row")
	}

	if !cached {
		dataPlatformSCRDeliveryPlantRelationDatumUpdateCacheMut.Lock()
		dataPlatformSCRDeliveryPlantRelationDatumUpdateCache[key] = cache
		dataPlatformSCRDeliveryPlantRelationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSCRDeliveryPlantRelationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_scr_delivery_plant_relation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSCRDeliveryPlantRelationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_scr_delivery_plant_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSCRDeliveryPlantRelationDatum slice")
	}

	return nil
}

var mySQLDataPlatformSCRDeliveryPlantRelationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_delivery_plant_relation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRDeliveryPlantRelationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSCRDeliveryPlantRelationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSCRDeliveryPlantRelationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSCRDeliveryPlantRelationDatumUpsertCache[key]
	dataPlatformSCRDeliveryPlantRelationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSCRDeliveryPlantRelationDatumAllColumns,
			dataPlatformSCRDeliveryPlantRelationDatumColumnsWithDefault,
			dataPlatformSCRDeliveryPlantRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSCRDeliveryPlantRelationDatumAllColumns,
			dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_scr_delivery_plant_relation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_scr_delivery_plant_relation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_scr_delivery_plant_relation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationDatumType, dataPlatformSCRDeliveryPlantRelationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationDatumType, dataPlatformSCRDeliveryPlantRelationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_scr_delivery_plant_relation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationDatumType, dataPlatformSCRDeliveryPlantRelationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_scr_delivery_plant_relation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_delivery_plant_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRDeliveryPlantRelationDatumUpsertCacheMut.Lock()
		dataPlatformSCRDeliveryPlantRelationDatumUpsertCache[key] = cache
		dataPlatformSCRDeliveryPlantRelationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSCRDeliveryPlantRelationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSCRDeliveryPlantRelationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_scr_delivery_plant_relation_data` WHERE `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_scr_delivery_plant_relation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSCRDeliveryPlantRelationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSCRDeliveryPlantRelationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_scr_delivery_plant_relation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSCRDeliveryPlantRelationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_scr_delivery_plant_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSCRDeliveryPlantRelationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSCRDeliveryPlantRelationDatum(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSCRDeliveryPlantRelationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSCRDeliveryPlantRelationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_scr_delivery_plant_relation_data`.* FROM `data_platform_scr_delivery_plant_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSCRDeliveryPlantRelationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSCRDeliveryPlantRelationDatumExists checks if the DataPlatformSCRDeliveryPlantRelationDatum row exists.
func DataPlatformSCRDeliveryPlantRelationDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, supplyChainRelationshipDeliveryPlantID int, buyer int, seller int, deliverToParty int, deliverFromParty int, deliverToPlant string, deliverFromPlant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_scr_delivery_plant_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_scr_delivery_plant_relation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSCRDeliveryPlantRelationDatum row exists.
func (o *DataPlatformSCRDeliveryPlantRelationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSCRDeliveryPlantRelationDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant)
}
