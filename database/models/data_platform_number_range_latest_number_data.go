// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformNumberRangeLatestNumberDatum is an object representing the database table.
type DataPlatformNumberRangeLatestNumberDatum struct {
	NumberRangeID            string   `boil:"NumberRangeID" json:"NumberRangeID" toml:"NumberRangeID" yaml:"NumberRangeID"`
	ServiceLabel             string   `boil:"ServiceLabel" json:"ServiceLabel" toml:"ServiceLabel" yaml:"ServiceLabel"`
	FieldNameWithNumberRange string   `boil:"FieldNameWithNumberRange" json:"FieldNameWithNumberRange" toml:"FieldNameWithNumberRange" yaml:"FieldNameWithNumberRange"`
	LatestNumber             null.Int `boil:"LatestNumber" json:"LatestNumber,omitempty" toml:"LatestNumber" yaml:"LatestNumber,omitempty"`

	R *dataPlatformNumberRangeLatestNumberDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformNumberRangeLatestNumberDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformNumberRangeLatestNumberDatumColumns = struct {
	NumberRangeID            string
	ServiceLabel             string
	FieldNameWithNumberRange string
	LatestNumber             string
}{
	NumberRangeID:            "NumberRangeID",
	ServiceLabel:             "ServiceLabel",
	FieldNameWithNumberRange: "FieldNameWithNumberRange",
	LatestNumber:             "LatestNumber",
}

var DataPlatformNumberRangeLatestNumberDatumTableColumns = struct {
	NumberRangeID            string
	ServiceLabel             string
	FieldNameWithNumberRange string
	LatestNumber             string
}{
	NumberRangeID:            "data_platform_number_range_latest_number_data.NumberRangeID",
	ServiceLabel:             "data_platform_number_range_latest_number_data.ServiceLabel",
	FieldNameWithNumberRange: "data_platform_number_range_latest_number_data.FieldNameWithNumberRange",
	LatestNumber:             "data_platform_number_range_latest_number_data.LatestNumber",
}

// Generated where

var DataPlatformNumberRangeLatestNumberDatumWhere = struct {
	NumberRangeID            whereHelperstring
	ServiceLabel             whereHelperstring
	FieldNameWithNumberRange whereHelperstring
	LatestNumber             whereHelpernull_Int
}{
	NumberRangeID:            whereHelperstring{field: "`data_platform_number_range_latest_number_data`.`NumberRangeID`"},
	ServiceLabel:             whereHelperstring{field: "`data_platform_number_range_latest_number_data`.`ServiceLabel`"},
	FieldNameWithNumberRange: whereHelperstring{field: "`data_platform_number_range_latest_number_data`.`FieldNameWithNumberRange`"},
	LatestNumber:             whereHelpernull_Int{field: "`data_platform_number_range_latest_number_data`.`LatestNumber`"},
}

// DataPlatformNumberRangeLatestNumberDatumRels is where relationship names are stored.
var DataPlatformNumberRangeLatestNumberDatumRels = struct {
	FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum string
}{
	FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum: "FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum",
}

// dataPlatformNumberRangeLatestNumberDatumR is where relationships are stored.
type dataPlatformNumberRangeLatestNumberDatumR struct {
	FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum *DataPlatformNumberRangeNumberRangeDatum `boil:"FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum" json:"FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum" toml:"FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum" yaml:"FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformNumberRangeLatestNumberDatumR) NewStruct() *dataPlatformNumberRangeLatestNumberDatumR {
	return &dataPlatformNumberRangeLatestNumberDatumR{}
}

func (r *dataPlatformNumberRangeLatestNumberDatumR) GetFieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum() *DataPlatformNumberRangeNumberRangeDatum {
	if r == nil {
		return nil
	}
	return r.FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum
}

// dataPlatformNumberRangeLatestNumberDatumL is where Load methods for each relationship are stored.
type dataPlatformNumberRangeLatestNumberDatumL struct{}

var (
	dataPlatformNumberRangeLatestNumberDatumAllColumns            = []string{"NumberRangeID", "ServiceLabel", "FieldNameWithNumberRange", "LatestNumber"}
	dataPlatformNumberRangeLatestNumberDatumColumnsWithoutDefault = []string{"NumberRangeID", "ServiceLabel", "FieldNameWithNumberRange", "LatestNumber"}
	dataPlatformNumberRangeLatestNumberDatumColumnsWithDefault    = []string{}
	dataPlatformNumberRangeLatestNumberDatumPrimaryKeyColumns     = []string{"NumberRangeID", "ServiceLabel", "FieldNameWithNumberRange"}
	dataPlatformNumberRangeLatestNumberDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformNumberRangeLatestNumberDatumSlice is an alias for a slice of pointers to DataPlatformNumberRangeLatestNumberDatum.
	// This should almost always be used instead of []DataPlatformNumberRangeLatestNumberDatum.
	DataPlatformNumberRangeLatestNumberDatumSlice []*DataPlatformNumberRangeLatestNumberDatum
	// DataPlatformNumberRangeLatestNumberDatumHook is the signature for custom DataPlatformNumberRangeLatestNumberDatum hook methods
	DataPlatformNumberRangeLatestNumberDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformNumberRangeLatestNumberDatum) error

	dataPlatformNumberRangeLatestNumberDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformNumberRangeLatestNumberDatumType                 = reflect.TypeOf(&DataPlatformNumberRangeLatestNumberDatum{})
	dataPlatformNumberRangeLatestNumberDatumMapping              = queries.MakeStructMapping(dataPlatformNumberRangeLatestNumberDatumType)
	dataPlatformNumberRangeLatestNumberDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformNumberRangeLatestNumberDatumType, dataPlatformNumberRangeLatestNumberDatumMapping, dataPlatformNumberRangeLatestNumberDatumPrimaryKeyColumns)
	dataPlatformNumberRangeLatestNumberDatumInsertCacheMut       sync.RWMutex
	dataPlatformNumberRangeLatestNumberDatumInsertCache          = make(map[string]insertCache)
	dataPlatformNumberRangeLatestNumberDatumUpdateCacheMut       sync.RWMutex
	dataPlatformNumberRangeLatestNumberDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformNumberRangeLatestNumberDatumUpsertCacheMut       sync.RWMutex
	dataPlatformNumberRangeLatestNumberDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformNumberRangeLatestNumberDatumAfterSelectHooks []DataPlatformNumberRangeLatestNumberDatumHook

var dataPlatformNumberRangeLatestNumberDatumBeforeInsertHooks []DataPlatformNumberRangeLatestNumberDatumHook
var dataPlatformNumberRangeLatestNumberDatumAfterInsertHooks []DataPlatformNumberRangeLatestNumberDatumHook

var dataPlatformNumberRangeLatestNumberDatumBeforeUpdateHooks []DataPlatformNumberRangeLatestNumberDatumHook
var dataPlatformNumberRangeLatestNumberDatumAfterUpdateHooks []DataPlatformNumberRangeLatestNumberDatumHook

var dataPlatformNumberRangeLatestNumberDatumBeforeDeleteHooks []DataPlatformNumberRangeLatestNumberDatumHook
var dataPlatformNumberRangeLatestNumberDatumAfterDeleteHooks []DataPlatformNumberRangeLatestNumberDatumHook

var dataPlatformNumberRangeLatestNumberDatumBeforeUpsertHooks []DataPlatformNumberRangeLatestNumberDatumHook
var dataPlatformNumberRangeLatestNumberDatumAfterUpsertHooks []DataPlatformNumberRangeLatestNumberDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformNumberRangeLatestNumberDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeLatestNumberDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformNumberRangeLatestNumberDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeLatestNumberDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformNumberRangeLatestNumberDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeLatestNumberDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformNumberRangeLatestNumberDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeLatestNumberDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformNumberRangeLatestNumberDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeLatestNumberDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformNumberRangeLatestNumberDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeLatestNumberDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformNumberRangeLatestNumberDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeLatestNumberDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformNumberRangeLatestNumberDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeLatestNumberDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformNumberRangeLatestNumberDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformNumberRangeLatestNumberDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformNumberRangeLatestNumberDatumHook registers your hook function for all future operations.
func AddDataPlatformNumberRangeLatestNumberDatumHook(hookPoint boil.HookPoint, dataPlatformNumberRangeLatestNumberDatumHook DataPlatformNumberRangeLatestNumberDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformNumberRangeLatestNumberDatumAfterSelectHooks = append(dataPlatformNumberRangeLatestNumberDatumAfterSelectHooks, dataPlatformNumberRangeLatestNumberDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformNumberRangeLatestNumberDatumBeforeInsertHooks = append(dataPlatformNumberRangeLatestNumberDatumBeforeInsertHooks, dataPlatformNumberRangeLatestNumberDatumHook)
	case boil.AfterInsertHook:
		dataPlatformNumberRangeLatestNumberDatumAfterInsertHooks = append(dataPlatformNumberRangeLatestNumberDatumAfterInsertHooks, dataPlatformNumberRangeLatestNumberDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformNumberRangeLatestNumberDatumBeforeUpdateHooks = append(dataPlatformNumberRangeLatestNumberDatumBeforeUpdateHooks, dataPlatformNumberRangeLatestNumberDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformNumberRangeLatestNumberDatumAfterUpdateHooks = append(dataPlatformNumberRangeLatestNumberDatumAfterUpdateHooks, dataPlatformNumberRangeLatestNumberDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformNumberRangeLatestNumberDatumBeforeDeleteHooks = append(dataPlatformNumberRangeLatestNumberDatumBeforeDeleteHooks, dataPlatformNumberRangeLatestNumberDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformNumberRangeLatestNumberDatumAfterDeleteHooks = append(dataPlatformNumberRangeLatestNumberDatumAfterDeleteHooks, dataPlatformNumberRangeLatestNumberDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformNumberRangeLatestNumberDatumBeforeUpsertHooks = append(dataPlatformNumberRangeLatestNumberDatumBeforeUpsertHooks, dataPlatformNumberRangeLatestNumberDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformNumberRangeLatestNumberDatumAfterUpsertHooks = append(dataPlatformNumberRangeLatestNumberDatumAfterUpsertHooks, dataPlatformNumberRangeLatestNumberDatumHook)
	}
}

// One returns a single dataPlatformNumberRangeLatestNumberDatum record from the query.
func (q dataPlatformNumberRangeLatestNumberDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformNumberRangeLatestNumberDatum, error) {
	o := &DataPlatformNumberRangeLatestNumberDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_number_range_latest_number_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformNumberRangeLatestNumberDatum records from the query.
func (q dataPlatformNumberRangeLatestNumberDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformNumberRangeLatestNumberDatumSlice, error) {
	var o []*DataPlatformNumberRangeLatestNumberDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformNumberRangeLatestNumberDatum slice")
	}

	if len(dataPlatformNumberRangeLatestNumberDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformNumberRangeLatestNumberDatum records in the query.
func (q dataPlatformNumberRangeLatestNumberDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_number_range_latest_number_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformNumberRangeLatestNumberDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_number_range_latest_number_data exists")
	}

	return count > 0, nil
}

// FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum pointed to by the foreign key.
func (o *DataPlatformNumberRangeLatestNumberDatum) FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum(mods ...qm.QueryMod) dataPlatformNumberRangeNumberRangeDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`FieldNameWithNumberRange` = ?", o.FieldNameWithNumberRange),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformNumberRangeNumberRangeData(queryMods...)
}

// LoadFieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformNumberRangeLatestNumberDatumL) LoadFieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformNumberRangeLatestNumberDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformNumberRangeLatestNumberDatum
	var object *DataPlatformNumberRangeLatestNumberDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformNumberRangeLatestNumberDatum.(*DataPlatformNumberRangeLatestNumberDatum)
		if !ok {
			object = new(DataPlatformNumberRangeLatestNumberDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformNumberRangeLatestNumberDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformNumberRangeLatestNumberDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformNumberRangeLatestNumberDatum.(*[]*DataPlatformNumberRangeLatestNumberDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformNumberRangeLatestNumberDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformNumberRangeLatestNumberDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformNumberRangeLatestNumberDatumR{}
		}
		args = append(args, object.FieldNameWithNumberRange)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformNumberRangeLatestNumberDatumR{}
			}

			for _, a := range args {
				if a == obj.FieldNameWithNumberRange {
					continue Outer
				}
			}

			args = append(args, obj.FieldNameWithNumberRange)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_number_range_number_range_data`),
		qm.WhereIn(`data_platform_number_range_number_range_data.FieldNameWithNumberRange in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformNumberRangeNumberRangeDatum")
	}

	var resultSlice []*DataPlatformNumberRangeNumberRangeDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformNumberRangeNumberRangeDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_number_range_number_range_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_number_range_number_range_data")
	}

	if len(dataPlatformNumberRangeNumberRangeDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformNumberRangeNumberRangeDatumR{}
		}
		foreign.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData = append(foreign.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FieldNameWithNumberRange == foreign.FieldNameWithNumberRange {
				local.R.FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformNumberRangeNumberRangeDatumR{}
				}
				foreign.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData = append(foreign.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData, local)
				break
			}
		}
	}

	return nil
}

// SetFieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum of the dataPlatformNumberRangeLatestNumberDatum to the related item.
// Sets o.R.FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum to related.
// Adds o to related.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData.
func (o *DataPlatformNumberRangeLatestNumberDatum) SetFieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformNumberRangeNumberRangeDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_number_range_latest_number_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"FieldNameWithNumberRange"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformNumberRangeLatestNumberDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.FieldNameWithNumberRange, o.NumberRangeID, o.ServiceLabel, o.FieldNameWithNumberRange}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FieldNameWithNumberRange = related.FieldNameWithNumberRange
	if o.R == nil {
		o.R = &dataPlatformNumberRangeLatestNumberDatumR{
			FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum: related,
		}
	} else {
		o.R.FieldNameWithNumberRangeDataPlatformNumberRangeNumberRangeDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformNumberRangeNumberRangeDatumR{
			FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData: DataPlatformNumberRangeLatestNumberDatumSlice{o},
		}
	} else {
		related.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData = append(related.R.FieldNameWithNumberRangeDataPlatformNumberRangeLatestNumberData, o)
	}

	return nil
}

// DataPlatformNumberRangeLatestNumberData retrieves all the records using an executor.
func DataPlatformNumberRangeLatestNumberData(mods ...qm.QueryMod) dataPlatformNumberRangeLatestNumberDatumQuery {
	mods = append(mods, qm.From("`data_platform_number_range_latest_number_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_number_range_latest_number_data`.*"})
	}

	return dataPlatformNumberRangeLatestNumberDatumQuery{q}
}

// FindDataPlatformNumberRangeLatestNumberDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformNumberRangeLatestNumberDatum(ctx context.Context, exec boil.ContextExecutor, numberRangeID string, serviceLabel string, fieldNameWithNumberRange string, selectCols ...string) (*DataPlatformNumberRangeLatestNumberDatum, error) {
	dataPlatformNumberRangeLatestNumberDatumObj := &DataPlatformNumberRangeLatestNumberDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_number_range_latest_number_data` where `NumberRangeID`=? AND `ServiceLabel`=? AND `FieldNameWithNumberRange`=?", sel,
	)

	q := queries.Raw(query, numberRangeID, serviceLabel, fieldNameWithNumberRange)

	err := q.Bind(ctx, exec, dataPlatformNumberRangeLatestNumberDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_number_range_latest_number_data")
	}

	if err = dataPlatformNumberRangeLatestNumberDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformNumberRangeLatestNumberDatumObj, err
	}

	return dataPlatformNumberRangeLatestNumberDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformNumberRangeLatestNumberDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_number_range_latest_number_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformNumberRangeLatestNumberDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformNumberRangeLatestNumberDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformNumberRangeLatestNumberDatumInsertCache[key]
	dataPlatformNumberRangeLatestNumberDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformNumberRangeLatestNumberDatumAllColumns,
			dataPlatformNumberRangeLatestNumberDatumColumnsWithDefault,
			dataPlatformNumberRangeLatestNumberDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformNumberRangeLatestNumberDatumType, dataPlatformNumberRangeLatestNumberDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformNumberRangeLatestNumberDatumType, dataPlatformNumberRangeLatestNumberDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_number_range_latest_number_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_number_range_latest_number_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_number_range_latest_number_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformNumberRangeLatestNumberDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_number_range_latest_number_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.NumberRangeID,
		o.ServiceLabel,
		o.FieldNameWithNumberRange,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_number_range_latest_number_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformNumberRangeLatestNumberDatumInsertCacheMut.Lock()
		dataPlatformNumberRangeLatestNumberDatumInsertCache[key] = cache
		dataPlatformNumberRangeLatestNumberDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformNumberRangeLatestNumberDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformNumberRangeLatestNumberDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformNumberRangeLatestNumberDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformNumberRangeLatestNumberDatumUpdateCache[key]
	dataPlatformNumberRangeLatestNumberDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformNumberRangeLatestNumberDatumAllColumns,
			dataPlatformNumberRangeLatestNumberDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_number_range_latest_number_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_number_range_latest_number_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformNumberRangeLatestNumberDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformNumberRangeLatestNumberDatumType, dataPlatformNumberRangeLatestNumberDatumMapping, append(wl, dataPlatformNumberRangeLatestNumberDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_number_range_latest_number_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_number_range_latest_number_data")
	}

	if !cached {
		dataPlatformNumberRangeLatestNumberDatumUpdateCacheMut.Lock()
		dataPlatformNumberRangeLatestNumberDatumUpdateCache[key] = cache
		dataPlatformNumberRangeLatestNumberDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformNumberRangeLatestNumberDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_number_range_latest_number_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_number_range_latest_number_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformNumberRangeLatestNumberDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformNumberRangeLatestNumberDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_number_range_latest_number_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformNumberRangeLatestNumberDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformNumberRangeLatestNumberDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformNumberRangeLatestNumberDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformNumberRangeLatestNumberDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformNumberRangeLatestNumberDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_number_range_latest_number_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformNumberRangeLatestNumberDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformNumberRangeLatestNumberDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformNumberRangeLatestNumberDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformNumberRangeLatestNumberDatumUpsertCache[key]
	dataPlatformNumberRangeLatestNumberDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformNumberRangeLatestNumberDatumAllColumns,
			dataPlatformNumberRangeLatestNumberDatumColumnsWithDefault,
			dataPlatformNumberRangeLatestNumberDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformNumberRangeLatestNumberDatumAllColumns,
			dataPlatformNumberRangeLatestNumberDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_number_range_latest_number_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_number_range_latest_number_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_number_range_latest_number_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformNumberRangeLatestNumberDatumType, dataPlatformNumberRangeLatestNumberDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformNumberRangeLatestNumberDatumType, dataPlatformNumberRangeLatestNumberDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_number_range_latest_number_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformNumberRangeLatestNumberDatumType, dataPlatformNumberRangeLatestNumberDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_number_range_latest_number_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_number_range_latest_number_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformNumberRangeLatestNumberDatumUpsertCacheMut.Lock()
		dataPlatformNumberRangeLatestNumberDatumUpsertCache[key] = cache
		dataPlatformNumberRangeLatestNumberDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformNumberRangeLatestNumberDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformNumberRangeLatestNumberDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformNumberRangeLatestNumberDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformNumberRangeLatestNumberDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_number_range_latest_number_data` WHERE `NumberRangeID`=? AND `ServiceLabel`=? AND `FieldNameWithNumberRange`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_number_range_latest_number_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_number_range_latest_number_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformNumberRangeLatestNumberDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformNumberRangeLatestNumberDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_number_range_latest_number_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_number_range_latest_number_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformNumberRangeLatestNumberDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformNumberRangeLatestNumberDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformNumberRangeLatestNumberDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_number_range_latest_number_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformNumberRangeLatestNumberDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformNumberRangeLatestNumberDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_number_range_latest_number_data")
	}

	if len(dataPlatformNumberRangeLatestNumberDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformNumberRangeLatestNumberDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformNumberRangeLatestNumberDatum(ctx, exec, o.NumberRangeID, o.ServiceLabel, o.FieldNameWithNumberRange)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformNumberRangeLatestNumberDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformNumberRangeLatestNumberDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformNumberRangeLatestNumberDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_number_range_latest_number_data`.* FROM `data_platform_number_range_latest_number_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformNumberRangeLatestNumberDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformNumberRangeLatestNumberDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformNumberRangeLatestNumberDatumExists checks if the DataPlatformNumberRangeLatestNumberDatum row exists.
func DataPlatformNumberRangeLatestNumberDatumExists(ctx context.Context, exec boil.ContextExecutor, numberRangeID string, serviceLabel string, fieldNameWithNumberRange string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_number_range_latest_number_data` where `NumberRangeID`=? AND `ServiceLabel`=? AND `FieldNameWithNumberRange`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, numberRangeID, serviceLabel, fieldNameWithNumberRange)
	}
	row := exec.QueryRowContext(ctx, sql, numberRangeID, serviceLabel, fieldNameWithNumberRange)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_number_range_latest_number_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformNumberRangeLatestNumberDatum row exists.
func (o *DataPlatformNumberRangeLatestNumberDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformNumberRangeLatestNumberDatumExists(ctx, exec, o.NumberRangeID, o.ServiceLabel, o.FieldNameWithNumberRange)
}
