// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformUsageControlChainUsageControlChainDatum is an object representing the database table.
type DataPlatformUsageControlChainUsageControlChainDatum struct {
	UsageControlChain              string       `boil:"UsageControlChain" json:"UsageControlChain" toml:"UsageControlChain" yaml:"UsageControlChain"`
	UsageControlLess               null.Bool    `boil:"UsageControlLess" json:"UsageControlLess,omitempty" toml:"UsageControlLess" yaml:"UsageControlLess,omitempty"`
	Perpetual                      null.Bool    `boil:"Perpetual" json:"Perpetual,omitempty" toml:"Perpetual" yaml:"Perpetual,omitempty"`
	Rental                         null.Bool    `boil:"Rental" json:"Rental,omitempty" toml:"Rental" yaml:"Rental,omitempty"`
	Duration                       null.Float32 `boil:"Duration" json:"Duration,omitempty" toml:"Duration" yaml:"Duration,omitempty"`
	DurationUnit                   null.String  `boil:"DurationUnit" json:"DurationUnit,omitempty" toml:"DurationUnit" yaml:"DurationUnit,omitempty"`
	ValidityStartDate              null.String  `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityStartTime              null.String  `boil:"ValidityStartTime" json:"ValidityStartTime,omitempty" toml:"ValidityStartTime" yaml:"ValidityStartTime,omitempty"`
	ValidityEndDate                null.String  `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	ValidityEndTime                null.String  `boil:"ValidityEndTime" json:"ValidityEndTime,omitempty" toml:"ValidityEndTime" yaml:"ValidityEndTime,omitempty"`
	DeleteAfterValidityEnd         null.Bool    `boil:"DeleteAfterValidityEnd" json:"DeleteAfterValidityEnd,omitempty" toml:"DeleteAfterValidityEnd" yaml:"DeleteAfterValidityEnd,omitempty"`
	ServiceLabelRestriction        null.String  `boil:"ServiceLabelRestriction" json:"ServiceLabelRestriction,omitempty" toml:"ServiceLabelRestriction" yaml:"ServiceLabelRestriction,omitempty"`
	ApplicationRestriction         null.String  `boil:"ApplicationRestriction" json:"ApplicationRestriction,omitempty" toml:"ApplicationRestriction" yaml:"ApplicationRestriction,omitempty"`
	PurposeRestriction             null.String  `boil:"PurposeRestriction" json:"PurposeRestriction,omitempty" toml:"PurposeRestriction" yaml:"PurposeRestriction,omitempty"`
	BusinessPartnerRoleRestriction null.String  `boil:"BusinessPartnerRoleRestriction" json:"BusinessPartnerRoleRestriction,omitempty" toml:"BusinessPartnerRoleRestriction" yaml:"BusinessPartnerRoleRestriction,omitempty"`
	DataStateRestriction           null.String  `boil:"DataStateRestriction" json:"DataStateRestriction,omitempty" toml:"DataStateRestriction" yaml:"DataStateRestriction,omitempty"`
	NumberOfUsageRestriction       null.Int     `boil:"NumberOfUsageRestriction" json:"NumberOfUsageRestriction,omitempty" toml:"NumberOfUsageRestriction" yaml:"NumberOfUsageRestriction,omitempty"`
	NumberOfActualUsage            null.Int     `boil:"NumberOfActualUsage" json:"NumberOfActualUsage,omitempty" toml:"NumberOfActualUsage" yaml:"NumberOfActualUsage,omitempty"`
	IPAddressRestriction           null.String  `boil:"IPAddressRestriction" json:"IPAddressRestriction,omitempty" toml:"IPAddressRestriction" yaml:"IPAddressRestriction,omitempty"`
	MACAddressRestriction          null.String  `boil:"MACAddressRestriction" json:"MACAddressRestriction,omitempty" toml:"MACAddressRestriction" yaml:"MACAddressRestriction,omitempty"`
	ModifyIsAllowed                null.Bool    `boil:"ModifyIsAllowed" json:"ModifyIsAllowed,omitempty" toml:"ModifyIsAllowed" yaml:"ModifyIsAllowed,omitempty"`
	LocalLoggingIsAllowed          null.Bool    `boil:"LocalLoggingIsAllowed" json:"LocalLoggingIsAllowed,omitempty" toml:"LocalLoggingIsAllowed" yaml:"LocalLoggingIsAllowed,omitempty"`
	RemoteNotificationIsAllowed    null.String  `boil:"RemoteNotificationIsAllowed" json:"RemoteNotificationIsAllowed,omitempty" toml:"RemoteNotificationIsAllowed" yaml:"RemoteNotificationIsAllowed,omitempty"`
	DistributeOnlyIfEncrypted      null.Bool    `boil:"DistributeOnlyIfEncrypted" json:"DistributeOnlyIfEncrypted,omitempty" toml:"DistributeOnlyIfEncrypted" yaml:"DistributeOnlyIfEncrypted,omitempty"`
	AttachPolicyWhenDistribute     null.Bool    `boil:"AttachPolicyWhenDistribute" json:"AttachPolicyWhenDistribute,omitempty" toml:"AttachPolicyWhenDistribute" yaml:"AttachPolicyWhenDistribute,omitempty"`
	PostalCode                     null.String  `boil:"PostalCode" json:"PostalCode,omitempty" toml:"PostalCode" yaml:"PostalCode,omitempty"`
	LocalSubRegion                 null.String  `boil:"LocalSubRegion" json:"LocalSubRegion,omitempty" toml:"LocalSubRegion" yaml:"LocalSubRegion,omitempty"`
	LocalRegion                    null.String  `boil:"LocalRegion" json:"LocalRegion,omitempty" toml:"LocalRegion" yaml:"LocalRegion,omitempty"`
	Country                        null.String  `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	GlobalRegion                   null.String  `boil:"GlobalRegion" json:"GlobalRegion,omitempty" toml:"GlobalRegion" yaml:"GlobalRegion,omitempty"`
	TimeZone                       null.String  `boil:"TimeZone" json:"TimeZone,omitempty" toml:"TimeZone" yaml:"TimeZone,omitempty"`
	CreationDate                   string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                   string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                 string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                 string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsMarkedForDeletion            null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformUsageControlChainUsageControlChainDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformUsageControlChainUsageControlChainDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformUsageControlChainUsageControlChainDatumColumns = struct {
	UsageControlChain              string
	UsageControlLess               string
	Perpetual                      string
	Rental                         string
	Duration                       string
	DurationUnit                   string
	ValidityStartDate              string
	ValidityStartTime              string
	ValidityEndDate                string
	ValidityEndTime                string
	DeleteAfterValidityEnd         string
	ServiceLabelRestriction        string
	ApplicationRestriction         string
	PurposeRestriction             string
	BusinessPartnerRoleRestriction string
	DataStateRestriction           string
	NumberOfUsageRestriction       string
	NumberOfActualUsage            string
	IPAddressRestriction           string
	MACAddressRestriction          string
	ModifyIsAllowed                string
	LocalLoggingIsAllowed          string
	RemoteNotificationIsAllowed    string
	DistributeOnlyIfEncrypted      string
	AttachPolicyWhenDistribute     string
	PostalCode                     string
	LocalSubRegion                 string
	LocalRegion                    string
	Country                        string
	GlobalRegion                   string
	TimeZone                       string
	CreationDate                   string
	CreationTime                   string
	LastChangeDate                 string
	LastChangeTime                 string
	IsMarkedForDeletion            string
}{
	UsageControlChain:              "UsageControlChain",
	UsageControlLess:               "UsageControlLess",
	Perpetual:                      "Perpetual",
	Rental:                         "Rental",
	Duration:                       "Duration",
	DurationUnit:                   "DurationUnit",
	ValidityStartDate:              "ValidityStartDate",
	ValidityStartTime:              "ValidityStartTime",
	ValidityEndDate:                "ValidityEndDate",
	ValidityEndTime:                "ValidityEndTime",
	DeleteAfterValidityEnd:         "DeleteAfterValidityEnd",
	ServiceLabelRestriction:        "ServiceLabelRestriction",
	ApplicationRestriction:         "ApplicationRestriction",
	PurposeRestriction:             "PurposeRestriction",
	BusinessPartnerRoleRestriction: "BusinessPartnerRoleRestriction",
	DataStateRestriction:           "DataStateRestriction",
	NumberOfUsageRestriction:       "NumberOfUsageRestriction",
	NumberOfActualUsage:            "NumberOfActualUsage",
	IPAddressRestriction:           "IPAddressRestriction",
	MACAddressRestriction:          "MACAddressRestriction",
	ModifyIsAllowed:                "ModifyIsAllowed",
	LocalLoggingIsAllowed:          "LocalLoggingIsAllowed",
	RemoteNotificationIsAllowed:    "RemoteNotificationIsAllowed",
	DistributeOnlyIfEncrypted:      "DistributeOnlyIfEncrypted",
	AttachPolicyWhenDistribute:     "AttachPolicyWhenDistribute",
	PostalCode:                     "PostalCode",
	LocalSubRegion:                 "LocalSubRegion",
	LocalRegion:                    "LocalRegion",
	Country:                        "Country",
	GlobalRegion:                   "GlobalRegion",
	TimeZone:                       "TimeZone",
	CreationDate:                   "CreationDate",
	CreationTime:                   "CreationTime",
	LastChangeDate:                 "LastChangeDate",
	LastChangeTime:                 "LastChangeTime",
	IsMarkedForDeletion:            "IsMarkedForDeletion",
}

var DataPlatformUsageControlChainUsageControlChainDatumTableColumns = struct {
	UsageControlChain              string
	UsageControlLess               string
	Perpetual                      string
	Rental                         string
	Duration                       string
	DurationUnit                   string
	ValidityStartDate              string
	ValidityStartTime              string
	ValidityEndDate                string
	ValidityEndTime                string
	DeleteAfterValidityEnd         string
	ServiceLabelRestriction        string
	ApplicationRestriction         string
	PurposeRestriction             string
	BusinessPartnerRoleRestriction string
	DataStateRestriction           string
	NumberOfUsageRestriction       string
	NumberOfActualUsage            string
	IPAddressRestriction           string
	MACAddressRestriction          string
	ModifyIsAllowed                string
	LocalLoggingIsAllowed          string
	RemoteNotificationIsAllowed    string
	DistributeOnlyIfEncrypted      string
	AttachPolicyWhenDistribute     string
	PostalCode                     string
	LocalSubRegion                 string
	LocalRegion                    string
	Country                        string
	GlobalRegion                   string
	TimeZone                       string
	CreationDate                   string
	CreationTime                   string
	LastChangeDate                 string
	LastChangeTime                 string
	IsMarkedForDeletion            string
}{
	UsageControlChain:              "data_platform_usage_control_chain_usage_control_chain_data.UsageControlChain",
	UsageControlLess:               "data_platform_usage_control_chain_usage_control_chain_data.UsageControlLess",
	Perpetual:                      "data_platform_usage_control_chain_usage_control_chain_data.Perpetual",
	Rental:                         "data_platform_usage_control_chain_usage_control_chain_data.Rental",
	Duration:                       "data_platform_usage_control_chain_usage_control_chain_data.Duration",
	DurationUnit:                   "data_platform_usage_control_chain_usage_control_chain_data.DurationUnit",
	ValidityStartDate:              "data_platform_usage_control_chain_usage_control_chain_data.ValidityStartDate",
	ValidityStartTime:              "data_platform_usage_control_chain_usage_control_chain_data.ValidityStartTime",
	ValidityEndDate:                "data_platform_usage_control_chain_usage_control_chain_data.ValidityEndDate",
	ValidityEndTime:                "data_platform_usage_control_chain_usage_control_chain_data.ValidityEndTime",
	DeleteAfterValidityEnd:         "data_platform_usage_control_chain_usage_control_chain_data.DeleteAfterValidityEnd",
	ServiceLabelRestriction:        "data_platform_usage_control_chain_usage_control_chain_data.ServiceLabelRestriction",
	ApplicationRestriction:         "data_platform_usage_control_chain_usage_control_chain_data.ApplicationRestriction",
	PurposeRestriction:             "data_platform_usage_control_chain_usage_control_chain_data.PurposeRestriction",
	BusinessPartnerRoleRestriction: "data_platform_usage_control_chain_usage_control_chain_data.BusinessPartnerRoleRestriction",
	DataStateRestriction:           "data_platform_usage_control_chain_usage_control_chain_data.DataStateRestriction",
	NumberOfUsageRestriction:       "data_platform_usage_control_chain_usage_control_chain_data.NumberOfUsageRestriction",
	NumberOfActualUsage:            "data_platform_usage_control_chain_usage_control_chain_data.NumberOfActualUsage",
	IPAddressRestriction:           "data_platform_usage_control_chain_usage_control_chain_data.IPAddressRestriction",
	MACAddressRestriction:          "data_platform_usage_control_chain_usage_control_chain_data.MACAddressRestriction",
	ModifyIsAllowed:                "data_platform_usage_control_chain_usage_control_chain_data.ModifyIsAllowed",
	LocalLoggingIsAllowed:          "data_platform_usage_control_chain_usage_control_chain_data.LocalLoggingIsAllowed",
	RemoteNotificationIsAllowed:    "data_platform_usage_control_chain_usage_control_chain_data.RemoteNotificationIsAllowed",
	DistributeOnlyIfEncrypted:      "data_platform_usage_control_chain_usage_control_chain_data.DistributeOnlyIfEncrypted",
	AttachPolicyWhenDistribute:     "data_platform_usage_control_chain_usage_control_chain_data.AttachPolicyWhenDistribute",
	PostalCode:                     "data_platform_usage_control_chain_usage_control_chain_data.PostalCode",
	LocalSubRegion:                 "data_platform_usage_control_chain_usage_control_chain_data.LocalSubRegion",
	LocalRegion:                    "data_platform_usage_control_chain_usage_control_chain_data.LocalRegion",
	Country:                        "data_platform_usage_control_chain_usage_control_chain_data.Country",
	GlobalRegion:                   "data_platform_usage_control_chain_usage_control_chain_data.GlobalRegion",
	TimeZone:                       "data_platform_usage_control_chain_usage_control_chain_data.TimeZone",
	CreationDate:                   "data_platform_usage_control_chain_usage_control_chain_data.CreationDate",
	CreationTime:                   "data_platform_usage_control_chain_usage_control_chain_data.CreationTime",
	LastChangeDate:                 "data_platform_usage_control_chain_usage_control_chain_data.LastChangeDate",
	LastChangeTime:                 "data_platform_usage_control_chain_usage_control_chain_data.LastChangeTime",
	IsMarkedForDeletion:            "data_platform_usage_control_chain_usage_control_chain_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformUsageControlChainUsageControlChainDatumWhere = struct {
	UsageControlChain              whereHelperstring
	UsageControlLess               whereHelpernull_Bool
	Perpetual                      whereHelpernull_Bool
	Rental                         whereHelpernull_Bool
	Duration                       whereHelpernull_Float32
	DurationUnit                   whereHelpernull_String
	ValidityStartDate              whereHelpernull_String
	ValidityStartTime              whereHelpernull_String
	ValidityEndDate                whereHelpernull_String
	ValidityEndTime                whereHelpernull_String
	DeleteAfterValidityEnd         whereHelpernull_Bool
	ServiceLabelRestriction        whereHelpernull_String
	ApplicationRestriction         whereHelpernull_String
	PurposeRestriction             whereHelpernull_String
	BusinessPartnerRoleRestriction whereHelpernull_String
	DataStateRestriction           whereHelpernull_String
	NumberOfUsageRestriction       whereHelpernull_Int
	NumberOfActualUsage            whereHelpernull_Int
	IPAddressRestriction           whereHelpernull_String
	MACAddressRestriction          whereHelpernull_String
	ModifyIsAllowed                whereHelpernull_Bool
	LocalLoggingIsAllowed          whereHelpernull_Bool
	RemoteNotificationIsAllowed    whereHelpernull_String
	DistributeOnlyIfEncrypted      whereHelpernull_Bool
	AttachPolicyWhenDistribute     whereHelpernull_Bool
	PostalCode                     whereHelpernull_String
	LocalSubRegion                 whereHelpernull_String
	LocalRegion                    whereHelpernull_String
	Country                        whereHelpernull_String
	GlobalRegion                   whereHelpernull_String
	TimeZone                       whereHelpernull_String
	CreationDate                   whereHelperstring
	CreationTime                   whereHelperstring
	LastChangeDate                 whereHelperstring
	LastChangeTime                 whereHelperstring
	IsMarkedForDeletion            whereHelpernull_Bool
}{
	UsageControlChain:              whereHelperstring{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`UsageControlChain`"},
	UsageControlLess:               whereHelpernull_Bool{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`UsageControlLess`"},
	Perpetual:                      whereHelpernull_Bool{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`Perpetual`"},
	Rental:                         whereHelpernull_Bool{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`Rental`"},
	Duration:                       whereHelpernull_Float32{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`Duration`"},
	DurationUnit:                   whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`DurationUnit`"},
	ValidityStartDate:              whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`ValidityStartDate`"},
	ValidityStartTime:              whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`ValidityStartTime`"},
	ValidityEndDate:                whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`ValidityEndDate`"},
	ValidityEndTime:                whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`ValidityEndTime`"},
	DeleteAfterValidityEnd:         whereHelpernull_Bool{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`DeleteAfterValidityEnd`"},
	ServiceLabelRestriction:        whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`ServiceLabelRestriction`"},
	ApplicationRestriction:         whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`ApplicationRestriction`"},
	PurposeRestriction:             whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`PurposeRestriction`"},
	BusinessPartnerRoleRestriction: whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`BusinessPartnerRoleRestriction`"},
	DataStateRestriction:           whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`DataStateRestriction`"},
	NumberOfUsageRestriction:       whereHelpernull_Int{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`NumberOfUsageRestriction`"},
	NumberOfActualUsage:            whereHelpernull_Int{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`NumberOfActualUsage`"},
	IPAddressRestriction:           whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`IPAddressRestriction`"},
	MACAddressRestriction:          whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`MACAddressRestriction`"},
	ModifyIsAllowed:                whereHelpernull_Bool{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`ModifyIsAllowed`"},
	LocalLoggingIsAllowed:          whereHelpernull_Bool{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`LocalLoggingIsAllowed`"},
	RemoteNotificationIsAllowed:    whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`RemoteNotificationIsAllowed`"},
	DistributeOnlyIfEncrypted:      whereHelpernull_Bool{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`DistributeOnlyIfEncrypted`"},
	AttachPolicyWhenDistribute:     whereHelpernull_Bool{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`AttachPolicyWhenDistribute`"},
	PostalCode:                     whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`PostalCode`"},
	LocalSubRegion:                 whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`LocalSubRegion`"},
	LocalRegion:                    whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`LocalRegion`"},
	Country:                        whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`Country`"},
	GlobalRegion:                   whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`GlobalRegion`"},
	TimeZone:                       whereHelpernull_String{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`TimeZone`"},
	CreationDate:                   whereHelperstring{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`CreationDate`"},
	CreationTime:                   whereHelperstring{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`CreationTime`"},
	LastChangeDate:                 whereHelperstring{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`LastChangeDate`"},
	LastChangeTime:                 whereHelperstring{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`LastChangeTime`"},
	IsMarkedForDeletion:            whereHelpernull_Bool{field: "`data_platform_usage_control_chain_usage_control_chain_data`.`IsMarkedForDeletion`"},
}

// DataPlatformUsageControlChainUsageControlChainDatumRels is where relationship names are stored.
var DataPlatformUsageControlChainUsageControlChainDatumRels = struct {
	DurationUnitDataPlatformQuantityUnitQuantityUnitDatum string
	CountryDataPlatformPostalCodePostalCodeDatum          string
}{
	DurationUnitDataPlatformQuantityUnitQuantityUnitDatum: "DurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	CountryDataPlatformPostalCodePostalCodeDatum:          "CountryDataPlatformPostalCodePostalCodeDatum",
}

// dataPlatformUsageControlChainUsageControlChainDatumR is where relationships are stored.
type dataPlatformUsageControlChainUsageControlChainDatumR struct {
	DurationUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum `boil:"DurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"DurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"DurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"DurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	CountryDataPlatformPostalCodePostalCodeDatum          *DataPlatformPostalCodePostalCodeDatum     `boil:"CountryDataPlatformPostalCodePostalCodeDatum" json:"CountryDataPlatformPostalCodePostalCodeDatum" toml:"CountryDataPlatformPostalCodePostalCodeDatum" yaml:"CountryDataPlatformPostalCodePostalCodeDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformUsageControlChainUsageControlChainDatumR) NewStruct() *dataPlatformUsageControlChainUsageControlChainDatumR {
	return &dataPlatformUsageControlChainUsageControlChainDatumR{}
}

func (r *dataPlatformUsageControlChainUsageControlChainDatumR) GetDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.DurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformUsageControlChainUsageControlChainDatumR) GetCountryDataPlatformPostalCodePostalCodeDatum() *DataPlatformPostalCodePostalCodeDatum {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformPostalCodePostalCodeDatum
}

// dataPlatformUsageControlChainUsageControlChainDatumL is where Load methods for each relationship are stored.
type dataPlatformUsageControlChainUsageControlChainDatumL struct{}

var (
	dataPlatformUsageControlChainUsageControlChainDatumAllColumns            = []string{"UsageControlChain", "UsageControlLess", "Perpetual", "Rental", "Duration", "DurationUnit", "ValidityStartDate", "ValidityStartTime", "ValidityEndDate", "ValidityEndTime", "DeleteAfterValidityEnd", "ServiceLabelRestriction", "ApplicationRestriction", "PurposeRestriction", "BusinessPartnerRoleRestriction", "DataStateRestriction", "NumberOfUsageRestriction", "NumberOfActualUsage", "IPAddressRestriction", "MACAddressRestriction", "ModifyIsAllowed", "LocalLoggingIsAllowed", "RemoteNotificationIsAllowed", "DistributeOnlyIfEncrypted", "AttachPolicyWhenDistribute", "PostalCode", "LocalSubRegion", "LocalRegion", "Country", "GlobalRegion", "TimeZone", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformUsageControlChainUsageControlChainDatumColumnsWithoutDefault = []string{"UsageControlChain", "UsageControlLess", "Perpetual", "Rental", "Duration", "DurationUnit", "ValidityStartDate", "ValidityStartTime", "ValidityEndDate", "ValidityEndTime", "DeleteAfterValidityEnd", "ServiceLabelRestriction", "ApplicationRestriction", "PurposeRestriction", "BusinessPartnerRoleRestriction", "DataStateRestriction", "NumberOfUsageRestriction", "NumberOfActualUsage", "IPAddressRestriction", "MACAddressRestriction", "ModifyIsAllowed", "LocalLoggingIsAllowed", "RemoteNotificationIsAllowed", "DistributeOnlyIfEncrypted", "AttachPolicyWhenDistribute", "PostalCode", "LocalSubRegion", "LocalRegion", "Country", "GlobalRegion", "TimeZone", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformUsageControlChainUsageControlChainDatumColumnsWithDefault    = []string{}
	dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns     = []string{"UsageControlChain"}
	dataPlatformUsageControlChainUsageControlChainDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformUsageControlChainUsageControlChainDatumSlice is an alias for a slice of pointers to DataPlatformUsageControlChainUsageControlChainDatum.
	// This should almost always be used instead of []DataPlatformUsageControlChainUsageControlChainDatum.
	DataPlatformUsageControlChainUsageControlChainDatumSlice []*DataPlatformUsageControlChainUsageControlChainDatum

	dataPlatformUsageControlChainUsageControlChainDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformUsageControlChainUsageControlChainDatumType                 = reflect.TypeOf(&DataPlatformUsageControlChainUsageControlChainDatum{})
	dataPlatformUsageControlChainUsageControlChainDatumMapping              = queries.MakeStructMapping(dataPlatformUsageControlChainUsageControlChainDatumType)
	dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformUsageControlChainUsageControlChainDatumType, dataPlatformUsageControlChainUsageControlChainDatumMapping, dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns)
	dataPlatformUsageControlChainUsageControlChainDatumInsertCacheMut       sync.RWMutex
	dataPlatformUsageControlChainUsageControlChainDatumInsertCache          = make(map[string]insertCache)
	dataPlatformUsageControlChainUsageControlChainDatumUpdateCacheMut       sync.RWMutex
	dataPlatformUsageControlChainUsageControlChainDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformUsageControlChainUsageControlChainDatumUpsertCacheMut       sync.RWMutex
	dataPlatformUsageControlChainUsageControlChainDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformUsageControlChainUsageControlChainDatum record from the query.
func (q dataPlatformUsageControlChainUsageControlChainDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformUsageControlChainUsageControlChainDatum, error) {
	o := &DataPlatformUsageControlChainUsageControlChainDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_usage_control_chain_usage_control_chain_data")
	}

	return o, nil
}

// All returns all DataPlatformUsageControlChainUsageControlChainDatum records from the query.
func (q dataPlatformUsageControlChainUsageControlChainDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformUsageControlChainUsageControlChainDatumSlice, error) {
	var o []*DataPlatformUsageControlChainUsageControlChainDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformUsageControlChainUsageControlChainDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformUsageControlChainUsageControlChainDatum records in the query.
func (q dataPlatformUsageControlChainUsageControlChainDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_usage_control_chain_usage_control_chain_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformUsageControlChainUsageControlChainDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_usage_control_chain_usage_control_chain_data exists")
	}

	return count > 0, nil
}

// DurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformUsageControlChainUsageControlChainDatum) DurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.DurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// CountryDataPlatformPostalCodePostalCodeDatum pointed to by the foreign key.
func (o *DataPlatformUsageControlChainUsageControlChainDatum) CountryDataPlatformPostalCodePostalCodeDatum(mods ...qm.QueryMod) dataPlatformPostalCodePostalCodeDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.Country),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPostalCodePostalCodeData(queryMods...)
}

// LoadDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformUsageControlChainUsageControlChainDatumL) LoadDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformUsageControlChainUsageControlChainDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformUsageControlChainUsageControlChainDatum
	var object *DataPlatformUsageControlChainUsageControlChainDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformUsageControlChainUsageControlChainDatum.(*DataPlatformUsageControlChainUsageControlChainDatum)
		if !ok {
			object = new(DataPlatformUsageControlChainUsageControlChainDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformUsageControlChainUsageControlChainDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformUsageControlChainUsageControlChainDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformUsageControlChainUsageControlChainDatum.(*[]*DataPlatformUsageControlChainUsageControlChainDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformUsageControlChainUsageControlChainDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformUsageControlChainUsageControlChainDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformUsageControlChainUsageControlChainDatumR{}
		}
		if !queries.IsNil(object.DurationUnit) {
			args = append(args, object.DurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformUsageControlChainUsageControlChainDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DurationUnit) {
				args = append(args, obj.DurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DurationUnit, foreign.QuantityUnit) {
				local.R.DurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformPostalCodePostalCodeDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformUsageControlChainUsageControlChainDatumL) LoadCountryDataPlatformPostalCodePostalCodeDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformUsageControlChainUsageControlChainDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformUsageControlChainUsageControlChainDatum
	var object *DataPlatformUsageControlChainUsageControlChainDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformUsageControlChainUsageControlChainDatum.(*DataPlatformUsageControlChainUsageControlChainDatum)
		if !ok {
			object = new(DataPlatformUsageControlChainUsageControlChainDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformUsageControlChainUsageControlChainDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformUsageControlChainUsageControlChainDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformUsageControlChainUsageControlChainDatum.(*[]*DataPlatformUsageControlChainUsageControlChainDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformUsageControlChainUsageControlChainDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformUsageControlChainUsageControlChainDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformUsageControlChainUsageControlChainDatumR{}
		}
		if !queries.IsNil(object.Country) {
			args = append(args, object.Country)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformUsageControlChainUsageControlChainDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Country) {
				args = append(args, obj.Country)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_postal_code_postal_code_data`),
		qm.WhereIn(`data_platform_postal_code_postal_code_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPostalCodePostalCodeDatum")
	}

	var resultSlice []*DataPlatformPostalCodePostalCodeDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPostalCodePostalCodeDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_postal_code_postal_code_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_postal_code_postal_code_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryDataPlatformPostalCodePostalCodeDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Country, foreign.Country) {
				local.R.CountryDataPlatformPostalCodePostalCodeDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformUsageControlChainUsageControlChainDatum to the related item.
// Sets o.R.DurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformUsageControlChainUsageControlChainDatum) SetDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_usage_control_chain_usage_control_chain_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.UsageControlChain}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformUsageControlChainUsageControlChainDatumR{
			DurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.DurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.DurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformUsageControlChainUsageControlChainDatum) RemoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.DurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("DurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetCountryDataPlatformPostalCodePostalCodeDatum of the dataPlatformUsageControlChainUsageControlChainDatum to the related item.
// Sets o.R.CountryDataPlatformPostalCodePostalCodeDatum to related.
func (o *DataPlatformUsageControlChainUsageControlChainDatum) SetCountryDataPlatformPostalCodePostalCodeDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPostalCodePostalCodeDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_usage_control_chain_usage_control_chain_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.UsageControlChain}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Country, related.Country)
	if o.R == nil {
		o.R = &dataPlatformUsageControlChainUsageControlChainDatumR{
			CountryDataPlatformPostalCodePostalCodeDatum: related,
		}
	} else {
		o.R.CountryDataPlatformPostalCodePostalCodeDatum = related
	}

	return nil
}

// RemoveCountryDataPlatformPostalCodePostalCodeDatum relationship.
// Sets o.R.CountryDataPlatformPostalCodePostalCodeDatum to nil.
func (o *DataPlatformUsageControlChainUsageControlChainDatum) RemoveCountryDataPlatformPostalCodePostalCodeDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPostalCodePostalCodeDatum) error {
	var err error

	queries.SetScanner(&o.Country, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Country")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CountryDataPlatformPostalCodePostalCodeDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// DataPlatformUsageControlChainUsageControlChainData retrieves all the records using an executor.
func DataPlatformUsageControlChainUsageControlChainData(mods ...qm.QueryMod) dataPlatformUsageControlChainUsageControlChainDatumQuery {
	mods = append(mods, qm.From("`data_platform_usage_control_chain_usage_control_chain_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_usage_control_chain_usage_control_chain_data`.*"})
	}

	return dataPlatformUsageControlChainUsageControlChainDatumQuery{q}
}

// FindDataPlatformUsageControlChainUsageControlChainDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformUsageControlChainUsageControlChainDatum(ctx context.Context, exec boil.ContextExecutor, usageControlChain string, selectCols ...string) (*DataPlatformUsageControlChainUsageControlChainDatum, error) {
	dataPlatformUsageControlChainUsageControlChainDatumObj := &DataPlatformUsageControlChainUsageControlChainDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_usage_control_chain_usage_control_chain_data` where `UsageControlChain`=?", sel,
	)

	q := queries.Raw(query, usageControlChain)

	err := q.Bind(ctx, exec, dataPlatformUsageControlChainUsageControlChainDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_usage_control_chain_usage_control_chain_data")
	}

	return dataPlatformUsageControlChainUsageControlChainDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformUsageControlChainUsageControlChainDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_usage_control_chain_usage_control_chain_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformUsageControlChainUsageControlChainDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformUsageControlChainUsageControlChainDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformUsageControlChainUsageControlChainDatumInsertCache[key]
	dataPlatformUsageControlChainUsageControlChainDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformUsageControlChainUsageControlChainDatumAllColumns,
			dataPlatformUsageControlChainUsageControlChainDatumColumnsWithDefault,
			dataPlatformUsageControlChainUsageControlChainDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformUsageControlChainUsageControlChainDatumType, dataPlatformUsageControlChainUsageControlChainDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformUsageControlChainUsageControlChainDatumType, dataPlatformUsageControlChainUsageControlChainDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_usage_control_chain_usage_control_chain_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_usage_control_chain_usage_control_chain_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_usage_control_chain_usage_control_chain_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_usage_control_chain_usage_control_chain_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UsageControlChain,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_usage_control_chain_usage_control_chain_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformUsageControlChainUsageControlChainDatumInsertCacheMut.Lock()
		dataPlatformUsageControlChainUsageControlChainDatumInsertCache[key] = cache
		dataPlatformUsageControlChainUsageControlChainDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformUsageControlChainUsageControlChainDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformUsageControlChainUsageControlChainDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformUsageControlChainUsageControlChainDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformUsageControlChainUsageControlChainDatumUpdateCache[key]
	dataPlatformUsageControlChainUsageControlChainDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformUsageControlChainUsageControlChainDatumAllColumns,
			dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_usage_control_chain_usage_control_chain_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_usage_control_chain_usage_control_chain_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformUsageControlChainUsageControlChainDatumType, dataPlatformUsageControlChainUsageControlChainDatumMapping, append(wl, dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_usage_control_chain_usage_control_chain_data row")
	}

	if !cached {
		dataPlatformUsageControlChainUsageControlChainDatumUpdateCacheMut.Lock()
		dataPlatformUsageControlChainUsageControlChainDatumUpdateCache[key] = cache
		dataPlatformUsageControlChainUsageControlChainDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformUsageControlChainUsageControlChainDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_usage_control_chain_usage_control_chain_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformUsageControlChainUsageControlChainDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_usage_control_chain_usage_control_chain_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformUsageControlChainUsageControlChainDatum slice")
	}

	return nil
}

var mySQLDataPlatformUsageControlChainUsageControlChainDatumUniqueColumns = []string{
	"UsageControlChain",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformUsageControlChainUsageControlChainDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_usage_control_chain_usage_control_chain_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformUsageControlChainUsageControlChainDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformUsageControlChainUsageControlChainDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformUsageControlChainUsageControlChainDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformUsageControlChainUsageControlChainDatumUpsertCache[key]
	dataPlatformUsageControlChainUsageControlChainDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformUsageControlChainUsageControlChainDatumAllColumns,
			dataPlatformUsageControlChainUsageControlChainDatumColumnsWithDefault,
			dataPlatformUsageControlChainUsageControlChainDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformUsageControlChainUsageControlChainDatumAllColumns,
			dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_usage_control_chain_usage_control_chain_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_usage_control_chain_usage_control_chain_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_usage_control_chain_usage_control_chain_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformUsageControlChainUsageControlChainDatumType, dataPlatformUsageControlChainUsageControlChainDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformUsageControlChainUsageControlChainDatumType, dataPlatformUsageControlChainUsageControlChainDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_usage_control_chain_usage_control_chain_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformUsageControlChainUsageControlChainDatumType, dataPlatformUsageControlChainUsageControlChainDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_usage_control_chain_usage_control_chain_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_usage_control_chain_usage_control_chain_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformUsageControlChainUsageControlChainDatumUpsertCacheMut.Lock()
		dataPlatformUsageControlChainUsageControlChainDatumUpsertCache[key] = cache
		dataPlatformUsageControlChainUsageControlChainDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformUsageControlChainUsageControlChainDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformUsageControlChainUsageControlChainDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformUsageControlChainUsageControlChainDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_usage_control_chain_usage_control_chain_data` WHERE `UsageControlChain`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_usage_control_chain_usage_control_chain_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformUsageControlChainUsageControlChainDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformUsageControlChainUsageControlChainDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_usage_control_chain_usage_control_chain_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformUsageControlChainUsageControlChainDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_usage_control_chain_usage_control_chain_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformUsageControlChainUsageControlChainDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformUsageControlChainUsageControlChainDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformUsageControlChainUsageControlChainDatum(ctx, exec, o.UsageControlChain)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformUsageControlChainUsageControlChainDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformUsageControlChainUsageControlChainDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_usage_control_chain_usage_control_chain_data`.* FROM `data_platform_usage_control_chain_usage_control_chain_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformUsageControlChainUsageControlChainDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformUsageControlChainUsageControlChainDatumExists checks if the DataPlatformUsageControlChainUsageControlChainDatum row exists.
func DataPlatformUsageControlChainUsageControlChainDatumExists(ctx context.Context, exec boil.ContextExecutor, usageControlChain string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_usage_control_chain_usage_control_chain_data` where `UsageControlChain`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, usageControlChain)
	}
	row := exec.QueryRowContext(ctx, sql, usageControlChain)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_usage_control_chain_usage_control_chain_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformUsageControlChainUsageControlChainDatum row exists.
func (o *DataPlatformUsageControlChainUsageControlChainDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformUsageControlChainUsageControlChainDatumExists(ctx, exec, o.UsageControlChain)
}
