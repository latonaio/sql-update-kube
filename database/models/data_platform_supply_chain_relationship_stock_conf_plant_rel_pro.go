// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSupplyChainRelationshipStockConfPlantRelPro is an object representing the database table.
type DataPlatformSupplyChainRelationshipStockConfPlantRelPro struct {
	SupplyChainRelationshipID               int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipStockConfPlantID int         `boil:"SupplyChainRelationshipStockConfPlantID" json:"SupplyChainRelationshipStockConfPlantID" toml:"SupplyChainRelationshipStockConfPlantID" yaml:"SupplyChainRelationshipStockConfPlantID"`
	Buyer                                   int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                  int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	StockConfirmationBusinessPartner        int         `boil:"StockConfirmationBusinessPartner" json:"StockConfirmationBusinessPartner" toml:"StockConfirmationBusinessPartner" yaml:"StockConfirmationBusinessPartner"`
	StockConfirmationPlant                  string      `boil:"StockConfirmationPlant" json:"StockConfirmationPlant" toml:"StockConfirmationPlant" yaml:"StockConfirmationPlant"`
	Product                                 string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	MRPType                                 null.String `boil:"MRPType" json:"MRPType,omitempty" toml:"MRPType" yaml:"MRPType,omitempty"`
	MRPController                           null.String `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	CreationDate                            null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                          null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	IsMarkedForDeletion                     null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSupplyChainRelationshipStockConfPlantRelProR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSupplyChainRelationshipStockConfPlantRelProL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSupplyChainRelationshipStockConfPlantRelProColumns = struct {
	SupplyChainRelationshipID               string
	SupplyChainRelationshipStockConfPlantID string
	Buyer                                   string
	Seller                                  string
	StockConfirmationBusinessPartner        string
	StockConfirmationPlant                  string
	Product                                 string
	MRPType                                 string
	MRPController                           string
	CreationDate                            string
	LastChangeDate                          string
	IsMarkedForDeletion                     string
}{
	SupplyChainRelationshipID:               "SupplyChainRelationshipID",
	SupplyChainRelationshipStockConfPlantID: "SupplyChainRelationshipStockConfPlantID",
	Buyer:                                   "Buyer",
	Seller:                                  "Seller",
	StockConfirmationBusinessPartner:        "StockConfirmationBusinessPartner",
	StockConfirmationPlant:                  "StockConfirmationPlant",
	Product:                                 "Product",
	MRPType:                                 "MRPType",
	MRPController:                           "MRPController",
	CreationDate:                            "CreationDate",
	LastChangeDate:                          "LastChangeDate",
	IsMarkedForDeletion:                     "IsMarkedForDeletion",
}

var DataPlatformSupplyChainRelationshipStockConfPlantRelProTableColumns = struct {
	SupplyChainRelationshipID               string
	SupplyChainRelationshipStockConfPlantID string
	Buyer                                   string
	Seller                                  string
	StockConfirmationBusinessPartner        string
	StockConfirmationPlant                  string
	Product                                 string
	MRPType                                 string
	MRPController                           string
	CreationDate                            string
	LastChangeDate                          string
	IsMarkedForDeletion                     string
}{
	SupplyChainRelationshipID:               "data_platform_supply_chain_relationship_stock_conf_plant_rel_pro.SupplyChainRelationshipID",
	SupplyChainRelationshipStockConfPlantID: "data_platform_supply_chain_relationship_stock_conf_plant_rel_pro.SupplyChainRelationshipStockConfPlantID",
	Buyer:                                   "data_platform_supply_chain_relationship_stock_conf_plant_rel_pro.Buyer",
	Seller:                                  "data_platform_supply_chain_relationship_stock_conf_plant_rel_pro.Seller",
	StockConfirmationBusinessPartner:        "data_platform_supply_chain_relationship_stock_conf_plant_rel_pro.StockConfirmationBusinessPartner",
	StockConfirmationPlant:                  "data_platform_supply_chain_relationship_stock_conf_plant_rel_pro.StockConfirmationPlant",
	Product:                                 "data_platform_supply_chain_relationship_stock_conf_plant_rel_pro.Product",
	MRPType:                                 "data_platform_supply_chain_relationship_stock_conf_plant_rel_pro.MRPType",
	MRPController:                           "data_platform_supply_chain_relationship_stock_conf_plant_rel_pro.MRPController",
	CreationDate:                            "data_platform_supply_chain_relationship_stock_conf_plant_rel_pro.CreationDate",
	LastChangeDate:                          "data_platform_supply_chain_relationship_stock_conf_plant_rel_pro.LastChangeDate",
	IsMarkedForDeletion:                     "data_platform_supply_chain_relationship_stock_conf_plant_rel_pro.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSupplyChainRelationshipStockConfPlantRelProWhere = struct {
	SupplyChainRelationshipID               whereHelperint
	SupplyChainRelationshipStockConfPlantID whereHelperint
	Buyer                                   whereHelperint
	Seller                                  whereHelperint
	StockConfirmationBusinessPartner        whereHelperint
	StockConfirmationPlant                  whereHelperstring
	Product                                 whereHelperstring
	MRPType                                 whereHelpernull_String
	MRPController                           whereHelpernull_String
	CreationDate                            whereHelpernull_String
	LastChangeDate                          whereHelpernull_String
	IsMarkedForDeletion                     whereHelpernull_Bool
}{
	SupplyChainRelationshipID:               whereHelperint{field: "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipStockConfPlantID: whereHelperint{field: "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.`SupplyChainRelationshipStockConfPlantID`"},
	Buyer:                                   whereHelperint{field: "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.`Buyer`"},
	Seller:                                  whereHelperint{field: "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.`Seller`"},
	StockConfirmationBusinessPartner:        whereHelperint{field: "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.`StockConfirmationBusinessPartner`"},
	StockConfirmationPlant:                  whereHelperstring{field: "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.`StockConfirmationPlant`"},
	Product:                                 whereHelperstring{field: "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.`Product`"},
	MRPType:                                 whereHelpernull_String{field: "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.`MRPType`"},
	MRPController:                           whereHelpernull_String{field: "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.`MRPController`"},
	CreationDate:                            whereHelpernull_String{field: "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.`CreationDate`"},
	LastChangeDate:                          whereHelpernull_String{field: "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.`LastChangeDate`"},
	IsMarkedForDeletion:                     whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.`IsMarkedForDeletion`"},
}

// DataPlatformSupplyChainRelationshipStockConfPlantRelProRels is where relationship names are stored.
var DataPlatformSupplyChainRelationshipStockConfPlantRelProRels = struct {
}{}

// dataPlatformSupplyChainRelationshipStockConfPlantRelProR is where relationships are stored.
type dataPlatformSupplyChainRelationshipStockConfPlantRelProR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformSupplyChainRelationshipStockConfPlantRelProR) NewStruct() *dataPlatformSupplyChainRelationshipStockConfPlantRelProR {
	return &dataPlatformSupplyChainRelationshipStockConfPlantRelProR{}
}

// dataPlatformSupplyChainRelationshipStockConfPlantRelProL is where Load methods for each relationship are stored.
type dataPlatformSupplyChainRelationshipStockConfPlantRelProL struct{}

var (
	dataPlatformSupplyChainRelationshipStockConfPlantRelProAllColumns            = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipStockConfPlantID", "Buyer", "Seller", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "Product", "MRPType", "MRPController", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSupplyChainRelationshipStockConfPlantRelProColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipStockConfPlantID", "Buyer", "Seller", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "Product", "MRPType", "MRPController", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSupplyChainRelationshipStockConfPlantRelProColumnsWithDefault    = []string{}
	dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipStockConfPlantID", "Buyer", "Seller", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "Product"}
	dataPlatformSupplyChainRelationshipStockConfPlantRelProGeneratedColumns      = []string{}
)

type (
	// DataPlatformSupplyChainRelationshipStockConfPlantRelProSlice is an alias for a slice of pointers to DataPlatformSupplyChainRelationshipStockConfPlantRelPro.
	// This should almost always be used instead of []DataPlatformSupplyChainRelationshipStockConfPlantRelPro.
	DataPlatformSupplyChainRelationshipStockConfPlantRelProSlice []*DataPlatformSupplyChainRelationshipStockConfPlantRelPro

	dataPlatformSupplyChainRelationshipStockConfPlantRelProQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSupplyChainRelationshipStockConfPlantRelProType                 = reflect.TypeOf(&DataPlatformSupplyChainRelationshipStockConfPlantRelPro{})
	dataPlatformSupplyChainRelationshipStockConfPlantRelProMapping              = queries.MakeStructMapping(dataPlatformSupplyChainRelationshipStockConfPlantRelProType)
	dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSupplyChainRelationshipStockConfPlantRelProType, dataPlatformSupplyChainRelationshipStockConfPlantRelProMapping, dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyColumns)
	dataPlatformSupplyChainRelationshipStockConfPlantRelProInsertCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipStockConfPlantRelProInsertCache          = make(map[string]insertCache)
	dataPlatformSupplyChainRelationshipStockConfPlantRelProUpdateCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipStockConfPlantRelProUpdateCache          = make(map[string]updateCache)
	dataPlatformSupplyChainRelationshipStockConfPlantRelProUpsertCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipStockConfPlantRelProUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSupplyChainRelationshipStockConfPlantRelPro record from the query.
func (q dataPlatformSupplyChainRelationshipStockConfPlantRelProQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSupplyChainRelationshipStockConfPlantRelPro, error) {
	o := &DataPlatformSupplyChainRelationshipStockConfPlantRelPro{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_supply_chain_relationship_stock_conf_plant_rel_pro")
	}

	return o, nil
}

// All returns all DataPlatformSupplyChainRelationshipStockConfPlantRelPro records from the query.
func (q dataPlatformSupplyChainRelationshipStockConfPlantRelProQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSupplyChainRelationshipStockConfPlantRelProSlice, error) {
	var o []*DataPlatformSupplyChainRelationshipStockConfPlantRelPro

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSupplyChainRelationshipStockConfPlantRelPro slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSupplyChainRelationshipStockConfPlantRelPro records in the query.
func (q dataPlatformSupplyChainRelationshipStockConfPlantRelProQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_supply_chain_relationship_stock_conf_plant_rel_pro rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSupplyChainRelationshipStockConfPlantRelProQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_supply_chain_relationship_stock_conf_plant_rel_pro exists")
	}

	return count > 0, nil
}

// DataPlatformSupplyChainRelationshipStockConfPlantRelPros retrieves all the records using an executor.
func DataPlatformSupplyChainRelationshipStockConfPlantRelPros(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipStockConfPlantRelProQuery {
	mods = append(mods, qm.From("`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.*"})
	}

	return dataPlatformSupplyChainRelationshipStockConfPlantRelProQuery{q}
}

// FindDataPlatformSupplyChainRelationshipStockConfPlantRelPro retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSupplyChainRelationshipStockConfPlantRelPro(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipStockConfPlantID int, buyer int, seller int, stockConfirmationBusinessPartner int, stockConfirmationPlant string, product string, selectCols ...string) (*DataPlatformSupplyChainRelationshipStockConfPlantRelPro, error) {
	dataPlatformSupplyChainRelationshipStockConfPlantRelProObj := &DataPlatformSupplyChainRelationshipStockConfPlantRelPro{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_supply_chain_relationship_stock_conf_plant_rel_pro` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipStockConfPlantID`=? AND `Buyer`=? AND `Seller`=? AND `StockConfirmationBusinessPartner`=? AND `StockConfirmationPlant`=? AND `Product`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, supplyChainRelationshipStockConfPlantID, buyer, seller, stockConfirmationBusinessPartner, stockConfirmationPlant, product)

	err := q.Bind(ctx, exec, dataPlatformSupplyChainRelationshipStockConfPlantRelProObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_supply_chain_relationship_stock_conf_plant_rel_pro")
	}

	return dataPlatformSupplyChainRelationshipStockConfPlantRelProObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSupplyChainRelationshipStockConfPlantRelPro) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_supply_chain_relationship_stock_conf_plant_rel_pro provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSupplyChainRelationshipStockConfPlantRelProColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSupplyChainRelationshipStockConfPlantRelProInsertCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipStockConfPlantRelProInsertCache[key]
	dataPlatformSupplyChainRelationshipStockConfPlantRelProInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSupplyChainRelationshipStockConfPlantRelProAllColumns,
			dataPlatformSupplyChainRelationshipStockConfPlantRelProColumnsWithDefault,
			dataPlatformSupplyChainRelationshipStockConfPlantRelProColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipStockConfPlantRelProType, dataPlatformSupplyChainRelationshipStockConfPlantRelProMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipStockConfPlantRelProType, dataPlatformSupplyChainRelationshipStockConfPlantRelProMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_supply_chain_relationship_stock_conf_plant_rel_pro` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_supply_chain_relationship_stock_conf_plant_rel_pro` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_supply_chain_relationship_stock_conf_plant_rel_pro` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_supply_chain_relationship_stock_conf_plant_rel_pro")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipStockConfPlantID,
		o.Buyer,
		o.Seller,
		o.StockConfirmationBusinessPartner,
		o.StockConfirmationPlant,
		o.Product,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_supply_chain_relationship_stock_conf_plant_rel_pro")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSupplyChainRelationshipStockConfPlantRelProInsertCacheMut.Lock()
		dataPlatformSupplyChainRelationshipStockConfPlantRelProInsertCache[key] = cache
		dataPlatformSupplyChainRelationshipStockConfPlantRelProInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSupplyChainRelationshipStockConfPlantRelPro.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSupplyChainRelationshipStockConfPlantRelPro) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSupplyChainRelationshipStockConfPlantRelProUpdateCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipStockConfPlantRelProUpdateCache[key]
	dataPlatformSupplyChainRelationshipStockConfPlantRelProUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSupplyChainRelationshipStockConfPlantRelProAllColumns,
			dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_supply_chain_relationship_stock_conf_plant_rel_pro, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_supply_chain_relationship_stock_conf_plant_rel_pro` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipStockConfPlantRelProType, dataPlatformSupplyChainRelationshipStockConfPlantRelProMapping, append(wl, dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_supply_chain_relationship_stock_conf_plant_rel_pro row")
	}

	if !cached {
		dataPlatformSupplyChainRelationshipStockConfPlantRelProUpdateCacheMut.Lock()
		dataPlatformSupplyChainRelationshipStockConfPlantRelProUpdateCache[key] = cache
		dataPlatformSupplyChainRelationshipStockConfPlantRelProUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSupplyChainRelationshipStockConfPlantRelProQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_supply_chain_relationship_stock_conf_plant_rel_pro")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSupplyChainRelationshipStockConfPlantRelProSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_supply_chain_relationship_stock_conf_plant_rel_pro` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSupplyChainRelationshipStockConfPlantRelPro slice")
	}

	return nil
}

var mySQLDataPlatformSupplyChainRelationshipStockConfPlantRelProUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSupplyChainRelationshipStockConfPlantRelPro) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_supply_chain_relationship_stock_conf_plant_rel_pro provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSupplyChainRelationshipStockConfPlantRelProColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSupplyChainRelationshipStockConfPlantRelProUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSupplyChainRelationshipStockConfPlantRelProUpsertCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipStockConfPlantRelProUpsertCache[key]
	dataPlatformSupplyChainRelationshipStockConfPlantRelProUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSupplyChainRelationshipStockConfPlantRelProAllColumns,
			dataPlatformSupplyChainRelationshipStockConfPlantRelProColumnsWithDefault,
			dataPlatformSupplyChainRelationshipStockConfPlantRelProColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSupplyChainRelationshipStockConfPlantRelProAllColumns,
			dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_supply_chain_relationship_stock_conf_plant_rel_pro, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_supply_chain_relationship_stock_conf_plant_rel_pro` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipStockConfPlantRelProType, dataPlatformSupplyChainRelationshipStockConfPlantRelProMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipStockConfPlantRelProType, dataPlatformSupplyChainRelationshipStockConfPlantRelProMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_supply_chain_relationship_stock_conf_plant_rel_pro")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSupplyChainRelationshipStockConfPlantRelProType, dataPlatformSupplyChainRelationshipStockConfPlantRelProMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_supply_chain_relationship_stock_conf_plant_rel_pro")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_supply_chain_relationship_stock_conf_plant_rel_pro")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSupplyChainRelationshipStockConfPlantRelProUpsertCacheMut.Lock()
		dataPlatformSupplyChainRelationshipStockConfPlantRelProUpsertCache[key] = cache
		dataPlatformSupplyChainRelationshipStockConfPlantRelProUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSupplyChainRelationshipStockConfPlantRelPro record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSupplyChainRelationshipStockConfPlantRelPro) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSupplyChainRelationshipStockConfPlantRelPro provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_supply_chain_relationship_stock_conf_plant_rel_pro` WHERE `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipStockConfPlantID`=? AND `Buyer`=? AND `Seller`=? AND `StockConfirmationBusinessPartner`=? AND `StockConfirmationPlant`=? AND `Product`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_supply_chain_relationship_stock_conf_plant_rel_pro")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSupplyChainRelationshipStockConfPlantRelProQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSupplyChainRelationshipStockConfPlantRelProQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_supply_chain_relationship_stock_conf_plant_rel_pro")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSupplyChainRelationshipStockConfPlantRelProSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_supply_chain_relationship_stock_conf_plant_rel_pro` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSupplyChainRelationshipStockConfPlantRelPro slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSupplyChainRelationshipStockConfPlantRelPro) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSupplyChainRelationshipStockConfPlantRelPro(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipStockConfPlantID, o.Buyer, o.Seller, o.StockConfirmationBusinessPartner, o.StockConfirmationPlant, o.Product)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSupplyChainRelationshipStockConfPlantRelProSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSupplyChainRelationshipStockConfPlantRelProSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_supply_chain_relationship_stock_conf_plant_rel_pro`.* FROM `data_platform_supply_chain_relationship_stock_conf_plant_rel_pro` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipStockConfPlantRelProPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSupplyChainRelationshipStockConfPlantRelProSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSupplyChainRelationshipStockConfPlantRelProExists checks if the DataPlatformSupplyChainRelationshipStockConfPlantRelPro row exists.
func DataPlatformSupplyChainRelationshipStockConfPlantRelProExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipStockConfPlantID int, buyer int, seller int, stockConfirmationBusinessPartner int, stockConfirmationPlant string, product string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_supply_chain_relationship_stock_conf_plant_rel_pro` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipStockConfPlantID`=? AND `Buyer`=? AND `Seller`=? AND `StockConfirmationBusinessPartner`=? AND `StockConfirmationPlant`=? AND `Product`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, supplyChainRelationshipStockConfPlantID, buyer, seller, stockConfirmationBusinessPartner, stockConfirmationPlant, product)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, supplyChainRelationshipStockConfPlantID, buyer, seller, stockConfirmationBusinessPartner, stockConfirmationPlant, product)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_supply_chain_relationship_stock_conf_plant_rel_pro exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSupplyChainRelationshipStockConfPlantRelPro row exists.
func (o *DataPlatformSupplyChainRelationshipStockConfPlantRelPro) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSupplyChainRelationshipStockConfPlantRelProExists(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipStockConfPlantID, o.Buyer, o.Seller, o.StockConfirmationBusinessPartner, o.StockConfirmationPlant, o.Product)
}
