// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSCRBillingRelationDatum is an object representing the database table.
type DataPlatformSCRBillingRelationDatum struct {
	SupplyChainRelationshipID        int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipBillingID int         `boil:"SupplyChainRelationshipBillingID" json:"SupplyChainRelationshipBillingID" toml:"SupplyChainRelationshipBillingID" yaml:"SupplyChainRelationshipBillingID"`
	Buyer                            int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                           int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	BillToParty                      int         `boil:"BillToParty" json:"BillToParty" toml:"BillToParty" yaml:"BillToParty"`
	BillFromParty                    int         `boil:"BillFromParty" json:"BillFromParty" toml:"BillFromParty" yaml:"BillFromParty"`
	DefaultRelation                  null.Bool   `boil:"DefaultRelation" json:"DefaultRelation,omitempty" toml:"DefaultRelation" yaml:"DefaultRelation,omitempty"`
	BillToCountry                    string      `boil:"BillToCountry" json:"BillToCountry" toml:"BillToCountry" yaml:"BillToCountry"`
	BillFromCountry                  string      `boil:"BillFromCountry" json:"BillFromCountry" toml:"BillFromCountry" yaml:"BillFromCountry"`
	IsExportImport                   null.Bool   `boil:"IsExportImport" json:"IsExportImport,omitempty" toml:"IsExportImport" yaml:"IsExportImport,omitempty"`
	TransactionTaxCategory           null.String `boil:"TransactionTaxCategory" json:"TransactionTaxCategory,omitempty" toml:"TransactionTaxCategory" yaml:"TransactionTaxCategory,omitempty"`
	TransactionTaxClassification     null.String `boil:"TransactionTaxClassification" json:"TransactionTaxClassification,omitempty" toml:"TransactionTaxClassification" yaml:"TransactionTaxClassification,omitempty"`
	CreationDate                     string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                   string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion              null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSCRBillingRelationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSCRBillingRelationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSCRBillingRelationDatumColumns = struct {
	SupplyChainRelationshipID        string
	SupplyChainRelationshipBillingID string
	Buyer                            string
	Seller                           string
	BillToParty                      string
	BillFromParty                    string
	DefaultRelation                  string
	BillToCountry                    string
	BillFromCountry                  string
	IsExportImport                   string
	TransactionTaxCategory           string
	TransactionTaxClassification     string
	CreationDate                     string
	LastChangeDate                   string
	IsMarkedForDeletion              string
}{
	SupplyChainRelationshipID:        "SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID: "SupplyChainRelationshipBillingID",
	Buyer:                            "Buyer",
	Seller:                           "Seller",
	BillToParty:                      "BillToParty",
	BillFromParty:                    "BillFromParty",
	DefaultRelation:                  "DefaultRelation",
	BillToCountry:                    "BillToCountry",
	BillFromCountry:                  "BillFromCountry",
	IsExportImport:                   "IsExportImport",
	TransactionTaxCategory:           "TransactionTaxCategory",
	TransactionTaxClassification:     "TransactionTaxClassification",
	CreationDate:                     "CreationDate",
	LastChangeDate:                   "LastChangeDate",
	IsMarkedForDeletion:              "IsMarkedForDeletion",
}

var DataPlatformSCRBillingRelationDatumTableColumns = struct {
	SupplyChainRelationshipID        string
	SupplyChainRelationshipBillingID string
	Buyer                            string
	Seller                           string
	BillToParty                      string
	BillFromParty                    string
	DefaultRelation                  string
	BillToCountry                    string
	BillFromCountry                  string
	IsExportImport                   string
	TransactionTaxCategory           string
	TransactionTaxClassification     string
	CreationDate                     string
	LastChangeDate                   string
	IsMarkedForDeletion              string
}{
	SupplyChainRelationshipID:        "data_platform_scr_billing_relation_data.SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID: "data_platform_scr_billing_relation_data.SupplyChainRelationshipBillingID",
	Buyer:                            "data_platform_scr_billing_relation_data.Buyer",
	Seller:                           "data_platform_scr_billing_relation_data.Seller",
	BillToParty:                      "data_platform_scr_billing_relation_data.BillToParty",
	BillFromParty:                    "data_platform_scr_billing_relation_data.BillFromParty",
	DefaultRelation:                  "data_platform_scr_billing_relation_data.DefaultRelation",
	BillToCountry:                    "data_platform_scr_billing_relation_data.BillToCountry",
	BillFromCountry:                  "data_platform_scr_billing_relation_data.BillFromCountry",
	IsExportImport:                   "data_platform_scr_billing_relation_data.IsExportImport",
	TransactionTaxCategory:           "data_platform_scr_billing_relation_data.TransactionTaxCategory",
	TransactionTaxClassification:     "data_platform_scr_billing_relation_data.TransactionTaxClassification",
	CreationDate:                     "data_platform_scr_billing_relation_data.CreationDate",
	LastChangeDate:                   "data_platform_scr_billing_relation_data.LastChangeDate",
	IsMarkedForDeletion:              "data_platform_scr_billing_relation_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSCRBillingRelationDatumWhere = struct {
	SupplyChainRelationshipID        whereHelperint
	SupplyChainRelationshipBillingID whereHelperint
	Buyer                            whereHelperint
	Seller                           whereHelperint
	BillToParty                      whereHelperint
	BillFromParty                    whereHelperint
	DefaultRelation                  whereHelpernull_Bool
	BillToCountry                    whereHelperstring
	BillFromCountry                  whereHelperstring
	IsExportImport                   whereHelpernull_Bool
	TransactionTaxCategory           whereHelpernull_String
	TransactionTaxClassification     whereHelpernull_String
	CreationDate                     whereHelperstring
	LastChangeDate                   whereHelperstring
	IsMarkedForDeletion              whereHelpernull_Bool
}{
	SupplyChainRelationshipID:        whereHelperint{field: "`data_platform_scr_billing_relation_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipBillingID: whereHelperint{field: "`data_platform_scr_billing_relation_data`.`SupplyChainRelationshipBillingID`"},
	Buyer:                            whereHelperint{field: "`data_platform_scr_billing_relation_data`.`Buyer`"},
	Seller:                           whereHelperint{field: "`data_platform_scr_billing_relation_data`.`Seller`"},
	BillToParty:                      whereHelperint{field: "`data_platform_scr_billing_relation_data`.`BillToParty`"},
	BillFromParty:                    whereHelperint{field: "`data_platform_scr_billing_relation_data`.`BillFromParty`"},
	DefaultRelation:                  whereHelpernull_Bool{field: "`data_platform_scr_billing_relation_data`.`DefaultRelation`"},
	BillToCountry:                    whereHelperstring{field: "`data_platform_scr_billing_relation_data`.`BillToCountry`"},
	BillFromCountry:                  whereHelperstring{field: "`data_platform_scr_billing_relation_data`.`BillFromCountry`"},
	IsExportImport:                   whereHelpernull_Bool{field: "`data_platform_scr_billing_relation_data`.`IsExportImport`"},
	TransactionTaxCategory:           whereHelpernull_String{field: "`data_platform_scr_billing_relation_data`.`TransactionTaxCategory`"},
	TransactionTaxClassification:     whereHelpernull_String{field: "`data_platform_scr_billing_relation_data`.`TransactionTaxClassification`"},
	CreationDate:                     whereHelperstring{field: "`data_platform_scr_billing_relation_data`.`CreationDate`"},
	LastChangeDate:                   whereHelperstring{field: "`data_platform_scr_billing_relation_data`.`LastChangeDate`"},
	IsMarkedForDeletion:              whereHelpernull_Bool{field: "`data_platform_scr_billing_relation_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSCRBillingRelationDatumRels is where relationship names are stored.
var DataPlatformSCRBillingRelationDatumRels = struct {
	BillFromPartyDataPlatformBusinessPartnerGeneralDatum string
	BillToPartyDataPlatformBusinessPartnerGeneralDatum   string
	BuyerDataPlatformSCRGeneralDatum                     string
	BillFromPartyDataPlatformDeliveryDocumentHeaderData  string
	BillFromPartyDataPlatformDeliveryDocumentItemData    string
	BillFromPartyDataPlatformInvoiceDocumentHeaderData   string
	BillFromPartyDataPlatformOrdersHeaderData            string
	BillFromPartyDataPlatformQuotationsHeaderData        string
	BillFromPartyDataPlatformSCRPaymentRelationData      string
}{
	BillFromPartyDataPlatformBusinessPartnerGeneralDatum: "BillFromPartyDataPlatformBusinessPartnerGeneralDatum",
	BillToPartyDataPlatformBusinessPartnerGeneralDatum:   "BillToPartyDataPlatformBusinessPartnerGeneralDatum",
	BuyerDataPlatformSCRGeneralDatum:                     "BuyerDataPlatformSCRGeneralDatum",
	BillFromPartyDataPlatformDeliveryDocumentHeaderData:  "BillFromPartyDataPlatformDeliveryDocumentHeaderData",
	BillFromPartyDataPlatformDeliveryDocumentItemData:    "BillFromPartyDataPlatformDeliveryDocumentItemData",
	BillFromPartyDataPlatformInvoiceDocumentHeaderData:   "BillFromPartyDataPlatformInvoiceDocumentHeaderData",
	BillFromPartyDataPlatformOrdersHeaderData:            "BillFromPartyDataPlatformOrdersHeaderData",
	BillFromPartyDataPlatformQuotationsHeaderData:        "BillFromPartyDataPlatformQuotationsHeaderData",
	BillFromPartyDataPlatformSCRPaymentRelationData:      "BillFromPartyDataPlatformSCRPaymentRelationData",
}

// dataPlatformSCRBillingRelationDatumR is where relationships are stored.
type dataPlatformSCRBillingRelationDatumR struct {
	BillFromPartyDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum     `boil:"BillFromPartyDataPlatformBusinessPartnerGeneralDatum" json:"BillFromPartyDataPlatformBusinessPartnerGeneralDatum" toml:"BillFromPartyDataPlatformBusinessPartnerGeneralDatum" yaml:"BillFromPartyDataPlatformBusinessPartnerGeneralDatum"`
	BillToPartyDataPlatformBusinessPartnerGeneralDatum   *DataPlatformBusinessPartnerGeneralDatum     `boil:"BillToPartyDataPlatformBusinessPartnerGeneralDatum" json:"BillToPartyDataPlatformBusinessPartnerGeneralDatum" toml:"BillToPartyDataPlatformBusinessPartnerGeneralDatum" yaml:"BillToPartyDataPlatformBusinessPartnerGeneralDatum"`
	BuyerDataPlatformSCRGeneralDatum                     *DataPlatformSCRGeneralDatum                 `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	BillFromPartyDataPlatformDeliveryDocumentHeaderData  DataPlatformDeliveryDocumentHeaderDatumSlice `boil:"BillFromPartyDataPlatformDeliveryDocumentHeaderData" json:"BillFromPartyDataPlatformDeliveryDocumentHeaderData" toml:"BillFromPartyDataPlatformDeliveryDocumentHeaderData" yaml:"BillFromPartyDataPlatformDeliveryDocumentHeaderData"`
	BillFromPartyDataPlatformDeliveryDocumentItemData    DataPlatformDeliveryDocumentItemDatumSlice   `boil:"BillFromPartyDataPlatformDeliveryDocumentItemData" json:"BillFromPartyDataPlatformDeliveryDocumentItemData" toml:"BillFromPartyDataPlatformDeliveryDocumentItemData" yaml:"BillFromPartyDataPlatformDeliveryDocumentItemData"`
	BillFromPartyDataPlatformInvoiceDocumentHeaderData   DataPlatformInvoiceDocumentHeaderDatumSlice  `boil:"BillFromPartyDataPlatformInvoiceDocumentHeaderData" json:"BillFromPartyDataPlatformInvoiceDocumentHeaderData" toml:"BillFromPartyDataPlatformInvoiceDocumentHeaderData" yaml:"BillFromPartyDataPlatformInvoiceDocumentHeaderData"`
	BillFromPartyDataPlatformOrdersHeaderData            DataPlatformOrdersHeaderDatumSlice           `boil:"BillFromPartyDataPlatformOrdersHeaderData" json:"BillFromPartyDataPlatformOrdersHeaderData" toml:"BillFromPartyDataPlatformOrdersHeaderData" yaml:"BillFromPartyDataPlatformOrdersHeaderData"`
	BillFromPartyDataPlatformQuotationsHeaderData        DataPlatformQuotationsHeaderDatumSlice       `boil:"BillFromPartyDataPlatformQuotationsHeaderData" json:"BillFromPartyDataPlatformQuotationsHeaderData" toml:"BillFromPartyDataPlatformQuotationsHeaderData" yaml:"BillFromPartyDataPlatformQuotationsHeaderData"`
	BillFromPartyDataPlatformSCRPaymentRelationData      DataPlatformSCRPaymentRelationDatumSlice     `boil:"BillFromPartyDataPlatformSCRPaymentRelationData" json:"BillFromPartyDataPlatformSCRPaymentRelationData" toml:"BillFromPartyDataPlatformSCRPaymentRelationData" yaml:"BillFromPartyDataPlatformSCRPaymentRelationData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSCRBillingRelationDatumR) NewStruct() *dataPlatformSCRBillingRelationDatumR {
	return &dataPlatformSCRBillingRelationDatumR{}
}

func (r *dataPlatformSCRBillingRelationDatumR) GetBillFromPartyDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRBillingRelationDatumR) GetBillToPartyDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BillToPartyDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRBillingRelationDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformSCRBillingRelationDatumR) GetBillFromPartyDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformSCRBillingRelationDatumR) GetBillFromPartyDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformSCRBillingRelationDatumR) GetBillFromPartyDataPlatformInvoiceDocumentHeaderData() DataPlatformInvoiceDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformInvoiceDocumentHeaderData
}

func (r *dataPlatformSCRBillingRelationDatumR) GetBillFromPartyDataPlatformOrdersHeaderData() DataPlatformOrdersHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformOrdersHeaderData
}

func (r *dataPlatformSCRBillingRelationDatumR) GetBillFromPartyDataPlatformQuotationsHeaderData() DataPlatformQuotationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformQuotationsHeaderData
}

func (r *dataPlatformSCRBillingRelationDatumR) GetBillFromPartyDataPlatformSCRPaymentRelationData() DataPlatformSCRPaymentRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRPaymentRelationData
}

// dataPlatformSCRBillingRelationDatumL is where Load methods for each relationship are stored.
type dataPlatformSCRBillingRelationDatumL struct{}

var (
	dataPlatformSCRBillingRelationDatumAllColumns            = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "Buyer", "Seller", "BillToParty", "BillFromParty", "DefaultRelation", "BillToCountry", "BillFromCountry", "IsExportImport", "TransactionTaxCategory", "TransactionTaxClassification", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRBillingRelationDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "Buyer", "Seller", "BillToParty", "BillFromParty", "DefaultRelation", "BillToCountry", "BillFromCountry", "IsExportImport", "TransactionTaxCategory", "TransactionTaxClassification", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRBillingRelationDatumColumnsWithDefault    = []string{}
	dataPlatformSCRBillingRelationDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "Buyer", "Seller", "BillToParty", "BillFromParty"}
	dataPlatformSCRBillingRelationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSCRBillingRelationDatumSlice is an alias for a slice of pointers to DataPlatformSCRBillingRelationDatum.
	// This should almost always be used instead of []DataPlatformSCRBillingRelationDatum.
	DataPlatformSCRBillingRelationDatumSlice []*DataPlatformSCRBillingRelationDatum

	dataPlatformSCRBillingRelationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSCRBillingRelationDatumType                 = reflect.TypeOf(&DataPlatformSCRBillingRelationDatum{})
	dataPlatformSCRBillingRelationDatumMapping              = queries.MakeStructMapping(dataPlatformSCRBillingRelationDatumType)
	dataPlatformSCRBillingRelationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSCRBillingRelationDatumType, dataPlatformSCRBillingRelationDatumMapping, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns)
	dataPlatformSCRBillingRelationDatumInsertCacheMut       sync.RWMutex
	dataPlatformSCRBillingRelationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSCRBillingRelationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSCRBillingRelationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSCRBillingRelationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSCRBillingRelationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSCRBillingRelationDatum record from the query.
func (q dataPlatformSCRBillingRelationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSCRBillingRelationDatum, error) {
	o := &DataPlatformSCRBillingRelationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_scr_billing_relation_data")
	}

	return o, nil
}

// All returns all DataPlatformSCRBillingRelationDatum records from the query.
func (q dataPlatformSCRBillingRelationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSCRBillingRelationDatumSlice, error) {
	var o []*DataPlatformSCRBillingRelationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSCRBillingRelationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSCRBillingRelationDatum records in the query.
func (q dataPlatformSCRBillingRelationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_scr_billing_relation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSCRBillingRelationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_scr_billing_relation_data exists")
	}

	return count > 0, nil
}

// BillFromPartyDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRBillingRelationDatum) BillFromPartyDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// BillToPartyDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRBillingRelationDatum) BillToPartyDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BillToParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRBillingRelationDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// BillFromPartyDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via BillFromParty column.
func (o *DataPlatformSCRBillingRelationDatum) BillFromPartyDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`BillFromParty`=?", o.BillFromParty),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// BillFromPartyDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via BillFromParty column.
func (o *DataPlatformSCRBillingRelationDatum) BillFromPartyDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`BillFromParty`=?", o.BillFromParty),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// BillFromPartyDataPlatformInvoiceDocumentHeaderData retrieves all the data_platform_invoice_document_header_datum's DataPlatformInvoiceDocumentHeaderData with an executor via BillFromParty column.
func (o *DataPlatformSCRBillingRelationDatum) BillFromPartyDataPlatformInvoiceDocumentHeaderData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_header_data`.`BillFromParty`=?", o.BillFromParty),
	)

	return DataPlatformInvoiceDocumentHeaderData(queryMods...)
}

// BillFromPartyDataPlatformOrdersHeaderData retrieves all the data_platform_orders_header_datum's DataPlatformOrdersHeaderData with an executor via BillFromParty column.
func (o *DataPlatformSCRBillingRelationDatum) BillFromPartyDataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_data`.`BillFromParty`=?", o.BillFromParty),
	)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// BillFromPartyDataPlatformQuotationsHeaderData retrieves all the data_platform_quotations_header_datum's DataPlatformQuotationsHeaderData with an executor via BillFromParty column.
func (o *DataPlatformSCRBillingRelationDatum) BillFromPartyDataPlatformQuotationsHeaderData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_header_data`.`BillFromParty`=?", o.BillFromParty),
	)

	return DataPlatformQuotationsHeaderData(queryMods...)
}

// BillFromPartyDataPlatformSCRPaymentRelationData retrieves all the data_platform_scr_payment_relation_datum's DataPlatformSCRPaymentRelationData with an executor via BillFromParty column.
func (o *DataPlatformSCRBillingRelationDatum) BillFromPartyDataPlatformSCRPaymentRelationData(mods ...qm.QueryMod) dataPlatformSCRPaymentRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_payment_relation_data`.`BillFromParty`=?", o.BillFromParty),
	)

	return DataPlatformSCRPaymentRelationData(queryMods...)
}

// LoadBillFromPartyDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRBillingRelationDatumL) LoadBillFromPartyDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRBillingRelationDatum
	var object *DataPlatformSCRBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRBillingRelationDatum.(*DataPlatformSCRBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRBillingRelationDatum.(*[]*DataPlatformSCRBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRBillingRelationDatumR{}
		}
		args = append(args, object.BillFromParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRBillingRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.BillFromParty {
					continue Outer
				}
			}

			args = append(args, obj.BillFromParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillFromParty == foreign.BusinessPartner {
				local.R.BillFromPartyDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillToPartyDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRBillingRelationDatumL) LoadBillToPartyDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRBillingRelationDatum
	var object *DataPlatformSCRBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRBillingRelationDatum.(*DataPlatformSCRBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRBillingRelationDatum.(*[]*DataPlatformSCRBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRBillingRelationDatumR{}
		}
		args = append(args, object.BillToParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRBillingRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.BillToParty {
					continue Outer
				}
			}

			args = append(args, obj.BillToParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillToPartyDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillToParty == foreign.BusinessPartner {
				local.R.BillToPartyDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRBillingRelationDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRBillingRelationDatum
	var object *DataPlatformSCRBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRBillingRelationDatum.(*DataPlatformSCRBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRBillingRelationDatum.(*[]*DataPlatformSCRBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRBillingRelationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRBillingRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRBillingRelationDatumL) LoadBillFromPartyDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRBillingRelationDatum
	var object *DataPlatformSCRBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRBillingRelationDatum.(*DataPlatformSCRBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRBillingRelationDatum.(*[]*DataPlatformSCRBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRBillingRelationDatumR{}
		}
		args = append(args, object.BillFromParty)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRBillingRelationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			args = append(args, obj.BillFromParty)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData = append(local.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRBillingRelationDatumL) LoadBillFromPartyDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRBillingRelationDatum
	var object *DataPlatformSCRBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRBillingRelationDatum.(*DataPlatformSCRBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRBillingRelationDatum.(*[]*DataPlatformSCRBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRBillingRelationDatumR{}
		}
		args = append(args, object.BillFromParty)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRBillingRelationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			args = append(args, obj.BillFromParty)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.BillFromPartyDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformDeliveryDocumentItemData = append(local.R.BillFromPartyDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformInvoiceDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRBillingRelationDatumL) LoadBillFromPartyDataPlatformInvoiceDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRBillingRelationDatum
	var object *DataPlatformSCRBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRBillingRelationDatum.(*DataPlatformSCRBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRBillingRelationDatum.(*[]*DataPlatformSCRBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRBillingRelationDatumR{}
		}
		args = append(args, object.BillFromParty)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRBillingRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.BillFromParty {
					continue Outer
				}
			}

			args = append(args, obj.BillFromParty)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_header_data`),
		qm.WhereIn(`data_platform_invoice_document_header_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_header_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_header_data")
	}

	if singular {
		object.R.BillFromPartyDataPlatformInvoiceDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BillFromParty == foreign.BillFromParty {
				local.R.BillFromPartyDataPlatformInvoiceDocumentHeaderData = append(local.R.BillFromPartyDataPlatformInvoiceDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformOrdersHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRBillingRelationDatumL) LoadBillFromPartyDataPlatformOrdersHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRBillingRelationDatum
	var object *DataPlatformSCRBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRBillingRelationDatum.(*DataPlatformSCRBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRBillingRelationDatum.(*[]*DataPlatformSCRBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRBillingRelationDatumR{}
		}
		args = append(args, object.BillFromParty)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRBillingRelationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			args = append(args, obj.BillFromParty)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if singular {
		object.R.BillFromPartyDataPlatformOrdersHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformOrdersHeaderData = append(local.R.BillFromPartyDataPlatformOrdersHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformQuotationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRBillingRelationDatumL) LoadBillFromPartyDataPlatformQuotationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRBillingRelationDatum
	var object *DataPlatformSCRBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRBillingRelationDatum.(*DataPlatformSCRBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRBillingRelationDatum.(*[]*DataPlatformSCRBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRBillingRelationDatumR{}
		}
		args = append(args, object.BillFromParty)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRBillingRelationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			args = append(args, obj.BillFromParty)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_data`),
		qm.WhereIn(`data_platform_quotations_header_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_header_data")
	}

	var resultSlice []*DataPlatformQuotationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_data")
	}

	if singular {
		object.R.BillFromPartyDataPlatformQuotationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformQuotationsHeaderData = append(local.R.BillFromPartyDataPlatformQuotationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRPaymentRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSCRBillingRelationDatumL) LoadBillFromPartyDataPlatformSCRPaymentRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRBillingRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRBillingRelationDatum
	var object *DataPlatformSCRBillingRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRBillingRelationDatum.(*DataPlatformSCRBillingRelationDatum)
		if !ok {
			object = new(DataPlatformSCRBillingRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRBillingRelationDatum.(*[]*DataPlatformSCRBillingRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRBillingRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRBillingRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRBillingRelationDatumR{}
		}
		args = append(args, object.BillFromParty)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRBillingRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.BillFromParty {
					continue Outer
				}
			}

			args = append(args, obj.BillFromParty)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_payment_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_payment_relation_data")
	}

	var resultSlice []*DataPlatformSCRPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_payment_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_payment_relation_data")
	}

	if singular {
		object.R.BillFromPartyDataPlatformSCRPaymentRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BillFromParty == foreign.BillFromParty {
				local.R.BillFromPartyDataPlatformSCRPaymentRelationData = append(local.R.BillFromPartyDataPlatformSCRPaymentRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBillFromPartyDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRBillingRelationDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRBillingRelationDatum) SetBillFromPartyDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_billing_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipBillingID, o.Buyer, o.Seller, o.BillToParty, o.BillFromParty}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillFromParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRBillingRelationDatumR{
			BillFromPartyDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetBillToPartyDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRBillingRelationDatum to the related item.
// Sets o.R.BillToPartyDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRBillingRelationDatum) SetBillToPartyDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_billing_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillToParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipBillingID, o.Buyer, o.Seller, o.BillToParty, o.BillFromParty}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillToParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRBillingRelationDatumR{
			BillToPartyDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BillToPartyDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformSCRBillingRelationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformSCRBillingRelationDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_billing_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.SupplyChainRelationshipID, o.SupplyChainRelationshipBillingID, o.Buyer, o.Seller, o.BillToParty, o.BillFromParty}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformSCRBillingRelationDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// AddBillFromPartyDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_billing_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformSCRBillingRelationDatum) AddBillFromPartyDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillFromParty, o.BillFromParty)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillFromParty, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillFromParty, o.BillFromParty)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRBillingRelationDatumR{
			BillFromPartyDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData = append(o.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// SetBillFromPartyDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_scr_billing_relation_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum's BillFromPartyDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData with related.
func (o *DataPlatformSCRBillingRelationDatum) SetBillFromPartyDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `BillFromParty` = null where `BillFromParty` = ?"
	values := []interface{}{o.BillFromParty}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddBillFromPartyDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveBillFromPartyDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.BillFromPartyDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformSCRBillingRelationDatum) RemoveBillFromPartyDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillFromParty, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData[i] = o.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData = o.R.BillFromPartyDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillFromPartyDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_scr_billing_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromPartyDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformSCRBillingRelationDatum) AddBillFromPartyDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillFromParty, o.BillFromParty)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillFromParty, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillFromParty, o.BillFromParty)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRBillingRelationDatumR{
			BillFromPartyDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformDeliveryDocumentItemData = append(o.R.BillFromPartyDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetBillFromPartyDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_scr_billing_relation_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum's BillFromPartyDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.BillFromPartyDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformSCRBillingRelationDatum) SetBillFromPartyDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `BillFromParty` = null where `BillFromParty` = ?"
	values := []interface{}{o.BillFromParty}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddBillFromPartyDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveBillFromPartyDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.BillFromPartyDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformSCRBillingRelationDatum) RemoveBillFromPartyDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillFromParty, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillFromPartyDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillFromPartyDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.BillFromPartyDataPlatformDeliveryDocumentItemData[i] = o.R.BillFromPartyDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.BillFromPartyDataPlatformDeliveryDocumentItemData = o.R.BillFromPartyDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillFromPartyDataPlatformInvoiceDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_billing_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromPartyDataPlatformInvoiceDocumentHeaderData.
func (o *DataPlatformSCRBillingRelationDatum) AddBillFromPartyDataPlatformInvoiceDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillFromParty = o.BillFromParty
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillFromParty, rel.InvoiceDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillFromParty = o.BillFromParty
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRBillingRelationDatumR{
			BillFromPartyDataPlatformInvoiceDocumentHeaderData: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformInvoiceDocumentHeaderData = append(o.R.BillFromPartyDataPlatformInvoiceDocumentHeaderData, related...)
	}

	return nil
}

// AddBillFromPartyDataPlatformOrdersHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_billing_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromPartyDataPlatformOrdersHeaderData.
func (o *DataPlatformSCRBillingRelationDatum) AddBillFromPartyDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillFromParty, o.BillFromParty)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillFromParty, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillFromParty, o.BillFromParty)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRBillingRelationDatumR{
			BillFromPartyDataPlatformOrdersHeaderData: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformOrdersHeaderData = append(o.R.BillFromPartyDataPlatformOrdersHeaderData, related...)
	}

	return nil
}

// SetBillFromPartyDataPlatformOrdersHeaderData removes all previously related items of the
// data_platform_scr_billing_relation_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum's BillFromPartyDataPlatformOrdersHeaderData accordingly.
// Replaces o.R.BillFromPartyDataPlatformOrdersHeaderData with related.
func (o *DataPlatformSCRBillingRelationDatum) SetBillFromPartyDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	query := "update `data_platform_orders_header_data` set `BillFromParty` = null where `BillFromParty` = ?"
	values := []interface{}{o.BillFromParty}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformOrdersHeaderData = nil
	}

	return o.AddBillFromPartyDataPlatformOrdersHeaderData(ctx, exec, insert, related...)
}

// RemoveBillFromPartyDataPlatformOrdersHeaderData relationships from objects passed in.
// Removes related items from R.BillFromPartyDataPlatformOrdersHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformSCRBillingRelationDatum) RemoveBillFromPartyDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillFromParty, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillFromPartyDataPlatformOrdersHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillFromPartyDataPlatformOrdersHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.BillFromPartyDataPlatformOrdersHeaderData[i] = o.R.BillFromPartyDataPlatformOrdersHeaderData[ln-1]
			}
			o.R.BillFromPartyDataPlatformOrdersHeaderData = o.R.BillFromPartyDataPlatformOrdersHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillFromPartyDataPlatformQuotationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_scr_billing_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromPartyDataPlatformQuotationsHeaderData.
func (o *DataPlatformSCRBillingRelationDatum) AddBillFromPartyDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillFromParty, o.BillFromParty)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillFromParty, rel.Quotation}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillFromParty, o.BillFromParty)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRBillingRelationDatumR{
			BillFromPartyDataPlatformQuotationsHeaderData: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformQuotationsHeaderData = append(o.R.BillFromPartyDataPlatformQuotationsHeaderData, related...)
	}

	return nil
}

// SetBillFromPartyDataPlatformQuotationsHeaderData removes all previously related items of the
// data_platform_scr_billing_relation_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum's BillFromPartyDataPlatformQuotationsHeaderData accordingly.
// Replaces o.R.BillFromPartyDataPlatformQuotationsHeaderData with related.
func (o *DataPlatformSCRBillingRelationDatum) SetBillFromPartyDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderDatum) error {
	query := "update `data_platform_quotations_header_data` set `BillFromParty` = null where `BillFromParty` = ?"
	values := []interface{}{o.BillFromParty}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformQuotationsHeaderData = nil
	}

	return o.AddBillFromPartyDataPlatformQuotationsHeaderData(ctx, exec, insert, related...)
}

// RemoveBillFromPartyDataPlatformQuotationsHeaderData relationships from objects passed in.
// Removes related items from R.BillFromPartyDataPlatformQuotationsHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformSCRBillingRelationDatum) RemoveBillFromPartyDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformQuotationsHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillFromParty, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillFromPartyDataPlatformQuotationsHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillFromPartyDataPlatformQuotationsHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.BillFromPartyDataPlatformQuotationsHeaderData[i] = o.R.BillFromPartyDataPlatformQuotationsHeaderData[ln-1]
			}
			o.R.BillFromPartyDataPlatformQuotationsHeaderData = o.R.BillFromPartyDataPlatformQuotationsHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillFromPartyDataPlatformSCRPaymentRelationData adds the given related objects to the existing relationships
// of the data_platform_scr_billing_relation_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromPartyDataPlatformSCRPaymentRelationData.
func (o *DataPlatformSCRBillingRelationDatum) AddBillFromPartyDataPlatformSCRPaymentRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRPaymentRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillFromParty = o.BillFromParty
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_payment_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillFromParty, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.SupplyChainRelationshipPaymentID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty, rel.Payer, rel.Payee}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillFromParty = o.BillFromParty
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSCRBillingRelationDatumR{
			BillFromPartyDataPlatformSCRPaymentRelationData: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRPaymentRelationData = append(o.R.BillFromPartyDataPlatformSCRPaymentRelationData, related...)
	}

	return nil
}

// DataPlatformSCRBillingRelationData retrieves all the records using an executor.
func DataPlatformSCRBillingRelationData(mods ...qm.QueryMod) dataPlatformSCRBillingRelationDatumQuery {
	mods = append(mods, qm.From("`data_platform_scr_billing_relation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_scr_billing_relation_data`.*"})
	}

	return dataPlatformSCRBillingRelationDatumQuery{q}
}

// FindDataPlatformSCRBillingRelationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSCRBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipBillingID int, buyer int, seller int, billToParty int, billFromParty int, selectCols ...string) (*DataPlatformSCRBillingRelationDatum, error) {
	dataPlatformSCRBillingRelationDatumObj := &DataPlatformSCRBillingRelationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_scr_billing_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipBillingID`=? AND `Buyer`=? AND `Seller`=? AND `BillToParty`=? AND `BillFromParty`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, supplyChainRelationshipBillingID, buyer, seller, billToParty, billFromParty)

	err := q.Bind(ctx, exec, dataPlatformSCRBillingRelationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_scr_billing_relation_data")
	}

	return dataPlatformSCRBillingRelationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSCRBillingRelationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_billing_relation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRBillingRelationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSCRBillingRelationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSCRBillingRelationDatumInsertCache[key]
	dataPlatformSCRBillingRelationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSCRBillingRelationDatumAllColumns,
			dataPlatformSCRBillingRelationDatumColumnsWithDefault,
			dataPlatformSCRBillingRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRBillingRelationDatumType, dataPlatformSCRBillingRelationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSCRBillingRelationDatumType, dataPlatformSCRBillingRelationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_scr_billing_relation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_scr_billing_relation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_scr_billing_relation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_scr_billing_relation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipBillingID,
		o.Buyer,
		o.Seller,
		o.BillToParty,
		o.BillFromParty,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_billing_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRBillingRelationDatumInsertCacheMut.Lock()
		dataPlatformSCRBillingRelationDatumInsertCache[key] = cache
		dataPlatformSCRBillingRelationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSCRBillingRelationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSCRBillingRelationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSCRBillingRelationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSCRBillingRelationDatumUpdateCache[key]
	dataPlatformSCRBillingRelationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSCRBillingRelationDatumAllColumns,
			dataPlatformSCRBillingRelationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_scr_billing_relation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_scr_billing_relation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRBillingRelationDatumType, dataPlatformSCRBillingRelationDatumMapping, append(wl, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_scr_billing_relation_data row")
	}

	if !cached {
		dataPlatformSCRBillingRelationDatumUpdateCacheMut.Lock()
		dataPlatformSCRBillingRelationDatumUpdateCache[key] = cache
		dataPlatformSCRBillingRelationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSCRBillingRelationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_scr_billing_relation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSCRBillingRelationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRBillingRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_scr_billing_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSCRBillingRelationDatum slice")
	}

	return nil
}

var mySQLDataPlatformSCRBillingRelationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSCRBillingRelationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_billing_relation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRBillingRelationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSCRBillingRelationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSCRBillingRelationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSCRBillingRelationDatumUpsertCache[key]
	dataPlatformSCRBillingRelationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSCRBillingRelationDatumAllColumns,
			dataPlatformSCRBillingRelationDatumColumnsWithDefault,
			dataPlatformSCRBillingRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSCRBillingRelationDatumAllColumns,
			dataPlatformSCRBillingRelationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_scr_billing_relation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_scr_billing_relation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_scr_billing_relation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRBillingRelationDatumType, dataPlatformSCRBillingRelationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSCRBillingRelationDatumType, dataPlatformSCRBillingRelationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_scr_billing_relation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSCRBillingRelationDatumType, dataPlatformSCRBillingRelationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_scr_billing_relation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_billing_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRBillingRelationDatumUpsertCacheMut.Lock()
		dataPlatformSCRBillingRelationDatumUpsertCache[key] = cache
		dataPlatformSCRBillingRelationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSCRBillingRelationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSCRBillingRelationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSCRBillingRelationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSCRBillingRelationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_scr_billing_relation_data` WHERE `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipBillingID`=? AND `Buyer`=? AND `Seller`=? AND `BillToParty`=? AND `BillFromParty`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_scr_billing_relation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSCRBillingRelationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSCRBillingRelationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_scr_billing_relation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSCRBillingRelationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRBillingRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_scr_billing_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSCRBillingRelationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSCRBillingRelationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSCRBillingRelationDatum(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipBillingID, o.Buyer, o.Seller, o.BillToParty, o.BillFromParty)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSCRBillingRelationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSCRBillingRelationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRBillingRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_scr_billing_relation_data`.* FROM `data_platform_scr_billing_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSCRBillingRelationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSCRBillingRelationDatumExists checks if the DataPlatformSCRBillingRelationDatum row exists.
func DataPlatformSCRBillingRelationDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipBillingID int, buyer int, seller int, billToParty int, billFromParty int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_scr_billing_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipBillingID`=? AND `Buyer`=? AND `Seller`=? AND `BillToParty`=? AND `BillFromParty`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, supplyChainRelationshipBillingID, buyer, seller, billToParty, billFromParty)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, supplyChainRelationshipBillingID, buyer, seller, billToParty, billFromParty)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_scr_billing_relation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSCRBillingRelationDatum row exists.
func (o *DataPlatformSCRBillingRelationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSCRBillingRelationDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipBillingID, o.Buyer, o.Seller, o.BillToParty, o.BillFromParty)
}
