// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionRoutingOperationDatum is an object representing the database table.
type DataPlatformProductionRoutingOperationDatum struct {
	ProductionRoutingGroup        string       `boil:"ProductionRoutingGroup" json:"ProductionRoutingGroup" toml:"ProductionRoutingGroup" yaml:"ProductionRoutingGroup"`
	ProductionRouting             string       `boil:"ProductionRouting" json:"ProductionRouting" toml:"ProductionRouting" yaml:"ProductionRouting"`
	ProductionRoutingSequence     string       `boil:"ProductionRoutingSequence" json:"ProductionRoutingSequence" toml:"ProductionRoutingSequence" yaml:"ProductionRoutingSequence"`
	ProductionRoutingOpIntID      string       `boil:"ProductionRoutingOpIntID" json:"ProductionRoutingOpIntID" toml:"ProductionRoutingOpIntID" yaml:"ProductionRoutingOpIntID"`
	ProductionRoutingOpIntVersion string       `boil:"ProductionRoutingOpIntVersion" json:"ProductionRoutingOpIntVersion" toml:"ProductionRoutingOpIntVersion" yaml:"ProductionRoutingOpIntVersion"`
	Operation                     null.String  `boil:"Operation" json:"Operation,omitempty" toml:"Operation" yaml:"Operation,omitempty"`
	CreationDate                  null.String  `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	ChangeNumber                  null.String  `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`
	ValidityStartDate             null.String  `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate               null.String  `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	OperationText                 null.String  `boil:"OperationText" json:"OperationText,omitempty" toml:"OperationText" yaml:"OperationText,omitempty"`
	LongTextLanguage              null.String  `boil:"LongTextLanguage" json:"LongTextLanguage,omitempty" toml:"LongTextLanguage" yaml:"LongTextLanguage,omitempty"`
	Plant                         null.String  `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`
	OperationControlProfile       null.String  `boil:"OperationControlProfile" json:"OperationControlProfile,omitempty" toml:"OperationControlProfile" yaml:"OperationControlProfile,omitempty"`
	OperationStandardTextCode     null.String  `boil:"OperationStandardTextCode" json:"OperationStandardTextCode,omitempty" toml:"OperationStandardTextCode" yaml:"OperationStandardTextCode,omitempty"`
	WorkCenterTypeCode            null.String  `boil:"WorkCenterTypeCode" json:"WorkCenterTypeCode,omitempty" toml:"WorkCenterTypeCode" yaml:"WorkCenterTypeCode,omitempty"`
	WorkCenterInternalID          null.String  `boil:"WorkCenterInternalID" json:"WorkCenterInternalID,omitempty" toml:"WorkCenterInternalID" yaml:"WorkCenterInternalID,omitempty"`
	CapacityCategoryCode          null.String  `boil:"CapacityCategoryCode" json:"CapacityCategoryCode,omitempty" toml:"CapacityCategoryCode" yaml:"CapacityCategoryCode,omitempty"`
	OperationCostingRelevancyType null.String  `boil:"OperationCostingRelevancyType" json:"OperationCostingRelevancyType,omitempty" toml:"OperationCostingRelevancyType" yaml:"OperationCostingRelevancyType,omitempty"`
	NumberOfTimeTickets           null.String  `boil:"NumberOfTimeTickets" json:"NumberOfTimeTickets,omitempty" toml:"NumberOfTimeTickets" yaml:"NumberOfTimeTickets,omitempty"`
	NumberOfConfirmationSlips     null.String  `boil:"NumberOfConfirmationSlips" json:"NumberOfConfirmationSlips,omitempty" toml:"NumberOfConfirmationSlips" yaml:"NumberOfConfirmationSlips,omitempty"`
	OperationSetupType            null.String  `boil:"OperationSetupType" json:"OperationSetupType,omitempty" toml:"OperationSetupType" yaml:"OperationSetupType,omitempty"`
	OperationSetupGroupCategory   null.String  `boil:"OperationSetupGroupCategory" json:"OperationSetupGroupCategory,omitempty" toml:"OperationSetupGroupCategory" yaml:"OperationSetupGroupCategory,omitempty"`
	OperationSetupGroup           null.String  `boil:"OperationSetupGroup" json:"OperationSetupGroup,omitempty" toml:"OperationSetupGroup" yaml:"OperationSetupGroup,omitempty"`
	OperationReferenceQuantity    null.String  `boil:"OperationReferenceQuantity" json:"OperationReferenceQuantity,omitempty" toml:"OperationReferenceQuantity" yaml:"OperationReferenceQuantity,omitempty"`
	OperationUnit                 null.String  `boil:"OperationUnit" json:"OperationUnit,omitempty" toml:"OperationUnit" yaml:"OperationUnit,omitempty"`
	OpQtyToBaseQtyNmrtr           null.String  `boil:"OpQtyToBaseQtyNmrtr" json:"OpQtyToBaseQtyNmrtr,omitempty" toml:"OpQtyToBaseQtyNmrtr" yaml:"OpQtyToBaseQtyNmrtr,omitempty"`
	OpQtyToBaseQtyDnmntr          null.String  `boil:"OpQtyToBaseQtyDnmntr" json:"OpQtyToBaseQtyDnmntr,omitempty" toml:"OpQtyToBaseQtyDnmntr" yaml:"OpQtyToBaseQtyDnmntr,omitempty"`
	MaximumWaitDuration           null.String  `boil:"MaximumWaitDuration" json:"MaximumWaitDuration,omitempty" toml:"MaximumWaitDuration" yaml:"MaximumWaitDuration,omitempty"`
	MaximumWaitDurationUnit       null.String  `boil:"MaximumWaitDurationUnit" json:"MaximumWaitDurationUnit,omitempty" toml:"MaximumWaitDurationUnit" yaml:"MaximumWaitDurationUnit,omitempty"`
	MinimumWaitDuration           null.String  `boil:"MinimumWaitDuration" json:"MinimumWaitDuration,omitempty" toml:"MinimumWaitDuration" yaml:"MinimumWaitDuration,omitempty"`
	MinimumWaitDurationUnit       null.String  `boil:"MinimumWaitDurationUnit" json:"MinimumWaitDurationUnit,omitempty" toml:"MinimumWaitDurationUnit" yaml:"MinimumWaitDurationUnit,omitempty"`
	StandardQueueDuration         null.String  `boil:"StandardQueueDuration" json:"StandardQueueDuration,omitempty" toml:"StandardQueueDuration" yaml:"StandardQueueDuration,omitempty"`
	StandardQueueDurationUnit     null.String  `boil:"StandardQueueDurationUnit" json:"StandardQueueDurationUnit,omitempty" toml:"StandardQueueDurationUnit" yaml:"StandardQueueDurationUnit,omitempty"`
	MinimumQueueDuration          null.String  `boil:"MinimumQueueDuration" json:"MinimumQueueDuration,omitempty" toml:"MinimumQueueDuration" yaml:"MinimumQueueDuration,omitempty"`
	MinimumQueueDurationUnit      null.String  `boil:"MinimumQueueDurationUnit" json:"MinimumQueueDurationUnit,omitempty" toml:"MinimumQueueDurationUnit" yaml:"MinimumQueueDurationUnit,omitempty"`
	StandardMoveDuration          null.String  `boil:"StandardMoveDuration" json:"StandardMoveDuration,omitempty" toml:"StandardMoveDuration" yaml:"StandardMoveDuration,omitempty"`
	StandardMoveDurationUnit      null.String  `boil:"StandardMoveDurationUnit" json:"StandardMoveDurationUnit,omitempty" toml:"StandardMoveDurationUnit" yaml:"StandardMoveDurationUnit,omitempty"`
	MinimumMoveDuration           null.String  `boil:"MinimumMoveDuration" json:"MinimumMoveDuration,omitempty" toml:"MinimumMoveDuration" yaml:"MinimumMoveDuration,omitempty"`
	MinimumMoveDurationUnit       null.String  `boil:"MinimumMoveDurationUnit" json:"MinimumMoveDurationUnit,omitempty" toml:"MinimumMoveDurationUnit" yaml:"MinimumMoveDurationUnit,omitempty"`
	OpIsExtlyProcdWithSubcontrg   null.Bool    `boil:"OpIsExtlyProcdWithSubcontrg" json:"OpIsExtlyProcdWithSubcontrg,omitempty" toml:"OpIsExtlyProcdWithSubcontrg" yaml:"OpIsExtlyProcdWithSubcontrg,omitempty"`
	PlannedDeliveryDuration       null.Int     `boil:"PlannedDeliveryDuration" json:"PlannedDeliveryDuration,omitempty" toml:"PlannedDeliveryDuration" yaml:"PlannedDeliveryDuration,omitempty"`
	MaterialGroup                 null.String  `boil:"MaterialGroup" json:"MaterialGroup,omitempty" toml:"MaterialGroup" yaml:"MaterialGroup,omitempty"`
	PurchasingGroup               null.String  `boil:"PurchasingGroup" json:"PurchasingGroup,omitempty" toml:"PurchasingGroup" yaml:"PurchasingGroup,omitempty"`
	NumberOfOperationPriceUnits   null.String  `boil:"NumberOfOperationPriceUnits" json:"NumberOfOperationPriceUnits,omitempty" toml:"NumberOfOperationPriceUnits" yaml:"NumberOfOperationPriceUnits,omitempty"`
	CostElement                   null.String  `boil:"CostElement" json:"CostElement,omitempty" toml:"CostElement" yaml:"CostElement,omitempty"`
	OpExternalProcessingPrice     null.String  `boil:"OpExternalProcessingPrice" json:"OpExternalProcessingPrice,omitempty" toml:"OpExternalProcessingPrice" yaml:"OpExternalProcessingPrice,omitempty"`
	OpExternalProcessingCurrency  null.String  `boil:"OpExternalProcessingCurrency" json:"OpExternalProcessingCurrency,omitempty" toml:"OpExternalProcessingCurrency" yaml:"OpExternalProcessingCurrency,omitempty"`
	OperationScrapPercent         null.Float32 `boil:"OperationScrapPercent" json:"OperationScrapPercent,omitempty" toml:"OperationScrapPercent" yaml:"OperationScrapPercent,omitempty"`
	ChangedDateTime               null.String  `boil:"ChangedDateTime" json:"ChangedDateTime,omitempty" toml:"ChangedDateTime" yaml:"ChangedDateTime,omitempty"`
	PlainLongText                 null.String  `boil:"PlainLongText" json:"PlainLongText,omitempty" toml:"PlainLongText" yaml:"PlainLongText,omitempty"`

	R *dataPlatformProductionRoutingOperationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionRoutingOperationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionRoutingOperationDatumColumns = struct {
	ProductionRoutingGroup        string
	ProductionRouting             string
	ProductionRoutingSequence     string
	ProductionRoutingOpIntID      string
	ProductionRoutingOpIntVersion string
	Operation                     string
	CreationDate                  string
	ChangeNumber                  string
	ValidityStartDate             string
	ValidityEndDate               string
	OperationText                 string
	LongTextLanguage              string
	Plant                         string
	OperationControlProfile       string
	OperationStandardTextCode     string
	WorkCenterTypeCode            string
	WorkCenterInternalID          string
	CapacityCategoryCode          string
	OperationCostingRelevancyType string
	NumberOfTimeTickets           string
	NumberOfConfirmationSlips     string
	OperationSetupType            string
	OperationSetupGroupCategory   string
	OperationSetupGroup           string
	OperationReferenceQuantity    string
	OperationUnit                 string
	OpQtyToBaseQtyNmrtr           string
	OpQtyToBaseQtyDnmntr          string
	MaximumWaitDuration           string
	MaximumWaitDurationUnit       string
	MinimumWaitDuration           string
	MinimumWaitDurationUnit       string
	StandardQueueDuration         string
	StandardQueueDurationUnit     string
	MinimumQueueDuration          string
	MinimumQueueDurationUnit      string
	StandardMoveDuration          string
	StandardMoveDurationUnit      string
	MinimumMoveDuration           string
	MinimumMoveDurationUnit       string
	OpIsExtlyProcdWithSubcontrg   string
	PlannedDeliveryDuration       string
	MaterialGroup                 string
	PurchasingGroup               string
	NumberOfOperationPriceUnits   string
	CostElement                   string
	OpExternalProcessingPrice     string
	OpExternalProcessingCurrency  string
	OperationScrapPercent         string
	ChangedDateTime               string
	PlainLongText                 string
}{
	ProductionRoutingGroup:        "ProductionRoutingGroup",
	ProductionRouting:             "ProductionRouting",
	ProductionRoutingSequence:     "ProductionRoutingSequence",
	ProductionRoutingOpIntID:      "ProductionRoutingOpIntID",
	ProductionRoutingOpIntVersion: "ProductionRoutingOpIntVersion",
	Operation:                     "Operation",
	CreationDate:                  "CreationDate",
	ChangeNumber:                  "ChangeNumber",
	ValidityStartDate:             "ValidityStartDate",
	ValidityEndDate:               "ValidityEndDate",
	OperationText:                 "OperationText",
	LongTextLanguage:              "LongTextLanguage",
	Plant:                         "Plant",
	OperationControlProfile:       "OperationControlProfile",
	OperationStandardTextCode:     "OperationStandardTextCode",
	WorkCenterTypeCode:            "WorkCenterTypeCode",
	WorkCenterInternalID:          "WorkCenterInternalID",
	CapacityCategoryCode:          "CapacityCategoryCode",
	OperationCostingRelevancyType: "OperationCostingRelevancyType",
	NumberOfTimeTickets:           "NumberOfTimeTickets",
	NumberOfConfirmationSlips:     "NumberOfConfirmationSlips",
	OperationSetupType:            "OperationSetupType",
	OperationSetupGroupCategory:   "OperationSetupGroupCategory",
	OperationSetupGroup:           "OperationSetupGroup",
	OperationReferenceQuantity:    "OperationReferenceQuantity",
	OperationUnit:                 "OperationUnit",
	OpQtyToBaseQtyNmrtr:           "OpQtyToBaseQtyNmrtr",
	OpQtyToBaseQtyDnmntr:          "OpQtyToBaseQtyDnmntr",
	MaximumWaitDuration:           "MaximumWaitDuration",
	MaximumWaitDurationUnit:       "MaximumWaitDurationUnit",
	MinimumWaitDuration:           "MinimumWaitDuration",
	MinimumWaitDurationUnit:       "MinimumWaitDurationUnit",
	StandardQueueDuration:         "StandardQueueDuration",
	StandardQueueDurationUnit:     "StandardQueueDurationUnit",
	MinimumQueueDuration:          "MinimumQueueDuration",
	MinimumQueueDurationUnit:      "MinimumQueueDurationUnit",
	StandardMoveDuration:          "StandardMoveDuration",
	StandardMoveDurationUnit:      "StandardMoveDurationUnit",
	MinimumMoveDuration:           "MinimumMoveDuration",
	MinimumMoveDurationUnit:       "MinimumMoveDurationUnit",
	OpIsExtlyProcdWithSubcontrg:   "OpIsExtlyProcdWithSubcontrg",
	PlannedDeliveryDuration:       "PlannedDeliveryDuration",
	MaterialGroup:                 "MaterialGroup",
	PurchasingGroup:               "PurchasingGroup",
	NumberOfOperationPriceUnits:   "NumberOfOperationPriceUnits",
	CostElement:                   "CostElement",
	OpExternalProcessingPrice:     "OpExternalProcessingPrice",
	OpExternalProcessingCurrency:  "OpExternalProcessingCurrency",
	OperationScrapPercent:         "OperationScrapPercent",
	ChangedDateTime:               "ChangedDateTime",
	PlainLongText:                 "PlainLongText",
}

var DataPlatformProductionRoutingOperationDatumTableColumns = struct {
	ProductionRoutingGroup        string
	ProductionRouting             string
	ProductionRoutingSequence     string
	ProductionRoutingOpIntID      string
	ProductionRoutingOpIntVersion string
	Operation                     string
	CreationDate                  string
	ChangeNumber                  string
	ValidityStartDate             string
	ValidityEndDate               string
	OperationText                 string
	LongTextLanguage              string
	Plant                         string
	OperationControlProfile       string
	OperationStandardTextCode     string
	WorkCenterTypeCode            string
	WorkCenterInternalID          string
	CapacityCategoryCode          string
	OperationCostingRelevancyType string
	NumberOfTimeTickets           string
	NumberOfConfirmationSlips     string
	OperationSetupType            string
	OperationSetupGroupCategory   string
	OperationSetupGroup           string
	OperationReferenceQuantity    string
	OperationUnit                 string
	OpQtyToBaseQtyNmrtr           string
	OpQtyToBaseQtyDnmntr          string
	MaximumWaitDuration           string
	MaximumWaitDurationUnit       string
	MinimumWaitDuration           string
	MinimumWaitDurationUnit       string
	StandardQueueDuration         string
	StandardQueueDurationUnit     string
	MinimumQueueDuration          string
	MinimumQueueDurationUnit      string
	StandardMoveDuration          string
	StandardMoveDurationUnit      string
	MinimumMoveDuration           string
	MinimumMoveDurationUnit       string
	OpIsExtlyProcdWithSubcontrg   string
	PlannedDeliveryDuration       string
	MaterialGroup                 string
	PurchasingGroup               string
	NumberOfOperationPriceUnits   string
	CostElement                   string
	OpExternalProcessingPrice     string
	OpExternalProcessingCurrency  string
	OperationScrapPercent         string
	ChangedDateTime               string
	PlainLongText                 string
}{
	ProductionRoutingGroup:        "data_platform_production_routing_operation_data.ProductionRoutingGroup",
	ProductionRouting:             "data_platform_production_routing_operation_data.ProductionRouting",
	ProductionRoutingSequence:     "data_platform_production_routing_operation_data.ProductionRoutingSequence",
	ProductionRoutingOpIntID:      "data_platform_production_routing_operation_data.ProductionRoutingOpIntID",
	ProductionRoutingOpIntVersion: "data_platform_production_routing_operation_data.ProductionRoutingOpIntVersion",
	Operation:                     "data_platform_production_routing_operation_data.Operation",
	CreationDate:                  "data_platform_production_routing_operation_data.CreationDate",
	ChangeNumber:                  "data_platform_production_routing_operation_data.ChangeNumber",
	ValidityStartDate:             "data_platform_production_routing_operation_data.ValidityStartDate",
	ValidityEndDate:               "data_platform_production_routing_operation_data.ValidityEndDate",
	OperationText:                 "data_platform_production_routing_operation_data.OperationText",
	LongTextLanguage:              "data_platform_production_routing_operation_data.LongTextLanguage",
	Plant:                         "data_platform_production_routing_operation_data.Plant",
	OperationControlProfile:       "data_platform_production_routing_operation_data.OperationControlProfile",
	OperationStandardTextCode:     "data_platform_production_routing_operation_data.OperationStandardTextCode",
	WorkCenterTypeCode:            "data_platform_production_routing_operation_data.WorkCenterTypeCode",
	WorkCenterInternalID:          "data_platform_production_routing_operation_data.WorkCenterInternalID",
	CapacityCategoryCode:          "data_platform_production_routing_operation_data.CapacityCategoryCode",
	OperationCostingRelevancyType: "data_platform_production_routing_operation_data.OperationCostingRelevancyType",
	NumberOfTimeTickets:           "data_platform_production_routing_operation_data.NumberOfTimeTickets",
	NumberOfConfirmationSlips:     "data_platform_production_routing_operation_data.NumberOfConfirmationSlips",
	OperationSetupType:            "data_platform_production_routing_operation_data.OperationSetupType",
	OperationSetupGroupCategory:   "data_platform_production_routing_operation_data.OperationSetupGroupCategory",
	OperationSetupGroup:           "data_platform_production_routing_operation_data.OperationSetupGroup",
	OperationReferenceQuantity:    "data_platform_production_routing_operation_data.OperationReferenceQuantity",
	OperationUnit:                 "data_platform_production_routing_operation_data.OperationUnit",
	OpQtyToBaseQtyNmrtr:           "data_platform_production_routing_operation_data.OpQtyToBaseQtyNmrtr",
	OpQtyToBaseQtyDnmntr:          "data_platform_production_routing_operation_data.OpQtyToBaseQtyDnmntr",
	MaximumWaitDuration:           "data_platform_production_routing_operation_data.MaximumWaitDuration",
	MaximumWaitDurationUnit:       "data_platform_production_routing_operation_data.MaximumWaitDurationUnit",
	MinimumWaitDuration:           "data_platform_production_routing_operation_data.MinimumWaitDuration",
	MinimumWaitDurationUnit:       "data_platform_production_routing_operation_data.MinimumWaitDurationUnit",
	StandardQueueDuration:         "data_platform_production_routing_operation_data.StandardQueueDuration",
	StandardQueueDurationUnit:     "data_platform_production_routing_operation_data.StandardQueueDurationUnit",
	MinimumQueueDuration:          "data_platform_production_routing_operation_data.MinimumQueueDuration",
	MinimumQueueDurationUnit:      "data_platform_production_routing_operation_data.MinimumQueueDurationUnit",
	StandardMoveDuration:          "data_platform_production_routing_operation_data.StandardMoveDuration",
	StandardMoveDurationUnit:      "data_platform_production_routing_operation_data.StandardMoveDurationUnit",
	MinimumMoveDuration:           "data_platform_production_routing_operation_data.MinimumMoveDuration",
	MinimumMoveDurationUnit:       "data_platform_production_routing_operation_data.MinimumMoveDurationUnit",
	OpIsExtlyProcdWithSubcontrg:   "data_platform_production_routing_operation_data.OpIsExtlyProcdWithSubcontrg",
	PlannedDeliveryDuration:       "data_platform_production_routing_operation_data.PlannedDeliveryDuration",
	MaterialGroup:                 "data_platform_production_routing_operation_data.MaterialGroup",
	PurchasingGroup:               "data_platform_production_routing_operation_data.PurchasingGroup",
	NumberOfOperationPriceUnits:   "data_platform_production_routing_operation_data.NumberOfOperationPriceUnits",
	CostElement:                   "data_platform_production_routing_operation_data.CostElement",
	OpExternalProcessingPrice:     "data_platform_production_routing_operation_data.OpExternalProcessingPrice",
	OpExternalProcessingCurrency:  "data_platform_production_routing_operation_data.OpExternalProcessingCurrency",
	OperationScrapPercent:         "data_platform_production_routing_operation_data.OperationScrapPercent",
	ChangedDateTime:               "data_platform_production_routing_operation_data.ChangedDateTime",
	PlainLongText:                 "data_platform_production_routing_operation_data.PlainLongText",
}

// Generated where

var DataPlatformProductionRoutingOperationDatumWhere = struct {
	ProductionRoutingGroup        whereHelperstring
	ProductionRouting             whereHelperstring
	ProductionRoutingSequence     whereHelperstring
	ProductionRoutingOpIntID      whereHelperstring
	ProductionRoutingOpIntVersion whereHelperstring
	Operation                     whereHelpernull_String
	CreationDate                  whereHelpernull_String
	ChangeNumber                  whereHelpernull_String
	ValidityStartDate             whereHelpernull_String
	ValidityEndDate               whereHelpernull_String
	OperationText                 whereHelpernull_String
	LongTextLanguage              whereHelpernull_String
	Plant                         whereHelpernull_String
	OperationControlProfile       whereHelpernull_String
	OperationStandardTextCode     whereHelpernull_String
	WorkCenterTypeCode            whereHelpernull_String
	WorkCenterInternalID          whereHelpernull_String
	CapacityCategoryCode          whereHelpernull_String
	OperationCostingRelevancyType whereHelpernull_String
	NumberOfTimeTickets           whereHelpernull_String
	NumberOfConfirmationSlips     whereHelpernull_String
	OperationSetupType            whereHelpernull_String
	OperationSetupGroupCategory   whereHelpernull_String
	OperationSetupGroup           whereHelpernull_String
	OperationReferenceQuantity    whereHelpernull_String
	OperationUnit                 whereHelpernull_String
	OpQtyToBaseQtyNmrtr           whereHelpernull_String
	OpQtyToBaseQtyDnmntr          whereHelpernull_String
	MaximumWaitDuration           whereHelpernull_String
	MaximumWaitDurationUnit       whereHelpernull_String
	MinimumWaitDuration           whereHelpernull_String
	MinimumWaitDurationUnit       whereHelpernull_String
	StandardQueueDuration         whereHelpernull_String
	StandardQueueDurationUnit     whereHelpernull_String
	MinimumQueueDuration          whereHelpernull_String
	MinimumQueueDurationUnit      whereHelpernull_String
	StandardMoveDuration          whereHelpernull_String
	StandardMoveDurationUnit      whereHelpernull_String
	MinimumMoveDuration           whereHelpernull_String
	MinimumMoveDurationUnit       whereHelpernull_String
	OpIsExtlyProcdWithSubcontrg   whereHelpernull_Bool
	PlannedDeliveryDuration       whereHelpernull_Int
	MaterialGroup                 whereHelpernull_String
	PurchasingGroup               whereHelpernull_String
	NumberOfOperationPriceUnits   whereHelpernull_String
	CostElement                   whereHelpernull_String
	OpExternalProcessingPrice     whereHelpernull_String
	OpExternalProcessingCurrency  whereHelpernull_String
	OperationScrapPercent         whereHelpernull_Float32
	ChangedDateTime               whereHelpernull_String
	PlainLongText                 whereHelpernull_String
}{
	ProductionRoutingGroup:        whereHelperstring{field: "`data_platform_production_routing_operation_data`.`ProductionRoutingGroup`"},
	ProductionRouting:             whereHelperstring{field: "`data_platform_production_routing_operation_data`.`ProductionRouting`"},
	ProductionRoutingSequence:     whereHelperstring{field: "`data_platform_production_routing_operation_data`.`ProductionRoutingSequence`"},
	ProductionRoutingOpIntID:      whereHelperstring{field: "`data_platform_production_routing_operation_data`.`ProductionRoutingOpIntID`"},
	ProductionRoutingOpIntVersion: whereHelperstring{field: "`data_platform_production_routing_operation_data`.`ProductionRoutingOpIntVersion`"},
	Operation:                     whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`Operation`"},
	CreationDate:                  whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`CreationDate`"},
	ChangeNumber:                  whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`ChangeNumber`"},
	ValidityStartDate:             whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`ValidityStartDate`"},
	ValidityEndDate:               whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`ValidityEndDate`"},
	OperationText:                 whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OperationText`"},
	LongTextLanguage:              whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`LongTextLanguage`"},
	Plant:                         whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`Plant`"},
	OperationControlProfile:       whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OperationControlProfile`"},
	OperationStandardTextCode:     whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OperationStandardTextCode`"},
	WorkCenterTypeCode:            whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`WorkCenterTypeCode`"},
	WorkCenterInternalID:          whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`WorkCenterInternalID`"},
	CapacityCategoryCode:          whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`CapacityCategoryCode`"},
	OperationCostingRelevancyType: whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OperationCostingRelevancyType`"},
	NumberOfTimeTickets:           whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`NumberOfTimeTickets`"},
	NumberOfConfirmationSlips:     whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`NumberOfConfirmationSlips`"},
	OperationSetupType:            whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OperationSetupType`"},
	OperationSetupGroupCategory:   whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OperationSetupGroupCategory`"},
	OperationSetupGroup:           whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OperationSetupGroup`"},
	OperationReferenceQuantity:    whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OperationReferenceQuantity`"},
	OperationUnit:                 whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OperationUnit`"},
	OpQtyToBaseQtyNmrtr:           whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OpQtyToBaseQtyNmrtr`"},
	OpQtyToBaseQtyDnmntr:          whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OpQtyToBaseQtyDnmntr`"},
	MaximumWaitDuration:           whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`MaximumWaitDuration`"},
	MaximumWaitDurationUnit:       whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`MaximumWaitDurationUnit`"},
	MinimumWaitDuration:           whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`MinimumWaitDuration`"},
	MinimumWaitDurationUnit:       whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`MinimumWaitDurationUnit`"},
	StandardQueueDuration:         whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`StandardQueueDuration`"},
	StandardQueueDurationUnit:     whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`StandardQueueDurationUnit`"},
	MinimumQueueDuration:          whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`MinimumQueueDuration`"},
	MinimumQueueDurationUnit:      whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`MinimumQueueDurationUnit`"},
	StandardMoveDuration:          whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`StandardMoveDuration`"},
	StandardMoveDurationUnit:      whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`StandardMoveDurationUnit`"},
	MinimumMoveDuration:           whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`MinimumMoveDuration`"},
	MinimumMoveDurationUnit:       whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`MinimumMoveDurationUnit`"},
	OpIsExtlyProcdWithSubcontrg:   whereHelpernull_Bool{field: "`data_platform_production_routing_operation_data`.`OpIsExtlyProcdWithSubcontrg`"},
	PlannedDeliveryDuration:       whereHelpernull_Int{field: "`data_platform_production_routing_operation_data`.`PlannedDeliveryDuration`"},
	MaterialGroup:                 whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`MaterialGroup`"},
	PurchasingGroup:               whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`PurchasingGroup`"},
	NumberOfOperationPriceUnits:   whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`NumberOfOperationPriceUnits`"},
	CostElement:                   whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`CostElement`"},
	OpExternalProcessingPrice:     whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OpExternalProcessingPrice`"},
	OpExternalProcessingCurrency:  whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`OpExternalProcessingCurrency`"},
	OperationScrapPercent:         whereHelpernull_Float32{field: "`data_platform_production_routing_operation_data`.`OperationScrapPercent`"},
	ChangedDateTime:               whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`ChangedDateTime`"},
	PlainLongText:                 whereHelpernull_String{field: "`data_platform_production_routing_operation_data`.`PlainLongText`"},
}

// DataPlatformProductionRoutingOperationDatumRels is where relationship names are stored.
var DataPlatformProductionRoutingOperationDatumRels = struct {
}{}

// dataPlatformProductionRoutingOperationDatumR is where relationships are stored.
type dataPlatformProductionRoutingOperationDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionRoutingOperationDatumR) NewStruct() *dataPlatformProductionRoutingOperationDatumR {
	return &dataPlatformProductionRoutingOperationDatumR{}
}

// dataPlatformProductionRoutingOperationDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionRoutingOperationDatumL struct{}

var (
	dataPlatformProductionRoutingOperationDatumAllColumns            = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingSequence", "ProductionRoutingOpIntID", "ProductionRoutingOpIntVersion", "Operation", "CreationDate", "ChangeNumber", "ValidityStartDate", "ValidityEndDate", "OperationText", "LongTextLanguage", "Plant", "OperationControlProfile", "OperationStandardTextCode", "WorkCenterTypeCode", "WorkCenterInternalID", "CapacityCategoryCode", "OperationCostingRelevancyType", "NumberOfTimeTickets", "NumberOfConfirmationSlips", "OperationSetupType", "OperationSetupGroupCategory", "OperationSetupGroup", "OperationReferenceQuantity", "OperationUnit", "OpQtyToBaseQtyNmrtr", "OpQtyToBaseQtyDnmntr", "MaximumWaitDuration", "MaximumWaitDurationUnit", "MinimumWaitDuration", "MinimumWaitDurationUnit", "StandardQueueDuration", "StandardQueueDurationUnit", "MinimumQueueDuration", "MinimumQueueDurationUnit", "StandardMoveDuration", "StandardMoveDurationUnit", "MinimumMoveDuration", "MinimumMoveDurationUnit", "OpIsExtlyProcdWithSubcontrg", "PlannedDeliveryDuration", "MaterialGroup", "PurchasingGroup", "NumberOfOperationPriceUnits", "CostElement", "OpExternalProcessingPrice", "OpExternalProcessingCurrency", "OperationScrapPercent", "ChangedDateTime", "PlainLongText"}
	dataPlatformProductionRoutingOperationDatumColumnsWithoutDefault = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingSequence", "ProductionRoutingOpIntID", "ProductionRoutingOpIntVersion", "Operation", "CreationDate", "ChangeNumber", "ValidityStartDate", "ValidityEndDate", "OperationText", "LongTextLanguage", "Plant", "OperationControlProfile", "OperationStandardTextCode", "WorkCenterTypeCode", "WorkCenterInternalID", "CapacityCategoryCode", "OperationCostingRelevancyType", "NumberOfTimeTickets", "NumberOfConfirmationSlips", "OperationSetupType", "OperationSetupGroupCategory", "OperationSetupGroup", "OperationReferenceQuantity", "OperationUnit", "OpQtyToBaseQtyNmrtr", "OpQtyToBaseQtyDnmntr", "MaximumWaitDuration", "MaximumWaitDurationUnit", "MinimumWaitDuration", "MinimumWaitDurationUnit", "StandardQueueDuration", "StandardQueueDurationUnit", "MinimumQueueDuration", "MinimumQueueDurationUnit", "StandardMoveDuration", "StandardMoveDurationUnit", "MinimumMoveDuration", "MinimumMoveDurationUnit", "OpIsExtlyProcdWithSubcontrg", "PlannedDeliveryDuration", "MaterialGroup", "PurchasingGroup", "NumberOfOperationPriceUnits", "CostElement", "OpExternalProcessingPrice", "OpExternalProcessingCurrency", "OperationScrapPercent", "ChangedDateTime", "PlainLongText"}
	dataPlatformProductionRoutingOperationDatumColumnsWithDefault    = []string{}
	dataPlatformProductionRoutingOperationDatumPrimaryKeyColumns     = []string{"ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingSequence", "ProductionRoutingOpIntID", "ProductionRoutingOpIntVersion"}
	dataPlatformProductionRoutingOperationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionRoutingOperationDatumSlice is an alias for a slice of pointers to DataPlatformProductionRoutingOperationDatum.
	// This should almost always be used instead of []DataPlatformProductionRoutingOperationDatum.
	DataPlatformProductionRoutingOperationDatumSlice []*DataPlatformProductionRoutingOperationDatum

	dataPlatformProductionRoutingOperationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionRoutingOperationDatumType                 = reflect.TypeOf(&DataPlatformProductionRoutingOperationDatum{})
	dataPlatformProductionRoutingOperationDatumMapping              = queries.MakeStructMapping(dataPlatformProductionRoutingOperationDatumType)
	dataPlatformProductionRoutingOperationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionRoutingOperationDatumType, dataPlatformProductionRoutingOperationDatumMapping, dataPlatformProductionRoutingOperationDatumPrimaryKeyColumns)
	dataPlatformProductionRoutingOperationDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionRoutingOperationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionRoutingOperationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionRoutingOperationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionRoutingOperationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionRoutingOperationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionRoutingOperationDatum record from the query.
func (q dataPlatformProductionRoutingOperationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionRoutingOperationDatum, error) {
	o := &DataPlatformProductionRoutingOperationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_routing_operation_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionRoutingOperationDatum records from the query.
func (q dataPlatformProductionRoutingOperationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionRoutingOperationDatumSlice, error) {
	var o []*DataPlatformProductionRoutingOperationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionRoutingOperationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionRoutingOperationDatum records in the query.
func (q dataPlatformProductionRoutingOperationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_routing_operation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionRoutingOperationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_routing_operation_data exists")
	}

	return count > 0, nil
}

// DataPlatformProductionRoutingOperationData retrieves all the records using an executor.
func DataPlatformProductionRoutingOperationData(mods ...qm.QueryMod) dataPlatformProductionRoutingOperationDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_routing_operation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_routing_operation_data`.*"})
	}

	return dataPlatformProductionRoutingOperationDatumQuery{q}
}

// FindDataPlatformProductionRoutingOperationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionRoutingOperationDatum(ctx context.Context, exec boil.ContextExecutor, productionRoutingGroup string, productionRouting string, productionRoutingSequence string, productionRoutingOpIntID string, productionRoutingOpIntVersion string, selectCols ...string) (*DataPlatformProductionRoutingOperationDatum, error) {
	dataPlatformProductionRoutingOperationDatumObj := &DataPlatformProductionRoutingOperationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_routing_operation_data` where `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingSequence`=? AND `ProductionRoutingOpIntID`=? AND `ProductionRoutingOpIntVersion`=?", sel,
	)

	q := queries.Raw(query, productionRoutingGroup, productionRouting, productionRoutingSequence, productionRoutingOpIntID, productionRoutingOpIntVersion)

	err := q.Bind(ctx, exec, dataPlatformProductionRoutingOperationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_routing_operation_data")
	}

	return dataPlatformProductionRoutingOperationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionRoutingOperationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_routing_operation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionRoutingOperationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionRoutingOperationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionRoutingOperationDatumInsertCache[key]
	dataPlatformProductionRoutingOperationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionRoutingOperationDatumAllColumns,
			dataPlatformProductionRoutingOperationDatumColumnsWithDefault,
			dataPlatformProductionRoutingOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionRoutingOperationDatumType, dataPlatformProductionRoutingOperationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionRoutingOperationDatumType, dataPlatformProductionRoutingOperationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_routing_operation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_routing_operation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_routing_operation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionRoutingOperationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_routing_operation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionRoutingGroup,
		o.ProductionRouting,
		o.ProductionRoutingSequence,
		o.ProductionRoutingOpIntID,
		o.ProductionRoutingOpIntVersion,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_routing_operation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionRoutingOperationDatumInsertCacheMut.Lock()
		dataPlatformProductionRoutingOperationDatumInsertCache[key] = cache
		dataPlatformProductionRoutingOperationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionRoutingOperationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionRoutingOperationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionRoutingOperationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionRoutingOperationDatumUpdateCache[key]
	dataPlatformProductionRoutingOperationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionRoutingOperationDatumAllColumns,
			dataPlatformProductionRoutingOperationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_routing_operation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_routing_operation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionRoutingOperationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionRoutingOperationDatumType, dataPlatformProductionRoutingOperationDatumMapping, append(wl, dataPlatformProductionRoutingOperationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_routing_operation_data row")
	}

	if !cached {
		dataPlatformProductionRoutingOperationDatumUpdateCacheMut.Lock()
		dataPlatformProductionRoutingOperationDatumUpdateCache[key] = cache
		dataPlatformProductionRoutingOperationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionRoutingOperationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_routing_operation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionRoutingOperationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionRoutingOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_routing_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionRoutingOperationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionRoutingOperationDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionRoutingOperationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionRoutingOperationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_routing_operation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionRoutingOperationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionRoutingOperationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionRoutingOperationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionRoutingOperationDatumUpsertCache[key]
	dataPlatformProductionRoutingOperationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionRoutingOperationDatumAllColumns,
			dataPlatformProductionRoutingOperationDatumColumnsWithDefault,
			dataPlatformProductionRoutingOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionRoutingOperationDatumAllColumns,
			dataPlatformProductionRoutingOperationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_routing_operation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_routing_operation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_routing_operation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionRoutingOperationDatumType, dataPlatformProductionRoutingOperationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionRoutingOperationDatumType, dataPlatformProductionRoutingOperationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_routing_operation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionRoutingOperationDatumType, dataPlatformProductionRoutingOperationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_routing_operation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_routing_operation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionRoutingOperationDatumUpsertCacheMut.Lock()
		dataPlatformProductionRoutingOperationDatumUpsertCache[key] = cache
		dataPlatformProductionRoutingOperationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionRoutingOperationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionRoutingOperationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionRoutingOperationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionRoutingOperationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_routing_operation_data` WHERE `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingSequence`=? AND `ProductionRoutingOpIntID`=? AND `ProductionRoutingOpIntVersion`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_routing_operation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionRoutingOperationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionRoutingOperationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_routing_operation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionRoutingOperationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionRoutingOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_routing_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionRoutingOperationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionRoutingOperationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionRoutingOperationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionRoutingOperationDatum(ctx, exec, o.ProductionRoutingGroup, o.ProductionRouting, o.ProductionRoutingSequence, o.ProductionRoutingOpIntID, o.ProductionRoutingOpIntVersion)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionRoutingOperationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionRoutingOperationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionRoutingOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_routing_operation_data`.* FROM `data_platform_production_routing_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionRoutingOperationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionRoutingOperationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionRoutingOperationDatumExists checks if the DataPlatformProductionRoutingOperationDatum row exists.
func DataPlatformProductionRoutingOperationDatumExists(ctx context.Context, exec boil.ContextExecutor, productionRoutingGroup string, productionRouting string, productionRoutingSequence string, productionRoutingOpIntID string, productionRoutingOpIntVersion string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_routing_operation_data` where `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingSequence`=? AND `ProductionRoutingOpIntID`=? AND `ProductionRoutingOpIntVersion`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionRoutingGroup, productionRouting, productionRoutingSequence, productionRoutingOpIntID, productionRoutingOpIntVersion)
	}
	row := exec.QueryRowContext(ctx, sql, productionRoutingGroup, productionRouting, productionRoutingSequence, productionRoutingOpIntID, productionRoutingOpIntVersion)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_routing_operation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionRoutingOperationDatum row exists.
func (o *DataPlatformProductionRoutingOperationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionRoutingOperationDatumExists(ctx, exec, o.ProductionRoutingGroup, o.ProductionRouting, o.ProductionRoutingSequence, o.ProductionRoutingOpIntID, o.ProductionRoutingOpIntVersion)
}
