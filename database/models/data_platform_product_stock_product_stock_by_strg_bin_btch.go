// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductStockProductStockBySTRGBinBTCH is an object representing the database table.
type DataPlatformProductStockProductStockBySTRGBinBTCH struct {
	Product                   string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner           int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                     string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	StorageLocation           string      `boil:"StorageLocation" json:"StorageLocation" toml:"StorageLocation" yaml:"StorageLocation"`
	StorageBin                string      `boil:"StorageBin" json:"StorageBin" toml:"StorageBin" yaml:"StorageBin"`
	Batch                     string      `boil:"Batch" json:"Batch" toml:"Batch" yaml:"Batch"`
	InventoryStockType        null.String `boil:"InventoryStockType" json:"InventoryStockType,omitempty" toml:"InventoryStockType" yaml:"InventoryStockType,omitempty"`
	InventorySpecialStockType null.String `boil:"InventorySpecialStockType" json:"InventorySpecialStockType,omitempty" toml:"InventorySpecialStockType" yaml:"InventorySpecialStockType,omitempty"`
	ProductStock              float32     `boil:"ProductStock" json:"ProductStock" toml:"ProductStock" yaml:"ProductStock"`

	R *dataPlatformProductStockProductStockBySTRGBinBTCHR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductStockProductStockBySTRGBinBTCHL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductStockProductStockBySTRGBinBTCHColumns = struct {
	Product                   string
	BusinessPartner           string
	Plant                     string
	StorageLocation           string
	StorageBin                string
	Batch                     string
	InventoryStockType        string
	InventorySpecialStockType string
	ProductStock              string
}{
	Product:                   "Product",
	BusinessPartner:           "BusinessPartner",
	Plant:                     "Plant",
	StorageLocation:           "StorageLocation",
	StorageBin:                "StorageBin",
	Batch:                     "Batch",
	InventoryStockType:        "InventoryStockType",
	InventorySpecialStockType: "InventorySpecialStockType",
	ProductStock:              "ProductStock",
}

var DataPlatformProductStockProductStockBySTRGBinBTCHTableColumns = struct {
	Product                   string
	BusinessPartner           string
	Plant                     string
	StorageLocation           string
	StorageBin                string
	Batch                     string
	InventoryStockType        string
	InventorySpecialStockType string
	ProductStock              string
}{
	Product:                   "data_platform_product_stock_product_stock_by_strg_bin_btch.Product",
	BusinessPartner:           "data_platform_product_stock_product_stock_by_strg_bin_btch.BusinessPartner",
	Plant:                     "data_platform_product_stock_product_stock_by_strg_bin_btch.Plant",
	StorageLocation:           "data_platform_product_stock_product_stock_by_strg_bin_btch.StorageLocation",
	StorageBin:                "data_platform_product_stock_product_stock_by_strg_bin_btch.StorageBin",
	Batch:                     "data_platform_product_stock_product_stock_by_strg_bin_btch.Batch",
	InventoryStockType:        "data_platform_product_stock_product_stock_by_strg_bin_btch.InventoryStockType",
	InventorySpecialStockType: "data_platform_product_stock_product_stock_by_strg_bin_btch.InventorySpecialStockType",
	ProductStock:              "data_platform_product_stock_product_stock_by_strg_bin_btch.ProductStock",
}

// Generated where

var DataPlatformProductStockProductStockBySTRGBinBTCHWhere = struct {
	Product                   whereHelperstring
	BusinessPartner           whereHelperint
	Plant                     whereHelperstring
	StorageLocation           whereHelperstring
	StorageBin                whereHelperstring
	Batch                     whereHelperstring
	InventoryStockType        whereHelpernull_String
	InventorySpecialStockType whereHelpernull_String
	ProductStock              whereHelperfloat32
}{
	Product:                   whereHelperstring{field: "`data_platform_product_stock_product_stock_by_strg_bin_btch`.`Product`"},
	BusinessPartner:           whereHelperint{field: "`data_platform_product_stock_product_stock_by_strg_bin_btch`.`BusinessPartner`"},
	Plant:                     whereHelperstring{field: "`data_platform_product_stock_product_stock_by_strg_bin_btch`.`Plant`"},
	StorageLocation:           whereHelperstring{field: "`data_platform_product_stock_product_stock_by_strg_bin_btch`.`StorageLocation`"},
	StorageBin:                whereHelperstring{field: "`data_platform_product_stock_product_stock_by_strg_bin_btch`.`StorageBin`"},
	Batch:                     whereHelperstring{field: "`data_platform_product_stock_product_stock_by_strg_bin_btch`.`Batch`"},
	InventoryStockType:        whereHelpernull_String{field: "`data_platform_product_stock_product_stock_by_strg_bin_btch`.`InventoryStockType`"},
	InventorySpecialStockType: whereHelpernull_String{field: "`data_platform_product_stock_product_stock_by_strg_bin_btch`.`InventorySpecialStockType`"},
	ProductStock:              whereHelperfloat32{field: "`data_platform_product_stock_product_stock_by_strg_bin_btch`.`ProductStock`"},
}

// DataPlatformProductStockProductStockBySTRGBinBTCHRels is where relationship names are stored.
var DataPlatformProductStockProductStockBySTRGBinBTCHRels = struct {
	BusinessPartnerDataPlatformProductMasterStorageBinDatum                 string
	BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches string
}{
	BusinessPartnerDataPlatformProductMasterStorageBinDatum:                 "BusinessPartnerDataPlatformProductMasterStorageBinDatum",
	BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches: "BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches",
}

// dataPlatformProductStockProductStockBySTRGBinBTCHR is where relationships are stored.
type dataPlatformProductStockProductStockBySTRGBinBTCHR struct {
	BusinessPartnerDataPlatformProductMasterStorageBinDatum                 *DataPlatformProductMasterStorageBinDatum                   `boil:"BusinessPartnerDataPlatformProductMasterStorageBinDatum" json:"BusinessPartnerDataPlatformProductMasterStorageBinDatum" toml:"BusinessPartnerDataPlatformProductMasterStorageBinDatum" yaml:"BusinessPartnerDataPlatformProductMasterStorageBinDatum"`
	BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches DataPlatformProductStockProductStockAvailBySTRGBinBTCHSlice `boil:"BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches" json:"BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches" toml:"BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches" yaml:"BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductStockProductStockBySTRGBinBTCHR) NewStruct() *dataPlatformProductStockProductStockBySTRGBinBTCHR {
	return &dataPlatformProductStockProductStockBySTRGBinBTCHR{}
}

func (r *dataPlatformProductStockProductStockBySTRGBinBTCHR) GetBusinessPartnerDataPlatformProductMasterStorageBinDatum() *DataPlatformProductMasterStorageBinDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterStorageBinDatum
}

func (r *dataPlatformProductStockProductStockBySTRGBinBTCHR) GetBusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches() DataPlatformProductStockProductStockAvailBySTRGBinBTCHSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches
}

// dataPlatformProductStockProductStockBySTRGBinBTCHL is where Load methods for each relationship are stored.
type dataPlatformProductStockProductStockBySTRGBinBTCHL struct{}

var (
	dataPlatformProductStockProductStockBySTRGBinBTCHAllColumns            = []string{"Product", "BusinessPartner", "Plant", "StorageLocation", "StorageBin", "Batch", "InventoryStockType", "InventorySpecialStockType", "ProductStock"}
	dataPlatformProductStockProductStockBySTRGBinBTCHColumnsWithoutDefault = []string{"Product", "BusinessPartner", "Plant", "StorageLocation", "StorageBin", "Batch", "InventoryStockType", "InventorySpecialStockType", "ProductStock"}
	dataPlatformProductStockProductStockBySTRGBinBTCHColumnsWithDefault    = []string{}
	dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyColumns     = []string{"Product", "BusinessPartner", "Plant", "StorageLocation", "StorageBin", "Batch"}
	dataPlatformProductStockProductStockBySTRGBinBTCHGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductStockProductStockBySTRGBinBTCHSlice is an alias for a slice of pointers to DataPlatformProductStockProductStockBySTRGBinBTCH.
	// This should almost always be used instead of []DataPlatformProductStockProductStockBySTRGBinBTCH.
	DataPlatformProductStockProductStockBySTRGBinBTCHSlice []*DataPlatformProductStockProductStockBySTRGBinBTCH

	dataPlatformProductStockProductStockBySTRGBinBTCHQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductStockProductStockBySTRGBinBTCHType                 = reflect.TypeOf(&DataPlatformProductStockProductStockBySTRGBinBTCH{})
	dataPlatformProductStockProductStockBySTRGBinBTCHMapping              = queries.MakeStructMapping(dataPlatformProductStockProductStockBySTRGBinBTCHType)
	dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductStockProductStockBySTRGBinBTCHType, dataPlatformProductStockProductStockBySTRGBinBTCHMapping, dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyColumns)
	dataPlatformProductStockProductStockBySTRGBinBTCHInsertCacheMut       sync.RWMutex
	dataPlatformProductStockProductStockBySTRGBinBTCHInsertCache          = make(map[string]insertCache)
	dataPlatformProductStockProductStockBySTRGBinBTCHUpdateCacheMut       sync.RWMutex
	dataPlatformProductStockProductStockBySTRGBinBTCHUpdateCache          = make(map[string]updateCache)
	dataPlatformProductStockProductStockBySTRGBinBTCHUpsertCacheMut       sync.RWMutex
	dataPlatformProductStockProductStockBySTRGBinBTCHUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductStockProductStockBySTRGBinBTCH record from the query.
func (q dataPlatformProductStockProductStockBySTRGBinBTCHQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductStockProductStockBySTRGBinBTCH, error) {
	o := &DataPlatformProductStockProductStockBySTRGBinBTCH{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_stock_product_stock_by_strg_bin_btch")
	}

	return o, nil
}

// All returns all DataPlatformProductStockProductStockBySTRGBinBTCH records from the query.
func (q dataPlatformProductStockProductStockBySTRGBinBTCHQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductStockProductStockBySTRGBinBTCHSlice, error) {
	var o []*DataPlatformProductStockProductStockBySTRGBinBTCH

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductStockProductStockBySTRGBinBTCH slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductStockProductStockBySTRGBinBTCH records in the query.
func (q dataPlatformProductStockProductStockBySTRGBinBTCHQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_stock_product_stock_by_strg_bin_btch rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductStockProductStockBySTRGBinBTCHQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_stock_product_stock_by_strg_bin_btch exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformProductMasterStorageBinDatum pointed to by the foreign key.
func (o *DataPlatformProductStockProductStockBySTRGBinBTCH) BusinessPartnerDataPlatformProductMasterStorageBinDatum(mods ...qm.QueryMod) dataPlatformProductMasterStorageBinDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterStorageBinData(queryMods...)
}

// BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches retrieves all the data_platform_product_stock_product_stock_avail_by_strg_bin_btch's DataPlatformProductStockProductStockAvailBySTRGBinBtches with an executor via BusinessPartner column.
func (o *DataPlatformProductStockProductStockBySTRGBinBTCH) BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches(mods ...qm.QueryMod) dataPlatformProductStockProductStockAvailBySTRGBinBTCHQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_avail_by_strg_bin_btch`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockAvailBySTRGBinBtches(queryMods...)
}

// LoadBusinessPartnerDataPlatformProductMasterStorageBinDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductStockProductStockBySTRGBinBTCHL) LoadBusinessPartnerDataPlatformProductMasterStorageBinDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockProductStockBySTRGBinBTCH interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockProductStockBySTRGBinBTCH
	var object *DataPlatformProductStockProductStockBySTRGBinBTCH

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockProductStockBySTRGBinBTCH.(*DataPlatformProductStockProductStockBySTRGBinBTCH)
		if !ok {
			object = new(DataPlatformProductStockProductStockBySTRGBinBTCH)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockProductStockBySTRGBinBTCH)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockProductStockBySTRGBinBTCH))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockProductStockBySTRGBinBTCH.(*[]*DataPlatformProductStockProductStockBySTRGBinBTCH)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockProductStockBySTRGBinBTCH)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockProductStockBySTRGBinBTCH))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockProductStockBySTRGBinBTCHR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockProductStockBySTRGBinBTCHR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_storage_bin_data`),
		qm.WhereIn(`data_platform_product_master_storage_bin_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterStorageBinDatum")
	}

	var resultSlice []*DataPlatformProductMasterStorageBinDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterStorageBinDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_storage_bin_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_storage_bin_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformProductMasterStorageBinDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterStorageBinDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductStockProductStockBySTRGBinBTCHL) LoadBusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockProductStockBySTRGBinBTCH interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockProductStockBySTRGBinBTCH
	var object *DataPlatformProductStockProductStockBySTRGBinBTCH

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockProductStockBySTRGBinBTCH.(*DataPlatformProductStockProductStockBySTRGBinBTCH)
		if !ok {
			object = new(DataPlatformProductStockProductStockBySTRGBinBTCH)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockProductStockBySTRGBinBTCH)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockProductStockBySTRGBinBTCH))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockProductStockBySTRGBinBTCH.(*[]*DataPlatformProductStockProductStockBySTRGBinBTCH)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockProductStockBySTRGBinBTCH)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockProductStockBySTRGBinBTCH))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockProductStockBySTRGBinBTCHR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockProductStockBySTRGBinBTCHR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_avail_by_strg_bin_btch`),
		qm.WhereIn(`data_platform_product_stock_product_stock_avail_by_strg_bin_btch.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_avail_by_strg_bin_btch")
	}

	var resultSlice []*DataPlatformProductStockProductStockAvailBySTRGBinBTCH
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_avail_by_strg_bin_btch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_avail_by_strg_bin_btch")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_avail_by_strg_bin_btch")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches = append(local.R.BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches, foreign)
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformProductMasterStorageBinDatum of the dataPlatformProductStockProductStockBySTRGBinBTCH to the related item.
// Sets o.R.BusinessPartnerDataPlatformProductMasterStorageBinDatum to related.
func (o *DataPlatformProductStockProductStockBySTRGBinBTCH) SetBusinessPartnerDataPlatformProductMasterStorageBinDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterStorageBinDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_stock_product_stock_by_strg_bin_btch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Product, o.BusinessPartner, o.Plant, o.StorageLocation, o.StorageBin, o.Batch}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProductStockProductStockBySTRGBinBTCHR{
			BusinessPartnerDataPlatformProductMasterStorageBinDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterStorageBinDatum = related
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches adds the given related objects to the existing relationships
// of the data_platform_product_stock_product_stock_by_strg_bin_btch, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches.
func (o *DataPlatformProductStockProductStockBySTRGBinBTCH) AddBusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockAvailBySTRGBinBTCH) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_avail_by_strg_bin_btch` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockAvailBySTRGBinBTCHPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant, rel.StorageLocation, rel.StorageBin, rel.Batch, rel.ProductStockAvailabilityDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductStockProductStockBySTRGBinBTCHR{
			BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches = append(o.R.BusinessPartnerDataPlatformProductStockProductStockAvailBySTRGBinBtches, related...)
	}

	return nil
}

// DataPlatformProductStockProductStockBySTRGBinBtches retrieves all the records using an executor.
func DataPlatformProductStockProductStockBySTRGBinBtches(mods ...qm.QueryMod) dataPlatformProductStockProductStockBySTRGBinBTCHQuery {
	mods = append(mods, qm.From("`data_platform_product_stock_product_stock_by_strg_bin_btch`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_stock_product_stock_by_strg_bin_btch`.*"})
	}

	return dataPlatformProductStockProductStockBySTRGBinBTCHQuery{q}
}

// FindDataPlatformProductStockProductStockBySTRGBinBTCH retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductStockProductStockBySTRGBinBTCH(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, storageLocation string, storageBin string, batch string, selectCols ...string) (*DataPlatformProductStockProductStockBySTRGBinBTCH, error) {
	dataPlatformProductStockProductStockBySTRGBinBTCHObj := &DataPlatformProductStockProductStockBySTRGBinBTCH{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_stock_product_stock_by_strg_bin_btch` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=? AND `StorageBin`=? AND `Batch`=?", sel,
	)

	q := queries.Raw(query, product, businessPartner, plant, storageLocation, storageBin, batch)

	err := q.Bind(ctx, exec, dataPlatformProductStockProductStockBySTRGBinBTCHObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_stock_product_stock_by_strg_bin_btch")
	}

	return dataPlatformProductStockProductStockBySTRGBinBTCHObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductStockProductStockBySTRGBinBTCH) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_stock_product_stock_by_strg_bin_btch provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductStockProductStockBySTRGBinBTCHColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductStockProductStockBySTRGBinBTCHInsertCacheMut.RLock()
	cache, cached := dataPlatformProductStockProductStockBySTRGBinBTCHInsertCache[key]
	dataPlatformProductStockProductStockBySTRGBinBTCHInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductStockProductStockBySTRGBinBTCHAllColumns,
			dataPlatformProductStockProductStockBySTRGBinBTCHColumnsWithDefault,
			dataPlatformProductStockProductStockBySTRGBinBTCHColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductStockProductStockBySTRGBinBTCHType, dataPlatformProductStockProductStockBySTRGBinBTCHMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductStockProductStockBySTRGBinBTCHType, dataPlatformProductStockProductStockBySTRGBinBTCHMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_stock_product_stock_by_strg_bin_btch` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_stock_product_stock_by_strg_bin_btch` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_stock_product_stock_by_strg_bin_btch` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_stock_product_stock_by_strg_bin_btch")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.BusinessPartner,
		o.Plant,
		o.StorageLocation,
		o.StorageBin,
		o.Batch,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_stock_product_stock_by_strg_bin_btch")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductStockProductStockBySTRGBinBTCHInsertCacheMut.Lock()
		dataPlatformProductStockProductStockBySTRGBinBTCHInsertCache[key] = cache
		dataPlatformProductStockProductStockBySTRGBinBTCHInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductStockProductStockBySTRGBinBTCH.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductStockProductStockBySTRGBinBTCH) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductStockProductStockBySTRGBinBTCHUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductStockProductStockBySTRGBinBTCHUpdateCache[key]
	dataPlatformProductStockProductStockBySTRGBinBTCHUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductStockProductStockBySTRGBinBTCHAllColumns,
			dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_stock_product_stock_by_strg_bin_btch, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_stock_product_stock_by_strg_bin_btch` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductStockProductStockBySTRGBinBTCHType, dataPlatformProductStockProductStockBySTRGBinBTCHMapping, append(wl, dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_stock_product_stock_by_strg_bin_btch row")
	}

	if !cached {
		dataPlatformProductStockProductStockBySTRGBinBTCHUpdateCacheMut.Lock()
		dataPlatformProductStockProductStockBySTRGBinBTCHUpdateCache[key] = cache
		dataPlatformProductStockProductStockBySTRGBinBTCHUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductStockProductStockBySTRGBinBTCHQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_stock_product_stock_by_strg_bin_btch")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductStockProductStockBySTRGBinBTCHSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_stock_product_stock_by_strg_bin_btch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductStockProductStockBySTRGBinBTCH slice")
	}

	return nil
}

var mySQLDataPlatformProductStockProductStockBySTRGBinBTCHUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductStockProductStockBySTRGBinBTCH) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_stock_product_stock_by_strg_bin_btch provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductStockProductStockBySTRGBinBTCHColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductStockProductStockBySTRGBinBTCHUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductStockProductStockBySTRGBinBTCHUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductStockProductStockBySTRGBinBTCHUpsertCache[key]
	dataPlatformProductStockProductStockBySTRGBinBTCHUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductStockProductStockBySTRGBinBTCHAllColumns,
			dataPlatformProductStockProductStockBySTRGBinBTCHColumnsWithDefault,
			dataPlatformProductStockProductStockBySTRGBinBTCHColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductStockProductStockBySTRGBinBTCHAllColumns,
			dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_stock_product_stock_by_strg_bin_btch, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_stock_product_stock_by_strg_bin_btch`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_stock_product_stock_by_strg_bin_btch` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductStockProductStockBySTRGBinBTCHType, dataPlatformProductStockProductStockBySTRGBinBTCHMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductStockProductStockBySTRGBinBTCHType, dataPlatformProductStockProductStockBySTRGBinBTCHMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_stock_product_stock_by_strg_bin_btch")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductStockProductStockBySTRGBinBTCHType, dataPlatformProductStockProductStockBySTRGBinBTCHMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_stock_product_stock_by_strg_bin_btch")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_stock_product_stock_by_strg_bin_btch")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductStockProductStockBySTRGBinBTCHUpsertCacheMut.Lock()
		dataPlatformProductStockProductStockBySTRGBinBTCHUpsertCache[key] = cache
		dataPlatformProductStockProductStockBySTRGBinBTCHUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductStockProductStockBySTRGBinBTCH record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductStockProductStockBySTRGBinBTCH) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductStockProductStockBySTRGBinBTCH provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_stock_product_stock_by_strg_bin_btch` WHERE `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=? AND `StorageBin`=? AND `Batch`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_stock_product_stock_by_strg_bin_btch")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductStockProductStockBySTRGBinBTCHQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductStockProductStockBySTRGBinBTCHQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_stock_product_stock_by_strg_bin_btch")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductStockProductStockBySTRGBinBTCHSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_stock_product_stock_by_strg_bin_btch` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductStockProductStockBySTRGBinBTCH slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductStockProductStockBySTRGBinBTCH) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductStockProductStockBySTRGBinBTCH(ctx, exec, o.Product, o.BusinessPartner, o.Plant, o.StorageLocation, o.StorageBin, o.Batch)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductStockProductStockBySTRGBinBTCHSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductStockProductStockBySTRGBinBTCHSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_stock_product_stock_by_strg_bin_btch`.* FROM `data_platform_product_stock_product_stock_by_strg_bin_btch` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductStockProductStockBySTRGBinBTCHPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductStockProductStockBySTRGBinBTCHSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductStockProductStockBySTRGBinBTCHExists checks if the DataPlatformProductStockProductStockBySTRGBinBTCH row exists.
func DataPlatformProductStockProductStockBySTRGBinBTCHExists(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, storageLocation string, storageBin string, batch string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_stock_product_stock_by_strg_bin_btch` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `StorageLocation`=? AND `StorageBin`=? AND `Batch`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, businessPartner, plant, storageLocation, storageBin, batch)
	}
	row := exec.QueryRowContext(ctx, sql, product, businessPartner, plant, storageLocation, storageBin, batch)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_stock_product_stock_by_strg_bin_btch exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductStockProductStockBySTRGBinBTCH row exists.
func (o *DataPlatformProductStockProductStockBySTRGBinBTCH) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductStockProductStockBySTRGBinBTCHExists(ctx, exec, o.Product, o.BusinessPartner, o.Plant, o.StorageLocation, o.StorageBin, o.Batch)
}
