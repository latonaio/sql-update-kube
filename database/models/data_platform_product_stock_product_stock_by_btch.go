// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductStockProductStockByBTCH is an object representing the database table.
type DataPlatformProductStockProductStockByBTCH struct {
	Product                   string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner           int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                     string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	Batch                     string      `boil:"Batch" json:"Batch" toml:"Batch" yaml:"Batch"`
	InventoryStockType        null.String `boil:"InventoryStockType" json:"InventoryStockType,omitempty" toml:"InventoryStockType" yaml:"InventoryStockType,omitempty"`
	InventorySpecialStockType null.String `boil:"InventorySpecialStockType" json:"InventorySpecialStockType,omitempty" toml:"InventorySpecialStockType" yaml:"InventorySpecialStockType,omitempty"`
	ProductStock              float32     `boil:"ProductStock" json:"ProductStock" toml:"ProductStock" yaml:"ProductStock"`

	R *dataPlatformProductStockProductStockByBTCHR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductStockProductStockByBTCHL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductStockProductStockByBTCHColumns = struct {
	Product                   string
	BusinessPartner           string
	Plant                     string
	Batch                     string
	InventoryStockType        string
	InventorySpecialStockType string
	ProductStock              string
}{
	Product:                   "Product",
	BusinessPartner:           "BusinessPartner",
	Plant:                     "Plant",
	Batch:                     "Batch",
	InventoryStockType:        "InventoryStockType",
	InventorySpecialStockType: "InventorySpecialStockType",
	ProductStock:              "ProductStock",
}

var DataPlatformProductStockProductStockByBTCHTableColumns = struct {
	Product                   string
	BusinessPartner           string
	Plant                     string
	Batch                     string
	InventoryStockType        string
	InventorySpecialStockType string
	ProductStock              string
}{
	Product:                   "data_platform_product_stock_product_stock_by_btch.Product",
	BusinessPartner:           "data_platform_product_stock_product_stock_by_btch.BusinessPartner",
	Plant:                     "data_platform_product_stock_product_stock_by_btch.Plant",
	Batch:                     "data_platform_product_stock_product_stock_by_btch.Batch",
	InventoryStockType:        "data_platform_product_stock_product_stock_by_btch.InventoryStockType",
	InventorySpecialStockType: "data_platform_product_stock_product_stock_by_btch.InventorySpecialStockType",
	ProductStock:              "data_platform_product_stock_product_stock_by_btch.ProductStock",
}

// Generated where

var DataPlatformProductStockProductStockByBTCHWhere = struct {
	Product                   whereHelperstring
	BusinessPartner           whereHelperint
	Plant                     whereHelperstring
	Batch                     whereHelperstring
	InventoryStockType        whereHelpernull_String
	InventorySpecialStockType whereHelpernull_String
	ProductStock              whereHelperfloat32
}{
	Product:                   whereHelperstring{field: "`data_platform_product_stock_product_stock_by_btch`.`Product`"},
	BusinessPartner:           whereHelperint{field: "`data_platform_product_stock_product_stock_by_btch`.`BusinessPartner`"},
	Plant:                     whereHelperstring{field: "`data_platform_product_stock_product_stock_by_btch`.`Plant`"},
	Batch:                     whereHelperstring{field: "`data_platform_product_stock_product_stock_by_btch`.`Batch`"},
	InventoryStockType:        whereHelpernull_String{field: "`data_platform_product_stock_product_stock_by_btch`.`InventoryStockType`"},
	InventorySpecialStockType: whereHelpernull_String{field: "`data_platform_product_stock_product_stock_by_btch`.`InventorySpecialStockType`"},
	ProductStock:              whereHelperfloat32{field: "`data_platform_product_stock_product_stock_by_btch`.`ProductStock`"},
}

// DataPlatformProductStockProductStockByBTCHRels is where relationship names are stored.
var DataPlatformProductStockProductStockByBTCHRels = struct {
	BusinessPartnerDataPlatformPlantStorageLocationDatum   string
	BatchDataPlatformProductStockProductStockAvailByBtches string
}{
	BusinessPartnerDataPlatformPlantStorageLocationDatum:   "BusinessPartnerDataPlatformPlantStorageLocationDatum",
	BatchDataPlatformProductStockProductStockAvailByBtches: "BatchDataPlatformProductStockProductStockAvailByBtches",
}

// dataPlatformProductStockProductStockByBTCHR is where relationships are stored.
type dataPlatformProductStockProductStockByBTCHR struct {
	BusinessPartnerDataPlatformPlantStorageLocationDatum   *DataPlatformPlantStorageLocationDatum               `boil:"BusinessPartnerDataPlatformPlantStorageLocationDatum" json:"BusinessPartnerDataPlatformPlantStorageLocationDatum" toml:"BusinessPartnerDataPlatformPlantStorageLocationDatum" yaml:"BusinessPartnerDataPlatformPlantStorageLocationDatum"`
	BatchDataPlatformProductStockProductStockAvailByBtches DataPlatformProductStockProductStockAvailByBTCHSlice `boil:"BatchDataPlatformProductStockProductStockAvailByBtches" json:"BatchDataPlatformProductStockProductStockAvailByBtches" toml:"BatchDataPlatformProductStockProductStockAvailByBtches" yaml:"BatchDataPlatformProductStockProductStockAvailByBtches"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductStockProductStockByBTCHR) NewStruct() *dataPlatformProductStockProductStockByBTCHR {
	return &dataPlatformProductStockProductStockByBTCHR{}
}

func (r *dataPlatformProductStockProductStockByBTCHR) GetBusinessPartnerDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformProductStockProductStockByBTCHR) GetBatchDataPlatformProductStockProductStockAvailByBtches() DataPlatformProductStockProductStockAvailByBTCHSlice {
	if r == nil {
		return nil
	}
	return r.BatchDataPlatformProductStockProductStockAvailByBtches
}

// dataPlatformProductStockProductStockByBTCHL is where Load methods for each relationship are stored.
type dataPlatformProductStockProductStockByBTCHL struct{}

var (
	dataPlatformProductStockProductStockByBTCHAllColumns            = []string{"Product", "BusinessPartner", "Plant", "Batch", "InventoryStockType", "InventorySpecialStockType", "ProductStock"}
	dataPlatformProductStockProductStockByBTCHColumnsWithoutDefault = []string{"Product", "BusinessPartner", "Plant", "Batch", "InventoryStockType", "InventorySpecialStockType", "ProductStock"}
	dataPlatformProductStockProductStockByBTCHColumnsWithDefault    = []string{}
	dataPlatformProductStockProductStockByBTCHPrimaryKeyColumns     = []string{"Product", "BusinessPartner", "Plant", "Batch"}
	dataPlatformProductStockProductStockByBTCHGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductStockProductStockByBTCHSlice is an alias for a slice of pointers to DataPlatformProductStockProductStockByBTCH.
	// This should almost always be used instead of []DataPlatformProductStockProductStockByBTCH.
	DataPlatformProductStockProductStockByBTCHSlice []*DataPlatformProductStockProductStockByBTCH

	dataPlatformProductStockProductStockByBTCHQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductStockProductStockByBTCHType                 = reflect.TypeOf(&DataPlatformProductStockProductStockByBTCH{})
	dataPlatformProductStockProductStockByBTCHMapping              = queries.MakeStructMapping(dataPlatformProductStockProductStockByBTCHType)
	dataPlatformProductStockProductStockByBTCHPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductStockProductStockByBTCHType, dataPlatformProductStockProductStockByBTCHMapping, dataPlatformProductStockProductStockByBTCHPrimaryKeyColumns)
	dataPlatformProductStockProductStockByBTCHInsertCacheMut       sync.RWMutex
	dataPlatformProductStockProductStockByBTCHInsertCache          = make(map[string]insertCache)
	dataPlatformProductStockProductStockByBTCHUpdateCacheMut       sync.RWMutex
	dataPlatformProductStockProductStockByBTCHUpdateCache          = make(map[string]updateCache)
	dataPlatformProductStockProductStockByBTCHUpsertCacheMut       sync.RWMutex
	dataPlatformProductStockProductStockByBTCHUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductStockProductStockByBTCH record from the query.
func (q dataPlatformProductStockProductStockByBTCHQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductStockProductStockByBTCH, error) {
	o := &DataPlatformProductStockProductStockByBTCH{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_stock_product_stock_by_btch")
	}

	return o, nil
}

// All returns all DataPlatformProductStockProductStockByBTCH records from the query.
func (q dataPlatformProductStockProductStockByBTCHQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductStockProductStockByBTCHSlice, error) {
	var o []*DataPlatformProductStockProductStockByBTCH

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductStockProductStockByBTCH slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductStockProductStockByBTCH records in the query.
func (q dataPlatformProductStockProductStockByBTCHQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_stock_product_stock_by_btch rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductStockProductStockByBTCHQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_stock_product_stock_by_btch exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformProductStockProductStockByBTCH) BusinessPartnerDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// BatchDataPlatformProductStockProductStockAvailByBtches retrieves all the data_platform_product_stock_product_stock_avail_by_btch's DataPlatformProductStockProductStockAvailByBtches with an executor via Batch column.
func (o *DataPlatformProductStockProductStockByBTCH) BatchDataPlatformProductStockProductStockAvailByBtches(mods ...qm.QueryMod) dataPlatformProductStockProductStockAvailByBTCHQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_avail_by_btch`.`Batch`=?", o.Batch),
	)

	return DataPlatformProductStockProductStockAvailByBtches(queryMods...)
}

// LoadBusinessPartnerDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductStockProductStockByBTCHL) LoadBusinessPartnerDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockProductStockByBTCH interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockProductStockByBTCH
	var object *DataPlatformProductStockProductStockByBTCH

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockProductStockByBTCH.(*DataPlatformProductStockProductStockByBTCH)
		if !ok {
			object = new(DataPlatformProductStockProductStockByBTCH)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockProductStockByBTCH)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockProductStockByBTCH))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockProductStockByBTCH.(*[]*DataPlatformProductStockProductStockByBTCH)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockProductStockByBTCH)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockProductStockByBTCH))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockProductStockByBTCHR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockProductStockByBTCHR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBatchDataPlatformProductStockProductStockAvailByBtches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductStockProductStockByBTCHL) LoadBatchDataPlatformProductStockProductStockAvailByBtches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockProductStockByBTCH interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockProductStockByBTCH
	var object *DataPlatformProductStockProductStockByBTCH

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockProductStockByBTCH.(*DataPlatformProductStockProductStockByBTCH)
		if !ok {
			object = new(DataPlatformProductStockProductStockByBTCH)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockProductStockByBTCH)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockProductStockByBTCH))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockProductStockByBTCH.(*[]*DataPlatformProductStockProductStockByBTCH)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockProductStockByBTCH)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockProductStockByBTCH))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockProductStockByBTCHR{}
		}
		args = append(args, object.Batch)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockProductStockByBTCHR{}
			}

			for _, a := range args {
				if a == obj.Batch {
					continue Outer
				}
			}

			args = append(args, obj.Batch)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_avail_by_btch`),
		qm.WhereIn(`data_platform_product_stock_product_stock_avail_by_btch.Batch in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_avail_by_btch")
	}

	var resultSlice []*DataPlatformProductStockProductStockAvailByBTCH
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_avail_by_btch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_avail_by_btch")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_avail_by_btch")
	}

	if singular {
		object.R.BatchDataPlatformProductStockProductStockAvailByBtches = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Batch == foreign.Batch {
				local.R.BatchDataPlatformProductStockProductStockAvailByBtches = append(local.R.BatchDataPlatformProductStockProductStockAvailByBtches, foreign)
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformPlantStorageLocationDatum of the dataPlatformProductStockProductStockByBTCH to the related item.
// Sets o.R.BusinessPartnerDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformProductStockProductStockByBTCH) SetBusinessPartnerDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_stock_product_stock_by_btch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByBTCHPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Product, o.BusinessPartner, o.Plant, o.Batch}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProductStockProductStockByBTCHR{
			BusinessPartnerDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// AddBatchDataPlatformProductStockProductStockAvailByBtches adds the given related objects to the existing relationships
// of the data_platform_product_stock_product_stock_by_btch, optionally inserting them as new records.
// Appends related to o.R.BatchDataPlatformProductStockProductStockAvailByBtches.
func (o *DataPlatformProductStockProductStockByBTCH) AddBatchDataPlatformProductStockProductStockAvailByBtches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockAvailByBTCH) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Batch = o.Batch
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_avail_by_btch` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Batch"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockAvailByBTCHPrimaryKeyColumns),
			)
			values := []interface{}{o.Batch, rel.Product, rel.BusinessPartner, rel.Plant, rel.Batch, rel.ProductStockAvailabilityDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Batch = o.Batch
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductStockProductStockByBTCHR{
			BatchDataPlatformProductStockProductStockAvailByBtches: related,
		}
	} else {
		o.R.BatchDataPlatformProductStockProductStockAvailByBtches = append(o.R.BatchDataPlatformProductStockProductStockAvailByBtches, related...)
	}

	return nil
}

// DataPlatformProductStockProductStockByBtches retrieves all the records using an executor.
func DataPlatformProductStockProductStockByBtches(mods ...qm.QueryMod) dataPlatformProductStockProductStockByBTCHQuery {
	mods = append(mods, qm.From("`data_platform_product_stock_product_stock_by_btch`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_stock_product_stock_by_btch`.*"})
	}

	return dataPlatformProductStockProductStockByBTCHQuery{q}
}

// FindDataPlatformProductStockProductStockByBTCH retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductStockProductStockByBTCH(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, batch string, selectCols ...string) (*DataPlatformProductStockProductStockByBTCH, error) {
	dataPlatformProductStockProductStockByBTCHObj := &DataPlatformProductStockProductStockByBTCH{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_stock_product_stock_by_btch` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `Batch`=?", sel,
	)

	q := queries.Raw(query, product, businessPartner, plant, batch)

	err := q.Bind(ctx, exec, dataPlatformProductStockProductStockByBTCHObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_stock_product_stock_by_btch")
	}

	return dataPlatformProductStockProductStockByBTCHObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductStockProductStockByBTCH) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_stock_product_stock_by_btch provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductStockProductStockByBTCHColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductStockProductStockByBTCHInsertCacheMut.RLock()
	cache, cached := dataPlatformProductStockProductStockByBTCHInsertCache[key]
	dataPlatformProductStockProductStockByBTCHInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductStockProductStockByBTCHAllColumns,
			dataPlatformProductStockProductStockByBTCHColumnsWithDefault,
			dataPlatformProductStockProductStockByBTCHColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductStockProductStockByBTCHType, dataPlatformProductStockProductStockByBTCHMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductStockProductStockByBTCHType, dataPlatformProductStockProductStockByBTCHMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_stock_product_stock_by_btch` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_stock_product_stock_by_btch` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_stock_product_stock_by_btch` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByBTCHPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_stock_product_stock_by_btch")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.BusinessPartner,
		o.Plant,
		o.Batch,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_stock_product_stock_by_btch")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductStockProductStockByBTCHInsertCacheMut.Lock()
		dataPlatformProductStockProductStockByBTCHInsertCache[key] = cache
		dataPlatformProductStockProductStockByBTCHInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductStockProductStockByBTCH.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductStockProductStockByBTCH) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductStockProductStockByBTCHUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductStockProductStockByBTCHUpdateCache[key]
	dataPlatformProductStockProductStockByBTCHUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductStockProductStockByBTCHAllColumns,
			dataPlatformProductStockProductStockByBTCHPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_stock_product_stock_by_btch, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_stock_product_stock_by_btch` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByBTCHPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductStockProductStockByBTCHType, dataPlatformProductStockProductStockByBTCHMapping, append(wl, dataPlatformProductStockProductStockByBTCHPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_stock_product_stock_by_btch row")
	}

	if !cached {
		dataPlatformProductStockProductStockByBTCHUpdateCacheMut.Lock()
		dataPlatformProductStockProductStockByBTCHUpdateCache[key] = cache
		dataPlatformProductStockProductStockByBTCHUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductStockProductStockByBTCHQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_stock_product_stock_by_btch")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductStockProductStockByBTCHSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductStockProductStockByBTCHPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_stock_product_stock_by_btch` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductStockProductStockByBTCHPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductStockProductStockByBTCH slice")
	}

	return nil
}

var mySQLDataPlatformProductStockProductStockByBTCHUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductStockProductStockByBTCH) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_stock_product_stock_by_btch provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductStockProductStockByBTCHColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductStockProductStockByBTCHUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductStockProductStockByBTCHUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductStockProductStockByBTCHUpsertCache[key]
	dataPlatformProductStockProductStockByBTCHUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductStockProductStockByBTCHAllColumns,
			dataPlatformProductStockProductStockByBTCHColumnsWithDefault,
			dataPlatformProductStockProductStockByBTCHColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductStockProductStockByBTCHAllColumns,
			dataPlatformProductStockProductStockByBTCHPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_stock_product_stock_by_btch, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_stock_product_stock_by_btch`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_stock_product_stock_by_btch` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductStockProductStockByBTCHType, dataPlatformProductStockProductStockByBTCHMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductStockProductStockByBTCHType, dataPlatformProductStockProductStockByBTCHMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_stock_product_stock_by_btch")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductStockProductStockByBTCHType, dataPlatformProductStockProductStockByBTCHMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_stock_product_stock_by_btch")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_stock_product_stock_by_btch")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductStockProductStockByBTCHUpsertCacheMut.Lock()
		dataPlatformProductStockProductStockByBTCHUpsertCache[key] = cache
		dataPlatformProductStockProductStockByBTCHUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductStockProductStockByBTCH record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductStockProductStockByBTCH) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductStockProductStockByBTCH provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductStockProductStockByBTCHPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_stock_product_stock_by_btch` WHERE `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `Batch`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_stock_product_stock_by_btch")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductStockProductStockByBTCHQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductStockProductStockByBTCHQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_stock_product_stock_by_btch")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductStockProductStockByBTCHSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductStockProductStockByBTCHPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_stock_product_stock_by_btch` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductStockProductStockByBTCHPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductStockProductStockByBTCH slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductStockProductStockByBTCH) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductStockProductStockByBTCH(ctx, exec, o.Product, o.BusinessPartner, o.Plant, o.Batch)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductStockProductStockByBTCHSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductStockProductStockByBTCHSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductStockProductStockByBTCHPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_stock_product_stock_by_btch`.* FROM `data_platform_product_stock_product_stock_by_btch` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductStockProductStockByBTCHPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductStockProductStockByBTCHSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductStockProductStockByBTCHExists checks if the DataPlatformProductStockProductStockByBTCH row exists.
func DataPlatformProductStockProductStockByBTCHExists(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, batch string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_stock_product_stock_by_btch` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `Batch`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, businessPartner, plant, batch)
	}
	row := exec.QueryRowContext(ctx, sql, product, businessPartner, plant, batch)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_stock_product_stock_by_btch exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductStockProductStockByBTCH row exists.
func (o *DataPlatformProductStockProductStockByBTCH) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductStockProductStockByBTCHExists(ctx, exec, o.Product, o.BusinessPartner, o.Plant, o.Batch)
}
