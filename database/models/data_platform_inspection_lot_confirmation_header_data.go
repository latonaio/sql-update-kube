// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInspectionLotConfirmationHeaderDatum is an object representing the database table.
type DataPlatformInspectionLotConfirmationHeaderDatum struct {
	InspectionLot                            int          `boil:"InspectionLot" json:"InspectionLot" toml:"InspectionLot" yaml:"InspectionLot"`
	Operations                               int          `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	OperationsItem                           int          `boil:"OperationsItem" json:"OperationsItem" toml:"OperationsItem" yaml:"OperationsItem"`
	OperationID                              int          `boil:"OperationID" json:"OperationID" toml:"OperationID" yaml:"OperationID"`
	ConfirmationCountingID                   int          `boil:"ConfirmationCountingID" json:"ConfirmationCountingID" toml:"ConfirmationCountingID" yaml:"ConfirmationCountingID"`
	Inspection                               int          `boil:"Inspection" json:"Inspection" toml:"Inspection" yaml:"Inspection"`
	ProductionOrder                          int          `boil:"ProductionOrder" json:"ProductionOrder" toml:"ProductionOrder" yaml:"ProductionOrder"`
	ProductionOrderItem                      int          `boil:"ProductionOrderItem" json:"ProductionOrderItem" toml:"ProductionOrderItem" yaml:"ProductionOrderItem"`
	InspectionType                           string       `boil:"InspectionType" json:"InspectionType" toml:"InspectionType" yaml:"InspectionType"`
	InspectionTypeValueUnit                  null.String  `boil:"InspectionTypeValueUnit" json:"InspectionTypeValueUnit,omitempty" toml:"InspectionTypeValueUnit" yaml:"InspectionTypeValueUnit,omitempty"`
	InspectionTypePlannedValue               null.Float32 `boil:"InspectionTypePlannedValue" json:"InspectionTypePlannedValue,omitempty" toml:"InspectionTypePlannedValue" yaml:"InspectionTypePlannedValue,omitempty"`
	InspectionTypeCertificateType            null.String  `boil:"InspectionTypeCertificateType" json:"InspectionTypeCertificateType,omitempty" toml:"InspectionTypeCertificateType" yaml:"InspectionTypeCertificateType,omitempty"`
	InspectionTypeCertificateValueInText     null.String  `boil:"InspectionTypeCertificateValueInText" json:"InspectionTypeCertificateValueInText,omitempty" toml:"InspectionTypeCertificateValueInText" yaml:"InspectionTypeCertificateValueInText,omitempty"`
	InspectionTypeCertificateValueInQuantity null.Float32 `boil:"InspectionTypeCertificateValueInQuantity" json:"InspectionTypeCertificateValueInQuantity,omitempty" toml:"InspectionTypeCertificateValueInQuantity" yaml:"InspectionTypeCertificateValueInQuantity,omitempty"`
	InspectionLotInspectionText              null.String  `boil:"InspectionLotInspectionText" json:"InspectionLotInspectionText,omitempty" toml:"InspectionLotInspectionText" yaml:"InspectionLotInspectionText,omitempty"`
	InspectionTypeConfirmedValueInText       null.String  `boil:"InspectionTypeConfirmedValueInText" json:"InspectionTypeConfirmedValueInText,omitempty" toml:"InspectionTypeConfirmedValueInText" yaml:"InspectionTypeConfirmedValueInText,omitempty"`
	InspectionTypeConfirmedValueInQuantity   null.Float32 `boil:"InspectionTypeConfirmedValueInQuantity" json:"InspectionTypeConfirmedValueInQuantity,omitempty" toml:"InspectionTypeConfirmedValueInQuantity" yaml:"InspectionTypeConfirmedValueInQuantity,omitempty"`
	InspectionResult                         null.Bool    `boil:"InspectionResult" json:"InspectionResult,omitempty" toml:"InspectionResult" yaml:"InspectionResult,omitempty"`
	OperationPlannedQuantityInBaseUnit       float32      `boil:"OperationPlannedQuantityInBaseUnit" json:"OperationPlannedQuantityInBaseUnit" toml:"OperationPlannedQuantityInBaseUnit" yaml:"OperationPlannedQuantityInBaseUnit"`
	OperationPlannedQuantityInProductionUnit float32      `boil:"OperationPlannedQuantityInProductionUnit" json:"OperationPlannedQuantityInProductionUnit" toml:"OperationPlannedQuantityInProductionUnit" yaml:"OperationPlannedQuantityInProductionUnit"`
	OperationPlannedQuantityInOperationUnit  float32      `boil:"OperationPlannedQuantityInOperationUnit" json:"OperationPlannedQuantityInOperationUnit" toml:"OperationPlannedQuantityInOperationUnit" yaml:"OperationPlannedQuantityInOperationUnit"`
	ProductBaseUnit                          string       `boil:"ProductBaseUnit" json:"ProductBaseUnit" toml:"ProductBaseUnit" yaml:"ProductBaseUnit"`
	ProductProductionUnit                    string       `boil:"ProductProductionUnit" json:"ProductProductionUnit" toml:"ProductProductionUnit" yaml:"ProductProductionUnit"`
	ProductOperationUnit                     string       `boil:"ProductOperationUnit" json:"ProductOperationUnit" toml:"ProductOperationUnit" yaml:"ProductOperationUnit"`
	OperationPlannedScrapInPercent           null.Float32 `boil:"OperationPlannedScrapInPercent" json:"OperationPlannedScrapInPercent,omitempty" toml:"OperationPlannedScrapInPercent" yaml:"OperationPlannedScrapInPercent,omitempty"`
	ConfirmationEntryDate                    null.String  `boil:"ConfirmationEntryDate" json:"ConfirmationEntryDate,omitempty" toml:"ConfirmationEntryDate" yaml:"ConfirmationEntryDate,omitempty"`
	ConfirmationEntryTime                    null.String  `boil:"ConfirmationEntryTime" json:"ConfirmationEntryTime,omitempty" toml:"ConfirmationEntryTime" yaml:"ConfirmationEntryTime,omitempty"`
	ConfirmationText                         null.String  `boil:"ConfirmationText" json:"ConfirmationText,omitempty" toml:"ConfirmationText" yaml:"ConfirmationText,omitempty"`
	IsFinalConfirmation                      null.Bool    `boil:"IsFinalConfirmation" json:"IsFinalConfirmation,omitempty" toml:"IsFinalConfirmation" yaml:"IsFinalConfirmation,omitempty"`
	WorkCenter                               int          `boil:"WorkCenter" json:"WorkCenter" toml:"WorkCenter" yaml:"WorkCenter"`
	EmployeeIDWhoConfirmed                   int          `boil:"EmployeeIDWhoConfirmed" json:"EmployeeIDWhoConfirmed" toml:"EmployeeIDWhoConfirmed" yaml:"EmployeeIDWhoConfirmed"`
	ConfirmedExecutionStartDate              null.String  `boil:"ConfirmedExecutionStartDate" json:"ConfirmedExecutionStartDate,omitempty" toml:"ConfirmedExecutionStartDate" yaml:"ConfirmedExecutionStartDate,omitempty"`
	ConfirmedExecutionStartTime              null.String  `boil:"ConfirmedExecutionStartTime" json:"ConfirmedExecutionStartTime,omitempty" toml:"ConfirmedExecutionStartTime" yaml:"ConfirmedExecutionStartTime,omitempty"`
	ConfirmedSetupStartDate                  null.String  `boil:"ConfirmedSetupStartDate" json:"ConfirmedSetupStartDate,omitempty" toml:"ConfirmedSetupStartDate" yaml:"ConfirmedSetupStartDate,omitempty"`
	ConfirmedSetupStartTime                  null.String  `boil:"ConfirmedSetupStartTime" json:"ConfirmedSetupStartTime,omitempty" toml:"ConfirmedSetupStartTime" yaml:"ConfirmedSetupStartTime,omitempty"`
	ConfirmedProcessingStartDate             null.String  `boil:"ConfirmedProcessingStartDate" json:"ConfirmedProcessingStartDate,omitempty" toml:"ConfirmedProcessingStartDate" yaml:"ConfirmedProcessingStartDate,omitempty"`
	ConfirmedProcessingStartTime             null.String  `boil:"ConfirmedProcessingStartTime" json:"ConfirmedProcessingStartTime,omitempty" toml:"ConfirmedProcessingStartTime" yaml:"ConfirmedProcessingStartTime,omitempty"`
	ConfirmedExecutionEndDate                null.String  `boil:"ConfirmedExecutionEndDate" json:"ConfirmedExecutionEndDate,omitempty" toml:"ConfirmedExecutionEndDate" yaml:"ConfirmedExecutionEndDate,omitempty"`
	ConfirmedExecutionEndTime                null.String  `boil:"ConfirmedExecutionEndTime" json:"ConfirmedExecutionEndTime,omitempty" toml:"ConfirmedExecutionEndTime" yaml:"ConfirmedExecutionEndTime,omitempty"`
	ConfirmedSetupEndDate                    null.String  `boil:"ConfirmedSetupEndDate" json:"ConfirmedSetupEndDate,omitempty" toml:"ConfirmedSetupEndDate" yaml:"ConfirmedSetupEndDate,omitempty"`
	ConfirmedSetupEndTime                    null.String  `boil:"ConfirmedSetupEndTime" json:"ConfirmedSetupEndTime,omitempty" toml:"ConfirmedSetupEndTime" yaml:"ConfirmedSetupEndTime,omitempty"`
	ConfirmedProcessingEndDate               null.String  `boil:"ConfirmedProcessingEndDate" json:"ConfirmedProcessingEndDate,omitempty" toml:"ConfirmedProcessingEndDate" yaml:"ConfirmedProcessingEndDate,omitempty"`
	ConfirmedProcessingEndTime               null.String  `boil:"ConfirmedProcessingEndTime" json:"ConfirmedProcessingEndTime,omitempty" toml:"ConfirmedProcessingEndTime" yaml:"ConfirmedProcessingEndTime,omitempty"`
	ConfirmedWaitDuration                    null.Float32 `boil:"ConfirmedWaitDuration" json:"ConfirmedWaitDuration,omitempty" toml:"ConfirmedWaitDuration" yaml:"ConfirmedWaitDuration,omitempty"`
	WaitDurationUnit                         null.String  `boil:"WaitDurationUnit" json:"WaitDurationUnit,omitempty" toml:"WaitDurationUnit" yaml:"WaitDurationUnit,omitempty"`
	ConfirmedQueueDuration                   null.Float32 `boil:"ConfirmedQueueDuration" json:"ConfirmedQueueDuration,omitempty" toml:"ConfirmedQueueDuration" yaml:"ConfirmedQueueDuration,omitempty"`
	QueueDurationUnit                        null.String  `boil:"QueueDurationUnit" json:"QueueDurationUnit,omitempty" toml:"QueueDurationUnit" yaml:"QueueDurationUnit,omitempty"`
	ConfirmedMoveDuration                    null.Float32 `boil:"ConfirmedMoveDuration" json:"ConfirmedMoveDuration,omitempty" toml:"ConfirmedMoveDuration" yaml:"ConfirmedMoveDuration,omitempty"`
	MoveDurationUnit                         null.String  `boil:"MoveDurationUnit" json:"MoveDurationUnit,omitempty" toml:"MoveDurationUnit" yaml:"MoveDurationUnit,omitempty"`
	ConfirmedYieldQuantity                   null.Float32 `boil:"ConfirmedYieldQuantity" json:"ConfirmedYieldQuantity,omitempty" toml:"ConfirmedYieldQuantity" yaml:"ConfirmedYieldQuantity,omitempty"`
	ConfirmedScrapQuantity                   null.Float32 `boil:"ConfirmedScrapQuantity" json:"ConfirmedScrapQuantity,omitempty" toml:"ConfirmedScrapQuantity" yaml:"ConfirmedScrapQuantity,omitempty"`
	OperationVarianceReason                  null.String  `boil:"OperationVarianceReason" json:"OperationVarianceReason,omitempty" toml:"OperationVarianceReason" yaml:"OperationVarianceReason,omitempty"`
	CreationDate                             string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                             string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                           string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                           string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsCancelled                              null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`

	R *dataPlatformInspectionLotConfirmationHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInspectionLotConfirmationHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInspectionLotConfirmationHeaderDatumColumns = struct {
	InspectionLot                            string
	Operations                               string
	OperationsItem                           string
	OperationID                              string
	ConfirmationCountingID                   string
	Inspection                               string
	ProductionOrder                          string
	ProductionOrderItem                      string
	InspectionType                           string
	InspectionTypeValueUnit                  string
	InspectionTypePlannedValue               string
	InspectionTypeCertificateType            string
	InspectionTypeCertificateValueInText     string
	InspectionTypeCertificateValueInQuantity string
	InspectionLotInspectionText              string
	InspectionTypeConfirmedValueInText       string
	InspectionTypeConfirmedValueInQuantity   string
	InspectionResult                         string
	OperationPlannedQuantityInBaseUnit       string
	OperationPlannedQuantityInProductionUnit string
	OperationPlannedQuantityInOperationUnit  string
	ProductBaseUnit                          string
	ProductProductionUnit                    string
	ProductOperationUnit                     string
	OperationPlannedScrapInPercent           string
	ConfirmationEntryDate                    string
	ConfirmationEntryTime                    string
	ConfirmationText                         string
	IsFinalConfirmation                      string
	WorkCenter                               string
	EmployeeIDWhoConfirmed                   string
	ConfirmedExecutionStartDate              string
	ConfirmedExecutionStartTime              string
	ConfirmedSetupStartDate                  string
	ConfirmedSetupStartTime                  string
	ConfirmedProcessingStartDate             string
	ConfirmedProcessingStartTime             string
	ConfirmedExecutionEndDate                string
	ConfirmedExecutionEndTime                string
	ConfirmedSetupEndDate                    string
	ConfirmedSetupEndTime                    string
	ConfirmedProcessingEndDate               string
	ConfirmedProcessingEndTime               string
	ConfirmedWaitDuration                    string
	WaitDurationUnit                         string
	ConfirmedQueueDuration                   string
	QueueDurationUnit                        string
	ConfirmedMoveDuration                    string
	MoveDurationUnit                         string
	ConfirmedYieldQuantity                   string
	ConfirmedScrapQuantity                   string
	OperationVarianceReason                  string
	CreationDate                             string
	CreationTime                             string
	LastChangeDate                           string
	LastChangeTime                           string
	IsCancelled                              string
}{
	InspectionLot:                            "InspectionLot",
	Operations:                               "Operations",
	OperationsItem:                           "OperationsItem",
	OperationID:                              "OperationID",
	ConfirmationCountingID:                   "ConfirmationCountingID",
	Inspection:                               "Inspection",
	ProductionOrder:                          "ProductionOrder",
	ProductionOrderItem:                      "ProductionOrderItem",
	InspectionType:                           "InspectionType",
	InspectionTypeValueUnit:                  "InspectionTypeValueUnit",
	InspectionTypePlannedValue:               "InspectionTypePlannedValue",
	InspectionTypeCertificateType:            "InspectionTypeCertificateType",
	InspectionTypeCertificateValueInText:     "InspectionTypeCertificateValueInText",
	InspectionTypeCertificateValueInQuantity: "InspectionTypeCertificateValueInQuantity",
	InspectionLotInspectionText:              "InspectionLotInspectionText",
	InspectionTypeConfirmedValueInText:       "InspectionTypeConfirmedValueInText",
	InspectionTypeConfirmedValueInQuantity:   "InspectionTypeConfirmedValueInQuantity",
	InspectionResult:                         "InspectionResult",
	OperationPlannedQuantityInBaseUnit:       "OperationPlannedQuantityInBaseUnit",
	OperationPlannedQuantityInProductionUnit: "OperationPlannedQuantityInProductionUnit",
	OperationPlannedQuantityInOperationUnit:  "OperationPlannedQuantityInOperationUnit",
	ProductBaseUnit:                          "ProductBaseUnit",
	ProductProductionUnit:                    "ProductProductionUnit",
	ProductOperationUnit:                     "ProductOperationUnit",
	OperationPlannedScrapInPercent:           "OperationPlannedScrapInPercent",
	ConfirmationEntryDate:                    "ConfirmationEntryDate",
	ConfirmationEntryTime:                    "ConfirmationEntryTime",
	ConfirmationText:                         "ConfirmationText",
	IsFinalConfirmation:                      "IsFinalConfirmation",
	WorkCenter:                               "WorkCenter",
	EmployeeIDWhoConfirmed:                   "EmployeeIDWhoConfirmed",
	ConfirmedExecutionStartDate:              "ConfirmedExecutionStartDate",
	ConfirmedExecutionStartTime:              "ConfirmedExecutionStartTime",
	ConfirmedSetupStartDate:                  "ConfirmedSetupStartDate",
	ConfirmedSetupStartTime:                  "ConfirmedSetupStartTime",
	ConfirmedProcessingStartDate:             "ConfirmedProcessingStartDate",
	ConfirmedProcessingStartTime:             "ConfirmedProcessingStartTime",
	ConfirmedExecutionEndDate:                "ConfirmedExecutionEndDate",
	ConfirmedExecutionEndTime:                "ConfirmedExecutionEndTime",
	ConfirmedSetupEndDate:                    "ConfirmedSetupEndDate",
	ConfirmedSetupEndTime:                    "ConfirmedSetupEndTime",
	ConfirmedProcessingEndDate:               "ConfirmedProcessingEndDate",
	ConfirmedProcessingEndTime:               "ConfirmedProcessingEndTime",
	ConfirmedWaitDuration:                    "ConfirmedWaitDuration",
	WaitDurationUnit:                         "WaitDurationUnit",
	ConfirmedQueueDuration:                   "ConfirmedQueueDuration",
	QueueDurationUnit:                        "QueueDurationUnit",
	ConfirmedMoveDuration:                    "ConfirmedMoveDuration",
	MoveDurationUnit:                         "MoveDurationUnit",
	ConfirmedYieldQuantity:                   "ConfirmedYieldQuantity",
	ConfirmedScrapQuantity:                   "ConfirmedScrapQuantity",
	OperationVarianceReason:                  "OperationVarianceReason",
	CreationDate:                             "CreationDate",
	CreationTime:                             "CreationTime",
	LastChangeDate:                           "LastChangeDate",
	LastChangeTime:                           "LastChangeTime",
	IsCancelled:                              "IsCancelled",
}

var DataPlatformInspectionLotConfirmationHeaderDatumTableColumns = struct {
	InspectionLot                            string
	Operations                               string
	OperationsItem                           string
	OperationID                              string
	ConfirmationCountingID                   string
	Inspection                               string
	ProductionOrder                          string
	ProductionOrderItem                      string
	InspectionType                           string
	InspectionTypeValueUnit                  string
	InspectionTypePlannedValue               string
	InspectionTypeCertificateType            string
	InspectionTypeCertificateValueInText     string
	InspectionTypeCertificateValueInQuantity string
	InspectionLotInspectionText              string
	InspectionTypeConfirmedValueInText       string
	InspectionTypeConfirmedValueInQuantity   string
	InspectionResult                         string
	OperationPlannedQuantityInBaseUnit       string
	OperationPlannedQuantityInProductionUnit string
	OperationPlannedQuantityInOperationUnit  string
	ProductBaseUnit                          string
	ProductProductionUnit                    string
	ProductOperationUnit                     string
	OperationPlannedScrapInPercent           string
	ConfirmationEntryDate                    string
	ConfirmationEntryTime                    string
	ConfirmationText                         string
	IsFinalConfirmation                      string
	WorkCenter                               string
	EmployeeIDWhoConfirmed                   string
	ConfirmedExecutionStartDate              string
	ConfirmedExecutionStartTime              string
	ConfirmedSetupStartDate                  string
	ConfirmedSetupStartTime                  string
	ConfirmedProcessingStartDate             string
	ConfirmedProcessingStartTime             string
	ConfirmedExecutionEndDate                string
	ConfirmedExecutionEndTime                string
	ConfirmedSetupEndDate                    string
	ConfirmedSetupEndTime                    string
	ConfirmedProcessingEndDate               string
	ConfirmedProcessingEndTime               string
	ConfirmedWaitDuration                    string
	WaitDurationUnit                         string
	ConfirmedQueueDuration                   string
	QueueDurationUnit                        string
	ConfirmedMoveDuration                    string
	MoveDurationUnit                         string
	ConfirmedYieldQuantity                   string
	ConfirmedScrapQuantity                   string
	OperationVarianceReason                  string
	CreationDate                             string
	CreationTime                             string
	LastChangeDate                           string
	LastChangeTime                           string
	IsCancelled                              string
}{
	InspectionLot:                            "data_platform_inspection_lot_confirmation_header_data.InspectionLot",
	Operations:                               "data_platform_inspection_lot_confirmation_header_data.Operations",
	OperationsItem:                           "data_platform_inspection_lot_confirmation_header_data.OperationsItem",
	OperationID:                              "data_platform_inspection_lot_confirmation_header_data.OperationID",
	ConfirmationCountingID:                   "data_platform_inspection_lot_confirmation_header_data.ConfirmationCountingID",
	Inspection:                               "data_platform_inspection_lot_confirmation_header_data.Inspection",
	ProductionOrder:                          "data_platform_inspection_lot_confirmation_header_data.ProductionOrder",
	ProductionOrderItem:                      "data_platform_inspection_lot_confirmation_header_data.ProductionOrderItem",
	InspectionType:                           "data_platform_inspection_lot_confirmation_header_data.InspectionType",
	InspectionTypeValueUnit:                  "data_platform_inspection_lot_confirmation_header_data.InspectionTypeValueUnit",
	InspectionTypePlannedValue:               "data_platform_inspection_lot_confirmation_header_data.InspectionTypePlannedValue",
	InspectionTypeCertificateType:            "data_platform_inspection_lot_confirmation_header_data.InspectionTypeCertificateType",
	InspectionTypeCertificateValueInText:     "data_platform_inspection_lot_confirmation_header_data.InspectionTypeCertificateValueInText",
	InspectionTypeCertificateValueInQuantity: "data_platform_inspection_lot_confirmation_header_data.InspectionTypeCertificateValueInQuantity",
	InspectionLotInspectionText:              "data_platform_inspection_lot_confirmation_header_data.InspectionLotInspectionText",
	InspectionTypeConfirmedValueInText:       "data_platform_inspection_lot_confirmation_header_data.InspectionTypeConfirmedValueInText",
	InspectionTypeConfirmedValueInQuantity:   "data_platform_inspection_lot_confirmation_header_data.InspectionTypeConfirmedValueInQuantity",
	InspectionResult:                         "data_platform_inspection_lot_confirmation_header_data.InspectionResult",
	OperationPlannedQuantityInBaseUnit:       "data_platform_inspection_lot_confirmation_header_data.OperationPlannedQuantityInBaseUnit",
	OperationPlannedQuantityInProductionUnit: "data_platform_inspection_lot_confirmation_header_data.OperationPlannedQuantityInProductionUnit",
	OperationPlannedQuantityInOperationUnit:  "data_platform_inspection_lot_confirmation_header_data.OperationPlannedQuantityInOperationUnit",
	ProductBaseUnit:                          "data_platform_inspection_lot_confirmation_header_data.ProductBaseUnit",
	ProductProductionUnit:                    "data_platform_inspection_lot_confirmation_header_data.ProductProductionUnit",
	ProductOperationUnit:                     "data_platform_inspection_lot_confirmation_header_data.ProductOperationUnit",
	OperationPlannedScrapInPercent:           "data_platform_inspection_lot_confirmation_header_data.OperationPlannedScrapInPercent",
	ConfirmationEntryDate:                    "data_platform_inspection_lot_confirmation_header_data.ConfirmationEntryDate",
	ConfirmationEntryTime:                    "data_platform_inspection_lot_confirmation_header_data.ConfirmationEntryTime",
	ConfirmationText:                         "data_platform_inspection_lot_confirmation_header_data.ConfirmationText",
	IsFinalConfirmation:                      "data_platform_inspection_lot_confirmation_header_data.IsFinalConfirmation",
	WorkCenter:                               "data_platform_inspection_lot_confirmation_header_data.WorkCenter",
	EmployeeIDWhoConfirmed:                   "data_platform_inspection_lot_confirmation_header_data.EmployeeIDWhoConfirmed",
	ConfirmedExecutionStartDate:              "data_platform_inspection_lot_confirmation_header_data.ConfirmedExecutionStartDate",
	ConfirmedExecutionStartTime:              "data_platform_inspection_lot_confirmation_header_data.ConfirmedExecutionStartTime",
	ConfirmedSetupStartDate:                  "data_platform_inspection_lot_confirmation_header_data.ConfirmedSetupStartDate",
	ConfirmedSetupStartTime:                  "data_platform_inspection_lot_confirmation_header_data.ConfirmedSetupStartTime",
	ConfirmedProcessingStartDate:             "data_platform_inspection_lot_confirmation_header_data.ConfirmedProcessingStartDate",
	ConfirmedProcessingStartTime:             "data_platform_inspection_lot_confirmation_header_data.ConfirmedProcessingStartTime",
	ConfirmedExecutionEndDate:                "data_platform_inspection_lot_confirmation_header_data.ConfirmedExecutionEndDate",
	ConfirmedExecutionEndTime:                "data_platform_inspection_lot_confirmation_header_data.ConfirmedExecutionEndTime",
	ConfirmedSetupEndDate:                    "data_platform_inspection_lot_confirmation_header_data.ConfirmedSetupEndDate",
	ConfirmedSetupEndTime:                    "data_platform_inspection_lot_confirmation_header_data.ConfirmedSetupEndTime",
	ConfirmedProcessingEndDate:               "data_platform_inspection_lot_confirmation_header_data.ConfirmedProcessingEndDate",
	ConfirmedProcessingEndTime:               "data_platform_inspection_lot_confirmation_header_data.ConfirmedProcessingEndTime",
	ConfirmedWaitDuration:                    "data_platform_inspection_lot_confirmation_header_data.ConfirmedWaitDuration",
	WaitDurationUnit:                         "data_platform_inspection_lot_confirmation_header_data.WaitDurationUnit",
	ConfirmedQueueDuration:                   "data_platform_inspection_lot_confirmation_header_data.ConfirmedQueueDuration",
	QueueDurationUnit:                        "data_platform_inspection_lot_confirmation_header_data.QueueDurationUnit",
	ConfirmedMoveDuration:                    "data_platform_inspection_lot_confirmation_header_data.ConfirmedMoveDuration",
	MoveDurationUnit:                         "data_platform_inspection_lot_confirmation_header_data.MoveDurationUnit",
	ConfirmedYieldQuantity:                   "data_platform_inspection_lot_confirmation_header_data.ConfirmedYieldQuantity",
	ConfirmedScrapQuantity:                   "data_platform_inspection_lot_confirmation_header_data.ConfirmedScrapQuantity",
	OperationVarianceReason:                  "data_platform_inspection_lot_confirmation_header_data.OperationVarianceReason",
	CreationDate:                             "data_platform_inspection_lot_confirmation_header_data.CreationDate",
	CreationTime:                             "data_platform_inspection_lot_confirmation_header_data.CreationTime",
	LastChangeDate:                           "data_platform_inspection_lot_confirmation_header_data.LastChangeDate",
	LastChangeTime:                           "data_platform_inspection_lot_confirmation_header_data.LastChangeTime",
	IsCancelled:                              "data_platform_inspection_lot_confirmation_header_data.IsCancelled",
}

// Generated where

var DataPlatformInspectionLotConfirmationHeaderDatumWhere = struct {
	InspectionLot                            whereHelperint
	Operations                               whereHelperint
	OperationsItem                           whereHelperint
	OperationID                              whereHelperint
	ConfirmationCountingID                   whereHelperint
	Inspection                               whereHelperint
	ProductionOrder                          whereHelperint
	ProductionOrderItem                      whereHelperint
	InspectionType                           whereHelperstring
	InspectionTypeValueUnit                  whereHelpernull_String
	InspectionTypePlannedValue               whereHelpernull_Float32
	InspectionTypeCertificateType            whereHelpernull_String
	InspectionTypeCertificateValueInText     whereHelpernull_String
	InspectionTypeCertificateValueInQuantity whereHelpernull_Float32
	InspectionLotInspectionText              whereHelpernull_String
	InspectionTypeConfirmedValueInText       whereHelpernull_String
	InspectionTypeConfirmedValueInQuantity   whereHelpernull_Float32
	InspectionResult                         whereHelpernull_Bool
	OperationPlannedQuantityInBaseUnit       whereHelperfloat32
	OperationPlannedQuantityInProductionUnit whereHelperfloat32
	OperationPlannedQuantityInOperationUnit  whereHelperfloat32
	ProductBaseUnit                          whereHelperstring
	ProductProductionUnit                    whereHelperstring
	ProductOperationUnit                     whereHelperstring
	OperationPlannedScrapInPercent           whereHelpernull_Float32
	ConfirmationEntryDate                    whereHelpernull_String
	ConfirmationEntryTime                    whereHelpernull_String
	ConfirmationText                         whereHelpernull_String
	IsFinalConfirmation                      whereHelpernull_Bool
	WorkCenter                               whereHelperint
	EmployeeIDWhoConfirmed                   whereHelperint
	ConfirmedExecutionStartDate              whereHelpernull_String
	ConfirmedExecutionStartTime              whereHelpernull_String
	ConfirmedSetupStartDate                  whereHelpernull_String
	ConfirmedSetupStartTime                  whereHelpernull_String
	ConfirmedProcessingStartDate             whereHelpernull_String
	ConfirmedProcessingStartTime             whereHelpernull_String
	ConfirmedExecutionEndDate                whereHelpernull_String
	ConfirmedExecutionEndTime                whereHelpernull_String
	ConfirmedSetupEndDate                    whereHelpernull_String
	ConfirmedSetupEndTime                    whereHelpernull_String
	ConfirmedProcessingEndDate               whereHelpernull_String
	ConfirmedProcessingEndTime               whereHelpernull_String
	ConfirmedWaitDuration                    whereHelpernull_Float32
	WaitDurationUnit                         whereHelpernull_String
	ConfirmedQueueDuration                   whereHelpernull_Float32
	QueueDurationUnit                        whereHelpernull_String
	ConfirmedMoveDuration                    whereHelpernull_Float32
	MoveDurationUnit                         whereHelpernull_String
	ConfirmedYieldQuantity                   whereHelpernull_Float32
	ConfirmedScrapQuantity                   whereHelpernull_Float32
	OperationVarianceReason                  whereHelpernull_String
	CreationDate                             whereHelperstring
	CreationTime                             whereHelperstring
	LastChangeDate                           whereHelperstring
	LastChangeTime                           whereHelperstring
	IsCancelled                              whereHelpernull_Bool
}{
	InspectionLot:                            whereHelperint{field: "`data_platform_inspection_lot_confirmation_header_data`.`InspectionLot`"},
	Operations:                               whereHelperint{field: "`data_platform_inspection_lot_confirmation_header_data`.`Operations`"},
	OperationsItem:                           whereHelperint{field: "`data_platform_inspection_lot_confirmation_header_data`.`OperationsItem`"},
	OperationID:                              whereHelperint{field: "`data_platform_inspection_lot_confirmation_header_data`.`OperationID`"},
	ConfirmationCountingID:                   whereHelperint{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmationCountingID`"},
	Inspection:                               whereHelperint{field: "`data_platform_inspection_lot_confirmation_header_data`.`Inspection`"},
	ProductionOrder:                          whereHelperint{field: "`data_platform_inspection_lot_confirmation_header_data`.`ProductionOrder`"},
	ProductionOrderItem:                      whereHelperint{field: "`data_platform_inspection_lot_confirmation_header_data`.`ProductionOrderItem`"},
	InspectionType:                           whereHelperstring{field: "`data_platform_inspection_lot_confirmation_header_data`.`InspectionType`"},
	InspectionTypeValueUnit:                  whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`InspectionTypeValueUnit`"},
	InspectionTypePlannedValue:               whereHelpernull_Float32{field: "`data_platform_inspection_lot_confirmation_header_data`.`InspectionTypePlannedValue`"},
	InspectionTypeCertificateType:            whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`InspectionTypeCertificateType`"},
	InspectionTypeCertificateValueInText:     whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`InspectionTypeCertificateValueInText`"},
	InspectionTypeCertificateValueInQuantity: whereHelpernull_Float32{field: "`data_platform_inspection_lot_confirmation_header_data`.`InspectionTypeCertificateValueInQuantity`"},
	InspectionLotInspectionText:              whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`InspectionLotInspectionText`"},
	InspectionTypeConfirmedValueInText:       whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`InspectionTypeConfirmedValueInText`"},
	InspectionTypeConfirmedValueInQuantity:   whereHelpernull_Float32{field: "`data_platform_inspection_lot_confirmation_header_data`.`InspectionTypeConfirmedValueInQuantity`"},
	InspectionResult:                         whereHelpernull_Bool{field: "`data_platform_inspection_lot_confirmation_header_data`.`InspectionResult`"},
	OperationPlannedQuantityInBaseUnit:       whereHelperfloat32{field: "`data_platform_inspection_lot_confirmation_header_data`.`OperationPlannedQuantityInBaseUnit`"},
	OperationPlannedQuantityInProductionUnit: whereHelperfloat32{field: "`data_platform_inspection_lot_confirmation_header_data`.`OperationPlannedQuantityInProductionUnit`"},
	OperationPlannedQuantityInOperationUnit:  whereHelperfloat32{field: "`data_platform_inspection_lot_confirmation_header_data`.`OperationPlannedQuantityInOperationUnit`"},
	ProductBaseUnit:                          whereHelperstring{field: "`data_platform_inspection_lot_confirmation_header_data`.`ProductBaseUnit`"},
	ProductProductionUnit:                    whereHelperstring{field: "`data_platform_inspection_lot_confirmation_header_data`.`ProductProductionUnit`"},
	ProductOperationUnit:                     whereHelperstring{field: "`data_platform_inspection_lot_confirmation_header_data`.`ProductOperationUnit`"},
	OperationPlannedScrapInPercent:           whereHelpernull_Float32{field: "`data_platform_inspection_lot_confirmation_header_data`.`OperationPlannedScrapInPercent`"},
	ConfirmationEntryDate:                    whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmationEntryDate`"},
	ConfirmationEntryTime:                    whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmationEntryTime`"},
	ConfirmationText:                         whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmationText`"},
	IsFinalConfirmation:                      whereHelpernull_Bool{field: "`data_platform_inspection_lot_confirmation_header_data`.`IsFinalConfirmation`"},
	WorkCenter:                               whereHelperint{field: "`data_platform_inspection_lot_confirmation_header_data`.`WorkCenter`"},
	EmployeeIDWhoConfirmed:                   whereHelperint{field: "`data_platform_inspection_lot_confirmation_header_data`.`EmployeeIDWhoConfirmed`"},
	ConfirmedExecutionStartDate:              whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedExecutionStartDate`"},
	ConfirmedExecutionStartTime:              whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedExecutionStartTime`"},
	ConfirmedSetupStartDate:                  whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedSetupStartDate`"},
	ConfirmedSetupStartTime:                  whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedSetupStartTime`"},
	ConfirmedProcessingStartDate:             whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedProcessingStartDate`"},
	ConfirmedProcessingStartTime:             whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedProcessingStartTime`"},
	ConfirmedExecutionEndDate:                whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedExecutionEndDate`"},
	ConfirmedExecutionEndTime:                whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedExecutionEndTime`"},
	ConfirmedSetupEndDate:                    whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedSetupEndDate`"},
	ConfirmedSetupEndTime:                    whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedSetupEndTime`"},
	ConfirmedProcessingEndDate:               whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedProcessingEndDate`"},
	ConfirmedProcessingEndTime:               whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedProcessingEndTime`"},
	ConfirmedWaitDuration:                    whereHelpernull_Float32{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedWaitDuration`"},
	WaitDurationUnit:                         whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`WaitDurationUnit`"},
	ConfirmedQueueDuration:                   whereHelpernull_Float32{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedQueueDuration`"},
	QueueDurationUnit:                        whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`QueueDurationUnit`"},
	ConfirmedMoveDuration:                    whereHelpernull_Float32{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedMoveDuration`"},
	MoveDurationUnit:                         whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`MoveDurationUnit`"},
	ConfirmedYieldQuantity:                   whereHelpernull_Float32{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedYieldQuantity`"},
	ConfirmedScrapQuantity:                   whereHelpernull_Float32{field: "`data_platform_inspection_lot_confirmation_header_data`.`ConfirmedScrapQuantity`"},
	OperationVarianceReason:                  whereHelpernull_String{field: "`data_platform_inspection_lot_confirmation_header_data`.`OperationVarianceReason`"},
	CreationDate:                             whereHelperstring{field: "`data_platform_inspection_lot_confirmation_header_data`.`CreationDate`"},
	CreationTime:                             whereHelperstring{field: "`data_platform_inspection_lot_confirmation_header_data`.`CreationTime`"},
	LastChangeDate:                           whereHelperstring{field: "`data_platform_inspection_lot_confirmation_header_data`.`LastChangeDate`"},
	LastChangeTime:                           whereHelperstring{field: "`data_platform_inspection_lot_confirmation_header_data`.`LastChangeTime`"},
	IsCancelled:                              whereHelpernull_Bool{field: "`data_platform_inspection_lot_confirmation_header_data`.`IsCancelled`"},
}

// DataPlatformInspectionLotConfirmationHeaderDatumRels is where relationship names are stored.
var DataPlatformInspectionLotConfirmationHeaderDatumRels = struct {
	MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum                string
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum                 string
	ProductionOrderDataPlatformProductionOrderItemDatum                      string
	ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum            string
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum           string
	QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum               string
	WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum                string
	WorkCenterDataPlatformWorkCenterGeneralDatum                             string
	InspectionLotDataPlatformInspectionLotOperationDatum                     string
	ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData string
}{
	MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:                "MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum:                 "ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductionOrderDataPlatformProductionOrderItemDatum:                      "ProductionOrderDataPlatformProductionOrderItemDatum",
	ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum:            "ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum:           "ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum",
	QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:               "QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:                "WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	WorkCenterDataPlatformWorkCenterGeneralDatum:                             "WorkCenterDataPlatformWorkCenterGeneralDatum",
	InspectionLotDataPlatformInspectionLotOperationDatum:                     "InspectionLotDataPlatformInspectionLotOperationDatum",
	ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData: "ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData",
}

// dataPlatformInspectionLotConfirmationHeaderDatumR is where relationships are stored.
type dataPlatformInspectionLotConfirmationHeaderDatumR struct {
	MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum                *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum                 *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductionOrderDataPlatformProductionOrderItemDatum                      *DataPlatformProductionOrderItemDatum                    `boil:"ProductionOrderDataPlatformProductionOrderItemDatum" json:"ProductionOrderDataPlatformProductionOrderItemDatum" toml:"ProductionOrderDataPlatformProductionOrderItemDatum" yaml:"ProductionOrderDataPlatformProductionOrderItemDatum"`
	ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum            *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum           *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum               *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum                *DataPlatformQuantityUnitQuantityUnitDatum               `boil:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	WorkCenterDataPlatformWorkCenterGeneralDatum                             *DataPlatformWorkCenterGeneralDatum                      `boil:"WorkCenterDataPlatformWorkCenterGeneralDatum" json:"WorkCenterDataPlatformWorkCenterGeneralDatum" toml:"WorkCenterDataPlatformWorkCenterGeneralDatum" yaml:"WorkCenterDataPlatformWorkCenterGeneralDatum"`
	InspectionLotDataPlatformInspectionLotOperationDatum                     *DataPlatformInspectionLotOperationDatum                 `boil:"InspectionLotDataPlatformInspectionLotOperationDatum" json:"InspectionLotDataPlatformInspectionLotOperationDatum" toml:"InspectionLotDataPlatformInspectionLotOperationDatum" yaml:"InspectionLotDataPlatformInspectionLotOperationDatum"`
	ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData DataPlatformInspectionLotConfirmationHeaderDocDatumSlice `boil:"ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData" json:"ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData" toml:"ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData" yaml:"ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInspectionLotConfirmationHeaderDatumR) NewStruct() *dataPlatformInspectionLotConfirmationHeaderDatumR {
	return &dataPlatformInspectionLotConfirmationHeaderDatumR{}
}

func (r *dataPlatformInspectionLotConfirmationHeaderDatumR) GetMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionLotConfirmationHeaderDatumR) GetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionLotConfirmationHeaderDatumR) GetProductionOrderDataPlatformProductionOrderItemDatum() *DataPlatformProductionOrderItemDatum {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDataPlatformProductionOrderItemDatum
}

func (r *dataPlatformInspectionLotConfirmationHeaderDatumR) GetProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionLotConfirmationHeaderDatumR) GetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionLotConfirmationHeaderDatumR) GetQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionLotConfirmationHeaderDatumR) GetWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionLotConfirmationHeaderDatumR) GetWorkCenterDataPlatformWorkCenterGeneralDatum() *DataPlatformWorkCenterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.WorkCenterDataPlatformWorkCenterGeneralDatum
}

func (r *dataPlatformInspectionLotConfirmationHeaderDatumR) GetInspectionLotDataPlatformInspectionLotOperationDatum() *DataPlatformInspectionLotOperationDatum {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformInspectionLotOperationDatum
}

func (r *dataPlatformInspectionLotConfirmationHeaderDatumR) GetConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData() DataPlatformInspectionLotConfirmationHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData
}

// dataPlatformInspectionLotConfirmationHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformInspectionLotConfirmationHeaderDatumL struct{}

var (
	dataPlatformInspectionLotConfirmationHeaderDatumAllColumns            = []string{"InspectionLot", "Operations", "OperationsItem", "OperationID", "ConfirmationCountingID", "Inspection", "ProductionOrder", "ProductionOrderItem", "InspectionType", "InspectionTypeValueUnit", "InspectionTypePlannedValue", "InspectionTypeCertificateType", "InspectionTypeCertificateValueInText", "InspectionTypeCertificateValueInQuantity", "InspectionLotInspectionText", "InspectionTypeConfirmedValueInText", "InspectionTypeConfirmedValueInQuantity", "InspectionResult", "OperationPlannedQuantityInBaseUnit", "OperationPlannedQuantityInProductionUnit", "OperationPlannedQuantityInOperationUnit", "ProductBaseUnit", "ProductProductionUnit", "ProductOperationUnit", "OperationPlannedScrapInPercent", "ConfirmationEntryDate", "ConfirmationEntryTime", "ConfirmationText", "IsFinalConfirmation", "WorkCenter", "EmployeeIDWhoConfirmed", "ConfirmedExecutionStartDate", "ConfirmedExecutionStartTime", "ConfirmedSetupStartDate", "ConfirmedSetupStartTime", "ConfirmedProcessingStartDate", "ConfirmedProcessingStartTime", "ConfirmedExecutionEndDate", "ConfirmedExecutionEndTime", "ConfirmedSetupEndDate", "ConfirmedSetupEndTime", "ConfirmedProcessingEndDate", "ConfirmedProcessingEndTime", "ConfirmedWaitDuration", "WaitDurationUnit", "ConfirmedQueueDuration", "QueueDurationUnit", "ConfirmedMoveDuration", "MoveDurationUnit", "ConfirmedYieldQuantity", "ConfirmedScrapQuantity", "OperationVarianceReason", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled"}
	dataPlatformInspectionLotConfirmationHeaderDatumColumnsWithoutDefault = []string{"InspectionLot", "Operations", "OperationsItem", "OperationID", "ConfirmationCountingID", "Inspection", "ProductionOrder", "ProductionOrderItem", "InspectionType", "InspectionTypeValueUnit", "InspectionTypePlannedValue", "InspectionTypeCertificateType", "InspectionTypeCertificateValueInText", "InspectionTypeCertificateValueInQuantity", "InspectionLotInspectionText", "InspectionTypeConfirmedValueInText", "InspectionTypeConfirmedValueInQuantity", "InspectionResult", "OperationPlannedQuantityInBaseUnit", "OperationPlannedQuantityInProductionUnit", "OperationPlannedQuantityInOperationUnit", "ProductBaseUnit", "ProductProductionUnit", "ProductOperationUnit", "OperationPlannedScrapInPercent", "ConfirmationEntryDate", "ConfirmationEntryTime", "ConfirmationText", "IsFinalConfirmation", "WorkCenter", "EmployeeIDWhoConfirmed", "ConfirmedExecutionStartDate", "ConfirmedExecutionStartTime", "ConfirmedSetupStartDate", "ConfirmedSetupStartTime", "ConfirmedProcessingStartDate", "ConfirmedProcessingStartTime", "ConfirmedExecutionEndDate", "ConfirmedExecutionEndTime", "ConfirmedSetupEndDate", "ConfirmedSetupEndTime", "ConfirmedProcessingEndDate", "ConfirmedProcessingEndTime", "ConfirmedWaitDuration", "WaitDurationUnit", "ConfirmedQueueDuration", "QueueDurationUnit", "ConfirmedMoveDuration", "MoveDurationUnit", "ConfirmedYieldQuantity", "ConfirmedScrapQuantity", "OperationVarianceReason", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled"}
	dataPlatformInspectionLotConfirmationHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns     = []string{"InspectionLot", "Operations", "OperationsItem", "OperationID", "ConfirmationCountingID"}
	dataPlatformInspectionLotConfirmationHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInspectionLotConfirmationHeaderDatumSlice is an alias for a slice of pointers to DataPlatformInspectionLotConfirmationHeaderDatum.
	// This should almost always be used instead of []DataPlatformInspectionLotConfirmationHeaderDatum.
	DataPlatformInspectionLotConfirmationHeaderDatumSlice []*DataPlatformInspectionLotConfirmationHeaderDatum

	dataPlatformInspectionLotConfirmationHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInspectionLotConfirmationHeaderDatumType                 = reflect.TypeOf(&DataPlatformInspectionLotConfirmationHeaderDatum{})
	dataPlatformInspectionLotConfirmationHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformInspectionLotConfirmationHeaderDatumType)
	dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInspectionLotConfirmationHeaderDatumType, dataPlatformInspectionLotConfirmationHeaderDatumMapping, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns)
	dataPlatformInspectionLotConfirmationHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformInspectionLotConfirmationHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInspectionLotConfirmationHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInspectionLotConfirmationHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInspectionLotConfirmationHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInspectionLotConfirmationHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInspectionLotConfirmationHeaderDatum record from the query.
func (q dataPlatformInspectionLotConfirmationHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInspectionLotConfirmationHeaderDatum, error) {
	o := &DataPlatformInspectionLotConfirmationHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_inspection_lot_confirmation_header_data")
	}

	return o, nil
}

// All returns all DataPlatformInspectionLotConfirmationHeaderDatum records from the query.
func (q dataPlatformInspectionLotConfirmationHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInspectionLotConfirmationHeaderDatumSlice, error) {
	var o []*DataPlatformInspectionLotConfirmationHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInspectionLotConfirmationHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInspectionLotConfirmationHeaderDatum records in the query.
func (q dataPlatformInspectionLotConfirmationHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_inspection_lot_confirmation_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInspectionLotConfirmationHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_inspection_lot_confirmation_header_data exists")
	}

	return count > 0, nil
}

// MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.MoveDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductBaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductionOrderDataPlatformProductionOrderItemDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) ProductionOrderDataPlatformProductionOrderItemDatum(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductionOrder` = ?", o.ProductionOrder),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductOperationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductProductionUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.QueueDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.WaitDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// WorkCenterDataPlatformWorkCenterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) WorkCenterDataPlatformWorkCenterGeneralDatum(mods ...qm.QueryMod) dataPlatformWorkCenterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`WorkCenter` = ?", o.WorkCenter),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformWorkCenterGeneralData(queryMods...)
}

// InspectionLotDataPlatformInspectionLotOperationDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) InspectionLotDataPlatformInspectionLotOperationDatum(mods ...qm.QueryMod) dataPlatformInspectionLotOperationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InspectionLot` = ?", o.InspectionLot),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInspectionLotOperationData(queryMods...)
}

// ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData retrieves all the data_platform_inspection_lot_confirmation_header_doc_datum's DataPlatformInspectionLotConfirmationHeaderDocData with an executor via ConfirmationCountingID column.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData(mods ...qm.QueryMod) dataPlatformInspectionLotConfirmationHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_lot_confirmation_header_doc_data`.`ConfirmationCountingID`=?", o.ConfirmationCountingID),
	)

	return DataPlatformInspectionLotConfirmationHeaderDocData(queryMods...)
}

// LoadMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotConfirmationHeaderDatumL) LoadMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotConfirmationHeaderDatum
	var object *DataPlatformInspectionLotConfirmationHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*DataPlatformInspectionLotConfirmationHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotConfirmationHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*[]*DataPlatformInspectionLotConfirmationHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
		}
		if !queries.IsNil(object.MoveDurationUnit) {
			args = append(args, object.MoveDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MoveDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MoveDurationUnit) {
				args = append(args, obj.MoveDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MoveDurationUnit, foreign.QuantityUnit) {
				local.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotConfirmationHeaderDatumL) LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotConfirmationHeaderDatum
	var object *DataPlatformInspectionLotConfirmationHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*DataPlatformInspectionLotConfirmationHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotConfirmationHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*[]*DataPlatformInspectionLotConfirmationHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
		}
		args = append(args, object.ProductBaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductBaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductBaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductBaseUnit == foreign.QuantityUnit {
				local.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDataPlatformProductionOrderItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotConfirmationHeaderDatumL) LoadProductionOrderDataPlatformProductionOrderItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotConfirmationHeaderDatum
	var object *DataPlatformInspectionLotConfirmationHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*DataPlatformInspectionLotConfirmationHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotConfirmationHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*[]*DataPlatformInspectionLotConfirmationHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
		}
		args = append(args, object.ProductionOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductionOrder {
					continue Outer
				}
			}

			args = append(args, obj.ProductionOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.ProductionOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionOrderItemDatum")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionOrderItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionOrderDataPlatformProductionOrderItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductionOrder == foreign.ProductionOrder {
				local.R.ProductionOrderDataPlatformProductionOrderItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotConfirmationHeaderDatumL) LoadProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotConfirmationHeaderDatum
	var object *DataPlatformInspectionLotConfirmationHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*DataPlatformInspectionLotConfirmationHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotConfirmationHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*[]*DataPlatformInspectionLotConfirmationHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
		}
		args = append(args, object.ProductOperationUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductOperationUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductOperationUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductOperationUnit == foreign.QuantityUnit {
				local.R.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotConfirmationHeaderDatumL) LoadProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotConfirmationHeaderDatum
	var object *DataPlatformInspectionLotConfirmationHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*DataPlatformInspectionLotConfirmationHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotConfirmationHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*[]*DataPlatformInspectionLotConfirmationHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
		}
		args = append(args, object.ProductProductionUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductProductionUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductProductionUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductProductionUnit == foreign.QuantityUnit {
				local.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotConfirmationHeaderDatumL) LoadQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotConfirmationHeaderDatum
	var object *DataPlatformInspectionLotConfirmationHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*DataPlatformInspectionLotConfirmationHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotConfirmationHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*[]*DataPlatformInspectionLotConfirmationHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
		}
		if !queries.IsNil(object.QueueDurationUnit) {
			args = append(args, object.QueueDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QueueDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.QueueDurationUnit) {
				args = append(args, obj.QueueDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.QueueDurationUnit, foreign.QuantityUnit) {
				local.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotConfirmationHeaderDatumL) LoadWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotConfirmationHeaderDatum
	var object *DataPlatformInspectionLotConfirmationHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*DataPlatformInspectionLotConfirmationHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotConfirmationHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*[]*DataPlatformInspectionLotConfirmationHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
		}
		if !queries.IsNil(object.WaitDurationUnit) {
			args = append(args, object.WaitDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WaitDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.WaitDurationUnit) {
				args = append(args, obj.WaitDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WaitDurationUnit, foreign.QuantityUnit) {
				local.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadWorkCenterDataPlatformWorkCenterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotConfirmationHeaderDatumL) LoadWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotConfirmationHeaderDatum
	var object *DataPlatformInspectionLotConfirmationHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*DataPlatformInspectionLotConfirmationHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotConfirmationHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*[]*DataPlatformInspectionLotConfirmationHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
		}
		args = append(args, object.WorkCenter)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.WorkCenter {
					continue Outer
				}
			}

			args = append(args, obj.WorkCenter)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_work_center_general_data`),
		qm.WhereIn(`data_platform_work_center_general_data.WorkCenter in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformWorkCenterGeneralDatum")
	}

	var resultSlice []*DataPlatformWorkCenterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformWorkCenterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_work_center_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_work_center_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WorkCenterDataPlatformWorkCenterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WorkCenter == foreign.WorkCenter {
				local.R.WorkCenterDataPlatformWorkCenterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionLotDataPlatformInspectionLotOperationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotConfirmationHeaderDatumL) LoadInspectionLotDataPlatformInspectionLotOperationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotConfirmationHeaderDatum
	var object *DataPlatformInspectionLotConfirmationHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*DataPlatformInspectionLotConfirmationHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotConfirmationHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*[]*DataPlatformInspectionLotConfirmationHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
		}
		args = append(args, object.InspectionLot)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionLot {
					continue Outer
				}
			}

			args = append(args, obj.InspectionLot)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_operation_data`),
		qm.WhereIn(`data_platform_inspection_lot_operation_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInspectionLotOperationDatum")
	}

	var resultSlice []*DataPlatformInspectionLotOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInspectionLotOperationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_inspection_lot_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_operation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionLotDataPlatformInspectionLotOperationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InspectionLot == foreign.InspectionLot {
				local.R.InspectionLotDataPlatformInspectionLotOperationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionLotConfirmationHeaderDatumL) LoadConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotConfirmationHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotConfirmationHeaderDatum
	var object *DataPlatformInspectionLotConfirmationHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*DataPlatformInspectionLotConfirmationHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotConfirmationHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotConfirmationHeaderDatum.(*[]*DataPlatformInspectionLotConfirmationHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotConfirmationHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
		}
		args = append(args, object.ConfirmationCountingID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ConfirmationCountingID {
					continue Outer
				}
			}

			args = append(args, obj.ConfirmationCountingID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_confirmation_header_doc_data`),
		qm.WhereIn(`data_platform_inspection_lot_confirmation_header_doc_data.ConfirmationCountingID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_lot_confirmation_header_doc_data")
	}

	var resultSlice []*DataPlatformInspectionLotConfirmationHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_lot_confirmation_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_lot_confirmation_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_confirmation_header_doc_data")
	}

	if singular {
		object.R.ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ConfirmationCountingID == foreign.ConfirmationCountingID {
				local.R.ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData = append(local.R.ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// SetMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionLotConfirmationHeaderDatum to the related item.
// Sets o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) SetMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_confirmation_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"MoveDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID, o.ConfirmationCountingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MoveDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{
			MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) RemoveMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.MoveDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("MoveDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionLotConfirmationHeaderDatum to the related item.
// Sets o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_confirmation_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID, o.ConfirmationCountingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductBaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{
			ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductionOrderDataPlatformProductionOrderItemDatum of the dataPlatformInspectionLotConfirmationHeaderDatum to the related item.
// Sets o.R.ProductionOrderDataPlatformProductionOrderItemDatum to related.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) SetProductionOrderDataPlatformProductionOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionOrderItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_confirmation_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrder"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductionOrder, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID, o.ConfirmationCountingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductionOrder = related.ProductionOrder
	if o.R == nil {
		o.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{
			ProductionOrderDataPlatformProductionOrderItemDatum: related,
		}
	} else {
		o.R.ProductionOrderDataPlatformProductionOrderItemDatum = related
	}

	return nil
}

// SetProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionLotConfirmationHeaderDatum to the related item.
// Sets o.R.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) SetProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_confirmation_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductOperationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID, o.ConfirmationCountingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductOperationUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{
			ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionLotConfirmationHeaderDatum to the related item.
// Sets o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) SetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_confirmation_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID, o.ConfirmationCountingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductProductionUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{
			ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionLotConfirmationHeaderDatum to the related item.
// Sets o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) SetQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_confirmation_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"QueueDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID, o.ConfirmationCountingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.QueueDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{
			QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) RemoveQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.QueueDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("QueueDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionLotConfirmationHeaderDatum to the related item.
// Sets o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) SetWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_confirmation_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"WaitDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID, o.ConfirmationCountingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WaitDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{
			WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) RemoveWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.WaitDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("WaitDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetWorkCenterDataPlatformWorkCenterGeneralDatum of the dataPlatformInspectionLotConfirmationHeaderDatum to the related item.
// Sets o.R.WorkCenterDataPlatformWorkCenterGeneralDatum to related.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) SetWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformWorkCenterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_confirmation_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"WorkCenter"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.WorkCenter, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID, o.ConfirmationCountingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WorkCenter = related.WorkCenter
	if o.R == nil {
		o.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{
			WorkCenterDataPlatformWorkCenterGeneralDatum: related,
		}
	} else {
		o.R.WorkCenterDataPlatformWorkCenterGeneralDatum = related
	}

	return nil
}

// SetInspectionLotDataPlatformInspectionLotOperationDatum of the dataPlatformInspectionLotConfirmationHeaderDatum to the related item.
// Sets o.R.InspectionLotDataPlatformInspectionLotOperationDatum to related.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) SetInspectionLotDataPlatformInspectionLotOperationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInspectionLotOperationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_confirmation_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.InspectionLot, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID, o.ConfirmationCountingID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InspectionLot = related.InspectionLot
	if o.R == nil {
		o.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{
			InspectionLotDataPlatformInspectionLotOperationDatum: related,
		}
	} else {
		o.R.InspectionLotDataPlatformInspectionLotOperationDatum = related
	}

	return nil
}

// AddConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_inspection_lot_confirmation_header_datum, optionally inserting them as new records.
// Appends related to o.R.ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) AddConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotConfirmationHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConfirmationCountingID = o.ConfirmationCountingID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_lot_confirmation_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ConfirmationCountingID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ConfirmationCountingID, rel.InspectionLot, rel.Operations, rel.OperationsItem, rel.OperationID, rel.ConfirmationCountingID, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConfirmationCountingID = o.ConfirmationCountingID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionLotConfirmationHeaderDatumR{
			ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData: related,
		}
	} else {
		o.R.ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData = append(o.R.ConfirmationCountingIDDataPlatformInspectionLotConfirmationHeaderDocData, related...)
	}

	return nil
}

// DataPlatformInspectionLotConfirmationHeaderData retrieves all the records using an executor.
func DataPlatformInspectionLotConfirmationHeaderData(mods ...qm.QueryMod) dataPlatformInspectionLotConfirmationHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_inspection_lot_confirmation_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_inspection_lot_confirmation_header_data`.*"})
	}

	return dataPlatformInspectionLotConfirmationHeaderDatumQuery{q}
}

// FindDataPlatformInspectionLotConfirmationHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInspectionLotConfirmationHeaderDatum(ctx context.Context, exec boil.ContextExecutor, inspectionLot int, operations int, operationsItem int, operationID int, confirmationCountingID int, selectCols ...string) (*DataPlatformInspectionLotConfirmationHeaderDatum, error) {
	dataPlatformInspectionLotConfirmationHeaderDatumObj := &DataPlatformInspectionLotConfirmationHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_inspection_lot_confirmation_header_data` where `InspectionLot`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=? AND `ConfirmationCountingID`=?", sel,
	)

	q := queries.Raw(query, inspectionLot, operations, operationsItem, operationID, confirmationCountingID)

	err := q.Bind(ctx, exec, dataPlatformInspectionLotConfirmationHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_inspection_lot_confirmation_header_data")
	}

	return dataPlatformInspectionLotConfirmationHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_lot_confirmation_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionLotConfirmationHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInspectionLotConfirmationHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotConfirmationHeaderDatumInsertCache[key]
	dataPlatformInspectionLotConfirmationHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInspectionLotConfirmationHeaderDatumAllColumns,
			dataPlatformInspectionLotConfirmationHeaderDatumColumnsWithDefault,
			dataPlatformInspectionLotConfirmationHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotConfirmationHeaderDatumType, dataPlatformInspectionLotConfirmationHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInspectionLotConfirmationHeaderDatumType, dataPlatformInspectionLotConfirmationHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_inspection_lot_confirmation_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_inspection_lot_confirmation_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_inspection_lot_confirmation_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_inspection_lot_confirmation_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InspectionLot,
		o.Operations,
		o.OperationsItem,
		o.OperationID,
		o.ConfirmationCountingID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_lot_confirmation_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionLotConfirmationHeaderDatumInsertCacheMut.Lock()
		dataPlatformInspectionLotConfirmationHeaderDatumInsertCache[key] = cache
		dataPlatformInspectionLotConfirmationHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInspectionLotConfirmationHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInspectionLotConfirmationHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotConfirmationHeaderDatumUpdateCache[key]
	dataPlatformInspectionLotConfirmationHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInspectionLotConfirmationHeaderDatumAllColumns,
			dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_inspection_lot_confirmation_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_inspection_lot_confirmation_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotConfirmationHeaderDatumType, dataPlatformInspectionLotConfirmationHeaderDatumMapping, append(wl, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_inspection_lot_confirmation_header_data row")
	}

	if !cached {
		dataPlatformInspectionLotConfirmationHeaderDatumUpdateCacheMut.Lock()
		dataPlatformInspectionLotConfirmationHeaderDatumUpdateCache[key] = cache
		dataPlatformInspectionLotConfirmationHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInspectionLotConfirmationHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_inspection_lot_confirmation_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInspectionLotConfirmationHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_inspection_lot_confirmation_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInspectionLotConfirmationHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformInspectionLotConfirmationHeaderDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_lot_confirmation_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionLotConfirmationHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInspectionLotConfirmationHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInspectionLotConfirmationHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotConfirmationHeaderDatumUpsertCache[key]
	dataPlatformInspectionLotConfirmationHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInspectionLotConfirmationHeaderDatumAllColumns,
			dataPlatformInspectionLotConfirmationHeaderDatumColumnsWithDefault,
			dataPlatformInspectionLotConfirmationHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInspectionLotConfirmationHeaderDatumAllColumns,
			dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_inspection_lot_confirmation_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_inspection_lot_confirmation_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_inspection_lot_confirmation_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotConfirmationHeaderDatumType, dataPlatformInspectionLotConfirmationHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInspectionLotConfirmationHeaderDatumType, dataPlatformInspectionLotConfirmationHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_inspection_lot_confirmation_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInspectionLotConfirmationHeaderDatumType, dataPlatformInspectionLotConfirmationHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_inspection_lot_confirmation_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_lot_confirmation_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionLotConfirmationHeaderDatumUpsertCacheMut.Lock()
		dataPlatformInspectionLotConfirmationHeaderDatumUpsertCache[key] = cache
		dataPlatformInspectionLotConfirmationHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInspectionLotConfirmationHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInspectionLotConfirmationHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_inspection_lot_confirmation_header_data` WHERE `InspectionLot`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=? AND `ConfirmationCountingID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_inspection_lot_confirmation_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInspectionLotConfirmationHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInspectionLotConfirmationHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_inspection_lot_confirmation_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInspectionLotConfirmationHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_inspection_lot_confirmation_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInspectionLotConfirmationHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInspectionLotConfirmationHeaderDatum(ctx, exec, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID, o.ConfirmationCountingID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInspectionLotConfirmationHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInspectionLotConfirmationHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_inspection_lot_confirmation_header_data`.* FROM `data_platform_inspection_lot_confirmation_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInspectionLotConfirmationHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInspectionLotConfirmationHeaderDatumExists checks if the DataPlatformInspectionLotConfirmationHeaderDatum row exists.
func DataPlatformInspectionLotConfirmationHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, inspectionLot int, operations int, operationsItem int, operationID int, confirmationCountingID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_inspection_lot_confirmation_header_data` where `InspectionLot`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=? AND `ConfirmationCountingID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inspectionLot, operations, operationsItem, operationID, confirmationCountingID)
	}
	row := exec.QueryRowContext(ctx, sql, inspectionLot, operations, operationsItem, operationID, confirmationCountingID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_inspection_lot_confirmation_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInspectionLotConfirmationHeaderDatum row exists.
func (o *DataPlatformInspectionLotConfirmationHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInspectionLotConfirmationHeaderDatumExists(ctx, exec, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID, o.ConfirmationCountingID)
}
