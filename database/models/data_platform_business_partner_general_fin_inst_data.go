// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerGeneralFinInstDatum is an object representing the database table.
type DataPlatformBusinessPartnerGeneralFinInstDatum struct {
	BusinessPartner           int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	FinInstIdentification     int         `boil:"FinInstIdentification" json:"FinInstIdentification" toml:"FinInstIdentification" yaml:"FinInstIdentification"`
	ValidityEndDate           string      `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	ValidityStartDate         string      `boil:"ValidityStartDate" json:"ValidityStartDate" toml:"ValidityStartDate" yaml:"ValidityStartDate"`
	FinInstCountry            string      `boil:"FinInstCountry" json:"FinInstCountry" toml:"FinInstCountry" yaml:"FinInstCountry"`
	FinInstCode               string      `boil:"FinInstCode" json:"FinInstCode" toml:"FinInstCode" yaml:"FinInstCode"`
	FinInstBranchCode         string      `boil:"FinInstBranchCode" json:"FinInstBranchCode" toml:"FinInstBranchCode" yaml:"FinInstBranchCode"`
	FinInstFullCode           string      `boil:"FinInstFullCode" json:"FinInstFullCode" toml:"FinInstFullCode" yaml:"FinInstFullCode"`
	FinInstName               null.String `boil:"FinInstName" json:"FinInstName,omitempty" toml:"FinInstName" yaml:"FinInstName,omitempty"`
	FinInstBranchName         null.String `boil:"FinInstBranchName" json:"FinInstBranchName,omitempty" toml:"FinInstBranchName" yaml:"FinInstBranchName,omitempty"`
	SWIFTCode                 null.String `boil:"SWIFTCode" json:"SWIFTCode,omitempty" toml:"SWIFTCode" yaml:"SWIFTCode,omitempty"`
	InternalFinInstCustomerID null.Int    `boil:"InternalFinInstCustomerID" json:"InternalFinInstCustomerID,omitempty" toml:"InternalFinInstCustomerID" yaml:"InternalFinInstCustomerID,omitempty"`
	InternalFinInstAccountID  null.Int    `boil:"InternalFinInstAccountID" json:"InternalFinInstAccountID,omitempty" toml:"InternalFinInstAccountID" yaml:"InternalFinInstAccountID,omitempty"`
	FinInstControlKey         null.String `boil:"FinInstControlKey" json:"FinInstControlKey,omitempty" toml:"FinInstControlKey" yaml:"FinInstControlKey,omitempty"`
	FinInstAccountName        null.String `boil:"FinInstAccountName" json:"FinInstAccountName,omitempty" toml:"FinInstAccountName" yaml:"FinInstAccountName,omitempty"`
	FinInstAccount            null.String `boil:"FinInstAccount" json:"FinInstAccount,omitempty" toml:"FinInstAccount" yaml:"FinInstAccount,omitempty"`
	HouseBank                 null.String `boil:"HouseBank" json:"HouseBank,omitempty" toml:"HouseBank" yaml:"HouseBank,omitempty"`
	HouseBankAccount          null.String `boil:"HouseBankAccount" json:"HouseBankAccount,omitempty" toml:"HouseBankAccount" yaml:"HouseBankAccount,omitempty"`
	IsMarkedForDeletion       null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBusinessPartnerGeneralFinInstDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerGeneralFinInstDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerGeneralFinInstDatumColumns = struct {
	BusinessPartner           string
	FinInstIdentification     string
	ValidityEndDate           string
	ValidityStartDate         string
	FinInstCountry            string
	FinInstCode               string
	FinInstBranchCode         string
	FinInstFullCode           string
	FinInstName               string
	FinInstBranchName         string
	SWIFTCode                 string
	InternalFinInstCustomerID string
	InternalFinInstAccountID  string
	FinInstControlKey         string
	FinInstAccountName        string
	FinInstAccount            string
	HouseBank                 string
	HouseBankAccount          string
	IsMarkedForDeletion       string
}{
	BusinessPartner:           "BusinessPartner",
	FinInstIdentification:     "FinInstIdentification",
	ValidityEndDate:           "ValidityEndDate",
	ValidityStartDate:         "ValidityStartDate",
	FinInstCountry:            "FinInstCountry",
	FinInstCode:               "FinInstCode",
	FinInstBranchCode:         "FinInstBranchCode",
	FinInstFullCode:           "FinInstFullCode",
	FinInstName:               "FinInstName",
	FinInstBranchName:         "FinInstBranchName",
	SWIFTCode:                 "SWIFTCode",
	InternalFinInstCustomerID: "InternalFinInstCustomerID",
	InternalFinInstAccountID:  "InternalFinInstAccountID",
	FinInstControlKey:         "FinInstControlKey",
	FinInstAccountName:        "FinInstAccountName",
	FinInstAccount:            "FinInstAccount",
	HouseBank:                 "HouseBank",
	HouseBankAccount:          "HouseBankAccount",
	IsMarkedForDeletion:       "IsMarkedForDeletion",
}

var DataPlatformBusinessPartnerGeneralFinInstDatumTableColumns = struct {
	BusinessPartner           string
	FinInstIdentification     string
	ValidityEndDate           string
	ValidityStartDate         string
	FinInstCountry            string
	FinInstCode               string
	FinInstBranchCode         string
	FinInstFullCode           string
	FinInstName               string
	FinInstBranchName         string
	SWIFTCode                 string
	InternalFinInstCustomerID string
	InternalFinInstAccountID  string
	FinInstControlKey         string
	FinInstAccountName        string
	FinInstAccount            string
	HouseBank                 string
	HouseBankAccount          string
	IsMarkedForDeletion       string
}{
	BusinessPartner:           "data_platform_business_partner_general_fin_inst_data.BusinessPartner",
	FinInstIdentification:     "data_platform_business_partner_general_fin_inst_data.FinInstIdentification",
	ValidityEndDate:           "data_platform_business_partner_general_fin_inst_data.ValidityEndDate",
	ValidityStartDate:         "data_platform_business_partner_general_fin_inst_data.ValidityStartDate",
	FinInstCountry:            "data_platform_business_partner_general_fin_inst_data.FinInstCountry",
	FinInstCode:               "data_platform_business_partner_general_fin_inst_data.FinInstCode",
	FinInstBranchCode:         "data_platform_business_partner_general_fin_inst_data.FinInstBranchCode",
	FinInstFullCode:           "data_platform_business_partner_general_fin_inst_data.FinInstFullCode",
	FinInstName:               "data_platform_business_partner_general_fin_inst_data.FinInstName",
	FinInstBranchName:         "data_platform_business_partner_general_fin_inst_data.FinInstBranchName",
	SWIFTCode:                 "data_platform_business_partner_general_fin_inst_data.SWIFTCode",
	InternalFinInstCustomerID: "data_platform_business_partner_general_fin_inst_data.InternalFinInstCustomerID",
	InternalFinInstAccountID:  "data_platform_business_partner_general_fin_inst_data.InternalFinInstAccountID",
	FinInstControlKey:         "data_platform_business_partner_general_fin_inst_data.FinInstControlKey",
	FinInstAccountName:        "data_platform_business_partner_general_fin_inst_data.FinInstAccountName",
	FinInstAccount:            "data_platform_business_partner_general_fin_inst_data.FinInstAccount",
	HouseBank:                 "data_platform_business_partner_general_fin_inst_data.HouseBank",
	HouseBankAccount:          "data_platform_business_partner_general_fin_inst_data.HouseBankAccount",
	IsMarkedForDeletion:       "data_platform_business_partner_general_fin_inst_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformBusinessPartnerGeneralFinInstDatumWhere = struct {
	BusinessPartner           whereHelperint
	FinInstIdentification     whereHelperint
	ValidityEndDate           whereHelperstring
	ValidityStartDate         whereHelperstring
	FinInstCountry            whereHelperstring
	FinInstCode               whereHelperstring
	FinInstBranchCode         whereHelperstring
	FinInstFullCode           whereHelperstring
	FinInstName               whereHelpernull_String
	FinInstBranchName         whereHelpernull_String
	SWIFTCode                 whereHelpernull_String
	InternalFinInstCustomerID whereHelpernull_Int
	InternalFinInstAccountID  whereHelpernull_Int
	FinInstControlKey         whereHelpernull_String
	FinInstAccountName        whereHelpernull_String
	FinInstAccount            whereHelpernull_String
	HouseBank                 whereHelpernull_String
	HouseBankAccount          whereHelpernull_String
	IsMarkedForDeletion       whereHelpernull_Bool
}{
	BusinessPartner:           whereHelperint{field: "`data_platform_business_partner_general_fin_inst_data`.`BusinessPartner`"},
	FinInstIdentification:     whereHelperint{field: "`data_platform_business_partner_general_fin_inst_data`.`FinInstIdentification`"},
	ValidityEndDate:           whereHelperstring{field: "`data_platform_business_partner_general_fin_inst_data`.`ValidityEndDate`"},
	ValidityStartDate:         whereHelperstring{field: "`data_platform_business_partner_general_fin_inst_data`.`ValidityStartDate`"},
	FinInstCountry:            whereHelperstring{field: "`data_platform_business_partner_general_fin_inst_data`.`FinInstCountry`"},
	FinInstCode:               whereHelperstring{field: "`data_platform_business_partner_general_fin_inst_data`.`FinInstCode`"},
	FinInstBranchCode:         whereHelperstring{field: "`data_platform_business_partner_general_fin_inst_data`.`FinInstBranchCode`"},
	FinInstFullCode:           whereHelperstring{field: "`data_platform_business_partner_general_fin_inst_data`.`FinInstFullCode`"},
	FinInstName:               whereHelpernull_String{field: "`data_platform_business_partner_general_fin_inst_data`.`FinInstName`"},
	FinInstBranchName:         whereHelpernull_String{field: "`data_platform_business_partner_general_fin_inst_data`.`FinInstBranchName`"},
	SWIFTCode:                 whereHelpernull_String{field: "`data_platform_business_partner_general_fin_inst_data`.`SWIFTCode`"},
	InternalFinInstCustomerID: whereHelpernull_Int{field: "`data_platform_business_partner_general_fin_inst_data`.`InternalFinInstCustomerID`"},
	InternalFinInstAccountID:  whereHelpernull_Int{field: "`data_platform_business_partner_general_fin_inst_data`.`InternalFinInstAccountID`"},
	FinInstControlKey:         whereHelpernull_String{field: "`data_platform_business_partner_general_fin_inst_data`.`FinInstControlKey`"},
	FinInstAccountName:        whereHelpernull_String{field: "`data_platform_business_partner_general_fin_inst_data`.`FinInstAccountName`"},
	FinInstAccount:            whereHelpernull_String{field: "`data_platform_business_partner_general_fin_inst_data`.`FinInstAccount`"},
	HouseBank:                 whereHelpernull_String{field: "`data_platform_business_partner_general_fin_inst_data`.`HouseBank`"},
	HouseBankAccount:          whereHelpernull_String{field: "`data_platform_business_partner_general_fin_inst_data`.`HouseBankAccount`"},
	IsMarkedForDeletion:       whereHelpernull_Bool{field: "`data_platform_business_partner_general_fin_inst_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBusinessPartnerGeneralFinInstDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerGeneralFinInstDatumRels = struct {
}{}

// dataPlatformBusinessPartnerGeneralFinInstDatumR is where relationships are stored.
type dataPlatformBusinessPartnerGeneralFinInstDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerGeneralFinInstDatumR) NewStruct() *dataPlatformBusinessPartnerGeneralFinInstDatumR {
	return &dataPlatformBusinessPartnerGeneralFinInstDatumR{}
}

// dataPlatformBusinessPartnerGeneralFinInstDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerGeneralFinInstDatumL struct{}

var (
	dataPlatformBusinessPartnerGeneralFinInstDatumAllColumns            = []string{"BusinessPartner", "FinInstIdentification", "ValidityEndDate", "ValidityStartDate", "FinInstCountry", "FinInstCode", "FinInstBranchCode", "FinInstFullCode", "FinInstName", "FinInstBranchName", "SWIFTCode", "InternalFinInstCustomerID", "InternalFinInstAccountID", "FinInstControlKey", "FinInstAccountName", "FinInstAccount", "HouseBank", "HouseBankAccount", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerGeneralFinInstDatumColumnsWithoutDefault = []string{"BusinessPartner", "FinInstIdentification", "ValidityEndDate", "ValidityStartDate", "FinInstCountry", "FinInstCode", "FinInstBranchCode", "FinInstFullCode", "FinInstName", "FinInstBranchName", "SWIFTCode", "InternalFinInstCustomerID", "InternalFinInstAccountID", "FinInstControlKey", "FinInstAccountName", "FinInstAccount", "HouseBank", "HouseBankAccount", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerGeneralFinInstDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyColumns     = []string{"BusinessPartner", "FinInstIdentification", "ValidityEndDate", "ValidityStartDate"}
	dataPlatformBusinessPartnerGeneralFinInstDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerGeneralFinInstDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerGeneralFinInstDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerGeneralFinInstDatum.
	DataPlatformBusinessPartnerGeneralFinInstDatumSlice []*DataPlatformBusinessPartnerGeneralFinInstDatum

	dataPlatformBusinessPartnerGeneralFinInstDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerGeneralFinInstDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerGeneralFinInstDatum{})
	dataPlatformBusinessPartnerGeneralFinInstDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerGeneralFinInstDatumType)
	dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerGeneralFinInstDatumType, dataPlatformBusinessPartnerGeneralFinInstDatumMapping, dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerGeneralFinInstDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralFinInstDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerGeneralFinInstDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralFinInstDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerGeneralFinInstDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralFinInstDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformBusinessPartnerGeneralFinInstDatum record from the query.
func (q dataPlatformBusinessPartnerGeneralFinInstDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerGeneralFinInstDatum, error) {
	o := &DataPlatformBusinessPartnerGeneralFinInstDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_general_fin_inst_data")
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerGeneralFinInstDatum records from the query.
func (q dataPlatformBusinessPartnerGeneralFinInstDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerGeneralFinInstDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerGeneralFinInstDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerGeneralFinInstDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerGeneralFinInstDatum records in the query.
func (q dataPlatformBusinessPartnerGeneralFinInstDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_general_fin_inst_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerGeneralFinInstDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_general_fin_inst_data exists")
	}

	return count > 0, nil
}

// DataPlatformBusinessPartnerGeneralFinInstData retrieves all the records using an executor.
func DataPlatformBusinessPartnerGeneralFinInstData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralFinInstDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_general_fin_inst_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_general_fin_inst_data`.*"})
	}

	return dataPlatformBusinessPartnerGeneralFinInstDatumQuery{q}
}

// FindDataPlatformBusinessPartnerGeneralFinInstDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerGeneralFinInstDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, finInstIdentification int, validityEndDate string, validityStartDate string, selectCols ...string) (*DataPlatformBusinessPartnerGeneralFinInstDatum, error) {
	dataPlatformBusinessPartnerGeneralFinInstDatumObj := &DataPlatformBusinessPartnerGeneralFinInstDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_general_fin_inst_data` where `BusinessPartner`=? AND `FinInstIdentification`=? AND `ValidityEndDate`=? AND `ValidityStartDate`=?", sel,
	)

	q := queries.Raw(query, businessPartner, finInstIdentification, validityEndDate, validityStartDate)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerGeneralFinInstDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_general_fin_inst_data")
	}

	return dataPlatformBusinessPartnerGeneralFinInstDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerGeneralFinInstDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_general_fin_inst_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerGeneralFinInstDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerGeneralFinInstDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralFinInstDatumInsertCache[key]
	dataPlatformBusinessPartnerGeneralFinInstDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerGeneralFinInstDatumAllColumns,
			dataPlatformBusinessPartnerGeneralFinInstDatumColumnsWithDefault,
			dataPlatformBusinessPartnerGeneralFinInstDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralFinInstDatumType, dataPlatformBusinessPartnerGeneralFinInstDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralFinInstDatumType, dataPlatformBusinessPartnerGeneralFinInstDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_general_fin_inst_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_general_fin_inst_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_general_fin_inst_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_general_fin_inst_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.FinInstIdentification,
		o.ValidityEndDate,
		o.ValidityStartDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_general_fin_inst_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerGeneralFinInstDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralFinInstDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerGeneralFinInstDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformBusinessPartnerGeneralFinInstDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerGeneralFinInstDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerGeneralFinInstDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralFinInstDatumUpdateCache[key]
	dataPlatformBusinessPartnerGeneralFinInstDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerGeneralFinInstDatumAllColumns,
			dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_business_partner_general_fin_inst_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_general_fin_inst_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralFinInstDatumType, dataPlatformBusinessPartnerGeneralFinInstDatumMapping, append(wl, dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_business_partner_general_fin_inst_data row")
	}

	if !cached {
		dataPlatformBusinessPartnerGeneralFinInstDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralFinInstDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerGeneralFinInstDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerGeneralFinInstDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_business_partner_general_fin_inst_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerGeneralFinInstDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_general_fin_inst_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerGeneralFinInstDatum slice")
	}

	return nil
}

var mySQLDataPlatformBusinessPartnerGeneralFinInstDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerGeneralFinInstDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_general_fin_inst_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerGeneralFinInstDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerGeneralFinInstDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerGeneralFinInstDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralFinInstDatumUpsertCache[key]
	dataPlatformBusinessPartnerGeneralFinInstDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerGeneralFinInstDatumAllColumns,
			dataPlatformBusinessPartnerGeneralFinInstDatumColumnsWithDefault,
			dataPlatformBusinessPartnerGeneralFinInstDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerGeneralFinInstDatumAllColumns,
			dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_general_fin_inst_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_general_fin_inst_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_general_fin_inst_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralFinInstDatumType, dataPlatformBusinessPartnerGeneralFinInstDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralFinInstDatumType, dataPlatformBusinessPartnerGeneralFinInstDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_general_fin_inst_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralFinInstDatumType, dataPlatformBusinessPartnerGeneralFinInstDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_general_fin_inst_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_general_fin_inst_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerGeneralFinInstDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralFinInstDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerGeneralFinInstDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformBusinessPartnerGeneralFinInstDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerGeneralFinInstDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformBusinessPartnerGeneralFinInstDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_general_fin_inst_data` WHERE `BusinessPartner`=? AND `FinInstIdentification`=? AND `ValidityEndDate`=? AND `ValidityStartDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_business_partner_general_fin_inst_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerGeneralFinInstDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformBusinessPartnerGeneralFinInstDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_general_fin_inst_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerGeneralFinInstDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_general_fin_inst_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerGeneralFinInstDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerGeneralFinInstDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerGeneralFinInstDatum(ctx, exec, o.BusinessPartner, o.FinInstIdentification, o.ValidityEndDate, o.ValidityStartDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerGeneralFinInstDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerGeneralFinInstDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_general_fin_inst_data`.* FROM `data_platform_business_partner_general_fin_inst_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralFinInstDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerGeneralFinInstDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerGeneralFinInstDatumExists checks if the DataPlatformBusinessPartnerGeneralFinInstDatum row exists.
func DataPlatformBusinessPartnerGeneralFinInstDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, finInstIdentification int, validityEndDate string, validityStartDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_general_fin_inst_data` where `BusinessPartner`=? AND `FinInstIdentification`=? AND `ValidityEndDate`=? AND `ValidityStartDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, finInstIdentification, validityEndDate, validityStartDate)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, finInstIdentification, validityEndDate, validityStartDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_general_fin_inst_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerGeneralFinInstDatum row exists.
func (o *DataPlatformBusinessPartnerGeneralFinInstDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerGeneralFinInstDatumExists(ctx, exec, o.BusinessPartner, o.FinInstIdentification, o.ValidityEndDate, o.ValidityStartDate)
}
