// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPlantGeneralDatum is an object representing the database table.
type DataPlatformPlantGeneralDatum struct {
	BusinessPartner      int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	PlantFullName        null.String `boil:"PlantFullName" json:"PlantFullName,omitempty" toml:"PlantFullName" yaml:"PlantFullName,omitempty"`
	PlantName            string      `boil:"PlantName" json:"PlantName" toml:"PlantName" yaml:"PlantName"`
	Language             string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	CreationDate         time.Time   `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime         string      `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate       time.Time   `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime       string      `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	PlantFoundationDate  null.Time   `boil:"PlantFoundationDate" json:"PlantFoundationDate,omitempty" toml:"PlantFoundationDate" yaml:"PlantFoundationDate,omitempty"`
	PlantLiquidationDate null.Time   `boil:"PlantLiquidationDate" json:"PlantLiquidationDate,omitempty" toml:"PlantLiquidationDate" yaml:"PlantLiquidationDate,omitempty"`
	SearchTerm1          null.String `boil:"SearchTerm1" json:"SearchTerm1,omitempty" toml:"SearchTerm1" yaml:"SearchTerm1,omitempty"`
	SearchTerm2          null.String `boil:"SearchTerm2" json:"SearchTerm2,omitempty" toml:"SearchTerm2" yaml:"SearchTerm2,omitempty"`
	PlantDeathDate       null.Time   `boil:"PlantDeathDate" json:"PlantDeathDate,omitempty" toml:"PlantDeathDate" yaml:"PlantDeathDate,omitempty"`
	PlantIsBlocked       null.Bool   `boil:"PlantIsBlocked" json:"PlantIsBlocked,omitempty" toml:"PlantIsBlocked" yaml:"PlantIsBlocked,omitempty"`
	GroupPlantName1      null.String `boil:"GroupPlantName1" json:"GroupPlantName1,omitempty" toml:"GroupPlantName1" yaml:"GroupPlantName1,omitempty"`
	GroupPlantName2      null.String `boil:"GroupPlantName2" json:"GroupPlantName2,omitempty" toml:"GroupPlantName2" yaml:"GroupPlantName2,omitempty"`
	AddressID            null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`
	Country              null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	TimeZone             null.String `boil:"TimeZone" json:"TimeZone,omitempty" toml:"TimeZone" yaml:"TimeZone,omitempty"`
	PlantIDByExtSystem   null.String `boil:"PlantIDByExtSystem" json:"PlantIDByExtSystem,omitempty" toml:"PlantIDByExtSystem" yaml:"PlantIDByExtSystem,omitempty"`
	IsMarkedForDeletion  null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPlantGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPlantGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPlantGeneralDatumColumns = struct {
	BusinessPartner      string
	Plant                string
	PlantFullName        string
	PlantName            string
	Language             string
	CreationDate         string
	CreationTime         string
	LastChangeDate       string
	LastChangeTime       string
	PlantFoundationDate  string
	PlantLiquidationDate string
	SearchTerm1          string
	SearchTerm2          string
	PlantDeathDate       string
	PlantIsBlocked       string
	GroupPlantName1      string
	GroupPlantName2      string
	AddressID            string
	Country              string
	TimeZone             string
	PlantIDByExtSystem   string
	IsMarkedForDeletion  string
}{
	BusinessPartner:      "BusinessPartner",
	Plant:                "Plant",
	PlantFullName:        "PlantFullName",
	PlantName:            "PlantName",
	Language:             "Language",
	CreationDate:         "CreationDate",
	CreationTime:         "CreationTime",
	LastChangeDate:       "LastChangeDate",
	LastChangeTime:       "LastChangeTime",
	PlantFoundationDate:  "PlantFoundationDate",
	PlantLiquidationDate: "PlantLiquidationDate",
	SearchTerm1:          "SearchTerm1",
	SearchTerm2:          "SearchTerm2",
	PlantDeathDate:       "PlantDeathDate",
	PlantIsBlocked:       "PlantIsBlocked",
	GroupPlantName1:      "GroupPlantName1",
	GroupPlantName2:      "GroupPlantName2",
	AddressID:            "AddressID",
	Country:              "Country",
	TimeZone:             "TimeZone",
	PlantIDByExtSystem:   "PlantIDByExtSystem",
	IsMarkedForDeletion:  "IsMarkedForDeletion",
}

var DataPlatformPlantGeneralDatumTableColumns = struct {
	BusinessPartner      string
	Plant                string
	PlantFullName        string
	PlantName            string
	Language             string
	CreationDate         string
	CreationTime         string
	LastChangeDate       string
	LastChangeTime       string
	PlantFoundationDate  string
	PlantLiquidationDate string
	SearchTerm1          string
	SearchTerm2          string
	PlantDeathDate       string
	PlantIsBlocked       string
	GroupPlantName1      string
	GroupPlantName2      string
	AddressID            string
	Country              string
	TimeZone             string
	PlantIDByExtSystem   string
	IsMarkedForDeletion  string
}{
	BusinessPartner:      "data_platform_plant_general_data.BusinessPartner",
	Plant:                "data_platform_plant_general_data.Plant",
	PlantFullName:        "data_platform_plant_general_data.PlantFullName",
	PlantName:            "data_platform_plant_general_data.PlantName",
	Language:             "data_platform_plant_general_data.Language",
	CreationDate:         "data_platform_plant_general_data.CreationDate",
	CreationTime:         "data_platform_plant_general_data.CreationTime",
	LastChangeDate:       "data_platform_plant_general_data.LastChangeDate",
	LastChangeTime:       "data_platform_plant_general_data.LastChangeTime",
	PlantFoundationDate:  "data_platform_plant_general_data.PlantFoundationDate",
	PlantLiquidationDate: "data_platform_plant_general_data.PlantLiquidationDate",
	SearchTerm1:          "data_platform_plant_general_data.SearchTerm1",
	SearchTerm2:          "data_platform_plant_general_data.SearchTerm2",
	PlantDeathDate:       "data_platform_plant_general_data.PlantDeathDate",
	PlantIsBlocked:       "data_platform_plant_general_data.PlantIsBlocked",
	GroupPlantName1:      "data_platform_plant_general_data.GroupPlantName1",
	GroupPlantName2:      "data_platform_plant_general_data.GroupPlantName2",
	AddressID:            "data_platform_plant_general_data.AddressID",
	Country:              "data_platform_plant_general_data.Country",
	TimeZone:             "data_platform_plant_general_data.TimeZone",
	PlantIDByExtSystem:   "data_platform_plant_general_data.PlantIDByExtSystem",
	IsMarkedForDeletion:  "data_platform_plant_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPlantGeneralDatumWhere = struct {
	BusinessPartner      whereHelperint
	Plant                whereHelperstring
	PlantFullName        whereHelpernull_String
	PlantName            whereHelperstring
	Language             whereHelperstring
	CreationDate         whereHelpertime_Time
	CreationTime         whereHelperstring
	LastChangeDate       whereHelpertime_Time
	LastChangeTime       whereHelperstring
	PlantFoundationDate  whereHelpernull_Time
	PlantLiquidationDate whereHelpernull_Time
	SearchTerm1          whereHelpernull_String
	SearchTerm2          whereHelpernull_String
	PlantDeathDate       whereHelpernull_Time
	PlantIsBlocked       whereHelpernull_Bool
	GroupPlantName1      whereHelpernull_String
	GroupPlantName2      whereHelpernull_String
	AddressID            whereHelpernull_Int
	Country              whereHelpernull_String
	TimeZone             whereHelpernull_String
	PlantIDByExtSystem   whereHelpernull_String
	IsMarkedForDeletion  whereHelpernull_Bool
}{
	BusinessPartner:      whereHelperint{field: "`data_platform_plant_general_data`.`BusinessPartner`"},
	Plant:                whereHelperstring{field: "`data_platform_plant_general_data`.`Plant`"},
	PlantFullName:        whereHelpernull_String{field: "`data_platform_plant_general_data`.`PlantFullName`"},
	PlantName:            whereHelperstring{field: "`data_platform_plant_general_data`.`PlantName`"},
	Language:             whereHelperstring{field: "`data_platform_plant_general_data`.`Language`"},
	CreationDate:         whereHelpertime_Time{field: "`data_platform_plant_general_data`.`CreationDate`"},
	CreationTime:         whereHelperstring{field: "`data_platform_plant_general_data`.`CreationTime`"},
	LastChangeDate:       whereHelpertime_Time{field: "`data_platform_plant_general_data`.`LastChangeDate`"},
	LastChangeTime:       whereHelperstring{field: "`data_platform_plant_general_data`.`LastChangeTime`"},
	PlantFoundationDate:  whereHelpernull_Time{field: "`data_platform_plant_general_data`.`PlantFoundationDate`"},
	PlantLiquidationDate: whereHelpernull_Time{field: "`data_platform_plant_general_data`.`PlantLiquidationDate`"},
	SearchTerm1:          whereHelpernull_String{field: "`data_platform_plant_general_data`.`SearchTerm1`"},
	SearchTerm2:          whereHelpernull_String{field: "`data_platform_plant_general_data`.`SearchTerm2`"},
	PlantDeathDate:       whereHelpernull_Time{field: "`data_platform_plant_general_data`.`PlantDeathDate`"},
	PlantIsBlocked:       whereHelpernull_Bool{field: "`data_platform_plant_general_data`.`PlantIsBlocked`"},
	GroupPlantName1:      whereHelpernull_String{field: "`data_platform_plant_general_data`.`GroupPlantName1`"},
	GroupPlantName2:      whereHelpernull_String{field: "`data_platform_plant_general_data`.`GroupPlantName2`"},
	AddressID:            whereHelpernull_Int{field: "`data_platform_plant_general_data`.`AddressID`"},
	Country:              whereHelpernull_String{field: "`data_platform_plant_general_data`.`Country`"},
	TimeZone:             whereHelpernull_String{field: "`data_platform_plant_general_data`.`TimeZone`"},
	PlantIDByExtSystem:   whereHelpernull_String{field: "`data_platform_plant_general_data`.`PlantIDByExtSystem`"},
	IsMarkedForDeletion:  whereHelpernull_Bool{field: "`data_platform_plant_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPlantGeneralDatumRels is where relationship names are stored.
var DataPlatformPlantGeneralDatumRels = struct {
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum  string
	LanguageDataPlatformLanguageLanguageDatum               string
	IssuingPlantDataPlatformDeliveryDocumentHeaderData      string
	ReceivingPlantDataPlatformDeliveryDocumentHeaderData    string
	BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData string
	BusinessPartnerDataPlatformPlantStorageLocationData     string
	BusinessPartnerDataPlatformProductMasterBPPlantData     string
}{
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum:  "BusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	LanguageDataPlatformLanguageLanguageDatum:               "LanguageDataPlatformLanguageLanguageDatum",
	IssuingPlantDataPlatformDeliveryDocumentHeaderData:      "IssuingPlantDataPlatformDeliveryDocumentHeaderData",
	ReceivingPlantDataPlatformDeliveryDocumentHeaderData:    "ReceivingPlantDataPlatformDeliveryDocumentHeaderData",
	BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData: "BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData",
	BusinessPartnerDataPlatformPlantStorageLocationData:     "BusinessPartnerDataPlatformPlantStorageLocationData",
	BusinessPartnerDataPlatformProductMasterBPPlantData:     "BusinessPartnerDataPlatformProductMasterBPPlantData",
}

// dataPlatformPlantGeneralDatumR is where relationships are stored.
type dataPlatformPlantGeneralDatumR struct {
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum  *DataPlatformBusinessPartnerGeneralDatum       `boil:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	LanguageDataPlatformLanguageLanguageDatum               *DataPlatformLanguageLanguageDatum             `boil:"LanguageDataPlatformLanguageLanguageDatum" json:"LanguageDataPlatformLanguageLanguageDatum" toml:"LanguageDataPlatformLanguageLanguageDatum" yaml:"LanguageDataPlatformLanguageLanguageDatum"`
	IssuingPlantDataPlatformDeliveryDocumentHeaderData      DataPlatformDeliveryDocumentHeaderDatumSlice   `boil:"IssuingPlantDataPlatformDeliveryDocumentHeaderData" json:"IssuingPlantDataPlatformDeliveryDocumentHeaderData" toml:"IssuingPlantDataPlatformDeliveryDocumentHeaderData" yaml:"IssuingPlantDataPlatformDeliveryDocumentHeaderData"`
	ReceivingPlantDataPlatformDeliveryDocumentHeaderData    DataPlatformDeliveryDocumentHeaderDatumSlice   `boil:"ReceivingPlantDataPlatformDeliveryDocumentHeaderData" json:"ReceivingPlantDataPlatformDeliveryDocumentHeaderData" toml:"ReceivingPlantDataPlatformDeliveryDocumentHeaderData" yaml:"ReceivingPlantDataPlatformDeliveryDocumentHeaderData"`
	BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData DataPlatformOrdersHeaderPartnerPlantDatumSlice `boil:"BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData" json:"BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData" toml:"BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData" yaml:"BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData"`
	BusinessPartnerDataPlatformPlantStorageLocationData     DataPlatformPlantStorageLocationDatumSlice     `boil:"BusinessPartnerDataPlatformPlantStorageLocationData" json:"BusinessPartnerDataPlatformPlantStorageLocationData" toml:"BusinessPartnerDataPlatformPlantStorageLocationData" yaml:"BusinessPartnerDataPlatformPlantStorageLocationData"`
	BusinessPartnerDataPlatformProductMasterBPPlantData     DataPlatformProductMasterBPPlantDatumSlice     `boil:"BusinessPartnerDataPlatformProductMasterBPPlantData" json:"BusinessPartnerDataPlatformProductMasterBPPlantData" toml:"BusinessPartnerDataPlatformProductMasterBPPlantData" yaml:"BusinessPartnerDataPlatformProductMasterBPPlantData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPlantGeneralDatumR) NewStruct() *dataPlatformPlantGeneralDatumR {
	return &dataPlatformPlantGeneralDatumR{}
}

func (r *dataPlatformPlantGeneralDatumR) GetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformPlantGeneralDatumR) GetLanguageDataPlatformLanguageLanguageDatum() *DataPlatformLanguageLanguageDatum {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformLanguageLanguageDatum
}

func (r *dataPlatformPlantGeneralDatumR) GetIssuingPlantDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.IssuingPlantDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformPlantGeneralDatumR) GetReceivingPlantDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ReceivingPlantDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformPlantGeneralDatumR) GetBusinessPartnerDataPlatformOrdersHeaderPartnerPlantData() DataPlatformOrdersHeaderPartnerPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData
}

func (r *dataPlatformPlantGeneralDatumR) GetBusinessPartnerDataPlatformPlantStorageLocationData() DataPlatformPlantStorageLocationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformPlantStorageLocationData
}

func (r *dataPlatformPlantGeneralDatumR) GetBusinessPartnerDataPlatformProductMasterBPPlantData() DataPlatformProductMasterBPPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterBPPlantData
}

// dataPlatformPlantGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformPlantGeneralDatumL struct{}

var (
	dataPlatformPlantGeneralDatumAllColumns            = []string{"BusinessPartner", "Plant", "PlantFullName", "PlantName", "Language", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "PlantFoundationDate", "PlantLiquidationDate", "SearchTerm1", "SearchTerm2", "PlantDeathDate", "PlantIsBlocked", "GroupPlantName1", "GroupPlantName2", "AddressID", "Country", "TimeZone", "PlantIDByExtSystem", "IsMarkedForDeletion"}
	dataPlatformPlantGeneralDatumColumnsWithoutDefault = []string{"BusinessPartner", "Plant", "PlantFullName", "PlantName", "Language", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "PlantFoundationDate", "PlantLiquidationDate", "SearchTerm1", "SearchTerm2", "PlantDeathDate", "PlantIsBlocked", "GroupPlantName1", "GroupPlantName2", "AddressID", "Country", "TimeZone", "PlantIDByExtSystem", "IsMarkedForDeletion"}
	dataPlatformPlantGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformPlantGeneralDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Plant"}
	dataPlatformPlantGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPlantGeneralDatumSlice is an alias for a slice of pointers to DataPlatformPlantGeneralDatum.
	// This should almost always be used instead of []DataPlatformPlantGeneralDatum.
	DataPlatformPlantGeneralDatumSlice []*DataPlatformPlantGeneralDatum
	// DataPlatformPlantGeneralDatumHook is the signature for custom DataPlatformPlantGeneralDatum hook methods
	DataPlatformPlantGeneralDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformPlantGeneralDatum) error

	dataPlatformPlantGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPlantGeneralDatumType                 = reflect.TypeOf(&DataPlatformPlantGeneralDatum{})
	dataPlatformPlantGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformPlantGeneralDatumType)
	dataPlatformPlantGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, dataPlatformPlantGeneralDatumPrimaryKeyColumns)
	dataPlatformPlantGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformPlantGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPlantGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPlantGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPlantGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPlantGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformPlantGeneralDatumAfterSelectHooks []DataPlatformPlantGeneralDatumHook

var dataPlatformPlantGeneralDatumBeforeInsertHooks []DataPlatformPlantGeneralDatumHook
var dataPlatformPlantGeneralDatumAfterInsertHooks []DataPlatformPlantGeneralDatumHook

var dataPlatformPlantGeneralDatumBeforeUpdateHooks []DataPlatformPlantGeneralDatumHook
var dataPlatformPlantGeneralDatumAfterUpdateHooks []DataPlatformPlantGeneralDatumHook

var dataPlatformPlantGeneralDatumBeforeDeleteHooks []DataPlatformPlantGeneralDatumHook
var dataPlatformPlantGeneralDatumAfterDeleteHooks []DataPlatformPlantGeneralDatumHook

var dataPlatformPlantGeneralDatumBeforeUpsertHooks []DataPlatformPlantGeneralDatumHook
var dataPlatformPlantGeneralDatumAfterUpsertHooks []DataPlatformPlantGeneralDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformPlantGeneralDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantGeneralDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformPlantGeneralDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantGeneralDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformPlantGeneralDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantGeneralDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformPlantGeneralDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantGeneralDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformPlantGeneralDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantGeneralDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformPlantGeneralDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantGeneralDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformPlantGeneralDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantGeneralDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformPlantGeneralDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantGeneralDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformPlantGeneralDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPlantGeneralDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformPlantGeneralDatumHook registers your hook function for all future operations.
func AddDataPlatformPlantGeneralDatumHook(hookPoint boil.HookPoint, dataPlatformPlantGeneralDatumHook DataPlatformPlantGeneralDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformPlantGeneralDatumAfterSelectHooks = append(dataPlatformPlantGeneralDatumAfterSelectHooks, dataPlatformPlantGeneralDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformPlantGeneralDatumBeforeInsertHooks = append(dataPlatformPlantGeneralDatumBeforeInsertHooks, dataPlatformPlantGeneralDatumHook)
	case boil.AfterInsertHook:
		dataPlatformPlantGeneralDatumAfterInsertHooks = append(dataPlatformPlantGeneralDatumAfterInsertHooks, dataPlatformPlantGeneralDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformPlantGeneralDatumBeforeUpdateHooks = append(dataPlatformPlantGeneralDatumBeforeUpdateHooks, dataPlatformPlantGeneralDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformPlantGeneralDatumAfterUpdateHooks = append(dataPlatformPlantGeneralDatumAfterUpdateHooks, dataPlatformPlantGeneralDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformPlantGeneralDatumBeforeDeleteHooks = append(dataPlatformPlantGeneralDatumBeforeDeleteHooks, dataPlatformPlantGeneralDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformPlantGeneralDatumAfterDeleteHooks = append(dataPlatformPlantGeneralDatumAfterDeleteHooks, dataPlatformPlantGeneralDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformPlantGeneralDatumBeforeUpsertHooks = append(dataPlatformPlantGeneralDatumBeforeUpsertHooks, dataPlatformPlantGeneralDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformPlantGeneralDatumAfterUpsertHooks = append(dataPlatformPlantGeneralDatumAfterUpsertHooks, dataPlatformPlantGeneralDatumHook)
	}
}

// One returns a single dataPlatformPlantGeneralDatum record from the query.
func (q dataPlatformPlantGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPlantGeneralDatum, error) {
	o := &DataPlatformPlantGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_plant_general_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformPlantGeneralDatum records from the query.
func (q dataPlatformPlantGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPlantGeneralDatumSlice, error) {
	var o []*DataPlatformPlantGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPlantGeneralDatum slice")
	}

	if len(dataPlatformPlantGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformPlantGeneralDatum records in the query.
func (q dataPlatformPlantGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_plant_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPlantGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_plant_general_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlantGeneralDatum) BusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// LanguageDataPlatformLanguageLanguageDatum pointed to by the foreign key.
func (o *DataPlatformPlantGeneralDatum) LanguageDataPlatformLanguageLanguageDatum(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.Language),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformLanguageLanguageData(queryMods...)
}

// IssuingPlantDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via IssuingPlant column.
func (o *DataPlatformPlantGeneralDatum) IssuingPlantDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`IssuingPlant`=?", o.Plant),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// ReceivingPlantDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via ReceivingPlant column.
func (o *DataPlatformPlantGeneralDatum) ReceivingPlantDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`ReceivingPlant`=?", o.Plant),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData retrieves all the data_platform_orders_header_partner_plant_datum's DataPlatformOrdersHeaderPartnerPlantData with an executor via BusinessPartner column.
func (o *DataPlatformPlantGeneralDatum) BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData(mods ...qm.QueryMod) dataPlatformOrdersHeaderPartnerPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_partner_plant_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformOrdersHeaderPartnerPlantData(queryMods...)
}

// BusinessPartnerDataPlatformPlantStorageLocationData retrieves all the data_platform_plant_storage_location_datum's DataPlatformPlantStorageLocationData with an executor via BusinessPartner column.
func (o *DataPlatformPlantGeneralDatum) BusinessPartnerDataPlatformPlantStorageLocationData(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_plant_storage_location_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// BusinessPartnerDataPlatformProductMasterBPPlantData retrieves all the data_platform_product_master_bp_plant_datum's DataPlatformProductMasterBPPlantData with an executor via BusinessPartner column.
func (o *DataPlatformPlantGeneralDatum) BusinessPartnerDataPlatformProductMasterBPPlantData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_bp_plant_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlantGeneralDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformPlantGeneralData = append(foreign.R.BusinessPartnerDataPlatformPlantGeneralData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformPlantGeneralData = append(foreign.R.BusinessPartnerDataPlatformPlantGeneralData, local)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformLanguageLanguageDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlantGeneralDatumL) LoadLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Language)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_data`),
		qm.WhereIn(`data_platform_language_language_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformLanguageLanguageDatum")
	}

	var resultSlice []*DataPlatformLanguageLanguageDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformLanguageLanguageDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_language_language_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_data")
	}

	if len(dataPlatformLanguageLanguageDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LanguageDataPlatformLanguageLanguageDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformLanguageLanguageDatumR{}
		}
		foreign.R.LanguageDataPlatformPlantGeneralData = append(foreign.R.LanguageDataPlatformPlantGeneralData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformLanguageLanguageDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformLanguageLanguageDatumR{}
				}
				foreign.R.LanguageDataPlatformPlantGeneralData = append(foreign.R.LanguageDataPlatformPlantGeneralData, local)
				break
			}
		}
	}

	return nil
}

// LoadIssuingPlantDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadIssuingPlantDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Plant) {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.IssuingPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if len(dataPlatformDeliveryDocumentHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformDeliveryDocumentHeaderDatumR{}
			}
			foreign.R.IssuingPlantDataPlatformPlantGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Plant, foreign.IssuingPlant) {
				local.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData = append(local.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformDeliveryDocumentHeaderDatumR{}
				}
				foreign.R.IssuingPlantDataPlatformPlantGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadReceivingPlantDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadReceivingPlantDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Plant) {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.ReceivingPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if len(dataPlatformDeliveryDocumentHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformDeliveryDocumentHeaderDatumR{}
			}
			foreign.R.ReceivingPlantDataPlatformPlantGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Plant, foreign.ReceivingPlant) {
				local.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData = append(local.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformDeliveryDocumentHeaderDatumR{}
				}
				foreign.R.ReceivingPlantDataPlatformPlantGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformOrdersHeaderPartnerPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadBusinessPartnerDataPlatformOrdersHeaderPartnerPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_partner_plant_data`),
		qm.WhereIn(`data_platform_orders_header_partner_plant_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_partner_plant_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderPartnerPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_partner_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_partner_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_partner_plant_data")
	}

	if len(dataPlatformOrdersHeaderPartnerPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformOrdersHeaderPartnerPlantDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformPlantGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData = append(local.R.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformOrdersHeaderPartnerPlantDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformPlantGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformPlantStorageLocationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadBusinessPartnerDataPlatformPlantStorageLocationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_plant_storage_location_data")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_plant_storage_location_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(dataPlatformPlantStorageLocationDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformPlantStorageLocationData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformPlantStorageLocationDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformPlantGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformPlantStorageLocationData = append(local.R.BusinessPartnerDataPlatformPlantStorageLocationData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformPlantStorageLocationDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformPlantGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductMasterBPPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadBusinessPartnerDataPlatformProductMasterBPPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_bp_plant_data")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_bp_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if len(dataPlatformProductMasterBPPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformProductMasterBPPlantData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformPlantGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterBPPlantData = append(local.R.BusinessPartnerDataPlatformProductMasterBPPlantData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformPlantGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformPlantGeneralDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformPlantGeneralData.
func (o *DataPlatformPlantGeneralDatum) SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformPlantGeneralData: DataPlatformPlantGeneralDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerDataPlatformPlantGeneralData = append(related.R.BusinessPartnerDataPlatformPlantGeneralData, o)
	}

	return nil
}

// SetLanguageDataPlatformLanguageLanguageDatum of the dataPlatformPlantGeneralDatum to the related item.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum to related.
// Adds o to related.R.LanguageDataPlatformPlantGeneralData.
func (o *DataPlatformPlantGeneralDatum) SetLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformLanguageLanguageDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Language = related.Language
	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			LanguageDataPlatformLanguageLanguageDatum: related,
		}
	} else {
		o.R.LanguageDataPlatformLanguageLanguageDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformPlantGeneralData: DataPlatformPlantGeneralDatumSlice{o},
		}
	} else {
		related.R.LanguageDataPlatformPlantGeneralData = append(related.R.LanguageDataPlatformPlantGeneralData, o)
	}

	return nil
}

// AddIssuingPlantDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData.
// Sets related.R.IssuingPlantDataPlatformPlantGeneralDatum appropriately.
func (o *DataPlatformPlantGeneralDatum) AddIssuingPlantDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IssuingPlant, o.Plant)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"IssuingPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IssuingPlant, o.Plant)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			IssuingPlantDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData = append(o.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformDeliveryDocumentHeaderDatumR{
				IssuingPlantDataPlatformPlantGeneralDatum: o,
			}
		} else {
			rel.R.IssuingPlantDataPlatformPlantGeneralDatum = o
		}
	}
	return nil
}

// SetIssuingPlantDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_plant_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IssuingPlantDataPlatformPlantGeneralDatum's IssuingPlantDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData with related.
// Sets related.R.IssuingPlantDataPlatformPlantGeneralDatum's IssuingPlantDataPlatformDeliveryDocumentHeaderData accordingly.
func (o *DataPlatformPlantGeneralDatum) SetIssuingPlantDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `IssuingPlant` = null where `IssuingPlant` = ?"
	values := []interface{}{o.Plant}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData {
			queries.SetScanner(&rel.IssuingPlant, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IssuingPlantDataPlatformPlantGeneralDatum = nil
		}
		o.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddIssuingPlantDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveIssuingPlantDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.IssuingPlantDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
// Sets related.R.IssuingPlantDataPlatformPlantGeneralDatum.
func (o *DataPlatformPlantGeneralDatum) RemoveIssuingPlantDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IssuingPlant, nil)
		if rel.R != nil {
			rel.R.IssuingPlantDataPlatformPlantGeneralDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("IssuingPlant")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData[i] = o.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData = o.R.IssuingPlantDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddReceivingPlantDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData.
// Sets related.R.ReceivingPlantDataPlatformPlantGeneralDatum appropriately.
func (o *DataPlatformPlantGeneralDatum) AddReceivingPlantDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ReceivingPlant, o.Plant)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ReceivingPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ReceivingPlant, o.Plant)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			ReceivingPlantDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData = append(o.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformDeliveryDocumentHeaderDatumR{
				ReceivingPlantDataPlatformPlantGeneralDatum: o,
			}
		} else {
			rel.R.ReceivingPlantDataPlatformPlantGeneralDatum = o
		}
	}
	return nil
}

// SetReceivingPlantDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_plant_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ReceivingPlantDataPlatformPlantGeneralDatum's ReceivingPlantDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData with related.
// Sets related.R.ReceivingPlantDataPlatformPlantGeneralDatum's ReceivingPlantDataPlatformDeliveryDocumentHeaderData accordingly.
func (o *DataPlatformPlantGeneralDatum) SetReceivingPlantDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `ReceivingPlant` = null where `ReceivingPlant` = ?"
	values := []interface{}{o.Plant}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData {
			queries.SetScanner(&rel.ReceivingPlant, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ReceivingPlantDataPlatformPlantGeneralDatum = nil
		}
		o.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddReceivingPlantDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveReceivingPlantDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
// Sets related.R.ReceivingPlantDataPlatformPlantGeneralDatum.
func (o *DataPlatformPlantGeneralDatum) RemoveReceivingPlantDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ReceivingPlant, nil)
		if rel.R != nil {
			rel.R.ReceivingPlantDataPlatformPlantGeneralDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("ReceivingPlant")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData[i] = o.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData = o.R.ReceivingPlantDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformOrdersHeaderPartnerPlantData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData.
// Sets related.R.BusinessPartnerDataPlatformPlantGeneralDatum appropriately.
func (o *DataPlatformPlantGeneralDatum) AddBusinessPartnerDataPlatformOrdersHeaderPartnerPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderPartnerPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_partner_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.OrderID, rel.PartnerFunction, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData = append(o.R.BusinessPartnerDataPlatformOrdersHeaderPartnerPlantData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformOrdersHeaderPartnerPlantDatumR{
				BusinessPartnerDataPlatformPlantGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformPlantGeneralDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerDataPlatformPlantStorageLocationData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformPlantStorageLocationData.
// Sets related.R.BusinessPartnerDataPlatformPlantGeneralDatum appropriately.
func (o *DataPlatformPlantGeneralDatum) AddBusinessPartnerDataPlatformPlantStorageLocationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlantStorageLocationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_plant_storage_location_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlantStorageLocationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Plant, rel.StorageLocation}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformPlantStorageLocationData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformPlantStorageLocationData = append(o.R.BusinessPartnerDataPlatformPlantStorageLocationData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformPlantStorageLocationDatumR{
				BusinessPartnerDataPlatformPlantGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformPlantGeneralDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerDataPlatformProductMasterBPPlantData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductMasterBPPlantData.
// Sets related.R.BusinessPartnerDataPlatformPlantGeneralDatum appropriately.
func (o *DataPlatformPlantGeneralDatum) AddBusinessPartnerDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformProductMasterBPPlantData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterBPPlantData = append(o.R.BusinessPartnerDataPlatformProductMasterBPPlantData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterBPPlantDatumR{
				BusinessPartnerDataPlatformPlantGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformPlantGeneralDatum = o
		}
	}
	return nil
}

// DataPlatformPlantGeneralData retrieves all the records using an executor.
func DataPlatformPlantGeneralData(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_plant_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_plant_general_data`.*"})
	}

	return dataPlatformPlantGeneralDatumQuery{q}
}

// FindDataPlatformPlantGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, plant string, selectCols ...string) (*DataPlatformPlantGeneralDatum, error) {
	dataPlatformPlantGeneralDatumObj := &DataPlatformPlantGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_plant_general_data` where `BusinessPartner`=? AND `Plant`=?", sel,
	)

	q := queries.Raw(query, businessPartner, plant)

	err := q.Bind(ctx, exec, dataPlatformPlantGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_plant_general_data")
	}

	if err = dataPlatformPlantGeneralDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformPlantGeneralDatumObj, err
	}

	return dataPlatformPlantGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPlantGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_plant_general_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlantGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPlantGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPlantGeneralDatumInsertCache[key]
	dataPlatformPlantGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPlantGeneralDatumAllColumns,
			dataPlatformPlantGeneralDatumColumnsWithDefault,
			dataPlatformPlantGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_plant_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_plant_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_plant_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_plant_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Plant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_plant_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlantGeneralDatumInsertCacheMut.Lock()
		dataPlatformPlantGeneralDatumInsertCache[key] = cache
		dataPlatformPlantGeneralDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformPlantGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPlantGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformPlantGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPlantGeneralDatumUpdateCache[key]
	dataPlatformPlantGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPlantGeneralDatumAllColumns,
			dataPlatformPlantGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_plant_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, append(wl, dataPlatformPlantGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_plant_general_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_plant_general_data")
	}

	if !cached {
		dataPlatformPlantGeneralDatumUpdateCacheMut.Lock()
		dataPlatformPlantGeneralDatumUpdateCache[key] = cache
		dataPlatformPlantGeneralDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPlantGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_plant_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_plant_general_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPlantGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformPlantGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformPlantGeneralDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformPlantGeneralDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPlantGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_plant_general_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlantGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPlantGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPlantGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPlantGeneralDatumUpsertCache[key]
	dataPlatformPlantGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPlantGeneralDatumAllColumns,
			dataPlatformPlantGeneralDatumColumnsWithDefault,
			dataPlatformPlantGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPlantGeneralDatumAllColumns,
			dataPlatformPlantGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_plant_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_plant_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_plant_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_plant_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_plant_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_plant_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlantGeneralDatumUpsertCacheMut.Lock()
		dataPlatformPlantGeneralDatumUpsertCache[key] = cache
		dataPlatformPlantGeneralDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformPlantGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPlantGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformPlantGeneralDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPlantGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_plant_general_data` WHERE `BusinessPartner`=? AND `Plant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_plant_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_plant_general_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPlantGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformPlantGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_plant_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_plant_general_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPlantGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformPlantGeneralDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_plant_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformPlantGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_plant_general_data")
	}

	if len(dataPlatformPlantGeneralDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPlantGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPlantGeneralDatum(ctx, exec, o.BusinessPartner, o.Plant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPlantGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPlantGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_plant_general_data`.* FROM `data_platform_plant_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPlantGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPlantGeneralDatumExists checks if the DataPlatformPlantGeneralDatum row exists.
func DataPlatformPlantGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, plant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_plant_general_data` where `BusinessPartner`=? AND `Plant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, plant)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, plant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_plant_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPlantGeneralDatum row exists.
func (o *DataPlatformPlantGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPlantGeneralDatumExists(ctx, exec, o.BusinessPartner, o.Plant)
}
