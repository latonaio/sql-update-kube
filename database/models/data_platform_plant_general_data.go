// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPlantGeneralDatum is an object representing the database table.
type DataPlatformPlantGeneralDatum struct {
	BusinessPartner      int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	PlantFullName        null.String `boil:"PlantFullName" json:"PlantFullName,omitempty" toml:"PlantFullName" yaml:"PlantFullName,omitempty"`
	PlantName            string      `boil:"PlantName" json:"PlantName" toml:"PlantName" yaml:"PlantName"`
	Language             string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	PlantFoundationDate  null.String `boil:"PlantFoundationDate" json:"PlantFoundationDate,omitempty" toml:"PlantFoundationDate" yaml:"PlantFoundationDate,omitempty"`
	PlantLiquidationDate null.String `boil:"PlantLiquidationDate" json:"PlantLiquidationDate,omitempty" toml:"PlantLiquidationDate" yaml:"PlantLiquidationDate,omitempty"`
	PlantDeathDate       null.String `boil:"PlantDeathDate" json:"PlantDeathDate,omitempty" toml:"PlantDeathDate" yaml:"PlantDeathDate,omitempty"`
	AddressID            null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`
	Country              null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	TimeZone             null.String `boil:"TimeZone" json:"TimeZone,omitempty" toml:"TimeZone" yaml:"TimeZone,omitempty"`
	PlantIDByExtSystem   null.String `boil:"PlantIDByExtSystem" json:"PlantIDByExtSystem,omitempty" toml:"PlantIDByExtSystem" yaml:"PlantIDByExtSystem,omitempty"`
	CreationDate         string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate       string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion  null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPlantGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPlantGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPlantGeneralDatumColumns = struct {
	BusinessPartner      string
	Plant                string
	PlantFullName        string
	PlantName            string
	Language             string
	PlantFoundationDate  string
	PlantLiquidationDate string
	PlantDeathDate       string
	AddressID            string
	Country              string
	TimeZone             string
	PlantIDByExtSystem   string
	CreationDate         string
	LastChangeDate       string
	IsMarkedForDeletion  string
}{
	BusinessPartner:      "BusinessPartner",
	Plant:                "Plant",
	PlantFullName:        "PlantFullName",
	PlantName:            "PlantName",
	Language:             "Language",
	PlantFoundationDate:  "PlantFoundationDate",
	PlantLiquidationDate: "PlantLiquidationDate",
	PlantDeathDate:       "PlantDeathDate",
	AddressID:            "AddressID",
	Country:              "Country",
	TimeZone:             "TimeZone",
	PlantIDByExtSystem:   "PlantIDByExtSystem",
	CreationDate:         "CreationDate",
	LastChangeDate:       "LastChangeDate",
	IsMarkedForDeletion:  "IsMarkedForDeletion",
}

var DataPlatformPlantGeneralDatumTableColumns = struct {
	BusinessPartner      string
	Plant                string
	PlantFullName        string
	PlantName            string
	Language             string
	PlantFoundationDate  string
	PlantLiquidationDate string
	PlantDeathDate       string
	AddressID            string
	Country              string
	TimeZone             string
	PlantIDByExtSystem   string
	CreationDate         string
	LastChangeDate       string
	IsMarkedForDeletion  string
}{
	BusinessPartner:      "data_platform_plant_general_data.BusinessPartner",
	Plant:                "data_platform_plant_general_data.Plant",
	PlantFullName:        "data_platform_plant_general_data.PlantFullName",
	PlantName:            "data_platform_plant_general_data.PlantName",
	Language:             "data_platform_plant_general_data.Language",
	PlantFoundationDate:  "data_platform_plant_general_data.PlantFoundationDate",
	PlantLiquidationDate: "data_platform_plant_general_data.PlantLiquidationDate",
	PlantDeathDate:       "data_platform_plant_general_data.PlantDeathDate",
	AddressID:            "data_platform_plant_general_data.AddressID",
	Country:              "data_platform_plant_general_data.Country",
	TimeZone:             "data_platform_plant_general_data.TimeZone",
	PlantIDByExtSystem:   "data_platform_plant_general_data.PlantIDByExtSystem",
	CreationDate:         "data_platform_plant_general_data.CreationDate",
	LastChangeDate:       "data_platform_plant_general_data.LastChangeDate",
	IsMarkedForDeletion:  "data_platform_plant_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPlantGeneralDatumWhere = struct {
	BusinessPartner      whereHelperint
	Plant                whereHelperstring
	PlantFullName        whereHelpernull_String
	PlantName            whereHelperstring
	Language             whereHelperstring
	PlantFoundationDate  whereHelpernull_String
	PlantLiquidationDate whereHelpernull_String
	PlantDeathDate       whereHelpernull_String
	AddressID            whereHelpernull_Int
	Country              whereHelpernull_String
	TimeZone             whereHelpernull_String
	PlantIDByExtSystem   whereHelpernull_String
	CreationDate         whereHelperstring
	LastChangeDate       whereHelperstring
	IsMarkedForDeletion  whereHelpernull_Bool
}{
	BusinessPartner:      whereHelperint{field: "`data_platform_plant_general_data`.`BusinessPartner`"},
	Plant:                whereHelperstring{field: "`data_platform_plant_general_data`.`Plant`"},
	PlantFullName:        whereHelpernull_String{field: "`data_platform_plant_general_data`.`PlantFullName`"},
	PlantName:            whereHelperstring{field: "`data_platform_plant_general_data`.`PlantName`"},
	Language:             whereHelperstring{field: "`data_platform_plant_general_data`.`Language`"},
	PlantFoundationDate:  whereHelpernull_String{field: "`data_platform_plant_general_data`.`PlantFoundationDate`"},
	PlantLiquidationDate: whereHelpernull_String{field: "`data_platform_plant_general_data`.`PlantLiquidationDate`"},
	PlantDeathDate:       whereHelpernull_String{field: "`data_platform_plant_general_data`.`PlantDeathDate`"},
	AddressID:            whereHelpernull_Int{field: "`data_platform_plant_general_data`.`AddressID`"},
	Country:              whereHelpernull_String{field: "`data_platform_plant_general_data`.`Country`"},
	TimeZone:             whereHelpernull_String{field: "`data_platform_plant_general_data`.`TimeZone`"},
	PlantIDByExtSystem:   whereHelpernull_String{field: "`data_platform_plant_general_data`.`PlantIDByExtSystem`"},
	CreationDate:         whereHelperstring{field: "`data_platform_plant_general_data`.`CreationDate`"},
	LastChangeDate:       whereHelperstring{field: "`data_platform_plant_general_data`.`LastChangeDate`"},
	IsMarkedForDeletion:  whereHelpernull_Bool{field: "`data_platform_plant_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPlantGeneralDatumRels is where relationship names are stored.
var DataPlatformPlantGeneralDatumRels = struct {
	AddressIDDataPlatformAddressAddressDatum                                  string
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum                    string
	CountryDataPlatformCountryCountryDatum                                    string
	LanguageDataPlatformLanguageLanguageDatum                                 string
	TimeZoneDataPlatformTimeZoneTimeZoneDatum                                 string
	InspectionPlantDataPlatformDeliveryDocumentItemData                       string
	InspectionPlantDataPlatformInspectionLotHeaderData                        string
	InspectionPlantDataPlatformInspectionPlanHeaderData                       string
	ProductionPlantDataPlatformInvoiceDocumentItemData                        string
	InspectionPlantDataPlatformOrdersItemData                                 string
	BusinessPartnerDataPlatformProductMasterBPPlantData                       string
	BusinessPartnerDataPlatformProductStockProductStockDataOlds               string
	OwnerBusinessPartnerDataPlatformProjectProjectData                        string
	BusinessPartnerDataPlatformProjectWBSElementData                          string
	DeliverFromPartyDataPlatformPurchaseRequisitionItemData                   string
	DeliverToPartyDataPlatformPurchaseRequisitionItemData                     string
	StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData   string
	DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData                  string
	DeliverToPartyDataPlatformSCRDeliveryPlantRelationData                    string
	ProductionPlantDataPlatformSCRProductionPlantRelationData                 string
	StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData string
	BusinessPartnerDataPlatformWorkCenterGeneralData                          string
}{
	AddressIDDataPlatformAddressAddressDatum:                                  "AddressIDDataPlatformAddressAddressDatum",
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum:                    "BusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	CountryDataPlatformCountryCountryDatum:                                    "CountryDataPlatformCountryCountryDatum",
	LanguageDataPlatformLanguageLanguageDatum:                                 "LanguageDataPlatformLanguageLanguageDatum",
	TimeZoneDataPlatformTimeZoneTimeZoneDatum:                                 "TimeZoneDataPlatformTimeZoneTimeZoneDatum",
	InspectionPlantDataPlatformDeliveryDocumentItemData:                       "InspectionPlantDataPlatformDeliveryDocumentItemData",
	InspectionPlantDataPlatformInspectionLotHeaderData:                        "InspectionPlantDataPlatformInspectionLotHeaderData",
	InspectionPlantDataPlatformInspectionPlanHeaderData:                       "InspectionPlantDataPlatformInspectionPlanHeaderData",
	ProductionPlantDataPlatformInvoiceDocumentItemData:                        "ProductionPlantDataPlatformInvoiceDocumentItemData",
	InspectionPlantDataPlatformOrdersItemData:                                 "InspectionPlantDataPlatformOrdersItemData",
	BusinessPartnerDataPlatformProductMasterBPPlantData:                       "BusinessPartnerDataPlatformProductMasterBPPlantData",
	BusinessPartnerDataPlatformProductStockProductStockDataOlds:               "BusinessPartnerDataPlatformProductStockProductStockDataOlds",
	OwnerBusinessPartnerDataPlatformProjectProjectData:                        "OwnerBusinessPartnerDataPlatformProjectProjectData",
	BusinessPartnerDataPlatformProjectWBSElementData:                          "BusinessPartnerDataPlatformProjectWBSElementData",
	DeliverFromPartyDataPlatformPurchaseRequisitionItemData:                   "DeliverFromPartyDataPlatformPurchaseRequisitionItemData",
	DeliverToPartyDataPlatformPurchaseRequisitionItemData:                     "DeliverToPartyDataPlatformPurchaseRequisitionItemData",
	StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData:   "StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData",
	DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData:                  "DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData",
	DeliverToPartyDataPlatformSCRDeliveryPlantRelationData:                    "DeliverToPartyDataPlatformSCRDeliveryPlantRelationData",
	ProductionPlantDataPlatformSCRProductionPlantRelationData:                 "ProductionPlantDataPlatformSCRProductionPlantRelationData",
	StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData: "StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData",
	BusinessPartnerDataPlatformWorkCenterGeneralData:                          "BusinessPartnerDataPlatformWorkCenterGeneralData",
}

// dataPlatformPlantGeneralDatumR is where relationships are stored.
type dataPlatformPlantGeneralDatumR struct {
	AddressIDDataPlatformAddressAddressDatum                                  *DataPlatformAddressAddressDatum                 `boil:"AddressIDDataPlatformAddressAddressDatum" json:"AddressIDDataPlatformAddressAddressDatum" toml:"AddressIDDataPlatformAddressAddressDatum" yaml:"AddressIDDataPlatformAddressAddressDatum"`
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum                    *DataPlatformBusinessPartnerGeneralDatum         `boil:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	CountryDataPlatformCountryCountryDatum                                    *DataPlatformCountryCountryDatum                 `boil:"CountryDataPlatformCountryCountryDatum" json:"CountryDataPlatformCountryCountryDatum" toml:"CountryDataPlatformCountryCountryDatum" yaml:"CountryDataPlatformCountryCountryDatum"`
	LanguageDataPlatformLanguageLanguageDatum                                 *DataPlatformLanguageLanguageDatum               `boil:"LanguageDataPlatformLanguageLanguageDatum" json:"LanguageDataPlatformLanguageLanguageDatum" toml:"LanguageDataPlatformLanguageLanguageDatum" yaml:"LanguageDataPlatformLanguageLanguageDatum"`
	TimeZoneDataPlatformTimeZoneTimeZoneDatum                                 *DataPlatformTimeZoneTimeZoneDatum               `boil:"TimeZoneDataPlatformTimeZoneTimeZoneDatum" json:"TimeZoneDataPlatformTimeZoneTimeZoneDatum" toml:"TimeZoneDataPlatformTimeZoneTimeZoneDatum" yaml:"TimeZoneDataPlatformTimeZoneTimeZoneDatum"`
	InspectionPlantDataPlatformDeliveryDocumentItemData                       DataPlatformDeliveryDocumentItemDatumSlice       `boil:"InspectionPlantDataPlatformDeliveryDocumentItemData" json:"InspectionPlantDataPlatformDeliveryDocumentItemData" toml:"InspectionPlantDataPlatformDeliveryDocumentItemData" yaml:"InspectionPlantDataPlatformDeliveryDocumentItemData"`
	InspectionPlantDataPlatformInspectionLotHeaderData                        DataPlatformInspectionLotHeaderDatumSlice        `boil:"InspectionPlantDataPlatformInspectionLotHeaderData" json:"InspectionPlantDataPlatformInspectionLotHeaderData" toml:"InspectionPlantDataPlatformInspectionLotHeaderData" yaml:"InspectionPlantDataPlatformInspectionLotHeaderData"`
	InspectionPlantDataPlatformInspectionPlanHeaderData                       DataPlatformInspectionPlanHeaderDatumSlice       `boil:"InspectionPlantDataPlatformInspectionPlanHeaderData" json:"InspectionPlantDataPlatformInspectionPlanHeaderData" toml:"InspectionPlantDataPlatformInspectionPlanHeaderData" yaml:"InspectionPlantDataPlatformInspectionPlanHeaderData"`
	ProductionPlantDataPlatformInvoiceDocumentItemData                        DataPlatformInvoiceDocumentItemDatumSlice        `boil:"ProductionPlantDataPlatformInvoiceDocumentItemData" json:"ProductionPlantDataPlatformInvoiceDocumentItemData" toml:"ProductionPlantDataPlatformInvoiceDocumentItemData" yaml:"ProductionPlantDataPlatformInvoiceDocumentItemData"`
	InspectionPlantDataPlatformOrdersItemData                                 DataPlatformOrdersItemDatumSlice                 `boil:"InspectionPlantDataPlatformOrdersItemData" json:"InspectionPlantDataPlatformOrdersItemData" toml:"InspectionPlantDataPlatformOrdersItemData" yaml:"InspectionPlantDataPlatformOrdersItemData"`
	BusinessPartnerDataPlatformProductMasterBPPlantData                       DataPlatformProductMasterBPPlantDatumSlice       `boil:"BusinessPartnerDataPlatformProductMasterBPPlantData" json:"BusinessPartnerDataPlatformProductMasterBPPlantData" toml:"BusinessPartnerDataPlatformProductMasterBPPlantData" yaml:"BusinessPartnerDataPlatformProductMasterBPPlantData"`
	BusinessPartnerDataPlatformProductStockProductStockDataOlds               DataPlatformProductStockProductStockDataOldSlice `boil:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" json:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" toml:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" yaml:"BusinessPartnerDataPlatformProductStockProductStockDataOlds"`
	OwnerBusinessPartnerDataPlatformProjectProjectData                        DataPlatformProjectProjectDatumSlice             `boil:"OwnerBusinessPartnerDataPlatformProjectProjectData" json:"OwnerBusinessPartnerDataPlatformProjectProjectData" toml:"OwnerBusinessPartnerDataPlatformProjectProjectData" yaml:"OwnerBusinessPartnerDataPlatformProjectProjectData"`
	BusinessPartnerDataPlatformProjectWBSElementData                          DataPlatformProjectWBSElementDatumSlice          `boil:"BusinessPartnerDataPlatformProjectWBSElementData" json:"BusinessPartnerDataPlatformProjectWBSElementData" toml:"BusinessPartnerDataPlatformProjectWBSElementData" yaml:"BusinessPartnerDataPlatformProjectWBSElementData"`
	DeliverFromPartyDataPlatformPurchaseRequisitionItemData                   DataPlatformPurchaseRequisitionItemDatumSlice    `boil:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData" json:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData" toml:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData" yaml:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData"`
	DeliverToPartyDataPlatformPurchaseRequisitionItemData                     DataPlatformPurchaseRequisitionItemDatumSlice    `boil:"DeliverToPartyDataPlatformPurchaseRequisitionItemData" json:"DeliverToPartyDataPlatformPurchaseRequisitionItemData" toml:"DeliverToPartyDataPlatformPurchaseRequisitionItemData" yaml:"DeliverToPartyDataPlatformPurchaseRequisitionItemData"`
	StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData   DataPlatformPurchaseRequisitionItemDatumSlice    `boil:"StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData" json:"StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData" toml:"StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData" yaml:"StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData"`
	DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData                  DataPlatformSCRDeliveryPlantRelationDatumSlice   `boil:"DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData" json:"DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData" toml:"DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData" yaml:"DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData"`
	DeliverToPartyDataPlatformSCRDeliveryPlantRelationData                    DataPlatformSCRDeliveryPlantRelationDatumSlice   `boil:"DeliverToPartyDataPlatformSCRDeliveryPlantRelationData" json:"DeliverToPartyDataPlatformSCRDeliveryPlantRelationData" toml:"DeliverToPartyDataPlatformSCRDeliveryPlantRelationData" yaml:"DeliverToPartyDataPlatformSCRDeliveryPlantRelationData"`
	ProductionPlantDataPlatformSCRProductionPlantRelationData                 DataPlatformSCRProductionPlantRelationDatumSlice `boil:"ProductionPlantDataPlatformSCRProductionPlantRelationData" json:"ProductionPlantDataPlatformSCRProductionPlantRelationData" toml:"ProductionPlantDataPlatformSCRProductionPlantRelationData" yaml:"ProductionPlantDataPlatformSCRProductionPlantRelationData"`
	StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData DataPlatformSCRStockConfPlantRelationDatumSlice  `boil:"StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData" json:"StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData" toml:"StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData" yaml:"StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData"`
	BusinessPartnerDataPlatformWorkCenterGeneralData                          DataPlatformWorkCenterGeneralDatumSlice          `boil:"BusinessPartnerDataPlatformWorkCenterGeneralData" json:"BusinessPartnerDataPlatformWorkCenterGeneralData" toml:"BusinessPartnerDataPlatformWorkCenterGeneralData" yaml:"BusinessPartnerDataPlatformWorkCenterGeneralData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPlantGeneralDatumR) NewStruct() *dataPlatformPlantGeneralDatumR {
	return &dataPlatformPlantGeneralDatumR{}
}

func (r *dataPlatformPlantGeneralDatumR) GetAddressIDDataPlatformAddressAddressDatum() *DataPlatformAddressAddressDatum {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformAddressAddressDatum
}

func (r *dataPlatformPlantGeneralDatumR) GetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformPlantGeneralDatumR) GetCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformPlantGeneralDatumR) GetLanguageDataPlatformLanguageLanguageDatum() *DataPlatformLanguageLanguageDatum {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformLanguageLanguageDatum
}

func (r *dataPlatformPlantGeneralDatumR) GetTimeZoneDataPlatformTimeZoneTimeZoneDatum() *DataPlatformTimeZoneTimeZoneDatum {
	if r == nil {
		return nil
	}
	return r.TimeZoneDataPlatformTimeZoneTimeZoneDatum
}

func (r *dataPlatformPlantGeneralDatumR) GetInspectionPlantDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionPlantDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformPlantGeneralDatumR) GetInspectionPlantDataPlatformInspectionLotHeaderData() DataPlatformInspectionLotHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionPlantDataPlatformInspectionLotHeaderData
}

func (r *dataPlatformPlantGeneralDatumR) GetInspectionPlantDataPlatformInspectionPlanHeaderData() DataPlatformInspectionPlanHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionPlantDataPlatformInspectionPlanHeaderData
}

func (r *dataPlatformPlantGeneralDatumR) GetProductionPlantDataPlatformInvoiceDocumentItemData() DataPlatformInvoiceDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionPlantDataPlatformInvoiceDocumentItemData
}

func (r *dataPlatformPlantGeneralDatumR) GetInspectionPlantDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionPlantDataPlatformOrdersItemData
}

func (r *dataPlatformPlantGeneralDatumR) GetBusinessPartnerDataPlatformProductMasterBPPlantData() DataPlatformProductMasterBPPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterBPPlantData
}

func (r *dataPlatformPlantGeneralDatumR) GetBusinessPartnerDataPlatformProductStockProductStockDataOlds() DataPlatformProductStockProductStockDataOldSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductStockProductStockDataOlds
}

func (r *dataPlatformPlantGeneralDatumR) GetOwnerBusinessPartnerDataPlatformProjectProjectData() DataPlatformProjectProjectDatumSlice {
	if r == nil {
		return nil
	}
	return r.OwnerBusinessPartnerDataPlatformProjectProjectData
}

func (r *dataPlatformPlantGeneralDatumR) GetBusinessPartnerDataPlatformProjectWBSElementData() DataPlatformProjectWBSElementDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProjectWBSElementData
}

func (r *dataPlatformPlantGeneralDatumR) GetDeliverFromPartyDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformPurchaseRequisitionItemData
}

func (r *dataPlatformPlantGeneralDatumR) GetDeliverToPartyDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformPurchaseRequisitionItemData
}

func (r *dataPlatformPlantGeneralDatumR) GetStockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData
}

func (r *dataPlatformPlantGeneralDatumR) GetDeliverFromPartyDataPlatformSCRDeliveryPlantRelationData() DataPlatformSCRDeliveryPlantRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData
}

func (r *dataPlatformPlantGeneralDatumR) GetDeliverToPartyDataPlatformSCRDeliveryPlantRelationData() DataPlatformSCRDeliveryPlantRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformSCRDeliveryPlantRelationData
}

func (r *dataPlatformPlantGeneralDatumR) GetProductionPlantDataPlatformSCRProductionPlantRelationData() DataPlatformSCRProductionPlantRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionPlantDataPlatformSCRProductionPlantRelationData
}

func (r *dataPlatformPlantGeneralDatumR) GetStockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData() DataPlatformSCRStockConfPlantRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData
}

func (r *dataPlatformPlantGeneralDatumR) GetBusinessPartnerDataPlatformWorkCenterGeneralData() DataPlatformWorkCenterGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformWorkCenterGeneralData
}

// dataPlatformPlantGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformPlantGeneralDatumL struct{}

var (
	dataPlatformPlantGeneralDatumAllColumns            = []string{"BusinessPartner", "Plant", "PlantFullName", "PlantName", "Language", "PlantFoundationDate", "PlantLiquidationDate", "PlantDeathDate", "AddressID", "Country", "TimeZone", "PlantIDByExtSystem", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformPlantGeneralDatumColumnsWithoutDefault = []string{"BusinessPartner", "Plant", "PlantFullName", "PlantName", "Language", "PlantFoundationDate", "PlantLiquidationDate", "PlantDeathDate", "AddressID", "Country", "TimeZone", "PlantIDByExtSystem", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformPlantGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformPlantGeneralDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Plant"}
	dataPlatformPlantGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPlantGeneralDatumSlice is an alias for a slice of pointers to DataPlatformPlantGeneralDatum.
	// This should almost always be used instead of []DataPlatformPlantGeneralDatum.
	DataPlatformPlantGeneralDatumSlice []*DataPlatformPlantGeneralDatum

	dataPlatformPlantGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPlantGeneralDatumType                 = reflect.TypeOf(&DataPlatformPlantGeneralDatum{})
	dataPlatformPlantGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformPlantGeneralDatumType)
	dataPlatformPlantGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, dataPlatformPlantGeneralDatumPrimaryKeyColumns)
	dataPlatformPlantGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformPlantGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPlantGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPlantGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPlantGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPlantGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPlantGeneralDatum record from the query.
func (q dataPlatformPlantGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPlantGeneralDatum, error) {
	o := &DataPlatformPlantGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_plant_general_data")
	}

	return o, nil
}

// All returns all DataPlatformPlantGeneralDatum records from the query.
func (q dataPlatformPlantGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPlantGeneralDatumSlice, error) {
	var o []*DataPlatformPlantGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPlantGeneralDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPlantGeneralDatum records in the query.
func (q dataPlatformPlantGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_plant_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPlantGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_plant_general_data exists")
	}

	return count > 0, nil
}

// AddressIDDataPlatformAddressAddressDatum pointed to by the foreign key.
func (o *DataPlatformPlantGeneralDatum) AddressIDDataPlatformAddressAddressDatum(mods ...qm.QueryMod) dataPlatformAddressAddressDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`AddressID` = ?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformAddressAddressData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlantGeneralDatum) BusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// CountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformPlantGeneralDatum) CountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.Country),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// LanguageDataPlatformLanguageLanguageDatum pointed to by the foreign key.
func (o *DataPlatformPlantGeneralDatum) LanguageDataPlatformLanguageLanguageDatum(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.Language),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformLanguageLanguageData(queryMods...)
}

// TimeZoneDataPlatformTimeZoneTimeZoneDatum pointed to by the foreign key.
func (o *DataPlatformPlantGeneralDatum) TimeZoneDataPlatformTimeZoneTimeZoneDatum(mods ...qm.QueryMod) dataPlatformTimeZoneTimeZoneDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`TimeZone` = ?", o.TimeZone),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformTimeZoneTimeZoneData(queryMods...)
}

// InspectionPlantDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via InspectionPlant column.
func (o *DataPlatformPlantGeneralDatum) InspectionPlantDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`InspectionPlant`=?", o.Plant),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// InspectionPlantDataPlatformInspectionLotHeaderData retrieves all the data_platform_inspection_lot_header_datum's DataPlatformInspectionLotHeaderData with an executor via InspectionPlant column.
func (o *DataPlatformPlantGeneralDatum) InspectionPlantDataPlatformInspectionLotHeaderData(mods ...qm.QueryMod) dataPlatformInspectionLotHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_lot_header_data`.`InspectionPlant`=?", o.Plant),
	)

	return DataPlatformInspectionLotHeaderData(queryMods...)
}

// InspectionPlantDataPlatformInspectionPlanHeaderData retrieves all the data_platform_inspection_plan_header_datum's DataPlatformInspectionPlanHeaderData with an executor via InspectionPlant column.
func (o *DataPlatformPlantGeneralDatum) InspectionPlantDataPlatformInspectionPlanHeaderData(mods ...qm.QueryMod) dataPlatformInspectionPlanHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_plan_header_data`.`InspectionPlant`=?", o.Plant),
	)

	return DataPlatformInspectionPlanHeaderData(queryMods...)
}

// ProductionPlantDataPlatformInvoiceDocumentItemData retrieves all the data_platform_invoice_document_item_datum's DataPlatformInvoiceDocumentItemData with an executor via ProductionPlant column.
func (o *DataPlatformPlantGeneralDatum) ProductionPlantDataPlatformInvoiceDocumentItemData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_data`.`ProductionPlant`=?", o.Plant),
	)

	return DataPlatformInvoiceDocumentItemData(queryMods...)
}

// InspectionPlantDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via InspectionPlant column.
func (o *DataPlatformPlantGeneralDatum) InspectionPlantDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`InspectionPlant`=?", o.Plant),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// BusinessPartnerDataPlatformProductMasterBPPlantData retrieves all the data_platform_product_master_bp_plant_datum's DataPlatformProductMasterBPPlantData with an executor via BusinessPartner column.
func (o *DataPlatformPlantGeneralDatum) BusinessPartnerDataPlatformProductMasterBPPlantData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_bp_plant_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// BusinessPartnerDataPlatformProductStockProductStockDataOlds retrieves all the data_platform_product_stock_product_stock_data_old's DataPlatformProductStockProductStockDataOlds with an executor via BusinessPartner column.
func (o *DataPlatformPlantGeneralDatum) BusinessPartnerDataPlatformProductStockProductStockDataOlds(mods ...qm.QueryMod) dataPlatformProductStockProductStockDataOldQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_data_old`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockDataOlds(queryMods...)
}

// OwnerBusinessPartnerDataPlatformProjectProjectData retrieves all the data_platform_project_project_datum's DataPlatformProjectProjectData with an executor via OwnerBusinessPartner column.
func (o *DataPlatformPlantGeneralDatum) OwnerBusinessPartnerDataPlatformProjectProjectData(mods ...qm.QueryMod) dataPlatformProjectProjectDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_project_project_data`.`OwnerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProjectProjectData(queryMods...)
}

// BusinessPartnerDataPlatformProjectWBSElementData retrieves all the data_platform_project_wbs_element_datum's DataPlatformProjectWBSElementData with an executor via BusinessPartner column.
func (o *DataPlatformPlantGeneralDatum) BusinessPartnerDataPlatformProjectWBSElementData(mods ...qm.QueryMod) dataPlatformProjectWBSElementDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_project_wbs_element_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProjectWBSElementData(queryMods...)
}

// DeliverFromPartyDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via DeliverFromParty column.
func (o *DataPlatformPlantGeneralDatum) DeliverFromPartyDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`DeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// DeliverToPartyDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via DeliverToParty column.
func (o *DataPlatformPlantGeneralDatum) DeliverToPartyDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`DeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via StockConfirmationBusinessPartner column.
func (o *DataPlatformPlantGeneralDatum) StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`StockConfirmationBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData retrieves all the data_platform_scr_delivery_plant_relation_datum's DataPlatformSCRDeliveryPlantRelationData with an executor via DeliverFromParty column.
func (o *DataPlatformPlantGeneralDatum) DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_delivery_plant_relation_data`.`DeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRDeliveryPlantRelationData(queryMods...)
}

// DeliverToPartyDataPlatformSCRDeliveryPlantRelationData retrieves all the data_platform_scr_delivery_plant_relation_datum's DataPlatformSCRDeliveryPlantRelationData with an executor via DeliverToParty column.
func (o *DataPlatformPlantGeneralDatum) DeliverToPartyDataPlatformSCRDeliveryPlantRelationData(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_delivery_plant_relation_data`.`DeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRDeliveryPlantRelationData(queryMods...)
}

// ProductionPlantDataPlatformSCRProductionPlantRelationData retrieves all the data_platform_scr_production_plant_relation_datum's DataPlatformSCRProductionPlantRelationData with an executor via ProductionPlant column.
func (o *DataPlatformPlantGeneralDatum) ProductionPlantDataPlatformSCRProductionPlantRelationData(mods ...qm.QueryMod) dataPlatformSCRProductionPlantRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_production_plant_relation_data`.`ProductionPlant`=?", o.Plant),
	)

	return DataPlatformSCRProductionPlantRelationData(queryMods...)
}

// StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData retrieves all the data_platform_scr_stock_conf_plant_relation_datum's DataPlatformSCRStockConfPlantRelationData with an executor via StockConfirmationBusinessPartner column.
func (o *DataPlatformPlantGeneralDatum) StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData(mods ...qm.QueryMod) dataPlatformSCRStockConfPlantRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_stock_conf_plant_relation_data`.`StockConfirmationBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformSCRStockConfPlantRelationData(queryMods...)
}

// BusinessPartnerDataPlatformWorkCenterGeneralData retrieves all the data_platform_work_center_general_datum's DataPlatformWorkCenterGeneralData with an executor via BusinessPartner column.
func (o *DataPlatformPlantGeneralDatum) BusinessPartnerDataPlatformWorkCenterGeneralData(mods ...qm.QueryMod) dataPlatformWorkCenterGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_work_center_general_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformWorkCenterGeneralData(queryMods...)
}

// LoadAddressIDDataPlatformAddressAddressDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlantGeneralDatumL) LoadAddressIDDataPlatformAddressAddressDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		if !queries.IsNil(object.AddressID) {
			args = append(args, object.AddressID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AddressID) {
				args = append(args, obj.AddressID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_address_address_data`),
		qm.WhereIn(`data_platform_address_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformAddressAddressDatum")
	}

	var resultSlice []*DataPlatformAddressAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformAddressAddressDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_address_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_address_address_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AddressIDDataPlatformAddressAddressDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformAddressAddressDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlantGeneralDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlantGeneralDatumL) LoadCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		if !queries.IsNil(object.Country) {
			args = append(args, object.Country)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Country) {
				args = append(args, obj.Country)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Country, foreign.Country) {
				local.R.CountryDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformLanguageLanguageDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlantGeneralDatumL) LoadLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Language)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_data`),
		qm.WhereIn(`data_platform_language_language_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformLanguageLanguageDatum")
	}

	var resultSlice []*DataPlatformLanguageLanguageDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformLanguageLanguageDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_language_language_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LanguageDataPlatformLanguageLanguageDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformLanguageLanguageDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadTimeZoneDataPlatformTimeZoneTimeZoneDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlantGeneralDatumL) LoadTimeZoneDataPlatformTimeZoneTimeZoneDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		if !queries.IsNil(object.TimeZone) {
			args = append(args, object.TimeZone)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TimeZone) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TimeZone) {
				args = append(args, obj.TimeZone)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_time_zone_time_zone_data`),
		qm.WhereIn(`data_platform_time_zone_time_zone_data.TimeZone in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformTimeZoneTimeZoneDatum")
	}

	var resultSlice []*DataPlatformTimeZoneTimeZoneDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformTimeZoneTimeZoneDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_time_zone_time_zone_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_time_zone_time_zone_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TimeZoneDataPlatformTimeZoneTimeZoneDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TimeZone, foreign.TimeZone) {
				local.R.TimeZoneDataPlatformTimeZoneTimeZoneDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlantDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadInspectionPlantDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Plant) {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.InspectionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.InspectionPlantDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Plant, foreign.InspectionPlant) {
				local.R.InspectionPlantDataPlatformDeliveryDocumentItemData = append(local.R.InspectionPlantDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlantDataPlatformInspectionLotHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadInspectionPlantDataPlatformInspectionLotHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Plant {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_header_data`),
		qm.WhereIn(`data_platform_inspection_lot_header_data.InspectionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_lot_header_data")
	}

	var resultSlice []*DataPlatformInspectionLotHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_lot_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_lot_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_header_data")
	}

	if singular {
		object.R.InspectionPlantDataPlatformInspectionLotHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Plant == foreign.InspectionPlant {
				local.R.InspectionPlantDataPlatformInspectionLotHeaderData = append(local.R.InspectionPlantDataPlatformInspectionLotHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlantDataPlatformInspectionPlanHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadInspectionPlantDataPlatformInspectionPlanHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Plant {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_header_data`),
		qm.WhereIn(`data_platform_inspection_plan_header_data.InspectionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_plan_header_data")
	}

	var resultSlice []*DataPlatformInspectionPlanHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_plan_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_plan_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_header_data")
	}

	if singular {
		object.R.InspectionPlantDataPlatformInspectionPlanHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Plant == foreign.InspectionPlant {
				local.R.InspectionPlantDataPlatformInspectionPlanHeaderData = append(local.R.InspectionPlantDataPlatformInspectionPlanHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionPlantDataPlatformInvoiceDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadProductionPlantDataPlatformInvoiceDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Plant) {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_data`),
		qm.WhereIn(`data_platform_invoice_document_item_data.ProductionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_data")
	}

	if singular {
		object.R.ProductionPlantDataPlatformInvoiceDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Plant, foreign.ProductionPlant) {
				local.R.ProductionPlantDataPlatformInvoiceDocumentItemData = append(local.R.ProductionPlantDataPlatformInvoiceDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlantDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadInspectionPlantDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Plant) {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.InspectionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.InspectionPlantDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Plant, foreign.InspectionPlant) {
				local.R.InspectionPlantDataPlatformOrdersItemData = append(local.R.InspectionPlantDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductMasterBPPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadBusinessPartnerDataPlatformProductMasterBPPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_bp_plant_data")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_bp_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductMasterBPPlantData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterBPPlantData = append(local.R.BusinessPartnerDataPlatformProductMasterBPPlantData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductStockProductStockDataOlds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadBusinessPartnerDataPlatformProductStockProductStockDataOlds(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_data_old`),
		qm.WhereIn(`data_platform_product_stock_product_stock_data_old.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_data_old")
	}

	var resultSlice []*DataPlatformProductStockProductStockDataOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_data_old")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_data_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_data_old")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = append(local.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOwnerBusinessPartnerDataPlatformProjectProjectData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadOwnerBusinessPartnerDataPlatformProjectProjectData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_project_project_data`),
		qm.WhereIn(`data_platform_project_project_data.OwnerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_project_project_data")
	}

	var resultSlice []*DataPlatformProjectProjectDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_project_project_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_project_project_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_project_project_data")
	}

	if singular {
		object.R.OwnerBusinessPartnerDataPlatformProjectProjectData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.OwnerBusinessPartner {
				local.R.OwnerBusinessPartnerDataPlatformProjectProjectData = append(local.R.OwnerBusinessPartnerDataPlatformProjectProjectData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProjectWBSElementData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadBusinessPartnerDataPlatformProjectWBSElementData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_project_wbs_element_data`),
		qm.WhereIn(`data_platform_project_wbs_element_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_project_wbs_element_data")
	}

	var resultSlice []*DataPlatformProjectWBSElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_project_wbs_element_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_project_wbs_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_project_wbs_element_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProjectWBSElementData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProjectWBSElementData = append(local.R.BusinessPartnerDataPlatformProjectWBSElementData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.DeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DeliverFromParty) {
				local.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = append(local.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadDeliverToPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.DeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverToParty {
				local.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData = append(local.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadStockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.StockConfirmationBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.StockConfirmationBusinessPartner) {
				local.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData = append(local.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformSCRDeliveryPlantRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadDeliverFromPartyDataPlatformSCRDeliveryPlantRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_plant_relation_data.DeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_delivery_plant_relation_data")
	}

	var resultSlice []*DataPlatformSCRDeliveryPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_delivery_plant_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_delivery_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_plant_relation_data")
	}

	if singular {
		object.R.DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverFromParty {
				local.R.DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData = append(local.R.DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformSCRDeliveryPlantRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadDeliverToPartyDataPlatformSCRDeliveryPlantRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_plant_relation_data.DeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_delivery_plant_relation_data")
	}

	var resultSlice []*DataPlatformSCRDeliveryPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_delivery_plant_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_delivery_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_plant_relation_data")
	}

	if singular {
		object.R.DeliverToPartyDataPlatformSCRDeliveryPlantRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverToParty {
				local.R.DeliverToPartyDataPlatformSCRDeliveryPlantRelationData = append(local.R.DeliverToPartyDataPlatformSCRDeliveryPlantRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionPlantDataPlatformSCRProductionPlantRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadProductionPlantDataPlatformSCRProductionPlantRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Plant {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_production_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_production_plant_relation_data.ProductionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_production_plant_relation_data")
	}

	var resultSlice []*DataPlatformSCRProductionPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_production_plant_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_production_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_production_plant_relation_data")
	}

	if singular {
		object.R.ProductionPlantDataPlatformSCRProductionPlantRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Plant == foreign.ProductionPlant {
				local.R.ProductionPlantDataPlatformSCRProductionPlantRelationData = append(local.R.ProductionPlantDataPlatformSCRProductionPlantRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadStockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_stock_conf_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_stock_conf_plant_relation_data.StockConfirmationBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_stock_conf_plant_relation_data")
	}

	var resultSlice []*DataPlatformSCRStockConfPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_stock_conf_plant_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_stock_conf_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_stock_conf_plant_relation_data")
	}

	if singular {
		object.R.StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.StockConfirmationBusinessPartner {
				local.R.StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData = append(local.R.StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformWorkCenterGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadBusinessPartnerDataPlatformWorkCenterGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_work_center_general_data`),
		qm.WhereIn(`data_platform_work_center_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_work_center_general_data")
	}

	var resultSlice []*DataPlatformWorkCenterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_work_center_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_work_center_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_work_center_general_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformWorkCenterGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformWorkCenterGeneralData = append(local.R.BusinessPartnerDataPlatformWorkCenterGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// SetAddressIDDataPlatformAddressAddressDatum of the dataPlatformPlantGeneralDatum to the related item.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to related.
func (o *DataPlatformPlantGeneralDatum) SetAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformAddressAddressDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.AddressID, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AddressID, related.AddressID)
	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			AddressIDDataPlatformAddressAddressDatum: related,
		}
	} else {
		o.R.AddressIDDataPlatformAddressAddressDatum = related
	}

	return nil
}

// RemoveAddressIDDataPlatformAddressAddressDatum relationship.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to nil.
func (o *DataPlatformPlantGeneralDatum) RemoveAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformAddressAddressDatum) error {
	var err error

	queries.SetScanner(&o.AddressID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformAddressAddressDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformPlantGeneralDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformPlantGeneralDatum) SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetCountryDataPlatformCountryCountryDatum of the dataPlatformPlantGeneralDatum to the related item.
// Sets o.R.CountryDataPlatformCountryCountryDatum to related.
func (o *DataPlatformPlantGeneralDatum) SetCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Country, related.Country)
	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			CountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.CountryDataPlatformCountryCountryDatum = related
	}

	return nil
}

// RemoveCountryDataPlatformCountryCountryDatum relationship.
// Sets o.R.CountryDataPlatformCountryCountryDatum to nil.
func (o *DataPlatformPlantGeneralDatum) RemoveCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCountryCountryDatum) error {
	var err error

	queries.SetScanner(&o.Country, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Country")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CountryDataPlatformCountryCountryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetLanguageDataPlatformLanguageLanguageDatum of the dataPlatformPlantGeneralDatum to the related item.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum to related.
func (o *DataPlatformPlantGeneralDatum) SetLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformLanguageLanguageDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Language = related.Language
	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			LanguageDataPlatformLanguageLanguageDatum: related,
		}
	} else {
		o.R.LanguageDataPlatformLanguageLanguageDatum = related
	}

	return nil
}

// SetTimeZoneDataPlatformTimeZoneTimeZoneDatum of the dataPlatformPlantGeneralDatum to the related item.
// Sets o.R.TimeZoneDataPlatformTimeZoneTimeZoneDatum to related.
func (o *DataPlatformPlantGeneralDatum) SetTimeZoneDataPlatformTimeZoneTimeZoneDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformTimeZoneTimeZoneDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"TimeZone"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.TimeZone, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TimeZone, related.TimeZone)
	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			TimeZoneDataPlatformTimeZoneTimeZoneDatum: related,
		}
	} else {
		o.R.TimeZoneDataPlatformTimeZoneTimeZoneDatum = related
	}

	return nil
}

// RemoveTimeZoneDataPlatformTimeZoneTimeZoneDatum relationship.
// Sets o.R.TimeZoneDataPlatformTimeZoneTimeZoneDatum to nil.
func (o *DataPlatformPlantGeneralDatum) RemoveTimeZoneDataPlatformTimeZoneTimeZoneDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformTimeZoneTimeZoneDatum) error {
	var err error

	queries.SetScanner(&o.TimeZone, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("TimeZone")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TimeZoneDataPlatformTimeZoneTimeZoneDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// AddInspectionPlantDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionPlantDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformPlantGeneralDatum) AddInspectionPlantDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InspectionPlant, o.Plant)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InspectionPlant, o.Plant)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			InspectionPlantDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.InspectionPlantDataPlatformDeliveryDocumentItemData = append(o.R.InspectionPlantDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetInspectionPlantDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_plant_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InspectionPlantDataPlatformPlantGeneralDatum's InspectionPlantDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.InspectionPlantDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformPlantGeneralDatum) SetInspectionPlantDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `InspectionPlant` = null where `InspectionPlant` = ?"
	values := []interface{}{o.Plant}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.InspectionPlantDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddInspectionPlantDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveInspectionPlantDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.InspectionPlantDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantGeneralDatum) RemoveInspectionPlantDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InspectionPlant, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("InspectionPlant")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InspectionPlantDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.InspectionPlantDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.InspectionPlantDataPlatformDeliveryDocumentItemData[i] = o.R.InspectionPlantDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.InspectionPlantDataPlatformDeliveryDocumentItemData = o.R.InspectionPlantDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddInspectionPlantDataPlatformInspectionLotHeaderData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionPlantDataPlatformInspectionLotHeaderData.
func (o *DataPlatformPlantGeneralDatum) AddInspectionPlantDataPlatformInspectionLotHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionPlant = o.Plant
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_lot_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.InspectionLot}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionPlant = o.Plant
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			InspectionPlantDataPlatformInspectionLotHeaderData: related,
		}
	} else {
		o.R.InspectionPlantDataPlatformInspectionLotHeaderData = append(o.R.InspectionPlantDataPlatformInspectionLotHeaderData, related...)
	}

	return nil
}

// AddInspectionPlantDataPlatformInspectionPlanHeaderData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionPlantDataPlatformInspectionPlanHeaderData.
func (o *DataPlatformPlantGeneralDatum) AddInspectionPlantDataPlatformInspectionPlanHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionPlanHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionPlant = o.Plant
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_plan_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.InspectionPlan}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionPlant = o.Plant
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			InspectionPlantDataPlatformInspectionPlanHeaderData: related,
		}
	} else {
		o.R.InspectionPlantDataPlatformInspectionPlanHeaderData = append(o.R.InspectionPlantDataPlatformInspectionPlanHeaderData, related...)
	}

	return nil
}

// AddProductionPlantDataPlatformInvoiceDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionPlantDataPlatformInvoiceDocumentItemData.
func (o *DataPlatformPlantGeneralDatum) AddProductionPlantDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductionPlant, o.Plant)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.InvoiceDocument, rel.InvoiceDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductionPlant, o.Plant)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			ProductionPlantDataPlatformInvoiceDocumentItemData: related,
		}
	} else {
		o.R.ProductionPlantDataPlatformInvoiceDocumentItemData = append(o.R.ProductionPlantDataPlatformInvoiceDocumentItemData, related...)
	}

	return nil
}

// SetProductionPlantDataPlatformInvoiceDocumentItemData removes all previously related items of the
// data_platform_plant_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductionPlantDataPlatformPlantGeneralDatum's ProductionPlantDataPlatformInvoiceDocumentItemData accordingly.
// Replaces o.R.ProductionPlantDataPlatformInvoiceDocumentItemData with related.
func (o *DataPlatformPlantGeneralDatum) SetProductionPlantDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	query := "update `data_platform_invoice_document_item_data` set `ProductionPlant` = null where `ProductionPlant` = ?"
	values := []interface{}{o.Plant}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductionPlantDataPlatformInvoiceDocumentItemData = nil
	}

	return o.AddProductionPlantDataPlatformInvoiceDocumentItemData(ctx, exec, insert, related...)
}

// RemoveProductionPlantDataPlatformInvoiceDocumentItemData relationships from objects passed in.
// Removes related items from R.ProductionPlantDataPlatformInvoiceDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantGeneralDatum) RemoveProductionPlantDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductionPlant, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductionPlant")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductionPlantDataPlatformInvoiceDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductionPlantDataPlatformInvoiceDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductionPlantDataPlatformInvoiceDocumentItemData[i] = o.R.ProductionPlantDataPlatformInvoiceDocumentItemData[ln-1]
			}
			o.R.ProductionPlantDataPlatformInvoiceDocumentItemData = o.R.ProductionPlantDataPlatformInvoiceDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddInspectionPlantDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionPlantDataPlatformOrdersItemData.
func (o *DataPlatformPlantGeneralDatum) AddInspectionPlantDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InspectionPlant, o.Plant)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InspectionPlant, o.Plant)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			InspectionPlantDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.InspectionPlantDataPlatformOrdersItemData = append(o.R.InspectionPlantDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetInspectionPlantDataPlatformOrdersItemData removes all previously related items of the
// data_platform_plant_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InspectionPlantDataPlatformPlantGeneralDatum's InspectionPlantDataPlatformOrdersItemData accordingly.
// Replaces o.R.InspectionPlantDataPlatformOrdersItemData with related.
func (o *DataPlatformPlantGeneralDatum) SetInspectionPlantDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `InspectionPlant` = null where `InspectionPlant` = ?"
	values := []interface{}{o.Plant}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.InspectionPlantDataPlatformOrdersItemData = nil
	}

	return o.AddInspectionPlantDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveInspectionPlantDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.InspectionPlantDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantGeneralDatum) RemoveInspectionPlantDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InspectionPlant, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("InspectionPlant")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InspectionPlantDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.InspectionPlantDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.InspectionPlantDataPlatformOrdersItemData[i] = o.R.InspectionPlantDataPlatformOrdersItemData[ln-1]
			}
			o.R.InspectionPlantDataPlatformOrdersItemData = o.R.InspectionPlantDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductMasterBPPlantData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductMasterBPPlantData.
func (o *DataPlatformPlantGeneralDatum) AddBusinessPartnerDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformProductMasterBPPlantData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterBPPlantData = append(o.R.BusinessPartnerDataPlatformProductMasterBPPlantData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductStockProductStockDataOlds adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds.
func (o *DataPlatformPlantGeneralDatum) AddBusinessPartnerDataPlatformProductStockProductStockDataOlds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDataOld) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_data_old` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockDataOldPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Product, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformProductStockProductStockDataOlds: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = append(o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds, related...)
	}

	return nil
}

// AddOwnerBusinessPartnerDataPlatformProjectProjectData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.OwnerBusinessPartnerDataPlatformProjectProjectData.
func (o *DataPlatformPlantGeneralDatum) AddOwnerBusinessPartnerDataPlatformProjectProjectData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProjectProjectDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OwnerBusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_project_project_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OwnerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProjectProjectDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Project}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OwnerBusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			OwnerBusinessPartnerDataPlatformProjectProjectData: related,
		}
	} else {
		o.R.OwnerBusinessPartnerDataPlatformProjectProjectData = append(o.R.OwnerBusinessPartnerDataPlatformProjectProjectData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProjectWBSElementData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProjectWBSElementData.
func (o *DataPlatformPlantGeneralDatum) AddBusinessPartnerDataPlatformProjectWBSElementData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProjectWBSElementDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_project_wbs_element_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProjectWBSElementDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Project, rel.WBSElement}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformProjectWBSElementData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProjectWBSElementData = append(o.R.BusinessPartnerDataPlatformProjectWBSElementData, related...)
	}

	return nil
}

// AddDeliverFromPartyDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformPlantGeneralDatum) AddDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliverFromParty, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliverFromParty, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			DeliverFromPartyDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = append(o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// SetDeliverFromPartyDataPlatformPurchaseRequisitionItemData removes all previously related items of the
// data_platform_plant_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeliverFromPartyDataPlatformPlantGeneralDatum's DeliverFromPartyDataPlatformPurchaseRequisitionItemData accordingly.
// Replaces o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData with related.
func (o *DataPlatformPlantGeneralDatum) SetDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	query := "update `data_platform_purchase_requisition_item_data` set `DeliverFromParty` = null where `DeliverFromParty` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = nil
	}

	return o.AddDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx, exec, insert, related...)
}

// RemoveDeliverFromPartyDataPlatformPurchaseRequisitionItemData relationships from objects passed in.
// Removes related items from R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantGeneralDatum) RemoveDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliverFromParty, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DeliverFromParty")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData)
			if ln > 1 && i < ln-1 {
				o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData[i] = o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData[ln-1]
			}
			o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliverToPartyDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformPlantGeneralDatum) AddDeliverToPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			DeliverToPartyDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData = append(o.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// AddStockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformPlantGeneralDatum) AddStockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StockConfirmationBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"StockConfirmationBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StockConfirmationBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData = append(o.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// SetStockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData removes all previously related items of the
// data_platform_plant_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StockConfirmationBusinessPartnerDataPlatformPlantGeneralDatum's StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData accordingly.
// Replaces o.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData with related.
func (o *DataPlatformPlantGeneralDatum) SetStockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	query := "update `data_platform_purchase_requisition_item_data` set `StockConfirmationBusinessPartner` = null where `StockConfirmationBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData = nil
	}

	return o.AddStockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData(ctx, exec, insert, related...)
}

// RemoveStockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData relationships from objects passed in.
// Removes related items from R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantGeneralDatum) RemoveStockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StockConfirmationBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("StockConfirmationBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData)
			if ln > 1 && i < ln-1 {
				o.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData[i] = o.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData[ln-1]
			}
			o.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData = o.R.StockConfirmationBusinessPartnerDataPlatformPurchaseRequisitionItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliverFromPartyDataPlatformSCRDeliveryPlantRelationData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData.
func (o *DataPlatformPlantGeneralDatum) AddDeliverFromPartyDataPlatformSCRDeliveryPlantRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryPlantRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverFromParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_delivery_plant_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverFromParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData = append(o.R.DeliverFromPartyDataPlatformSCRDeliveryPlantRelationData, related...)
	}

	return nil
}

// AddDeliverToPartyDataPlatformSCRDeliveryPlantRelationData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPartyDataPlatformSCRDeliveryPlantRelationData.
func (o *DataPlatformPlantGeneralDatum) AddDeliverToPartyDataPlatformSCRDeliveryPlantRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryPlantRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_delivery_plant_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			DeliverToPartyDataPlatformSCRDeliveryPlantRelationData: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformSCRDeliveryPlantRelationData = append(o.R.DeliverToPartyDataPlatformSCRDeliveryPlantRelationData, related...)
	}

	return nil
}

// AddProductionPlantDataPlatformSCRProductionPlantRelationData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionPlantDataPlatformSCRProductionPlantRelationData.
func (o *DataPlatformPlantGeneralDatum) AddProductionPlantDataPlatformSCRProductionPlantRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRProductionPlantRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductionPlant = o.Plant
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_production_plant_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRProductionPlantRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipProductionPlantID, rel.Buyer, rel.Seller, rel.ProductionPlantBusinessPartner, rel.ProductionPlant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductionPlant = o.Plant
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			ProductionPlantDataPlatformSCRProductionPlantRelationData: related,
		}
	} else {
		o.R.ProductionPlantDataPlatformSCRProductionPlantRelationData = append(o.R.ProductionPlantDataPlatformSCRProductionPlantRelationData, related...)
	}

	return nil
}

// AddStockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData.
func (o *DataPlatformPlantGeneralDatum) AddStockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRStockConfPlantRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StockConfirmationBusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_stock_conf_plant_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"StockConfirmationBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRStockConfPlantRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipStockConfPlantID, rel.Buyer, rel.Seller, rel.StockConfirmationBusinessPartner, rel.StockConfirmationPlant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StockConfirmationBusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData: related,
		}
	} else {
		o.R.StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData = append(o.R.StockConfirmationBusinessPartnerDataPlatformSCRStockConfPlantRelationData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformWorkCenterGeneralData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformWorkCenterGeneralData.
func (o *DataPlatformPlantGeneralDatum) AddBusinessPartnerDataPlatformWorkCenterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformWorkCenterGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_work_center_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.WorkCenter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformWorkCenterGeneralData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformWorkCenterGeneralData = append(o.R.BusinessPartnerDataPlatformWorkCenterGeneralData, related...)
	}

	return nil
}

// DataPlatformPlantGeneralData retrieves all the records using an executor.
func DataPlatformPlantGeneralData(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_plant_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_plant_general_data`.*"})
	}

	return dataPlatformPlantGeneralDatumQuery{q}
}

// FindDataPlatformPlantGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, plant string, selectCols ...string) (*DataPlatformPlantGeneralDatum, error) {
	dataPlatformPlantGeneralDatumObj := &DataPlatformPlantGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_plant_general_data` where `BusinessPartner`=? AND `Plant`=?", sel,
	)

	q := queries.Raw(query, businessPartner, plant)

	err := q.Bind(ctx, exec, dataPlatformPlantGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_plant_general_data")
	}

	return dataPlatformPlantGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPlantGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_plant_general_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlantGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPlantGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPlantGeneralDatumInsertCache[key]
	dataPlatformPlantGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPlantGeneralDatumAllColumns,
			dataPlatformPlantGeneralDatumColumnsWithDefault,
			dataPlatformPlantGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_plant_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_plant_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_plant_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_plant_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Plant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_plant_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlantGeneralDatumInsertCacheMut.Lock()
		dataPlatformPlantGeneralDatumInsertCache[key] = cache
		dataPlatformPlantGeneralDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPlantGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPlantGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPlantGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPlantGeneralDatumUpdateCache[key]
	dataPlatformPlantGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPlantGeneralDatumAllColumns,
			dataPlatformPlantGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_plant_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, append(wl, dataPlatformPlantGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_plant_general_data row")
	}

	if !cached {
		dataPlatformPlantGeneralDatumUpdateCacheMut.Lock()
		dataPlatformPlantGeneralDatumUpdateCache[key] = cache
		dataPlatformPlantGeneralDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPlantGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_plant_general_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPlantGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPlantGeneralDatum slice")
	}

	return nil
}

var mySQLDataPlatformPlantGeneralDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPlantGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_plant_general_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlantGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPlantGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPlantGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPlantGeneralDatumUpsertCache[key]
	dataPlatformPlantGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPlantGeneralDatumAllColumns,
			dataPlatformPlantGeneralDatumColumnsWithDefault,
			dataPlatformPlantGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPlantGeneralDatumAllColumns,
			dataPlatformPlantGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_plant_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_plant_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_plant_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_plant_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_plant_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_plant_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlantGeneralDatumUpsertCacheMut.Lock()
		dataPlatformPlantGeneralDatumUpsertCache[key] = cache
		dataPlatformPlantGeneralDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPlantGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPlantGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPlantGeneralDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPlantGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_plant_general_data` WHERE `BusinessPartner`=? AND `Plant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_plant_general_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPlantGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPlantGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_plant_general_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPlantGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_plant_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPlantGeneralDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPlantGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPlantGeneralDatum(ctx, exec, o.BusinessPartner, o.Plant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPlantGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPlantGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_plant_general_data`.* FROM `data_platform_plant_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPlantGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPlantGeneralDatumExists checks if the DataPlatformPlantGeneralDatum row exists.
func DataPlatformPlantGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, plant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_plant_general_data` where `BusinessPartner`=? AND `Plant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, plant)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, plant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_plant_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPlantGeneralDatum row exists.
func (o *DataPlatformPlantGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPlantGeneralDatumExists(ctx, exec, o.BusinessPartner, o.Plant)
}
