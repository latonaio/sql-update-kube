// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPlantGeneralDatum is an object representing the database table.
type DataPlatformPlantGeneralDatum struct {
	BusinessPartner      int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	PlantFullName        null.String `boil:"PlantFullName" json:"PlantFullName,omitempty" toml:"PlantFullName" yaml:"PlantFullName,omitempty"`
	PlantName            string      `boil:"PlantName" json:"PlantName" toml:"PlantName" yaml:"PlantName"`
	Language             string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	CreationDate         string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime         string      `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate       string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime       string      `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	PlantFoundationDate  null.String `boil:"PlantFoundationDate" json:"PlantFoundationDate,omitempty" toml:"PlantFoundationDate" yaml:"PlantFoundationDate,omitempty"`
	PlantLiquidationDate null.String `boil:"PlantLiquidationDate" json:"PlantLiquidationDate,omitempty" toml:"PlantLiquidationDate" yaml:"PlantLiquidationDate,omitempty"`
	SearchTerm1          null.String `boil:"SearchTerm1" json:"SearchTerm1,omitempty" toml:"SearchTerm1" yaml:"SearchTerm1,omitempty"`
	SearchTerm2          null.String `boil:"SearchTerm2" json:"SearchTerm2,omitempty" toml:"SearchTerm2" yaml:"SearchTerm2,omitempty"`
	PlantDeathDate       null.String `boil:"PlantDeathDate" json:"PlantDeathDate,omitempty" toml:"PlantDeathDate" yaml:"PlantDeathDate,omitempty"`
	PlantIsBlocked       null.Bool   `boil:"PlantIsBlocked" json:"PlantIsBlocked,omitempty" toml:"PlantIsBlocked" yaml:"PlantIsBlocked,omitempty"`
	GroupPlantName1      null.String `boil:"GroupPlantName1" json:"GroupPlantName1,omitempty" toml:"GroupPlantName1" yaml:"GroupPlantName1,omitempty"`
	GroupPlantName2      null.String `boil:"GroupPlantName2" json:"GroupPlantName2,omitempty" toml:"GroupPlantName2" yaml:"GroupPlantName2,omitempty"`
	AddressID            null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`
	Country              null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	TimeZone             null.String `boil:"TimeZone" json:"TimeZone,omitempty" toml:"TimeZone" yaml:"TimeZone,omitempty"`
	PlantIDByExtSystem   null.String `boil:"PlantIDByExtSystem" json:"PlantIDByExtSystem,omitempty" toml:"PlantIDByExtSystem" yaml:"PlantIDByExtSystem,omitempty"`
	IsMarkedForDeletion  null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPlantGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPlantGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPlantGeneralDatumColumns = struct {
	BusinessPartner      string
	Plant                string
	PlantFullName        string
	PlantName            string
	Language             string
	CreationDate         string
	CreationTime         string
	LastChangeDate       string
	LastChangeTime       string
	PlantFoundationDate  string
	PlantLiquidationDate string
	SearchTerm1          string
	SearchTerm2          string
	PlantDeathDate       string
	PlantIsBlocked       string
	GroupPlantName1      string
	GroupPlantName2      string
	AddressID            string
	Country              string
	TimeZone             string
	PlantIDByExtSystem   string
	IsMarkedForDeletion  string
}{
	BusinessPartner:      "BusinessPartner",
	Plant:                "Plant",
	PlantFullName:        "PlantFullName",
	PlantName:            "PlantName",
	Language:             "Language",
	CreationDate:         "CreationDate",
	CreationTime:         "CreationTime",
	LastChangeDate:       "LastChangeDate",
	LastChangeTime:       "LastChangeTime",
	PlantFoundationDate:  "PlantFoundationDate",
	PlantLiquidationDate: "PlantLiquidationDate",
	SearchTerm1:          "SearchTerm1",
	SearchTerm2:          "SearchTerm2",
	PlantDeathDate:       "PlantDeathDate",
	PlantIsBlocked:       "PlantIsBlocked",
	GroupPlantName1:      "GroupPlantName1",
	GroupPlantName2:      "GroupPlantName2",
	AddressID:            "AddressID",
	Country:              "Country",
	TimeZone:             "TimeZone",
	PlantIDByExtSystem:   "PlantIDByExtSystem",
	IsMarkedForDeletion:  "IsMarkedForDeletion",
}

var DataPlatformPlantGeneralDatumTableColumns = struct {
	BusinessPartner      string
	Plant                string
	PlantFullName        string
	PlantName            string
	Language             string
	CreationDate         string
	CreationTime         string
	LastChangeDate       string
	LastChangeTime       string
	PlantFoundationDate  string
	PlantLiquidationDate string
	SearchTerm1          string
	SearchTerm2          string
	PlantDeathDate       string
	PlantIsBlocked       string
	GroupPlantName1      string
	GroupPlantName2      string
	AddressID            string
	Country              string
	TimeZone             string
	PlantIDByExtSystem   string
	IsMarkedForDeletion  string
}{
	BusinessPartner:      "data_platform_plant_general_data.BusinessPartner",
	Plant:                "data_platform_plant_general_data.Plant",
	PlantFullName:        "data_platform_plant_general_data.PlantFullName",
	PlantName:            "data_platform_plant_general_data.PlantName",
	Language:             "data_platform_plant_general_data.Language",
	CreationDate:         "data_platform_plant_general_data.CreationDate",
	CreationTime:         "data_platform_plant_general_data.CreationTime",
	LastChangeDate:       "data_platform_plant_general_data.LastChangeDate",
	LastChangeTime:       "data_platform_plant_general_data.LastChangeTime",
	PlantFoundationDate:  "data_platform_plant_general_data.PlantFoundationDate",
	PlantLiquidationDate: "data_platform_plant_general_data.PlantLiquidationDate",
	SearchTerm1:          "data_platform_plant_general_data.SearchTerm1",
	SearchTerm2:          "data_platform_plant_general_data.SearchTerm2",
	PlantDeathDate:       "data_platform_plant_general_data.PlantDeathDate",
	PlantIsBlocked:       "data_platform_plant_general_data.PlantIsBlocked",
	GroupPlantName1:      "data_platform_plant_general_data.GroupPlantName1",
	GroupPlantName2:      "data_platform_plant_general_data.GroupPlantName2",
	AddressID:            "data_platform_plant_general_data.AddressID",
	Country:              "data_platform_plant_general_data.Country",
	TimeZone:             "data_platform_plant_general_data.TimeZone",
	PlantIDByExtSystem:   "data_platform_plant_general_data.PlantIDByExtSystem",
	IsMarkedForDeletion:  "data_platform_plant_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPlantGeneralDatumWhere = struct {
	BusinessPartner      whereHelperint
	Plant                whereHelperstring
	PlantFullName        whereHelpernull_String
	PlantName            whereHelperstring
	Language             whereHelperstring
	CreationDate         whereHelperstring
	CreationTime         whereHelperstring
	LastChangeDate       whereHelperstring
	LastChangeTime       whereHelperstring
	PlantFoundationDate  whereHelpernull_String
	PlantLiquidationDate whereHelpernull_String
	SearchTerm1          whereHelpernull_String
	SearchTerm2          whereHelpernull_String
	PlantDeathDate       whereHelpernull_String
	PlantIsBlocked       whereHelpernull_Bool
	GroupPlantName1      whereHelpernull_String
	GroupPlantName2      whereHelpernull_String
	AddressID            whereHelpernull_Int
	Country              whereHelpernull_String
	TimeZone             whereHelpernull_String
	PlantIDByExtSystem   whereHelpernull_String
	IsMarkedForDeletion  whereHelpernull_Bool
}{
	BusinessPartner:      whereHelperint{field: "`data_platform_plant_general_data`.`BusinessPartner`"},
	Plant:                whereHelperstring{field: "`data_platform_plant_general_data`.`Plant`"},
	PlantFullName:        whereHelpernull_String{field: "`data_platform_plant_general_data`.`PlantFullName`"},
	PlantName:            whereHelperstring{field: "`data_platform_plant_general_data`.`PlantName`"},
	Language:             whereHelperstring{field: "`data_platform_plant_general_data`.`Language`"},
	CreationDate:         whereHelperstring{field: "`data_platform_plant_general_data`.`CreationDate`"},
	CreationTime:         whereHelperstring{field: "`data_platform_plant_general_data`.`CreationTime`"},
	LastChangeDate:       whereHelperstring{field: "`data_platform_plant_general_data`.`LastChangeDate`"},
	LastChangeTime:       whereHelperstring{field: "`data_platform_plant_general_data`.`LastChangeTime`"},
	PlantFoundationDate:  whereHelpernull_String{field: "`data_platform_plant_general_data`.`PlantFoundationDate`"},
	PlantLiquidationDate: whereHelpernull_String{field: "`data_platform_plant_general_data`.`PlantLiquidationDate`"},
	SearchTerm1:          whereHelpernull_String{field: "`data_platform_plant_general_data`.`SearchTerm1`"},
	SearchTerm2:          whereHelpernull_String{field: "`data_platform_plant_general_data`.`SearchTerm2`"},
	PlantDeathDate:       whereHelpernull_String{field: "`data_platform_plant_general_data`.`PlantDeathDate`"},
	PlantIsBlocked:       whereHelpernull_Bool{field: "`data_platform_plant_general_data`.`PlantIsBlocked`"},
	GroupPlantName1:      whereHelpernull_String{field: "`data_platform_plant_general_data`.`GroupPlantName1`"},
	GroupPlantName2:      whereHelpernull_String{field: "`data_platform_plant_general_data`.`GroupPlantName2`"},
	AddressID:            whereHelpernull_Int{field: "`data_platform_plant_general_data`.`AddressID`"},
	Country:              whereHelpernull_String{field: "`data_platform_plant_general_data`.`Country`"},
	TimeZone:             whereHelpernull_String{field: "`data_platform_plant_general_data`.`TimeZone`"},
	PlantIDByExtSystem:   whereHelpernull_String{field: "`data_platform_plant_general_data`.`PlantIDByExtSystem`"},
	IsMarkedForDeletion:  whereHelpernull_Bool{field: "`data_platform_plant_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPlantGeneralDatumRels is where relationship names are stored.
var DataPlatformPlantGeneralDatumRels = struct {
	InspectionPlantDataPlatformInspectionPlanHeaderData         string
	IssuingPlantDataPlatformPlannedOrderItemData                string
	ProductDeliverToPartyDataPlatformPlannedOrderItemData       string
	ProductionPlantDataPlatformPlannedOrderItemData             string
	BusinessPartnerDataPlatformProductStockProductStockDataOlds string
	BusinessPartnerDataPlatformWorkCenterGeneralData            string
}{
	InspectionPlantDataPlatformInspectionPlanHeaderData:         "InspectionPlantDataPlatformInspectionPlanHeaderData",
	IssuingPlantDataPlatformPlannedOrderItemData:                "IssuingPlantDataPlatformPlannedOrderItemData",
	ProductDeliverToPartyDataPlatformPlannedOrderItemData:       "ProductDeliverToPartyDataPlatformPlannedOrderItemData",
	ProductionPlantDataPlatformPlannedOrderItemData:             "ProductionPlantDataPlatformPlannedOrderItemData",
	BusinessPartnerDataPlatformProductStockProductStockDataOlds: "BusinessPartnerDataPlatformProductStockProductStockDataOlds",
	BusinessPartnerDataPlatformWorkCenterGeneralData:            "BusinessPartnerDataPlatformWorkCenterGeneralData",
}

// dataPlatformPlantGeneralDatumR is where relationships are stored.
type dataPlatformPlantGeneralDatumR struct {
	InspectionPlantDataPlatformInspectionPlanHeaderData         DataPlatformInspectionPlanHeaderDatumSlice       `boil:"InspectionPlantDataPlatformInspectionPlanHeaderData" json:"InspectionPlantDataPlatformInspectionPlanHeaderData" toml:"InspectionPlantDataPlatformInspectionPlanHeaderData" yaml:"InspectionPlantDataPlatformInspectionPlanHeaderData"`
	IssuingPlantDataPlatformPlannedOrderItemData                DataPlatformPlannedOrderItemDatumSlice           `boil:"IssuingPlantDataPlatformPlannedOrderItemData" json:"IssuingPlantDataPlatformPlannedOrderItemData" toml:"IssuingPlantDataPlatformPlannedOrderItemData" yaml:"IssuingPlantDataPlatformPlannedOrderItemData"`
	ProductDeliverToPartyDataPlatformPlannedOrderItemData       DataPlatformPlannedOrderItemDatumSlice           `boil:"ProductDeliverToPartyDataPlatformPlannedOrderItemData" json:"ProductDeliverToPartyDataPlatformPlannedOrderItemData" toml:"ProductDeliverToPartyDataPlatformPlannedOrderItemData" yaml:"ProductDeliverToPartyDataPlatformPlannedOrderItemData"`
	ProductionPlantDataPlatformPlannedOrderItemData             DataPlatformPlannedOrderItemDatumSlice           `boil:"ProductionPlantDataPlatformPlannedOrderItemData" json:"ProductionPlantDataPlatformPlannedOrderItemData" toml:"ProductionPlantDataPlatformPlannedOrderItemData" yaml:"ProductionPlantDataPlatformPlannedOrderItemData"`
	BusinessPartnerDataPlatformProductStockProductStockDataOlds DataPlatformProductStockProductStockDataOldSlice `boil:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" json:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" toml:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" yaml:"BusinessPartnerDataPlatformProductStockProductStockDataOlds"`
	BusinessPartnerDataPlatformWorkCenterGeneralData            DataPlatformWorkCenterGeneralDatumSlice          `boil:"BusinessPartnerDataPlatformWorkCenterGeneralData" json:"BusinessPartnerDataPlatformWorkCenterGeneralData" toml:"BusinessPartnerDataPlatformWorkCenterGeneralData" yaml:"BusinessPartnerDataPlatformWorkCenterGeneralData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPlantGeneralDatumR) NewStruct() *dataPlatformPlantGeneralDatumR {
	return &dataPlatformPlantGeneralDatumR{}
}

func (r *dataPlatformPlantGeneralDatumR) GetInspectionPlantDataPlatformInspectionPlanHeaderData() DataPlatformInspectionPlanHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionPlantDataPlatformInspectionPlanHeaderData
}

func (r *dataPlatformPlantGeneralDatumR) GetIssuingPlantDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.IssuingPlantDataPlatformPlannedOrderItemData
}

func (r *dataPlatformPlantGeneralDatumR) GetProductDeliverToPartyDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDeliverToPartyDataPlatformPlannedOrderItemData
}

func (r *dataPlatformPlantGeneralDatumR) GetProductionPlantDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionPlantDataPlatformPlannedOrderItemData
}

func (r *dataPlatformPlantGeneralDatumR) GetBusinessPartnerDataPlatformProductStockProductStockDataOlds() DataPlatformProductStockProductStockDataOldSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductStockProductStockDataOlds
}

func (r *dataPlatformPlantGeneralDatumR) GetBusinessPartnerDataPlatformWorkCenterGeneralData() DataPlatformWorkCenterGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformWorkCenterGeneralData
}

// dataPlatformPlantGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformPlantGeneralDatumL struct{}

var (
	dataPlatformPlantGeneralDatumAllColumns            = []string{"BusinessPartner", "Plant", "PlantFullName", "PlantName", "Language", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "PlantFoundationDate", "PlantLiquidationDate", "SearchTerm1", "SearchTerm2", "PlantDeathDate", "PlantIsBlocked", "GroupPlantName1", "GroupPlantName2", "AddressID", "Country", "TimeZone", "PlantIDByExtSystem", "IsMarkedForDeletion"}
	dataPlatformPlantGeneralDatumColumnsWithoutDefault = []string{"BusinessPartner", "Plant", "PlantFullName", "PlantName", "Language", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "PlantFoundationDate", "PlantLiquidationDate", "SearchTerm1", "SearchTerm2", "PlantDeathDate", "PlantIsBlocked", "GroupPlantName1", "GroupPlantName2", "AddressID", "Country", "TimeZone", "PlantIDByExtSystem", "IsMarkedForDeletion"}
	dataPlatformPlantGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformPlantGeneralDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Plant"}
	dataPlatformPlantGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPlantGeneralDatumSlice is an alias for a slice of pointers to DataPlatformPlantGeneralDatum.
	// This should almost always be used instead of []DataPlatformPlantGeneralDatum.
	DataPlatformPlantGeneralDatumSlice []*DataPlatformPlantGeneralDatum

	dataPlatformPlantGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPlantGeneralDatumType                 = reflect.TypeOf(&DataPlatformPlantGeneralDatum{})
	dataPlatformPlantGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformPlantGeneralDatumType)
	dataPlatformPlantGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, dataPlatformPlantGeneralDatumPrimaryKeyColumns)
	dataPlatformPlantGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformPlantGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPlantGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPlantGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPlantGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPlantGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPlantGeneralDatum record from the query.
func (q dataPlatformPlantGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPlantGeneralDatum, error) {
	o := &DataPlatformPlantGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_plant_general_data")
	}

	return o, nil
}

// All returns all DataPlatformPlantGeneralDatum records from the query.
func (q dataPlatformPlantGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPlantGeneralDatumSlice, error) {
	var o []*DataPlatformPlantGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPlantGeneralDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPlantGeneralDatum records in the query.
func (q dataPlatformPlantGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_plant_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPlantGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_plant_general_data exists")
	}

	return count > 0, nil
}

// InspectionPlantDataPlatformInspectionPlanHeaderData retrieves all the data_platform_inspection_plan_header_datum's DataPlatformInspectionPlanHeaderData with an executor via InspectionPlant column.
func (o *DataPlatformPlantGeneralDatum) InspectionPlantDataPlatformInspectionPlanHeaderData(mods ...qm.QueryMod) dataPlatformInspectionPlanHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_plan_header_data`.`InspectionPlant`=?", o.Plant),
	)

	return DataPlatformInspectionPlanHeaderData(queryMods...)
}

// IssuingPlantDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via IssuingPlant column.
func (o *DataPlatformPlantGeneralDatum) IssuingPlantDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`IssuingPlant`=?", o.Plant),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// ProductDeliverToPartyDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via ProductDeliverToParty column.
func (o *DataPlatformPlantGeneralDatum) ProductDeliverToPartyDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`ProductDeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// ProductionPlantDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via ProductionPlant column.
func (o *DataPlatformPlantGeneralDatum) ProductionPlantDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`ProductionPlant`=?", o.Plant),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// BusinessPartnerDataPlatformProductStockProductStockDataOlds retrieves all the data_platform_product_stock_product_stock_data_old's DataPlatformProductStockProductStockDataOlds with an executor via BusinessPartner column.
func (o *DataPlatformPlantGeneralDatum) BusinessPartnerDataPlatformProductStockProductStockDataOlds(mods ...qm.QueryMod) dataPlatformProductStockProductStockDataOldQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_data_old`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockDataOlds(queryMods...)
}

// BusinessPartnerDataPlatformWorkCenterGeneralData retrieves all the data_platform_work_center_general_datum's DataPlatformWorkCenterGeneralData with an executor via BusinessPartner column.
func (o *DataPlatformPlantGeneralDatum) BusinessPartnerDataPlatformWorkCenterGeneralData(mods ...qm.QueryMod) dataPlatformWorkCenterGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_work_center_general_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformWorkCenterGeneralData(queryMods...)
}

// LoadInspectionPlantDataPlatformInspectionPlanHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadInspectionPlantDataPlatformInspectionPlanHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Plant {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_header_data`),
		qm.WhereIn(`data_platform_inspection_plan_header_data.InspectionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_plan_header_data")
	}

	var resultSlice []*DataPlatformInspectionPlanHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_plan_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_plan_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_header_data")
	}

	if singular {
		object.R.InspectionPlantDataPlatformInspectionPlanHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Plant == foreign.InspectionPlant {
				local.R.InspectionPlantDataPlatformInspectionPlanHeaderData = append(local.R.InspectionPlantDataPlatformInspectionPlanHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadIssuingPlantDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadIssuingPlantDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Plant) {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.IssuingPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.IssuingPlantDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Plant, foreign.IssuingPlant) {
				local.R.IssuingPlantDataPlatformPlannedOrderItemData = append(local.R.IssuingPlantDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductDeliverToPartyDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadProductDeliverToPartyDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.ProductDeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.ProductDeliverToParty) {
				local.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData = append(local.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionPlantDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadProductionPlantDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.Plant)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Plant) {
					continue Outer
				}
			}

			args = append(args, obj.Plant)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.ProductionPlant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.ProductionPlantDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Plant, foreign.ProductionPlant) {
				local.R.ProductionPlantDataPlatformPlannedOrderItemData = append(local.R.ProductionPlantDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductStockProductStockDataOlds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadBusinessPartnerDataPlatformProductStockProductStockDataOlds(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_data_old`),
		qm.WhereIn(`data_platform_product_stock_product_stock_data_old.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_data_old")
	}

	var resultSlice []*DataPlatformProductStockProductStockDataOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_data_old")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_data_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_data_old")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = append(local.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformWorkCenterGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlantGeneralDatumL) LoadBusinessPartnerDataPlatformWorkCenterGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlantGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlantGeneralDatum
	var object *DataPlatformPlantGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlantGeneralDatum.(*DataPlatformPlantGeneralDatum)
		if !ok {
			object = new(DataPlatformPlantGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlantGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlantGeneralDatum.(*[]*DataPlatformPlantGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlantGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlantGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlantGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlantGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_work_center_general_data`),
		qm.WhereIn(`data_platform_work_center_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_work_center_general_data")
	}

	var resultSlice []*DataPlatformWorkCenterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_work_center_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_work_center_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_work_center_general_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformWorkCenterGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformWorkCenterGeneralData = append(local.R.BusinessPartnerDataPlatformWorkCenterGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// AddInspectionPlantDataPlatformInspectionPlanHeaderData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionPlantDataPlatformInspectionPlanHeaderData.
func (o *DataPlatformPlantGeneralDatum) AddInspectionPlantDataPlatformInspectionPlanHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionPlanHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionPlant = o.Plant
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_plan_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.InspectionPlantBusinessPartner, rel.InspectionPlant, rel.InspectionPlan, rel.InspectionPlanGroup, rel.InspectionPlanInternalVersion}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionPlant = o.Plant
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			InspectionPlantDataPlatformInspectionPlanHeaderData: related,
		}
	} else {
		o.R.InspectionPlantDataPlatformInspectionPlanHeaderData = append(o.R.InspectionPlantDataPlatformInspectionPlanHeaderData, related...)
	}

	return nil
}

// AddIssuingPlantDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.IssuingPlantDataPlatformPlannedOrderItemData.
func (o *DataPlatformPlantGeneralDatum) AddIssuingPlantDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IssuingPlant, o.Plant)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"IssuingPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IssuingPlant, o.Plant)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			IssuingPlantDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.IssuingPlantDataPlatformPlannedOrderItemData = append(o.R.IssuingPlantDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// SetIssuingPlantDataPlatformPlannedOrderItemData removes all previously related items of the
// data_platform_plant_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IssuingPlantDataPlatformPlantGeneralDatum's IssuingPlantDataPlatformPlannedOrderItemData accordingly.
// Replaces o.R.IssuingPlantDataPlatformPlannedOrderItemData with related.
func (o *DataPlatformPlantGeneralDatum) SetIssuingPlantDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	query := "update `data_platform_planned_order_item_data` set `IssuingPlant` = null where `IssuingPlant` = ?"
	values := []interface{}{o.Plant}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.IssuingPlantDataPlatformPlannedOrderItemData = nil
	}

	return o.AddIssuingPlantDataPlatformPlannedOrderItemData(ctx, exec, insert, related...)
}

// RemoveIssuingPlantDataPlatformPlannedOrderItemData relationships from objects passed in.
// Removes related items from R.IssuingPlantDataPlatformPlannedOrderItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantGeneralDatum) RemoveIssuingPlantDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IssuingPlant, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("IssuingPlant")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IssuingPlantDataPlatformPlannedOrderItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.IssuingPlantDataPlatformPlannedOrderItemData)
			if ln > 1 && i < ln-1 {
				o.R.IssuingPlantDataPlatformPlannedOrderItemData[i] = o.R.IssuingPlantDataPlatformPlannedOrderItemData[ln-1]
			}
			o.R.IssuingPlantDataPlatformPlannedOrderItemData = o.R.IssuingPlantDataPlatformPlannedOrderItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductDeliverToPartyDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData.
func (o *DataPlatformPlantGeneralDatum) AddProductDeliverToPartyDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductDeliverToParty, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductDeliverToParty, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			ProductDeliverToPartyDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData = append(o.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// SetProductDeliverToPartyDataPlatformPlannedOrderItemData removes all previously related items of the
// data_platform_plant_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductDeliverToPartyDataPlatformPlantGeneralDatum's ProductDeliverToPartyDataPlatformPlannedOrderItemData accordingly.
// Replaces o.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData with related.
func (o *DataPlatformPlantGeneralDatum) SetProductDeliverToPartyDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	query := "update `data_platform_planned_order_item_data` set `ProductDeliverToParty` = null where `ProductDeliverToParty` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData = nil
	}

	return o.AddProductDeliverToPartyDataPlatformPlannedOrderItemData(ctx, exec, insert, related...)
}

// RemoveProductDeliverToPartyDataPlatformPlannedOrderItemData relationships from objects passed in.
// Removes related items from R.ProductDeliverToPartyDataPlatformPlannedOrderItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantGeneralDatum) RemoveProductDeliverToPartyDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductDeliverToParty, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductDeliverToParty")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData[i] = o.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData[ln-1]
			}
			o.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData = o.R.ProductDeliverToPartyDataPlatformPlannedOrderItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductionPlantDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionPlantDataPlatformPlannedOrderItemData.
func (o *DataPlatformPlantGeneralDatum) AddProductionPlantDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductionPlant, o.Plant)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionPlant"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Plant, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductionPlant, o.Plant)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			ProductionPlantDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.ProductionPlantDataPlatformPlannedOrderItemData = append(o.R.ProductionPlantDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// SetProductionPlantDataPlatformPlannedOrderItemData removes all previously related items of the
// data_platform_plant_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductionPlantDataPlatformPlantGeneralDatum's ProductionPlantDataPlatformPlannedOrderItemData accordingly.
// Replaces o.R.ProductionPlantDataPlatformPlannedOrderItemData with related.
func (o *DataPlatformPlantGeneralDatum) SetProductionPlantDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	query := "update `data_platform_planned_order_item_data` set `ProductionPlant` = null where `ProductionPlant` = ?"
	values := []interface{}{o.Plant}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductionPlantDataPlatformPlannedOrderItemData = nil
	}

	return o.AddProductionPlantDataPlatformPlannedOrderItemData(ctx, exec, insert, related...)
}

// RemoveProductionPlantDataPlatformPlannedOrderItemData relationships from objects passed in.
// Removes related items from R.ProductionPlantDataPlatformPlannedOrderItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlantGeneralDatum) RemoveProductionPlantDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductionPlant, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductionPlant")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductionPlantDataPlatformPlannedOrderItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductionPlantDataPlatformPlannedOrderItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductionPlantDataPlatformPlannedOrderItemData[i] = o.R.ProductionPlantDataPlatformPlannedOrderItemData[ln-1]
			}
			o.R.ProductionPlantDataPlatformPlannedOrderItemData = o.R.ProductionPlantDataPlatformPlannedOrderItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductStockProductStockDataOlds adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds.
func (o *DataPlatformPlantGeneralDatum) AddBusinessPartnerDataPlatformProductStockProductStockDataOlds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDataOld) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_data_old` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockDataOldPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Product, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformProductStockProductStockDataOlds: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = append(o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformWorkCenterGeneralData adds the given related objects to the existing relationships
// of the data_platform_plant_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformWorkCenterGeneralData.
func (o *DataPlatformPlantGeneralDatum) AddBusinessPartnerDataPlatformWorkCenterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformWorkCenterGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_work_center_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.WorkCenter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlantGeneralDatumR{
			BusinessPartnerDataPlatformWorkCenterGeneralData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformWorkCenterGeneralData = append(o.R.BusinessPartnerDataPlatformWorkCenterGeneralData, related...)
	}

	return nil
}

// DataPlatformPlantGeneralData retrieves all the records using an executor.
func DataPlatformPlantGeneralData(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_plant_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_plant_general_data`.*"})
	}

	return dataPlatformPlantGeneralDatumQuery{q}
}

// FindDataPlatformPlantGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, plant string, selectCols ...string) (*DataPlatformPlantGeneralDatum, error) {
	dataPlatformPlantGeneralDatumObj := &DataPlatformPlantGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_plant_general_data` where `BusinessPartner`=? AND `Plant`=?", sel,
	)

	q := queries.Raw(query, businessPartner, plant)

	err := q.Bind(ctx, exec, dataPlatformPlantGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_plant_general_data")
	}

	return dataPlatformPlantGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPlantGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_plant_general_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlantGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPlantGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPlantGeneralDatumInsertCache[key]
	dataPlatformPlantGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPlantGeneralDatumAllColumns,
			dataPlatformPlantGeneralDatumColumnsWithDefault,
			dataPlatformPlantGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_plant_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_plant_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_plant_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_plant_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Plant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_plant_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlantGeneralDatumInsertCacheMut.Lock()
		dataPlatformPlantGeneralDatumInsertCache[key] = cache
		dataPlatformPlantGeneralDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPlantGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPlantGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPlantGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPlantGeneralDatumUpdateCache[key]
	dataPlatformPlantGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPlantGeneralDatumAllColumns,
			dataPlatformPlantGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_plant_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, append(wl, dataPlatformPlantGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_plant_general_data row")
	}

	if !cached {
		dataPlatformPlantGeneralDatumUpdateCacheMut.Lock()
		dataPlatformPlantGeneralDatumUpdateCache[key] = cache
		dataPlatformPlantGeneralDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPlantGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_plant_general_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPlantGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPlantGeneralDatum slice")
	}

	return nil
}

var mySQLDataPlatformPlantGeneralDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPlantGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_plant_general_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlantGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPlantGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPlantGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPlantGeneralDatumUpsertCache[key]
	dataPlatformPlantGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPlantGeneralDatumAllColumns,
			dataPlatformPlantGeneralDatumColumnsWithDefault,
			dataPlatformPlantGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPlantGeneralDatumAllColumns,
			dataPlatformPlantGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_plant_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_plant_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_plant_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_plant_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPlantGeneralDatumType, dataPlatformPlantGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_plant_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_plant_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlantGeneralDatumUpsertCacheMut.Lock()
		dataPlatformPlantGeneralDatumUpsertCache[key] = cache
		dataPlatformPlantGeneralDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPlantGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPlantGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPlantGeneralDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPlantGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_plant_general_data` WHERE `BusinessPartner`=? AND `Plant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_plant_general_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPlantGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPlantGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_plant_general_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPlantGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_plant_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPlantGeneralDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPlantGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPlantGeneralDatum(ctx, exec, o.BusinessPartner, o.Plant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPlantGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPlantGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlantGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_plant_general_data`.* FROM `data_platform_plant_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPlantGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPlantGeneralDatumExists checks if the DataPlatformPlantGeneralDatum row exists.
func DataPlatformPlantGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, plant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_plant_general_data` where `BusinessPartner`=? AND `Plant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, plant)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, plant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_plant_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPlantGeneralDatum row exists.
func (o *DataPlatformPlantGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPlantGeneralDatumExists(ctx, exec, o.BusinessPartner, o.Plant)
}
