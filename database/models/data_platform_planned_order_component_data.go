// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPlannedOrderComponentDatum is an object representing the database table.
type DataPlatformPlannedOrderComponentDatum struct {
	PlannedOrder                     int          `boil:"PlannedOrder" json:"PlannedOrder" toml:"PlannedOrder" yaml:"PlannedOrder"`
	PlannedOrderItem                 int          `boil:"PlannedOrderItem" json:"PlannedOrderItem" toml:"PlannedOrderItem" yaml:"PlannedOrderItem"`
	BillOfMaterial                   null.Int     `boil:"BillOfMaterial" json:"BillOfMaterial,omitempty" toml:"BillOfMaterial" yaml:"BillOfMaterial,omitempty"`
	BOMItem                          null.Int     `boil:"BOMItem" json:"BOMItem,omitempty" toml:"BOMItem" yaml:"BOMItem,omitempty"`
	Operations                       null.Int     `boil:"Operations" json:"Operations,omitempty" toml:"Operations" yaml:"Operations,omitempty"`
	OperationsItem                   null.Int     `boil:"OperationsItem" json:"OperationsItem,omitempty" toml:"OperationsItem" yaml:"OperationsItem,omitempty"`
	Reservation                      null.Int     `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	ReservationItem                  null.Int     `boil:"ReservationItem" json:"ReservationItem,omitempty" toml:"ReservationItem" yaml:"ReservationItem,omitempty"`
	ComponentProduct                 null.String  `boil:"ComponentProduct" json:"ComponentProduct,omitempty" toml:"ComponentProduct" yaml:"ComponentProduct,omitempty"`
	ComponentProductDeliverFromParty null.Int     `boil:"ComponentProductDeliverFromParty" json:"ComponentProductDeliverFromParty,omitempty" toml:"ComponentProductDeliverFromParty" yaml:"ComponentProductDeliverFromParty,omitempty"`
	ComponentProductDeliverToParty   null.Int     `boil:"ComponentProductDeliverToParty" json:"ComponentProductDeliverToParty,omitempty" toml:"ComponentProductDeliverToParty" yaml:"ComponentProductDeliverToParty,omitempty"`
	ComponentProductBuyer            null.Int     `boil:"ComponentProductBuyer" json:"ComponentProductBuyer,omitempty" toml:"ComponentProductBuyer" yaml:"ComponentProductBuyer,omitempty"`
	ComponentProductSeller           null.Int     `boil:"ComponentProductSeller" json:"ComponentProductSeller,omitempty" toml:"ComponentProductSeller" yaml:"ComponentProductSeller,omitempty"`
	ComponentProductRequirementDate  null.String  `boil:"ComponentProductRequirementDate" json:"ComponentProductRequirementDate,omitempty" toml:"ComponentProductRequirementDate" yaml:"ComponentProductRequirementDate,omitempty"`
	ComponentProductRequirementTime  null.String  `boil:"ComponentProductRequirementTime" json:"ComponentProductRequirementTime,omitempty" toml:"ComponentProductRequirementTime" yaml:"ComponentProductRequirementTime,omitempty"`
	ComponentProductRequiredQuantity null.Float32 `boil:"ComponentProductRequiredQuantity" json:"ComponentProductRequiredQuantity,omitempty" toml:"ComponentProductRequiredQuantity" yaml:"ComponentProductRequiredQuantity,omitempty"`
	ComponentProductBusinessPartner  null.Int     `boil:"ComponentProductBusinessPartner" json:"ComponentProductBusinessPartner,omitempty" toml:"ComponentProductBusinessPartner" yaml:"ComponentProductBusinessPartner,omitempty"`
	BaseUnit                         null.String  `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	MRPArea                          null.String  `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	MRPController                    null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	StockConfirmationPartnerFunction null.String  `boil:"StockConfirmationPartnerFunction" json:"StockConfirmationPartnerFunction,omitempty" toml:"StockConfirmationPartnerFunction" yaml:"StockConfirmationPartnerFunction,omitempty"`
	StockConfirmationBusinessPartner null.Int     `boil:"StockConfirmationBusinessPartner" json:"StockConfirmationBusinessPartner,omitempty" toml:"StockConfirmationBusinessPartner" yaml:"StockConfirmationBusinessPartner,omitempty"`
	StockConfirmationPlant           null.String  `boil:"StockConfirmationPlant" json:"StockConfirmationPlant,omitempty" toml:"StockConfirmationPlant" yaml:"StockConfirmationPlant,omitempty"`
	StockConfirmationPlantBatch      null.String  `boil:"StockConfirmationPlantBatch" json:"StockConfirmationPlantBatch,omitempty" toml:"StockConfirmationPlantBatch" yaml:"StockConfirmationPlantBatch,omitempty"`
	StorageLocationForMRP            null.String  `boil:"StorageLocationForMRP" json:"StorageLocationForMRP,omitempty" toml:"StorageLocationForMRP" yaml:"StorageLocationForMRP,omitempty"`
	ComponentWithdrawnQuantity       null.Float32 `boil:"ComponentWithdrawnQuantity" json:"ComponentWithdrawnQuantity,omitempty" toml:"ComponentWithdrawnQuantity" yaml:"ComponentWithdrawnQuantity,omitempty"`
	ComponentScrapInPercent          null.Float32 `boil:"ComponentScrapInPercent" json:"ComponentScrapInPercent,omitempty" toml:"ComponentScrapInPercent" yaml:"ComponentScrapInPercent,omitempty"`
	OperationScrapInPercent          null.Float32 `boil:"OperationScrapInPercent" json:"OperationScrapInPercent,omitempty" toml:"OperationScrapInPercent" yaml:"OperationScrapInPercent,omitempty"`
	QuantityIsFixed                  null.Bool    `boil:"QuantityIsFixed" json:"QuantityIsFixed,omitempty" toml:"QuantityIsFixed" yaml:"QuantityIsFixed,omitempty"`
	LastChangeDateTime               null.String  `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	IsMarkedForDeletion              null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPlannedOrderComponentDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPlannedOrderComponentDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPlannedOrderComponentDatumColumns = struct {
	PlannedOrder                     string
	PlannedOrderItem                 string
	BillOfMaterial                   string
	BOMItem                          string
	Operations                       string
	OperationsItem                   string
	Reservation                      string
	ReservationItem                  string
	ComponentProduct                 string
	ComponentProductDeliverFromParty string
	ComponentProductDeliverToParty   string
	ComponentProductBuyer            string
	ComponentProductSeller           string
	ComponentProductRequirementDate  string
	ComponentProductRequirementTime  string
	ComponentProductRequiredQuantity string
	ComponentProductBusinessPartner  string
	BaseUnit                         string
	MRPArea                          string
	MRPController                    string
	StockConfirmationPartnerFunction string
	StockConfirmationBusinessPartner string
	StockConfirmationPlant           string
	StockConfirmationPlantBatch      string
	StorageLocationForMRP            string
	ComponentWithdrawnQuantity       string
	ComponentScrapInPercent          string
	OperationScrapInPercent          string
	QuantityIsFixed                  string
	LastChangeDateTime               string
	IsMarkedForDeletion              string
}{
	PlannedOrder:                     "PlannedOrder",
	PlannedOrderItem:                 "PlannedOrderItem",
	BillOfMaterial:                   "BillOfMaterial",
	BOMItem:                          "BOMItem",
	Operations:                       "Operations",
	OperationsItem:                   "OperationsItem",
	Reservation:                      "Reservation",
	ReservationItem:                  "ReservationItem",
	ComponentProduct:                 "ComponentProduct",
	ComponentProductDeliverFromParty: "ComponentProductDeliverFromParty",
	ComponentProductDeliverToParty:   "ComponentProductDeliverToParty",
	ComponentProductBuyer:            "ComponentProductBuyer",
	ComponentProductSeller:           "ComponentProductSeller",
	ComponentProductRequirementDate:  "ComponentProductRequirementDate",
	ComponentProductRequirementTime:  "ComponentProductRequirementTime",
	ComponentProductRequiredQuantity: "ComponentProductRequiredQuantity",
	ComponentProductBusinessPartner:  "ComponentProductBusinessPartner",
	BaseUnit:                         "BaseUnit",
	MRPArea:                          "MRPArea",
	MRPController:                    "MRPController",
	StockConfirmationPartnerFunction: "StockConfirmationPartnerFunction",
	StockConfirmationBusinessPartner: "StockConfirmationBusinessPartner",
	StockConfirmationPlant:           "StockConfirmationPlant",
	StockConfirmationPlantBatch:      "StockConfirmationPlantBatch",
	StorageLocationForMRP:            "StorageLocationForMRP",
	ComponentWithdrawnQuantity:       "ComponentWithdrawnQuantity",
	ComponentScrapInPercent:          "ComponentScrapInPercent",
	OperationScrapInPercent:          "OperationScrapInPercent",
	QuantityIsFixed:                  "QuantityIsFixed",
	LastChangeDateTime:               "LastChangeDateTime",
	IsMarkedForDeletion:              "IsMarkedForDeletion",
}

var DataPlatformPlannedOrderComponentDatumTableColumns = struct {
	PlannedOrder                     string
	PlannedOrderItem                 string
	BillOfMaterial                   string
	BOMItem                          string
	Operations                       string
	OperationsItem                   string
	Reservation                      string
	ReservationItem                  string
	ComponentProduct                 string
	ComponentProductDeliverFromParty string
	ComponentProductDeliverToParty   string
	ComponentProductBuyer            string
	ComponentProductSeller           string
	ComponentProductRequirementDate  string
	ComponentProductRequirementTime  string
	ComponentProductRequiredQuantity string
	ComponentProductBusinessPartner  string
	BaseUnit                         string
	MRPArea                          string
	MRPController                    string
	StockConfirmationPartnerFunction string
	StockConfirmationBusinessPartner string
	StockConfirmationPlant           string
	StockConfirmationPlantBatch      string
	StorageLocationForMRP            string
	ComponentWithdrawnQuantity       string
	ComponentScrapInPercent          string
	OperationScrapInPercent          string
	QuantityIsFixed                  string
	LastChangeDateTime               string
	IsMarkedForDeletion              string
}{
	PlannedOrder:                     "data_platform_planned_order_component_data.PlannedOrder",
	PlannedOrderItem:                 "data_platform_planned_order_component_data.PlannedOrderItem",
	BillOfMaterial:                   "data_platform_planned_order_component_data.BillOfMaterial",
	BOMItem:                          "data_platform_planned_order_component_data.BOMItem",
	Operations:                       "data_platform_planned_order_component_data.Operations",
	OperationsItem:                   "data_platform_planned_order_component_data.OperationsItem",
	Reservation:                      "data_platform_planned_order_component_data.Reservation",
	ReservationItem:                  "data_platform_planned_order_component_data.ReservationItem",
	ComponentProduct:                 "data_platform_planned_order_component_data.ComponentProduct",
	ComponentProductDeliverFromParty: "data_platform_planned_order_component_data.ComponentProductDeliverFromParty",
	ComponentProductDeliverToParty:   "data_platform_planned_order_component_data.ComponentProductDeliverToParty",
	ComponentProductBuyer:            "data_platform_planned_order_component_data.ComponentProductBuyer",
	ComponentProductSeller:           "data_platform_planned_order_component_data.ComponentProductSeller",
	ComponentProductRequirementDate:  "data_platform_planned_order_component_data.ComponentProductRequirementDate",
	ComponentProductRequirementTime:  "data_platform_planned_order_component_data.ComponentProductRequirementTime",
	ComponentProductRequiredQuantity: "data_platform_planned_order_component_data.ComponentProductRequiredQuantity",
	ComponentProductBusinessPartner:  "data_platform_planned_order_component_data.ComponentProductBusinessPartner",
	BaseUnit:                         "data_platform_planned_order_component_data.BaseUnit",
	MRPArea:                          "data_platform_planned_order_component_data.MRPArea",
	MRPController:                    "data_platform_planned_order_component_data.MRPController",
	StockConfirmationPartnerFunction: "data_platform_planned_order_component_data.StockConfirmationPartnerFunction",
	StockConfirmationBusinessPartner: "data_platform_planned_order_component_data.StockConfirmationBusinessPartner",
	StockConfirmationPlant:           "data_platform_planned_order_component_data.StockConfirmationPlant",
	StockConfirmationPlantBatch:      "data_platform_planned_order_component_data.StockConfirmationPlantBatch",
	StorageLocationForMRP:            "data_platform_planned_order_component_data.StorageLocationForMRP",
	ComponentWithdrawnQuantity:       "data_platform_planned_order_component_data.ComponentWithdrawnQuantity",
	ComponentScrapInPercent:          "data_platform_planned_order_component_data.ComponentScrapInPercent",
	OperationScrapInPercent:          "data_platform_planned_order_component_data.OperationScrapInPercent",
	QuantityIsFixed:                  "data_platform_planned_order_component_data.QuantityIsFixed",
	LastChangeDateTime:               "data_platform_planned_order_component_data.LastChangeDateTime",
	IsMarkedForDeletion:              "data_platform_planned_order_component_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPlannedOrderComponentDatumWhere = struct {
	PlannedOrder                     whereHelperint
	PlannedOrderItem                 whereHelperint
	BillOfMaterial                   whereHelpernull_Int
	BOMItem                          whereHelpernull_Int
	Operations                       whereHelpernull_Int
	OperationsItem                   whereHelpernull_Int
	Reservation                      whereHelpernull_Int
	ReservationItem                  whereHelpernull_Int
	ComponentProduct                 whereHelpernull_String
	ComponentProductDeliverFromParty whereHelpernull_Int
	ComponentProductDeliverToParty   whereHelpernull_Int
	ComponentProductBuyer            whereHelpernull_Int
	ComponentProductSeller           whereHelpernull_Int
	ComponentProductRequirementDate  whereHelpernull_String
	ComponentProductRequirementTime  whereHelpernull_String
	ComponentProductRequiredQuantity whereHelpernull_Float32
	ComponentProductBusinessPartner  whereHelpernull_Int
	BaseUnit                         whereHelpernull_String
	MRPArea                          whereHelpernull_String
	MRPController                    whereHelpernull_String
	StockConfirmationPartnerFunction whereHelpernull_String
	StockConfirmationBusinessPartner whereHelpernull_Int
	StockConfirmationPlant           whereHelpernull_String
	StockConfirmationPlantBatch      whereHelpernull_String
	StorageLocationForMRP            whereHelpernull_String
	ComponentWithdrawnQuantity       whereHelpernull_Float32
	ComponentScrapInPercent          whereHelpernull_Float32
	OperationScrapInPercent          whereHelpernull_Float32
	QuantityIsFixed                  whereHelpernull_Bool
	LastChangeDateTime               whereHelpernull_String
	IsMarkedForDeletion              whereHelpernull_Bool
}{
	PlannedOrder:                     whereHelperint{field: "`data_platform_planned_order_component_data`.`PlannedOrder`"},
	PlannedOrderItem:                 whereHelperint{field: "`data_platform_planned_order_component_data`.`PlannedOrderItem`"},
	BillOfMaterial:                   whereHelpernull_Int{field: "`data_platform_planned_order_component_data`.`BillOfMaterial`"},
	BOMItem:                          whereHelpernull_Int{field: "`data_platform_planned_order_component_data`.`BOMItem`"},
	Operations:                       whereHelpernull_Int{field: "`data_platform_planned_order_component_data`.`Operations`"},
	OperationsItem:                   whereHelpernull_Int{field: "`data_platform_planned_order_component_data`.`OperationsItem`"},
	Reservation:                      whereHelpernull_Int{field: "`data_platform_planned_order_component_data`.`Reservation`"},
	ReservationItem:                  whereHelpernull_Int{field: "`data_platform_planned_order_component_data`.`ReservationItem`"},
	ComponentProduct:                 whereHelpernull_String{field: "`data_platform_planned_order_component_data`.`ComponentProduct`"},
	ComponentProductDeliverFromParty: whereHelpernull_Int{field: "`data_platform_planned_order_component_data`.`ComponentProductDeliverFromParty`"},
	ComponentProductDeliverToParty:   whereHelpernull_Int{field: "`data_platform_planned_order_component_data`.`ComponentProductDeliverToParty`"},
	ComponentProductBuyer:            whereHelpernull_Int{field: "`data_platform_planned_order_component_data`.`ComponentProductBuyer`"},
	ComponentProductSeller:           whereHelpernull_Int{field: "`data_platform_planned_order_component_data`.`ComponentProductSeller`"},
	ComponentProductRequirementDate:  whereHelpernull_String{field: "`data_platform_planned_order_component_data`.`ComponentProductRequirementDate`"},
	ComponentProductRequirementTime:  whereHelpernull_String{field: "`data_platform_planned_order_component_data`.`ComponentProductRequirementTime`"},
	ComponentProductRequiredQuantity: whereHelpernull_Float32{field: "`data_platform_planned_order_component_data`.`ComponentProductRequiredQuantity`"},
	ComponentProductBusinessPartner:  whereHelpernull_Int{field: "`data_platform_planned_order_component_data`.`ComponentProductBusinessPartner`"},
	BaseUnit:                         whereHelpernull_String{field: "`data_platform_planned_order_component_data`.`BaseUnit`"},
	MRPArea:                          whereHelpernull_String{field: "`data_platform_planned_order_component_data`.`MRPArea`"},
	MRPController:                    whereHelpernull_String{field: "`data_platform_planned_order_component_data`.`MRPController`"},
	StockConfirmationPartnerFunction: whereHelpernull_String{field: "`data_platform_planned_order_component_data`.`StockConfirmationPartnerFunction`"},
	StockConfirmationBusinessPartner: whereHelpernull_Int{field: "`data_platform_planned_order_component_data`.`StockConfirmationBusinessPartner`"},
	StockConfirmationPlant:           whereHelpernull_String{field: "`data_platform_planned_order_component_data`.`StockConfirmationPlant`"},
	StockConfirmationPlantBatch:      whereHelpernull_String{field: "`data_platform_planned_order_component_data`.`StockConfirmationPlantBatch`"},
	StorageLocationForMRP:            whereHelpernull_String{field: "`data_platform_planned_order_component_data`.`StorageLocationForMRP`"},
	ComponentWithdrawnQuantity:       whereHelpernull_Float32{field: "`data_platform_planned_order_component_data`.`ComponentWithdrawnQuantity`"},
	ComponentScrapInPercent:          whereHelpernull_Float32{field: "`data_platform_planned_order_component_data`.`ComponentScrapInPercent`"},
	OperationScrapInPercent:          whereHelpernull_Float32{field: "`data_platform_planned_order_component_data`.`OperationScrapInPercent`"},
	QuantityIsFixed:                  whereHelpernull_Bool{field: "`data_platform_planned_order_component_data`.`QuantityIsFixed`"},
	LastChangeDateTime:               whereHelpernull_String{field: "`data_platform_planned_order_component_data`.`LastChangeDateTime`"},
	IsMarkedForDeletion:              whereHelpernull_Bool{field: "`data_platform_planned_order_component_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPlannedOrderComponentDatumRels is where relationship names are stored.
var DataPlatformPlannedOrderComponentDatumRels = struct {
	PlannedOrderDataPlatformPlannedOrderItemDatum                          string
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum                      string
	StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum  string
	ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum string
}{
	PlannedOrderDataPlatformPlannedOrderItemDatum:                          "PlannedOrderDataPlatformPlannedOrderItemDatum",
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum:                      "BaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum:  "StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum",
	ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: "ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
}

// dataPlatformPlannedOrderComponentDatumR is where relationships are stored.
type dataPlatformPlannedOrderComponentDatumR struct {
	PlannedOrderDataPlatformPlannedOrderItemDatum                          *DataPlatformPlannedOrderItemDatum         `boil:"PlannedOrderDataPlatformPlannedOrderItemDatum" json:"PlannedOrderDataPlatformPlannedOrderItemDatum" toml:"PlannedOrderDataPlatformPlannedOrderItemDatum" yaml:"PlannedOrderDataPlatformPlannedOrderItemDatum"`
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum                      *DataPlatformQuantityUnitQuantityUnitDatum `boil:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum  *DataPlatformPlantStorageLocationDatum     `boil:"StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum" json:"StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum" toml:"StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum" yaml:"StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum"`
	ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum   `boil:"ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPlannedOrderComponentDatumR) NewStruct() *dataPlatformPlannedOrderComponentDatumR {
	return &dataPlatformPlannedOrderComponentDatumR{}
}

func (r *dataPlatformPlannedOrderComponentDatumR) GetPlannedOrderDataPlatformPlannedOrderItemDatum() *DataPlatformPlannedOrderItemDatum {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderItemDatum
}

func (r *dataPlatformPlannedOrderComponentDatumR) GetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderComponentDatumR) GetStockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformPlannedOrderComponentDatumR) GetComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

// dataPlatformPlannedOrderComponentDatumL is where Load methods for each relationship are stored.
type dataPlatformPlannedOrderComponentDatumL struct{}

var (
	dataPlatformPlannedOrderComponentDatumAllColumns            = []string{"PlannedOrder", "PlannedOrderItem", "BillOfMaterial", "BOMItem", "Operations", "OperationsItem", "Reservation", "ReservationItem", "ComponentProduct", "ComponentProductDeliverFromParty", "ComponentProductDeliverToParty", "ComponentProductBuyer", "ComponentProductSeller", "ComponentProductRequirementDate", "ComponentProductRequirementTime", "ComponentProductRequiredQuantity", "ComponentProductBusinessPartner", "BaseUnit", "MRPArea", "MRPController", "StockConfirmationPartnerFunction", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "StockConfirmationPlantBatch", "StorageLocationForMRP", "ComponentWithdrawnQuantity", "ComponentScrapInPercent", "OperationScrapInPercent", "QuantityIsFixed", "LastChangeDateTime", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderComponentDatumColumnsWithoutDefault = []string{"PlannedOrder", "PlannedOrderItem", "BillOfMaterial", "BOMItem", "Operations", "OperationsItem", "Reservation", "ReservationItem", "ComponentProduct", "ComponentProductDeliverFromParty", "ComponentProductDeliverToParty", "ComponentProductBuyer", "ComponentProductSeller", "ComponentProductRequirementDate", "ComponentProductRequirementTime", "ComponentProductRequiredQuantity", "ComponentProductBusinessPartner", "BaseUnit", "MRPArea", "MRPController", "StockConfirmationPartnerFunction", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "StockConfirmationPlantBatch", "StorageLocationForMRP", "ComponentWithdrawnQuantity", "ComponentScrapInPercent", "OperationScrapInPercent", "QuantityIsFixed", "LastChangeDateTime", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderComponentDatumColumnsWithDefault    = []string{}
	dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns     = []string{"PlannedOrder", "PlannedOrderItem"}
	dataPlatformPlannedOrderComponentDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPlannedOrderComponentDatumSlice is an alias for a slice of pointers to DataPlatformPlannedOrderComponentDatum.
	// This should almost always be used instead of []DataPlatformPlannedOrderComponentDatum.
	DataPlatformPlannedOrderComponentDatumSlice []*DataPlatformPlannedOrderComponentDatum

	dataPlatformPlannedOrderComponentDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPlannedOrderComponentDatumType                 = reflect.TypeOf(&DataPlatformPlannedOrderComponentDatum{})
	dataPlatformPlannedOrderComponentDatumMapping              = queries.MakeStructMapping(dataPlatformPlannedOrderComponentDatumType)
	dataPlatformPlannedOrderComponentDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPlannedOrderComponentDatumType, dataPlatformPlannedOrderComponentDatumMapping, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns)
	dataPlatformPlannedOrderComponentDatumInsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderComponentDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPlannedOrderComponentDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPlannedOrderComponentDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPlannedOrderComponentDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderComponentDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPlannedOrderComponentDatum record from the query.
func (q dataPlatformPlannedOrderComponentDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPlannedOrderComponentDatum, error) {
	o := &DataPlatformPlannedOrderComponentDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_planned_order_component_data")
	}

	return o, nil
}

// All returns all DataPlatformPlannedOrderComponentDatum records from the query.
func (q dataPlatformPlannedOrderComponentDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPlannedOrderComponentDatumSlice, error) {
	var o []*DataPlatformPlannedOrderComponentDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPlannedOrderComponentDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPlannedOrderComponentDatum records in the query.
func (q dataPlatformPlannedOrderComponentDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_planned_order_component_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPlannedOrderComponentDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_planned_order_component_data exists")
	}

	return count > 0, nil
}

// PlannedOrderDataPlatformPlannedOrderItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderComponentDatum) PlannedOrderDataPlatformPlannedOrderItemDatum(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PlannedOrder` = ?", o.PlannedOrder),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// BaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderComponentDatum) BaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.BaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderComponentDatum) StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.StockConfirmationBusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderComponentDatum) ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.ComponentProductBusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// LoadPlannedOrderDataPlatformPlannedOrderItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderComponentDatumL) LoadPlannedOrderDataPlatformPlannedOrderItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderComponentDatum
	var object *DataPlatformPlannedOrderComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderComponentDatum.(*DataPlatformPlannedOrderComponentDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderComponentDatum.(*[]*DataPlatformPlannedOrderComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderComponentDatumR{}
		}
		args = append(args, object.PlannedOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderComponentDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlannedOrderItemDatum")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlannedOrderItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderDataPlatformPlannedOrderItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderComponentDatumL) LoadBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderComponentDatum
	var object *DataPlatformPlannedOrderComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderComponentDatum.(*DataPlatformPlannedOrderComponentDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderComponentDatum.(*[]*DataPlatformPlannedOrderComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderComponentDatumR{}
		}
		if !queries.IsNil(object.BaseUnit) {
			args = append(args, object.BaseUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderComponentDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BaseUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BaseUnit) {
				args = append(args, obj.BaseUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BaseUnit, foreign.QuantityUnit) {
				local.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadStockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderComponentDatumL) LoadStockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderComponentDatum
	var object *DataPlatformPlannedOrderComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderComponentDatum.(*DataPlatformPlannedOrderComponentDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderComponentDatum.(*[]*DataPlatformPlannedOrderComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderComponentDatumR{}
		}
		if !queries.IsNil(object.StockConfirmationBusinessPartner) {
			args = append(args, object.StockConfirmationBusinessPartner)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderComponentDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StockConfirmationBusinessPartner) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.StockConfirmationBusinessPartner) {
				args = append(args, obj.StockConfirmationBusinessPartner)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StockConfirmationBusinessPartner, foreign.BusinessPartner) {
				local.R.StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderComponentDatumL) LoadComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderComponentDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderComponentDatum
	var object *DataPlatformPlannedOrderComponentDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderComponentDatum.(*DataPlatformPlannedOrderComponentDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderComponentDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderComponentDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderComponentDatum.(*[]*DataPlatformPlannedOrderComponentDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderComponentDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderComponentDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderComponentDatumR{}
		}
		if !queries.IsNil(object.ComponentProductBusinessPartner) {
			args = append(args, object.ComponentProductBusinessPartner)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderComponentDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ComponentProductBusinessPartner) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ComponentProductBusinessPartner) {
				args = append(args, obj.ComponentProductBusinessPartner)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ComponentProductBusinessPartner, foreign.BusinessPartner) {
				local.R.ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetPlannedOrderDataPlatformPlannedOrderItemDatum of the dataPlatformPlannedOrderComponentDatum to the related item.
// Sets o.R.PlannedOrderDataPlatformPlannedOrderItemDatum to related.
func (o *DataPlatformPlannedOrderComponentDatum) SetPlannedOrderDataPlatformPlannedOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlannedOrderItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PlannedOrder, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlannedOrder = related.PlannedOrder
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderComponentDatumR{
			PlannedOrderDataPlatformPlannedOrderItemDatum: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderItemDatum = related
	}

	return nil
}

// SetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderComponentDatum to the related item.
// Sets o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderComponentDatum) SetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BaseUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderComponentDatumR{
			BaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveBaseUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformPlannedOrderComponentDatum) RemoveBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.BaseUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BaseUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetStockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum of the dataPlatformPlannedOrderComponentDatum to the related item.
// Sets o.R.StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformPlannedOrderComponentDatum) SetStockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"StockConfirmationBusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StockConfirmationBusinessPartner, related.BusinessPartner)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderComponentDatumR{
			StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// RemoveStockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum relationship.
// Sets o.R.StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum to nil.
func (o *DataPlatformPlannedOrderComponentDatum) RemoveStockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPlantStorageLocationDatum) error {
	var err error

	queries.SetScanner(&o.StockConfirmationBusinessPartner, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("StockConfirmationBusinessPartner")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformPlannedOrderComponentDatum to the related item.
// Sets o.R.ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformPlannedOrderComponentDatum) SetComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ComponentProductBusinessPartner, related.BusinessPartner)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderComponentDatumR{
			ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// RemoveComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum relationship.
// Sets o.R.ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum to nil.
func (o *DataPlatformPlannedOrderComponentDatum) RemoveComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error

	queries.SetScanner(&o.ComponentProductBusinessPartner, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ComponentProductBusinessPartner")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// DataPlatformPlannedOrderComponentData retrieves all the records using an executor.
func DataPlatformPlannedOrderComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderComponentDatumQuery {
	mods = append(mods, qm.From("`data_platform_planned_order_component_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_planned_order_component_data`.*"})
	}

	return dataPlatformPlannedOrderComponentDatumQuery{q}
}

// FindDataPlatformPlannedOrderComponentDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPlannedOrderComponentDatum(ctx context.Context, exec boil.ContextExecutor, plannedOrder int, plannedOrderItem int, selectCols ...string) (*DataPlatformPlannedOrderComponentDatum, error) {
	dataPlatformPlannedOrderComponentDatumObj := &DataPlatformPlannedOrderComponentDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_planned_order_component_data` where `PlannedOrder`=? AND `PlannedOrderItem`=?", sel,
	)

	q := queries.Raw(query, plannedOrder, plannedOrderItem)

	err := q.Bind(ctx, exec, dataPlatformPlannedOrderComponentDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_planned_order_component_data")
	}

	return dataPlatformPlannedOrderComponentDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPlannedOrderComponentDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_component_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderComponentDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPlannedOrderComponentDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderComponentDatumInsertCache[key]
	dataPlatformPlannedOrderComponentDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPlannedOrderComponentDatumAllColumns,
			dataPlatformPlannedOrderComponentDatumColumnsWithDefault,
			dataPlatformPlannedOrderComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderComponentDatumType, dataPlatformPlannedOrderComponentDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderComponentDatumType, dataPlatformPlannedOrderComponentDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_planned_order_component_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_planned_order_component_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_planned_order_component_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_planned_order_component_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PlannedOrder,
		o.PlannedOrderItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_component_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderComponentDatumInsertCacheMut.Lock()
		dataPlatformPlannedOrderComponentDatumInsertCache[key] = cache
		dataPlatformPlannedOrderComponentDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPlannedOrderComponentDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPlannedOrderComponentDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPlannedOrderComponentDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderComponentDatumUpdateCache[key]
	dataPlatformPlannedOrderComponentDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPlannedOrderComponentDatumAllColumns,
			dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_planned_order_component_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_planned_order_component_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderComponentDatumType, dataPlatformPlannedOrderComponentDatumMapping, append(wl, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_planned_order_component_data row")
	}

	if !cached {
		dataPlatformPlannedOrderComponentDatumUpdateCacheMut.Lock()
		dataPlatformPlannedOrderComponentDatumUpdateCache[key] = cache
		dataPlatformPlannedOrderComponentDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPlannedOrderComponentDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_planned_order_component_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPlannedOrderComponentDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_planned_order_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPlannedOrderComponentDatum slice")
	}

	return nil
}

var mySQLDataPlatformPlannedOrderComponentDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPlannedOrderComponentDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_component_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderComponentDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPlannedOrderComponentDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPlannedOrderComponentDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderComponentDatumUpsertCache[key]
	dataPlatformPlannedOrderComponentDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPlannedOrderComponentDatumAllColumns,
			dataPlatformPlannedOrderComponentDatumColumnsWithDefault,
			dataPlatformPlannedOrderComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPlannedOrderComponentDatumAllColumns,
			dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_planned_order_component_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_planned_order_component_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_planned_order_component_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderComponentDatumType, dataPlatformPlannedOrderComponentDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderComponentDatumType, dataPlatformPlannedOrderComponentDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_planned_order_component_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPlannedOrderComponentDatumType, dataPlatformPlannedOrderComponentDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_planned_order_component_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_component_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderComponentDatumUpsertCacheMut.Lock()
		dataPlatformPlannedOrderComponentDatumUpsertCache[key] = cache
		dataPlatformPlannedOrderComponentDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPlannedOrderComponentDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPlannedOrderComponentDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPlannedOrderComponentDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPlannedOrderComponentDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_planned_order_component_data` WHERE `PlannedOrder`=? AND `PlannedOrderItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_planned_order_component_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPlannedOrderComponentDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPlannedOrderComponentDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_planned_order_component_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPlannedOrderComponentDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_planned_order_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPlannedOrderComponentDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPlannedOrderComponentDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPlannedOrderComponentDatum(ctx, exec, o.PlannedOrder, o.PlannedOrderItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPlannedOrderComponentDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPlannedOrderComponentDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_planned_order_component_data`.* FROM `data_platform_planned_order_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPlannedOrderComponentDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPlannedOrderComponentDatumExists checks if the DataPlatformPlannedOrderComponentDatum row exists.
func DataPlatformPlannedOrderComponentDatumExists(ctx context.Context, exec boil.ContextExecutor, plannedOrder int, plannedOrderItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_planned_order_component_data` where `PlannedOrder`=? AND `PlannedOrderItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, plannedOrder, plannedOrderItem)
	}
	row := exec.QueryRowContext(ctx, sql, plannedOrder, plannedOrderItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_planned_order_component_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPlannedOrderComponentDatum row exists.
func (o *DataPlatformPlannedOrderComponentDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPlannedOrderComponentDatumExists(ctx, exec, o.PlannedOrder, o.PlannedOrderItem)
}
