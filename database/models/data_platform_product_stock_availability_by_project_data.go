// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductStockAvailabilityByProjectDatum is an object representing the database table.
type DataPlatformProductStockAvailabilityByProjectDatum struct {
	Product                                string  `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Project                                int     `boil:"Project" json:"Project" toml:"Project" yaml:"Project"`
	WBSElement                             int     `boil:"WBSElement" json:"WBSElement" toml:"WBSElement" yaml:"WBSElement"`
	SupplyChainRelationshipID              int     `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID      int     `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID int     `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	Buyer                                  int     `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                 int     `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                         int     `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverFromParty                       int     `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverToPlant                         string  `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	DeliverFromPlant                       string  `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	ProductStockAvailabilityDate           string  `boil:"ProductStockAvailabilityDate" json:"ProductStockAvailabilityDate" toml:"ProductStockAvailabilityDate" yaml:"ProductStockAvailabilityDate"`
	AvailableProductStock                  float32 `boil:"AvailableProductStock" json:"AvailableProductStock" toml:"AvailableProductStock" yaml:"AvailableProductStock"`
	CreationDate                           string  `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                           string  `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                         string  `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                         string  `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`

	R *dataPlatformProductStockAvailabilityByProjectDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductStockAvailabilityByProjectDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductStockAvailabilityByProjectDatumColumns = struct {
	Product                                string
	Project                                string
	WBSElement                             string
	SupplyChainRelationshipID              string
	SupplyChainRelationshipDeliveryID      string
	SupplyChainRelationshipDeliveryPlantID string
	Buyer                                  string
	Seller                                 string
	DeliverToParty                         string
	DeliverFromParty                       string
	DeliverToPlant                         string
	DeliverFromPlant                       string
	ProductStockAvailabilityDate           string
	AvailableProductStock                  string
	CreationDate                           string
	CreationTime                           string
	LastChangeDate                         string
	LastChangeTime                         string
}{
	Product:                                "Product",
	Project:                                "Project",
	WBSElement:                             "WBSElement",
	SupplyChainRelationshipID:              "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:      "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID: "SupplyChainRelationshipDeliveryPlantID",
	Buyer:                                  "Buyer",
	Seller:                                 "Seller",
	DeliverToParty:                         "DeliverToParty",
	DeliverFromParty:                       "DeliverFromParty",
	DeliverToPlant:                         "DeliverToPlant",
	DeliverFromPlant:                       "DeliverFromPlant",
	ProductStockAvailabilityDate:           "ProductStockAvailabilityDate",
	AvailableProductStock:                  "AvailableProductStock",
	CreationDate:                           "CreationDate",
	CreationTime:                           "CreationTime",
	LastChangeDate:                         "LastChangeDate",
	LastChangeTime:                         "LastChangeTime",
}

var DataPlatformProductStockAvailabilityByProjectDatumTableColumns = struct {
	Product                                string
	Project                                string
	WBSElement                             string
	SupplyChainRelationshipID              string
	SupplyChainRelationshipDeliveryID      string
	SupplyChainRelationshipDeliveryPlantID string
	Buyer                                  string
	Seller                                 string
	DeliverToParty                         string
	DeliverFromParty                       string
	DeliverToPlant                         string
	DeliverFromPlant                       string
	ProductStockAvailabilityDate           string
	AvailableProductStock                  string
	CreationDate                           string
	CreationTime                           string
	LastChangeDate                         string
	LastChangeTime                         string
}{
	Product:                                "data_platform_product_stock_availability_by_project_data.Product",
	Project:                                "data_platform_product_stock_availability_by_project_data.Project",
	WBSElement:                             "data_platform_product_stock_availability_by_project_data.WBSElement",
	SupplyChainRelationshipID:              "data_platform_product_stock_availability_by_project_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:      "data_platform_product_stock_availability_by_project_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID: "data_platform_product_stock_availability_by_project_data.SupplyChainRelationshipDeliveryPlantID",
	Buyer:                                  "data_platform_product_stock_availability_by_project_data.Buyer",
	Seller:                                 "data_platform_product_stock_availability_by_project_data.Seller",
	DeliverToParty:                         "data_platform_product_stock_availability_by_project_data.DeliverToParty",
	DeliverFromParty:                       "data_platform_product_stock_availability_by_project_data.DeliverFromParty",
	DeliverToPlant:                         "data_platform_product_stock_availability_by_project_data.DeliverToPlant",
	DeliverFromPlant:                       "data_platform_product_stock_availability_by_project_data.DeliverFromPlant",
	ProductStockAvailabilityDate:           "data_platform_product_stock_availability_by_project_data.ProductStockAvailabilityDate",
	AvailableProductStock:                  "data_platform_product_stock_availability_by_project_data.AvailableProductStock",
	CreationDate:                           "data_platform_product_stock_availability_by_project_data.CreationDate",
	CreationTime:                           "data_platform_product_stock_availability_by_project_data.CreationTime",
	LastChangeDate:                         "data_platform_product_stock_availability_by_project_data.LastChangeDate",
	LastChangeTime:                         "data_platform_product_stock_availability_by_project_data.LastChangeTime",
}

// Generated where

var DataPlatformProductStockAvailabilityByProjectDatumWhere = struct {
	Product                                whereHelperstring
	Project                                whereHelperint
	WBSElement                             whereHelperint
	SupplyChainRelationshipID              whereHelperint
	SupplyChainRelationshipDeliveryID      whereHelperint
	SupplyChainRelationshipDeliveryPlantID whereHelperint
	Buyer                                  whereHelperint
	Seller                                 whereHelperint
	DeliverToParty                         whereHelperint
	DeliverFromParty                       whereHelperint
	DeliverToPlant                         whereHelperstring
	DeliverFromPlant                       whereHelperstring
	ProductStockAvailabilityDate           whereHelperstring
	AvailableProductStock                  whereHelperfloat32
	CreationDate                           whereHelperstring
	CreationTime                           whereHelperstring
	LastChangeDate                         whereHelperstring
	LastChangeTime                         whereHelperstring
}{
	Product:                                whereHelperstring{field: "`data_platform_product_stock_availability_by_project_data`.`Product`"},
	Project:                                whereHelperint{field: "`data_platform_product_stock_availability_by_project_data`.`Project`"},
	WBSElement:                             whereHelperint{field: "`data_platform_product_stock_availability_by_project_data`.`WBSElement`"},
	SupplyChainRelationshipID:              whereHelperint{field: "`data_platform_product_stock_availability_by_project_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:      whereHelperint{field: "`data_platform_product_stock_availability_by_project_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID: whereHelperint{field: "`data_platform_product_stock_availability_by_project_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	Buyer:                                  whereHelperint{field: "`data_platform_product_stock_availability_by_project_data`.`Buyer`"},
	Seller:                                 whereHelperint{field: "`data_platform_product_stock_availability_by_project_data`.`Seller`"},
	DeliverToParty:                         whereHelperint{field: "`data_platform_product_stock_availability_by_project_data`.`DeliverToParty`"},
	DeliverFromParty:                       whereHelperint{field: "`data_platform_product_stock_availability_by_project_data`.`DeliverFromParty`"},
	DeliverToPlant:                         whereHelperstring{field: "`data_platform_product_stock_availability_by_project_data`.`DeliverToPlant`"},
	DeliverFromPlant:                       whereHelperstring{field: "`data_platform_product_stock_availability_by_project_data`.`DeliverFromPlant`"},
	ProductStockAvailabilityDate:           whereHelperstring{field: "`data_platform_product_stock_availability_by_project_data`.`ProductStockAvailabilityDate`"},
	AvailableProductStock:                  whereHelperfloat32{field: "`data_platform_product_stock_availability_by_project_data`.`AvailableProductStock`"},
	CreationDate:                           whereHelperstring{field: "`data_platform_product_stock_availability_by_project_data`.`CreationDate`"},
	CreationTime:                           whereHelperstring{field: "`data_platform_product_stock_availability_by_project_data`.`CreationTime`"},
	LastChangeDate:                         whereHelperstring{field: "`data_platform_product_stock_availability_by_project_data`.`LastChangeDate`"},
	LastChangeTime:                         whereHelperstring{field: "`data_platform_product_stock_availability_by_project_data`.`LastChangeTime`"},
}

// DataPlatformProductStockAvailabilityByProjectDatumRels is where relationship names are stored.
var DataPlatformProductStockAvailabilityByProjectDatumRels = struct {
	ProductDataPlatformProductMasterGeneralDatum   string
	BuyerDataPlatformSCRDeliveryRelationDatum      string
	BuyerDataPlatformSCRDeliveryPlantRelationDatum string
	BuyerDataPlatformSCRGeneralDatum               string
}{
	ProductDataPlatformProductMasterGeneralDatum:   "ProductDataPlatformProductMasterGeneralDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:      "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformSCRDeliveryPlantRelationDatum: "BuyerDataPlatformSCRDeliveryPlantRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:               "BuyerDataPlatformSCRGeneralDatum",
}

// dataPlatformProductStockAvailabilityByProjectDatumR is where relationships are stored.
type dataPlatformProductStockAvailabilityByProjectDatumR struct {
	ProductDataPlatformProductMasterGeneralDatum   *DataPlatformProductMasterGeneralDatum     `boil:"ProductDataPlatformProductMasterGeneralDatum" json:"ProductDataPlatformProductMasterGeneralDatum" toml:"ProductDataPlatformProductMasterGeneralDatum" yaml:"ProductDataPlatformProductMasterGeneralDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum      *DataPlatformSCRDeliveryRelationDatum      `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformSCRDeliveryPlantRelationDatum *DataPlatformSCRDeliveryPlantRelationDatum `boil:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" json:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" toml:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryPlantRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum               *DataPlatformSCRGeneralDatum               `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductStockAvailabilityByProjectDatumR) NewStruct() *dataPlatformProductStockAvailabilityByProjectDatumR {
	return &dataPlatformProductStockAvailabilityByProjectDatumR{}
}

func (r *dataPlatformProductStockAvailabilityByProjectDatumR) GetProductDataPlatformProductMasterGeneralDatum() *DataPlatformProductMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformProductMasterGeneralDatum
}

func (r *dataPlatformProductStockAvailabilityByProjectDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformProductStockAvailabilityByProjectDatumR) GetBuyerDataPlatformSCRDeliveryPlantRelationDatum() *DataPlatformSCRDeliveryPlantRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryPlantRelationDatum
}

func (r *dataPlatformProductStockAvailabilityByProjectDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

// dataPlatformProductStockAvailabilityByProjectDatumL is where Load methods for each relationship are stored.
type dataPlatformProductStockAvailabilityByProjectDatumL struct{}

var (
	dataPlatformProductStockAvailabilityByProjectDatumAllColumns            = []string{"Product", "Project", "WBSElement", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "ProductStockAvailabilityDate", "AvailableProductStock", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime"}
	dataPlatformProductStockAvailabilityByProjectDatumColumnsWithoutDefault = []string{"Product", "Project", "WBSElement", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "ProductStockAvailabilityDate", "AvailableProductStock", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime"}
	dataPlatformProductStockAvailabilityByProjectDatumColumnsWithDefault    = []string{}
	dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns     = []string{"Product", "Project", "WBSElement", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "ProductStockAvailabilityDate"}
	dataPlatformProductStockAvailabilityByProjectDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductStockAvailabilityByProjectDatumSlice is an alias for a slice of pointers to DataPlatformProductStockAvailabilityByProjectDatum.
	// This should almost always be used instead of []DataPlatformProductStockAvailabilityByProjectDatum.
	DataPlatformProductStockAvailabilityByProjectDatumSlice []*DataPlatformProductStockAvailabilityByProjectDatum

	dataPlatformProductStockAvailabilityByProjectDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductStockAvailabilityByProjectDatumType                 = reflect.TypeOf(&DataPlatformProductStockAvailabilityByProjectDatum{})
	dataPlatformProductStockAvailabilityByProjectDatumMapping              = queries.MakeStructMapping(dataPlatformProductStockAvailabilityByProjectDatumType)
	dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductStockAvailabilityByProjectDatumType, dataPlatformProductStockAvailabilityByProjectDatumMapping, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns)
	dataPlatformProductStockAvailabilityByProjectDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductStockAvailabilityByProjectDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductStockAvailabilityByProjectDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductStockAvailabilityByProjectDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductStockAvailabilityByProjectDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductStockAvailabilityByProjectDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductStockAvailabilityByProjectDatum record from the query.
func (q dataPlatformProductStockAvailabilityByProjectDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductStockAvailabilityByProjectDatum, error) {
	o := &DataPlatformProductStockAvailabilityByProjectDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_stock_availability_by_project_data")
	}

	return o, nil
}

// All returns all DataPlatformProductStockAvailabilityByProjectDatum records from the query.
func (q dataPlatformProductStockAvailabilityByProjectDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductStockAvailabilityByProjectDatumSlice, error) {
	var o []*DataPlatformProductStockAvailabilityByProjectDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductStockAvailabilityByProjectDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductStockAvailabilityByProjectDatum records in the query.
func (q dataPlatformProductStockAvailabilityByProjectDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_stock_availability_by_project_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductStockAvailabilityByProjectDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_stock_availability_by_project_data exists")
	}

	return count > 0, nil
}

// ProductDataPlatformProductMasterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) ProductDataPlatformProductMasterGeneralDatum(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryPlantRelationDatum pointed to by the foreign key.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) BuyerDataPlatformSCRDeliveryPlantRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryPlantRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// LoadProductDataPlatformProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductStockAvailabilityByProjectDatumL) LoadProductDataPlatformProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockAvailabilityByProjectDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockAvailabilityByProjectDatum
	var object *DataPlatformProductStockAvailabilityByProjectDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockAvailabilityByProjectDatum.(*DataPlatformProductStockAvailabilityByProjectDatum)
		if !ok {
			object = new(DataPlatformProductStockAvailabilityByProjectDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockAvailabilityByProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockAvailabilityByProjectDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockAvailabilityByProjectDatum.(*[]*DataPlatformProductStockAvailabilityByProjectDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockAvailabilityByProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockAvailabilityByProjectDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockAvailabilityByProjectDatumR{}
		}
		args = append(args, object.Product)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockAvailabilityByProjectDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterGeneralDatum")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDataPlatformProductMasterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Product == foreign.Product {
				local.R.ProductDataPlatformProductMasterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductStockAvailabilityByProjectDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockAvailabilityByProjectDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockAvailabilityByProjectDatum
	var object *DataPlatformProductStockAvailabilityByProjectDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockAvailabilityByProjectDatum.(*DataPlatformProductStockAvailabilityByProjectDatum)
		if !ok {
			object = new(DataPlatformProductStockAvailabilityByProjectDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockAvailabilityByProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockAvailabilityByProjectDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockAvailabilityByProjectDatum.(*[]*DataPlatformProductStockAvailabilityByProjectDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockAvailabilityByProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockAvailabilityByProjectDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockAvailabilityByProjectDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockAvailabilityByProjectDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryPlantRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductStockAvailabilityByProjectDatumL) LoadBuyerDataPlatformSCRDeliveryPlantRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockAvailabilityByProjectDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockAvailabilityByProjectDatum
	var object *DataPlatformProductStockAvailabilityByProjectDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockAvailabilityByProjectDatum.(*DataPlatformProductStockAvailabilityByProjectDatum)
		if !ok {
			object = new(DataPlatformProductStockAvailabilityByProjectDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockAvailabilityByProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockAvailabilityByProjectDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockAvailabilityByProjectDatum.(*[]*DataPlatformProductStockAvailabilityByProjectDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockAvailabilityByProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockAvailabilityByProjectDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockAvailabilityByProjectDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockAvailabilityByProjectDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_plant_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryPlantRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryPlantRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_plant_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductStockAvailabilityByProjectDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductStockAvailabilityByProjectDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductStockAvailabilityByProjectDatum
	var object *DataPlatformProductStockAvailabilityByProjectDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductStockAvailabilityByProjectDatum.(*DataPlatformProductStockAvailabilityByProjectDatum)
		if !ok {
			object = new(DataPlatformProductStockAvailabilityByProjectDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductStockAvailabilityByProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductStockAvailabilityByProjectDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductStockAvailabilityByProjectDatum.(*[]*DataPlatformProductStockAvailabilityByProjectDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductStockAvailabilityByProjectDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductStockAvailabilityByProjectDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductStockAvailabilityByProjectDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductStockAvailabilityByProjectDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetProductDataPlatformProductMasterGeneralDatum of the dataPlatformProductStockAvailabilityByProjectDatum to the related item.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum to related.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) SetProductDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_stock_availability_by_project_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.Product, o.Project, o.WBSElement, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.ProductStockAvailabilityDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Product = related.Product
	if o.R == nil {
		o.R = &dataPlatformProductStockAvailabilityByProjectDatumR{
			ProductDataPlatformProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductDataPlatformProductMasterGeneralDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformProductStockAvailabilityByProjectDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_stock_availability_by_project_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Product, o.Project, o.WBSElement, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.ProductStockAvailabilityDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformProductStockAvailabilityByProjectDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryPlantRelationDatum of the dataPlatformProductStockAvailabilityByProjectDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum to related.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) SetBuyerDataPlatformSCRDeliveryPlantRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryPlantRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_stock_availability_by_project_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Product, o.Project, o.WBSElement, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.ProductStockAvailabilityDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformProductStockAvailabilityByProjectDatumR{
			BuyerDataPlatformSCRDeliveryPlantRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformProductStockAvailabilityByProjectDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_stock_availability_by_project_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Product, o.Project, o.WBSElement, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.ProductStockAvailabilityDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformProductStockAvailabilityByProjectDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// DataPlatformProductStockAvailabilityByProjectData retrieves all the records using an executor.
func DataPlatformProductStockAvailabilityByProjectData(mods ...qm.QueryMod) dataPlatformProductStockAvailabilityByProjectDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_stock_availability_by_project_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_stock_availability_by_project_data`.*"})
	}

	return dataPlatformProductStockAvailabilityByProjectDatumQuery{q}
}

// FindDataPlatformProductStockAvailabilityByProjectDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductStockAvailabilityByProjectDatum(ctx context.Context, exec boil.ContextExecutor, product string, project int, wBSElement int, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, supplyChainRelationshipDeliveryPlantID int, buyer int, seller int, deliverToParty int, deliverFromParty int, deliverToPlant string, deliverFromPlant string, productStockAvailabilityDate string, selectCols ...string) (*DataPlatformProductStockAvailabilityByProjectDatum, error) {
	dataPlatformProductStockAvailabilityByProjectDatumObj := &DataPlatformProductStockAvailabilityByProjectDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_stock_availability_by_project_data` where `Product`=? AND `Project`=? AND `WBSElement`=? AND `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? AND `ProductStockAvailabilityDate`=?", sel,
	)

	q := queries.Raw(query, product, project, wBSElement, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant, productStockAvailabilityDate)

	err := q.Bind(ctx, exec, dataPlatformProductStockAvailabilityByProjectDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_stock_availability_by_project_data")
	}

	return dataPlatformProductStockAvailabilityByProjectDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_stock_availability_by_project_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductStockAvailabilityByProjectDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductStockAvailabilityByProjectDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductStockAvailabilityByProjectDatumInsertCache[key]
	dataPlatformProductStockAvailabilityByProjectDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductStockAvailabilityByProjectDatumAllColumns,
			dataPlatformProductStockAvailabilityByProjectDatumColumnsWithDefault,
			dataPlatformProductStockAvailabilityByProjectDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductStockAvailabilityByProjectDatumType, dataPlatformProductStockAvailabilityByProjectDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductStockAvailabilityByProjectDatumType, dataPlatformProductStockAvailabilityByProjectDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_stock_availability_by_project_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_stock_availability_by_project_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_stock_availability_by_project_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_stock_availability_by_project_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.Project,
		o.WBSElement,
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipDeliveryID,
		o.SupplyChainRelationshipDeliveryPlantID,
		o.Buyer,
		o.Seller,
		o.DeliverToParty,
		o.DeliverFromParty,
		o.DeliverToPlant,
		o.DeliverFromPlant,
		o.ProductStockAvailabilityDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_stock_availability_by_project_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductStockAvailabilityByProjectDatumInsertCacheMut.Lock()
		dataPlatformProductStockAvailabilityByProjectDatumInsertCache[key] = cache
		dataPlatformProductStockAvailabilityByProjectDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductStockAvailabilityByProjectDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductStockAvailabilityByProjectDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductStockAvailabilityByProjectDatumUpdateCache[key]
	dataPlatformProductStockAvailabilityByProjectDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductStockAvailabilityByProjectDatumAllColumns,
			dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_stock_availability_by_project_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_stock_availability_by_project_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductStockAvailabilityByProjectDatumType, dataPlatformProductStockAvailabilityByProjectDatumMapping, append(wl, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_stock_availability_by_project_data row")
	}

	if !cached {
		dataPlatformProductStockAvailabilityByProjectDatumUpdateCacheMut.Lock()
		dataPlatformProductStockAvailabilityByProjectDatumUpdateCache[key] = cache
		dataPlatformProductStockAvailabilityByProjectDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductStockAvailabilityByProjectDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_stock_availability_by_project_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductStockAvailabilityByProjectDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_stock_availability_by_project_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductStockAvailabilityByProjectDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductStockAvailabilityByProjectDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_stock_availability_by_project_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductStockAvailabilityByProjectDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductStockAvailabilityByProjectDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductStockAvailabilityByProjectDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductStockAvailabilityByProjectDatumUpsertCache[key]
	dataPlatformProductStockAvailabilityByProjectDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductStockAvailabilityByProjectDatumAllColumns,
			dataPlatformProductStockAvailabilityByProjectDatumColumnsWithDefault,
			dataPlatformProductStockAvailabilityByProjectDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductStockAvailabilityByProjectDatumAllColumns,
			dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_stock_availability_by_project_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_stock_availability_by_project_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_stock_availability_by_project_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductStockAvailabilityByProjectDatumType, dataPlatformProductStockAvailabilityByProjectDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductStockAvailabilityByProjectDatumType, dataPlatformProductStockAvailabilityByProjectDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_stock_availability_by_project_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductStockAvailabilityByProjectDatumType, dataPlatformProductStockAvailabilityByProjectDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_stock_availability_by_project_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_stock_availability_by_project_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductStockAvailabilityByProjectDatumUpsertCacheMut.Lock()
		dataPlatformProductStockAvailabilityByProjectDatumUpsertCache[key] = cache
		dataPlatformProductStockAvailabilityByProjectDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductStockAvailabilityByProjectDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductStockAvailabilityByProjectDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_stock_availability_by_project_data` WHERE `Product`=? AND `Project`=? AND `WBSElement`=? AND `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? AND `ProductStockAvailabilityDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_stock_availability_by_project_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductStockAvailabilityByProjectDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductStockAvailabilityByProjectDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_stock_availability_by_project_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductStockAvailabilityByProjectDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_stock_availability_by_project_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductStockAvailabilityByProjectDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductStockAvailabilityByProjectDatum(ctx, exec, o.Product, o.Project, o.WBSElement, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.ProductStockAvailabilityDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductStockAvailabilityByProjectDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductStockAvailabilityByProjectDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_stock_availability_by_project_data`.* FROM `data_platform_product_stock_availability_by_project_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductStockAvailabilityByProjectDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductStockAvailabilityByProjectDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductStockAvailabilityByProjectDatumExists checks if the DataPlatformProductStockAvailabilityByProjectDatum row exists.
func DataPlatformProductStockAvailabilityByProjectDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, project int, wBSElement int, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, supplyChainRelationshipDeliveryPlantID int, buyer int, seller int, deliverToParty int, deliverFromParty int, deliverToPlant string, deliverFromPlant string, productStockAvailabilityDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_stock_availability_by_project_data` where `Product`=? AND `Project`=? AND `WBSElement`=? AND `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? AND `ProductStockAvailabilityDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, project, wBSElement, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant, productStockAvailabilityDate)
	}
	row := exec.QueryRowContext(ctx, sql, product, project, wBSElement, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant, productStockAvailabilityDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_stock_availability_by_project_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductStockAvailabilityByProjectDatum row exists.
func (o *DataPlatformProductStockAvailabilityByProjectDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductStockAvailabilityByProjectDatumExists(ctx, exec, o.Product, o.Project, o.WBSElement, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.ProductStockAvailabilityDate)
}
