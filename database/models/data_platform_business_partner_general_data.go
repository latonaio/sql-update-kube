// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerGeneralDatum is an object representing the database table.
type DataPlatformBusinessPartnerGeneralDatum struct {
	BusinessPartner               int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	BusinessPartnerFullName       null.String `boil:"BusinessPartnerFullName" json:"BusinessPartnerFullName,omitempty" toml:"BusinessPartnerFullName" yaml:"BusinessPartnerFullName,omitempty"`
	BusinessPartnerName           string      `boil:"BusinessPartnerName" json:"BusinessPartnerName" toml:"BusinessPartnerName" yaml:"BusinessPartnerName"`
	CreationDate                  null.Time   `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	CreationTime                  null.String `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	Industry                      null.String `boil:"Industry" json:"Industry,omitempty" toml:"Industry" yaml:"Industry,omitempty"`
	LegalEntityRegistration       null.String `boil:"LegalEntityRegistration" json:"LegalEntityRegistration,omitempty" toml:"LegalEntityRegistration" yaml:"LegalEntityRegistration,omitempty"`
	Country                       string      `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	Language                      string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	Currency                      string      `boil:"Currency" json:"Currency" toml:"Currency" yaml:"Currency"`
	LastChangeDate                null.Time   `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeTime                null.String `boil:"LastChangeTime" json:"LastChangeTime,omitempty" toml:"LastChangeTime" yaml:"LastChangeTime,omitempty"`
	OrganizationBPName1           null.String `boil:"OrganizationBPName1" json:"OrganizationBPName1,omitempty" toml:"OrganizationBPName1" yaml:"OrganizationBPName1,omitempty"`
	OrganizationBPName2           null.String `boil:"OrganizationBPName2" json:"OrganizationBPName2,omitempty" toml:"OrganizationBPName2" yaml:"OrganizationBPName2,omitempty"`
	OrganizationBPName3           null.String `boil:"OrganizationBPName3" json:"OrganizationBPName3,omitempty" toml:"OrganizationBPName3" yaml:"OrganizationBPName3,omitempty"`
	OrganizationBPName4           null.String `boil:"OrganizationBPName4" json:"OrganizationBPName4,omitempty" toml:"OrganizationBPName4" yaml:"OrganizationBPName4,omitempty"`
	BPGroup1                      null.String `boil:"BPGroup1" json:"BPGroup1,omitempty" toml:"BPGroup1" yaml:"BPGroup1,omitempty"`
	BPGroup2                      null.String `boil:"BPGroup2" json:"BPGroup2,omitempty" toml:"BPGroup2" yaml:"BPGroup2,omitempty"`
	BPGroup3                      null.String `boil:"BPGroup3" json:"BPGroup3,omitempty" toml:"BPGroup3" yaml:"BPGroup3,omitempty"`
	BPGroup4                      null.String `boil:"BPGroup4" json:"BPGroup4,omitempty" toml:"BPGroup4" yaml:"BPGroup4,omitempty"`
	BPGroup5                      null.String `boil:"BPGroup5" json:"BPGroup5,omitempty" toml:"BPGroup5" yaml:"BPGroup5,omitempty"`
	OrganizationFoundationDate    null.Time   `boil:"OrganizationFoundationDate" json:"OrganizationFoundationDate,omitempty" toml:"OrganizationFoundationDate" yaml:"OrganizationFoundationDate,omitempty"`
	OrganizationLiquidationDate   null.Time   `boil:"OrganizationLiquidationDate" json:"OrganizationLiquidationDate,omitempty" toml:"OrganizationLiquidationDate" yaml:"OrganizationLiquidationDate,omitempty"`
	SearchTerm1                   null.String `boil:"SearchTerm1" json:"SearchTerm1,omitempty" toml:"SearchTerm1" yaml:"SearchTerm1,omitempty"`
	SearchTerm2                   null.String `boil:"SearchTerm2" json:"SearchTerm2,omitempty" toml:"SearchTerm2" yaml:"SearchTerm2,omitempty"`
	BusinessPartnerBirthplaceName null.String `boil:"BusinessPartnerBirthplaceName" json:"BusinessPartnerBirthplaceName,omitempty" toml:"BusinessPartnerBirthplaceName" yaml:"BusinessPartnerBirthplaceName,omitempty"`
	BusinessPartnerDeathDate      null.Time   `boil:"BusinessPartnerDeathDate" json:"BusinessPartnerDeathDate,omitempty" toml:"BusinessPartnerDeathDate" yaml:"BusinessPartnerDeathDate,omitempty"`
	BusinessPartnerIsBlocked      null.Bool   `boil:"BusinessPartnerIsBlocked" json:"BusinessPartnerIsBlocked,omitempty" toml:"BusinessPartnerIsBlocked" yaml:"BusinessPartnerIsBlocked,omitempty"`
	GroupBusinessPartnerName1     null.String `boil:"GroupBusinessPartnerName1" json:"GroupBusinessPartnerName1,omitempty" toml:"GroupBusinessPartnerName1" yaml:"GroupBusinessPartnerName1,omitempty"`
	GroupBusinessPartnerName2     null.String `boil:"GroupBusinessPartnerName2" json:"GroupBusinessPartnerName2,omitempty" toml:"GroupBusinessPartnerName2" yaml:"GroupBusinessPartnerName2,omitempty"`
	AddressID                     null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`
	BusinessPartnerIDByExtSystem  null.String `boil:"BusinessPartnerIDByExtSystem" json:"BusinessPartnerIDByExtSystem,omitempty" toml:"BusinessPartnerIDByExtSystem" yaml:"BusinessPartnerIDByExtSystem,omitempty"`
	IsMarkedForDeletion           null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBusinessPartnerGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerGeneralDatumColumns = struct {
	BusinessPartner               string
	BusinessPartnerFullName       string
	BusinessPartnerName           string
	CreationDate                  string
	CreationTime                  string
	Industry                      string
	LegalEntityRegistration       string
	Country                       string
	Language                      string
	Currency                      string
	LastChangeDate                string
	LastChangeTime                string
	OrganizationBPName1           string
	OrganizationBPName2           string
	OrganizationBPName3           string
	OrganizationBPName4           string
	BPGroup1                      string
	BPGroup2                      string
	BPGroup3                      string
	BPGroup4                      string
	BPGroup5                      string
	OrganizationFoundationDate    string
	OrganizationLiquidationDate   string
	SearchTerm1                   string
	SearchTerm2                   string
	BusinessPartnerBirthplaceName string
	BusinessPartnerDeathDate      string
	BusinessPartnerIsBlocked      string
	GroupBusinessPartnerName1     string
	GroupBusinessPartnerName2     string
	AddressID                     string
	BusinessPartnerIDByExtSystem  string
	IsMarkedForDeletion           string
}{
	BusinessPartner:               "BusinessPartner",
	BusinessPartnerFullName:       "BusinessPartnerFullName",
	BusinessPartnerName:           "BusinessPartnerName",
	CreationDate:                  "CreationDate",
	CreationTime:                  "CreationTime",
	Industry:                      "Industry",
	LegalEntityRegistration:       "LegalEntityRegistration",
	Country:                       "Country",
	Language:                      "Language",
	Currency:                      "Currency",
	LastChangeDate:                "LastChangeDate",
	LastChangeTime:                "LastChangeTime",
	OrganizationBPName1:           "OrganizationBPName1",
	OrganizationBPName2:           "OrganizationBPName2",
	OrganizationBPName3:           "OrganizationBPName3",
	OrganizationBPName4:           "OrganizationBPName4",
	BPGroup1:                      "BPGroup1",
	BPGroup2:                      "BPGroup2",
	BPGroup3:                      "BPGroup3",
	BPGroup4:                      "BPGroup4",
	BPGroup5:                      "BPGroup5",
	OrganizationFoundationDate:    "OrganizationFoundationDate",
	OrganizationLiquidationDate:   "OrganizationLiquidationDate",
	SearchTerm1:                   "SearchTerm1",
	SearchTerm2:                   "SearchTerm2",
	BusinessPartnerBirthplaceName: "BusinessPartnerBirthplaceName",
	BusinessPartnerDeathDate:      "BusinessPartnerDeathDate",
	BusinessPartnerIsBlocked:      "BusinessPartnerIsBlocked",
	GroupBusinessPartnerName1:     "GroupBusinessPartnerName1",
	GroupBusinessPartnerName2:     "GroupBusinessPartnerName2",
	AddressID:                     "AddressID",
	BusinessPartnerIDByExtSystem:  "BusinessPartnerIDByExtSystem",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
}

var DataPlatformBusinessPartnerGeneralDatumTableColumns = struct {
	BusinessPartner               string
	BusinessPartnerFullName       string
	BusinessPartnerName           string
	CreationDate                  string
	CreationTime                  string
	Industry                      string
	LegalEntityRegistration       string
	Country                       string
	Language                      string
	Currency                      string
	LastChangeDate                string
	LastChangeTime                string
	OrganizationBPName1           string
	OrganizationBPName2           string
	OrganizationBPName3           string
	OrganizationBPName4           string
	BPGroup1                      string
	BPGroup2                      string
	BPGroup3                      string
	BPGroup4                      string
	BPGroup5                      string
	OrganizationFoundationDate    string
	OrganizationLiquidationDate   string
	SearchTerm1                   string
	SearchTerm2                   string
	BusinessPartnerBirthplaceName string
	BusinessPartnerDeathDate      string
	BusinessPartnerIsBlocked      string
	GroupBusinessPartnerName1     string
	GroupBusinessPartnerName2     string
	AddressID                     string
	BusinessPartnerIDByExtSystem  string
	IsMarkedForDeletion           string
}{
	BusinessPartner:               "data_platform_business_partner_general_data.BusinessPartner",
	BusinessPartnerFullName:       "data_platform_business_partner_general_data.BusinessPartnerFullName",
	BusinessPartnerName:           "data_platform_business_partner_general_data.BusinessPartnerName",
	CreationDate:                  "data_platform_business_partner_general_data.CreationDate",
	CreationTime:                  "data_platform_business_partner_general_data.CreationTime",
	Industry:                      "data_platform_business_partner_general_data.Industry",
	LegalEntityRegistration:       "data_platform_business_partner_general_data.LegalEntityRegistration",
	Country:                       "data_platform_business_partner_general_data.Country",
	Language:                      "data_platform_business_partner_general_data.Language",
	Currency:                      "data_platform_business_partner_general_data.Currency",
	LastChangeDate:                "data_platform_business_partner_general_data.LastChangeDate",
	LastChangeTime:                "data_platform_business_partner_general_data.LastChangeTime",
	OrganizationBPName1:           "data_platform_business_partner_general_data.OrganizationBPName1",
	OrganizationBPName2:           "data_platform_business_partner_general_data.OrganizationBPName2",
	OrganizationBPName3:           "data_platform_business_partner_general_data.OrganizationBPName3",
	OrganizationBPName4:           "data_platform_business_partner_general_data.OrganizationBPName4",
	BPGroup1:                      "data_platform_business_partner_general_data.BPGroup1",
	BPGroup2:                      "data_platform_business_partner_general_data.BPGroup2",
	BPGroup3:                      "data_platform_business_partner_general_data.BPGroup3",
	BPGroup4:                      "data_platform_business_partner_general_data.BPGroup4",
	BPGroup5:                      "data_platform_business_partner_general_data.BPGroup5",
	OrganizationFoundationDate:    "data_platform_business_partner_general_data.OrganizationFoundationDate",
	OrganizationLiquidationDate:   "data_platform_business_partner_general_data.OrganizationLiquidationDate",
	SearchTerm1:                   "data_platform_business_partner_general_data.SearchTerm1",
	SearchTerm2:                   "data_platform_business_partner_general_data.SearchTerm2",
	BusinessPartnerBirthplaceName: "data_platform_business_partner_general_data.BusinessPartnerBirthplaceName",
	BusinessPartnerDeathDate:      "data_platform_business_partner_general_data.BusinessPartnerDeathDate",
	BusinessPartnerIsBlocked:      "data_platform_business_partner_general_data.BusinessPartnerIsBlocked",
	GroupBusinessPartnerName1:     "data_platform_business_partner_general_data.GroupBusinessPartnerName1",
	GroupBusinessPartnerName2:     "data_platform_business_partner_general_data.GroupBusinessPartnerName2",
	AddressID:                     "data_platform_business_partner_general_data.AddressID",
	BusinessPartnerIDByExtSystem:  "data_platform_business_partner_general_data.BusinessPartnerIDByExtSystem",
	IsMarkedForDeletion:           "data_platform_business_partner_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformBusinessPartnerGeneralDatumWhere = struct {
	BusinessPartner               whereHelperint
	BusinessPartnerFullName       whereHelpernull_String
	BusinessPartnerName           whereHelperstring
	CreationDate                  whereHelpernull_Time
	CreationTime                  whereHelpernull_String
	Industry                      whereHelpernull_String
	LegalEntityRegistration       whereHelpernull_String
	Country                       whereHelperstring
	Language                      whereHelperstring
	Currency                      whereHelperstring
	LastChangeDate                whereHelpernull_Time
	LastChangeTime                whereHelpernull_String
	OrganizationBPName1           whereHelpernull_String
	OrganizationBPName2           whereHelpernull_String
	OrganizationBPName3           whereHelpernull_String
	OrganizationBPName4           whereHelpernull_String
	BPGroup1                      whereHelpernull_String
	BPGroup2                      whereHelpernull_String
	BPGroup3                      whereHelpernull_String
	BPGroup4                      whereHelpernull_String
	BPGroup5                      whereHelpernull_String
	OrganizationFoundationDate    whereHelpernull_Time
	OrganizationLiquidationDate   whereHelpernull_Time
	SearchTerm1                   whereHelpernull_String
	SearchTerm2                   whereHelpernull_String
	BusinessPartnerBirthplaceName whereHelpernull_String
	BusinessPartnerDeathDate      whereHelpernull_Time
	BusinessPartnerIsBlocked      whereHelpernull_Bool
	GroupBusinessPartnerName1     whereHelpernull_String
	GroupBusinessPartnerName2     whereHelpernull_String
	AddressID                     whereHelpernull_Int
	BusinessPartnerIDByExtSystem  whereHelpernull_String
	IsMarkedForDeletion           whereHelpernull_Bool
}{
	BusinessPartner:               whereHelperint{field: "`data_platform_business_partner_general_data`.`BusinessPartner`"},
	BusinessPartnerFullName:       whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerFullName`"},
	BusinessPartnerName:           whereHelperstring{field: "`data_platform_business_partner_general_data`.`BusinessPartnerName`"},
	CreationDate:                  whereHelpernull_Time{field: "`data_platform_business_partner_general_data`.`CreationDate`"},
	CreationTime:                  whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`CreationTime`"},
	Industry:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`Industry`"},
	LegalEntityRegistration:       whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`LegalEntityRegistration`"},
	Country:                       whereHelperstring{field: "`data_platform_business_partner_general_data`.`Country`"},
	Language:                      whereHelperstring{field: "`data_platform_business_partner_general_data`.`Language`"},
	Currency:                      whereHelperstring{field: "`data_platform_business_partner_general_data`.`Currency`"},
	LastChangeDate:                whereHelpernull_Time{field: "`data_platform_business_partner_general_data`.`LastChangeDate`"},
	LastChangeTime:                whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`LastChangeTime`"},
	OrganizationBPName1:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName1`"},
	OrganizationBPName2:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName2`"},
	OrganizationBPName3:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName3`"},
	OrganizationBPName4:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName4`"},
	BPGroup1:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPGroup1`"},
	BPGroup2:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPGroup2`"},
	BPGroup3:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPGroup3`"},
	BPGroup4:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPGroup4`"},
	BPGroup5:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPGroup5`"},
	OrganizationFoundationDate:    whereHelpernull_Time{field: "`data_platform_business_partner_general_data`.`OrganizationFoundationDate`"},
	OrganizationLiquidationDate:   whereHelpernull_Time{field: "`data_platform_business_partner_general_data`.`OrganizationLiquidationDate`"},
	SearchTerm1:                   whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`SearchTerm1`"},
	SearchTerm2:                   whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`SearchTerm2`"},
	BusinessPartnerBirthplaceName: whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerBirthplaceName`"},
	BusinessPartnerDeathDate:      whereHelpernull_Time{field: "`data_platform_business_partner_general_data`.`BusinessPartnerDeathDate`"},
	BusinessPartnerIsBlocked:      whereHelpernull_Bool{field: "`data_platform_business_partner_general_data`.`BusinessPartnerIsBlocked`"},
	GroupBusinessPartnerName1:     whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`GroupBusinessPartnerName1`"},
	GroupBusinessPartnerName2:     whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`GroupBusinessPartnerName2`"},
	AddressID:                     whereHelpernull_Int{field: "`data_platform_business_partner_general_data`.`AddressID`"},
	BusinessPartnerIDByExtSystem:  whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerIDByExtSystem`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`data_platform_business_partner_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBusinessPartnerGeneralDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerGeneralDatumRels = struct {
	AddressIDDataPlatformAddressAddressDatum                                             string
	CountryDataPlatformCountryCountryDatum                                               string
	CurrencyDataPlatformCurrencyCurrencyDatum                                            string
	IndustryDataPlatformIndustryIndustryDatum                                            string
	LanguageDataPlatformLanguageLanguageDatum                                            string
	BusinessPartnerDataPlatformBusinessPartnerAccountingDatum                            string
	BusinessPartnerDataPlatformBusinessPartnerCustomerData                               string
	PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData string
	BusinessPartnerDataPlatformBusinessPartnerRoleData                                   string
	BusinessPartnerDataPlatformBusinessPartnerSupplierData                               string
	PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData string
	BuyerDataPlatformOrdersHeaderData                                                    string
	SellerDataPlatformOrdersHeaderData                                                   string
	BusinessPartnerDataPlatformOrdersHeaderPartnerData                                   string
	BusinessPartnerDataPlatformPlantGeneralData                                          string
	BusinessPartnerDataPlatformProductMasterBPPlantData                                  string
	BusinessPartnerDataPlatformProductMasterBusinessPartnerData                          string
}{
	AddressIDDataPlatformAddressAddressDatum:                                             "AddressIDDataPlatformAddressAddressDatum",
	CountryDataPlatformCountryCountryDatum:                                               "CountryDataPlatformCountryCountryDatum",
	CurrencyDataPlatformCurrencyCurrencyDatum:                                            "CurrencyDataPlatformCurrencyCurrencyDatum",
	IndustryDataPlatformIndustryIndustryDatum:                                            "IndustryDataPlatformIndustryIndustryDatum",
	LanguageDataPlatformLanguageLanguageDatum:                                            "LanguageDataPlatformLanguageLanguageDatum",
	BusinessPartnerDataPlatformBusinessPartnerAccountingDatum:                            "BusinessPartnerDataPlatformBusinessPartnerAccountingDatum",
	BusinessPartnerDataPlatformBusinessPartnerCustomerData:                               "BusinessPartnerDataPlatformBusinessPartnerCustomerData",
	PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData: "PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData",
	BusinessPartnerDataPlatformBusinessPartnerRoleData:                                   "BusinessPartnerDataPlatformBusinessPartnerRoleData",
	BusinessPartnerDataPlatformBusinessPartnerSupplierData:                               "BusinessPartnerDataPlatformBusinessPartnerSupplierData",
	PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData: "PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData",
	BuyerDataPlatformOrdersHeaderData:                                                    "BuyerDataPlatformOrdersHeaderData",
	SellerDataPlatformOrdersHeaderData:                                                   "SellerDataPlatformOrdersHeaderData",
	BusinessPartnerDataPlatformOrdersHeaderPartnerData:                                   "BusinessPartnerDataPlatformOrdersHeaderPartnerData",
	BusinessPartnerDataPlatformPlantGeneralData:                                          "BusinessPartnerDataPlatformPlantGeneralData",
	BusinessPartnerDataPlatformProductMasterBPPlantData:                                  "BusinessPartnerDataPlatformProductMasterBPPlantData",
	BusinessPartnerDataPlatformProductMasterBusinessPartnerData:                          "BusinessPartnerDataPlatformProductMasterBusinessPartnerData",
}

// dataPlatformBusinessPartnerGeneralDatumR is where relationships are stored.
type dataPlatformBusinessPartnerGeneralDatumR struct {
	AddressIDDataPlatformAddressAddressDatum                                             *DataPlatformAddressAddressDatum                             `boil:"AddressIDDataPlatformAddressAddressDatum" json:"AddressIDDataPlatformAddressAddressDatum" toml:"AddressIDDataPlatformAddressAddressDatum" yaml:"AddressIDDataPlatformAddressAddressDatum"`
	CountryDataPlatformCountryCountryDatum                                               *DataPlatformCountryCountryDatum                             `boil:"CountryDataPlatformCountryCountryDatum" json:"CountryDataPlatformCountryCountryDatum" toml:"CountryDataPlatformCountryCountryDatum" yaml:"CountryDataPlatformCountryCountryDatum"`
	CurrencyDataPlatformCurrencyCurrencyDatum                                            *DataPlatformCurrencyCurrencyDatum                           `boil:"CurrencyDataPlatformCurrencyCurrencyDatum" json:"CurrencyDataPlatformCurrencyCurrencyDatum" toml:"CurrencyDataPlatformCurrencyCurrencyDatum" yaml:"CurrencyDataPlatformCurrencyCurrencyDatum"`
	IndustryDataPlatformIndustryIndustryDatum                                            *DataPlatformIndustryIndustryDatum                           `boil:"IndustryDataPlatformIndustryIndustryDatum" json:"IndustryDataPlatformIndustryIndustryDatum" toml:"IndustryDataPlatformIndustryIndustryDatum" yaml:"IndustryDataPlatformIndustryIndustryDatum"`
	LanguageDataPlatformLanguageLanguageDatum                                            *DataPlatformLanguageLanguageDatum                           `boil:"LanguageDataPlatformLanguageLanguageDatum" json:"LanguageDataPlatformLanguageLanguageDatum" toml:"LanguageDataPlatformLanguageLanguageDatum" yaml:"LanguageDataPlatformLanguageLanguageDatum"`
	BusinessPartnerDataPlatformBusinessPartnerAccountingDatum                            *DataPlatformBusinessPartnerAccountingDatum                  `boil:"BusinessPartnerDataPlatformBusinessPartnerAccountingDatum" json:"BusinessPartnerDataPlatformBusinessPartnerAccountingDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerAccountingDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerAccountingDatum"`
	BusinessPartnerDataPlatformBusinessPartnerCustomerData                               DataPlatformBusinessPartnerCustomerDatumSlice                `boil:"BusinessPartnerDataPlatformBusinessPartnerCustomerData" json:"BusinessPartnerDataPlatformBusinessPartnerCustomerData" toml:"BusinessPartnerDataPlatformBusinessPartnerCustomerData" yaml:"BusinessPartnerDataPlatformBusinessPartnerCustomerData"`
	PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice `boil:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData" json:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData" toml:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData" yaml:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData"`
	BusinessPartnerDataPlatformBusinessPartnerRoleData                                   DataPlatformBusinessPartnerRoleDatumSlice                    `boil:"BusinessPartnerDataPlatformBusinessPartnerRoleData" json:"BusinessPartnerDataPlatformBusinessPartnerRoleData" toml:"BusinessPartnerDataPlatformBusinessPartnerRoleData" yaml:"BusinessPartnerDataPlatformBusinessPartnerRoleData"`
	BusinessPartnerDataPlatformBusinessPartnerSupplierData                               DataPlatformBusinessPartnerSupplierDatumSlice                `boil:"BusinessPartnerDataPlatformBusinessPartnerSupplierData" json:"BusinessPartnerDataPlatformBusinessPartnerSupplierData" toml:"BusinessPartnerDataPlatformBusinessPartnerSupplierData" yaml:"BusinessPartnerDataPlatformBusinessPartnerSupplierData"`
	PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice `boil:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData" json:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData" toml:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData" yaml:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData"`
	BuyerDataPlatformOrdersHeaderData                                                    DataPlatformOrdersHeaderDatumSlice                           `boil:"BuyerDataPlatformOrdersHeaderData" json:"BuyerDataPlatformOrdersHeaderData" toml:"BuyerDataPlatformOrdersHeaderData" yaml:"BuyerDataPlatformOrdersHeaderData"`
	SellerDataPlatformOrdersHeaderData                                                   DataPlatformOrdersHeaderDatumSlice                           `boil:"SellerDataPlatformOrdersHeaderData" json:"SellerDataPlatformOrdersHeaderData" toml:"SellerDataPlatformOrdersHeaderData" yaml:"SellerDataPlatformOrdersHeaderData"`
	BusinessPartnerDataPlatformOrdersHeaderPartnerData                                   DataPlatformOrdersHeaderPartnerDatumSlice                    `boil:"BusinessPartnerDataPlatformOrdersHeaderPartnerData" json:"BusinessPartnerDataPlatformOrdersHeaderPartnerData" toml:"BusinessPartnerDataPlatformOrdersHeaderPartnerData" yaml:"BusinessPartnerDataPlatformOrdersHeaderPartnerData"`
	BusinessPartnerDataPlatformPlantGeneralData                                          DataPlatformPlantGeneralDatumSlice                           `boil:"BusinessPartnerDataPlatformPlantGeneralData" json:"BusinessPartnerDataPlatformPlantGeneralData" toml:"BusinessPartnerDataPlatformPlantGeneralData" yaml:"BusinessPartnerDataPlatformPlantGeneralData"`
	BusinessPartnerDataPlatformProductMasterBPPlantData                                  DataPlatformProductMasterBPPlantDatumSlice                   `boil:"BusinessPartnerDataPlatformProductMasterBPPlantData" json:"BusinessPartnerDataPlatformProductMasterBPPlantData" toml:"BusinessPartnerDataPlatformProductMasterBPPlantData" yaml:"BusinessPartnerDataPlatformProductMasterBPPlantData"`
	BusinessPartnerDataPlatformProductMasterBusinessPartnerData                          DataPlatformProductMasterBusinessPartnerDatumSlice           `boil:"BusinessPartnerDataPlatformProductMasterBusinessPartnerData" json:"BusinessPartnerDataPlatformProductMasterBusinessPartnerData" toml:"BusinessPartnerDataPlatformProductMasterBusinessPartnerData" yaml:"BusinessPartnerDataPlatformProductMasterBusinessPartnerData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerGeneralDatumR) NewStruct() *dataPlatformBusinessPartnerGeneralDatumR {
	return &dataPlatformBusinessPartnerGeneralDatumR{}
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetAddressIDDataPlatformAddressAddressDatum() *DataPlatformAddressAddressDatum {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformAddressAddressDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.CurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetIndustryDataPlatformIndustryIndustryDatum() *DataPlatformIndustryIndustryDatum {
	if r == nil {
		return nil
	}
	return r.IndustryDataPlatformIndustryIndustryDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetLanguageDataPlatformLanguageLanguageDatum() *DataPlatformLanguageLanguageDatum {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformLanguageLanguageDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformBusinessPartnerAccountingDatum() *DataPlatformBusinessPartnerAccountingDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerAccountingDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformBusinessPartnerCustomerData() DataPlatformBusinessPartnerCustomerDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerCustomerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData() DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice {
	if r == nil {
		return nil
	}
	return r.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformBusinessPartnerRoleData() DataPlatformBusinessPartnerRoleDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerRoleData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformBusinessPartnerSupplierData() DataPlatformBusinessPartnerSupplierDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerSupplierData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData() DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice {
	if r == nil {
		return nil
	}
	return r.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBuyerDataPlatformOrdersHeaderData() DataPlatformOrdersHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformOrdersHeaderData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetSellerDataPlatformOrdersHeaderData() DataPlatformOrdersHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.SellerDataPlatformOrdersHeaderData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformOrdersHeaderPartnerData() DataPlatformOrdersHeaderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformOrdersHeaderPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformPlantGeneralData() DataPlatformPlantGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformPlantGeneralData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformProductMasterBPPlantData() DataPlatformProductMasterBPPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterBPPlantData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformProductMasterBusinessPartnerData() DataPlatformProductMasterBusinessPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterBusinessPartnerData
}

// dataPlatformBusinessPartnerGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerGeneralDatumL struct{}

var (
	dataPlatformBusinessPartnerGeneralDatumAllColumns            = []string{"BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "CreationDate", "CreationTime", "Industry", "LegalEntityRegistration", "Country", "Language", "Currency", "LastChangeDate", "LastChangeTime", "OrganizationBPName1", "OrganizationBPName2", "OrganizationBPName3", "OrganizationBPName4", "BPGroup1", "BPGroup2", "BPGroup3", "BPGroup4", "BPGroup5", "OrganizationFoundationDate", "OrganizationLiquidationDate", "SearchTerm1", "SearchTerm2", "BusinessPartnerBirthplaceName", "BusinessPartnerDeathDate", "BusinessPartnerIsBlocked", "GroupBusinessPartnerName1", "GroupBusinessPartnerName2", "AddressID", "BusinessPartnerIDByExtSystem", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault = []string{"BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "CreationDate", "CreationTime", "Industry", "LegalEntityRegistration", "Country", "Language", "Currency", "LastChangeDate", "LastChangeTime", "OrganizationBPName1", "OrganizationBPName2", "OrganizationBPName3", "OrganizationBPName4", "BPGroup1", "BPGroup2", "BPGroup3", "BPGroup4", "BPGroup5", "OrganizationFoundationDate", "OrganizationLiquidationDate", "SearchTerm1", "SearchTerm2", "BusinessPartnerBirthplaceName", "BusinessPartnerDeathDate", "BusinessPartnerIsBlocked", "GroupBusinessPartnerName1", "GroupBusinessPartnerName2", "AddressID", "BusinessPartnerIDByExtSystem", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns     = []string{"BusinessPartner"}
	dataPlatformBusinessPartnerGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerGeneralDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerGeneralDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerGeneralDatum.
	DataPlatformBusinessPartnerGeneralDatumSlice []*DataPlatformBusinessPartnerGeneralDatum
	// DataPlatformBusinessPartnerGeneralDatumHook is the signature for custom DataPlatformBusinessPartnerGeneralDatum hook methods
	DataPlatformBusinessPartnerGeneralDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformBusinessPartnerGeneralDatum) error

	dataPlatformBusinessPartnerGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerGeneralDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerGeneralDatum{})
	dataPlatformBusinessPartnerGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerGeneralDatumType)
	dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks []DataPlatformBusinessPartnerGeneralDatumHook

var dataPlatformBusinessPartnerGeneralDatumBeforeInsertHooks []DataPlatformBusinessPartnerGeneralDatumHook
var dataPlatformBusinessPartnerGeneralDatumAfterInsertHooks []DataPlatformBusinessPartnerGeneralDatumHook

var dataPlatformBusinessPartnerGeneralDatumBeforeUpdateHooks []DataPlatformBusinessPartnerGeneralDatumHook
var dataPlatformBusinessPartnerGeneralDatumAfterUpdateHooks []DataPlatformBusinessPartnerGeneralDatumHook

var dataPlatformBusinessPartnerGeneralDatumBeforeDeleteHooks []DataPlatformBusinessPartnerGeneralDatumHook
var dataPlatformBusinessPartnerGeneralDatumAfterDeleteHooks []DataPlatformBusinessPartnerGeneralDatumHook

var dataPlatformBusinessPartnerGeneralDatumBeforeUpsertHooks []DataPlatformBusinessPartnerGeneralDatumHook
var dataPlatformBusinessPartnerGeneralDatumAfterUpsertHooks []DataPlatformBusinessPartnerGeneralDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformBusinessPartnerGeneralDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerGeneralDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformBusinessPartnerGeneralDatumHook registers your hook function for all future operations.
func AddDataPlatformBusinessPartnerGeneralDatumHook(hookPoint boil.HookPoint, dataPlatformBusinessPartnerGeneralDatumHook DataPlatformBusinessPartnerGeneralDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks = append(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformBusinessPartnerGeneralDatumBeforeInsertHooks = append(dataPlatformBusinessPartnerGeneralDatumBeforeInsertHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.AfterInsertHook:
		dataPlatformBusinessPartnerGeneralDatumAfterInsertHooks = append(dataPlatformBusinessPartnerGeneralDatumAfterInsertHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformBusinessPartnerGeneralDatumBeforeUpdateHooks = append(dataPlatformBusinessPartnerGeneralDatumBeforeUpdateHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformBusinessPartnerGeneralDatumAfterUpdateHooks = append(dataPlatformBusinessPartnerGeneralDatumAfterUpdateHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformBusinessPartnerGeneralDatumBeforeDeleteHooks = append(dataPlatformBusinessPartnerGeneralDatumBeforeDeleteHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformBusinessPartnerGeneralDatumAfterDeleteHooks = append(dataPlatformBusinessPartnerGeneralDatumAfterDeleteHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformBusinessPartnerGeneralDatumBeforeUpsertHooks = append(dataPlatformBusinessPartnerGeneralDatumBeforeUpsertHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformBusinessPartnerGeneralDatumAfterUpsertHooks = append(dataPlatformBusinessPartnerGeneralDatumAfterUpsertHooks, dataPlatformBusinessPartnerGeneralDatumHook)
	}
}

// One returns a single dataPlatformBusinessPartnerGeneralDatum record from the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerGeneralDatum, error) {
	o := &DataPlatformBusinessPartnerGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_general_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerGeneralDatum records from the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerGeneralDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerGeneralDatum slice")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerGeneralDatum records in the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_general_data exists")
	}

	return count > 0, nil
}

// AddressIDDataPlatformAddressAddressDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddressIDDataPlatformAddressAddressDatum(mods ...qm.QueryMod) dataPlatformAddressAddressDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`AddressID` = ?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformAddressAddressData(queryMods...)
}

// CountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) CountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.Country),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// CurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) CurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.Currency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// IndustryDataPlatformIndustryIndustryDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) IndustryDataPlatformIndustryIndustryDatum(mods ...qm.QueryMod) dataPlatformIndustryIndustryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Industry` = ?", o.Industry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformIndustryIndustryData(queryMods...)
}

// LanguageDataPlatformLanguageLanguageDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) LanguageDataPlatformLanguageLanguageDatum(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.Language),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformLanguageLanguageData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerAccountingDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformBusinessPartnerAccountingDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerAccountingDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerAccountingData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerCustomerData retrieves all the data_platform_business_partner_customer_datum's DataPlatformBusinessPartnerCustomerData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformBusinessPartnerCustomerData(mods ...qm.QueryMod) dataPlatformBusinessPartnerCustomerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_customer_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerCustomerData(queryMods...)
}

// PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData retrieves all the data_platform_business_partner_customer_partner_function_datum's DataPlatformBusinessPartnerCustomerPartnerFunctionData with an executor via PartnerFunctionBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData(mods ...qm.QueryMod) dataPlatformBusinessPartnerCustomerPartnerFunctionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_customer_partner_function_data`.`PartnerFunctionBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerCustomerPartnerFunctionData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerRoleData retrieves all the data_platform_business_partner_role_datum's DataPlatformBusinessPartnerRoleData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformBusinessPartnerRoleData(mods ...qm.QueryMod) dataPlatformBusinessPartnerRoleDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_role_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerRoleData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerSupplierData retrieves all the data_platform_business_partner_supplier_datum's DataPlatformBusinessPartnerSupplierData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformBusinessPartnerSupplierData(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_supplier_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerSupplierData(queryMods...)
}

// PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData retrieves all the data_platform_business_partner_supplier_partner_function_datum's DataPlatformBusinessPartnerSupplierPartnerFunctionData with an executor via PartnerFunctionBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_supplier_partner_function_data`.`PartnerFunctionBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerSupplierPartnerFunctionData(queryMods...)
}

// BuyerDataPlatformOrdersHeaderData retrieves all the data_platform_orders_header_datum's DataPlatformOrdersHeaderData with an executor via Buyer column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BuyerDataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_data`.`Buyer`=?", o.BusinessPartner),
	)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// SellerDataPlatformOrdersHeaderData retrieves all the data_platform_orders_header_datum's DataPlatformOrdersHeaderData with an executor via Seller column.
func (o *DataPlatformBusinessPartnerGeneralDatum) SellerDataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_data`.`Seller`=?", o.BusinessPartner),
	)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// BusinessPartnerDataPlatformOrdersHeaderPartnerData retrieves all the data_platform_orders_header_partner_datum's DataPlatformOrdersHeaderPartnerData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformOrdersHeaderPartnerData(mods ...qm.QueryMod) dataPlatformOrdersHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_partner_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformOrdersHeaderPartnerData(queryMods...)
}

// BusinessPartnerDataPlatformPlantGeneralData retrieves all the data_platform_plant_general_datum's DataPlatformPlantGeneralData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformPlantGeneralData(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_plant_general_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformPlantGeneralData(queryMods...)
}

// BusinessPartnerDataPlatformProductMasterBPPlantData retrieves all the data_platform_product_master_bp_plant_datum's DataPlatformProductMasterBPPlantData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformProductMasterBPPlantData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_bp_plant_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// BusinessPartnerDataPlatformProductMasterBusinessPartnerData retrieves all the data_platform_product_master_business_partner_datum's DataPlatformProductMasterBusinessPartnerData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformProductMasterBusinessPartnerData(mods ...qm.QueryMod) dataPlatformProductMasterBusinessPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_business_partner_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductMasterBusinessPartnerData(queryMods...)
}

// LoadAddressIDDataPlatformAddressAddressDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadAddressIDDataPlatformAddressAddressDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		if !queries.IsNil(object.AddressID) {
			args = append(args, object.AddressID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AddressID) {
				args = append(args, obj.AddressID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_address_address_data`),
		qm.WhereIn(`data_platform_address_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformAddressAddressDatum")
	}

	var resultSlice []*DataPlatformAddressAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformAddressAddressDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_address_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_address_address_data")
	}

	if len(dataPlatformAddressAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AddressIDDataPlatformAddressAddressDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformAddressAddressDatumR{}
		}
		foreign.R.AddressIDDataPlatformBusinessPartnerGeneralData = append(foreign.R.AddressIDDataPlatformBusinessPartnerGeneralData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformAddressAddressDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformAddressAddressDatumR{}
				}
				foreign.R.AddressIDDataPlatformBusinessPartnerGeneralData = append(foreign.R.AddressIDDataPlatformBusinessPartnerGeneralData, local)
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.Country)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(dataPlatformCountryCountryDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryDataPlatformCountryCountryDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformCountryCountryDatumR{}
		}
		foreign.R.CountryDataPlatformBusinessPartnerGeneralData = append(foreign.R.CountryDataPlatformBusinessPartnerGeneralData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Country == foreign.Country {
				local.R.CountryDataPlatformCountryCountryDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformCountryCountryDatumR{}
				}
				foreign.R.CountryDataPlatformBusinessPartnerGeneralData = append(foreign.R.CountryDataPlatformBusinessPartnerGeneralData, local)
				break
			}
		}
	}

	return nil
}

// LoadCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.Currency)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Currency {
					continue Outer
				}
			}

			args = append(args, obj.Currency)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(dataPlatformCurrencyCurrencyDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CurrencyDataPlatformCurrencyCurrencyDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformCurrencyCurrencyDatumR{}
		}
		foreign.R.CurrencyDataPlatformBusinessPartnerGeneralData = append(foreign.R.CurrencyDataPlatformBusinessPartnerGeneralData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Currency == foreign.Currency {
				local.R.CurrencyDataPlatformCurrencyCurrencyDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformCurrencyCurrencyDatumR{}
				}
				foreign.R.CurrencyDataPlatformBusinessPartnerGeneralData = append(foreign.R.CurrencyDataPlatformBusinessPartnerGeneralData, local)
				break
			}
		}
	}

	return nil
}

// LoadIndustryDataPlatformIndustryIndustryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadIndustryDataPlatformIndustryIndustryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		if !queries.IsNil(object.Industry) {
			args = append(args, object.Industry)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Industry) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Industry) {
				args = append(args, obj.Industry)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_industry_industry_data`),
		qm.WhereIn(`data_platform_industry_industry_data.Industry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformIndustryIndustryDatum")
	}

	var resultSlice []*DataPlatformIndustryIndustryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformIndustryIndustryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_industry_industry_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_industry_industry_data")
	}

	if len(dataPlatformIndustryIndustryDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IndustryDataPlatformIndustryIndustryDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformIndustryIndustryDatumR{}
		}
		foreign.R.IndustryDataPlatformBusinessPartnerGeneralData = append(foreign.R.IndustryDataPlatformBusinessPartnerGeneralData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Industry, foreign.Industry) {
				local.R.IndustryDataPlatformIndustryIndustryDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformIndustryIndustryDatumR{}
				}
				foreign.R.IndustryDataPlatformBusinessPartnerGeneralData = append(foreign.R.IndustryDataPlatformBusinessPartnerGeneralData, local)
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformLanguageLanguageDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.Language)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_data`),
		qm.WhereIn(`data_platform_language_language_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformLanguageLanguageDatum")
	}

	var resultSlice []*DataPlatformLanguageLanguageDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformLanguageLanguageDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_language_language_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_data")
	}

	if len(dataPlatformLanguageLanguageDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LanguageDataPlatformLanguageLanguageDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformLanguageLanguageDatumR{}
		}
		foreign.R.LanguageDataPlatformBusinessPartnerGeneralData = append(foreign.R.LanguageDataPlatformBusinessPartnerGeneralData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformLanguageLanguageDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformLanguageLanguageDatumR{}
				}
				foreign.R.LanguageDataPlatformBusinessPartnerGeneralData = append(foreign.R.LanguageDataPlatformBusinessPartnerGeneralData, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerAccountingDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerAccountingDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_accounting_data`),
		qm.WhereIn(`data_platform_business_partner_accounting_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerAccountingDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerAccountingDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerAccountingDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_accounting_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_accounting_data")
	}

	if len(dataPlatformBusinessPartnerAccountingDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerAccountingDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerAccountingDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerAccountingDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerAccountingDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerCustomerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerCustomerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_customer_data`),
		qm.WhereIn(`data_platform_business_partner_customer_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_customer_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerCustomerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_customer_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_customer_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_customer_data")
	}

	if len(dataPlatformBusinessPartnerCustomerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerCustomerDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData = append(local.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerCustomerDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_customer_partner_function_data`),
		qm.WhereIn(`data_platform_business_partner_customer_partner_function_data.PartnerFunctionBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_customer_partner_function_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_customer_partner_function_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_customer_partner_function_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_customer_partner_function_data")
	}

	if len(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
			}
			foreign.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.PartnerFunctionBusinessPartner) {
				local.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(local.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
				}
				foreign.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerRoleData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerRoleData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_role_data`),
		qm.WhereIn(`data_platform_business_partner_role_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_role_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerRoleDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_role_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_role_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_role_data")
	}

	if len(dataPlatformBusinessPartnerRoleDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformBusinessPartnerRoleData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerRoleDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerRoleData = append(local.R.BusinessPartnerDataPlatformBusinessPartnerRoleData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerRoleDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerSupplierData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerSupplierData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_supplier_data`),
		qm.WhereIn(`data_platform_business_partner_supplier_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_supplier_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerSupplierDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_supplier_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_supplier_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_supplier_data")
	}

	if len(dataPlatformBusinessPartnerSupplierDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerSupplierDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData = append(local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerSupplierDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_supplier_partner_function_data`),
		qm.WhereIn(`data_platform_business_partner_supplier_partner_function_data.PartnerFunctionBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_supplier_partner_function_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_supplier_partner_function_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_supplier_partner_function_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_supplier_partner_function_data")
	}

	if len(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
			}
			foreign.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.PartnerFunctionBusinessPartner) {
				local.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(local.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
				}
				foreign.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformOrdersHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBuyerDataPlatformOrdersHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if len(dataPlatformOrdersHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BuyerDataPlatformOrdersHeaderData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformOrdersHeaderDatumR{}
			}
			foreign.R.BuyerDataPlatformBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Buyer {
				local.R.BuyerDataPlatformOrdersHeaderData = append(local.R.BuyerDataPlatformOrdersHeaderData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformOrdersHeaderDatumR{}
				}
				foreign.R.BuyerDataPlatformBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadSellerDataPlatformOrdersHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadSellerDataPlatformOrdersHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.Seller in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if len(dataPlatformOrdersHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SellerDataPlatformOrdersHeaderData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformOrdersHeaderDatumR{}
			}
			foreign.R.SellerDataPlatformBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Seller {
				local.R.SellerDataPlatformOrdersHeaderData = append(local.R.SellerDataPlatformOrdersHeaderData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformOrdersHeaderDatumR{}
				}
				foreign.R.SellerDataPlatformBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformOrdersHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformOrdersHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_partner_data`),
		qm.WhereIn(`data_platform_orders_header_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_partner_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_partner_data")
	}

	if len(dataPlatformOrdersHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData = append(local.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformOrdersHeaderPartnerDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformPlantGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformPlantGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_plant_general_data")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_plant_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(dataPlatformPlantGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformPlantGeneralData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformPlantGeneralDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformPlantGeneralData = append(local.R.BusinessPartnerDataPlatformPlantGeneralData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformPlantGeneralDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductMasterBPPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformProductMasterBPPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_bp_plant_data")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_bp_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if len(dataPlatformProductMasterBPPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformProductMasterBPPlantData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterBPPlantData = append(local.R.BusinessPartnerDataPlatformProductMasterBPPlantData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductMasterBusinessPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformProductMasterBusinessPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_business_partner_data`),
		qm.WhereIn(`data_platform_product_master_business_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_business_partner_data")
	}

	var resultSlice []*DataPlatformProductMasterBusinessPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_business_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_business_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_business_partner_data")
	}

	if len(dataPlatformProductMasterBusinessPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterBusinessPartnerDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData = append(local.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterBusinessPartnerDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// SetAddressIDDataPlatformAddressAddressDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to related.
// Adds o to related.R.AddressIDDataPlatformBusinessPartnerGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformAddressAddressDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.AddressID, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AddressID, related.AddressID)
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			AddressIDDataPlatformAddressAddressDatum: related,
		}
	} else {
		o.R.AddressIDDataPlatformAddressAddressDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformBusinessPartnerGeneralData: DataPlatformBusinessPartnerGeneralDatumSlice{o},
		}
	} else {
		related.R.AddressIDDataPlatformBusinessPartnerGeneralData = append(related.R.AddressIDDataPlatformBusinessPartnerGeneralData, o)
	}

	return nil
}

// RemoveAddressIDDataPlatformAddressAddressDatum relationship.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformAddressAddressDatum) error {
	var err error

	queries.SetScanner(&o.AddressID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformAddressAddressDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AddressIDDataPlatformBusinessPartnerGeneralData {
		if queries.Equal(o.AddressID, ri.AddressID) {
			continue
		}

		ln := len(related.R.AddressIDDataPlatformBusinessPartnerGeneralData)
		if ln > 1 && i < ln-1 {
			related.R.AddressIDDataPlatformBusinessPartnerGeneralData[i] = related.R.AddressIDDataPlatformBusinessPartnerGeneralData[ln-1]
		}
		related.R.AddressIDDataPlatformBusinessPartnerGeneralData = related.R.AddressIDDataPlatformBusinessPartnerGeneralData[:ln-1]
		break
	}
	return nil
}

// SetCountryDataPlatformCountryCountryDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.CountryDataPlatformCountryCountryDatum to related.
// Adds o to related.R.CountryDataPlatformBusinessPartnerGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Country = related.Country
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			CountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.CountryDataPlatformCountryCountryDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformCountryCountryDatumR{
			CountryDataPlatformBusinessPartnerGeneralData: DataPlatformBusinessPartnerGeneralDatumSlice{o},
		}
	} else {
		related.R.CountryDataPlatformBusinessPartnerGeneralData = append(related.R.CountryDataPlatformBusinessPartnerGeneralData, o)
	}

	return nil
}

// SetCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.CurrencyDataPlatformCurrencyCurrencyDatum to related.
// Adds o to related.R.CurrencyDataPlatformBusinessPartnerGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Currency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Currency = related.Currency
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			CurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.CurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformCurrencyCurrencyDatumR{
			CurrencyDataPlatformBusinessPartnerGeneralData: DataPlatformBusinessPartnerGeneralDatumSlice{o},
		}
	} else {
		related.R.CurrencyDataPlatformBusinessPartnerGeneralData = append(related.R.CurrencyDataPlatformBusinessPartnerGeneralData, o)
	}

	return nil
}

// SetIndustryDataPlatformIndustryIndustryDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.IndustryDataPlatformIndustryIndustryDatum to related.
// Adds o to related.R.IndustryDataPlatformBusinessPartnerGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetIndustryDataPlatformIndustryIndustryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformIndustryIndustryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Industry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Industry, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Industry, related.Industry)
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			IndustryDataPlatformIndustryIndustryDatum: related,
		}
	} else {
		o.R.IndustryDataPlatformIndustryIndustryDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformIndustryIndustryDatumR{
			IndustryDataPlatformBusinessPartnerGeneralData: DataPlatformBusinessPartnerGeneralDatumSlice{o},
		}
	} else {
		related.R.IndustryDataPlatformBusinessPartnerGeneralData = append(related.R.IndustryDataPlatformBusinessPartnerGeneralData, o)
	}

	return nil
}

// RemoveIndustryDataPlatformIndustryIndustryDatum relationship.
// Sets o.R.IndustryDataPlatformIndustryIndustryDatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveIndustryDataPlatformIndustryIndustryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformIndustryIndustryDatum) error {
	var err error

	queries.SetScanner(&o.Industry, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("Industry")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IndustryDataPlatformIndustryIndustryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IndustryDataPlatformBusinessPartnerGeneralData {
		if queries.Equal(o.Industry, ri.Industry) {
			continue
		}

		ln := len(related.R.IndustryDataPlatformBusinessPartnerGeneralData)
		if ln > 1 && i < ln-1 {
			related.R.IndustryDataPlatformBusinessPartnerGeneralData[i] = related.R.IndustryDataPlatformBusinessPartnerGeneralData[ln-1]
		}
		related.R.IndustryDataPlatformBusinessPartnerGeneralData = related.R.IndustryDataPlatformBusinessPartnerGeneralData[:ln-1]
		break
	}
	return nil
}

// SetLanguageDataPlatformLanguageLanguageDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum to related.
// Adds o to related.R.LanguageDataPlatformBusinessPartnerGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformLanguageLanguageDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Language = related.Language
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			LanguageDataPlatformLanguageLanguageDatum: related,
		}
	} else {
		o.R.LanguageDataPlatformLanguageLanguageDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformLanguageLanguageDatumR{
			LanguageDataPlatformBusinessPartnerGeneralData: DataPlatformBusinessPartnerGeneralDatumSlice{o},
		}
	} else {
		related.R.LanguageDataPlatformBusinessPartnerGeneralData = append(related.R.LanguageDataPlatformBusinessPartnerGeneralData, o)
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerAccountingDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerAccountingDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetBusinessPartnerDataPlatformBusinessPartnerAccountingDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerAccountingDatum) error {
	var err error

	if insert {
		related.BusinessPartner = o.BusinessPartner

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `data_platform_business_partner_accounting_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerAccountingDatumPrimaryKeyColumns),
		)
		values := []interface{}{o.BusinessPartner, related.BusinessPartner}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.BusinessPartner = o.BusinessPartner
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformBusinessPartnerAccountingDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerAccountingDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerAccountingDatumR{
			BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: o,
		}
	} else {
		related.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = o
	}
	return nil
}

// AddBusinessPartnerDataPlatformBusinessPartnerCustomerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum appropriately.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformBusinessPartnerCustomerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerCustomerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_customer_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Customer}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformBusinessPartnerCustomerData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData = append(o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerCustomerDatumR{
				BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData.
// Sets related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum appropriately.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PartnerFunctionBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_customer_partner_function_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PartnerFunctionBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Customer, rel.PartnerCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PartnerFunctionBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData: related,
		}
	} else {
		o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{
				PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// SetPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData accordingly.
// Replaces o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData with related.
// Sets related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData accordingly.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) error {
	query := "update `data_platform_business_partner_customer_partner_function_data` set `PartnerFunctionBusinessPartner` = null where `PartnerFunctionBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData {
			queries.SetScanner(&rel.PartnerFunctionBusinessPartner, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = nil
		}
		o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = nil
	}

	return o.AddPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData(ctx, exec, insert, related...)
}

// RemovePartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData relationships from objects passed in.
// Removes related items from R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData (uses pointer comparison, removal does not keep order)
// Sets related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum.
func (o *DataPlatformBusinessPartnerGeneralDatum) RemovePartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PartnerFunctionBusinessPartner, nil)
		if rel.R != nil {
			rel.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("PartnerFunctionBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData {
			if rel != ri {
				continue
			}

			ln := len(o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData)
			if ln > 1 && i < ln-1 {
				o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData[i] = o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData[ln-1]
			}
			o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformBusinessPartnerRoleData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBusinessPartnerRoleData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum appropriately.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformBusinessPartnerRoleData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerRoleDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_role_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerRoleDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.BusinessPartnerRole, rel.ValidityEndDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformBusinessPartnerRoleData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerRoleData = append(o.R.BusinessPartnerDataPlatformBusinessPartnerRoleData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerRoleDatumR{
				BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerDataPlatformBusinessPartnerSupplierData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum appropriately.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformBusinessPartnerSupplierData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerSupplierDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_supplier_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Supplier}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData = append(o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerSupplierDatumR{
				BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData.
// Sets related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum appropriately.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PartnerFunctionBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_supplier_partner_function_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PartnerFunctionBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Supplier, rel.PartnerCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PartnerFunctionBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData: related,
		}
	} else {
		o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{
				PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// SetPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData accordingly.
// Replaces o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData with related.
// Sets related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData accordingly.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) error {
	query := "update `data_platform_business_partner_supplier_partner_function_data` set `PartnerFunctionBusinessPartner` = null where `PartnerFunctionBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData {
			queries.SetScanner(&rel.PartnerFunctionBusinessPartner, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = nil
		}
		o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = nil
	}

	return o.AddPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData(ctx, exec, insert, related...)
}

// RemovePartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData relationships from objects passed in.
// Removes related items from R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData (uses pointer comparison, removal does not keep order)
// Sets related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum.
func (o *DataPlatformBusinessPartnerGeneralDatum) RemovePartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PartnerFunctionBusinessPartner, nil)
		if rel.R != nil {
			rel.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("PartnerFunctionBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData {
			if rel != ri {
				continue
			}

			ln := len(o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData)
			if ln > 1 && i < ln-1 {
				o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData[i] = o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData[ln-1]
			}
			o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData[:ln-1]
			break
		}
	}

	return nil
}

// AddBuyerDataPlatformOrdersHeaderData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformOrdersHeaderData.
// Sets related.R.BuyerDataPlatformBusinessPartnerGeneralDatum appropriately.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBuyerDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BuyerDataPlatformOrdersHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformOrdersHeaderData = append(o.R.BuyerDataPlatformOrdersHeaderData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformOrdersHeaderDatumR{
				BuyerDataPlatformBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.BuyerDataPlatformBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddSellerDataPlatformOrdersHeaderData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.SellerDataPlatformOrdersHeaderData.
// Sets related.R.SellerDataPlatformBusinessPartnerGeneralDatum appropriately.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddSellerDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Seller = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Seller"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Seller = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			SellerDataPlatformOrdersHeaderData: related,
		}
	} else {
		o.R.SellerDataPlatformOrdersHeaderData = append(o.R.SellerDataPlatformOrdersHeaderData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformOrdersHeaderDatumR{
				SellerDataPlatformBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.SellerDataPlatformBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerDataPlatformOrdersHeaderPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum appropriately.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformOrdersHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.OrderID, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformOrdersHeaderPartnerData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData = append(o.R.BusinessPartnerDataPlatformOrdersHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformOrdersHeaderPartnerDatumR{
				BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerDataPlatformPlantGeneralData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformPlantGeneralData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum appropriately.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlantGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformPlantGeneralData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformPlantGeneralData = append(o.R.BusinessPartnerDataPlatformPlantGeneralData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformPlantGeneralDatumR{
				BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerDataPlatformProductMasterBPPlantData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductMasterBPPlantData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum appropriately.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformProductMasterBPPlantData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterBPPlantData = append(o.R.BusinessPartnerDataPlatformProductMasterBPPlantData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterBPPlantDatumR{
				BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerDataPlatformProductMasterBusinessPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum appropriately.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformProductMasterBusinessPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBusinessPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_business_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.ValidityEndDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformProductMasterBusinessPartnerData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData = append(o.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterBusinessPartnerDatumR{
				BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = o
		}
	}
	return nil
}

// DataPlatformBusinessPartnerGeneralData retrieves all the records using an executor.
func DataPlatformBusinessPartnerGeneralData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_general_data`.*"})
	}

	return dataPlatformBusinessPartnerGeneralDatumQuery{q}
}

// FindDataPlatformBusinessPartnerGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, selectCols ...string) (*DataPlatformBusinessPartnerGeneralDatum, error) {
	dataPlatformBusinessPartnerGeneralDatumObj := &DataPlatformBusinessPartnerGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_general_data` where `BusinessPartner`=?", sel,
	)

	q := queries.Raw(query, businessPartner)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_general_data")
	}

	if err = dataPlatformBusinessPartnerGeneralDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformBusinessPartnerGeneralDatumObj, err
	}

	return dataPlatformBusinessPartnerGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_general_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumInsertCache[key]
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformBusinessPartnerGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumUpdateCache[key]
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_business_partner_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, append(wl, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_business_partner_general_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_business_partner_general_data")
	}

	if !cached {
		dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_business_partner_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_business_partner_general_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformBusinessPartnerGeneralDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformBusinessPartnerGeneralDatumUniqueColumns = []string{
	"BusinessPartner",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_general_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumUpsertCache[key]
	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformBusinessPartnerGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformBusinessPartnerGeneralDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_general_data` WHERE `BusinessPartner`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_business_partner_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_business_partner_general_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformBusinessPartnerGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_general_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformBusinessPartnerGeneralDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerGeneralDatum(ctx, exec, o.BusinessPartner)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_general_data`.* FROM `data_platform_business_partner_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerGeneralDatumExists checks if the DataPlatformBusinessPartnerGeneralDatum row exists.
func DataPlatformBusinessPartnerGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_general_data` where `BusinessPartner`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerGeneralDatum row exists.
func (o *DataPlatformBusinessPartnerGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerGeneralDatumExists(ctx, exec, o.BusinessPartner)
}
