// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerGeneralDatum is an object representing the database table.
type DataPlatformBusinessPartnerGeneralDatum struct {
	BusinessPartner               int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	BusinessPartnerFullName       null.String `boil:"BusinessPartnerFullName" json:"BusinessPartnerFullName,omitempty" toml:"BusinessPartnerFullName" yaml:"BusinessPartnerFullName,omitempty"`
	BusinessPartnerName           string      `boil:"BusinessPartnerName" json:"BusinessPartnerName" toml:"BusinessPartnerName" yaml:"BusinessPartnerName"`
	Industry                      null.String `boil:"Industry" json:"Industry,omitempty" toml:"Industry" yaml:"Industry,omitempty"`
	LegalEntityRegistration       null.String `boil:"LegalEntityRegistration" json:"LegalEntityRegistration,omitempty" toml:"LegalEntityRegistration" yaml:"LegalEntityRegistration,omitempty"`
	Country                       string      `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	Language                      string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	Currency                      string      `boil:"Currency" json:"Currency" toml:"Currency" yaml:"Currency"`
	OrganizationBPName1           null.String `boil:"OrganizationBPName1" json:"OrganizationBPName1,omitempty" toml:"OrganizationBPName1" yaml:"OrganizationBPName1,omitempty"`
	OrganizationBPName2           null.String `boil:"OrganizationBPName2" json:"OrganizationBPName2,omitempty" toml:"OrganizationBPName2" yaml:"OrganizationBPName2,omitempty"`
	OrganizationBPName3           null.String `boil:"OrganizationBPName3" json:"OrganizationBPName3,omitempty" toml:"OrganizationBPName3" yaml:"OrganizationBPName3,omitempty"`
	OrganizationBPName4           null.String `boil:"OrganizationBPName4" json:"OrganizationBPName4,omitempty" toml:"OrganizationBPName4" yaml:"OrganizationBPName4,omitempty"`
	BPTag1                        null.String `boil:"BPTag1" json:"BPTag1,omitempty" toml:"BPTag1" yaml:"BPTag1,omitempty"`
	BPTag2                        null.String `boil:"BPTag2" json:"BPTag2,omitempty" toml:"BPTag2" yaml:"BPTag2,omitempty"`
	BPTag3                        null.String `boil:"BPTag3" json:"BPTag3,omitempty" toml:"BPTag3" yaml:"BPTag3,omitempty"`
	BPTag4                        null.String `boil:"BPTag4" json:"BPTag4,omitempty" toml:"BPTag4" yaml:"BPTag4,omitempty"`
	OrganizationFoundationDate    null.String `boil:"OrganizationFoundationDate" json:"OrganizationFoundationDate,omitempty" toml:"OrganizationFoundationDate" yaml:"OrganizationFoundationDate,omitempty"`
	OrganizationLiquidationDate   null.String `boil:"OrganizationLiquidationDate" json:"OrganizationLiquidationDate,omitempty" toml:"OrganizationLiquidationDate" yaml:"OrganizationLiquidationDate,omitempty"`
	BusinessPartnerBirthplaceName null.String `boil:"BusinessPartnerBirthplaceName" json:"BusinessPartnerBirthplaceName,omitempty" toml:"BusinessPartnerBirthplaceName" yaml:"BusinessPartnerBirthplaceName,omitempty"`
	BusinessPartnerDeathDate      null.String `boil:"BusinessPartnerDeathDate" json:"BusinessPartnerDeathDate,omitempty" toml:"BusinessPartnerDeathDate" yaml:"BusinessPartnerDeathDate,omitempty"`
	GroupBusinessPartnerName1     null.String `boil:"GroupBusinessPartnerName1" json:"GroupBusinessPartnerName1,omitempty" toml:"GroupBusinessPartnerName1" yaml:"GroupBusinessPartnerName1,omitempty"`
	GroupBusinessPartnerName2     null.String `boil:"GroupBusinessPartnerName2" json:"GroupBusinessPartnerName2,omitempty" toml:"GroupBusinessPartnerName2" yaml:"GroupBusinessPartnerName2,omitempty"`
	AddressID                     null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`
	BusinessPartnerIDByExtSystem  null.String `boil:"BusinessPartnerIDByExtSystem" json:"BusinessPartnerIDByExtSystem,omitempty" toml:"BusinessPartnerIDByExtSystem" yaml:"BusinessPartnerIDByExtSystem,omitempty"`
	BusinessPartnerIsBlocked      null.Bool   `boil:"BusinessPartnerIsBlocked" json:"BusinessPartnerIsBlocked,omitempty" toml:"BusinessPartnerIsBlocked" yaml:"BusinessPartnerIsBlocked,omitempty"`
	CreationDate                  string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion           null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBusinessPartnerGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerGeneralDatumColumns = struct {
	BusinessPartner               string
	BusinessPartnerFullName       string
	BusinessPartnerName           string
	Industry                      string
	LegalEntityRegistration       string
	Country                       string
	Language                      string
	Currency                      string
	OrganizationBPName1           string
	OrganizationBPName2           string
	OrganizationBPName3           string
	OrganizationBPName4           string
	BPTag1                        string
	BPTag2                        string
	BPTag3                        string
	BPTag4                        string
	OrganizationFoundationDate    string
	OrganizationLiquidationDate   string
	BusinessPartnerBirthplaceName string
	BusinessPartnerDeathDate      string
	GroupBusinessPartnerName1     string
	GroupBusinessPartnerName2     string
	AddressID                     string
	BusinessPartnerIDByExtSystem  string
	BusinessPartnerIsBlocked      string
	CreationDate                  string
	LastChangeDate                string
	IsMarkedForDeletion           string
}{
	BusinessPartner:               "BusinessPartner",
	BusinessPartnerFullName:       "BusinessPartnerFullName",
	BusinessPartnerName:           "BusinessPartnerName",
	Industry:                      "Industry",
	LegalEntityRegistration:       "LegalEntityRegistration",
	Country:                       "Country",
	Language:                      "Language",
	Currency:                      "Currency",
	OrganizationBPName1:           "OrganizationBPName1",
	OrganizationBPName2:           "OrganizationBPName2",
	OrganizationBPName3:           "OrganizationBPName3",
	OrganizationBPName4:           "OrganizationBPName4",
	BPTag1:                        "BPTag1",
	BPTag2:                        "BPTag2",
	BPTag3:                        "BPTag3",
	BPTag4:                        "BPTag4",
	OrganizationFoundationDate:    "OrganizationFoundationDate",
	OrganizationLiquidationDate:   "OrganizationLiquidationDate",
	BusinessPartnerBirthplaceName: "BusinessPartnerBirthplaceName",
	BusinessPartnerDeathDate:      "BusinessPartnerDeathDate",
	GroupBusinessPartnerName1:     "GroupBusinessPartnerName1",
	GroupBusinessPartnerName2:     "GroupBusinessPartnerName2",
	AddressID:                     "AddressID",
	BusinessPartnerIDByExtSystem:  "BusinessPartnerIDByExtSystem",
	BusinessPartnerIsBlocked:      "BusinessPartnerIsBlocked",
	CreationDate:                  "CreationDate",
	LastChangeDate:                "LastChangeDate",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
}

var DataPlatformBusinessPartnerGeneralDatumTableColumns = struct {
	BusinessPartner               string
	BusinessPartnerFullName       string
	BusinessPartnerName           string
	Industry                      string
	LegalEntityRegistration       string
	Country                       string
	Language                      string
	Currency                      string
	OrganizationBPName1           string
	OrganizationBPName2           string
	OrganizationBPName3           string
	OrganizationBPName4           string
	BPTag1                        string
	BPTag2                        string
	BPTag3                        string
	BPTag4                        string
	OrganizationFoundationDate    string
	OrganizationLiquidationDate   string
	BusinessPartnerBirthplaceName string
	BusinessPartnerDeathDate      string
	GroupBusinessPartnerName1     string
	GroupBusinessPartnerName2     string
	AddressID                     string
	BusinessPartnerIDByExtSystem  string
	BusinessPartnerIsBlocked      string
	CreationDate                  string
	LastChangeDate                string
	IsMarkedForDeletion           string
}{
	BusinessPartner:               "data_platform_business_partner_general_data.BusinessPartner",
	BusinessPartnerFullName:       "data_platform_business_partner_general_data.BusinessPartnerFullName",
	BusinessPartnerName:           "data_platform_business_partner_general_data.BusinessPartnerName",
	Industry:                      "data_platform_business_partner_general_data.Industry",
	LegalEntityRegistration:       "data_platform_business_partner_general_data.LegalEntityRegistration",
	Country:                       "data_platform_business_partner_general_data.Country",
	Language:                      "data_platform_business_partner_general_data.Language",
	Currency:                      "data_platform_business_partner_general_data.Currency",
	OrganizationBPName1:           "data_platform_business_partner_general_data.OrganizationBPName1",
	OrganizationBPName2:           "data_platform_business_partner_general_data.OrganizationBPName2",
	OrganizationBPName3:           "data_platform_business_partner_general_data.OrganizationBPName3",
	OrganizationBPName4:           "data_platform_business_partner_general_data.OrganizationBPName4",
	BPTag1:                        "data_platform_business_partner_general_data.BPTag1",
	BPTag2:                        "data_platform_business_partner_general_data.BPTag2",
	BPTag3:                        "data_platform_business_partner_general_data.BPTag3",
	BPTag4:                        "data_platform_business_partner_general_data.BPTag4",
	OrganizationFoundationDate:    "data_platform_business_partner_general_data.OrganizationFoundationDate",
	OrganizationLiquidationDate:   "data_platform_business_partner_general_data.OrganizationLiquidationDate",
	BusinessPartnerBirthplaceName: "data_platform_business_partner_general_data.BusinessPartnerBirthplaceName",
	BusinessPartnerDeathDate:      "data_platform_business_partner_general_data.BusinessPartnerDeathDate",
	GroupBusinessPartnerName1:     "data_platform_business_partner_general_data.GroupBusinessPartnerName1",
	GroupBusinessPartnerName2:     "data_platform_business_partner_general_data.GroupBusinessPartnerName2",
	AddressID:                     "data_platform_business_partner_general_data.AddressID",
	BusinessPartnerIDByExtSystem:  "data_platform_business_partner_general_data.BusinessPartnerIDByExtSystem",
	BusinessPartnerIsBlocked:      "data_platform_business_partner_general_data.BusinessPartnerIsBlocked",
	CreationDate:                  "data_platform_business_partner_general_data.CreationDate",
	LastChangeDate:                "data_platform_business_partner_general_data.LastChangeDate",
	IsMarkedForDeletion:           "data_platform_business_partner_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformBusinessPartnerGeneralDatumWhere = struct {
	BusinessPartner               whereHelperint
	BusinessPartnerFullName       whereHelpernull_String
	BusinessPartnerName           whereHelperstring
	Industry                      whereHelpernull_String
	LegalEntityRegistration       whereHelpernull_String
	Country                       whereHelperstring
	Language                      whereHelperstring
	Currency                      whereHelperstring
	OrganizationBPName1           whereHelpernull_String
	OrganizationBPName2           whereHelpernull_String
	OrganizationBPName3           whereHelpernull_String
	OrganizationBPName4           whereHelpernull_String
	BPTag1                        whereHelpernull_String
	BPTag2                        whereHelpernull_String
	BPTag3                        whereHelpernull_String
	BPTag4                        whereHelpernull_String
	OrganizationFoundationDate    whereHelpernull_String
	OrganizationLiquidationDate   whereHelpernull_String
	BusinessPartnerBirthplaceName whereHelpernull_String
	BusinessPartnerDeathDate      whereHelpernull_String
	GroupBusinessPartnerName1     whereHelpernull_String
	GroupBusinessPartnerName2     whereHelpernull_String
	AddressID                     whereHelpernull_Int
	BusinessPartnerIDByExtSystem  whereHelpernull_String
	BusinessPartnerIsBlocked      whereHelpernull_Bool
	CreationDate                  whereHelperstring
	LastChangeDate                whereHelperstring
	IsMarkedForDeletion           whereHelpernull_Bool
}{
	BusinessPartner:               whereHelperint{field: "`data_platform_business_partner_general_data`.`BusinessPartner`"},
	BusinessPartnerFullName:       whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerFullName`"},
	BusinessPartnerName:           whereHelperstring{field: "`data_platform_business_partner_general_data`.`BusinessPartnerName`"},
	Industry:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`Industry`"},
	LegalEntityRegistration:       whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`LegalEntityRegistration`"},
	Country:                       whereHelperstring{field: "`data_platform_business_partner_general_data`.`Country`"},
	Language:                      whereHelperstring{field: "`data_platform_business_partner_general_data`.`Language`"},
	Currency:                      whereHelperstring{field: "`data_platform_business_partner_general_data`.`Currency`"},
	OrganizationBPName1:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName1`"},
	OrganizationBPName2:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName2`"},
	OrganizationBPName3:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName3`"},
	OrganizationBPName4:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName4`"},
	BPTag1:                        whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPTag1`"},
	BPTag2:                        whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPTag2`"},
	BPTag3:                        whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPTag3`"},
	BPTag4:                        whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPTag4`"},
	OrganizationFoundationDate:    whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationFoundationDate`"},
	OrganizationLiquidationDate:   whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationLiquidationDate`"},
	BusinessPartnerBirthplaceName: whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerBirthplaceName`"},
	BusinessPartnerDeathDate:      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerDeathDate`"},
	GroupBusinessPartnerName1:     whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`GroupBusinessPartnerName1`"},
	GroupBusinessPartnerName2:     whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`GroupBusinessPartnerName2`"},
	AddressID:                     whereHelpernull_Int{field: "`data_platform_business_partner_general_data`.`AddressID`"},
	BusinessPartnerIDByExtSystem:  whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerIDByExtSystem`"},
	BusinessPartnerIsBlocked:      whereHelpernull_Bool{field: "`data_platform_business_partner_general_data`.`BusinessPartnerIsBlocked`"},
	CreationDate:                  whereHelperstring{field: "`data_platform_business_partner_general_data`.`CreationDate`"},
	LastChangeDate:                whereHelperstring{field: "`data_platform_business_partner_general_data`.`LastChangeDate`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`data_platform_business_partner_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBusinessPartnerGeneralDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerGeneralDatumRels = struct {
	AddressIDDataPlatformAddressAddressDatum                                string
	CountryDataPlatformCountryCountryDatum                                  string
	CurrencyDataPlatformCurrencyCurrencyDatum                               string
	IndustryDataPlatformIndustryIndustryDatum                               string
	LanguageDataPlatformLanguageLanguageDatum                               string
	BusinessPartnerDataPlatformCodeConversionCodeConversionData             string
	BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData           string
	DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData       string
	OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData string
	BusinessPartnerDataPlatformPlantGeneralData                             string
	BusinessPartnerDataPlatformProductStockProductStockDataOlds             string
	BuyerDataPlatformPurchaseRequisitionHeaderData                          string
	DeliverFromPartyDataPlatformPurchaseRequisitionItemData                 string
	DeliverToPartyDataPlatformPurchaseRequisitionItemData                   string
	SellerDataPlatformPurchaseRequisitionItemData                           string
	BillFromPartyDataPlatformSCRBillingRelationData                         string
	BillToPartyDataPlatformSCRBillingRelationData                           string
	DeliverFromPartyDataPlatformSCRDeliveryRelationData                     string
	DeliverToPartyDataPlatformSCRDeliveryRelationData                       string
	BuyerDataPlatformSCRGeneralData                                         string
	SellerDataPlatformSCRGeneralData                                        string
	PayeeDataPlatformSCRPaymentRelationData                                 string
	PayerDataPlatformSCRPaymentRelationData                                 string
}{
	AddressIDDataPlatformAddressAddressDatum:                                "AddressIDDataPlatformAddressAddressDatum",
	CountryDataPlatformCountryCountryDatum:                                  "CountryDataPlatformCountryCountryDatum",
	CurrencyDataPlatformCurrencyCurrencyDatum:                               "CurrencyDataPlatformCurrencyCurrencyDatum",
	IndustryDataPlatformIndustryIndustryDatum:                               "IndustryDataPlatformIndustryIndustryDatum",
	LanguageDataPlatformLanguageLanguageDatum:                               "LanguageDataPlatformLanguageLanguageDatum",
	BusinessPartnerDataPlatformCodeConversionCodeConversionData:             "BusinessPartnerDataPlatformCodeConversionCodeConversionData",
	BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData:           "BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData",
	DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData:       "DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData",
	OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData: "OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData",
	BusinessPartnerDataPlatformPlantGeneralData:                             "BusinessPartnerDataPlatformPlantGeneralData",
	BusinessPartnerDataPlatformProductStockProductStockDataOlds:             "BusinessPartnerDataPlatformProductStockProductStockDataOlds",
	BuyerDataPlatformPurchaseRequisitionHeaderData:                          "BuyerDataPlatformPurchaseRequisitionHeaderData",
	DeliverFromPartyDataPlatformPurchaseRequisitionItemData:                 "DeliverFromPartyDataPlatformPurchaseRequisitionItemData",
	DeliverToPartyDataPlatformPurchaseRequisitionItemData:                   "DeliverToPartyDataPlatformPurchaseRequisitionItemData",
	SellerDataPlatformPurchaseRequisitionItemData:                           "SellerDataPlatformPurchaseRequisitionItemData",
	BillFromPartyDataPlatformSCRBillingRelationData:                         "BillFromPartyDataPlatformSCRBillingRelationData",
	BillToPartyDataPlatformSCRBillingRelationData:                           "BillToPartyDataPlatformSCRBillingRelationData",
	DeliverFromPartyDataPlatformSCRDeliveryRelationData:                     "DeliverFromPartyDataPlatformSCRDeliveryRelationData",
	DeliverToPartyDataPlatformSCRDeliveryRelationData:                       "DeliverToPartyDataPlatformSCRDeliveryRelationData",
	BuyerDataPlatformSCRGeneralData:                                         "BuyerDataPlatformSCRGeneralData",
	SellerDataPlatformSCRGeneralData:                                        "SellerDataPlatformSCRGeneralData",
	PayeeDataPlatformSCRPaymentRelationData:                                 "PayeeDataPlatformSCRPaymentRelationData",
	PayerDataPlatformSCRPaymentRelationData:                                 "PayerDataPlatformSCRPaymentRelationData",
}

// dataPlatformBusinessPartnerGeneralDatumR is where relationships are stored.
type dataPlatformBusinessPartnerGeneralDatumR struct {
	AddressIDDataPlatformAddressAddressDatum                                *DataPlatformAddressAddressDatum                          `boil:"AddressIDDataPlatformAddressAddressDatum" json:"AddressIDDataPlatformAddressAddressDatum" toml:"AddressIDDataPlatformAddressAddressDatum" yaml:"AddressIDDataPlatformAddressAddressDatum"`
	CountryDataPlatformCountryCountryDatum                                  *DataPlatformCountryCountryDatum                          `boil:"CountryDataPlatformCountryCountryDatum" json:"CountryDataPlatformCountryCountryDatum" toml:"CountryDataPlatformCountryCountryDatum" yaml:"CountryDataPlatformCountryCountryDatum"`
	CurrencyDataPlatformCurrencyCurrencyDatum                               *DataPlatformCurrencyCurrencyDatum                        `boil:"CurrencyDataPlatformCurrencyCurrencyDatum" json:"CurrencyDataPlatformCurrencyCurrencyDatum" toml:"CurrencyDataPlatformCurrencyCurrencyDatum" yaml:"CurrencyDataPlatformCurrencyCurrencyDatum"`
	IndustryDataPlatformIndustryIndustryDatum                               *DataPlatformIndustryIndustryDatum                        `boil:"IndustryDataPlatformIndustryIndustryDatum" json:"IndustryDataPlatformIndustryIndustryDatum" toml:"IndustryDataPlatformIndustryIndustryDatum" yaml:"IndustryDataPlatformIndustryIndustryDatum"`
	LanguageDataPlatformLanguageLanguageDatum                               *DataPlatformLanguageLanguageDatum                        `boil:"LanguageDataPlatformLanguageLanguageDatum" json:"LanguageDataPlatformLanguageLanguageDatum" toml:"LanguageDataPlatformLanguageLanguageDatum" yaml:"LanguageDataPlatformLanguageLanguageDatum"`
	BusinessPartnerDataPlatformCodeConversionCodeConversionData             DataPlatformCodeConversionCodeConversionDatumSlice        `boil:"BusinessPartnerDataPlatformCodeConversionCodeConversionData" json:"BusinessPartnerDataPlatformCodeConversionCodeConversionData" toml:"BusinessPartnerDataPlatformCodeConversionCodeConversionData" yaml:"BusinessPartnerDataPlatformCodeConversionCodeConversionData"`
	BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData           DataPlatformEquipmentMasterBusinessPartnerDatumSlice      `boil:"BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData" json:"BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData" toml:"BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData" yaml:"BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData"`
	DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData       DataPlatformEquipmentMasterGeneralDocDatumSlice           `boil:"DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData" json:"DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData" toml:"DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData" yaml:"DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData"`
	OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice `boil:"OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData" json:"OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData" toml:"OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData" yaml:"OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData"`
	BusinessPartnerDataPlatformPlantGeneralData                             DataPlatformPlantGeneralDatumSlice                        `boil:"BusinessPartnerDataPlatformPlantGeneralData" json:"BusinessPartnerDataPlatformPlantGeneralData" toml:"BusinessPartnerDataPlatformPlantGeneralData" yaml:"BusinessPartnerDataPlatformPlantGeneralData"`
	BusinessPartnerDataPlatformProductStockProductStockDataOlds             DataPlatformProductStockProductStockDataOldSlice          `boil:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" json:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" toml:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" yaml:"BusinessPartnerDataPlatformProductStockProductStockDataOlds"`
	BuyerDataPlatformPurchaseRequisitionHeaderData                          DataPlatformPurchaseRequisitionHeaderDatumSlice           `boil:"BuyerDataPlatformPurchaseRequisitionHeaderData" json:"BuyerDataPlatformPurchaseRequisitionHeaderData" toml:"BuyerDataPlatformPurchaseRequisitionHeaderData" yaml:"BuyerDataPlatformPurchaseRequisitionHeaderData"`
	DeliverFromPartyDataPlatformPurchaseRequisitionItemData                 DataPlatformPurchaseRequisitionItemDatumSlice             `boil:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData" json:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData" toml:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData" yaml:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData"`
	DeliverToPartyDataPlatformPurchaseRequisitionItemData                   DataPlatformPurchaseRequisitionItemDatumSlice             `boil:"DeliverToPartyDataPlatformPurchaseRequisitionItemData" json:"DeliverToPartyDataPlatformPurchaseRequisitionItemData" toml:"DeliverToPartyDataPlatformPurchaseRequisitionItemData" yaml:"DeliverToPartyDataPlatformPurchaseRequisitionItemData"`
	SellerDataPlatformPurchaseRequisitionItemData                           DataPlatformPurchaseRequisitionItemDatumSlice             `boil:"SellerDataPlatformPurchaseRequisitionItemData" json:"SellerDataPlatformPurchaseRequisitionItemData" toml:"SellerDataPlatformPurchaseRequisitionItemData" yaml:"SellerDataPlatformPurchaseRequisitionItemData"`
	BillFromPartyDataPlatformSCRBillingRelationData                         DataPlatformSCRBillingRelationDatumSlice                  `boil:"BillFromPartyDataPlatformSCRBillingRelationData" json:"BillFromPartyDataPlatformSCRBillingRelationData" toml:"BillFromPartyDataPlatformSCRBillingRelationData" yaml:"BillFromPartyDataPlatformSCRBillingRelationData"`
	BillToPartyDataPlatformSCRBillingRelationData                           DataPlatformSCRBillingRelationDatumSlice                  `boil:"BillToPartyDataPlatformSCRBillingRelationData" json:"BillToPartyDataPlatformSCRBillingRelationData" toml:"BillToPartyDataPlatformSCRBillingRelationData" yaml:"BillToPartyDataPlatformSCRBillingRelationData"`
	DeliverFromPartyDataPlatformSCRDeliveryRelationData                     DataPlatformSCRDeliveryRelationDatumSlice                 `boil:"DeliverFromPartyDataPlatformSCRDeliveryRelationData" json:"DeliverFromPartyDataPlatformSCRDeliveryRelationData" toml:"DeliverFromPartyDataPlatformSCRDeliveryRelationData" yaml:"DeliverFromPartyDataPlatformSCRDeliveryRelationData"`
	DeliverToPartyDataPlatformSCRDeliveryRelationData                       DataPlatformSCRDeliveryRelationDatumSlice                 `boil:"DeliverToPartyDataPlatformSCRDeliveryRelationData" json:"DeliverToPartyDataPlatformSCRDeliveryRelationData" toml:"DeliverToPartyDataPlatformSCRDeliveryRelationData" yaml:"DeliverToPartyDataPlatformSCRDeliveryRelationData"`
	BuyerDataPlatformSCRGeneralData                                         DataPlatformSCRGeneralDatumSlice                          `boil:"BuyerDataPlatformSCRGeneralData" json:"BuyerDataPlatformSCRGeneralData" toml:"BuyerDataPlatformSCRGeneralData" yaml:"BuyerDataPlatformSCRGeneralData"`
	SellerDataPlatformSCRGeneralData                                        DataPlatformSCRGeneralDatumSlice                          `boil:"SellerDataPlatformSCRGeneralData" json:"SellerDataPlatformSCRGeneralData" toml:"SellerDataPlatformSCRGeneralData" yaml:"SellerDataPlatformSCRGeneralData"`
	PayeeDataPlatformSCRPaymentRelationData                                 DataPlatformSCRPaymentRelationDatumSlice                  `boil:"PayeeDataPlatformSCRPaymentRelationData" json:"PayeeDataPlatformSCRPaymentRelationData" toml:"PayeeDataPlatformSCRPaymentRelationData" yaml:"PayeeDataPlatformSCRPaymentRelationData"`
	PayerDataPlatformSCRPaymentRelationData                                 DataPlatformSCRPaymentRelationDatumSlice                  `boil:"PayerDataPlatformSCRPaymentRelationData" json:"PayerDataPlatformSCRPaymentRelationData" toml:"PayerDataPlatformSCRPaymentRelationData" yaml:"PayerDataPlatformSCRPaymentRelationData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerGeneralDatumR) NewStruct() *dataPlatformBusinessPartnerGeneralDatumR {
	return &dataPlatformBusinessPartnerGeneralDatumR{}
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetAddressIDDataPlatformAddressAddressDatum() *DataPlatformAddressAddressDatum {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformAddressAddressDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.CurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetIndustryDataPlatformIndustryIndustryDatum() *DataPlatformIndustryIndustryDatum {
	if r == nil {
		return nil
	}
	return r.IndustryDataPlatformIndustryIndustryDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetLanguageDataPlatformLanguageLanguageDatum() *DataPlatformLanguageLanguageDatum {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformLanguageLanguageDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformCodeConversionCodeConversionData() DataPlatformCodeConversionCodeConversionDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformCodeConversionCodeConversionData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData() DataPlatformEquipmentMasterBusinessPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData() DataPlatformEquipmentMasterGeneralDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData() DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformPlantGeneralData() DataPlatformPlantGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformPlantGeneralData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformProductStockProductStockDataOlds() DataPlatformProductStockProductStockDataOldSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductStockProductStockDataOlds
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBuyerDataPlatformPurchaseRequisitionHeaderData() DataPlatformPurchaseRequisitionHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformPurchaseRequisitionHeaderData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDeliverFromPartyDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformPurchaseRequisitionItemData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDeliverToPartyDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformPurchaseRequisitionItemData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetSellerDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.SellerDataPlatformPurchaseRequisitionItemData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBillFromPartyDataPlatformSCRBillingRelationData() DataPlatformSCRBillingRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRBillingRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBillToPartyDataPlatformSCRBillingRelationData() DataPlatformSCRBillingRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillToPartyDataPlatformSCRBillingRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDeliverFromPartyDataPlatformSCRDeliveryRelationData() DataPlatformSCRDeliveryRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformSCRDeliveryRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDeliverToPartyDataPlatformSCRDeliveryRelationData() DataPlatformSCRDeliveryRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformSCRDeliveryRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBuyerDataPlatformSCRGeneralData() DataPlatformSCRGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetSellerDataPlatformSCRGeneralData() DataPlatformSCRGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.SellerDataPlatformSCRGeneralData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetPayeeDataPlatformSCRPaymentRelationData() DataPlatformSCRPaymentRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.PayeeDataPlatformSCRPaymentRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetPayerDataPlatformSCRPaymentRelationData() DataPlatformSCRPaymentRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.PayerDataPlatformSCRPaymentRelationData
}

// dataPlatformBusinessPartnerGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerGeneralDatumL struct{}

var (
	dataPlatformBusinessPartnerGeneralDatumAllColumns            = []string{"BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "Industry", "LegalEntityRegistration", "Country", "Language", "Currency", "OrganizationBPName1", "OrganizationBPName2", "OrganizationBPName3", "OrganizationBPName4", "BPTag1", "BPTag2", "BPTag3", "BPTag4", "OrganizationFoundationDate", "OrganizationLiquidationDate", "BusinessPartnerBirthplaceName", "BusinessPartnerDeathDate", "GroupBusinessPartnerName1", "GroupBusinessPartnerName2", "AddressID", "BusinessPartnerIDByExtSystem", "BusinessPartnerIsBlocked", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault = []string{"BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "Industry", "LegalEntityRegistration", "Country", "Language", "Currency", "OrganizationBPName1", "OrganizationBPName2", "OrganizationBPName3", "OrganizationBPName4", "BPTag1", "BPTag2", "BPTag3", "BPTag4", "OrganizationFoundationDate", "OrganizationLiquidationDate", "BusinessPartnerBirthplaceName", "BusinessPartnerDeathDate", "GroupBusinessPartnerName1", "GroupBusinessPartnerName2", "AddressID", "BusinessPartnerIDByExtSystem", "BusinessPartnerIsBlocked", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns     = []string{"BusinessPartner"}
	dataPlatformBusinessPartnerGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerGeneralDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerGeneralDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerGeneralDatum.
	DataPlatformBusinessPartnerGeneralDatumSlice []*DataPlatformBusinessPartnerGeneralDatum

	dataPlatformBusinessPartnerGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerGeneralDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerGeneralDatum{})
	dataPlatformBusinessPartnerGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerGeneralDatumType)
	dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformBusinessPartnerGeneralDatum record from the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerGeneralDatum, error) {
	o := &DataPlatformBusinessPartnerGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_general_data")
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerGeneralDatum records from the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerGeneralDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerGeneralDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerGeneralDatum records in the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_general_data exists")
	}

	return count > 0, nil
}

// AddressIDDataPlatformAddressAddressDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddressIDDataPlatformAddressAddressDatum(mods ...qm.QueryMod) dataPlatformAddressAddressDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`AddressID` = ?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformAddressAddressData(queryMods...)
}

// CountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) CountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.Country),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// CurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) CurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.Currency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// IndustryDataPlatformIndustryIndustryDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) IndustryDataPlatformIndustryIndustryDatum(mods ...qm.QueryMod) dataPlatformIndustryIndustryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Industry` = ?", o.Industry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformIndustryIndustryData(queryMods...)
}

// LanguageDataPlatformLanguageLanguageDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) LanguageDataPlatformLanguageLanguageDatum(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.Language),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformLanguageLanguageData(queryMods...)
}

// BusinessPartnerDataPlatformCodeConversionCodeConversionData retrieves all the data_platform_code_conversion_code_conversion_datum's DataPlatformCodeConversionCodeConversionData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformCodeConversionCodeConversionData(mods ...qm.QueryMod) dataPlatformCodeConversionCodeConversionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_code_conversion_code_conversion_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformCodeConversionCodeConversionData(queryMods...)
}

// BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData retrieves all the data_platform_equipment_master_business_partner_datum's DataPlatformEquipmentMasterBusinessPartnerData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData(mods ...qm.QueryMod) dataPlatformEquipmentMasterBusinessPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_equipment_master_business_partner_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformEquipmentMasterBusinessPartnerData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData retrieves all the data_platform_equipment_master_general_doc_datum's DataPlatformEquipmentMasterGeneralDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(mods ...qm.QueryMod) dataPlatformEquipmentMasterGeneralDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_equipment_master_general_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformEquipmentMasterGeneralDocData(queryMods...)
}

// OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData retrieves all the data_platform_equipment_master_owner_business_partner_datum's DataPlatformEquipmentMasterOwnerBusinessPartnerData with an executor via OwnerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData(mods ...qm.QueryMod) dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_equipment_master_owner_business_partner_data`.`OwnerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformEquipmentMasterOwnerBusinessPartnerData(queryMods...)
}

// BusinessPartnerDataPlatformPlantGeneralData retrieves all the data_platform_plant_general_datum's DataPlatformPlantGeneralData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformPlantGeneralData(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_plant_general_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformPlantGeneralData(queryMods...)
}

// BusinessPartnerDataPlatformProductStockProductStockDataOlds retrieves all the data_platform_product_stock_product_stock_data_old's DataPlatformProductStockProductStockDataOlds with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformProductStockProductStockDataOlds(mods ...qm.QueryMod) dataPlatformProductStockProductStockDataOldQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_data_old`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockDataOlds(queryMods...)
}

// BuyerDataPlatformPurchaseRequisitionHeaderData retrieves all the data_platform_purchase_requisition_header_datum's DataPlatformPurchaseRequisitionHeaderData with an executor via Buyer column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BuyerDataPlatformPurchaseRequisitionHeaderData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_header_data`.`Buyer`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionHeaderData(queryMods...)
}

// DeliverFromPartyDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via DeliverFromParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DeliverFromPartyDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`DeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// DeliverToPartyDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via DeliverToParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DeliverToPartyDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`DeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// SellerDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via Seller column.
func (o *DataPlatformBusinessPartnerGeneralDatum) SellerDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`Seller`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// BillFromPartyDataPlatformSCRBillingRelationData retrieves all the data_platform_scr_billing_relation_datum's DataPlatformSCRBillingRelationData with an executor via BillFromParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BillFromPartyDataPlatformSCRBillingRelationData(mods ...qm.QueryMod) dataPlatformSCRBillingRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_billing_relation_data`.`BillFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRBillingRelationData(queryMods...)
}

// BillToPartyDataPlatformSCRBillingRelationData retrieves all the data_platform_scr_billing_relation_datum's DataPlatformSCRBillingRelationData with an executor via BillToParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BillToPartyDataPlatformSCRBillingRelationData(mods ...qm.QueryMod) dataPlatformSCRBillingRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_billing_relation_data`.`BillToParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRBillingRelationData(queryMods...)
}

// DeliverFromPartyDataPlatformSCRDeliveryRelationData retrieves all the data_platform_scr_delivery_relation_datum's DataPlatformSCRDeliveryRelationData with an executor via DeliverFromParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DeliverFromPartyDataPlatformSCRDeliveryRelationData(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_delivery_relation_data`.`DeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// DeliverToPartyDataPlatformSCRDeliveryRelationData retrieves all the data_platform_scr_delivery_relation_datum's DataPlatformSCRDeliveryRelationData with an executor via DeliverToParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DeliverToPartyDataPlatformSCRDeliveryRelationData(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_delivery_relation_data`.`DeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralData retrieves all the data_platform_scr_general_datum's DataPlatformSCRGeneralData with an executor via Buyer column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BuyerDataPlatformSCRGeneralData(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_general_data`.`Buyer`=?", o.BusinessPartner),
	)

	return DataPlatformSCRGeneralData(queryMods...)
}

// SellerDataPlatformSCRGeneralData retrieves all the data_platform_scr_general_datum's DataPlatformSCRGeneralData with an executor via Seller column.
func (o *DataPlatformBusinessPartnerGeneralDatum) SellerDataPlatformSCRGeneralData(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_general_data`.`Seller`=?", o.BusinessPartner),
	)

	return DataPlatformSCRGeneralData(queryMods...)
}

// PayeeDataPlatformSCRPaymentRelationData retrieves all the data_platform_scr_payment_relation_datum's DataPlatformSCRPaymentRelationData with an executor via Payee column.
func (o *DataPlatformBusinessPartnerGeneralDatum) PayeeDataPlatformSCRPaymentRelationData(mods ...qm.QueryMod) dataPlatformSCRPaymentRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_payment_relation_data`.`Payee`=?", o.BusinessPartner),
	)

	return DataPlatformSCRPaymentRelationData(queryMods...)
}

// PayerDataPlatformSCRPaymentRelationData retrieves all the data_platform_scr_payment_relation_datum's DataPlatformSCRPaymentRelationData with an executor via Payer column.
func (o *DataPlatformBusinessPartnerGeneralDatum) PayerDataPlatformSCRPaymentRelationData(mods ...qm.QueryMod) dataPlatformSCRPaymentRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_payment_relation_data`.`Payer`=?", o.BusinessPartner),
	)

	return DataPlatformSCRPaymentRelationData(queryMods...)
}

// LoadAddressIDDataPlatformAddressAddressDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadAddressIDDataPlatformAddressAddressDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		if !queries.IsNil(object.AddressID) {
			args = append(args, object.AddressID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AddressID) {
				args = append(args, obj.AddressID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_address_address_data`),
		qm.WhereIn(`data_platform_address_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformAddressAddressDatum")
	}

	var resultSlice []*DataPlatformAddressAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformAddressAddressDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_address_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_address_address_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AddressIDDataPlatformAddressAddressDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformAddressAddressDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.Country)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Country == foreign.Country {
				local.R.CountryDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.Currency)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Currency {
					continue Outer
				}
			}

			args = append(args, obj.Currency)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CurrencyDataPlatformCurrencyCurrencyDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Currency == foreign.Currency {
				local.R.CurrencyDataPlatformCurrencyCurrencyDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadIndustryDataPlatformIndustryIndustryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadIndustryDataPlatformIndustryIndustryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		if !queries.IsNil(object.Industry) {
			args = append(args, object.Industry)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Industry) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Industry) {
				args = append(args, obj.Industry)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_industry_industry_data`),
		qm.WhereIn(`data_platform_industry_industry_data.Industry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformIndustryIndustryDatum")
	}

	var resultSlice []*DataPlatformIndustryIndustryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformIndustryIndustryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_industry_industry_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_industry_industry_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IndustryDataPlatformIndustryIndustryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Industry, foreign.Industry) {
				local.R.IndustryDataPlatformIndustryIndustryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformLanguageLanguageDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.Language)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_data`),
		qm.WhereIn(`data_platform_language_language_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformLanguageLanguageDatum")
	}

	var resultSlice []*DataPlatformLanguageLanguageDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformLanguageLanguageDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_language_language_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LanguageDataPlatformLanguageLanguageDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformLanguageLanguageDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformCodeConversionCodeConversionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformCodeConversionCodeConversionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_code_conversion_code_conversion_data`),
		qm.WhereIn(`data_platform_code_conversion_code_conversion_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_code_conversion_code_conversion_data")
	}

	var resultSlice []*DataPlatformCodeConversionCodeConversionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_code_conversion_code_conversion_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_code_conversion_code_conversion_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_code_conversion_code_conversion_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData = append(local.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_business_partner_data`),
		qm.WhereIn(`data_platform_equipment_master_business_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_equipment_master_business_partner_data")
	}

	var resultSlice []*DataPlatformEquipmentMasterBusinessPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_equipment_master_business_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_equipment_master_business_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_business_partner_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData = append(local.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_general_doc_data`),
		qm.WhereIn(`data_platform_equipment_master_general_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_equipment_master_general_doc_data")
	}

	var resultSlice []*DataPlatformEquipmentMasterGeneralDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_equipment_master_general_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_equipment_master_general_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_general_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_owner_business_partner_data`),
		qm.WhereIn(`data_platform_equipment_master_owner_business_partner_data.OwnerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_equipment_master_owner_business_partner_data")
	}

	var resultSlice []*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_equipment_master_owner_business_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_equipment_master_owner_business_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_owner_business_partner_data")
	}

	if singular {
		object.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.OwnerBusinessPartner {
				local.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData = append(local.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformPlantGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformPlantGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_plant_general_data")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_plant_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformPlantGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformPlantGeneralData = append(local.R.BusinessPartnerDataPlatformPlantGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductStockProductStockDataOlds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformProductStockProductStockDataOlds(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_data_old`),
		qm.WhereIn(`data_platform_product_stock_product_stock_data_old.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_data_old")
	}

	var resultSlice []*DataPlatformProductStockProductStockDataOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_data_old")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_data_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_data_old")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = append(local.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformPurchaseRequisitionHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBuyerDataPlatformPurchaseRequisitionHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_header_data`),
		qm.WhereIn(`data_platform_purchase_requisition_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_header_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformPurchaseRequisitionHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Buyer {
				local.R.BuyerDataPlatformPurchaseRequisitionHeaderData = append(local.R.BuyerDataPlatformPurchaseRequisitionHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.DeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DeliverFromParty) {
				local.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = append(local.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDeliverToPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.DeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverToParty {
				local.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData = append(local.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSellerDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadSellerDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.Seller in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.SellerDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.Seller) {
				local.R.SellerDataPlatformPurchaseRequisitionItemData = append(local.R.SellerDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRBillingRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBillFromPartyDataPlatformSCRBillingRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_billing_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_billing_relation_data")
	}

	var resultSlice []*DataPlatformSCRBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_billing_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_billing_relation_data")
	}

	if singular {
		object.R.BillFromPartyDataPlatformSCRBillingRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BillFromParty {
				local.R.BillFromPartyDataPlatformSCRBillingRelationData = append(local.R.BillFromPartyDataPlatformSCRBillingRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillToPartyDataPlatformSCRBillingRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBillToPartyDataPlatformSCRBillingRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_billing_relation_data.BillToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_billing_relation_data")
	}

	var resultSlice []*DataPlatformSCRBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_billing_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_billing_relation_data")
	}

	if singular {
		object.R.BillToPartyDataPlatformSCRBillingRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BillToParty {
				local.R.BillToPartyDataPlatformSCRBillingRelationData = append(local.R.BillToPartyDataPlatformSCRBillingRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformSCRDeliveryRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDeliverFromPartyDataPlatformSCRDeliveryRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.DeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_delivery_relation_data")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_delivery_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if singular {
		object.R.DeliverFromPartyDataPlatformSCRDeliveryRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverFromParty {
				local.R.DeliverFromPartyDataPlatformSCRDeliveryRelationData = append(local.R.DeliverFromPartyDataPlatformSCRDeliveryRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformSCRDeliveryRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDeliverToPartyDataPlatformSCRDeliveryRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.DeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_delivery_relation_data")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_delivery_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if singular {
		object.R.DeliverToPartyDataPlatformSCRDeliveryRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverToParty {
				local.R.DeliverToPartyDataPlatformSCRDeliveryRelationData = append(local.R.DeliverToPartyDataPlatformSCRDeliveryRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBuyerDataPlatformSCRGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_general_data")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralData = append(local.R.BuyerDataPlatformSCRGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSellerDataPlatformSCRGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadSellerDataPlatformSCRGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Seller in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_general_data")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if singular {
		object.R.SellerDataPlatformSCRGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Seller {
				local.R.SellerDataPlatformSCRGeneralData = append(local.R.SellerDataPlatformSCRGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPayeeDataPlatformSCRPaymentRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadPayeeDataPlatformSCRPaymentRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_payment_relation_data.Payee in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_payment_relation_data")
	}

	var resultSlice []*DataPlatformSCRPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_payment_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_payment_relation_data")
	}

	if singular {
		object.R.PayeeDataPlatformSCRPaymentRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Payee {
				local.R.PayeeDataPlatformSCRPaymentRelationData = append(local.R.PayeeDataPlatformSCRPaymentRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPayerDataPlatformSCRPaymentRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadPayerDataPlatformSCRPaymentRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_payment_relation_data.Payer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_payment_relation_data")
	}

	var resultSlice []*DataPlatformSCRPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_payment_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_payment_relation_data")
	}

	if singular {
		object.R.PayerDataPlatformSCRPaymentRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Payer {
				local.R.PayerDataPlatformSCRPaymentRelationData = append(local.R.PayerDataPlatformSCRPaymentRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// SetAddressIDDataPlatformAddressAddressDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformAddressAddressDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.AddressID, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AddressID, related.AddressID)
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			AddressIDDataPlatformAddressAddressDatum: related,
		}
	} else {
		o.R.AddressIDDataPlatformAddressAddressDatum = related
	}

	return nil
}

// RemoveAddressIDDataPlatformAddressAddressDatum relationship.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to nil.
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformAddressAddressDatum) error {
	var err error

	queries.SetScanner(&o.AddressID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformAddressAddressDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetCountryDataPlatformCountryCountryDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.CountryDataPlatformCountryCountryDatum to related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Country = related.Country
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			CountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.CountryDataPlatformCountryCountryDatum = related
	}

	return nil
}

// SetCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.CurrencyDataPlatformCurrencyCurrencyDatum to related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Currency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Currency = related.Currency
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			CurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.CurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	return nil
}

// SetIndustryDataPlatformIndustryIndustryDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.IndustryDataPlatformIndustryIndustryDatum to related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetIndustryDataPlatformIndustryIndustryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformIndustryIndustryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Industry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Industry, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Industry, related.Industry)
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			IndustryDataPlatformIndustryIndustryDatum: related,
		}
	} else {
		o.R.IndustryDataPlatformIndustryIndustryDatum = related
	}

	return nil
}

// RemoveIndustryDataPlatformIndustryIndustryDatum relationship.
// Sets o.R.IndustryDataPlatformIndustryIndustryDatum to nil.
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveIndustryDataPlatformIndustryIndustryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformIndustryIndustryDatum) error {
	var err error

	queries.SetScanner(&o.Industry, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Industry")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IndustryDataPlatformIndustryIndustryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetLanguageDataPlatformLanguageLanguageDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum to related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformLanguageLanguageDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Language = related.Language
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			LanguageDataPlatformLanguageLanguageDatum: related,
		}
	} else {
		o.R.LanguageDataPlatformLanguageLanguageDatum = related
	}

	return nil
}

// AddBusinessPartnerDataPlatformCodeConversionCodeConversionData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformCodeConversionCodeConversionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformCodeConversionCodeConversionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_code_conversion_code_conversion_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.CodeConversionID, rel.SystemConvertTo, rel.SystemConvertFrom, rel.LabelConvertTo, rel.LabelConvertFrom, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformCodeConversionCodeConversionData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData = append(o.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterBusinessPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_equipment_master_business_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Equipment, rel.EquipmentPartnerObjectNmbr}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData = append(o.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData, related...)
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterGeneralDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_equipment_master_general_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Equipment, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterGeneralDocDatum) error {
	query := "update `data_platform_equipment_master_general_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformEquipmentMasterGeneralDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OwnerBusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_equipment_master_owner_business_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OwnerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Equipment, rel.OwnerBusinessPartner, rel.ValidityStartDate, rel.ValidityEndDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OwnerBusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData: related,
		}
	} else {
		o.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData = append(o.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformPlantGeneralData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformPlantGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlantGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformPlantGeneralData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformPlantGeneralData = append(o.R.BusinessPartnerDataPlatformPlantGeneralData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductStockProductStockDataOlds adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformProductStockProductStockDataOlds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDataOld) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_data_old` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockDataOldPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Product, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformProductStockProductStockDataOlds: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = append(o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds, related...)
	}

	return nil
}

// AddBuyerDataPlatformPurchaseRequisitionHeaderData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformPurchaseRequisitionHeaderData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBuyerDataPlatformPurchaseRequisitionHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BuyerDataPlatformPurchaseRequisitionHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformPurchaseRequisitionHeaderData = append(o.R.BuyerDataPlatformPurchaseRequisitionHeaderData, related...)
	}

	return nil
}

// AddDeliverFromPartyDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliverFromParty, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliverFromParty, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DeliverFromPartyDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = append(o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// SetDeliverFromPartyDataPlatformPurchaseRequisitionItemData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum's DeliverFromPartyDataPlatformPurchaseRequisitionItemData accordingly.
// Replaces o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	query := "update `data_platform_purchase_requisition_item_data` set `DeliverFromParty` = null where `DeliverFromParty` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = nil
	}

	return o.AddDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx, exec, insert, related...)
}

// RemoveDeliverFromPartyDataPlatformPurchaseRequisitionItemData relationships from objects passed in.
// Removes related items from R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliverFromParty, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DeliverFromParty")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData)
			if ln > 1 && i < ln-1 {
				o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData[i] = o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData[ln-1]
			}
			o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliverToPartyDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDeliverToPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DeliverToPartyDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData = append(o.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// AddSellerDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.SellerDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddSellerDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Seller, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Seller"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Seller, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			SellerDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.SellerDataPlatformPurchaseRequisitionItemData = append(o.R.SellerDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// SetSellerDataPlatformPurchaseRequisitionItemData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerDataPlatformBusinessPartnerGeneralDatum's SellerDataPlatformPurchaseRequisitionItemData accordingly.
// Replaces o.R.SellerDataPlatformPurchaseRequisitionItemData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetSellerDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	query := "update `data_platform_purchase_requisition_item_data` set `Seller` = null where `Seller` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.SellerDataPlatformPurchaseRequisitionItemData = nil
	}

	return o.AddSellerDataPlatformPurchaseRequisitionItemData(ctx, exec, insert, related...)
}

// RemoveSellerDataPlatformPurchaseRequisitionItemData relationships from objects passed in.
// Removes related items from R.SellerDataPlatformPurchaseRequisitionItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveSellerDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Seller, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Seller")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SellerDataPlatformPurchaseRequisitionItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.SellerDataPlatformPurchaseRequisitionItemData)
			if ln > 1 && i < ln-1 {
				o.R.SellerDataPlatformPurchaseRequisitionItemData[i] = o.R.SellerDataPlatformPurchaseRequisitionItemData[ln-1]
			}
			o.R.SellerDataPlatformPurchaseRequisitionItemData = o.R.SellerDataPlatformPurchaseRequisitionItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillFromPartyDataPlatformSCRBillingRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromPartyDataPlatformSCRBillingRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBillFromPartyDataPlatformSCRBillingRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRBillingRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillFromParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_billing_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillFromParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BillFromPartyDataPlatformSCRBillingRelationData: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRBillingRelationData = append(o.R.BillFromPartyDataPlatformSCRBillingRelationData, related...)
	}

	return nil
}

// AddBillToPartyDataPlatformSCRBillingRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BillToPartyDataPlatformSCRBillingRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBillToPartyDataPlatformSCRBillingRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRBillingRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_billing_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BillToPartyDataPlatformSCRBillingRelationData: related,
		}
	} else {
		o.R.BillToPartyDataPlatformSCRBillingRelationData = append(o.R.BillToPartyDataPlatformSCRBillingRelationData, related...)
	}

	return nil
}

// AddDeliverFromPartyDataPlatformSCRDeliveryRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPartyDataPlatformSCRDeliveryRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDeliverFromPartyDataPlatformSCRDeliveryRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverFromParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_delivery_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverFromParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DeliverFromPartyDataPlatformSCRDeliveryRelationData: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformSCRDeliveryRelationData = append(o.R.DeliverFromPartyDataPlatformSCRDeliveryRelationData, related...)
	}

	return nil
}

// AddDeliverToPartyDataPlatformSCRDeliveryRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPartyDataPlatformSCRDeliveryRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDeliverToPartyDataPlatformSCRDeliveryRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_delivery_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DeliverToPartyDataPlatformSCRDeliveryRelationData: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformSCRDeliveryRelationData = append(o.R.DeliverToPartyDataPlatformSCRDeliveryRelationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSCRGeneralData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBuyerDataPlatformSCRGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BuyerDataPlatformSCRGeneralData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralData = append(o.R.BuyerDataPlatformSCRGeneralData, related...)
	}

	return nil
}

// AddSellerDataPlatformSCRGeneralData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.SellerDataPlatformSCRGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddSellerDataPlatformSCRGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Seller = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Seller"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Seller = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			SellerDataPlatformSCRGeneralData: related,
		}
	} else {
		o.R.SellerDataPlatformSCRGeneralData = append(o.R.SellerDataPlatformSCRGeneralData, related...)
	}

	return nil
}

// AddPayeeDataPlatformSCRPaymentRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.PayeeDataPlatformSCRPaymentRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddPayeeDataPlatformSCRPaymentRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRPaymentRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Payee = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_payment_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Payee"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.SupplyChainRelationshipPaymentID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty, rel.Payer, rel.Payee}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Payee = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			PayeeDataPlatformSCRPaymentRelationData: related,
		}
	} else {
		o.R.PayeeDataPlatformSCRPaymentRelationData = append(o.R.PayeeDataPlatformSCRPaymentRelationData, related...)
	}

	return nil
}

// AddPayerDataPlatformSCRPaymentRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.PayerDataPlatformSCRPaymentRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddPayerDataPlatformSCRPaymentRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRPaymentRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Payer = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_payment_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Payer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.SupplyChainRelationshipPaymentID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty, rel.Payer, rel.Payee}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Payer = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			PayerDataPlatformSCRPaymentRelationData: related,
		}
	} else {
		o.R.PayerDataPlatformSCRPaymentRelationData = append(o.R.PayerDataPlatformSCRPaymentRelationData, related...)
	}

	return nil
}

// DataPlatformBusinessPartnerGeneralData retrieves all the records using an executor.
func DataPlatformBusinessPartnerGeneralData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_general_data`.*"})
	}

	return dataPlatformBusinessPartnerGeneralDatumQuery{q}
}

// FindDataPlatformBusinessPartnerGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, selectCols ...string) (*DataPlatformBusinessPartnerGeneralDatum, error) {
	dataPlatformBusinessPartnerGeneralDatumObj := &DataPlatformBusinessPartnerGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_general_data` where `BusinessPartner`=?", sel,
	)

	q := queries.Raw(query, businessPartner)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_general_data")
	}

	return dataPlatformBusinessPartnerGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_general_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumInsertCache[key]
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformBusinessPartnerGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumUpdateCache[key]
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_business_partner_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, append(wl, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_business_partner_general_data row")
	}

	if !cached {
		dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_business_partner_general_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerGeneralDatum slice")
	}

	return nil
}

var mySQLDataPlatformBusinessPartnerGeneralDatumUniqueColumns = []string{
	"BusinessPartner",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_general_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumUpsertCache[key]
	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformBusinessPartnerGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformBusinessPartnerGeneralDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_general_data` WHERE `BusinessPartner`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_business_partner_general_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformBusinessPartnerGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_general_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerGeneralDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerGeneralDatum(ctx, exec, o.BusinessPartner)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_general_data`.* FROM `data_platform_business_partner_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerGeneralDatumExists checks if the DataPlatformBusinessPartnerGeneralDatum row exists.
func DataPlatformBusinessPartnerGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_general_data` where `BusinessPartner`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerGeneralDatum row exists.
func (o *DataPlatformBusinessPartnerGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerGeneralDatumExists(ctx, exec, o.BusinessPartner)
}
