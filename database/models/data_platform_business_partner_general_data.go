// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerGeneralDatum is an object representing the database table.
type DataPlatformBusinessPartnerGeneralDatum struct {
	BusinessPartner               int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	BusinessPartnerFullName       null.String `boil:"BusinessPartnerFullName" json:"BusinessPartnerFullName,omitempty" toml:"BusinessPartnerFullName" yaml:"BusinessPartnerFullName,omitempty"`
	BusinessPartnerName           string      `boil:"BusinessPartnerName" json:"BusinessPartnerName" toml:"BusinessPartnerName" yaml:"BusinessPartnerName"`
	CreationDate                  string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                  null.String `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	Industry                      null.String `boil:"Industry" json:"Industry,omitempty" toml:"Industry" yaml:"Industry,omitempty"`
	LegalEntityRegistration       null.String `boil:"LegalEntityRegistration" json:"LegalEntityRegistration,omitempty" toml:"LegalEntityRegistration" yaml:"LegalEntityRegistration,omitempty"`
	Country                       string      `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	Language                      string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	Currency                      string      `boil:"Currency" json:"Currency" toml:"Currency" yaml:"Currency"`
	LastChangeDate                null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeTime                null.String `boil:"LastChangeTime" json:"LastChangeTime,omitempty" toml:"LastChangeTime" yaml:"LastChangeTime,omitempty"`
	OrganizationBPName1           null.String `boil:"OrganizationBPName1" json:"OrganizationBPName1,omitempty" toml:"OrganizationBPName1" yaml:"OrganizationBPName1,omitempty"`
	OrganizationBPName2           null.String `boil:"OrganizationBPName2" json:"OrganizationBPName2,omitempty" toml:"OrganizationBPName2" yaml:"OrganizationBPName2,omitempty"`
	OrganizationBPName3           null.String `boil:"OrganizationBPName3" json:"OrganizationBPName3,omitempty" toml:"OrganizationBPName3" yaml:"OrganizationBPName3,omitempty"`
	OrganizationBPName4           null.String `boil:"OrganizationBPName4" json:"OrganizationBPName4,omitempty" toml:"OrganizationBPName4" yaml:"OrganizationBPName4,omitempty"`
	BPTag1                        null.String `boil:"BPTag1" json:"BPTag1,omitempty" toml:"BPTag1" yaml:"BPTag1,omitempty"`
	BPTag2                        null.String `boil:"BPTag2" json:"BPTag2,omitempty" toml:"BPTag2" yaml:"BPTag2,omitempty"`
	BPTag3                        null.String `boil:"BPTag3" json:"BPTag3,omitempty" toml:"BPTag3" yaml:"BPTag3,omitempty"`
	BPTag4                        null.String `boil:"BPTag4" json:"BPTag4,omitempty" toml:"BPTag4" yaml:"BPTag4,omitempty"`
	OrganizationFoundationDate    null.String `boil:"OrganizationFoundationDate" json:"OrganizationFoundationDate,omitempty" toml:"OrganizationFoundationDate" yaml:"OrganizationFoundationDate,omitempty"`
	OrganizationLiquidationDate   null.String `boil:"OrganizationLiquidationDate" json:"OrganizationLiquidationDate,omitempty" toml:"OrganizationLiquidationDate" yaml:"OrganizationLiquidationDate,omitempty"`
	BusinessPartnerBirthplaceName null.String `boil:"BusinessPartnerBirthplaceName" json:"BusinessPartnerBirthplaceName,omitempty" toml:"BusinessPartnerBirthplaceName" yaml:"BusinessPartnerBirthplaceName,omitempty"`
	BusinessPartnerDeathDate      null.String `boil:"BusinessPartnerDeathDate" json:"BusinessPartnerDeathDate,omitempty" toml:"BusinessPartnerDeathDate" yaml:"BusinessPartnerDeathDate,omitempty"`
	BusinessPartnerIsBlocked      null.Bool   `boil:"BusinessPartnerIsBlocked" json:"BusinessPartnerIsBlocked,omitempty" toml:"BusinessPartnerIsBlocked" yaml:"BusinessPartnerIsBlocked,omitempty"`
	GroupBusinessPartnerName1     null.String `boil:"GroupBusinessPartnerName1" json:"GroupBusinessPartnerName1,omitempty" toml:"GroupBusinessPartnerName1" yaml:"GroupBusinessPartnerName1,omitempty"`
	GroupBusinessPartnerName2     null.String `boil:"GroupBusinessPartnerName2" json:"GroupBusinessPartnerName2,omitempty" toml:"GroupBusinessPartnerName2" yaml:"GroupBusinessPartnerName2,omitempty"`
	AddressID                     null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`
	BusinessPartnerIDByExtSystem  null.String `boil:"BusinessPartnerIDByExtSystem" json:"BusinessPartnerIDByExtSystem,omitempty" toml:"BusinessPartnerIDByExtSystem" yaml:"BusinessPartnerIDByExtSystem,omitempty"`
	IsMarkedForDeletion           null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBusinessPartnerGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerGeneralDatumColumns = struct {
	BusinessPartner               string
	BusinessPartnerFullName       string
	BusinessPartnerName           string
	CreationDate                  string
	CreationTime                  string
	Industry                      string
	LegalEntityRegistration       string
	Country                       string
	Language                      string
	Currency                      string
	LastChangeDate                string
	LastChangeTime                string
	OrganizationBPName1           string
	OrganizationBPName2           string
	OrganizationBPName3           string
	OrganizationBPName4           string
	BPTag1                        string
	BPTag2                        string
	BPTag3                        string
	BPTag4                        string
	OrganizationFoundationDate    string
	OrganizationLiquidationDate   string
	BusinessPartnerBirthplaceName string
	BusinessPartnerDeathDate      string
	BusinessPartnerIsBlocked      string
	GroupBusinessPartnerName1     string
	GroupBusinessPartnerName2     string
	AddressID                     string
	BusinessPartnerIDByExtSystem  string
	IsMarkedForDeletion           string
}{
	BusinessPartner:               "BusinessPartner",
	BusinessPartnerFullName:       "BusinessPartnerFullName",
	BusinessPartnerName:           "BusinessPartnerName",
	CreationDate:                  "CreationDate",
	CreationTime:                  "CreationTime",
	Industry:                      "Industry",
	LegalEntityRegistration:       "LegalEntityRegistration",
	Country:                       "Country",
	Language:                      "Language",
	Currency:                      "Currency",
	LastChangeDate:                "LastChangeDate",
	LastChangeTime:                "LastChangeTime",
	OrganizationBPName1:           "OrganizationBPName1",
	OrganizationBPName2:           "OrganizationBPName2",
	OrganizationBPName3:           "OrganizationBPName3",
	OrganizationBPName4:           "OrganizationBPName4",
	BPTag1:                        "BPTag1",
	BPTag2:                        "BPTag2",
	BPTag3:                        "BPTag3",
	BPTag4:                        "BPTag4",
	OrganizationFoundationDate:    "OrganizationFoundationDate",
	OrganizationLiquidationDate:   "OrganizationLiquidationDate",
	BusinessPartnerBirthplaceName: "BusinessPartnerBirthplaceName",
	BusinessPartnerDeathDate:      "BusinessPartnerDeathDate",
	BusinessPartnerIsBlocked:      "BusinessPartnerIsBlocked",
	GroupBusinessPartnerName1:     "GroupBusinessPartnerName1",
	GroupBusinessPartnerName2:     "GroupBusinessPartnerName2",
	AddressID:                     "AddressID",
	BusinessPartnerIDByExtSystem:  "BusinessPartnerIDByExtSystem",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
}

var DataPlatformBusinessPartnerGeneralDatumTableColumns = struct {
	BusinessPartner               string
	BusinessPartnerFullName       string
	BusinessPartnerName           string
	CreationDate                  string
	CreationTime                  string
	Industry                      string
	LegalEntityRegistration       string
	Country                       string
	Language                      string
	Currency                      string
	LastChangeDate                string
	LastChangeTime                string
	OrganizationBPName1           string
	OrganizationBPName2           string
	OrganizationBPName3           string
	OrganizationBPName4           string
	BPTag1                        string
	BPTag2                        string
	BPTag3                        string
	BPTag4                        string
	OrganizationFoundationDate    string
	OrganizationLiquidationDate   string
	BusinessPartnerBirthplaceName string
	BusinessPartnerDeathDate      string
	BusinessPartnerIsBlocked      string
	GroupBusinessPartnerName1     string
	GroupBusinessPartnerName2     string
	AddressID                     string
	BusinessPartnerIDByExtSystem  string
	IsMarkedForDeletion           string
}{
	BusinessPartner:               "data_platform_business_partner_general_data.BusinessPartner",
	BusinessPartnerFullName:       "data_platform_business_partner_general_data.BusinessPartnerFullName",
	BusinessPartnerName:           "data_platform_business_partner_general_data.BusinessPartnerName",
	CreationDate:                  "data_platform_business_partner_general_data.CreationDate",
	CreationTime:                  "data_platform_business_partner_general_data.CreationTime",
	Industry:                      "data_platform_business_partner_general_data.Industry",
	LegalEntityRegistration:       "data_platform_business_partner_general_data.LegalEntityRegistration",
	Country:                       "data_platform_business_partner_general_data.Country",
	Language:                      "data_platform_business_partner_general_data.Language",
	Currency:                      "data_platform_business_partner_general_data.Currency",
	LastChangeDate:                "data_platform_business_partner_general_data.LastChangeDate",
	LastChangeTime:                "data_platform_business_partner_general_data.LastChangeTime",
	OrganizationBPName1:           "data_platform_business_partner_general_data.OrganizationBPName1",
	OrganizationBPName2:           "data_platform_business_partner_general_data.OrganizationBPName2",
	OrganizationBPName3:           "data_platform_business_partner_general_data.OrganizationBPName3",
	OrganizationBPName4:           "data_platform_business_partner_general_data.OrganizationBPName4",
	BPTag1:                        "data_platform_business_partner_general_data.BPTag1",
	BPTag2:                        "data_platform_business_partner_general_data.BPTag2",
	BPTag3:                        "data_platform_business_partner_general_data.BPTag3",
	BPTag4:                        "data_platform_business_partner_general_data.BPTag4",
	OrganizationFoundationDate:    "data_platform_business_partner_general_data.OrganizationFoundationDate",
	OrganizationLiquidationDate:   "data_platform_business_partner_general_data.OrganizationLiquidationDate",
	BusinessPartnerBirthplaceName: "data_platform_business_partner_general_data.BusinessPartnerBirthplaceName",
	BusinessPartnerDeathDate:      "data_platform_business_partner_general_data.BusinessPartnerDeathDate",
	BusinessPartnerIsBlocked:      "data_platform_business_partner_general_data.BusinessPartnerIsBlocked",
	GroupBusinessPartnerName1:     "data_platform_business_partner_general_data.GroupBusinessPartnerName1",
	GroupBusinessPartnerName2:     "data_platform_business_partner_general_data.GroupBusinessPartnerName2",
	AddressID:                     "data_platform_business_partner_general_data.AddressID",
	BusinessPartnerIDByExtSystem:  "data_platform_business_partner_general_data.BusinessPartnerIDByExtSystem",
	IsMarkedForDeletion:           "data_platform_business_partner_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformBusinessPartnerGeneralDatumWhere = struct {
	BusinessPartner               whereHelperint
	BusinessPartnerFullName       whereHelpernull_String
	BusinessPartnerName           whereHelperstring
	CreationDate                  whereHelperstring
	CreationTime                  whereHelpernull_String
	Industry                      whereHelpernull_String
	LegalEntityRegistration       whereHelpernull_String
	Country                       whereHelperstring
	Language                      whereHelperstring
	Currency                      whereHelperstring
	LastChangeDate                whereHelpernull_String
	LastChangeTime                whereHelpernull_String
	OrganizationBPName1           whereHelpernull_String
	OrganizationBPName2           whereHelpernull_String
	OrganizationBPName3           whereHelpernull_String
	OrganizationBPName4           whereHelpernull_String
	BPTag1                        whereHelpernull_String
	BPTag2                        whereHelpernull_String
	BPTag3                        whereHelpernull_String
	BPTag4                        whereHelpernull_String
	OrganizationFoundationDate    whereHelpernull_String
	OrganizationLiquidationDate   whereHelpernull_String
	BusinessPartnerBirthplaceName whereHelpernull_String
	BusinessPartnerDeathDate      whereHelpernull_String
	BusinessPartnerIsBlocked      whereHelpernull_Bool
	GroupBusinessPartnerName1     whereHelpernull_String
	GroupBusinessPartnerName2     whereHelpernull_String
	AddressID                     whereHelpernull_Int
	BusinessPartnerIDByExtSystem  whereHelpernull_String
	IsMarkedForDeletion           whereHelpernull_Bool
}{
	BusinessPartner:               whereHelperint{field: "`data_platform_business_partner_general_data`.`BusinessPartner`"},
	BusinessPartnerFullName:       whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerFullName`"},
	BusinessPartnerName:           whereHelperstring{field: "`data_platform_business_partner_general_data`.`BusinessPartnerName`"},
	CreationDate:                  whereHelperstring{field: "`data_platform_business_partner_general_data`.`CreationDate`"},
	CreationTime:                  whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`CreationTime`"},
	Industry:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`Industry`"},
	LegalEntityRegistration:       whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`LegalEntityRegistration`"},
	Country:                       whereHelperstring{field: "`data_platform_business_partner_general_data`.`Country`"},
	Language:                      whereHelperstring{field: "`data_platform_business_partner_general_data`.`Language`"},
	Currency:                      whereHelperstring{field: "`data_platform_business_partner_general_data`.`Currency`"},
	LastChangeDate:                whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`LastChangeDate`"},
	LastChangeTime:                whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`LastChangeTime`"},
	OrganizationBPName1:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName1`"},
	OrganizationBPName2:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName2`"},
	OrganizationBPName3:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName3`"},
	OrganizationBPName4:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName4`"},
	BPTag1:                        whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPTag1`"},
	BPTag2:                        whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPTag2`"},
	BPTag3:                        whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPTag3`"},
	BPTag4:                        whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPTag4`"},
	OrganizationFoundationDate:    whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationFoundationDate`"},
	OrganizationLiquidationDate:   whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationLiquidationDate`"},
	BusinessPartnerBirthplaceName: whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerBirthplaceName`"},
	BusinessPartnerDeathDate:      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerDeathDate`"},
	BusinessPartnerIsBlocked:      whereHelpernull_Bool{field: "`data_platform_business_partner_general_data`.`BusinessPartnerIsBlocked`"},
	GroupBusinessPartnerName1:     whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`GroupBusinessPartnerName1`"},
	GroupBusinessPartnerName2:     whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`GroupBusinessPartnerName2`"},
	AddressID:                     whereHelpernull_Int{field: "`data_platform_business_partner_general_data`.`AddressID`"},
	BusinessPartnerIDByExtSystem:  whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerIDByExtSystem`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`data_platform_business_partner_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBusinessPartnerGeneralDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerGeneralDatumRels = struct {
	BusinessPartnerDataPlatformCodeConversionCodeConversionData             string
	DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData       string
	BusinessPartnerDataPlatformDeliveryDocumentPartnerData                  string
	BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData           string
	DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData       string
	OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData string
	ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData    string
	BusinessPartnerDataPlatformProductStockProductStockDataOlds             string
	BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData     string
	BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData            string
	BuyerDataPlatformSupplyChainRelationshipGeneralData                     string
	SellerDataPlatformSupplyChainRelationshipGeneralData                    string
	PayeeDataPlatformSupplyChainRelationshipPaymentRelationData             string
}{
	BusinessPartnerDataPlatformCodeConversionCodeConversionData:             "BusinessPartnerDataPlatformCodeConversionCodeConversionData",
	DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData:       "DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData",
	BusinessPartnerDataPlatformDeliveryDocumentPartnerData:                  "BusinessPartnerDataPlatformDeliveryDocumentPartnerData",
	BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData:           "BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData",
	DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData:       "DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData",
	OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData: "OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData",
	ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData:    "ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData",
	BusinessPartnerDataPlatformProductStockProductStockDataOlds:             "BusinessPartnerDataPlatformProductStockProductStockDataOlds",
	BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData:     "BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData",
	BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData:            "BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData",
	BuyerDataPlatformSupplyChainRelationshipGeneralData:                     "BuyerDataPlatformSupplyChainRelationshipGeneralData",
	SellerDataPlatformSupplyChainRelationshipGeneralData:                    "SellerDataPlatformSupplyChainRelationshipGeneralData",
	PayeeDataPlatformSupplyChainRelationshipPaymentRelationData:             "PayeeDataPlatformSupplyChainRelationshipPaymentRelationData",
}

// dataPlatformBusinessPartnerGeneralDatumR is where relationships are stored.
type dataPlatformBusinessPartnerGeneralDatumR struct {
	BusinessPartnerDataPlatformCodeConversionCodeConversionData             DataPlatformCodeConversionCodeConversionDatumSlice            `boil:"BusinessPartnerDataPlatformCodeConversionCodeConversionData" json:"BusinessPartnerDataPlatformCodeConversionCodeConversionData" toml:"BusinessPartnerDataPlatformCodeConversionCodeConversionData" yaml:"BusinessPartnerDataPlatformCodeConversionCodeConversionData"`
	DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData       DataPlatformDeliveryDocumentHeaderDocDatumSlice               `boil:"DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData" json:"DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData" toml:"DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData" yaml:"DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData"`
	BusinessPartnerDataPlatformDeliveryDocumentPartnerData                  DataPlatformDeliveryDocumentPartnerDatumSlice                 `boil:"BusinessPartnerDataPlatformDeliveryDocumentPartnerData" json:"BusinessPartnerDataPlatformDeliveryDocumentPartnerData" toml:"BusinessPartnerDataPlatformDeliveryDocumentPartnerData" yaml:"BusinessPartnerDataPlatformDeliveryDocumentPartnerData"`
	BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData           DataPlatformEquipmentMasterBusinessPartnerDatumSlice          `boil:"BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData" json:"BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData" toml:"BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData" yaml:"BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData"`
	DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData       DataPlatformEquipmentMasterGeneralDocDatumSlice               `boil:"DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData" json:"DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData" toml:"DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData" yaml:"DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData"`
	OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice     `boil:"OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData" json:"OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData" toml:"OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData" yaml:"OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData"`
	ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData    DataPlatformPlannedOrderComponentDatumSlice                   `boil:"ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData" json:"ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData" toml:"ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData" yaml:"ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData"`
	BusinessPartnerDataPlatformProductStockProductStockDataOlds             DataPlatformProductStockProductStockDataOldSlice              `boil:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" json:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" toml:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" yaml:"BusinessPartnerDataPlatformProductStockProductStockDataOlds"`
	BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData     DataPlatformSupplyChainRelationshipBillingRelationDatumSlice  `boil:"BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData" json:"BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData" toml:"BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData" yaml:"BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData"`
	BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData            DataPlatformSupplyChainRelationshipDeliveryRelationDatumSlice `boil:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData" json:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData" toml:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData" yaml:"BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData"`
	BuyerDataPlatformSupplyChainRelationshipGeneralData                     DataPlatformSupplyChainRelationshipGeneralDatumSlice          `boil:"BuyerDataPlatformSupplyChainRelationshipGeneralData" json:"BuyerDataPlatformSupplyChainRelationshipGeneralData" toml:"BuyerDataPlatformSupplyChainRelationshipGeneralData" yaml:"BuyerDataPlatformSupplyChainRelationshipGeneralData"`
	SellerDataPlatformSupplyChainRelationshipGeneralData                    DataPlatformSupplyChainRelationshipGeneralDatumSlice          `boil:"SellerDataPlatformSupplyChainRelationshipGeneralData" json:"SellerDataPlatformSupplyChainRelationshipGeneralData" toml:"SellerDataPlatformSupplyChainRelationshipGeneralData" yaml:"SellerDataPlatformSupplyChainRelationshipGeneralData"`
	PayeeDataPlatformSupplyChainRelationshipPaymentRelationData             DataPlatformSupplyChainRelationshipPaymentRelationDatumSlice  `boil:"PayeeDataPlatformSupplyChainRelationshipPaymentRelationData" json:"PayeeDataPlatformSupplyChainRelationshipPaymentRelationData" toml:"PayeeDataPlatformSupplyChainRelationshipPaymentRelationData" yaml:"PayeeDataPlatformSupplyChainRelationshipPaymentRelationData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerGeneralDatumR) NewStruct() *dataPlatformBusinessPartnerGeneralDatumR {
	return &dataPlatformBusinessPartnerGeneralDatumR{}
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformCodeConversionCodeConversionData() DataPlatformCodeConversionCodeConversionDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformCodeConversionCodeConversionData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData() DataPlatformDeliveryDocumentHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformDeliveryDocumentPartnerData() DataPlatformDeliveryDocumentPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformDeliveryDocumentPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData() DataPlatformEquipmentMasterBusinessPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData() DataPlatformEquipmentMasterGeneralDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData() DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData() DataPlatformPlannedOrderComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformProductStockProductStockDataOlds() DataPlatformProductStockProductStockDataOldSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductStockProductStockDataOlds
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData() DataPlatformSupplyChainRelationshipBillingRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBuyerDataPlatformSupplyChainRelationshipDeliveryRelationData() DataPlatformSupplyChainRelationshipDeliveryRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBuyerDataPlatformSupplyChainRelationshipGeneralData() DataPlatformSupplyChainRelationshipGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSupplyChainRelationshipGeneralData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetSellerDataPlatformSupplyChainRelationshipGeneralData() DataPlatformSupplyChainRelationshipGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.SellerDataPlatformSupplyChainRelationshipGeneralData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetPayeeDataPlatformSupplyChainRelationshipPaymentRelationData() DataPlatformSupplyChainRelationshipPaymentRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.PayeeDataPlatformSupplyChainRelationshipPaymentRelationData
}

// dataPlatformBusinessPartnerGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerGeneralDatumL struct{}

var (
	dataPlatformBusinessPartnerGeneralDatumAllColumns            = []string{"BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "CreationDate", "CreationTime", "Industry", "LegalEntityRegistration", "Country", "Language", "Currency", "LastChangeDate", "LastChangeTime", "OrganizationBPName1", "OrganizationBPName2", "OrganizationBPName3", "OrganizationBPName4", "BPTag1", "BPTag2", "BPTag3", "BPTag4", "OrganizationFoundationDate", "OrganizationLiquidationDate", "BusinessPartnerBirthplaceName", "BusinessPartnerDeathDate", "BusinessPartnerIsBlocked", "GroupBusinessPartnerName1", "GroupBusinessPartnerName2", "AddressID", "BusinessPartnerIDByExtSystem", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault = []string{"BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "CreationDate", "CreationTime", "Industry", "LegalEntityRegistration", "Country", "Language", "Currency", "LastChangeDate", "LastChangeTime", "OrganizationBPName1", "OrganizationBPName2", "OrganizationBPName3", "OrganizationBPName4", "BPTag1", "BPTag2", "BPTag3", "BPTag4", "OrganizationFoundationDate", "OrganizationLiquidationDate", "BusinessPartnerBirthplaceName", "BusinessPartnerDeathDate", "BusinessPartnerIsBlocked", "GroupBusinessPartnerName1", "GroupBusinessPartnerName2", "AddressID", "BusinessPartnerIDByExtSystem", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns     = []string{"BusinessPartner"}
	dataPlatformBusinessPartnerGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerGeneralDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerGeneralDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerGeneralDatum.
	DataPlatformBusinessPartnerGeneralDatumSlice []*DataPlatformBusinessPartnerGeneralDatum

	dataPlatformBusinessPartnerGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerGeneralDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerGeneralDatum{})
	dataPlatformBusinessPartnerGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerGeneralDatumType)
	dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformBusinessPartnerGeneralDatum record from the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerGeneralDatum, error) {
	o := &DataPlatformBusinessPartnerGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_general_data")
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerGeneralDatum records from the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerGeneralDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerGeneralDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerGeneralDatum records in the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_general_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformCodeConversionCodeConversionData retrieves all the data_platform_code_conversion_code_conversion_datum's DataPlatformCodeConversionCodeConversionData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformCodeConversionCodeConversionData(mods ...qm.QueryMod) dataPlatformCodeConversionCodeConversionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_code_conversion_code_conversion_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformCodeConversionCodeConversionData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData retrieves all the data_platform_delivery_document_header_doc_datum's DataPlatformDeliveryDocumentHeaderDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformDeliveryDocumentHeaderDocData(queryMods...)
}

// BusinessPartnerDataPlatformDeliveryDocumentPartnerData retrieves all the data_platform_delivery_document_partner_datum's DataPlatformDeliveryDocumentPartnerData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformDeliveryDocumentPartnerData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_partner_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformDeliveryDocumentPartnerData(queryMods...)
}

// BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData retrieves all the data_platform_equipment_master_business_partner_datum's DataPlatformEquipmentMasterBusinessPartnerData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData(mods ...qm.QueryMod) dataPlatformEquipmentMasterBusinessPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_equipment_master_business_partner_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformEquipmentMasterBusinessPartnerData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData retrieves all the data_platform_equipment_master_general_doc_datum's DataPlatformEquipmentMasterGeneralDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(mods ...qm.QueryMod) dataPlatformEquipmentMasterGeneralDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_equipment_master_general_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformEquipmentMasterGeneralDocData(queryMods...)
}

// OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData retrieves all the data_platform_equipment_master_owner_business_partner_datum's DataPlatformEquipmentMasterOwnerBusinessPartnerData with an executor via OwnerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData(mods ...qm.QueryMod) dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_equipment_master_owner_business_partner_data`.`OwnerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformEquipmentMasterOwnerBusinessPartnerData(queryMods...)
}

// ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData retrieves all the data_platform_planned_order_component_datum's DataPlatformPlannedOrderComponentData with an executor via ComponentProductBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_component_data`.`ComponentProductBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformPlannedOrderComponentData(queryMods...)
}

// BusinessPartnerDataPlatformProductStockProductStockDataOlds retrieves all the data_platform_product_stock_product_stock_data_old's DataPlatformProductStockProductStockDataOlds with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformProductStockProductStockDataOlds(mods ...qm.QueryMod) dataPlatformProductStockProductStockDataOldQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_data_old`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockDataOlds(queryMods...)
}

// BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData retrieves all the data_platform_supply_chain_relationship_billing_relation_datum's DataPlatformSupplyChainRelationshipBillingRelationData with an executor via BillFromParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipBillingRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_supply_chain_relationship_billing_relation_data`.`BillFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformSupplyChainRelationshipBillingRelationData(queryMods...)
}

// BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData retrieves all the data_platform_supply_chain_relationship_delivery_relation_datum's DataPlatformSupplyChainRelationshipDeliveryRelationData with an executor via DeliverFromParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipDeliveryRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_supply_chain_relationship_delivery_relation_data`.`DeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformSupplyChainRelationshipDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSupplyChainRelationshipGeneralData retrieves all the data_platform_supply_chain_relationship_general_datum's DataPlatformSupplyChainRelationshipGeneralData with an executor via Buyer column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BuyerDataPlatformSupplyChainRelationshipGeneralData(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_supply_chain_relationship_general_data`.`Buyer`=?", o.BusinessPartner),
	)

	return DataPlatformSupplyChainRelationshipGeneralData(queryMods...)
}

// SellerDataPlatformSupplyChainRelationshipGeneralData retrieves all the data_platform_supply_chain_relationship_general_datum's DataPlatformSupplyChainRelationshipGeneralData with an executor via Seller column.
func (o *DataPlatformBusinessPartnerGeneralDatum) SellerDataPlatformSupplyChainRelationshipGeneralData(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_supply_chain_relationship_general_data`.`Seller`=?", o.BusinessPartner),
	)

	return DataPlatformSupplyChainRelationshipGeneralData(queryMods...)
}

// PayeeDataPlatformSupplyChainRelationshipPaymentRelationData retrieves all the data_platform_supply_chain_relationship_payment_relation_datum's DataPlatformSupplyChainRelationshipPaymentRelationData with an executor via Payee column.
func (o *DataPlatformBusinessPartnerGeneralDatum) PayeeDataPlatformSupplyChainRelationshipPaymentRelationData(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipPaymentRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_supply_chain_relationship_payment_relation_data`.`Payee`=?", o.BusinessPartner),
	)

	return DataPlatformSupplyChainRelationshipPaymentRelationData(queryMods...)
}

// LoadBusinessPartnerDataPlatformCodeConversionCodeConversionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformCodeConversionCodeConversionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_code_conversion_code_conversion_data`),
		qm.WhereIn(`data_platform_code_conversion_code_conversion_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_code_conversion_code_conversion_data")
	}

	var resultSlice []*DataPlatformCodeConversionCodeConversionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_code_conversion_code_conversion_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_code_conversion_code_conversion_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_code_conversion_code_conversion_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData = append(local.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_doc_data`),
		qm.WhereIn(`data_platform_delivery_document_header_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_doc_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformDeliveryDocumentPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformDeliveryDocumentPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_partner_data`),
		qm.WhereIn(`data_platform_delivery_document_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_partner_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_partner_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformDeliveryDocumentPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformDeliveryDocumentPartnerData = append(local.R.BusinessPartnerDataPlatformDeliveryDocumentPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_business_partner_data`),
		qm.WhereIn(`data_platform_equipment_master_business_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_equipment_master_business_partner_data")
	}

	var resultSlice []*DataPlatformEquipmentMasterBusinessPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_equipment_master_business_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_equipment_master_business_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_business_partner_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData = append(local.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_general_doc_data`),
		qm.WhereIn(`data_platform_equipment_master_general_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_equipment_master_general_doc_data")
	}

	var resultSlice []*DataPlatformEquipmentMasterGeneralDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_equipment_master_general_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_equipment_master_general_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_general_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_owner_business_partner_data`),
		qm.WhereIn(`data_platform_equipment_master_owner_business_partner_data.OwnerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_equipment_master_owner_business_partner_data")
	}

	var resultSlice []*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_equipment_master_owner_business_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_equipment_master_owner_business_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_owner_business_partner_data")
	}

	if singular {
		object.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.OwnerBusinessPartner {
				local.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData = append(local.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_component_data`),
		qm.WhereIn(`data_platform_planned_order_component_data.ComponentProductBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_component_data")
	}

	var resultSlice []*DataPlatformPlannedOrderComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_component_data")
	}

	if singular {
		object.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.ComponentProductBusinessPartner) {
				local.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData = append(local.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductStockProductStockDataOlds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformProductStockProductStockDataOlds(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_data_old`),
		qm.WhereIn(`data_platform_product_stock_product_stock_data_old.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_data_old")
	}

	var resultSlice []*DataPlatformProductStockProductStockDataOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_data_old")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_data_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_data_old")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = append(local.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_billing_relation_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_billing_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_supply_chain_relationship_billing_relation_data")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_supply_chain_relationship_billing_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_supply_chain_relationship_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_billing_relation_data")
	}

	if singular {
		object.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BillFromParty {
				local.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData = append(local.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSupplyChainRelationshipDeliveryRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBuyerDataPlatformSupplyChainRelationshipDeliveryRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_delivery_relation_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_delivery_relation_data.DeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_supply_chain_relationship_delivery_relation_data")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_supply_chain_relationship_delivery_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_supply_chain_relationship_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_delivery_relation_data")
	}

	if singular {
		object.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverFromParty {
				local.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData = append(local.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSupplyChainRelationshipGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBuyerDataPlatformSupplyChainRelationshipGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_general_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_supply_chain_relationship_general_data")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_supply_chain_relationship_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_supply_chain_relationship_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_general_data")
	}

	if singular {
		object.R.BuyerDataPlatformSupplyChainRelationshipGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Buyer {
				local.R.BuyerDataPlatformSupplyChainRelationshipGeneralData = append(local.R.BuyerDataPlatformSupplyChainRelationshipGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSellerDataPlatformSupplyChainRelationshipGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadSellerDataPlatformSupplyChainRelationshipGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_general_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_general_data.Seller in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_supply_chain_relationship_general_data")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_supply_chain_relationship_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_supply_chain_relationship_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_general_data")
	}

	if singular {
		object.R.SellerDataPlatformSupplyChainRelationshipGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Seller {
				local.R.SellerDataPlatformSupplyChainRelationshipGeneralData = append(local.R.SellerDataPlatformSupplyChainRelationshipGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPayeeDataPlatformSupplyChainRelationshipPaymentRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadPayeeDataPlatformSupplyChainRelationshipPaymentRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_payment_relation_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_payment_relation_data.Payee in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_supply_chain_relationship_payment_relation_data")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_supply_chain_relationship_payment_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_supply_chain_relationship_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_payment_relation_data")
	}

	if singular {
		object.R.PayeeDataPlatformSupplyChainRelationshipPaymentRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Payee {
				local.R.PayeeDataPlatformSupplyChainRelationshipPaymentRelationData = append(local.R.PayeeDataPlatformSupplyChainRelationshipPaymentRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformCodeConversionCodeConversionData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformCodeConversionCodeConversionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformCodeConversionCodeConversionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_code_conversion_code_conversion_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.CodeConversionID, rel.SystemConvertTo, rel.SystemConvertFrom, rel.LabelConvertTo, rel.LabelConvertFrom, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformCodeConversionCodeConversionData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData = append(o.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData, related...)
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.DeliveryDocument, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDocDatum) error {
	query := "update `data_platform_delivery_document_header_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData = o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformDeliveryDocumentPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformDeliveryDocumentPartnerData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformDeliveryDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.DeliveryDocument, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformDeliveryDocumentPartnerData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformDeliveryDocumentPartnerData = append(o.R.BusinessPartnerDataPlatformDeliveryDocumentPartnerData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterBusinessPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_equipment_master_business_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Equipment, rel.EquipmentPartnerObjectNmbr}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData = append(o.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData, related...)
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterGeneralDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_equipment_master_general_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Equipment, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterGeneralDocDatum) error {
	query := "update `data_platform_equipment_master_general_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformEquipmentMasterGeneralDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OwnerBusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_equipment_master_owner_business_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OwnerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Equipment, rel.OwnerBusinessPartner, rel.ValidityStartDate, rel.ValidityEndDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OwnerBusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData: related,
		}
	} else {
		o.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData = append(o.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData, related...)
	}

	return nil
}

// AddComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ComponentProductBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ComponentProductBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData: related,
		}
	} else {
		o.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData = append(o.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData, related...)
	}

	return nil
}

// SetComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ComponentProductBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData accordingly.
// Replaces o.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderComponentDatum) error {
	query := "update `data_platform_planned_order_component_data` set `ComponentProductBusinessPartner` = null where `ComponentProductBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData = nil
	}

	return o.AddComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData(ctx, exec, insert, related...)
}

// RemoveComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData relationships from objects passed in.
// Removes related items from R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderComponentDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ComponentProductBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ComponentProductBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData)
			if ln > 1 && i < ln-1 {
				o.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData[i] = o.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData[ln-1]
			}
			o.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData = o.R.ComponentProductBusinessPartnerDataPlatformPlannedOrderComponentData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductStockProductStockDataOlds adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformProductStockProductStockDataOlds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDataOld) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_data_old` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockDataOldPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Product, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformProductStockProductStockDataOlds: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = append(o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds, related...)
	}

	return nil
}

// AddBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSupplyChainRelationshipBillingRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillFromParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_supply_chain_relationship_billing_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipBillingRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillFromParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData = append(o.R.BillFromPartyDataPlatformSupplyChainRelationshipBillingRelationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSupplyChainRelationshipDeliveryRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBuyerDataPlatformSupplyChainRelationshipDeliveryRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSupplyChainRelationshipDeliveryRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverFromParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_supply_chain_relationship_delivery_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipDeliveryRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverFromParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData: related,
		}
	} else {
		o.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData = append(o.R.BuyerDataPlatformSupplyChainRelationshipDeliveryRelationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSupplyChainRelationshipGeneralData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSupplyChainRelationshipGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBuyerDataPlatformSupplyChainRelationshipGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSupplyChainRelationshipGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_supply_chain_relationship_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BuyerDataPlatformSupplyChainRelationshipGeneralData: related,
		}
	} else {
		o.R.BuyerDataPlatformSupplyChainRelationshipGeneralData = append(o.R.BuyerDataPlatformSupplyChainRelationshipGeneralData, related...)
	}

	return nil
}

// AddSellerDataPlatformSupplyChainRelationshipGeneralData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.SellerDataPlatformSupplyChainRelationshipGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddSellerDataPlatformSupplyChainRelationshipGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSupplyChainRelationshipGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Seller = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_supply_chain_relationship_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Seller"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Seller = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			SellerDataPlatformSupplyChainRelationshipGeneralData: related,
		}
	} else {
		o.R.SellerDataPlatformSupplyChainRelationshipGeneralData = append(o.R.SellerDataPlatformSupplyChainRelationshipGeneralData, related...)
	}

	return nil
}

// AddPayeeDataPlatformSupplyChainRelationshipPaymentRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.PayeeDataPlatformSupplyChainRelationshipPaymentRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddPayeeDataPlatformSupplyChainRelationshipPaymentRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSupplyChainRelationshipPaymentRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Payee = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_supply_chain_relationship_payment_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Payee"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipPaymentRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.SupplyChainRelationshipPaymentID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty, rel.Payer, rel.Payee}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Payee = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			PayeeDataPlatformSupplyChainRelationshipPaymentRelationData: related,
		}
	} else {
		o.R.PayeeDataPlatformSupplyChainRelationshipPaymentRelationData = append(o.R.PayeeDataPlatformSupplyChainRelationshipPaymentRelationData, related...)
	}

	return nil
}

// DataPlatformBusinessPartnerGeneralData retrieves all the records using an executor.
func DataPlatformBusinessPartnerGeneralData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_general_data`.*"})
	}

	return dataPlatformBusinessPartnerGeneralDatumQuery{q}
}

// FindDataPlatformBusinessPartnerGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, selectCols ...string) (*DataPlatformBusinessPartnerGeneralDatum, error) {
	dataPlatformBusinessPartnerGeneralDatumObj := &DataPlatformBusinessPartnerGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_general_data` where `BusinessPartner`=?", sel,
	)

	q := queries.Raw(query, businessPartner)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_general_data")
	}

	return dataPlatformBusinessPartnerGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_general_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumInsertCache[key]
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformBusinessPartnerGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumUpdateCache[key]
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_business_partner_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, append(wl, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_business_partner_general_data row")
	}

	if !cached {
		dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_business_partner_general_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerGeneralDatum slice")
	}

	return nil
}

var mySQLDataPlatformBusinessPartnerGeneralDatumUniqueColumns = []string{
	"BusinessPartner",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_general_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumUpsertCache[key]
	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformBusinessPartnerGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformBusinessPartnerGeneralDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_general_data` WHERE `BusinessPartner`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_business_partner_general_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformBusinessPartnerGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_general_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerGeneralDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerGeneralDatum(ctx, exec, o.BusinessPartner)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_general_data`.* FROM `data_platform_business_partner_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerGeneralDatumExists checks if the DataPlatformBusinessPartnerGeneralDatum row exists.
func DataPlatformBusinessPartnerGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_general_data` where `BusinessPartner`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerGeneralDatum row exists.
func (o *DataPlatformBusinessPartnerGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerGeneralDatumExists(ctx, exec, o.BusinessPartner)
}
