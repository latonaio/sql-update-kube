// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerGeneralDatum is an object representing the database table.
type DataPlatformBusinessPartnerGeneralDatum struct {
	BusinessPartner               int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	BusinessPartnerFullName       null.String `boil:"BusinessPartnerFullName" json:"BusinessPartnerFullName,omitempty" toml:"BusinessPartnerFullName" yaml:"BusinessPartnerFullName,omitempty"`
	BusinessPartnerName           string      `boil:"BusinessPartnerName" json:"BusinessPartnerName" toml:"BusinessPartnerName" yaml:"BusinessPartnerName"`
	Industry                      null.String `boil:"Industry" json:"Industry,omitempty" toml:"Industry" yaml:"Industry,omitempty"`
	LegalEntityRegistration       null.String `boil:"LegalEntityRegistration" json:"LegalEntityRegistration,omitempty" toml:"LegalEntityRegistration" yaml:"LegalEntityRegistration,omitempty"`
	Country                       string      `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	Language                      string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	Currency                      string      `boil:"Currency" json:"Currency" toml:"Currency" yaml:"Currency"`
	OrganizationBPName1           null.String `boil:"OrganizationBPName1" json:"OrganizationBPName1,omitempty" toml:"OrganizationBPName1" yaml:"OrganizationBPName1,omitempty"`
	OrganizationBPName2           null.String `boil:"OrganizationBPName2" json:"OrganizationBPName2,omitempty" toml:"OrganizationBPName2" yaml:"OrganizationBPName2,omitempty"`
	OrganizationBPName3           null.String `boil:"OrganizationBPName3" json:"OrganizationBPName3,omitempty" toml:"OrganizationBPName3" yaml:"OrganizationBPName3,omitempty"`
	OrganizationBPName4           null.String `boil:"OrganizationBPName4" json:"OrganizationBPName4,omitempty" toml:"OrganizationBPName4" yaml:"OrganizationBPName4,omitempty"`
	BPTag1                        null.String `boil:"BPTag1" json:"BPTag1,omitempty" toml:"BPTag1" yaml:"BPTag1,omitempty"`
	BPTag2                        null.String `boil:"BPTag2" json:"BPTag2,omitempty" toml:"BPTag2" yaml:"BPTag2,omitempty"`
	BPTag3                        null.String `boil:"BPTag3" json:"BPTag3,omitempty" toml:"BPTag3" yaml:"BPTag3,omitempty"`
	BPTag4                        null.String `boil:"BPTag4" json:"BPTag4,omitempty" toml:"BPTag4" yaml:"BPTag4,omitempty"`
	OrganizationFoundationDate    null.String `boil:"OrganizationFoundationDate" json:"OrganizationFoundationDate,omitempty" toml:"OrganizationFoundationDate" yaml:"OrganizationFoundationDate,omitempty"`
	OrganizationLiquidationDate   null.String `boil:"OrganizationLiquidationDate" json:"OrganizationLiquidationDate,omitempty" toml:"OrganizationLiquidationDate" yaml:"OrganizationLiquidationDate,omitempty"`
	BusinessPartnerBirthplaceName null.String `boil:"BusinessPartnerBirthplaceName" json:"BusinessPartnerBirthplaceName,omitempty" toml:"BusinessPartnerBirthplaceName" yaml:"BusinessPartnerBirthplaceName,omitempty"`
	BusinessPartnerDeathDate      null.String `boil:"BusinessPartnerDeathDate" json:"BusinessPartnerDeathDate,omitempty" toml:"BusinessPartnerDeathDate" yaml:"BusinessPartnerDeathDate,omitempty"`
	GroupBusinessPartnerName1     null.String `boil:"GroupBusinessPartnerName1" json:"GroupBusinessPartnerName1,omitempty" toml:"GroupBusinessPartnerName1" yaml:"GroupBusinessPartnerName1,omitempty"`
	GroupBusinessPartnerName2     null.String `boil:"GroupBusinessPartnerName2" json:"GroupBusinessPartnerName2,omitempty" toml:"GroupBusinessPartnerName2" yaml:"GroupBusinessPartnerName2,omitempty"`
	AddressID                     null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`
	BusinessPartnerIDByExtSystem  null.String `boil:"BusinessPartnerIDByExtSystem" json:"BusinessPartnerIDByExtSystem,omitempty" toml:"BusinessPartnerIDByExtSystem" yaml:"BusinessPartnerIDByExtSystem,omitempty"`
	BusinessPartnerIsBlocked      null.Bool   `boil:"BusinessPartnerIsBlocked" json:"BusinessPartnerIsBlocked,omitempty" toml:"BusinessPartnerIsBlocked" yaml:"BusinessPartnerIsBlocked,omitempty"`
	CreationDate                  string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion           null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBusinessPartnerGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerGeneralDatumColumns = struct {
	BusinessPartner               string
	BusinessPartnerFullName       string
	BusinessPartnerName           string
	Industry                      string
	LegalEntityRegistration       string
	Country                       string
	Language                      string
	Currency                      string
	OrganizationBPName1           string
	OrganizationBPName2           string
	OrganizationBPName3           string
	OrganizationBPName4           string
	BPTag1                        string
	BPTag2                        string
	BPTag3                        string
	BPTag4                        string
	OrganizationFoundationDate    string
	OrganizationLiquidationDate   string
	BusinessPartnerBirthplaceName string
	BusinessPartnerDeathDate      string
	GroupBusinessPartnerName1     string
	GroupBusinessPartnerName2     string
	AddressID                     string
	BusinessPartnerIDByExtSystem  string
	BusinessPartnerIsBlocked      string
	CreationDate                  string
	LastChangeDate                string
	IsMarkedForDeletion           string
}{
	BusinessPartner:               "BusinessPartner",
	BusinessPartnerFullName:       "BusinessPartnerFullName",
	BusinessPartnerName:           "BusinessPartnerName",
	Industry:                      "Industry",
	LegalEntityRegistration:       "LegalEntityRegistration",
	Country:                       "Country",
	Language:                      "Language",
	Currency:                      "Currency",
	OrganizationBPName1:           "OrganizationBPName1",
	OrganizationBPName2:           "OrganizationBPName2",
	OrganizationBPName3:           "OrganizationBPName3",
	OrganizationBPName4:           "OrganizationBPName4",
	BPTag1:                        "BPTag1",
	BPTag2:                        "BPTag2",
	BPTag3:                        "BPTag3",
	BPTag4:                        "BPTag4",
	OrganizationFoundationDate:    "OrganizationFoundationDate",
	OrganizationLiquidationDate:   "OrganizationLiquidationDate",
	BusinessPartnerBirthplaceName: "BusinessPartnerBirthplaceName",
	BusinessPartnerDeathDate:      "BusinessPartnerDeathDate",
	GroupBusinessPartnerName1:     "GroupBusinessPartnerName1",
	GroupBusinessPartnerName2:     "GroupBusinessPartnerName2",
	AddressID:                     "AddressID",
	BusinessPartnerIDByExtSystem:  "BusinessPartnerIDByExtSystem",
	BusinessPartnerIsBlocked:      "BusinessPartnerIsBlocked",
	CreationDate:                  "CreationDate",
	LastChangeDate:                "LastChangeDate",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
}

var DataPlatformBusinessPartnerGeneralDatumTableColumns = struct {
	BusinessPartner               string
	BusinessPartnerFullName       string
	BusinessPartnerName           string
	Industry                      string
	LegalEntityRegistration       string
	Country                       string
	Language                      string
	Currency                      string
	OrganizationBPName1           string
	OrganizationBPName2           string
	OrganizationBPName3           string
	OrganizationBPName4           string
	BPTag1                        string
	BPTag2                        string
	BPTag3                        string
	BPTag4                        string
	OrganizationFoundationDate    string
	OrganizationLiquidationDate   string
	BusinessPartnerBirthplaceName string
	BusinessPartnerDeathDate      string
	GroupBusinessPartnerName1     string
	GroupBusinessPartnerName2     string
	AddressID                     string
	BusinessPartnerIDByExtSystem  string
	BusinessPartnerIsBlocked      string
	CreationDate                  string
	LastChangeDate                string
	IsMarkedForDeletion           string
}{
	BusinessPartner:               "data_platform_business_partner_general_data.BusinessPartner",
	BusinessPartnerFullName:       "data_platform_business_partner_general_data.BusinessPartnerFullName",
	BusinessPartnerName:           "data_platform_business_partner_general_data.BusinessPartnerName",
	Industry:                      "data_platform_business_partner_general_data.Industry",
	LegalEntityRegistration:       "data_platform_business_partner_general_data.LegalEntityRegistration",
	Country:                       "data_platform_business_partner_general_data.Country",
	Language:                      "data_platform_business_partner_general_data.Language",
	Currency:                      "data_platform_business_partner_general_data.Currency",
	OrganizationBPName1:           "data_platform_business_partner_general_data.OrganizationBPName1",
	OrganizationBPName2:           "data_platform_business_partner_general_data.OrganizationBPName2",
	OrganizationBPName3:           "data_platform_business_partner_general_data.OrganizationBPName3",
	OrganizationBPName4:           "data_platform_business_partner_general_data.OrganizationBPName4",
	BPTag1:                        "data_platform_business_partner_general_data.BPTag1",
	BPTag2:                        "data_platform_business_partner_general_data.BPTag2",
	BPTag3:                        "data_platform_business_partner_general_data.BPTag3",
	BPTag4:                        "data_platform_business_partner_general_data.BPTag4",
	OrganizationFoundationDate:    "data_platform_business_partner_general_data.OrganizationFoundationDate",
	OrganizationLiquidationDate:   "data_platform_business_partner_general_data.OrganizationLiquidationDate",
	BusinessPartnerBirthplaceName: "data_platform_business_partner_general_data.BusinessPartnerBirthplaceName",
	BusinessPartnerDeathDate:      "data_platform_business_partner_general_data.BusinessPartnerDeathDate",
	GroupBusinessPartnerName1:     "data_platform_business_partner_general_data.GroupBusinessPartnerName1",
	GroupBusinessPartnerName2:     "data_platform_business_partner_general_data.GroupBusinessPartnerName2",
	AddressID:                     "data_platform_business_partner_general_data.AddressID",
	BusinessPartnerIDByExtSystem:  "data_platform_business_partner_general_data.BusinessPartnerIDByExtSystem",
	BusinessPartnerIsBlocked:      "data_platform_business_partner_general_data.BusinessPartnerIsBlocked",
	CreationDate:                  "data_platform_business_partner_general_data.CreationDate",
	LastChangeDate:                "data_platform_business_partner_general_data.LastChangeDate",
	IsMarkedForDeletion:           "data_platform_business_partner_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformBusinessPartnerGeneralDatumWhere = struct {
	BusinessPartner               whereHelperint
	BusinessPartnerFullName       whereHelpernull_String
	BusinessPartnerName           whereHelperstring
	Industry                      whereHelpernull_String
	LegalEntityRegistration       whereHelpernull_String
	Country                       whereHelperstring
	Language                      whereHelperstring
	Currency                      whereHelperstring
	OrganizationBPName1           whereHelpernull_String
	OrganizationBPName2           whereHelpernull_String
	OrganizationBPName3           whereHelpernull_String
	OrganizationBPName4           whereHelpernull_String
	BPTag1                        whereHelpernull_String
	BPTag2                        whereHelpernull_String
	BPTag3                        whereHelpernull_String
	BPTag4                        whereHelpernull_String
	OrganizationFoundationDate    whereHelpernull_String
	OrganizationLiquidationDate   whereHelpernull_String
	BusinessPartnerBirthplaceName whereHelpernull_String
	BusinessPartnerDeathDate      whereHelpernull_String
	GroupBusinessPartnerName1     whereHelpernull_String
	GroupBusinessPartnerName2     whereHelpernull_String
	AddressID                     whereHelpernull_Int
	BusinessPartnerIDByExtSystem  whereHelpernull_String
	BusinessPartnerIsBlocked      whereHelpernull_Bool
	CreationDate                  whereHelperstring
	LastChangeDate                whereHelperstring
	IsMarkedForDeletion           whereHelpernull_Bool
}{
	BusinessPartner:               whereHelperint{field: "`data_platform_business_partner_general_data`.`BusinessPartner`"},
	BusinessPartnerFullName:       whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerFullName`"},
	BusinessPartnerName:           whereHelperstring{field: "`data_platform_business_partner_general_data`.`BusinessPartnerName`"},
	Industry:                      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`Industry`"},
	LegalEntityRegistration:       whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`LegalEntityRegistration`"},
	Country:                       whereHelperstring{field: "`data_platform_business_partner_general_data`.`Country`"},
	Language:                      whereHelperstring{field: "`data_platform_business_partner_general_data`.`Language`"},
	Currency:                      whereHelperstring{field: "`data_platform_business_partner_general_data`.`Currency`"},
	OrganizationBPName1:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName1`"},
	OrganizationBPName2:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName2`"},
	OrganizationBPName3:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName3`"},
	OrganizationBPName4:           whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationBPName4`"},
	BPTag1:                        whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPTag1`"},
	BPTag2:                        whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPTag2`"},
	BPTag3:                        whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPTag3`"},
	BPTag4:                        whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BPTag4`"},
	OrganizationFoundationDate:    whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationFoundationDate`"},
	OrganizationLiquidationDate:   whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`OrganizationLiquidationDate`"},
	BusinessPartnerBirthplaceName: whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerBirthplaceName`"},
	BusinessPartnerDeathDate:      whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerDeathDate`"},
	GroupBusinessPartnerName1:     whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`GroupBusinessPartnerName1`"},
	GroupBusinessPartnerName2:     whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`GroupBusinessPartnerName2`"},
	AddressID:                     whereHelpernull_Int{field: "`data_platform_business_partner_general_data`.`AddressID`"},
	BusinessPartnerIDByExtSystem:  whereHelpernull_String{field: "`data_platform_business_partner_general_data`.`BusinessPartnerIDByExtSystem`"},
	BusinessPartnerIsBlocked:      whereHelpernull_Bool{field: "`data_platform_business_partner_general_data`.`BusinessPartnerIsBlocked`"},
	CreationDate:                  whereHelperstring{field: "`data_platform_business_partner_general_data`.`CreationDate`"},
	LastChangeDate:                whereHelperstring{field: "`data_platform_business_partner_general_data`.`LastChangeDate`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`data_platform_business_partner_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBusinessPartnerGeneralDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerGeneralDatumRels = struct {
	AddressIDDataPlatformAddressAddressDatum                                   string
	CountryDataPlatformCountryCountryDatum                                     string
	CurrencyDataPlatformCurrencyCurrencyDatum                                  string
	IndustryDataPlatformIndustryIndustryDatum                                  string
	LanguageDataPlatformLanguageLanguageDatum                                  string
	BusinessPartnerDataPlatformBusinessPartnerAccountingDatum                  string
	BusinessPartnerDataPlatformBusinessPartnerGeneralDocData                   string
	BusinessPartnerDataPlatformCodeConversionCodeConversionData                string
	DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData          string
	DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData            string
	BusinessPartnerDataPlatformDeliveryDocumentPartnerData                     string
	BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData              string
	DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData          string
	OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData    string
	DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData string
	BusinessPartnerDataPlatformInvoiceDocumentPartnerData                      string
	DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData                string
	DocIssuerBusinessPartnerDataPlatformOperationsItemDocData                  string
	DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData                    string
	DocIssuerBusinessPartnerDataPlatformOrdersItemDocData                      string
	BusinessPartnerDataPlatformOrdersPartnerData                               string
	DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData              string
	DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData                string
	BusinessPartnerDataPlatformPlantGeneralData                                string
	DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData            string
	DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData    string
	DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData            string
	BusinessPartnerDataPlatformProductStockProductStockDataOlds                string
	DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData        string
	DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData           string
	DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData             string
	BusinessPartnerDataPlatformProductionOrderPartnerData                      string
	BuyerDataPlatformPurchaseRequisitionHeaderData                             string
	DeliverFromPartyDataPlatformPurchaseRequisitionItemData                    string
	DeliverToPartyDataPlatformPurchaseRequisitionItemData                      string
	SellerDataPlatformPurchaseRequisitionItemData                              string
	DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData                string
	DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData                  string
	BusinessPartnerDataPlatformQuotationsPartnerData                           string
	BillFromPartyDataPlatformSCRBillingRelationData                            string
	BillToPartyDataPlatformSCRBillingRelationData                              string
	DeliverFromPartyDataPlatformSCRDeliveryRelationData                        string
	DeliverToPartyDataPlatformSCRDeliveryRelationData                          string
	FreightBillFromPartyDataPlatformSCRFreightBillingRelationData              string
	FreightBillToPartyDataPlatformSCRFreightBillingRelationData                string
	FreightPayeeDataPlatformSCRFreightPaymentRelationData                      string
	FreightPayerDataPlatformSCRFreightPaymentRelationData                      string
	FreightPartnerDataPlatformSCRFreightRelationData                           string
	BuyerDataPlatformSCRGeneralData                                            string
	SellerDataPlatformSCRGeneralData                                           string
	DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData                      string
	PayeeDataPlatformSCRPaymentRelationData                                    string
	PayerDataPlatformSCRPaymentRelationData                                    string
}{
	AddressIDDataPlatformAddressAddressDatum:                                   "AddressIDDataPlatformAddressAddressDatum",
	CountryDataPlatformCountryCountryDatum:                                     "CountryDataPlatformCountryCountryDatum",
	CurrencyDataPlatformCurrencyCurrencyDatum:                                  "CurrencyDataPlatformCurrencyCurrencyDatum",
	IndustryDataPlatformIndustryIndustryDatum:                                  "IndustryDataPlatformIndustryIndustryDatum",
	LanguageDataPlatformLanguageLanguageDatum:                                  "LanguageDataPlatformLanguageLanguageDatum",
	BusinessPartnerDataPlatformBusinessPartnerAccountingDatum:                  "BusinessPartnerDataPlatformBusinessPartnerAccountingDatum",
	BusinessPartnerDataPlatformBusinessPartnerGeneralDocData:                   "BusinessPartnerDataPlatformBusinessPartnerGeneralDocData",
	BusinessPartnerDataPlatformCodeConversionCodeConversionData:                "BusinessPartnerDataPlatformCodeConversionCodeConversionData",
	DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData:          "DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData",
	DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData:            "DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData",
	BusinessPartnerDataPlatformDeliveryDocumentPartnerData:                     "BusinessPartnerDataPlatformDeliveryDocumentPartnerData",
	BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData:              "BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData",
	DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData:          "DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData",
	OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData:    "OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData",
	DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData: "DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData",
	BusinessPartnerDataPlatformInvoiceDocumentPartnerData:                      "BusinessPartnerDataPlatformInvoiceDocumentPartnerData",
	DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData:                "DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData",
	DocIssuerBusinessPartnerDataPlatformOperationsItemDocData:                  "DocIssuerBusinessPartnerDataPlatformOperationsItemDocData",
	DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData:                    "DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData",
	DocIssuerBusinessPartnerDataPlatformOrdersItemDocData:                      "DocIssuerBusinessPartnerDataPlatformOrdersItemDocData",
	BusinessPartnerDataPlatformOrdersPartnerData:                               "BusinessPartnerDataPlatformOrdersPartnerData",
	DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData:              "DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData",
	DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData:                "DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData",
	BusinessPartnerDataPlatformPlantGeneralData:                                "BusinessPartnerDataPlatformPlantGeneralData",
	DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData:            "DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData",
	DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData:    "DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData",
	DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData:            "DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData",
	BusinessPartnerDataPlatformProductStockProductStockDataOlds:                "BusinessPartnerDataPlatformProductStockProductStockDataOlds",
	DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData:        "DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData",
	DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData:           "DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData",
	DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData:             "DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData",
	BusinessPartnerDataPlatformProductionOrderPartnerData:                      "BusinessPartnerDataPlatformProductionOrderPartnerData",
	BuyerDataPlatformPurchaseRequisitionHeaderData:                             "BuyerDataPlatformPurchaseRequisitionHeaderData",
	DeliverFromPartyDataPlatformPurchaseRequisitionItemData:                    "DeliverFromPartyDataPlatformPurchaseRequisitionItemData",
	DeliverToPartyDataPlatformPurchaseRequisitionItemData:                      "DeliverToPartyDataPlatformPurchaseRequisitionItemData",
	SellerDataPlatformPurchaseRequisitionItemData:                              "SellerDataPlatformPurchaseRequisitionItemData",
	DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData:                "DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData",
	DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData:                  "DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData",
	BusinessPartnerDataPlatformQuotationsPartnerData:                           "BusinessPartnerDataPlatformQuotationsPartnerData",
	BillFromPartyDataPlatformSCRBillingRelationData:                            "BillFromPartyDataPlatformSCRBillingRelationData",
	BillToPartyDataPlatformSCRBillingRelationData:                              "BillToPartyDataPlatformSCRBillingRelationData",
	DeliverFromPartyDataPlatformSCRDeliveryRelationData:                        "DeliverFromPartyDataPlatformSCRDeliveryRelationData",
	DeliverToPartyDataPlatformSCRDeliveryRelationData:                          "DeliverToPartyDataPlatformSCRDeliveryRelationData",
	FreightBillFromPartyDataPlatformSCRFreightBillingRelationData:              "FreightBillFromPartyDataPlatformSCRFreightBillingRelationData",
	FreightBillToPartyDataPlatformSCRFreightBillingRelationData:                "FreightBillToPartyDataPlatformSCRFreightBillingRelationData",
	FreightPayeeDataPlatformSCRFreightPaymentRelationData:                      "FreightPayeeDataPlatformSCRFreightPaymentRelationData",
	FreightPayerDataPlatformSCRFreightPaymentRelationData:                      "FreightPayerDataPlatformSCRFreightPaymentRelationData",
	FreightPartnerDataPlatformSCRFreightRelationData:                           "FreightPartnerDataPlatformSCRFreightRelationData",
	BuyerDataPlatformSCRGeneralData:                                            "BuyerDataPlatformSCRGeneralData",
	SellerDataPlatformSCRGeneralData:                                           "SellerDataPlatformSCRGeneralData",
	DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData:                      "DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData",
	PayeeDataPlatformSCRPaymentRelationData:                                    "PayeeDataPlatformSCRPaymentRelationData",
	PayerDataPlatformSCRPaymentRelationData:                                    "PayerDataPlatformSCRPaymentRelationData",
}

// dataPlatformBusinessPartnerGeneralDatumR is where relationships are stored.
type dataPlatformBusinessPartnerGeneralDatumR struct {
	AddressIDDataPlatformAddressAddressDatum                                   *DataPlatformAddressAddressDatum                          `boil:"AddressIDDataPlatformAddressAddressDatum" json:"AddressIDDataPlatformAddressAddressDatum" toml:"AddressIDDataPlatformAddressAddressDatum" yaml:"AddressIDDataPlatformAddressAddressDatum"`
	CountryDataPlatformCountryCountryDatum                                     *DataPlatformCountryCountryDatum                          `boil:"CountryDataPlatformCountryCountryDatum" json:"CountryDataPlatformCountryCountryDatum" toml:"CountryDataPlatformCountryCountryDatum" yaml:"CountryDataPlatformCountryCountryDatum"`
	CurrencyDataPlatformCurrencyCurrencyDatum                                  *DataPlatformCurrencyCurrencyDatum                        `boil:"CurrencyDataPlatformCurrencyCurrencyDatum" json:"CurrencyDataPlatformCurrencyCurrencyDatum" toml:"CurrencyDataPlatformCurrencyCurrencyDatum" yaml:"CurrencyDataPlatformCurrencyCurrencyDatum"`
	IndustryDataPlatformIndustryIndustryDatum                                  *DataPlatformIndustryIndustryDatum                        `boil:"IndustryDataPlatformIndustryIndustryDatum" json:"IndustryDataPlatformIndustryIndustryDatum" toml:"IndustryDataPlatformIndustryIndustryDatum" yaml:"IndustryDataPlatformIndustryIndustryDatum"`
	LanguageDataPlatformLanguageLanguageDatum                                  *DataPlatformLanguageLanguageDatum                        `boil:"LanguageDataPlatformLanguageLanguageDatum" json:"LanguageDataPlatformLanguageLanguageDatum" toml:"LanguageDataPlatformLanguageLanguageDatum" yaml:"LanguageDataPlatformLanguageLanguageDatum"`
	BusinessPartnerDataPlatformBusinessPartnerAccountingDatum                  *DataPlatformBusinessPartnerAccountingDatum               `boil:"BusinessPartnerDataPlatformBusinessPartnerAccountingDatum" json:"BusinessPartnerDataPlatformBusinessPartnerAccountingDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerAccountingDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerAccountingDatum"`
	BusinessPartnerDataPlatformBusinessPartnerGeneralDocData                   DataPlatformBusinessPartnerGeneralDocDatumSlice           `boil:"BusinessPartnerDataPlatformBusinessPartnerGeneralDocData" json:"BusinessPartnerDataPlatformBusinessPartnerGeneralDocData" toml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDocData" yaml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDocData"`
	BusinessPartnerDataPlatformCodeConversionCodeConversionData                DataPlatformCodeConversionCodeConversionDatumSlice        `boil:"BusinessPartnerDataPlatformCodeConversionCodeConversionData" json:"BusinessPartnerDataPlatformCodeConversionCodeConversionData" toml:"BusinessPartnerDataPlatformCodeConversionCodeConversionData" yaml:"BusinessPartnerDataPlatformCodeConversionCodeConversionData"`
	DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData          DataPlatformDeliveryDocumentHeaderDocDatumSlice           `boil:"DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData" json:"DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData" toml:"DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData" yaml:"DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData"`
	DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData            DataPlatformDeliveryDocumentItemDocDatumSlice             `boil:"DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData" json:"DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData" toml:"DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData" yaml:"DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData"`
	BusinessPartnerDataPlatformDeliveryDocumentPartnerData                     DataPlatformDeliveryDocumentPartnerDatumSlice             `boil:"BusinessPartnerDataPlatformDeliveryDocumentPartnerData" json:"BusinessPartnerDataPlatformDeliveryDocumentPartnerData" toml:"BusinessPartnerDataPlatformDeliveryDocumentPartnerData" yaml:"BusinessPartnerDataPlatformDeliveryDocumentPartnerData"`
	BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData              DataPlatformEquipmentMasterBusinessPartnerDatumSlice      `boil:"BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData" json:"BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData" toml:"BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData" yaml:"BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData"`
	DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData          DataPlatformEquipmentMasterGeneralDocDatumSlice           `boil:"DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData" json:"DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData" toml:"DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData" yaml:"DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData"`
	OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData    DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice `boil:"OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData" json:"OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData" toml:"OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData" yaml:"OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData"`
	DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData DataPlatformInspectionLotConfirmationHeaderDocDatumSlice  `boil:"DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData" json:"DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData" toml:"DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData" yaml:"DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData"`
	BusinessPartnerDataPlatformInvoiceDocumentPartnerData                      DataPlatformInvoiceDocumentPartnerDatumSlice              `boil:"BusinessPartnerDataPlatformInvoiceDocumentPartnerData" json:"BusinessPartnerDataPlatformInvoiceDocumentPartnerData" toml:"BusinessPartnerDataPlatformInvoiceDocumentPartnerData" yaml:"BusinessPartnerDataPlatformInvoiceDocumentPartnerData"`
	DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData                DataPlatformOperationsHeaderDocDatumSlice                 `boil:"DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData" json:"DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData" toml:"DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData" yaml:"DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData"`
	DocIssuerBusinessPartnerDataPlatformOperationsItemDocData                  DataPlatformOperationsItemDocDatumSlice                   `boil:"DocIssuerBusinessPartnerDataPlatformOperationsItemDocData" json:"DocIssuerBusinessPartnerDataPlatformOperationsItemDocData" toml:"DocIssuerBusinessPartnerDataPlatformOperationsItemDocData" yaml:"DocIssuerBusinessPartnerDataPlatformOperationsItemDocData"`
	DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData                    DataPlatformOrdersHeaderDocDatumSlice                     `boil:"DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData" json:"DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData" toml:"DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData" yaml:"DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData"`
	DocIssuerBusinessPartnerDataPlatformOrdersItemDocData                      DataPlatformOrdersItemDocDatumSlice                       `boil:"DocIssuerBusinessPartnerDataPlatformOrdersItemDocData" json:"DocIssuerBusinessPartnerDataPlatformOrdersItemDocData" toml:"DocIssuerBusinessPartnerDataPlatformOrdersItemDocData" yaml:"DocIssuerBusinessPartnerDataPlatformOrdersItemDocData"`
	BusinessPartnerDataPlatformOrdersPartnerData                               DataPlatformOrdersPartnerDatumSlice                       `boil:"BusinessPartnerDataPlatformOrdersPartnerData" json:"BusinessPartnerDataPlatformOrdersPartnerData" toml:"BusinessPartnerDataPlatformOrdersPartnerData" yaml:"BusinessPartnerDataPlatformOrdersPartnerData"`
	DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData              DataPlatformPlannedOrderHeaderDocDatumSlice               `boil:"DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData" json:"DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData" toml:"DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData" yaml:"DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData"`
	DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData                DataPlatformPlannedOrderItemDocDatumSlice                 `boil:"DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData" json:"DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData" toml:"DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData" yaml:"DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData"`
	BusinessPartnerDataPlatformPlantGeneralData                                DataPlatformPlantGeneralDatumSlice                        `boil:"BusinessPartnerDataPlatformPlantGeneralData" json:"BusinessPartnerDataPlatformPlantGeneralData" toml:"BusinessPartnerDataPlatformPlantGeneralData" yaml:"BusinessPartnerDataPlatformPlantGeneralData"`
	DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData            DataPlatformProductMasterBPPlantDocDatumSlice             `boil:"DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData" json:"DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData" toml:"DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData" yaml:"DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData"`
	DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData    DataPlatformProductMasterBusinessPartnerDocDatumSlice     `boil:"DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData" json:"DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData" toml:"DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData" yaml:"DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData"`
	DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData            DataPlatformProductMasterGeneralDocDatumSlice             `boil:"DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData" json:"DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData" toml:"DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData" yaml:"DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData"`
	BusinessPartnerDataPlatformProductStockProductStockDataOlds                DataPlatformProductStockProductStockDataOldSlice          `boil:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" json:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" toml:"BusinessPartnerDataPlatformProductStockProductStockDataOlds" yaml:"BusinessPartnerDataPlatformProductStockProductStockDataOlds"`
	DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData        DataPlatformProductStockProductStockDocDatumSlice         `boil:"DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData" json:"DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData" toml:"DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData" yaml:"DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData"`
	DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData           DataPlatformProductionOrderHeaderDocDatumSlice            `boil:"DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData" json:"DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData" toml:"DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData" yaml:"DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData"`
	DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData             DataPlatformProductionOrderItemDocDatumSlice              `boil:"DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData" json:"DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData" toml:"DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData" yaml:"DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData"`
	BusinessPartnerDataPlatformProductionOrderPartnerData                      DataPlatformProductionOrderPartnerDatumSlice              `boil:"BusinessPartnerDataPlatformProductionOrderPartnerData" json:"BusinessPartnerDataPlatformProductionOrderPartnerData" toml:"BusinessPartnerDataPlatformProductionOrderPartnerData" yaml:"BusinessPartnerDataPlatformProductionOrderPartnerData"`
	BuyerDataPlatformPurchaseRequisitionHeaderData                             DataPlatformPurchaseRequisitionHeaderDatumSlice           `boil:"BuyerDataPlatformPurchaseRequisitionHeaderData" json:"BuyerDataPlatformPurchaseRequisitionHeaderData" toml:"BuyerDataPlatformPurchaseRequisitionHeaderData" yaml:"BuyerDataPlatformPurchaseRequisitionHeaderData"`
	DeliverFromPartyDataPlatformPurchaseRequisitionItemData                    DataPlatformPurchaseRequisitionItemDatumSlice             `boil:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData" json:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData" toml:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData" yaml:"DeliverFromPartyDataPlatformPurchaseRequisitionItemData"`
	DeliverToPartyDataPlatformPurchaseRequisitionItemData                      DataPlatformPurchaseRequisitionItemDatumSlice             `boil:"DeliverToPartyDataPlatformPurchaseRequisitionItemData" json:"DeliverToPartyDataPlatformPurchaseRequisitionItemData" toml:"DeliverToPartyDataPlatformPurchaseRequisitionItemData" yaml:"DeliverToPartyDataPlatformPurchaseRequisitionItemData"`
	SellerDataPlatformPurchaseRequisitionItemData                              DataPlatformPurchaseRequisitionItemDatumSlice             `boil:"SellerDataPlatformPurchaseRequisitionItemData" json:"SellerDataPlatformPurchaseRequisitionItemData" toml:"SellerDataPlatformPurchaseRequisitionItemData" yaml:"SellerDataPlatformPurchaseRequisitionItemData"`
	DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData                DataPlatformQuotationsHeaderDocDatumSlice                 `boil:"DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData" json:"DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData" toml:"DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData" yaml:"DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData"`
	DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData                  DataPlatformQuotationsItemDocDatumSlice                   `boil:"DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData" json:"DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData" toml:"DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData" yaml:"DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData"`
	BusinessPartnerDataPlatformQuotationsPartnerData                           DataPlatformQuotationsPartnerDatumSlice                   `boil:"BusinessPartnerDataPlatformQuotationsPartnerData" json:"BusinessPartnerDataPlatformQuotationsPartnerData" toml:"BusinessPartnerDataPlatformQuotationsPartnerData" yaml:"BusinessPartnerDataPlatformQuotationsPartnerData"`
	BillFromPartyDataPlatformSCRBillingRelationData                            DataPlatformSCRBillingRelationDatumSlice                  `boil:"BillFromPartyDataPlatformSCRBillingRelationData" json:"BillFromPartyDataPlatformSCRBillingRelationData" toml:"BillFromPartyDataPlatformSCRBillingRelationData" yaml:"BillFromPartyDataPlatformSCRBillingRelationData"`
	BillToPartyDataPlatformSCRBillingRelationData                              DataPlatformSCRBillingRelationDatumSlice                  `boil:"BillToPartyDataPlatformSCRBillingRelationData" json:"BillToPartyDataPlatformSCRBillingRelationData" toml:"BillToPartyDataPlatformSCRBillingRelationData" yaml:"BillToPartyDataPlatformSCRBillingRelationData"`
	DeliverFromPartyDataPlatformSCRDeliveryRelationData                        DataPlatformSCRDeliveryRelationDatumSlice                 `boil:"DeliverFromPartyDataPlatformSCRDeliveryRelationData" json:"DeliverFromPartyDataPlatformSCRDeliveryRelationData" toml:"DeliverFromPartyDataPlatformSCRDeliveryRelationData" yaml:"DeliverFromPartyDataPlatformSCRDeliveryRelationData"`
	DeliverToPartyDataPlatformSCRDeliveryRelationData                          DataPlatformSCRDeliveryRelationDatumSlice                 `boil:"DeliverToPartyDataPlatformSCRDeliveryRelationData" json:"DeliverToPartyDataPlatformSCRDeliveryRelationData" toml:"DeliverToPartyDataPlatformSCRDeliveryRelationData" yaml:"DeliverToPartyDataPlatformSCRDeliveryRelationData"`
	FreightBillFromPartyDataPlatformSCRFreightBillingRelationData              DataPlatformSCRFreightBillingRelationDatumSlice           `boil:"FreightBillFromPartyDataPlatformSCRFreightBillingRelationData" json:"FreightBillFromPartyDataPlatformSCRFreightBillingRelationData" toml:"FreightBillFromPartyDataPlatformSCRFreightBillingRelationData" yaml:"FreightBillFromPartyDataPlatformSCRFreightBillingRelationData"`
	FreightBillToPartyDataPlatformSCRFreightBillingRelationData                DataPlatformSCRFreightBillingRelationDatumSlice           `boil:"FreightBillToPartyDataPlatformSCRFreightBillingRelationData" json:"FreightBillToPartyDataPlatformSCRFreightBillingRelationData" toml:"FreightBillToPartyDataPlatformSCRFreightBillingRelationData" yaml:"FreightBillToPartyDataPlatformSCRFreightBillingRelationData"`
	FreightPayeeDataPlatformSCRFreightPaymentRelationData                      DataPlatformSCRFreightPaymentRelationDatumSlice           `boil:"FreightPayeeDataPlatformSCRFreightPaymentRelationData" json:"FreightPayeeDataPlatformSCRFreightPaymentRelationData" toml:"FreightPayeeDataPlatformSCRFreightPaymentRelationData" yaml:"FreightPayeeDataPlatformSCRFreightPaymentRelationData"`
	FreightPayerDataPlatformSCRFreightPaymentRelationData                      DataPlatformSCRFreightPaymentRelationDatumSlice           `boil:"FreightPayerDataPlatformSCRFreightPaymentRelationData" json:"FreightPayerDataPlatformSCRFreightPaymentRelationData" toml:"FreightPayerDataPlatformSCRFreightPaymentRelationData" yaml:"FreightPayerDataPlatformSCRFreightPaymentRelationData"`
	FreightPartnerDataPlatformSCRFreightRelationData                           DataPlatformSCRFreightRelationDatumSlice                  `boil:"FreightPartnerDataPlatformSCRFreightRelationData" json:"FreightPartnerDataPlatformSCRFreightRelationData" toml:"FreightPartnerDataPlatformSCRFreightRelationData" yaml:"FreightPartnerDataPlatformSCRFreightRelationData"`
	BuyerDataPlatformSCRGeneralData                                            DataPlatformSCRGeneralDatumSlice                          `boil:"BuyerDataPlatformSCRGeneralData" json:"BuyerDataPlatformSCRGeneralData" toml:"BuyerDataPlatformSCRGeneralData" yaml:"BuyerDataPlatformSCRGeneralData"`
	SellerDataPlatformSCRGeneralData                                           DataPlatformSCRGeneralDatumSlice                          `boil:"SellerDataPlatformSCRGeneralData" json:"SellerDataPlatformSCRGeneralData" toml:"SellerDataPlatformSCRGeneralData" yaml:"SellerDataPlatformSCRGeneralData"`
	DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData                      DataPlatformSCRGeneralDocDatumSlice                       `boil:"DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData" json:"DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData" toml:"DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData" yaml:"DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData"`
	PayeeDataPlatformSCRPaymentRelationData                                    DataPlatformSCRPaymentRelationDatumSlice                  `boil:"PayeeDataPlatformSCRPaymentRelationData" json:"PayeeDataPlatformSCRPaymentRelationData" toml:"PayeeDataPlatformSCRPaymentRelationData" yaml:"PayeeDataPlatformSCRPaymentRelationData"`
	PayerDataPlatformSCRPaymentRelationData                                    DataPlatformSCRPaymentRelationDatumSlice                  `boil:"PayerDataPlatformSCRPaymentRelationData" json:"PayerDataPlatformSCRPaymentRelationData" toml:"PayerDataPlatformSCRPaymentRelationData" yaml:"PayerDataPlatformSCRPaymentRelationData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerGeneralDatumR) NewStruct() *dataPlatformBusinessPartnerGeneralDatumR {
	return &dataPlatformBusinessPartnerGeneralDatumR{}
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetAddressIDDataPlatformAddressAddressDatum() *DataPlatformAddressAddressDatum {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformAddressAddressDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.CurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetIndustryDataPlatformIndustryIndustryDatum() *DataPlatformIndustryIndustryDatum {
	if r == nil {
		return nil
	}
	return r.IndustryDataPlatformIndustryIndustryDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetLanguageDataPlatformLanguageLanguageDatum() *DataPlatformLanguageLanguageDatum {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformLanguageLanguageDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformBusinessPartnerAccountingDatum() *DataPlatformBusinessPartnerAccountingDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerAccountingDatum
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformBusinessPartnerGeneralDocData() DataPlatformBusinessPartnerGeneralDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerGeneralDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformCodeConversionCodeConversionData() DataPlatformCodeConversionCodeConversionDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformCodeConversionCodeConversionData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData() DataPlatformDeliveryDocumentHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData() DataPlatformDeliveryDocumentItemDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformDeliveryDocumentPartnerData() DataPlatformDeliveryDocumentPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformDeliveryDocumentPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData() DataPlatformEquipmentMasterBusinessPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData() DataPlatformEquipmentMasterGeneralDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData() DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData() DataPlatformInspectionLotConfirmationHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformInvoiceDocumentPartnerData() DataPlatformInvoiceDocumentPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformInvoiceDocumentPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData() DataPlatformOperationsHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformOperationsItemDocData() DataPlatformOperationsItemDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData() DataPlatformOrdersHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformOrdersItemDocData() DataPlatformOrdersItemDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformOrdersPartnerData() DataPlatformOrdersPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformOrdersPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData() DataPlatformPlannedOrderHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData() DataPlatformPlannedOrderItemDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformPlantGeneralData() DataPlatformPlantGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformPlantGeneralData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData() DataPlatformProductMasterBPPlantDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData() DataPlatformProductMasterBusinessPartnerDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData() DataPlatformProductMasterGeneralDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformProductStockProductStockDataOlds() DataPlatformProductStockProductStockDataOldSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductStockProductStockDataOlds
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData() DataPlatformProductStockProductStockDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData() DataPlatformProductionOrderHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData() DataPlatformProductionOrderItemDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformProductionOrderPartnerData() DataPlatformProductionOrderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductionOrderPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBuyerDataPlatformPurchaseRequisitionHeaderData() DataPlatformPurchaseRequisitionHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformPurchaseRequisitionHeaderData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDeliverFromPartyDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformPurchaseRequisitionItemData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDeliverToPartyDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformPurchaseRequisitionItemData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetSellerDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.SellerDataPlatformPurchaseRequisitionItemData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData() DataPlatformQuotationsHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformQuotationsItemDocData() DataPlatformQuotationsItemDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBusinessPartnerDataPlatformQuotationsPartnerData() DataPlatformQuotationsPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformQuotationsPartnerData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBillFromPartyDataPlatformSCRBillingRelationData() DataPlatformSCRBillingRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRBillingRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBillToPartyDataPlatformSCRBillingRelationData() DataPlatformSCRBillingRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillToPartyDataPlatformSCRBillingRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDeliverFromPartyDataPlatformSCRDeliveryRelationData() DataPlatformSCRDeliveryRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformSCRDeliveryRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDeliverToPartyDataPlatformSCRDeliveryRelationData() DataPlatformSCRDeliveryRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformSCRDeliveryRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetFreightBillFromPartyDataPlatformSCRFreightBillingRelationData() DataPlatformSCRFreightBillingRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.FreightBillFromPartyDataPlatformSCRFreightBillingRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetFreightBillToPartyDataPlatformSCRFreightBillingRelationData() DataPlatformSCRFreightBillingRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.FreightBillToPartyDataPlatformSCRFreightBillingRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetFreightPayeeDataPlatformSCRFreightPaymentRelationData() DataPlatformSCRFreightPaymentRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.FreightPayeeDataPlatformSCRFreightPaymentRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetFreightPayerDataPlatformSCRFreightPaymentRelationData() DataPlatformSCRFreightPaymentRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.FreightPayerDataPlatformSCRFreightPaymentRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetFreightPartnerDataPlatformSCRFreightRelationData() DataPlatformSCRFreightRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.FreightPartnerDataPlatformSCRFreightRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetBuyerDataPlatformSCRGeneralData() DataPlatformSCRGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetSellerDataPlatformSCRGeneralData() DataPlatformSCRGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.SellerDataPlatformSCRGeneralData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetDocIssuerBusinessPartnerDataPlatformSCRGeneralDocData() DataPlatformSCRGeneralDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetPayeeDataPlatformSCRPaymentRelationData() DataPlatformSCRPaymentRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.PayeeDataPlatformSCRPaymentRelationData
}

func (r *dataPlatformBusinessPartnerGeneralDatumR) GetPayerDataPlatformSCRPaymentRelationData() DataPlatformSCRPaymentRelationDatumSlice {
	if r == nil {
		return nil
	}
	return r.PayerDataPlatformSCRPaymentRelationData
}

// dataPlatformBusinessPartnerGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerGeneralDatumL struct{}

var (
	dataPlatformBusinessPartnerGeneralDatumAllColumns            = []string{"BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "Industry", "LegalEntityRegistration", "Country", "Language", "Currency", "OrganizationBPName1", "OrganizationBPName2", "OrganizationBPName3", "OrganizationBPName4", "BPTag1", "BPTag2", "BPTag3", "BPTag4", "OrganizationFoundationDate", "OrganizationLiquidationDate", "BusinessPartnerBirthplaceName", "BusinessPartnerDeathDate", "GroupBusinessPartnerName1", "GroupBusinessPartnerName2", "AddressID", "BusinessPartnerIDByExtSystem", "BusinessPartnerIsBlocked", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault = []string{"BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "Industry", "LegalEntityRegistration", "Country", "Language", "Currency", "OrganizationBPName1", "OrganizationBPName2", "OrganizationBPName3", "OrganizationBPName4", "BPTag1", "BPTag2", "BPTag3", "BPTag4", "OrganizationFoundationDate", "OrganizationLiquidationDate", "BusinessPartnerBirthplaceName", "BusinessPartnerDeathDate", "GroupBusinessPartnerName1", "GroupBusinessPartnerName2", "AddressID", "BusinessPartnerIDByExtSystem", "BusinessPartnerIsBlocked", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns     = []string{"BusinessPartner"}
	dataPlatformBusinessPartnerGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerGeneralDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerGeneralDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerGeneralDatum.
	DataPlatformBusinessPartnerGeneralDatumSlice []*DataPlatformBusinessPartnerGeneralDatum

	dataPlatformBusinessPartnerGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerGeneralDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerGeneralDatum{})
	dataPlatformBusinessPartnerGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerGeneralDatumType)
	dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformBusinessPartnerGeneralDatum record from the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerGeneralDatum, error) {
	o := &DataPlatformBusinessPartnerGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_general_data")
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerGeneralDatum records from the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerGeneralDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerGeneralDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerGeneralDatum records in the query.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_general_data exists")
	}

	return count > 0, nil
}

// AddressIDDataPlatformAddressAddressDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddressIDDataPlatformAddressAddressDatum(mods ...qm.QueryMod) dataPlatformAddressAddressDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`AddressID` = ?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformAddressAddressData(queryMods...)
}

// CountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) CountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.Country),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// CurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) CurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.Currency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// IndustryDataPlatformIndustryIndustryDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) IndustryDataPlatformIndustryIndustryDatum(mods ...qm.QueryMod) dataPlatformIndustryIndustryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Industry` = ?", o.Industry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformIndustryIndustryData(queryMods...)
}

// LanguageDataPlatformLanguageLanguageDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) LanguageDataPlatformLanguageLanguageDatum(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.Language),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformLanguageLanguageData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerAccountingDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformBusinessPartnerAccountingDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerAccountingDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerAccountingData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerGeneralDocData retrieves all the data_platform_business_partner_general_doc_datum's DataPlatformBusinessPartnerGeneralDocData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformBusinessPartnerGeneralDocData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_general_doc_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerGeneralDocData(queryMods...)
}

// BusinessPartnerDataPlatformCodeConversionCodeConversionData retrieves all the data_platform_code_conversion_code_conversion_datum's DataPlatformCodeConversionCodeConversionData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformCodeConversionCodeConversionData(mods ...qm.QueryMod) dataPlatformCodeConversionCodeConversionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_code_conversion_code_conversion_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformCodeConversionCodeConversionData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData retrieves all the data_platform_delivery_document_header_doc_datum's DataPlatformDeliveryDocumentHeaderDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformDeliveryDocumentHeaderDocData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData retrieves all the data_platform_delivery_document_item_doc_datum's DataPlatformDeliveryDocumentItemDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformDeliveryDocumentItemDocData(queryMods...)
}

// BusinessPartnerDataPlatformDeliveryDocumentPartnerData retrieves all the data_platform_delivery_document_partner_datum's DataPlatformDeliveryDocumentPartnerData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformDeliveryDocumentPartnerData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_partner_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformDeliveryDocumentPartnerData(queryMods...)
}

// BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData retrieves all the data_platform_equipment_master_business_partner_datum's DataPlatformEquipmentMasterBusinessPartnerData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData(mods ...qm.QueryMod) dataPlatformEquipmentMasterBusinessPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_equipment_master_business_partner_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformEquipmentMasterBusinessPartnerData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData retrieves all the data_platform_equipment_master_general_doc_datum's DataPlatformEquipmentMasterGeneralDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(mods ...qm.QueryMod) dataPlatformEquipmentMasterGeneralDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_equipment_master_general_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformEquipmentMasterGeneralDocData(queryMods...)
}

// OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData retrieves all the data_platform_equipment_master_owner_business_partner_datum's DataPlatformEquipmentMasterOwnerBusinessPartnerData with an executor via OwnerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData(mods ...qm.QueryMod) dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_equipment_master_owner_business_partner_data`.`OwnerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformEquipmentMasterOwnerBusinessPartnerData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData retrieves all the data_platform_inspection_lot_confirmation_header_doc_datum's DataPlatformInspectionLotConfirmationHeaderDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData(mods ...qm.QueryMod) dataPlatformInspectionLotConfirmationHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_lot_confirmation_header_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformInspectionLotConfirmationHeaderDocData(queryMods...)
}

// BusinessPartnerDataPlatformInvoiceDocumentPartnerData retrieves all the data_platform_invoice_document_partner_datum's DataPlatformInvoiceDocumentPartnerData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformInvoiceDocumentPartnerData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_partner_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformInvoiceDocumentPartnerData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData retrieves all the data_platform_operations_header_doc_datum's DataPlatformOperationsHeaderDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData(mods ...qm.QueryMod) dataPlatformOperationsHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_header_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformOperationsHeaderDocData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformOperationsItemDocData retrieves all the data_platform_operations_item_doc_datum's DataPlatformOperationsItemDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformOperationsItemDocData(mods ...qm.QueryMod) dataPlatformOperationsItemDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformOperationsItemDocData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData retrieves all the data_platform_orders_header_doc_datum's DataPlatformOrdersHeaderDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformOrdersHeaderDocData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformOrdersItemDocData retrieves all the data_platform_orders_item_doc_datum's DataPlatformOrdersItemDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformOrdersItemDocData(mods ...qm.QueryMod) dataPlatformOrdersItemDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformOrdersItemDocData(queryMods...)
}

// BusinessPartnerDataPlatformOrdersPartnerData retrieves all the data_platform_orders_partner_datum's DataPlatformOrdersPartnerData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformOrdersPartnerData(mods ...qm.QueryMod) dataPlatformOrdersPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_partner_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformOrdersPartnerData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData retrieves all the data_platform_planned_order_header_doc_datum's DataPlatformPlannedOrderHeaderDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_header_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformPlannedOrderHeaderDocData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData retrieves all the data_platform_planned_order_item_doc_datum's DataPlatformPlannedOrderItemDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformPlannedOrderItemDocData(queryMods...)
}

// BusinessPartnerDataPlatformPlantGeneralData retrieves all the data_platform_plant_general_datum's DataPlatformPlantGeneralData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformPlantGeneralData(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_plant_general_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformPlantGeneralData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData retrieves all the data_platform_product_master_bp_plant_doc_datum's DataPlatformProductMasterBPPlantDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_bp_plant_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductMasterBPPlantDocData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData retrieves all the data_platform_product_master_business_partner_doc_datum's DataPlatformProductMasterBusinessPartnerDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData(mods ...qm.QueryMod) dataPlatformProductMasterBusinessPartnerDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_business_partner_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductMasterBusinessPartnerDocData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData retrieves all the data_platform_product_master_general_doc_datum's DataPlatformProductMasterGeneralDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_general_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductMasterGeneralDocData(queryMods...)
}

// BusinessPartnerDataPlatformProductStockProductStockDataOlds retrieves all the data_platform_product_stock_product_stock_data_old's DataPlatformProductStockProductStockDataOlds with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformProductStockProductStockDataOlds(mods ...qm.QueryMod) dataPlatformProductStockProductStockDataOldQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_data_old`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockDataOlds(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData retrieves all the data_platform_product_stock_product_stock_doc_datum's DataPlatformProductStockProductStockDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData(mods ...qm.QueryMod) dataPlatformProductStockProductStockDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockDocData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData retrieves all the data_platform_production_order_header_doc_datum's DataPlatformProductionOrderHeaderDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_header_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductionOrderHeaderDocData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData retrieves all the data_platform_production_order_item_doc_datum's DataPlatformProductionOrderItemDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData(mods ...qm.QueryMod) dataPlatformProductionOrderItemDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductionOrderItemDocData(queryMods...)
}

// BusinessPartnerDataPlatformProductionOrderPartnerData retrieves all the data_platform_production_order_partner_datum's DataPlatformProductionOrderPartnerData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformProductionOrderPartnerData(mods ...qm.QueryMod) dataPlatformProductionOrderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_partner_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductionOrderPartnerData(queryMods...)
}

// BuyerDataPlatformPurchaseRequisitionHeaderData retrieves all the data_platform_purchase_requisition_header_datum's DataPlatformPurchaseRequisitionHeaderData with an executor via Buyer column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BuyerDataPlatformPurchaseRequisitionHeaderData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_header_data`.`Buyer`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionHeaderData(queryMods...)
}

// DeliverFromPartyDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via DeliverFromParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DeliverFromPartyDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`DeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// DeliverToPartyDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via DeliverToParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DeliverToPartyDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`DeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// SellerDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via Seller column.
func (o *DataPlatformBusinessPartnerGeneralDatum) SellerDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`Seller`=?", o.BusinessPartner),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData retrieves all the data_platform_quotations_header_doc_datum's DataPlatformQuotationsHeaderDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_header_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformQuotationsHeaderDocData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData retrieves all the data_platform_quotations_item_doc_datum's DataPlatformQuotationsItemDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData(mods ...qm.QueryMod) dataPlatformQuotationsItemDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_item_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformQuotationsItemDocData(queryMods...)
}

// BusinessPartnerDataPlatformQuotationsPartnerData retrieves all the data_platform_quotations_partner_datum's DataPlatformQuotationsPartnerData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BusinessPartnerDataPlatformQuotationsPartnerData(mods ...qm.QueryMod) dataPlatformQuotationsPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_partner_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformQuotationsPartnerData(queryMods...)
}

// BillFromPartyDataPlatformSCRBillingRelationData retrieves all the data_platform_scr_billing_relation_datum's DataPlatformSCRBillingRelationData with an executor via BillFromParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BillFromPartyDataPlatformSCRBillingRelationData(mods ...qm.QueryMod) dataPlatformSCRBillingRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_billing_relation_data`.`BillFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRBillingRelationData(queryMods...)
}

// BillToPartyDataPlatformSCRBillingRelationData retrieves all the data_platform_scr_billing_relation_datum's DataPlatformSCRBillingRelationData with an executor via BillToParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BillToPartyDataPlatformSCRBillingRelationData(mods ...qm.QueryMod) dataPlatformSCRBillingRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_billing_relation_data`.`BillToParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRBillingRelationData(queryMods...)
}

// DeliverFromPartyDataPlatformSCRDeliveryRelationData retrieves all the data_platform_scr_delivery_relation_datum's DataPlatformSCRDeliveryRelationData with an executor via DeliverFromParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DeliverFromPartyDataPlatformSCRDeliveryRelationData(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_delivery_relation_data`.`DeliverFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// DeliverToPartyDataPlatformSCRDeliveryRelationData retrieves all the data_platform_scr_delivery_relation_datum's DataPlatformSCRDeliveryRelationData with an executor via DeliverToParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DeliverToPartyDataPlatformSCRDeliveryRelationData(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_delivery_relation_data`.`DeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// FreightBillFromPartyDataPlatformSCRFreightBillingRelationData retrieves all the data_platform_scr_freight_billing_relation_datum's DataPlatformSCRFreightBillingRelationData with an executor via FreightBillFromParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) FreightBillFromPartyDataPlatformSCRFreightBillingRelationData(mods ...qm.QueryMod) dataPlatformSCRFreightBillingRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_freight_billing_relation_data`.`FreightBillFromParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRFreightBillingRelationData(queryMods...)
}

// FreightBillToPartyDataPlatformSCRFreightBillingRelationData retrieves all the data_platform_scr_freight_billing_relation_datum's DataPlatformSCRFreightBillingRelationData with an executor via FreightBillToParty column.
func (o *DataPlatformBusinessPartnerGeneralDatum) FreightBillToPartyDataPlatformSCRFreightBillingRelationData(mods ...qm.QueryMod) dataPlatformSCRFreightBillingRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_freight_billing_relation_data`.`FreightBillToParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRFreightBillingRelationData(queryMods...)
}

// FreightPayeeDataPlatformSCRFreightPaymentRelationData retrieves all the data_platform_scr_freight_payment_relation_datum's DataPlatformSCRFreightPaymentRelationData with an executor via FreightPayee column.
func (o *DataPlatformBusinessPartnerGeneralDatum) FreightPayeeDataPlatformSCRFreightPaymentRelationData(mods ...qm.QueryMod) dataPlatformSCRFreightPaymentRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_freight_payment_relation_data`.`FreightPayee`=?", o.BusinessPartner),
	)

	return DataPlatformSCRFreightPaymentRelationData(queryMods...)
}

// FreightPayerDataPlatformSCRFreightPaymentRelationData retrieves all the data_platform_scr_freight_payment_relation_datum's DataPlatformSCRFreightPaymentRelationData with an executor via FreightPayer column.
func (o *DataPlatformBusinessPartnerGeneralDatum) FreightPayerDataPlatformSCRFreightPaymentRelationData(mods ...qm.QueryMod) dataPlatformSCRFreightPaymentRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_freight_payment_relation_data`.`FreightPayer`=?", o.BusinessPartner),
	)

	return DataPlatformSCRFreightPaymentRelationData(queryMods...)
}

// FreightPartnerDataPlatformSCRFreightRelationData retrieves all the data_platform_scr_freight_relation_datum's DataPlatformSCRFreightRelationData with an executor via FreightPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) FreightPartnerDataPlatformSCRFreightRelationData(mods ...qm.QueryMod) dataPlatformSCRFreightRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_freight_relation_data`.`FreightPartner`=?", o.BusinessPartner),
	)

	return DataPlatformSCRFreightRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralData retrieves all the data_platform_scr_general_datum's DataPlatformSCRGeneralData with an executor via Buyer column.
func (o *DataPlatformBusinessPartnerGeneralDatum) BuyerDataPlatformSCRGeneralData(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_general_data`.`Buyer`=?", o.BusinessPartner),
	)

	return DataPlatformSCRGeneralData(queryMods...)
}

// SellerDataPlatformSCRGeneralData retrieves all the data_platform_scr_general_datum's DataPlatformSCRGeneralData with an executor via Seller column.
func (o *DataPlatformBusinessPartnerGeneralDatum) SellerDataPlatformSCRGeneralData(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_general_data`.`Seller`=?", o.BusinessPartner),
	)

	return DataPlatformSCRGeneralData(queryMods...)
}

// DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData retrieves all the data_platform_scr_general_doc_datum's DataPlatformSCRGeneralDocData with an executor via DocIssuerBusinessPartner column.
func (o *DataPlatformBusinessPartnerGeneralDatum) DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData(mods ...qm.QueryMod) dataPlatformSCRGeneralDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_general_doc_data`.`DocIssuerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformSCRGeneralDocData(queryMods...)
}

// PayeeDataPlatformSCRPaymentRelationData retrieves all the data_platform_scr_payment_relation_datum's DataPlatformSCRPaymentRelationData with an executor via Payee column.
func (o *DataPlatformBusinessPartnerGeneralDatum) PayeeDataPlatformSCRPaymentRelationData(mods ...qm.QueryMod) dataPlatformSCRPaymentRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_payment_relation_data`.`Payee`=?", o.BusinessPartner),
	)

	return DataPlatformSCRPaymentRelationData(queryMods...)
}

// PayerDataPlatformSCRPaymentRelationData retrieves all the data_platform_scr_payment_relation_datum's DataPlatformSCRPaymentRelationData with an executor via Payer column.
func (o *DataPlatformBusinessPartnerGeneralDatum) PayerDataPlatformSCRPaymentRelationData(mods ...qm.QueryMod) dataPlatformSCRPaymentRelationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_payment_relation_data`.`Payer`=?", o.BusinessPartner),
	)

	return DataPlatformSCRPaymentRelationData(queryMods...)
}

// LoadAddressIDDataPlatformAddressAddressDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadAddressIDDataPlatformAddressAddressDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		if !queries.IsNil(object.AddressID) {
			args = append(args, object.AddressID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AddressID) {
				args = append(args, obj.AddressID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_address_address_data`),
		qm.WhereIn(`data_platform_address_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformAddressAddressDatum")
	}

	var resultSlice []*DataPlatformAddressAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformAddressAddressDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_address_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_address_address_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AddressIDDataPlatformAddressAddressDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformAddressAddressDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.Country)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Country == foreign.Country {
				local.R.CountryDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.Currency)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Currency {
					continue Outer
				}
			}

			args = append(args, obj.Currency)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CurrencyDataPlatformCurrencyCurrencyDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Currency == foreign.Currency {
				local.R.CurrencyDataPlatformCurrencyCurrencyDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadIndustryDataPlatformIndustryIndustryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadIndustryDataPlatformIndustryIndustryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		if !queries.IsNil(object.Industry) {
			args = append(args, object.Industry)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Industry) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Industry) {
				args = append(args, obj.Industry)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_industry_industry_data`),
		qm.WhereIn(`data_platform_industry_industry_data.Industry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformIndustryIndustryDatum")
	}

	var resultSlice []*DataPlatformIndustryIndustryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformIndustryIndustryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_industry_industry_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_industry_industry_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IndustryDataPlatformIndustryIndustryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Industry, foreign.Industry) {
				local.R.IndustryDataPlatformIndustryIndustryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadLanguageDataPlatformLanguageLanguageDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.Language)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_data`),
		qm.WhereIn(`data_platform_language_language_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformLanguageLanguageDatum")
	}

	var resultSlice []*DataPlatformLanguageLanguageDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformLanguageLanguageDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_language_language_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LanguageDataPlatformLanguageLanguageDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformLanguageLanguageDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerAccountingDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerAccountingDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_accounting_data`),
		qm.WhereIn(`data_platform_business_partner_accounting_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerAccountingDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerAccountingDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerAccountingDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_accounting_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_accounting_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerAccountingDatum = foreign
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerAccountingDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_doc_data`),
		qm.WhereIn(`data_platform_business_partner_general_doc_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_general_doc_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_general_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_general_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_doc_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDocData = append(local.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformCodeConversionCodeConversionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformCodeConversionCodeConversionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_code_conversion_code_conversion_data`),
		qm.WhereIn(`data_platform_code_conversion_code_conversion_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_code_conversion_code_conversion_data")
	}

	var resultSlice []*DataPlatformCodeConversionCodeConversionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_code_conversion_code_conversion_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_code_conversion_code_conversion_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_code_conversion_code_conversion_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData = append(local.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_doc_data`),
		qm.WhereIn(`data_platform_delivery_document_header_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_doc_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_doc_data`),
		qm.WhereIn(`data_platform_delivery_document_item_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_doc_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformDeliveryDocumentPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformDeliveryDocumentPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_partner_data`),
		qm.WhereIn(`data_platform_delivery_document_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_partner_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_partner_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformDeliveryDocumentPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformDeliveryDocumentPartnerData = append(local.R.BusinessPartnerDataPlatformDeliveryDocumentPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_business_partner_data`),
		qm.WhereIn(`data_platform_equipment_master_business_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_equipment_master_business_partner_data")
	}

	var resultSlice []*DataPlatformEquipmentMasterBusinessPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_equipment_master_business_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_equipment_master_business_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_business_partner_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData = append(local.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_general_doc_data`),
		qm.WhereIn(`data_platform_equipment_master_general_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_equipment_master_general_doc_data")
	}

	var resultSlice []*DataPlatformEquipmentMasterGeneralDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_equipment_master_general_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_equipment_master_general_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_general_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_owner_business_partner_data`),
		qm.WhereIn(`data_platform_equipment_master_owner_business_partner_data.OwnerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_equipment_master_owner_business_partner_data")
	}

	var resultSlice []*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_equipment_master_owner_business_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_equipment_master_owner_business_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_owner_business_partner_data")
	}

	if singular {
		object.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.OwnerBusinessPartner {
				local.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData = append(local.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_confirmation_header_doc_data`),
		qm.WhereIn(`data_platform_inspection_lot_confirmation_header_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_lot_confirmation_header_doc_data")
	}

	var resultSlice []*DataPlatformInspectionLotConfirmationHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_lot_confirmation_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_lot_confirmation_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_confirmation_header_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformInvoiceDocumentPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformInvoiceDocumentPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_partner_data`),
		qm.WhereIn(`data_platform_invoice_document_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_partner_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_partner_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformInvoiceDocumentPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformInvoiceDocumentPartnerData = append(local.R.BusinessPartnerDataPlatformInvoiceDocumentPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_doc_data`),
		qm.WhereIn(`data_platform_operations_header_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_header_doc_data")
	}

	var resultSlice []*DataPlatformOperationsHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformOperationsItemDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformOperationsItemDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_doc_data`),
		qm.WhereIn(`data_platform_operations_item_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_doc_data")
	}

	var resultSlice []*DataPlatformOperationsItemDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_doc_data`),
		qm.WhereIn(`data_platform_orders_header_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_doc_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformOrdersItemDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformOrdersItemDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_doc_data`),
		qm.WhereIn(`data_platform_orders_item_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_doc_data")
	}

	var resultSlice []*DataPlatformOrdersItemDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformOrdersPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformOrdersPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_partner_data`),
		qm.WhereIn(`data_platform_orders_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_partner_data")
	}

	var resultSlice []*DataPlatformOrdersPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_partner_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformOrdersPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformOrdersPartnerData = append(local.R.BusinessPartnerDataPlatformOrdersPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_doc_data`),
		qm.WhereIn(`data_platform_planned_order_header_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_header_doc_data")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_doc_data`),
		qm.WhereIn(`data_platform_planned_order_item_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_doc_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformPlantGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformPlantGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_plant_general_data")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_plant_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformPlantGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformPlantGeneralData = append(local.R.BusinessPartnerDataPlatformPlantGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_doc_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_bp_plant_doc_data")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_bp_plant_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_bp_plant_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_business_partner_doc_data`),
		qm.WhereIn(`data_platform_product_master_business_partner_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_business_partner_doc_data")
	}

	var resultSlice []*DataPlatformProductMasterBusinessPartnerDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_business_partner_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_business_partner_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_business_partner_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_doc_data`),
		qm.WhereIn(`data_platform_product_master_general_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_general_doc_data")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_general_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_general_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductStockProductStockDataOlds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformProductStockProductStockDataOlds(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_data_old`),
		qm.WhereIn(`data_platform_product_stock_product_stock_data_old.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_data_old")
	}

	var resultSlice []*DataPlatformProductStockProductStockDataOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_data_old")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_data_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_data_old")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = append(local.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_doc_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_doc_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_doc_data`),
		qm.WhereIn(`data_platform_production_order_header_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_header_doc_data")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_doc_data`),
		qm.WhereIn(`data_platform_production_order_item_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_doc_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductionOrderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformProductionOrderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_partner_data`),
		qm.WhereIn(`data_platform_production_order_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_partner_data")
	}

	var resultSlice []*DataPlatformProductionOrderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_partner_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductionOrderPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductionOrderPartnerData = append(local.R.BusinessPartnerDataPlatformProductionOrderPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformPurchaseRequisitionHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBuyerDataPlatformPurchaseRequisitionHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_header_data`),
		qm.WhereIn(`data_platform_purchase_requisition_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_header_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformPurchaseRequisitionHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Buyer {
				local.R.BuyerDataPlatformPurchaseRequisitionHeaderData = append(local.R.BuyerDataPlatformPurchaseRequisitionHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.DeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DeliverFromParty) {
				local.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = append(local.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDeliverToPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.DeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverToParty {
				local.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData = append(local.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSellerDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadSellerDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.Seller in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.SellerDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.Seller) {
				local.R.SellerDataPlatformPurchaseRequisitionItemData = append(local.R.SellerDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_doc_data`),
		qm.WhereIn(`data_platform_quotations_header_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_header_doc_data")
	}

	var resultSlice []*DataPlatformQuotationsHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformQuotationsItemDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformQuotationsItemDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_item_doc_data`),
		qm.WhereIn(`data_platform_quotations_item_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_item_doc_data")
	}

	var resultSlice []*DataPlatformQuotationsItemDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_item_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_item_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_item_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformQuotationsPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBusinessPartnerDataPlatformQuotationsPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_partner_data`),
		qm.WhereIn(`data_platform_quotations_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_partner_data")
	}

	var resultSlice []*DataPlatformQuotationsPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_partner_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformQuotationsPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformQuotationsPartnerData = append(local.R.BusinessPartnerDataPlatformQuotationsPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRBillingRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBillFromPartyDataPlatformSCRBillingRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_billing_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_billing_relation_data")
	}

	var resultSlice []*DataPlatformSCRBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_billing_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_billing_relation_data")
	}

	if singular {
		object.R.BillFromPartyDataPlatformSCRBillingRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BillFromParty {
				local.R.BillFromPartyDataPlatformSCRBillingRelationData = append(local.R.BillFromPartyDataPlatformSCRBillingRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillToPartyDataPlatformSCRBillingRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBillToPartyDataPlatformSCRBillingRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_billing_relation_data.BillToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_billing_relation_data")
	}

	var resultSlice []*DataPlatformSCRBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_billing_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_billing_relation_data")
	}

	if singular {
		object.R.BillToPartyDataPlatformSCRBillingRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BillToParty {
				local.R.BillToPartyDataPlatformSCRBillingRelationData = append(local.R.BillToPartyDataPlatformSCRBillingRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformSCRDeliveryRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDeliverFromPartyDataPlatformSCRDeliveryRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.DeliverFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_delivery_relation_data")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_delivery_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if singular {
		object.R.DeliverFromPartyDataPlatformSCRDeliveryRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverFromParty {
				local.R.DeliverFromPartyDataPlatformSCRDeliveryRelationData = append(local.R.DeliverFromPartyDataPlatformSCRDeliveryRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformSCRDeliveryRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDeliverToPartyDataPlatformSCRDeliveryRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.DeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_delivery_relation_data")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_delivery_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if singular {
		object.R.DeliverToPartyDataPlatformSCRDeliveryRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverToParty {
				local.R.DeliverToPartyDataPlatformSCRDeliveryRelationData = append(local.R.DeliverToPartyDataPlatformSCRDeliveryRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadFreightBillFromPartyDataPlatformSCRFreightBillingRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadFreightBillFromPartyDataPlatformSCRFreightBillingRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_freight_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_freight_billing_relation_data.FreightBillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_freight_billing_relation_data")
	}

	var resultSlice []*DataPlatformSCRFreightBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_freight_billing_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_freight_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_freight_billing_relation_data")
	}

	if singular {
		object.R.FreightBillFromPartyDataPlatformSCRFreightBillingRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.FreightBillFromParty {
				local.R.FreightBillFromPartyDataPlatformSCRFreightBillingRelationData = append(local.R.FreightBillFromPartyDataPlatformSCRFreightBillingRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadFreightBillToPartyDataPlatformSCRFreightBillingRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadFreightBillToPartyDataPlatformSCRFreightBillingRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_freight_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_freight_billing_relation_data.FreightBillToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_freight_billing_relation_data")
	}

	var resultSlice []*DataPlatformSCRFreightBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_freight_billing_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_freight_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_freight_billing_relation_data")
	}

	if singular {
		object.R.FreightBillToPartyDataPlatformSCRFreightBillingRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.FreightBillToParty {
				local.R.FreightBillToPartyDataPlatformSCRFreightBillingRelationData = append(local.R.FreightBillToPartyDataPlatformSCRFreightBillingRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadFreightPayeeDataPlatformSCRFreightPaymentRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadFreightPayeeDataPlatformSCRFreightPaymentRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_freight_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_freight_payment_relation_data.FreightPayee in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_freight_payment_relation_data")
	}

	var resultSlice []*DataPlatformSCRFreightPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_freight_payment_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_freight_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_freight_payment_relation_data")
	}

	if singular {
		object.R.FreightPayeeDataPlatformSCRFreightPaymentRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.FreightPayee {
				local.R.FreightPayeeDataPlatformSCRFreightPaymentRelationData = append(local.R.FreightPayeeDataPlatformSCRFreightPaymentRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadFreightPayerDataPlatformSCRFreightPaymentRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadFreightPayerDataPlatformSCRFreightPaymentRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_freight_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_freight_payment_relation_data.FreightPayer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_freight_payment_relation_data")
	}

	var resultSlice []*DataPlatformSCRFreightPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_freight_payment_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_freight_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_freight_payment_relation_data")
	}

	if singular {
		object.R.FreightPayerDataPlatformSCRFreightPaymentRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.FreightPayer {
				local.R.FreightPayerDataPlatformSCRFreightPaymentRelationData = append(local.R.FreightPayerDataPlatformSCRFreightPaymentRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadFreightPartnerDataPlatformSCRFreightRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadFreightPartnerDataPlatformSCRFreightRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_freight_relation_data`),
		qm.WhereIn(`data_platform_scr_freight_relation_data.FreightPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_freight_relation_data")
	}

	var resultSlice []*DataPlatformSCRFreightRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_freight_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_freight_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_freight_relation_data")
	}

	if singular {
		object.R.FreightPartnerDataPlatformSCRFreightRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.FreightPartner {
				local.R.FreightPartnerDataPlatformSCRFreightRelationData = append(local.R.FreightPartnerDataPlatformSCRFreightRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadBuyerDataPlatformSCRGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_general_data")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if singular {
		object.R.BuyerDataPlatformSCRGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralData = append(local.R.BuyerDataPlatformSCRGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSellerDataPlatformSCRGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadSellerDataPlatformSCRGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Seller in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_general_data")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if singular {
		object.R.SellerDataPlatformSCRGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Seller {
				local.R.SellerDataPlatformSCRGeneralData = append(local.R.SellerDataPlatformSCRGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDocIssuerBusinessPartnerDataPlatformSCRGeneralDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadDocIssuerBusinessPartnerDataPlatformSCRGeneralDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BusinessPartner) {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_doc_data`),
		qm.WhereIn(`data_platform_scr_general_doc_data.DocIssuerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_general_doc_data")
	}

	var resultSlice []*DataPlatformSCRGeneralDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_general_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_general_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_doc_data")
	}

	if singular {
		object.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.BusinessPartner, foreign.DocIssuerBusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData = append(local.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPayeeDataPlatformSCRPaymentRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadPayeeDataPlatformSCRPaymentRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_payment_relation_data.Payee in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_payment_relation_data")
	}

	var resultSlice []*DataPlatformSCRPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_payment_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_payment_relation_data")
	}

	if singular {
		object.R.PayeeDataPlatformSCRPaymentRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Payee {
				local.R.PayeeDataPlatformSCRPaymentRelationData = append(local.R.PayeeDataPlatformSCRPaymentRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPayerDataPlatformSCRPaymentRelationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerGeneralDatumL) LoadPayerDataPlatformSCRPaymentRelationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerGeneralDatum
	var object *DataPlatformBusinessPartnerGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerGeneralDatum.(*DataPlatformBusinessPartnerGeneralDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerGeneralDatum.(*[]*DataPlatformBusinessPartnerGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_payment_relation_data.Payer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_payment_relation_data")
	}

	var resultSlice []*DataPlatformSCRPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_payment_relation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_payment_relation_data")
	}

	if singular {
		object.R.PayerDataPlatformSCRPaymentRelationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.Payer {
				local.R.PayerDataPlatformSCRPaymentRelationData = append(local.R.PayerDataPlatformSCRPaymentRelationData, foreign)
				break
			}
		}
	}

	return nil
}

// SetAddressIDDataPlatformAddressAddressDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformAddressAddressDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.AddressID, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AddressID, related.AddressID)
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			AddressIDDataPlatformAddressAddressDatum: related,
		}
	} else {
		o.R.AddressIDDataPlatformAddressAddressDatum = related
	}

	return nil
}

// RemoveAddressIDDataPlatformAddressAddressDatum relationship.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum to nil.
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveAddressIDDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformAddressAddressDatum) error {
	var err error

	queries.SetScanner(&o.AddressID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformAddressAddressDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetCountryDataPlatformCountryCountryDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.CountryDataPlatformCountryCountryDatum to related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Country = related.Country
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			CountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.CountryDataPlatformCountryCountryDatum = related
	}

	return nil
}

// SetCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.CurrencyDataPlatformCurrencyCurrencyDatum to related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Currency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Currency = related.Currency
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			CurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.CurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	return nil
}

// SetIndustryDataPlatformIndustryIndustryDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.IndustryDataPlatformIndustryIndustryDatum to related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetIndustryDataPlatformIndustryIndustryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformIndustryIndustryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Industry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Industry, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Industry, related.Industry)
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			IndustryDataPlatformIndustryIndustryDatum: related,
		}
	} else {
		o.R.IndustryDataPlatformIndustryIndustryDatum = related
	}

	return nil
}

// RemoveIndustryDataPlatformIndustryIndustryDatum relationship.
// Sets o.R.IndustryDataPlatformIndustryIndustryDatum to nil.
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveIndustryDataPlatformIndustryIndustryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformIndustryIndustryDatum) error {
	var err error

	queries.SetScanner(&o.Industry, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Industry")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IndustryDataPlatformIndustryIndustryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetLanguageDataPlatformLanguageLanguageDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum to related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformLanguageLanguageDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Language = related.Language
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			LanguageDataPlatformLanguageLanguageDatum: related,
		}
	} else {
		o.R.LanguageDataPlatformLanguageLanguageDatum = related
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerAccountingDatum of the dataPlatformBusinessPartnerGeneralDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerAccountingDatum to related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetBusinessPartnerDataPlatformBusinessPartnerAccountingDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerAccountingDatum) error {
	var err error

	if insert {
		related.BusinessPartner = o.BusinessPartner

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `data_platform_business_partner_accounting_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerAccountingDatumPrimaryKeyColumns),
		)
		values := []interface{}{o.BusinessPartner, related.BusinessPartner}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.BusinessPartner = o.BusinessPartner
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformBusinessPartnerAccountingDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerAccountingDatum = related
	}

	return nil
}

// AddBusinessPartnerDataPlatformBusinessPartnerGeneralDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformBusinessPartnerGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerGeneralDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_general_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformBusinessPartnerGeneralDocData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDocData = append(o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDocData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformCodeConversionCodeConversionData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformCodeConversionCodeConversionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformCodeConversionCodeConversionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_code_conversion_code_conversion_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.CodeConversionID, rel.SystemConvertTo, rel.SystemConvertFrom, rel.LabelConvertTo, rel.LabelConvertFrom, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformCodeConversionCodeConversionData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData = append(o.R.BusinessPartnerDataPlatformCodeConversionCodeConversionData, related...)
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.DeliveryDocument, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDocDatum) error {
	query := "update `data_platform_delivery_document_header_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData = o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentHeaderDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.DeliveryDocument, rel.DeliveryDocumentItem, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDocDatum) error {
	query := "update `data_platform_delivery_document_item_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData = o.R.DocIssuerBusinessPartnerDataPlatformDeliveryDocumentItemDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformDeliveryDocumentPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformDeliveryDocumentPartnerData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformDeliveryDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.DeliveryDocument, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformDeliveryDocumentPartnerData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformDeliveryDocumentPartnerData = append(o.R.BusinessPartnerDataPlatformDeliveryDocumentPartnerData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterBusinessPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_equipment_master_business_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterBusinessPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Equipment, rel.EquipmentPartnerObjectNmbr}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData = append(o.R.BusinessPartnerDataPlatformEquipmentMasterBusinessPartnerData, related...)
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterGeneralDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_equipment_master_general_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Equipment, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterGeneralDocDatum) error {
	query := "update `data_platform_equipment_master_general_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformEquipmentMasterGeneralDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData = o.R.DocIssuerBusinessPartnerDataPlatformEquipmentMasterGeneralDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddOwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OwnerBusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_equipment_master_owner_business_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OwnerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Equipment, rel.OwnerBusinessPartner, rel.ValidityStartDate, rel.ValidityEndDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OwnerBusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData: related,
		}
	} else {
		o.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData = append(o.R.OwnerBusinessPartnerDataPlatformEquipmentMasterOwnerBusinessPartnerData, related...)
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotConfirmationHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_lot_confirmation_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.InspectionLot, rel.Operations, rel.OperationsItem, rel.OperationID, rel.ConfirmationCountingID, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotConfirmationHeaderDocDatum) error {
	query := "update `data_platform_inspection_lot_confirmation_header_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInspectionLotConfirmationHeaderDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData = o.R.DocIssuerBusinessPartnerDataPlatformInspectionLotConfirmationHeaderDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformInvoiceDocumentPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformInvoiceDocumentPartnerData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformInvoiceDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.InvoiceDocument, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformInvoiceDocumentPartnerData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformInvoiceDocumentPartnerData = append(o.R.BusinessPartnerDataPlatformInvoiceDocumentPartnerData, related...)
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Operations, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsHeaderDocDatum) error {
	query := "update `data_platform_operations_header_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOperationsHeaderDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData = o.R.DocIssuerBusinessPartnerDataPlatformOperationsHeaderDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformOperationsItemDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformOperationsItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Operations, rel.OperationsItem, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformOperationsItemDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformOperationsItemDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformOperationsItemDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformOperationsItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemDocDatum) error {
	query := "update `data_platform_operations_item_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformOperationsItemDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformOperationsItemDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformOperationsItemDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOperationsItemDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData = o.R.DocIssuerBusinessPartnerDataPlatformOperationsItemDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.OrderID, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDocDatum) error {
	query := "update `data_platform_orders_header_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersHeaderDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData = o.R.DocIssuerBusinessPartnerDataPlatformOrdersHeaderDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformOrdersItemDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformOrdersItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.OrderID, rel.OrderItem, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformOrdersItemDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformOrdersItemDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformOrdersItemDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformOrdersItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDocDatum) error {
	query := "update `data_platform_orders_item_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformOrdersItemDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformOrdersItemDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformOrdersItemDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData = o.R.DocIssuerBusinessPartnerDataPlatformOrdersItemDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformOrdersPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformOrdersPartnerData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformOrdersPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.OrderID, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformOrdersPartnerData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformOrdersPartnerData = append(o.R.BusinessPartnerDataPlatformOrdersPartnerData, related...)
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PlannedOrder, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDocDatum) error {
	query := "update `data_platform_planned_order_header_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderHeaderDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData = o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderHeaderDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PlannedOrder, rel.PlannedOrderItem, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDocDatum) error {
	query := "update `data_platform_planned_order_item_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData = o.R.DocIssuerBusinessPartnerDataPlatformPlannedOrderItemDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformPlantGeneralData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformPlantGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlantGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformPlantGeneralData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformPlantGeneralData = append(o.R.BusinessPartnerDataPlatformPlantGeneralData, related...)
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_bp_plant_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDocDatum) error {
	query := "update `data_platform_product_master_bp_plant_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterBPPlantDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData = o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBPPlantDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBusinessPartnerDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_business_partner_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBusinessPartnerDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBusinessPartnerDocDatum) error {
	query := "update `data_platform_product_master_business_partner_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterBusinessPartnerDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData = o.R.DocIssuerBusinessPartnerDataPlatformProductMasterBusinessPartnerDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_general_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDocDatum) error {
	query := "update `data_platform_product_master_general_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterGeneralDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData = o.R.DocIssuerBusinessPartnerDataPlatformProductMasterGeneralDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductStockProductStockDataOlds adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformProductStockProductStockDataOlds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDataOld) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_data_old` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockDataOldPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Product, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformProductStockProductStockDataOlds: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds = append(o.R.BusinessPartnerDataPlatformProductStockProductStockDataOlds, related...)
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDocDatum) error {
	query := "update `data_platform_product_stock_product_stock_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductStockProductStockDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData = o.R.DocIssuerBusinessPartnerDataPlatformProductStockProductStockDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.ProductionOrder, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDocDatum) error {
	query := "update `data_platform_production_order_header_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderHeaderDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData = o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderHeaderDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.ProductionOrder, rel.ProductionOrderItem, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemDocDatum) error {
	query := "update `data_platform_production_order_item_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderItemDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData = o.R.DocIssuerBusinessPartnerDataPlatformProductionOrderItemDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductionOrderPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductionOrderPartnerData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformProductionOrderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.ProductionOrder, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformProductionOrderPartnerData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductionOrderPartnerData = append(o.R.BusinessPartnerDataPlatformProductionOrderPartnerData, related...)
	}

	return nil
}

// AddBuyerDataPlatformPurchaseRequisitionHeaderData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformPurchaseRequisitionHeaderData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBuyerDataPlatformPurchaseRequisitionHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BuyerDataPlatformPurchaseRequisitionHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformPurchaseRequisitionHeaderData = append(o.R.BuyerDataPlatformPurchaseRequisitionHeaderData, related...)
	}

	return nil
}

// AddDeliverFromPartyDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeliverFromParty, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeliverFromParty, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DeliverFromPartyDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = append(o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// SetDeliverFromPartyDataPlatformPurchaseRequisitionItemData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeliverFromPartyDataPlatformBusinessPartnerGeneralDatum's DeliverFromPartyDataPlatformPurchaseRequisitionItemData accordingly.
// Replaces o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	query := "update `data_platform_purchase_requisition_item_data` set `DeliverFromParty` = null where `DeliverFromParty` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = nil
	}

	return o.AddDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx, exec, insert, related...)
}

// RemoveDeliverFromPartyDataPlatformPurchaseRequisitionItemData relationships from objects passed in.
// Removes related items from R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDeliverFromPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeliverFromParty, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DeliverFromParty")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData)
			if ln > 1 && i < ln-1 {
				o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData[i] = o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData[ln-1]
			}
			o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData = o.R.DeliverFromPartyDataPlatformPurchaseRequisitionItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliverToPartyDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDeliverToPartyDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DeliverToPartyDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData = append(o.R.DeliverToPartyDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// AddSellerDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.SellerDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddSellerDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Seller, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Seller"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Seller, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			SellerDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.SellerDataPlatformPurchaseRequisitionItemData = append(o.R.SellerDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// SetSellerDataPlatformPurchaseRequisitionItemData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerDataPlatformBusinessPartnerGeneralDatum's SellerDataPlatformPurchaseRequisitionItemData accordingly.
// Replaces o.R.SellerDataPlatformPurchaseRequisitionItemData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetSellerDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	query := "update `data_platform_purchase_requisition_item_data` set `Seller` = null where `Seller` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.SellerDataPlatformPurchaseRequisitionItemData = nil
	}

	return o.AddSellerDataPlatformPurchaseRequisitionItemData(ctx, exec, insert, related...)
}

// RemoveSellerDataPlatformPurchaseRequisitionItemData relationships from objects passed in.
// Removes related items from R.SellerDataPlatformPurchaseRequisitionItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveSellerDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Seller, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Seller")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SellerDataPlatformPurchaseRequisitionItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.SellerDataPlatformPurchaseRequisitionItemData)
			if ln > 1 && i < ln-1 {
				o.R.SellerDataPlatformPurchaseRequisitionItemData[i] = o.R.SellerDataPlatformPurchaseRequisitionItemData[ln-1]
			}
			o.R.SellerDataPlatformPurchaseRequisitionItemData = o.R.SellerDataPlatformPurchaseRequisitionItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Quotation, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderDocDatum) error {
	query := "update `data_platform_quotations_header_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformQuotationsHeaderDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData = o.R.DocIssuerBusinessPartnerDataPlatformQuotationsHeaderDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformQuotationsItemDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformQuotationsItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsItemDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_item_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Quotation, rel.QuotationItem, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformQuotationsItemDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformQuotationsItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsItemDocDatum) error {
	query := "update `data_platform_quotations_item_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformQuotationsItemDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformQuotationsItemDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformQuotationsItemDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformQuotationsItemDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData = o.R.DocIssuerBusinessPartnerDataPlatformQuotationsItemDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformQuotationsPartnerData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformQuotationsPartnerData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBusinessPartnerDataPlatformQuotationsPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Quotation, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformQuotationsPartnerData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformQuotationsPartnerData = append(o.R.BusinessPartnerDataPlatformQuotationsPartnerData, related...)
	}

	return nil
}

// AddBillFromPartyDataPlatformSCRBillingRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromPartyDataPlatformSCRBillingRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBillFromPartyDataPlatformSCRBillingRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRBillingRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillFromParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_billing_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillFromParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BillFromPartyDataPlatformSCRBillingRelationData: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRBillingRelationData = append(o.R.BillFromPartyDataPlatformSCRBillingRelationData, related...)
	}

	return nil
}

// AddBillToPartyDataPlatformSCRBillingRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BillToPartyDataPlatformSCRBillingRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBillToPartyDataPlatformSCRBillingRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRBillingRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_billing_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRBillingRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BillToPartyDataPlatformSCRBillingRelationData: related,
		}
	} else {
		o.R.BillToPartyDataPlatformSCRBillingRelationData = append(o.R.BillToPartyDataPlatformSCRBillingRelationData, related...)
	}

	return nil
}

// AddDeliverFromPartyDataPlatformSCRDeliveryRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverFromPartyDataPlatformSCRDeliveryRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDeliverFromPartyDataPlatformSCRDeliveryRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverFromParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_delivery_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverFromParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DeliverFromPartyDataPlatformSCRDeliveryRelationData: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformSCRDeliveryRelationData = append(o.R.DeliverFromPartyDataPlatformSCRDeliveryRelationData, related...)
	}

	return nil
}

// AddDeliverToPartyDataPlatformSCRDeliveryRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPartyDataPlatformSCRDeliveryRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDeliverToPartyDataPlatformSCRDeliveryRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_delivery_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DeliverToPartyDataPlatformSCRDeliveryRelationData: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformSCRDeliveryRelationData = append(o.R.DeliverToPartyDataPlatformSCRDeliveryRelationData, related...)
	}

	return nil
}

// AddFreightBillFromPartyDataPlatformSCRFreightBillingRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.FreightBillFromPartyDataPlatformSCRFreightBillingRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddFreightBillFromPartyDataPlatformSCRFreightBillingRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRFreightBillingRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FreightBillFromParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_freight_billing_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"FreightBillFromParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipFreightID, rel.SupplyChainRelationshipFreightBillingID, rel.Buyer, rel.Seller, rel.FreightPartner, rel.FreightBillToParty, rel.FreightBillFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FreightBillFromParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			FreightBillFromPartyDataPlatformSCRFreightBillingRelationData: related,
		}
	} else {
		o.R.FreightBillFromPartyDataPlatformSCRFreightBillingRelationData = append(o.R.FreightBillFromPartyDataPlatformSCRFreightBillingRelationData, related...)
	}

	return nil
}

// AddFreightBillToPartyDataPlatformSCRFreightBillingRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.FreightBillToPartyDataPlatformSCRFreightBillingRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddFreightBillToPartyDataPlatformSCRFreightBillingRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRFreightBillingRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FreightBillToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_freight_billing_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"FreightBillToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightBillingRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipFreightID, rel.SupplyChainRelationshipFreightBillingID, rel.Buyer, rel.Seller, rel.FreightPartner, rel.FreightBillToParty, rel.FreightBillFromParty}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FreightBillToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			FreightBillToPartyDataPlatformSCRFreightBillingRelationData: related,
		}
	} else {
		o.R.FreightBillToPartyDataPlatformSCRFreightBillingRelationData = append(o.R.FreightBillToPartyDataPlatformSCRFreightBillingRelationData, related...)
	}

	return nil
}

// AddFreightPayeeDataPlatformSCRFreightPaymentRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.FreightPayeeDataPlatformSCRFreightPaymentRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddFreightPayeeDataPlatformSCRFreightPaymentRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRFreightPaymentRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FreightPayee = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_freight_payment_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"FreightPayee"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipFreightID, rel.SupplyChainRelationshipFreightBillingID, rel.SupplyChainRelationshipFreightPaymentID, rel.Buyer, rel.Seller, rel.FreightPartner, rel.FreightBillToParty, rel.FreightBillFromParty, rel.FreightPayer, rel.FreightPayee}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FreightPayee = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			FreightPayeeDataPlatformSCRFreightPaymentRelationData: related,
		}
	} else {
		o.R.FreightPayeeDataPlatformSCRFreightPaymentRelationData = append(o.R.FreightPayeeDataPlatformSCRFreightPaymentRelationData, related...)
	}

	return nil
}

// AddFreightPayerDataPlatformSCRFreightPaymentRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.FreightPayerDataPlatformSCRFreightPaymentRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddFreightPayerDataPlatformSCRFreightPaymentRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRFreightPaymentRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FreightPayer = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_freight_payment_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"FreightPayer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightPaymentRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipFreightID, rel.SupplyChainRelationshipFreightBillingID, rel.SupplyChainRelationshipFreightPaymentID, rel.Buyer, rel.Seller, rel.FreightPartner, rel.FreightBillToParty, rel.FreightBillFromParty, rel.FreightPayer, rel.FreightPayee}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FreightPayer = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			FreightPayerDataPlatformSCRFreightPaymentRelationData: related,
		}
	} else {
		o.R.FreightPayerDataPlatformSCRFreightPaymentRelationData = append(o.R.FreightPayerDataPlatformSCRFreightPaymentRelationData, related...)
	}

	return nil
}

// AddFreightPartnerDataPlatformSCRFreightRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.FreightPartnerDataPlatformSCRFreightRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddFreightPartnerDataPlatformSCRFreightRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRFreightRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FreightPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_freight_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"FreightPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRFreightRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipFreightID, rel.Buyer, rel.Seller, rel.FreightPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FreightPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			FreightPartnerDataPlatformSCRFreightRelationData: related,
		}
	} else {
		o.R.FreightPartnerDataPlatformSCRFreightRelationData = append(o.R.FreightPartnerDataPlatformSCRFreightRelationData, related...)
	}

	return nil
}

// AddBuyerDataPlatformSCRGeneralData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformSCRGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddBuyerDataPlatformSCRGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BuyerDataPlatformSCRGeneralData: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralData = append(o.R.BuyerDataPlatformSCRGeneralData, related...)
	}

	return nil
}

// AddSellerDataPlatformSCRGeneralData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.SellerDataPlatformSCRGeneralData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddSellerDataPlatformSCRGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Seller = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Seller"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Seller = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			SellerDataPlatformSCRGeneralData: related,
		}
	} else {
		o.R.SellerDataPlatformSCRGeneralData = append(o.R.SellerDataPlatformSCRGeneralData, related...)
	}

	return nil
}

// AddDocIssuerBusinessPartnerDataPlatformSCRGeneralDocData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddDocIssuerBusinessPartnerDataPlatformSCRGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRGeneralDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_general_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DocIssuerBusinessPartner, o.BusinessPartner)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData = append(o.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData, related...)
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformSCRGeneralDocData removes all previously related items of the
// data_platform_business_partner_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum's DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData accordingly.
// Replaces o.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData with related.
func (o *DataPlatformBusinessPartnerGeneralDatum) SetDocIssuerBusinessPartnerDataPlatformSCRGeneralDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRGeneralDocDatum) error {
	query := "update `data_platform_scr_general_doc_data` set `DocIssuerBusinessPartner` = null where `DocIssuerBusinessPartner` = ?"
	values := []interface{}{o.BusinessPartner}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData = nil
	}

	return o.AddDocIssuerBusinessPartnerDataPlatformSCRGeneralDocData(ctx, exec, insert, related...)
}

// RemoveDocIssuerBusinessPartnerDataPlatformSCRGeneralDocData relationships from objects passed in.
// Removes related items from R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformBusinessPartnerGeneralDatum) RemoveDocIssuerBusinessPartnerDataPlatformSCRGeneralDocData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformSCRGeneralDocDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DocIssuerBusinessPartner, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData)
			if ln > 1 && i < ln-1 {
				o.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData[i] = o.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData[ln-1]
			}
			o.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData = o.R.DocIssuerBusinessPartnerDataPlatformSCRGeneralDocData[:ln-1]
			break
		}
	}

	return nil
}

// AddPayeeDataPlatformSCRPaymentRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.PayeeDataPlatformSCRPaymentRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddPayeeDataPlatformSCRPaymentRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRPaymentRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Payee = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_payment_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Payee"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.SupplyChainRelationshipPaymentID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty, rel.Payer, rel.Payee}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Payee = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			PayeeDataPlatformSCRPaymentRelationData: related,
		}
	} else {
		o.R.PayeeDataPlatformSCRPaymentRelationData = append(o.R.PayeeDataPlatformSCRPaymentRelationData, related...)
	}

	return nil
}

// AddPayerDataPlatformSCRPaymentRelationData adds the given related objects to the existing relationships
// of the data_platform_business_partner_general_datum, optionally inserting them as new records.
// Appends related to o.R.PayerDataPlatformSCRPaymentRelationData.
func (o *DataPlatformBusinessPartnerGeneralDatum) AddPayerDataPlatformSCRPaymentRelationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRPaymentRelationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Payer = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_payment_relation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Payer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipBillingID, rel.SupplyChainRelationshipPaymentID, rel.Buyer, rel.Seller, rel.BillToParty, rel.BillFromParty, rel.Payer, rel.Payee}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Payer = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerGeneralDatumR{
			PayerDataPlatformSCRPaymentRelationData: related,
		}
	} else {
		o.R.PayerDataPlatformSCRPaymentRelationData = append(o.R.PayerDataPlatformSCRPaymentRelationData, related...)
	}

	return nil
}

// DataPlatformBusinessPartnerGeneralData retrieves all the records using an executor.
func DataPlatformBusinessPartnerGeneralData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_general_data`.*"})
	}

	return dataPlatformBusinessPartnerGeneralDatumQuery{q}
}

// FindDataPlatformBusinessPartnerGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, selectCols ...string) (*DataPlatformBusinessPartnerGeneralDatum, error) {
	dataPlatformBusinessPartnerGeneralDatumObj := &DataPlatformBusinessPartnerGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_general_data` where `BusinessPartner`=?", sel,
	)

	q := queries.Raw(query, businessPartner)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_general_data")
	}

	return dataPlatformBusinessPartnerGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_general_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumInsertCache[key]
	dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformBusinessPartnerGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumUpdateCache[key]
	dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_business_partner_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, append(wl, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_business_partner_general_data row")
	}

	if !cached {
		dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_business_partner_general_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerGeneralDatum slice")
	}

	return nil
}

var mySQLDataPlatformBusinessPartnerGeneralDatumUniqueColumns = []string{
	"BusinessPartner",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_general_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerGeneralDatumUpsertCache[key]
	dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithDefault,
			dataPlatformBusinessPartnerGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerGeneralDatumAllColumns,
			dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerGeneralDatumType, dataPlatformBusinessPartnerGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerGeneralDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerGeneralDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformBusinessPartnerGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformBusinessPartnerGeneralDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_general_data` WHERE `BusinessPartner`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_business_partner_general_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformBusinessPartnerGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_general_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerGeneralDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerGeneralDatum(ctx, exec, o.BusinessPartner)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_general_data`.* FROM `data_platform_business_partner_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerGeneralDatumExists checks if the DataPlatformBusinessPartnerGeneralDatum row exists.
func DataPlatformBusinessPartnerGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_general_data` where `BusinessPartner`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerGeneralDatum row exists.
func (o *DataPlatformBusinessPartnerGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerGeneralDatumExists(ctx, exec, o.BusinessPartner)
}
