// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformOrdersHeaderDatum is an object representing the database table.
type DataPlatformOrdersHeaderDatum struct {
	OrderID                          int          `boil:"OrderID" json:"OrderID" toml:"OrderID" yaml:"OrderID"`
	OrderDate                        string       `boil:"OrderDate" json:"OrderDate" toml:"OrderDate" yaml:"OrderDate"`
	OrderType                        string       `boil:"OrderType" json:"OrderType" toml:"OrderType" yaml:"OrderType"`
	SupplyChainRelationshipID        int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipBillingID null.Int     `boil:"SupplyChainRelationshipBillingID" json:"SupplyChainRelationshipBillingID,omitempty" toml:"SupplyChainRelationshipBillingID" yaml:"SupplyChainRelationshipBillingID,omitempty"`
	SupplyChainRelationshipPaymentID null.Int     `boil:"SupplyChainRelationshipPaymentID" json:"SupplyChainRelationshipPaymentID,omitempty" toml:"SupplyChainRelationshipPaymentID" yaml:"SupplyChainRelationshipPaymentID,omitempty"`
	Buyer                            int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                           int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	BillToParty                      null.Int     `boil:"BillToParty" json:"BillToParty,omitempty" toml:"BillToParty" yaml:"BillToParty,omitempty"`
	BillFromParty                    null.Int     `boil:"BillFromParty" json:"BillFromParty,omitempty" toml:"BillFromParty" yaml:"BillFromParty,omitempty"`
	BillToCountry                    null.String  `boil:"BillToCountry" json:"BillToCountry,omitempty" toml:"BillToCountry" yaml:"BillToCountry,omitempty"`
	BillFromCountry                  null.String  `boil:"BillFromCountry" json:"BillFromCountry,omitempty" toml:"BillFromCountry" yaml:"BillFromCountry,omitempty"`
	Payer                            null.Int     `boil:"Payer" json:"Payer,omitempty" toml:"Payer" yaml:"Payer,omitempty"`
	Payee                            null.Int     `boil:"Payee" json:"Payee,omitempty" toml:"Payee" yaml:"Payee,omitempty"`
	ContractType                     null.String  `boil:"ContractType" json:"ContractType,omitempty" toml:"ContractType" yaml:"ContractType,omitempty"`
	OrderValidityStartDate           null.String  `boil:"OrderValidityStartDate" json:"OrderValidityStartDate,omitempty" toml:"OrderValidityStartDate" yaml:"OrderValidityStartDate,omitempty"`
	OrderValidityEndDate             null.String  `boil:"OrderValidityEndDate" json:"OrderValidityEndDate,omitempty" toml:"OrderValidityEndDate" yaml:"OrderValidityEndDate,omitempty"`
	InvoicePeriodStartDate           null.String  `boil:"InvoicePeriodStartDate" json:"InvoicePeriodStartDate,omitempty" toml:"InvoicePeriodStartDate" yaml:"InvoicePeriodStartDate,omitempty"`
	InvoicePeriodEndDate             null.String  `boil:"InvoicePeriodEndDate" json:"InvoicePeriodEndDate,omitempty" toml:"InvoicePeriodEndDate" yaml:"InvoicePeriodEndDate,omitempty"`
	TotalNetAmount                   float32      `boil:"TotalNetAmount" json:"TotalNetAmount" toml:"TotalNetAmount" yaml:"TotalNetAmount"`
	TotalTaxAmount                   float32      `boil:"TotalTaxAmount" json:"TotalTaxAmount" toml:"TotalTaxAmount" yaml:"TotalTaxAmount"`
	TotalGrossAmount                 float32      `boil:"TotalGrossAmount" json:"TotalGrossAmount" toml:"TotalGrossAmount" yaml:"TotalGrossAmount"`
	HeaderDeliveryStatus             string       `boil:"HeaderDeliveryStatus" json:"HeaderDeliveryStatus" toml:"HeaderDeliveryStatus" yaml:"HeaderDeliveryStatus"`
	HeaderBillingStatus              string       `boil:"HeaderBillingStatus" json:"HeaderBillingStatus" toml:"HeaderBillingStatus" yaml:"HeaderBillingStatus"`
	HeaderDocReferenceStatus         string       `boil:"HeaderDocReferenceStatus" json:"HeaderDocReferenceStatus" toml:"HeaderDocReferenceStatus" yaml:"HeaderDocReferenceStatus"`
	TransactionCurrency              string       `boil:"TransactionCurrency" json:"TransactionCurrency" toml:"TransactionCurrency" yaml:"TransactionCurrency"`
	PricingDate                      string       `boil:"PricingDate" json:"PricingDate" toml:"PricingDate" yaml:"PricingDate"`
	PriceDetnExchangeRate            null.Float32 `boil:"PriceDetnExchangeRate" json:"PriceDetnExchangeRate,omitempty" toml:"PriceDetnExchangeRate" yaml:"PriceDetnExchangeRate,omitempty"`
	RequestedDeliveryDate            string       `boil:"RequestedDeliveryDate" json:"RequestedDeliveryDate" toml:"RequestedDeliveryDate" yaml:"RequestedDeliveryDate"`
	RequestedDeliveryTime            string       `boil:"RequestedDeliveryTime" json:"RequestedDeliveryTime" toml:"RequestedDeliveryTime" yaml:"RequestedDeliveryTime"`
	HeaderCompleteDeliveryIsDefined  null.Bool    `boil:"HeaderCompleteDeliveryIsDefined" json:"HeaderCompleteDeliveryIsDefined,omitempty" toml:"HeaderCompleteDeliveryIsDefined" yaml:"HeaderCompleteDeliveryIsDefined,omitempty"`
	Incoterms                        null.String  `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	PaymentTerms                     string       `boil:"PaymentTerms" json:"PaymentTerms" toml:"PaymentTerms" yaml:"PaymentTerms"`
	PaymentMethod                    string       `boil:"PaymentMethod" json:"PaymentMethod" toml:"PaymentMethod" yaml:"PaymentMethod"`
	ReferenceDocument                null.Int     `boil:"ReferenceDocument" json:"ReferenceDocument,omitempty" toml:"ReferenceDocument" yaml:"ReferenceDocument,omitempty"`
	ReferenceDocumentItem            null.Int     `boil:"ReferenceDocumentItem" json:"ReferenceDocumentItem,omitempty" toml:"ReferenceDocumentItem" yaml:"ReferenceDocumentItem,omitempty"`
	AccountAssignmentGroup           string       `boil:"AccountAssignmentGroup" json:"AccountAssignmentGroup" toml:"AccountAssignmentGroup" yaml:"AccountAssignmentGroup"`
	AccountingExchangeRate           null.Float32 `boil:"AccountingExchangeRate" json:"AccountingExchangeRate,omitempty" toml:"AccountingExchangeRate" yaml:"AccountingExchangeRate,omitempty"`
	InvoiceDocumentDate              string       `boil:"InvoiceDocumentDate" json:"InvoiceDocumentDate" toml:"InvoiceDocumentDate" yaml:"InvoiceDocumentDate"`
	IsExportImport                   null.Bool    `boil:"IsExportImport" json:"IsExportImport,omitempty" toml:"IsExportImport" yaml:"IsExportImport,omitempty"`
	HeaderText                       null.String  `boil:"HeaderText" json:"HeaderText,omitempty" toml:"HeaderText" yaml:"HeaderText,omitempty"`
	HeaderBlockStatus                null.Bool    `boil:"HeaderBlockStatus" json:"HeaderBlockStatus,omitempty" toml:"HeaderBlockStatus" yaml:"HeaderBlockStatus,omitempty"`
	HeaderDeliveryBlockStatus        null.Bool    `boil:"HeaderDeliveryBlockStatus" json:"HeaderDeliveryBlockStatus,omitempty" toml:"HeaderDeliveryBlockStatus" yaml:"HeaderDeliveryBlockStatus,omitempty"`
	HeaderBillingBlockStatus         null.Bool    `boil:"HeaderBillingBlockStatus" json:"HeaderBillingBlockStatus,omitempty" toml:"HeaderBillingBlockStatus" yaml:"HeaderBillingBlockStatus,omitempty"`
	CreationDate                     string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                     string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                   string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                   string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsCancelled                      null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion              null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformOrdersHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformOrdersHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformOrdersHeaderDatumColumns = struct {
	OrderID                          string
	OrderDate                        string
	OrderType                        string
	SupplyChainRelationshipID        string
	SupplyChainRelationshipBillingID string
	SupplyChainRelationshipPaymentID string
	Buyer                            string
	Seller                           string
	BillToParty                      string
	BillFromParty                    string
	BillToCountry                    string
	BillFromCountry                  string
	Payer                            string
	Payee                            string
	ContractType                     string
	OrderValidityStartDate           string
	OrderValidityEndDate             string
	InvoicePeriodStartDate           string
	InvoicePeriodEndDate             string
	TotalNetAmount                   string
	TotalTaxAmount                   string
	TotalGrossAmount                 string
	HeaderDeliveryStatus             string
	HeaderBillingStatus              string
	HeaderDocReferenceStatus         string
	TransactionCurrency              string
	PricingDate                      string
	PriceDetnExchangeRate            string
	RequestedDeliveryDate            string
	RequestedDeliveryTime            string
	HeaderCompleteDeliveryIsDefined  string
	Incoterms                        string
	PaymentTerms                     string
	PaymentMethod                    string
	ReferenceDocument                string
	ReferenceDocumentItem            string
	AccountAssignmentGroup           string
	AccountingExchangeRate           string
	InvoiceDocumentDate              string
	IsExportImport                   string
	HeaderText                       string
	HeaderBlockStatus                string
	HeaderDeliveryBlockStatus        string
	HeaderBillingBlockStatus         string
	CreationDate                     string
	CreationTime                     string
	LastChangeDate                   string
	LastChangeTime                   string
	IsCancelled                      string
	IsMarkedForDeletion              string
}{
	OrderID:                          "OrderID",
	OrderDate:                        "OrderDate",
	OrderType:                        "OrderType",
	SupplyChainRelationshipID:        "SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID: "SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID: "SupplyChainRelationshipPaymentID",
	Buyer:                            "Buyer",
	Seller:                           "Seller",
	BillToParty:                      "BillToParty",
	BillFromParty:                    "BillFromParty",
	BillToCountry:                    "BillToCountry",
	BillFromCountry:                  "BillFromCountry",
	Payer:                            "Payer",
	Payee:                            "Payee",
	ContractType:                     "ContractType",
	OrderValidityStartDate:           "OrderValidityStartDate",
	OrderValidityEndDate:             "OrderValidityEndDate",
	InvoicePeriodStartDate:           "InvoicePeriodStartDate",
	InvoicePeriodEndDate:             "InvoicePeriodEndDate",
	TotalNetAmount:                   "TotalNetAmount",
	TotalTaxAmount:                   "TotalTaxAmount",
	TotalGrossAmount:                 "TotalGrossAmount",
	HeaderDeliveryStatus:             "HeaderDeliveryStatus",
	HeaderBillingStatus:              "HeaderBillingStatus",
	HeaderDocReferenceStatus:         "HeaderDocReferenceStatus",
	TransactionCurrency:              "TransactionCurrency",
	PricingDate:                      "PricingDate",
	PriceDetnExchangeRate:            "PriceDetnExchangeRate",
	RequestedDeliveryDate:            "RequestedDeliveryDate",
	RequestedDeliveryTime:            "RequestedDeliveryTime",
	HeaderCompleteDeliveryIsDefined:  "HeaderCompleteDeliveryIsDefined",
	Incoterms:                        "Incoterms",
	PaymentTerms:                     "PaymentTerms",
	PaymentMethod:                    "PaymentMethod",
	ReferenceDocument:                "ReferenceDocument",
	ReferenceDocumentItem:            "ReferenceDocumentItem",
	AccountAssignmentGroup:           "AccountAssignmentGroup",
	AccountingExchangeRate:           "AccountingExchangeRate",
	InvoiceDocumentDate:              "InvoiceDocumentDate",
	IsExportImport:                   "IsExportImport",
	HeaderText:                       "HeaderText",
	HeaderBlockStatus:                "HeaderBlockStatus",
	HeaderDeliveryBlockStatus:        "HeaderDeliveryBlockStatus",
	HeaderBillingBlockStatus:         "HeaderBillingBlockStatus",
	CreationDate:                     "CreationDate",
	CreationTime:                     "CreationTime",
	LastChangeDate:                   "LastChangeDate",
	LastChangeTime:                   "LastChangeTime",
	IsCancelled:                      "IsCancelled",
	IsMarkedForDeletion:              "IsMarkedForDeletion",
}

var DataPlatformOrdersHeaderDatumTableColumns = struct {
	OrderID                          string
	OrderDate                        string
	OrderType                        string
	SupplyChainRelationshipID        string
	SupplyChainRelationshipBillingID string
	SupplyChainRelationshipPaymentID string
	Buyer                            string
	Seller                           string
	BillToParty                      string
	BillFromParty                    string
	BillToCountry                    string
	BillFromCountry                  string
	Payer                            string
	Payee                            string
	ContractType                     string
	OrderValidityStartDate           string
	OrderValidityEndDate             string
	InvoicePeriodStartDate           string
	InvoicePeriodEndDate             string
	TotalNetAmount                   string
	TotalTaxAmount                   string
	TotalGrossAmount                 string
	HeaderDeliveryStatus             string
	HeaderBillingStatus              string
	HeaderDocReferenceStatus         string
	TransactionCurrency              string
	PricingDate                      string
	PriceDetnExchangeRate            string
	RequestedDeliveryDate            string
	RequestedDeliveryTime            string
	HeaderCompleteDeliveryIsDefined  string
	Incoterms                        string
	PaymentTerms                     string
	PaymentMethod                    string
	ReferenceDocument                string
	ReferenceDocumentItem            string
	AccountAssignmentGroup           string
	AccountingExchangeRate           string
	InvoiceDocumentDate              string
	IsExportImport                   string
	HeaderText                       string
	HeaderBlockStatus                string
	HeaderDeliveryBlockStatus        string
	HeaderBillingBlockStatus         string
	CreationDate                     string
	CreationTime                     string
	LastChangeDate                   string
	LastChangeTime                   string
	IsCancelled                      string
	IsMarkedForDeletion              string
}{
	OrderID:                          "data_platform_orders_header_data.OrderID",
	OrderDate:                        "data_platform_orders_header_data.OrderDate",
	OrderType:                        "data_platform_orders_header_data.OrderType",
	SupplyChainRelationshipID:        "data_platform_orders_header_data.SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID: "data_platform_orders_header_data.SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID: "data_platform_orders_header_data.SupplyChainRelationshipPaymentID",
	Buyer:                            "data_platform_orders_header_data.Buyer",
	Seller:                           "data_platform_orders_header_data.Seller",
	BillToParty:                      "data_platform_orders_header_data.BillToParty",
	BillFromParty:                    "data_platform_orders_header_data.BillFromParty",
	BillToCountry:                    "data_platform_orders_header_data.BillToCountry",
	BillFromCountry:                  "data_platform_orders_header_data.BillFromCountry",
	Payer:                            "data_platform_orders_header_data.Payer",
	Payee:                            "data_platform_orders_header_data.Payee",
	ContractType:                     "data_platform_orders_header_data.ContractType",
	OrderValidityStartDate:           "data_platform_orders_header_data.OrderValidityStartDate",
	OrderValidityEndDate:             "data_platform_orders_header_data.OrderValidityEndDate",
	InvoicePeriodStartDate:           "data_platform_orders_header_data.InvoicePeriodStartDate",
	InvoicePeriodEndDate:             "data_platform_orders_header_data.InvoicePeriodEndDate",
	TotalNetAmount:                   "data_platform_orders_header_data.TotalNetAmount",
	TotalTaxAmount:                   "data_platform_orders_header_data.TotalTaxAmount",
	TotalGrossAmount:                 "data_platform_orders_header_data.TotalGrossAmount",
	HeaderDeliveryStatus:             "data_platform_orders_header_data.HeaderDeliveryStatus",
	HeaderBillingStatus:              "data_platform_orders_header_data.HeaderBillingStatus",
	HeaderDocReferenceStatus:         "data_platform_orders_header_data.HeaderDocReferenceStatus",
	TransactionCurrency:              "data_platform_orders_header_data.TransactionCurrency",
	PricingDate:                      "data_platform_orders_header_data.PricingDate",
	PriceDetnExchangeRate:            "data_platform_orders_header_data.PriceDetnExchangeRate",
	RequestedDeliveryDate:            "data_platform_orders_header_data.RequestedDeliveryDate",
	RequestedDeliveryTime:            "data_platform_orders_header_data.RequestedDeliveryTime",
	HeaderCompleteDeliveryIsDefined:  "data_platform_orders_header_data.HeaderCompleteDeliveryIsDefined",
	Incoterms:                        "data_platform_orders_header_data.Incoterms",
	PaymentTerms:                     "data_platform_orders_header_data.PaymentTerms",
	PaymentMethod:                    "data_platform_orders_header_data.PaymentMethod",
	ReferenceDocument:                "data_platform_orders_header_data.ReferenceDocument",
	ReferenceDocumentItem:            "data_platform_orders_header_data.ReferenceDocumentItem",
	AccountAssignmentGroup:           "data_platform_orders_header_data.AccountAssignmentGroup",
	AccountingExchangeRate:           "data_platform_orders_header_data.AccountingExchangeRate",
	InvoiceDocumentDate:              "data_platform_orders_header_data.InvoiceDocumentDate",
	IsExportImport:                   "data_platform_orders_header_data.IsExportImport",
	HeaderText:                       "data_platform_orders_header_data.HeaderText",
	HeaderBlockStatus:                "data_platform_orders_header_data.HeaderBlockStatus",
	HeaderDeliveryBlockStatus:        "data_platform_orders_header_data.HeaderDeliveryBlockStatus",
	HeaderBillingBlockStatus:         "data_platform_orders_header_data.HeaderBillingBlockStatus",
	CreationDate:                     "data_platform_orders_header_data.CreationDate",
	CreationTime:                     "data_platform_orders_header_data.CreationTime",
	LastChangeDate:                   "data_platform_orders_header_data.LastChangeDate",
	LastChangeTime:                   "data_platform_orders_header_data.LastChangeTime",
	IsCancelled:                      "data_platform_orders_header_data.IsCancelled",
	IsMarkedForDeletion:              "data_platform_orders_header_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformOrdersHeaderDatumWhere = struct {
	OrderID                          whereHelperint
	OrderDate                        whereHelperstring
	OrderType                        whereHelperstring
	SupplyChainRelationshipID        whereHelperint
	SupplyChainRelationshipBillingID whereHelpernull_Int
	SupplyChainRelationshipPaymentID whereHelpernull_Int
	Buyer                            whereHelperint
	Seller                           whereHelperint
	BillToParty                      whereHelpernull_Int
	BillFromParty                    whereHelpernull_Int
	BillToCountry                    whereHelpernull_String
	BillFromCountry                  whereHelpernull_String
	Payer                            whereHelpernull_Int
	Payee                            whereHelpernull_Int
	ContractType                     whereHelpernull_String
	OrderValidityStartDate           whereHelpernull_String
	OrderValidityEndDate             whereHelpernull_String
	InvoicePeriodStartDate           whereHelpernull_String
	InvoicePeriodEndDate             whereHelpernull_String
	TotalNetAmount                   whereHelperfloat32
	TotalTaxAmount                   whereHelperfloat32
	TotalGrossAmount                 whereHelperfloat32
	HeaderDeliveryStatus             whereHelperstring
	HeaderBillingStatus              whereHelperstring
	HeaderDocReferenceStatus         whereHelperstring
	TransactionCurrency              whereHelperstring
	PricingDate                      whereHelperstring
	PriceDetnExchangeRate            whereHelpernull_Float32
	RequestedDeliveryDate            whereHelperstring
	RequestedDeliveryTime            whereHelperstring
	HeaderCompleteDeliveryIsDefined  whereHelpernull_Bool
	Incoterms                        whereHelpernull_String
	PaymentTerms                     whereHelperstring
	PaymentMethod                    whereHelperstring
	ReferenceDocument                whereHelpernull_Int
	ReferenceDocumentItem            whereHelpernull_Int
	AccountAssignmentGroup           whereHelperstring
	AccountingExchangeRate           whereHelpernull_Float32
	InvoiceDocumentDate              whereHelperstring
	IsExportImport                   whereHelpernull_Bool
	HeaderText                       whereHelpernull_String
	HeaderBlockStatus                whereHelpernull_Bool
	HeaderDeliveryBlockStatus        whereHelpernull_Bool
	HeaderBillingBlockStatus         whereHelpernull_Bool
	CreationDate                     whereHelperstring
	CreationTime                     whereHelperstring
	LastChangeDate                   whereHelperstring
	LastChangeTime                   whereHelperstring
	IsCancelled                      whereHelpernull_Bool
	IsMarkedForDeletion              whereHelpernull_Bool
}{
	OrderID:                          whereHelperint{field: "`data_platform_orders_header_data`.`OrderID`"},
	OrderDate:                        whereHelperstring{field: "`data_platform_orders_header_data`.`OrderDate`"},
	OrderType:                        whereHelperstring{field: "`data_platform_orders_header_data`.`OrderType`"},
	SupplyChainRelationshipID:        whereHelperint{field: "`data_platform_orders_header_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipBillingID: whereHelpernull_Int{field: "`data_platform_orders_header_data`.`SupplyChainRelationshipBillingID`"},
	SupplyChainRelationshipPaymentID: whereHelpernull_Int{field: "`data_platform_orders_header_data`.`SupplyChainRelationshipPaymentID`"},
	Buyer:                            whereHelperint{field: "`data_platform_orders_header_data`.`Buyer`"},
	Seller:                           whereHelperint{field: "`data_platform_orders_header_data`.`Seller`"},
	BillToParty:                      whereHelpernull_Int{field: "`data_platform_orders_header_data`.`BillToParty`"},
	BillFromParty:                    whereHelpernull_Int{field: "`data_platform_orders_header_data`.`BillFromParty`"},
	BillToCountry:                    whereHelpernull_String{field: "`data_platform_orders_header_data`.`BillToCountry`"},
	BillFromCountry:                  whereHelpernull_String{field: "`data_platform_orders_header_data`.`BillFromCountry`"},
	Payer:                            whereHelpernull_Int{field: "`data_platform_orders_header_data`.`Payer`"},
	Payee:                            whereHelpernull_Int{field: "`data_platform_orders_header_data`.`Payee`"},
	ContractType:                     whereHelpernull_String{field: "`data_platform_orders_header_data`.`ContractType`"},
	OrderValidityStartDate:           whereHelpernull_String{field: "`data_platform_orders_header_data`.`OrderValidityStartDate`"},
	OrderValidityEndDate:             whereHelpernull_String{field: "`data_platform_orders_header_data`.`OrderValidityEndDate`"},
	InvoicePeriodStartDate:           whereHelpernull_String{field: "`data_platform_orders_header_data`.`InvoicePeriodStartDate`"},
	InvoicePeriodEndDate:             whereHelpernull_String{field: "`data_platform_orders_header_data`.`InvoicePeriodEndDate`"},
	TotalNetAmount:                   whereHelperfloat32{field: "`data_platform_orders_header_data`.`TotalNetAmount`"},
	TotalTaxAmount:                   whereHelperfloat32{field: "`data_platform_orders_header_data`.`TotalTaxAmount`"},
	TotalGrossAmount:                 whereHelperfloat32{field: "`data_platform_orders_header_data`.`TotalGrossAmount`"},
	HeaderDeliveryStatus:             whereHelperstring{field: "`data_platform_orders_header_data`.`HeaderDeliveryStatus`"},
	HeaderBillingStatus:              whereHelperstring{field: "`data_platform_orders_header_data`.`HeaderBillingStatus`"},
	HeaderDocReferenceStatus:         whereHelperstring{field: "`data_platform_orders_header_data`.`HeaderDocReferenceStatus`"},
	TransactionCurrency:              whereHelperstring{field: "`data_platform_orders_header_data`.`TransactionCurrency`"},
	PricingDate:                      whereHelperstring{field: "`data_platform_orders_header_data`.`PricingDate`"},
	PriceDetnExchangeRate:            whereHelpernull_Float32{field: "`data_platform_orders_header_data`.`PriceDetnExchangeRate`"},
	RequestedDeliveryDate:            whereHelperstring{field: "`data_platform_orders_header_data`.`RequestedDeliveryDate`"},
	RequestedDeliveryTime:            whereHelperstring{field: "`data_platform_orders_header_data`.`RequestedDeliveryTime`"},
	HeaderCompleteDeliveryIsDefined:  whereHelpernull_Bool{field: "`data_platform_orders_header_data`.`HeaderCompleteDeliveryIsDefined`"},
	Incoterms:                        whereHelpernull_String{field: "`data_platform_orders_header_data`.`Incoterms`"},
	PaymentTerms:                     whereHelperstring{field: "`data_platform_orders_header_data`.`PaymentTerms`"},
	PaymentMethod:                    whereHelperstring{field: "`data_platform_orders_header_data`.`PaymentMethod`"},
	ReferenceDocument:                whereHelpernull_Int{field: "`data_platform_orders_header_data`.`ReferenceDocument`"},
	ReferenceDocumentItem:            whereHelpernull_Int{field: "`data_platform_orders_header_data`.`ReferenceDocumentItem`"},
	AccountAssignmentGroup:           whereHelperstring{field: "`data_platform_orders_header_data`.`AccountAssignmentGroup`"},
	AccountingExchangeRate:           whereHelpernull_Float32{field: "`data_platform_orders_header_data`.`AccountingExchangeRate`"},
	InvoiceDocumentDate:              whereHelperstring{field: "`data_platform_orders_header_data`.`InvoiceDocumentDate`"},
	IsExportImport:                   whereHelpernull_Bool{field: "`data_platform_orders_header_data`.`IsExportImport`"},
	HeaderText:                       whereHelpernull_String{field: "`data_platform_orders_header_data`.`HeaderText`"},
	HeaderBlockStatus:                whereHelpernull_Bool{field: "`data_platform_orders_header_data`.`HeaderBlockStatus`"},
	HeaderDeliveryBlockStatus:        whereHelpernull_Bool{field: "`data_platform_orders_header_data`.`HeaderDeliveryBlockStatus`"},
	HeaderBillingBlockStatus:         whereHelpernull_Bool{field: "`data_platform_orders_header_data`.`HeaderBillingBlockStatus`"},
	CreationDate:                     whereHelperstring{field: "`data_platform_orders_header_data`.`CreationDate`"},
	CreationTime:                     whereHelperstring{field: "`data_platform_orders_header_data`.`CreationTime`"},
	LastChangeDate:                   whereHelperstring{field: "`data_platform_orders_header_data`.`LastChangeDate`"},
	LastChangeTime:                   whereHelperstring{field: "`data_platform_orders_header_data`.`LastChangeTime`"},
	IsCancelled:                      whereHelpernull_Bool{field: "`data_platform_orders_header_data`.`IsCancelled`"},
	IsMarkedForDeletion:              whereHelpernull_Bool{field: "`data_platform_orders_header_data`.`IsMarkedForDeletion`"},
}

// DataPlatformOrdersHeaderDatumRels is where relationship names are stored.
var DataPlatformOrdersHeaderDatumRels = struct {
	BillFromCountryDataPlatformCountryCountryDatum            string
	BillToCountryDataPlatformCountryCountryDatum              string
	Incoterm                                                  string
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum  string
	PaymentTerm                                               string
	BillFromPartyDataPlatformSCRBillingRelationDatum          string
	BuyerDataPlatformSCRGeneralDatum                          string
	BillFromPartyDataPlatformSCRPaymentRelationDatum          string
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum      string
	OrderIDDataPlatformOrdersItemData                         string
	PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData string
}{
	BillFromCountryDataPlatformCountryCountryDatum: "BillFromCountryDataPlatformCountryCountryDatum",
	BillToCountryDataPlatformCountryCountryDatum:   "BillToCountryDataPlatformCountryCountryDatum",
	Incoterm: "Incoterm",
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: "PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum",
	PaymentTerm: "PaymentTerm",
	BillFromPartyDataPlatformSCRBillingRelationDatum:          "BillFromPartyDataPlatformSCRBillingRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:                          "BuyerDataPlatformSCRGeneralDatum",
	BillFromPartyDataPlatformSCRPaymentRelationDatum:          "BillFromPartyDataPlatformSCRPaymentRelationDatum",
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum:      "TransactionCurrencyDataPlatformCurrencyCurrencyDatum",
	OrderIDDataPlatformOrdersItemData:                         "OrderIDDataPlatformOrdersItemData",
	PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData: "PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData",
}

// dataPlatformOrdersHeaderDatumR is where relationships are stored.
type dataPlatformOrdersHeaderDatumR struct {
	BillFromCountryDataPlatformCountryCountryDatum            *DataPlatformCountryCountryDatum                `boil:"BillFromCountryDataPlatformCountryCountryDatum" json:"BillFromCountryDataPlatformCountryCountryDatum" toml:"BillFromCountryDataPlatformCountryCountryDatum" yaml:"BillFromCountryDataPlatformCountryCountryDatum"`
	BillToCountryDataPlatformCountryCountryDatum              *DataPlatformCountryCountryDatum                `boil:"BillToCountryDataPlatformCountryCountryDatum" json:"BillToCountryDataPlatformCountryCountryDatum" toml:"BillToCountryDataPlatformCountryCountryDatum" yaml:"BillToCountryDataPlatformCountryCountryDatum"`
	Incoterm                                                  *DataPlatformIncotermsIncotermsDatum            `boil:"Incoterm" json:"Incoterm" toml:"Incoterm" yaml:"Incoterm"`
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum  *DataPlatformPaymentMethodPaymentMethodDatum    `boil:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" json:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" toml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" yaml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum"`
	PaymentTerm                                               *DataPlatformPaymentTermsPaymentTermsDatum      `boil:"PaymentTerm" json:"PaymentTerm" toml:"PaymentTerm" yaml:"PaymentTerm"`
	BillFromPartyDataPlatformSCRBillingRelationDatum          *DataPlatformSCRBillingRelationDatum            `boil:"BillFromPartyDataPlatformSCRBillingRelationDatum" json:"BillFromPartyDataPlatformSCRBillingRelationDatum" toml:"BillFromPartyDataPlatformSCRBillingRelationDatum" yaml:"BillFromPartyDataPlatformSCRBillingRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum                          *DataPlatformSCRGeneralDatum                    `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	BillFromPartyDataPlatformSCRPaymentRelationDatum          *DataPlatformSCRPaymentRelationDatum            `boil:"BillFromPartyDataPlatformSCRPaymentRelationDatum" json:"BillFromPartyDataPlatformSCRPaymentRelationDatum" toml:"BillFromPartyDataPlatformSCRPaymentRelationDatum" yaml:"BillFromPartyDataPlatformSCRPaymentRelationDatum"`
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum      *DataPlatformCurrencyCurrencyDatum              `boil:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" json:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" toml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" yaml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum"`
	OrderIDDataPlatformOrdersItemData                         DataPlatformOrdersItemDatumSlice                `boil:"OrderIDDataPlatformOrdersItemData" json:"OrderIDDataPlatformOrdersItemData" toml:"OrderIDDataPlatformOrdersItemData" yaml:"OrderIDDataPlatformOrdersItemData"`
	PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData DataPlatformPurchaseRequisitionHeaderDatumSlice `boil:"PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData" json:"PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData" toml:"PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData" yaml:"PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformOrdersHeaderDatumR) NewStruct() *dataPlatformOrdersHeaderDatumR {
	return &dataPlatformOrdersHeaderDatumR{}
}

func (r *dataPlatformOrdersHeaderDatumR) GetBillFromCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.BillFromCountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformOrdersHeaderDatumR) GetBillToCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.BillToCountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformOrdersHeaderDatumR) GetIncoterm() *DataPlatformIncotermsIncotermsDatum {
	if r == nil {
		return nil
	}
	return r.Incoterm
}

func (r *dataPlatformOrdersHeaderDatumR) GetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum() *DataPlatformPaymentMethodPaymentMethodDatum {
	if r == nil {
		return nil
	}
	return r.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum
}

func (r *dataPlatformOrdersHeaderDatumR) GetPaymentTerm() *DataPlatformPaymentTermsPaymentTermsDatum {
	if r == nil {
		return nil
	}
	return r.PaymentTerm
}

func (r *dataPlatformOrdersHeaderDatumR) GetBillFromPartyDataPlatformSCRBillingRelationDatum() *DataPlatformSCRBillingRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRBillingRelationDatum
}

func (r *dataPlatformOrdersHeaderDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformOrdersHeaderDatumR) GetBillFromPartyDataPlatformSCRPaymentRelationDatum() *DataPlatformSCRPaymentRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRPaymentRelationDatum
}

func (r *dataPlatformOrdersHeaderDatumR) GetTransactionCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.TransactionCurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformOrdersHeaderDatumR) GetOrderIDDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersItemData
}

func (r *dataPlatformOrdersHeaderDatumR) GetPrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData() DataPlatformPurchaseRequisitionHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData
}

// dataPlatformOrdersHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformOrdersHeaderDatumL struct{}

var (
	dataPlatformOrdersHeaderDatumAllColumns            = []string{"OrderID", "OrderDate", "OrderType", "SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "ContractType", "OrderValidityStartDate", "OrderValidityEndDate", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "TotalNetAmount", "TotalTaxAmount", "TotalGrossAmount", "HeaderDeliveryStatus", "HeaderBillingStatus", "HeaderDocReferenceStatus", "TransactionCurrency", "PricingDate", "PriceDetnExchangeRate", "RequestedDeliveryDate", "RequestedDeliveryTime", "HeaderCompleteDeliveryIsDefined", "Incoterms", "PaymentTerms", "PaymentMethod", "ReferenceDocument", "ReferenceDocumentItem", "AccountAssignmentGroup", "AccountingExchangeRate", "InvoiceDocumentDate", "IsExportImport", "HeaderText", "HeaderBlockStatus", "HeaderDeliveryBlockStatus", "HeaderBillingBlockStatus", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformOrdersHeaderDatumColumnsWithoutDefault = []string{"OrderID", "OrderDate", "OrderType", "SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "BillToParty", "BillFromParty", "BillToCountry", "BillFromCountry", "Payer", "Payee", "ContractType", "OrderValidityStartDate", "OrderValidityEndDate", "InvoicePeriodStartDate", "InvoicePeriodEndDate", "TotalNetAmount", "TotalTaxAmount", "TotalGrossAmount", "HeaderDeliveryStatus", "HeaderBillingStatus", "HeaderDocReferenceStatus", "TransactionCurrency", "PricingDate", "PriceDetnExchangeRate", "RequestedDeliveryDate", "RequestedDeliveryTime", "HeaderCompleteDeliveryIsDefined", "Incoterms", "PaymentTerms", "PaymentMethod", "ReferenceDocument", "ReferenceDocumentItem", "AccountAssignmentGroup", "AccountingExchangeRate", "InvoiceDocumentDate", "IsExportImport", "HeaderText", "HeaderBlockStatus", "HeaderDeliveryBlockStatus", "HeaderBillingBlockStatus", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformOrdersHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformOrdersHeaderDatumPrimaryKeyColumns     = []string{"OrderID"}
	dataPlatformOrdersHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformOrdersHeaderDatumSlice is an alias for a slice of pointers to DataPlatformOrdersHeaderDatum.
	// This should almost always be used instead of []DataPlatformOrdersHeaderDatum.
	DataPlatformOrdersHeaderDatumSlice []*DataPlatformOrdersHeaderDatum

	dataPlatformOrdersHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformOrdersHeaderDatumType                 = reflect.TypeOf(&DataPlatformOrdersHeaderDatum{})
	dataPlatformOrdersHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformOrdersHeaderDatumType)
	dataPlatformOrdersHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, dataPlatformOrdersHeaderDatumPrimaryKeyColumns)
	dataPlatformOrdersHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformOrdersHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformOrdersHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformOrdersHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformOrdersHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformOrdersHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformOrdersHeaderDatum record from the query.
func (q dataPlatformOrdersHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformOrdersHeaderDatum, error) {
	o := &DataPlatformOrdersHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_orders_header_data")
	}

	return o, nil
}

// All returns all DataPlatformOrdersHeaderDatum records from the query.
func (q dataPlatformOrdersHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformOrdersHeaderDatumSlice, error) {
	var o []*DataPlatformOrdersHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformOrdersHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformOrdersHeaderDatum records in the query.
func (q dataPlatformOrdersHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_orders_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformOrdersHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_orders_header_data exists")
	}

	return count > 0, nil
}

// BillFromCountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) BillFromCountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.BillFromCountry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// BillToCountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) BillToCountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.BillToCountry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// Incoterm pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) Incoterm(mods ...qm.QueryMod) dataPlatformIncotermsIncotermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Incoterms` = ?", o.Incoterms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformIncotermsIncotermsData(queryMods...)
}

// PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(mods ...qm.QueryMod) dataPlatformPaymentMethodPaymentMethodDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentMethod` = ?", o.PaymentMethod),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentMethodPaymentMethodData(queryMods...)
}

// PaymentTerm pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) PaymentTerm(mods ...qm.QueryMod) dataPlatformPaymentTermsPaymentTermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentTerms` = ?", o.PaymentTerms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentTermsPaymentTermsData(queryMods...)
}

// BillFromPartyDataPlatformSCRBillingRelationDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) BillFromPartyDataPlatformSCRBillingRelationDatum(mods ...qm.QueryMod) dataPlatformSCRBillingRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRBillingRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// BillFromPartyDataPlatformSCRPaymentRelationDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) BillFromPartyDataPlatformSCRPaymentRelationDatum(mods ...qm.QueryMod) dataPlatformSCRPaymentRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRPaymentRelationData(queryMods...)
}

// TransactionCurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) TransactionCurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.TransactionCurrency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// OrderIDDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via OrderID column.
func (o *DataPlatformOrdersHeaderDatum) OrderIDDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`OrderID`=?", o.OrderID),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData retrieves all the data_platform_purchase_requisition_header_datum's DataPlatformPurchaseRequisitionHeaderData with an executor via PrecedingOrderID column.
func (o *DataPlatformOrdersHeaderDatum) PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_header_data`.`PrecedingOrderID`=?", o.OrderID),
	)

	return DataPlatformPurchaseRequisitionHeaderData(queryMods...)
}

// LoadBillFromCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadBillFromCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		if !queries.IsNil(object.BillFromCountry) {
			args = append(args, object.BillFromCountry)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromCountry) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromCountry) {
				args = append(args, obj.BillFromCountry)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromCountryDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromCountry, foreign.Country) {
				local.R.BillFromCountryDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillToCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadBillToCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		if !queries.IsNil(object.BillToCountry) {
			args = append(args, object.BillToCountry)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillToCountry) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillToCountry) {
				args = append(args, obj.BillToCountry)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillToCountryDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillToCountry, foreign.Country) {
				local.R.BillToCountryDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadIncoterm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadIncoterm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		if !queries.IsNil(object.Incoterms) {
			args = append(args, object.Incoterms)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Incoterms) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Incoterms) {
				args = append(args, obj.Incoterms)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_incoterms_incoterms_data`),
		qm.WhereIn(`data_platform_incoterms_incoterms_data.Incoterms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformIncotermsIncotermsDatum")
	}

	var resultSlice []*DataPlatformIncotermsIncotermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformIncotermsIncotermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_incoterms_incoterms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_incoterms_incoterms_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Incoterm = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Incoterms, foreign.Incoterms) {
				local.R.Incoterm = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		args = append(args, object.PaymentMethod)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentMethod {
					continue Outer
				}
			}

			args = append(args, obj.PaymentMethod)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_method_payment_method_data`),
		qm.WhereIn(`data_platform_payment_method_payment_method_data.PaymentMethod in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentMethodPaymentMethodDatum")
	}

	var resultSlice []*DataPlatformPaymentMethodPaymentMethodDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentMethodPaymentMethodDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_method_payment_method_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_method_payment_method_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentMethod == foreign.PaymentMethod {
				local.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentTerm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadPaymentTerm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		args = append(args, object.PaymentTerms)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentTerms {
					continue Outer
				}
			}

			args = append(args, obj.PaymentTerms)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_terms_payment_terms_data`),
		qm.WhereIn(`data_platform_payment_terms_payment_terms_data.PaymentTerms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentTermsPaymentTermsDatum")
	}

	var resultSlice []*DataPlatformPaymentTermsPaymentTermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentTermsPaymentTermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_terms_payment_terms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_terms_payment_terms_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentTerm = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentTerms == foreign.PaymentTerms {
				local.R.PaymentTerm = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRBillingRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		if !queries.IsNil(object.BillFromParty) {
			args = append(args, object.BillFromParty)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromParty) {
				args = append(args, obj.BillFromParty)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_billing_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRBillingRelationDatum")
	}

	var resultSlice []*DataPlatformSCRBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRBillingRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_billing_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSCRBillingRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformSCRBillingRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRPaymentRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		if !queries.IsNil(object.BillFromParty) {
			args = append(args, object.BillFromParty)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillFromParty) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillFromParty) {
				args = append(args, obj.BillFromParty)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_payment_relation_data`),
		qm.WhereIn(`data_platform_scr_payment_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRPaymentRelationDatum")
	}

	var resultSlice []*DataPlatformSCRPaymentRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRPaymentRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_payment_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_payment_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillFromParty, foreign.BillFromParty) {
				local.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		args = append(args, object.TransactionCurrency)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.TransactionCurrency {
					continue Outer
				}
			}

			args = append(args, obj.TransactionCurrency)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionCurrency == foreign.Currency {
				local.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformOrdersHeaderDatumL) LoadOrderIDDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		args = append(args, object.OrderID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.OrderIDDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.OrderID == foreign.OrderID {
				local.R.OrderIDDataPlatformOrdersItemData = append(local.R.OrderIDDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformOrdersHeaderDatumL) LoadPrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		args = append(args, object.OrderID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_header_data`),
		qm.WhereIn(`data_platform_purchase_requisition_header_data.PrecedingOrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_header_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_header_data")
	}

	if singular {
		object.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OrderID, foreign.PrecedingOrderID) {
				local.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData = append(local.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBillFromCountryDataPlatformCountryCountryDatum of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.BillFromCountryDataPlatformCountryCountryDatum to related.
func (o *DataPlatformOrdersHeaderDatum) SetBillFromCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromCountry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromCountry, related.Country)
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			BillFromCountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.BillFromCountryDataPlatformCountryCountryDatum = related
	}

	return nil
}

// RemoveBillFromCountryDataPlatformCountryCountryDatum relationship.
// Sets o.R.BillFromCountryDataPlatformCountryCountryDatum to nil.
func (o *DataPlatformOrdersHeaderDatum) RemoveBillFromCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCountryCountryDatum) error {
	var err error

	queries.SetScanner(&o.BillFromCountry, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromCountry")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromCountryDataPlatformCountryCountryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBillToCountryDataPlatformCountryCountryDatum of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.BillToCountryDataPlatformCountryCountryDatum to related.
func (o *DataPlatformOrdersHeaderDatum) SetBillToCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillToCountry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillToCountry, related.Country)
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			BillToCountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.BillToCountryDataPlatformCountryCountryDatum = related
	}

	return nil
}

// RemoveBillToCountryDataPlatformCountryCountryDatum relationship.
// Sets o.R.BillToCountryDataPlatformCountryCountryDatum to nil.
func (o *DataPlatformOrdersHeaderDatum) RemoveBillToCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCountryCountryDatum) error {
	var err error

	queries.SetScanner(&o.BillToCountry, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillToCountry")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillToCountryDataPlatformCountryCountryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetIncoterm of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.Incoterm to related.
func (o *DataPlatformOrdersHeaderDatum) SetIncoterm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformIncotermsIncotermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Incoterms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Incoterms, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Incoterms, related.Incoterms)
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			Incoterm: related,
		}
	} else {
		o.R.Incoterm = related
	}

	return nil
}

// RemoveIncoterm relationship.
// Sets o.R.Incoterm to nil.
func (o *DataPlatformOrdersHeaderDatum) RemoveIncoterm(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformIncotermsIncotermsDatum) error {
	var err error

	queries.SetScanner(&o.Incoterms, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Incoterms")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Incoterm = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to related.
func (o *DataPlatformOrdersHeaderDatum) SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentMethod"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentMethod, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentMethod = related.PaymentMethod
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: related,
		}
	} else {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = related
	}

	return nil
}

// SetPaymentTerm of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.PaymentTerm to related.
func (o *DataPlatformOrdersHeaderDatum) SetPaymentTerm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentTermsPaymentTermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentTerms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentTerms, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentTerms = related.PaymentTerms
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			PaymentTerm: related,
		}
	} else {
		o.R.PaymentTerm = related
	}

	return nil
}

// SetBillFromPartyDataPlatformSCRBillingRelationDatum of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum to related.
func (o *DataPlatformOrdersHeaderDatum) SetBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRBillingRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromParty, related.BillFromParty)
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			BillFromPartyDataPlatformSCRBillingRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRBillingRelationDatum = related
	}

	return nil
}

// RemoveBillFromPartyDataPlatformSCRBillingRelationDatum relationship.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum to nil.
func (o *DataPlatformOrdersHeaderDatum) RemoveBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformSCRBillingRelationDatum) error {
	var err error

	queries.SetScanner(&o.BillFromParty, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformSCRBillingRelationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformOrdersHeaderDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// SetBillFromPartyDataPlatformSCRPaymentRelationDatum of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum to related.
func (o *DataPlatformOrdersHeaderDatum) SetBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRPaymentRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillFromParty, related.BillFromParty)
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			BillFromPartyDataPlatformSCRPaymentRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = related
	}

	return nil
}

// RemoveBillFromPartyDataPlatformSCRPaymentRelationDatum relationship.
// Sets o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum to nil.
func (o *DataPlatformOrdersHeaderDatum) RemoveBillFromPartyDataPlatformSCRPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformSCRPaymentRelationDatum) error {
	var err error

	queries.SetScanner(&o.BillFromParty, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillFromParty")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillFromPartyDataPlatformSCRPaymentRelationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum to related.
func (o *DataPlatformOrdersHeaderDatum) SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"TransactionCurrency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionCurrency = related.Currency
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			TransactionCurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	return nil
}

// AddOrderIDDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_orders_header_datum, optionally inserting them as new records.
// Appends related to o.R.OrderIDDataPlatformOrdersItemData.
func (o *DataPlatformOrdersHeaderDatum) AddOrderIDDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrderID = o.OrderID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OrderID, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrderID = o.OrderID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			OrderIDDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersItemData = append(o.R.OrderIDDataPlatformOrdersItemData, related...)
	}

	return nil
}

// AddPrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData adds the given related objects to the existing relationships
// of the data_platform_orders_header_datum, optionally inserting them as new records.
// Appends related to o.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData.
func (o *DataPlatformOrdersHeaderDatum) AddPrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PrecedingOrderID, o.OrderID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PrecedingOrderID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OrderID, rel.PurchaseRequisition}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PrecedingOrderID, o.OrderID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData: related,
		}
	} else {
		o.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData = append(o.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData, related...)
	}

	return nil
}

// SetPrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData removes all previously related items of the
// data_platform_orders_header_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PrecedingOrderIDDataPlatformOrdersHeaderDatum's PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData accordingly.
// Replaces o.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData with related.
func (o *DataPlatformOrdersHeaderDatum) SetPrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionHeaderDatum) error {
	query := "update `data_platform_purchase_requisition_header_data` set `PrecedingOrderID` = null where `PrecedingOrderID` = ?"
	values := []interface{}{o.OrderID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData = nil
	}

	return o.AddPrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData(ctx, exec, insert, related...)
}

// RemovePrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData relationships from objects passed in.
// Removes related items from R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformOrdersHeaderDatum) RemovePrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPurchaseRequisitionHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PrecedingOrderID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("PrecedingOrderID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData[i] = o.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData[ln-1]
			}
			o.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData = o.R.PrecedingOrderIDDataPlatformPurchaseRequisitionHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformOrdersHeaderData retrieves all the records using an executor.
func DataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_orders_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_orders_header_data`.*"})
	}

	return dataPlatformOrdersHeaderDatumQuery{q}
}

// FindDataPlatformOrdersHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformOrdersHeaderDatum(ctx context.Context, exec boil.ContextExecutor, orderID int, selectCols ...string) (*DataPlatformOrdersHeaderDatum, error) {
	dataPlatformOrdersHeaderDatumObj := &DataPlatformOrdersHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_orders_header_data` where `OrderID`=?", sel,
	)

	q := queries.Raw(query, orderID)

	err := q.Bind(ctx, exec, dataPlatformOrdersHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_orders_header_data")
	}

	return dataPlatformOrdersHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformOrdersHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformOrdersHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersHeaderDatumInsertCache[key]
	dataPlatformOrdersHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformOrdersHeaderDatumAllColumns,
			dataPlatformOrdersHeaderDatumColumnsWithDefault,
			dataPlatformOrdersHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_orders_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_orders_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_orders_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_orders_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrderID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersHeaderDatumInsertCacheMut.Lock()
		dataPlatformOrdersHeaderDatumInsertCache[key] = cache
		dataPlatformOrdersHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformOrdersHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformOrdersHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformOrdersHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformOrdersHeaderDatumUpdateCache[key]
	dataPlatformOrdersHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformOrdersHeaderDatumAllColumns,
			dataPlatformOrdersHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_orders_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, append(wl, dataPlatformOrdersHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_orders_header_data row")
	}

	if !cached {
		dataPlatformOrdersHeaderDatumUpdateCacheMut.Lock()
		dataPlatformOrdersHeaderDatumUpdateCache[key] = cache
		dataPlatformOrdersHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformOrdersHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_orders_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformOrdersHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformOrdersHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformOrdersHeaderDatumUniqueColumns = []string{
	"OrderID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformOrdersHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformOrdersHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformOrdersHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersHeaderDatumUpsertCache[key]
	dataPlatformOrdersHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformOrdersHeaderDatumAllColumns,
			dataPlatformOrdersHeaderDatumColumnsWithDefault,
			dataPlatformOrdersHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformOrdersHeaderDatumAllColumns,
			dataPlatformOrdersHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_orders_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_orders_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_orders_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_orders_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_orders_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersHeaderDatumUpsertCacheMut.Lock()
		dataPlatformOrdersHeaderDatumUpsertCache[key] = cache
		dataPlatformOrdersHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformOrdersHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformOrdersHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformOrdersHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformOrdersHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_orders_header_data` WHERE `OrderID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_orders_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformOrdersHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformOrdersHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_orders_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformOrdersHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_orders_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformOrdersHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformOrdersHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformOrdersHeaderDatum(ctx, exec, o.OrderID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformOrdersHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformOrdersHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_orders_header_data`.* FROM `data_platform_orders_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformOrdersHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformOrdersHeaderDatumExists checks if the DataPlatformOrdersHeaderDatum row exists.
func DataPlatformOrdersHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, orderID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_orders_header_data` where `OrderID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID)
	}
	row := exec.QueryRowContext(ctx, sql, orderID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_orders_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformOrdersHeaderDatum row exists.
func (o *DataPlatformOrdersHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformOrdersHeaderDatumExists(ctx, exec, o.OrderID)
}
