// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformOrdersHeaderDatum is an object representing the database table.
type DataPlatformOrdersHeaderDatum struct {
	OrderID                         int          `boil:"OrderID" json:"OrderID" toml:"OrderID" yaml:"OrderID"`
	OrderDate                       time.Time    `boil:"OrderDate" json:"OrderDate" toml:"OrderDate" yaml:"OrderDate"`
	OrderType                       string       `boil:"OrderType" json:"OrderType" toml:"OrderType" yaml:"OrderType"`
	Buyer                           int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                          int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	CreationDate                    time.Time    `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                  time.Time    `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	ContractType                    null.String  `boil:"ContractType" json:"ContractType,omitempty" toml:"ContractType" yaml:"ContractType,omitempty"`
	VaridityStartDate               null.Time    `boil:"VaridityStartDate" json:"VaridityStartDate,omitempty" toml:"VaridityStartDate" yaml:"VaridityStartDate,omitempty"`
	VaridityEndDate                 null.Time    `boil:"VaridityEndDate" json:"VaridityEndDate,omitempty" toml:"VaridityEndDate" yaml:"VaridityEndDate,omitempty"`
	InvoiceScheduleStartDate        null.Time    `boil:"InvoiceScheduleStartDate" json:"InvoiceScheduleStartDate,omitempty" toml:"InvoiceScheduleStartDate" yaml:"InvoiceScheduleStartDate,omitempty"`
	InvoiceScheduleEndDate          null.Time    `boil:"InvoiceScheduleEndDate" json:"InvoiceScheduleEndDate,omitempty" toml:"InvoiceScheduleEndDate" yaml:"InvoiceScheduleEndDate,omitempty"`
	TotalNetAmount                  float32      `boil:"TotalNetAmount" json:"TotalNetAmount" toml:"TotalNetAmount" yaml:"TotalNetAmount"`
	TotalTaxAmount                  float32      `boil:"TotalTaxAmount" json:"TotalTaxAmount" toml:"TotalTaxAmount" yaml:"TotalTaxAmount"`
	TotalGrossAmount                float32      `boil:"TotalGrossAmount" json:"TotalGrossAmount" toml:"TotalGrossAmount" yaml:"TotalGrossAmount"`
	OverallDeliveryStatus           string       `boil:"OverallDeliveryStatus" json:"OverallDeliveryStatus" toml:"OverallDeliveryStatus" yaml:"OverallDeliveryStatus"`
	TotalBlockStatus                null.Bool    `boil:"TotalBlockStatus" json:"TotalBlockStatus,omitempty" toml:"TotalBlockStatus" yaml:"TotalBlockStatus,omitempty"`
	OverallOrdReltdBillgStatus      string       `boil:"OverallOrdReltdBillgStatus" json:"OverallOrdReltdBillgStatus" toml:"OverallOrdReltdBillgStatus" yaml:"OverallOrdReltdBillgStatus"`
	OverallDocReferenceStatus       string       `boil:"OverallDocReferenceStatus" json:"OverallDocReferenceStatus" toml:"OverallDocReferenceStatus" yaml:"OverallDocReferenceStatus"`
	TransactionCurrency             string       `boil:"TransactionCurrency" json:"TransactionCurrency" toml:"TransactionCurrency" yaml:"TransactionCurrency"`
	PricingDate                     time.Time    `boil:"PricingDate" json:"PricingDate" toml:"PricingDate" yaml:"PricingDate"`
	PriceDetnExchangeRate           null.Float32 `boil:"PriceDetnExchangeRate" json:"PriceDetnExchangeRate,omitempty" toml:"PriceDetnExchangeRate" yaml:"PriceDetnExchangeRate,omitempty"`
	RequestedDeliveryDate           time.Time    `boil:"RequestedDeliveryDate" json:"RequestedDeliveryDate" toml:"RequestedDeliveryDate" yaml:"RequestedDeliveryDate"`
	HeaderCompleteDeliveryIsDefined null.Bool    `boil:"HeaderCompleteDeliveryIsDefined" json:"HeaderCompleteDeliveryIsDefined,omitempty" toml:"HeaderCompleteDeliveryIsDefined" yaml:"HeaderCompleteDeliveryIsDefined,omitempty"`
	HeaderBillingBlockReason        null.Bool    `boil:"HeaderBillingBlockReason" json:"HeaderBillingBlockReason,omitempty" toml:"HeaderBillingBlockReason" yaml:"HeaderBillingBlockReason,omitempty"`
	DeliveryBlockReason             null.Bool    `boil:"DeliveryBlockReason" json:"DeliveryBlockReason,omitempty" toml:"DeliveryBlockReason" yaml:"DeliveryBlockReason,omitempty"`
	Incoterms                       null.String  `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	PaymentTerms                    string       `boil:"PaymentTerms" json:"PaymentTerms" toml:"PaymentTerms" yaml:"PaymentTerms"`
	PaymentMethod                   string       `boil:"PaymentMethod" json:"PaymentMethod" toml:"PaymentMethod" yaml:"PaymentMethod"`
	ReferenceDocument               null.Int     `boil:"ReferenceDocument" json:"ReferenceDocument,omitempty" toml:"ReferenceDocument" yaml:"ReferenceDocument,omitempty"`
	ReferenceDocumentItem           null.Int     `boil:"ReferenceDocumentItem" json:"ReferenceDocumentItem,omitempty" toml:"ReferenceDocumentItem" yaml:"ReferenceDocumentItem,omitempty"`
	BPAccountAssignmentGroup        string       `boil:"BPAccountAssignmentGroup" json:"BPAccountAssignmentGroup" toml:"BPAccountAssignmentGroup" yaml:"BPAccountAssignmentGroup"`
	AccountingExchangeRate          null.Float32 `boil:"AccountingExchangeRate" json:"AccountingExchangeRate,omitempty" toml:"AccountingExchangeRate" yaml:"AccountingExchangeRate,omitempty"`
	BillingDocumentDate             time.Time    `boil:"BillingDocumentDate" json:"BillingDocumentDate" toml:"BillingDocumentDate" yaml:"BillingDocumentDate"`
	IsExportImportDelivery          null.Bool    `boil:"IsExportImportDelivery" json:"IsExportImportDelivery,omitempty" toml:"IsExportImportDelivery" yaml:"IsExportImportDelivery,omitempty"`
	HeaderText                      null.String  `boil:"HeaderText" json:"HeaderText,omitempty" toml:"HeaderText" yaml:"HeaderText,omitempty"`

	R *dataPlatformOrdersHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformOrdersHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformOrdersHeaderDatumColumns = struct {
	OrderID                         string
	OrderDate                       string
	OrderType                       string
	Buyer                           string
	Seller                          string
	CreationDate                    string
	LastChangeDate                  string
	ContractType                    string
	VaridityStartDate               string
	VaridityEndDate                 string
	InvoiceScheduleStartDate        string
	InvoiceScheduleEndDate          string
	TotalNetAmount                  string
	TotalTaxAmount                  string
	TotalGrossAmount                string
	OverallDeliveryStatus           string
	TotalBlockStatus                string
	OverallOrdReltdBillgStatus      string
	OverallDocReferenceStatus       string
	TransactionCurrency             string
	PricingDate                     string
	PriceDetnExchangeRate           string
	RequestedDeliveryDate           string
	HeaderCompleteDeliveryIsDefined string
	HeaderBillingBlockReason        string
	DeliveryBlockReason             string
	Incoterms                       string
	PaymentTerms                    string
	PaymentMethod                   string
	ReferenceDocument               string
	ReferenceDocumentItem           string
	BPAccountAssignmentGroup        string
	AccountingExchangeRate          string
	BillingDocumentDate             string
	IsExportImportDelivery          string
	HeaderText                      string
}{
	OrderID:                         "OrderID",
	OrderDate:                       "OrderDate",
	OrderType:                       "OrderType",
	Buyer:                           "Buyer",
	Seller:                          "Seller",
	CreationDate:                    "CreationDate",
	LastChangeDate:                  "LastChangeDate",
	ContractType:                    "ContractType",
	VaridityStartDate:               "VaridityStartDate",
	VaridityEndDate:                 "VaridityEndDate",
	InvoiceScheduleStartDate:        "InvoiceScheduleStartDate",
	InvoiceScheduleEndDate:          "InvoiceScheduleEndDate",
	TotalNetAmount:                  "TotalNetAmount",
	TotalTaxAmount:                  "TotalTaxAmount",
	TotalGrossAmount:                "TotalGrossAmount",
	OverallDeliveryStatus:           "OverallDeliveryStatus",
	TotalBlockStatus:                "TotalBlockStatus",
	OverallOrdReltdBillgStatus:      "OverallOrdReltdBillgStatus",
	OverallDocReferenceStatus:       "OverallDocReferenceStatus",
	TransactionCurrency:             "TransactionCurrency",
	PricingDate:                     "PricingDate",
	PriceDetnExchangeRate:           "PriceDetnExchangeRate",
	RequestedDeliveryDate:           "RequestedDeliveryDate",
	HeaderCompleteDeliveryIsDefined: "HeaderCompleteDeliveryIsDefined",
	HeaderBillingBlockReason:        "HeaderBillingBlockReason",
	DeliveryBlockReason:             "DeliveryBlockReason",
	Incoterms:                       "Incoterms",
	PaymentTerms:                    "PaymentTerms",
	PaymentMethod:                   "PaymentMethod",
	ReferenceDocument:               "ReferenceDocument",
	ReferenceDocumentItem:           "ReferenceDocumentItem",
	BPAccountAssignmentGroup:        "BPAccountAssignmentGroup",
	AccountingExchangeRate:          "AccountingExchangeRate",
	BillingDocumentDate:             "BillingDocumentDate",
	IsExportImportDelivery:          "IsExportImportDelivery",
	HeaderText:                      "HeaderText",
}

var DataPlatformOrdersHeaderDatumTableColumns = struct {
	OrderID                         string
	OrderDate                       string
	OrderType                       string
	Buyer                           string
	Seller                          string
	CreationDate                    string
	LastChangeDate                  string
	ContractType                    string
	VaridityStartDate               string
	VaridityEndDate                 string
	InvoiceScheduleStartDate        string
	InvoiceScheduleEndDate          string
	TotalNetAmount                  string
	TotalTaxAmount                  string
	TotalGrossAmount                string
	OverallDeliveryStatus           string
	TotalBlockStatus                string
	OverallOrdReltdBillgStatus      string
	OverallDocReferenceStatus       string
	TransactionCurrency             string
	PricingDate                     string
	PriceDetnExchangeRate           string
	RequestedDeliveryDate           string
	HeaderCompleteDeliveryIsDefined string
	HeaderBillingBlockReason        string
	DeliveryBlockReason             string
	Incoterms                       string
	PaymentTerms                    string
	PaymentMethod                   string
	ReferenceDocument               string
	ReferenceDocumentItem           string
	BPAccountAssignmentGroup        string
	AccountingExchangeRate          string
	BillingDocumentDate             string
	IsExportImportDelivery          string
	HeaderText                      string
}{
	OrderID:                         "data_platform_orders_header_data.OrderID",
	OrderDate:                       "data_platform_orders_header_data.OrderDate",
	OrderType:                       "data_platform_orders_header_data.OrderType",
	Buyer:                           "data_platform_orders_header_data.Buyer",
	Seller:                          "data_platform_orders_header_data.Seller",
	CreationDate:                    "data_platform_orders_header_data.CreationDate",
	LastChangeDate:                  "data_platform_orders_header_data.LastChangeDate",
	ContractType:                    "data_platform_orders_header_data.ContractType",
	VaridityStartDate:               "data_platform_orders_header_data.VaridityStartDate",
	VaridityEndDate:                 "data_platform_orders_header_data.VaridityEndDate",
	InvoiceScheduleStartDate:        "data_platform_orders_header_data.InvoiceScheduleStartDate",
	InvoiceScheduleEndDate:          "data_platform_orders_header_data.InvoiceScheduleEndDate",
	TotalNetAmount:                  "data_platform_orders_header_data.TotalNetAmount",
	TotalTaxAmount:                  "data_platform_orders_header_data.TotalTaxAmount",
	TotalGrossAmount:                "data_platform_orders_header_data.TotalGrossAmount",
	OverallDeliveryStatus:           "data_platform_orders_header_data.OverallDeliveryStatus",
	TotalBlockStatus:                "data_platform_orders_header_data.TotalBlockStatus",
	OverallOrdReltdBillgStatus:      "data_platform_orders_header_data.OverallOrdReltdBillgStatus",
	OverallDocReferenceStatus:       "data_platform_orders_header_data.OverallDocReferenceStatus",
	TransactionCurrency:             "data_platform_orders_header_data.TransactionCurrency",
	PricingDate:                     "data_platform_orders_header_data.PricingDate",
	PriceDetnExchangeRate:           "data_platform_orders_header_data.PriceDetnExchangeRate",
	RequestedDeliveryDate:           "data_platform_orders_header_data.RequestedDeliveryDate",
	HeaderCompleteDeliveryIsDefined: "data_platform_orders_header_data.HeaderCompleteDeliveryIsDefined",
	HeaderBillingBlockReason:        "data_platform_orders_header_data.HeaderBillingBlockReason",
	DeliveryBlockReason:             "data_platform_orders_header_data.DeliveryBlockReason",
	Incoterms:                       "data_platform_orders_header_data.Incoterms",
	PaymentTerms:                    "data_platform_orders_header_data.PaymentTerms",
	PaymentMethod:                   "data_platform_orders_header_data.PaymentMethod",
	ReferenceDocument:               "data_platform_orders_header_data.ReferenceDocument",
	ReferenceDocumentItem:           "data_platform_orders_header_data.ReferenceDocumentItem",
	BPAccountAssignmentGroup:        "data_platform_orders_header_data.BPAccountAssignmentGroup",
	AccountingExchangeRate:          "data_platform_orders_header_data.AccountingExchangeRate",
	BillingDocumentDate:             "data_platform_orders_header_data.BillingDocumentDate",
	IsExportImportDelivery:          "data_platform_orders_header_data.IsExportImportDelivery",
	HeaderText:                      "data_platform_orders_header_data.HeaderText",
}

// Generated where

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DataPlatformOrdersHeaderDatumWhere = struct {
	OrderID                         whereHelperint
	OrderDate                       whereHelpertime_Time
	OrderType                       whereHelperstring
	Buyer                           whereHelperint
	Seller                          whereHelperint
	CreationDate                    whereHelpertime_Time
	LastChangeDate                  whereHelpertime_Time
	ContractType                    whereHelpernull_String
	VaridityStartDate               whereHelpernull_Time
	VaridityEndDate                 whereHelpernull_Time
	InvoiceScheduleStartDate        whereHelpernull_Time
	InvoiceScheduleEndDate          whereHelpernull_Time
	TotalNetAmount                  whereHelperfloat32
	TotalTaxAmount                  whereHelperfloat32
	TotalGrossAmount                whereHelperfloat32
	OverallDeliveryStatus           whereHelperstring
	TotalBlockStatus                whereHelpernull_Bool
	OverallOrdReltdBillgStatus      whereHelperstring
	OverallDocReferenceStatus       whereHelperstring
	TransactionCurrency             whereHelperstring
	PricingDate                     whereHelpertime_Time
	PriceDetnExchangeRate           whereHelpernull_Float32
	RequestedDeliveryDate           whereHelpertime_Time
	HeaderCompleteDeliveryIsDefined whereHelpernull_Bool
	HeaderBillingBlockReason        whereHelpernull_Bool
	DeliveryBlockReason             whereHelpernull_Bool
	Incoterms                       whereHelpernull_String
	PaymentTerms                    whereHelperstring
	PaymentMethod                   whereHelperstring
	ReferenceDocument               whereHelpernull_Int
	ReferenceDocumentItem           whereHelpernull_Int
	BPAccountAssignmentGroup        whereHelperstring
	AccountingExchangeRate          whereHelpernull_Float32
	BillingDocumentDate             whereHelpertime_Time
	IsExportImportDelivery          whereHelpernull_Bool
	HeaderText                      whereHelpernull_String
}{
	OrderID:                         whereHelperint{field: "`data_platform_orders_header_data`.`OrderID`"},
	OrderDate:                       whereHelpertime_Time{field: "`data_platform_orders_header_data`.`OrderDate`"},
	OrderType:                       whereHelperstring{field: "`data_platform_orders_header_data`.`OrderType`"},
	Buyer:                           whereHelperint{field: "`data_platform_orders_header_data`.`Buyer`"},
	Seller:                          whereHelperint{field: "`data_platform_orders_header_data`.`Seller`"},
	CreationDate:                    whereHelpertime_Time{field: "`data_platform_orders_header_data`.`CreationDate`"},
	LastChangeDate:                  whereHelpertime_Time{field: "`data_platform_orders_header_data`.`LastChangeDate`"},
	ContractType:                    whereHelpernull_String{field: "`data_platform_orders_header_data`.`ContractType`"},
	VaridityStartDate:               whereHelpernull_Time{field: "`data_platform_orders_header_data`.`VaridityStartDate`"},
	VaridityEndDate:                 whereHelpernull_Time{field: "`data_platform_orders_header_data`.`VaridityEndDate`"},
	InvoiceScheduleStartDate:        whereHelpernull_Time{field: "`data_platform_orders_header_data`.`InvoiceScheduleStartDate`"},
	InvoiceScheduleEndDate:          whereHelpernull_Time{field: "`data_platform_orders_header_data`.`InvoiceScheduleEndDate`"},
	TotalNetAmount:                  whereHelperfloat32{field: "`data_platform_orders_header_data`.`TotalNetAmount`"},
	TotalTaxAmount:                  whereHelperfloat32{field: "`data_platform_orders_header_data`.`TotalTaxAmount`"},
	TotalGrossAmount:                whereHelperfloat32{field: "`data_platform_orders_header_data`.`TotalGrossAmount`"},
	OverallDeliveryStatus:           whereHelperstring{field: "`data_platform_orders_header_data`.`OverallDeliveryStatus`"},
	TotalBlockStatus:                whereHelpernull_Bool{field: "`data_platform_orders_header_data`.`TotalBlockStatus`"},
	OverallOrdReltdBillgStatus:      whereHelperstring{field: "`data_platform_orders_header_data`.`OverallOrdReltdBillgStatus`"},
	OverallDocReferenceStatus:       whereHelperstring{field: "`data_platform_orders_header_data`.`OverallDocReferenceStatus`"},
	TransactionCurrency:             whereHelperstring{field: "`data_platform_orders_header_data`.`TransactionCurrency`"},
	PricingDate:                     whereHelpertime_Time{field: "`data_platform_orders_header_data`.`PricingDate`"},
	PriceDetnExchangeRate:           whereHelpernull_Float32{field: "`data_platform_orders_header_data`.`PriceDetnExchangeRate`"},
	RequestedDeliveryDate:           whereHelpertime_Time{field: "`data_platform_orders_header_data`.`RequestedDeliveryDate`"},
	HeaderCompleteDeliveryIsDefined: whereHelpernull_Bool{field: "`data_platform_orders_header_data`.`HeaderCompleteDeliveryIsDefined`"},
	HeaderBillingBlockReason:        whereHelpernull_Bool{field: "`data_platform_orders_header_data`.`HeaderBillingBlockReason`"},
	DeliveryBlockReason:             whereHelpernull_Bool{field: "`data_platform_orders_header_data`.`DeliveryBlockReason`"},
	Incoterms:                       whereHelpernull_String{field: "`data_platform_orders_header_data`.`Incoterms`"},
	PaymentTerms:                    whereHelperstring{field: "`data_platform_orders_header_data`.`PaymentTerms`"},
	PaymentMethod:                   whereHelperstring{field: "`data_platform_orders_header_data`.`PaymentMethod`"},
	ReferenceDocument:               whereHelpernull_Int{field: "`data_platform_orders_header_data`.`ReferenceDocument`"},
	ReferenceDocumentItem:           whereHelpernull_Int{field: "`data_platform_orders_header_data`.`ReferenceDocumentItem`"},
	BPAccountAssignmentGroup:        whereHelperstring{field: "`data_platform_orders_header_data`.`BPAccountAssignmentGroup`"},
	AccountingExchangeRate:          whereHelpernull_Float32{field: "`data_platform_orders_header_data`.`AccountingExchangeRate`"},
	BillingDocumentDate:             whereHelpertime_Time{field: "`data_platform_orders_header_data`.`BillingDocumentDate`"},
	IsExportImportDelivery:          whereHelpernull_Bool{field: "`data_platform_orders_header_data`.`IsExportImportDelivery`"},
	HeaderText:                      whereHelpernull_String{field: "`data_platform_orders_header_data`.`HeaderText`"},
}

// DataPlatformOrdersHeaderDatumRels is where relationship names are stored.
var DataPlatformOrdersHeaderDatumRels = struct {
	BuyerDataPlatformBusinessPartnerGeneralDatum             string
	Incoterm                                                 string
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum string
	PaymentTerm                                              string
	SellerDataPlatformBusinessPartnerGeneralDatum            string
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum     string
	OrderIDDataPlatformOrdersHeaderPartnerData               string
}{
	BuyerDataPlatformBusinessPartnerGeneralDatum: "BuyerDataPlatformBusinessPartnerGeneralDatum",
	Incoterm: "Incoterm",
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: "PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum",
	PaymentTerm: "PaymentTerm",
	SellerDataPlatformBusinessPartnerGeneralDatum:        "SellerDataPlatformBusinessPartnerGeneralDatum",
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum: "TransactionCurrencyDataPlatformCurrencyCurrencyDatum",
	OrderIDDataPlatformOrdersHeaderPartnerData:           "OrderIDDataPlatformOrdersHeaderPartnerData",
}

// dataPlatformOrdersHeaderDatumR is where relationships are stored.
type dataPlatformOrdersHeaderDatumR struct {
	BuyerDataPlatformBusinessPartnerGeneralDatum             *DataPlatformBusinessPartnerGeneralDatum     `boil:"BuyerDataPlatformBusinessPartnerGeneralDatum" json:"BuyerDataPlatformBusinessPartnerGeneralDatum" toml:"BuyerDataPlatformBusinessPartnerGeneralDatum" yaml:"BuyerDataPlatformBusinessPartnerGeneralDatum"`
	Incoterm                                                 *DataPlatformIncotermsIncotermsDatum         `boil:"Incoterm" json:"Incoterm" toml:"Incoterm" yaml:"Incoterm"`
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum *DataPlatformPaymentMethodPaymentMethodDatum `boil:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" json:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" toml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" yaml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum"`
	PaymentTerm                                              *DataPlatformPaymentTermsPaymentTermsDatum   `boil:"PaymentTerm" json:"PaymentTerm" toml:"PaymentTerm" yaml:"PaymentTerm"`
	SellerDataPlatformBusinessPartnerGeneralDatum            *DataPlatformBusinessPartnerGeneralDatum     `boil:"SellerDataPlatformBusinessPartnerGeneralDatum" json:"SellerDataPlatformBusinessPartnerGeneralDatum" toml:"SellerDataPlatformBusinessPartnerGeneralDatum" yaml:"SellerDataPlatformBusinessPartnerGeneralDatum"`
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum     *DataPlatformCurrencyCurrencyDatum           `boil:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" json:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" toml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" yaml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum"`
	OrderIDDataPlatformOrdersHeaderPartnerData               DataPlatformOrdersHeaderPartnerDatumSlice    `boil:"OrderIDDataPlatformOrdersHeaderPartnerData" json:"OrderIDDataPlatformOrdersHeaderPartnerData" toml:"OrderIDDataPlatformOrdersHeaderPartnerData" yaml:"OrderIDDataPlatformOrdersHeaderPartnerData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformOrdersHeaderDatumR) NewStruct() *dataPlatformOrdersHeaderDatumR {
	return &dataPlatformOrdersHeaderDatumR{}
}

func (r *dataPlatformOrdersHeaderDatumR) GetBuyerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformOrdersHeaderDatumR) GetIncoterm() *DataPlatformIncotermsIncotermsDatum {
	if r == nil {
		return nil
	}
	return r.Incoterm
}

func (r *dataPlatformOrdersHeaderDatumR) GetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum() *DataPlatformPaymentMethodPaymentMethodDatum {
	if r == nil {
		return nil
	}
	return r.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum
}

func (r *dataPlatformOrdersHeaderDatumR) GetPaymentTerm() *DataPlatformPaymentTermsPaymentTermsDatum {
	if r == nil {
		return nil
	}
	return r.PaymentTerm
}

func (r *dataPlatformOrdersHeaderDatumR) GetSellerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.SellerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformOrdersHeaderDatumR) GetTransactionCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.TransactionCurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformOrdersHeaderDatumR) GetOrderIDDataPlatformOrdersHeaderPartnerData() DataPlatformOrdersHeaderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersHeaderPartnerData
}

// dataPlatformOrdersHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformOrdersHeaderDatumL struct{}

var (
	dataPlatformOrdersHeaderDatumAllColumns            = []string{"OrderID", "OrderDate", "OrderType", "Buyer", "Seller", "CreationDate", "LastChangeDate", "ContractType", "VaridityStartDate", "VaridityEndDate", "InvoiceScheduleStartDate", "InvoiceScheduleEndDate", "TotalNetAmount", "TotalTaxAmount", "TotalGrossAmount", "OverallDeliveryStatus", "TotalBlockStatus", "OverallOrdReltdBillgStatus", "OverallDocReferenceStatus", "TransactionCurrency", "PricingDate", "PriceDetnExchangeRate", "RequestedDeliveryDate", "HeaderCompleteDeliveryIsDefined", "HeaderBillingBlockReason", "DeliveryBlockReason", "Incoterms", "PaymentTerms", "PaymentMethod", "ReferenceDocument", "ReferenceDocumentItem", "BPAccountAssignmentGroup", "AccountingExchangeRate", "BillingDocumentDate", "IsExportImportDelivery", "HeaderText"}
	dataPlatformOrdersHeaderDatumColumnsWithoutDefault = []string{"OrderID", "OrderDate", "OrderType", "Buyer", "Seller", "CreationDate", "LastChangeDate", "ContractType", "VaridityStartDate", "VaridityEndDate", "InvoiceScheduleStartDate", "InvoiceScheduleEndDate", "TotalNetAmount", "TotalTaxAmount", "TotalGrossAmount", "OverallDeliveryStatus", "TotalBlockStatus", "OverallOrdReltdBillgStatus", "OverallDocReferenceStatus", "TransactionCurrency", "PricingDate", "PriceDetnExchangeRate", "RequestedDeliveryDate", "HeaderCompleteDeliveryIsDefined", "HeaderBillingBlockReason", "DeliveryBlockReason", "Incoterms", "PaymentTerms", "PaymentMethod", "ReferenceDocument", "ReferenceDocumentItem", "BPAccountAssignmentGroup", "AccountingExchangeRate", "BillingDocumentDate", "IsExportImportDelivery", "HeaderText"}
	dataPlatformOrdersHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformOrdersHeaderDatumPrimaryKeyColumns     = []string{"OrderID"}
	dataPlatformOrdersHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformOrdersHeaderDatumSlice is an alias for a slice of pointers to DataPlatformOrdersHeaderDatum.
	// This should almost always be used instead of []DataPlatformOrdersHeaderDatum.
	DataPlatformOrdersHeaderDatumSlice []*DataPlatformOrdersHeaderDatum
	// DataPlatformOrdersHeaderDatumHook is the signature for custom DataPlatformOrdersHeaderDatum hook methods
	DataPlatformOrdersHeaderDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformOrdersHeaderDatum) error

	dataPlatformOrdersHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformOrdersHeaderDatumType                 = reflect.TypeOf(&DataPlatformOrdersHeaderDatum{})
	dataPlatformOrdersHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformOrdersHeaderDatumType)
	dataPlatformOrdersHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, dataPlatformOrdersHeaderDatumPrimaryKeyColumns)
	dataPlatformOrdersHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformOrdersHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformOrdersHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformOrdersHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformOrdersHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformOrdersHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformOrdersHeaderDatumAfterSelectHooks []DataPlatformOrdersHeaderDatumHook

var dataPlatformOrdersHeaderDatumBeforeInsertHooks []DataPlatformOrdersHeaderDatumHook
var dataPlatformOrdersHeaderDatumAfterInsertHooks []DataPlatformOrdersHeaderDatumHook

var dataPlatformOrdersHeaderDatumBeforeUpdateHooks []DataPlatformOrdersHeaderDatumHook
var dataPlatformOrdersHeaderDatumAfterUpdateHooks []DataPlatformOrdersHeaderDatumHook

var dataPlatformOrdersHeaderDatumBeforeDeleteHooks []DataPlatformOrdersHeaderDatumHook
var dataPlatformOrdersHeaderDatumAfterDeleteHooks []DataPlatformOrdersHeaderDatumHook

var dataPlatformOrdersHeaderDatumBeforeUpsertHooks []DataPlatformOrdersHeaderDatumHook
var dataPlatformOrdersHeaderDatumAfterUpsertHooks []DataPlatformOrdersHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformOrdersHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformOrdersHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformOrdersHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformOrdersHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformOrdersHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformOrdersHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformOrdersHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformOrdersHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformOrdersHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformOrdersHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformOrdersHeaderDatumHook registers your hook function for all future operations.
func AddDataPlatformOrdersHeaderDatumHook(hookPoint boil.HookPoint, dataPlatformOrdersHeaderDatumHook DataPlatformOrdersHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformOrdersHeaderDatumAfterSelectHooks = append(dataPlatformOrdersHeaderDatumAfterSelectHooks, dataPlatformOrdersHeaderDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformOrdersHeaderDatumBeforeInsertHooks = append(dataPlatformOrdersHeaderDatumBeforeInsertHooks, dataPlatformOrdersHeaderDatumHook)
	case boil.AfterInsertHook:
		dataPlatformOrdersHeaderDatumAfterInsertHooks = append(dataPlatformOrdersHeaderDatumAfterInsertHooks, dataPlatformOrdersHeaderDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformOrdersHeaderDatumBeforeUpdateHooks = append(dataPlatformOrdersHeaderDatumBeforeUpdateHooks, dataPlatformOrdersHeaderDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformOrdersHeaderDatumAfterUpdateHooks = append(dataPlatformOrdersHeaderDatumAfterUpdateHooks, dataPlatformOrdersHeaderDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformOrdersHeaderDatumBeforeDeleteHooks = append(dataPlatformOrdersHeaderDatumBeforeDeleteHooks, dataPlatformOrdersHeaderDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformOrdersHeaderDatumAfterDeleteHooks = append(dataPlatformOrdersHeaderDatumAfterDeleteHooks, dataPlatformOrdersHeaderDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformOrdersHeaderDatumBeforeUpsertHooks = append(dataPlatformOrdersHeaderDatumBeforeUpsertHooks, dataPlatformOrdersHeaderDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformOrdersHeaderDatumAfterUpsertHooks = append(dataPlatformOrdersHeaderDatumAfterUpsertHooks, dataPlatformOrdersHeaderDatumHook)
	}
}

// One returns a single dataPlatformOrdersHeaderDatum record from the query.
func (q dataPlatformOrdersHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformOrdersHeaderDatum, error) {
	o := &DataPlatformOrdersHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_orders_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformOrdersHeaderDatum records from the query.
func (q dataPlatformOrdersHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformOrdersHeaderDatumSlice, error) {
	var o []*DataPlatformOrdersHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformOrdersHeaderDatum slice")
	}

	if len(dataPlatformOrdersHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformOrdersHeaderDatum records in the query.
func (q dataPlatformOrdersHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_orders_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformOrdersHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_orders_header_data exists")
	}

	return count > 0, nil
}

// BuyerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) BuyerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// Incoterm pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) Incoterm(mods ...qm.QueryMod) dataPlatformIncotermsIncotermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Incoterms` = ?", o.Incoterms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformIncotermsIncotermsData(queryMods...)
}

// PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(mods ...qm.QueryMod) dataPlatformPaymentMethodPaymentMethodDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentMethod` = ?", o.PaymentMethod),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentMethodPaymentMethodData(queryMods...)
}

// PaymentTerm pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) PaymentTerm(mods ...qm.QueryMod) dataPlatformPaymentTermsPaymentTermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentTerms` = ?", o.PaymentTerms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentTermsPaymentTermsData(queryMods...)
}

// SellerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) SellerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Seller),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// TransactionCurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformOrdersHeaderDatum) TransactionCurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.TransactionCurrency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// OrderIDDataPlatformOrdersHeaderPartnerData retrieves all the data_platform_orders_header_partner_datum's DataPlatformOrdersHeaderPartnerData with an executor via OrderID column.
func (o *DataPlatformOrdersHeaderDatum) OrderIDDataPlatformOrdersHeaderPartnerData(mods ...qm.QueryMod) dataPlatformOrdersHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_partner_data`.`OrderID`=?", o.OrderID),
	)

	return DataPlatformOrdersHeaderPartnerData(queryMods...)
}

// LoadBuyerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadBuyerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		foreign.R.BuyerDataPlatformOrdersHeaderData = append(foreign.R.BuyerDataPlatformOrdersHeaderData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.BusinessPartner {
				local.R.BuyerDataPlatformBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
				}
				foreign.R.BuyerDataPlatformOrdersHeaderData = append(foreign.R.BuyerDataPlatformOrdersHeaderData, local)
				break
			}
		}
	}

	return nil
}

// LoadIncoterm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadIncoterm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		if !queries.IsNil(object.Incoterms) {
			args = append(args, object.Incoterms)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Incoterms) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Incoterms) {
				args = append(args, obj.Incoterms)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_incoterms_incoterms_data`),
		qm.WhereIn(`data_platform_incoterms_incoterms_data.Incoterms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformIncotermsIncotermsDatum")
	}

	var resultSlice []*DataPlatformIncotermsIncotermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformIncotermsIncotermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_incoterms_incoterms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_incoterms_incoterms_data")
	}

	if len(dataPlatformIncotermsIncotermsDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Incoterm = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformIncotermsIncotermsDatumR{}
		}
		foreign.R.IncotermDataPlatformOrdersHeaderData = append(foreign.R.IncotermDataPlatformOrdersHeaderData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Incoterms, foreign.Incoterms) {
				local.R.Incoterm = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformIncotermsIncotermsDatumR{}
				}
				foreign.R.IncotermDataPlatformOrdersHeaderData = append(foreign.R.IncotermDataPlatformOrdersHeaderData, local)
				break
			}
		}
	}

	return nil
}

// LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		args = append(args, object.PaymentMethod)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentMethod {
					continue Outer
				}
			}

			args = append(args, obj.PaymentMethod)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_method_payment_method_data`),
		qm.WhereIn(`data_platform_payment_method_payment_method_data.PaymentMethod in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentMethodPaymentMethodDatum")
	}

	var resultSlice []*DataPlatformPaymentMethodPaymentMethodDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentMethodPaymentMethodDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_method_payment_method_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_method_payment_method_data")
	}

	if len(dataPlatformPaymentMethodPaymentMethodDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformPaymentMethodPaymentMethodDatumR{}
		}
		foreign.R.PaymentMethodDataPlatformOrdersHeaderData = append(foreign.R.PaymentMethodDataPlatformOrdersHeaderData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentMethod == foreign.PaymentMethod {
				local.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformPaymentMethodPaymentMethodDatumR{}
				}
				foreign.R.PaymentMethodDataPlatformOrdersHeaderData = append(foreign.R.PaymentMethodDataPlatformOrdersHeaderData, local)
				break
			}
		}
	}

	return nil
}

// LoadPaymentTerm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadPaymentTerm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		args = append(args, object.PaymentTerms)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentTerms {
					continue Outer
				}
			}

			args = append(args, obj.PaymentTerms)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_terms_payment_terms_data`),
		qm.WhereIn(`data_platform_payment_terms_payment_terms_data.PaymentTerms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentTermsPaymentTermsDatum")
	}

	var resultSlice []*DataPlatformPaymentTermsPaymentTermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentTermsPaymentTermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_terms_payment_terms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_terms_payment_terms_data")
	}

	if len(dataPlatformPaymentTermsPaymentTermsDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentTerm = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformPaymentTermsPaymentTermsDatumR{}
		}
		foreign.R.PaymentTermDataPlatformOrdersHeaderData = append(foreign.R.PaymentTermDataPlatformOrdersHeaderData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentTerms == foreign.PaymentTerms {
				local.R.PaymentTerm = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformPaymentTermsPaymentTermsDatumR{}
				}
				foreign.R.PaymentTermDataPlatformOrdersHeaderData = append(foreign.R.PaymentTermDataPlatformOrdersHeaderData, local)
				break
			}
		}
	}

	return nil
}

// LoadSellerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadSellerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		args = append(args, object.Seller)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Seller {
					continue Outer
				}
			}

			args = append(args, obj.Seller)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerDataPlatformBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		foreign.R.SellerDataPlatformOrdersHeaderData = append(foreign.R.SellerDataPlatformOrdersHeaderData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Seller == foreign.BusinessPartner {
				local.R.SellerDataPlatformBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
				}
				foreign.R.SellerDataPlatformOrdersHeaderData = append(foreign.R.SellerDataPlatformOrdersHeaderData, local)
				break
			}
		}
	}

	return nil
}

// LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersHeaderDatumL) LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		args = append(args, object.TransactionCurrency)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.TransactionCurrency {
					continue Outer
				}
			}

			args = append(args, obj.TransactionCurrency)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(dataPlatformCurrencyCurrencyDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformCurrencyCurrencyDatumR{}
		}
		foreign.R.TransactionCurrencyDataPlatformOrdersHeaderData = append(foreign.R.TransactionCurrencyDataPlatformOrdersHeaderData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionCurrency == foreign.Currency {
				local.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformCurrencyCurrencyDatumR{}
				}
				foreign.R.TransactionCurrencyDataPlatformOrdersHeaderData = append(foreign.R.TransactionCurrencyDataPlatformOrdersHeaderData, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformOrdersHeaderDatumL) LoadOrderIDDataPlatformOrdersHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersHeaderDatum
	var object *DataPlatformOrdersHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersHeaderDatum.(*DataPlatformOrdersHeaderDatum)
		if !ok {
			object = new(DataPlatformOrdersHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersHeaderDatum.(*[]*DataPlatformOrdersHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersHeaderDatumR{}
		}
		args = append(args, object.OrderID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_partner_data`),
		qm.WhereIn(`data_platform_orders_header_partner_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_partner_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_partner_data")
	}

	if len(dataPlatformOrdersHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderIDDataPlatformOrdersHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}
			foreign.R.OrderIDDataPlatformOrdersHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.OrderID == foreign.OrderID {
				local.R.OrderIDDataPlatformOrdersHeaderPartnerData = append(local.R.OrderIDDataPlatformOrdersHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformOrdersHeaderPartnerDatumR{}
				}
				foreign.R.OrderIDDataPlatformOrdersHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// SetBuyerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformBusinessPartnerGeneralDatum to related.
// Adds o to related.R.BuyerDataPlatformOrdersHeaderData.
func (o *DataPlatformOrdersHeaderDatum) SetBuyerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			BuyerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BuyerDataPlatformOrdersHeaderData: DataPlatformOrdersHeaderDatumSlice{o},
		}
	} else {
		related.R.BuyerDataPlatformOrdersHeaderData = append(related.R.BuyerDataPlatformOrdersHeaderData, o)
	}

	return nil
}

// SetIncoterm of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.Incoterm to related.
// Adds o to related.R.IncotermDataPlatformOrdersHeaderData.
func (o *DataPlatformOrdersHeaderDatum) SetIncoterm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformIncotermsIncotermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Incoterms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Incoterms, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Incoterms, related.Incoterms)
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			Incoterm: related,
		}
	} else {
		o.R.Incoterm = related
	}

	if related.R == nil {
		related.R = &dataPlatformIncotermsIncotermsDatumR{
			IncotermDataPlatformOrdersHeaderData: DataPlatformOrdersHeaderDatumSlice{o},
		}
	} else {
		related.R.IncotermDataPlatformOrdersHeaderData = append(related.R.IncotermDataPlatformOrdersHeaderData, o)
	}

	return nil
}

// RemoveIncoterm relationship.
// Sets o.R.Incoterm to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DataPlatformOrdersHeaderDatum) RemoveIncoterm(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformIncotermsIncotermsDatum) error {
	var err error

	queries.SetScanner(&o.Incoterms, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("Incoterms")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Incoterm = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.IncotermDataPlatformOrdersHeaderData {
		if queries.Equal(o.Incoterms, ri.Incoterms) {
			continue
		}

		ln := len(related.R.IncotermDataPlatformOrdersHeaderData)
		if ln > 1 && i < ln-1 {
			related.R.IncotermDataPlatformOrdersHeaderData[i] = related.R.IncotermDataPlatformOrdersHeaderData[ln-1]
		}
		related.R.IncotermDataPlatformOrdersHeaderData = related.R.IncotermDataPlatformOrdersHeaderData[:ln-1]
		break
	}
	return nil
}

// SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to related.
// Adds o to related.R.PaymentMethodDataPlatformOrdersHeaderData.
func (o *DataPlatformOrdersHeaderDatum) SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentMethod"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentMethod, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentMethod = related.PaymentMethod
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: related,
		}
	} else {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformPaymentMethodPaymentMethodDatumR{
			PaymentMethodDataPlatformOrdersHeaderData: DataPlatformOrdersHeaderDatumSlice{o},
		}
	} else {
		related.R.PaymentMethodDataPlatformOrdersHeaderData = append(related.R.PaymentMethodDataPlatformOrdersHeaderData, o)
	}

	return nil
}

// SetPaymentTerm of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.PaymentTerm to related.
// Adds o to related.R.PaymentTermDataPlatformOrdersHeaderData.
func (o *DataPlatformOrdersHeaderDatum) SetPaymentTerm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentTermsPaymentTermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentTerms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentTerms, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentTerms = related.PaymentTerms
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			PaymentTerm: related,
		}
	} else {
		o.R.PaymentTerm = related
	}

	if related.R == nil {
		related.R = &dataPlatformPaymentTermsPaymentTermsDatumR{
			PaymentTermDataPlatformOrdersHeaderData: DataPlatformOrdersHeaderDatumSlice{o},
		}
	} else {
		related.R.PaymentTermDataPlatformOrdersHeaderData = append(related.R.PaymentTermDataPlatformOrdersHeaderData, o)
	}

	return nil
}

// SetSellerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.SellerDataPlatformBusinessPartnerGeneralDatum to related.
// Adds o to related.R.SellerDataPlatformOrdersHeaderData.
func (o *DataPlatformOrdersHeaderDatum) SetSellerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Seller"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Seller = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			SellerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.SellerDataPlatformBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerGeneralDatumR{
			SellerDataPlatformOrdersHeaderData: DataPlatformOrdersHeaderDatumSlice{o},
		}
	} else {
		related.R.SellerDataPlatformOrdersHeaderData = append(related.R.SellerDataPlatformOrdersHeaderData, o)
	}

	return nil
}

// SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformOrdersHeaderDatum to the related item.
// Sets o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum to related.
// Adds o to related.R.TransactionCurrencyDataPlatformOrdersHeaderData.
func (o *DataPlatformOrdersHeaderDatum) SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"TransactionCurrency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.OrderID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionCurrency = related.Currency
	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			TransactionCurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformCurrencyCurrencyDatumR{
			TransactionCurrencyDataPlatformOrdersHeaderData: DataPlatformOrdersHeaderDatumSlice{o},
		}
	} else {
		related.R.TransactionCurrencyDataPlatformOrdersHeaderData = append(related.R.TransactionCurrencyDataPlatformOrdersHeaderData, o)
	}

	return nil
}

// AddOrderIDDataPlatformOrdersHeaderPartnerData adds the given related objects to the existing relationships
// of the data_platform_orders_header_datum, optionally inserting them as new records.
// Appends related to o.R.OrderIDDataPlatformOrdersHeaderPartnerData.
// Sets related.R.OrderIDDataPlatformOrdersHeaderDatum appropriately.
func (o *DataPlatformOrdersHeaderDatum) AddOrderIDDataPlatformOrdersHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OrderID = o.OrderID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OrderID, rel.OrderID, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OrderID = o.OrderID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformOrdersHeaderDatumR{
			OrderIDDataPlatformOrdersHeaderPartnerData: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersHeaderPartnerData = append(o.R.OrderIDDataPlatformOrdersHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformOrdersHeaderPartnerDatumR{
				OrderIDDataPlatformOrdersHeaderDatum: o,
			}
		} else {
			rel.R.OrderIDDataPlatformOrdersHeaderDatum = o
		}
	}
	return nil
}

// DataPlatformOrdersHeaderData retrieves all the records using an executor.
func DataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_orders_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_orders_header_data`.*"})
	}

	return dataPlatformOrdersHeaderDatumQuery{q}
}

// FindDataPlatformOrdersHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformOrdersHeaderDatum(ctx context.Context, exec boil.ContextExecutor, orderID int, selectCols ...string) (*DataPlatformOrdersHeaderDatum, error) {
	dataPlatformOrdersHeaderDatumObj := &DataPlatformOrdersHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_orders_header_data` where `OrderID`=?", sel,
	)

	q := queries.Raw(query, orderID)

	err := q.Bind(ctx, exec, dataPlatformOrdersHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_orders_header_data")
	}

	if err = dataPlatformOrdersHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformOrdersHeaderDatumObj, err
	}

	return dataPlatformOrdersHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformOrdersHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformOrdersHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersHeaderDatumInsertCache[key]
	dataPlatformOrdersHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformOrdersHeaderDatumAllColumns,
			dataPlatformOrdersHeaderDatumColumnsWithDefault,
			dataPlatformOrdersHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_orders_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_orders_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_orders_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_orders_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrderID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersHeaderDatumInsertCacheMut.Lock()
		dataPlatformOrdersHeaderDatumInsertCache[key] = cache
		dataPlatformOrdersHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformOrdersHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformOrdersHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformOrdersHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformOrdersHeaderDatumUpdateCache[key]
	dataPlatformOrdersHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformOrdersHeaderDatumAllColumns,
			dataPlatformOrdersHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_orders_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, append(wl, dataPlatformOrdersHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_orders_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_orders_header_data")
	}

	if !cached {
		dataPlatformOrdersHeaderDatumUpdateCacheMut.Lock()
		dataPlatformOrdersHeaderDatumUpdateCache[key] = cache
		dataPlatformOrdersHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformOrdersHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_orders_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_orders_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformOrdersHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformOrdersHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformOrdersHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformOrdersHeaderDatumUniqueColumns = []string{
	"OrderID",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformOrdersHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformOrdersHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformOrdersHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersHeaderDatumUpsertCache[key]
	dataPlatformOrdersHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformOrdersHeaderDatumAllColumns,
			dataPlatformOrdersHeaderDatumColumnsWithDefault,
			dataPlatformOrdersHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformOrdersHeaderDatumAllColumns,
			dataPlatformOrdersHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_orders_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_orders_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_orders_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_orders_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformOrdersHeaderDatumType, dataPlatformOrdersHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_orders_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersHeaderDatumUpsertCacheMut.Lock()
		dataPlatformOrdersHeaderDatumUpsertCache[key] = cache
		dataPlatformOrdersHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformOrdersHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformOrdersHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformOrdersHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformOrdersHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_orders_header_data` WHERE `OrderID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_orders_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_orders_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformOrdersHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformOrdersHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_orders_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_orders_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformOrdersHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformOrdersHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_orders_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformOrdersHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_orders_header_data")
	}

	if len(dataPlatformOrdersHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformOrdersHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformOrdersHeaderDatum(ctx, exec, o.OrderID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformOrdersHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformOrdersHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_orders_header_data`.* FROM `data_platform_orders_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformOrdersHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformOrdersHeaderDatumExists checks if the DataPlatformOrdersHeaderDatum row exists.
func DataPlatformOrdersHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, orderID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_orders_header_data` where `OrderID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID)
	}
	row := exec.QueryRowContext(ctx, sql, orderID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_orders_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformOrdersHeaderDatum row exists.
func (o *DataPlatformOrdersHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformOrdersHeaderDatumExists(ctx, exec, o.OrderID)
}
