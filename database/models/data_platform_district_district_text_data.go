// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformDistrictDistrictTextDatum is an object representing the database table.
type DataPlatformDistrictDistrictTextDatum struct {
	District     string      `boil:"District" json:"District" toml:"District" yaml:"District"`
	Language     string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	DistrictName null.String `boil:"DistrictName" json:"DistrictName,omitempty" toml:"DistrictName" yaml:"DistrictName,omitempty"`

	R *dataPlatformDistrictDistrictTextDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformDistrictDistrictTextDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformDistrictDistrictTextDatumColumns = struct {
	District     string
	Language     string
	DistrictName string
}{
	District:     "District",
	Language:     "Language",
	DistrictName: "DistrictName",
}

var DataPlatformDistrictDistrictTextDatumTableColumns = struct {
	District     string
	Language     string
	DistrictName string
}{
	District:     "data_platform_district_district_text_data.District",
	Language:     "data_platform_district_district_text_data.Language",
	DistrictName: "data_platform_district_district_text_data.DistrictName",
}

// Generated where

var DataPlatformDistrictDistrictTextDatumWhere = struct {
	District     whereHelperstring
	Language     whereHelperstring
	DistrictName whereHelpernull_String
}{
	District:     whereHelperstring{field: "`data_platform_district_district_text_data`.`District`"},
	Language:     whereHelperstring{field: "`data_platform_district_district_text_data`.`Language`"},
	DistrictName: whereHelpernull_String{field: "`data_platform_district_district_text_data`.`DistrictName`"},
}

// DataPlatformDistrictDistrictTextDatumRels is where relationship names are stored.
var DataPlatformDistrictDistrictTextDatumRels = struct {
}{}

// dataPlatformDistrictDistrictTextDatumR is where relationships are stored.
type dataPlatformDistrictDistrictTextDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformDistrictDistrictTextDatumR) NewStruct() *dataPlatformDistrictDistrictTextDatumR {
	return &dataPlatformDistrictDistrictTextDatumR{}
}

// dataPlatformDistrictDistrictTextDatumL is where Load methods for each relationship are stored.
type dataPlatformDistrictDistrictTextDatumL struct{}

var (
	dataPlatformDistrictDistrictTextDatumAllColumns            = []string{"District", "Language", "DistrictName"}
	dataPlatformDistrictDistrictTextDatumColumnsWithoutDefault = []string{"District", "Language", "DistrictName"}
	dataPlatformDistrictDistrictTextDatumColumnsWithDefault    = []string{}
	dataPlatformDistrictDistrictTextDatumPrimaryKeyColumns     = []string{"District", "Language"}
	dataPlatformDistrictDistrictTextDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformDistrictDistrictTextDatumSlice is an alias for a slice of pointers to DataPlatformDistrictDistrictTextDatum.
	// This should almost always be used instead of []DataPlatformDistrictDistrictTextDatum.
	DataPlatformDistrictDistrictTextDatumSlice []*DataPlatformDistrictDistrictTextDatum

	dataPlatformDistrictDistrictTextDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformDistrictDistrictTextDatumType                 = reflect.TypeOf(&DataPlatformDistrictDistrictTextDatum{})
	dataPlatformDistrictDistrictTextDatumMapping              = queries.MakeStructMapping(dataPlatformDistrictDistrictTextDatumType)
	dataPlatformDistrictDistrictTextDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformDistrictDistrictTextDatumType, dataPlatformDistrictDistrictTextDatumMapping, dataPlatformDistrictDistrictTextDatumPrimaryKeyColumns)
	dataPlatformDistrictDistrictTextDatumInsertCacheMut       sync.RWMutex
	dataPlatformDistrictDistrictTextDatumInsertCache          = make(map[string]insertCache)
	dataPlatformDistrictDistrictTextDatumUpdateCacheMut       sync.RWMutex
	dataPlatformDistrictDistrictTextDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformDistrictDistrictTextDatumUpsertCacheMut       sync.RWMutex
	dataPlatformDistrictDistrictTextDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformDistrictDistrictTextDatum record from the query.
func (q dataPlatformDistrictDistrictTextDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformDistrictDistrictTextDatum, error) {
	o := &DataPlatformDistrictDistrictTextDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_district_district_text_data")
	}

	return o, nil
}

// All returns all DataPlatformDistrictDistrictTextDatum records from the query.
func (q dataPlatformDistrictDistrictTextDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformDistrictDistrictTextDatumSlice, error) {
	var o []*DataPlatformDistrictDistrictTextDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformDistrictDistrictTextDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformDistrictDistrictTextDatum records in the query.
func (q dataPlatformDistrictDistrictTextDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_district_district_text_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformDistrictDistrictTextDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_district_district_text_data exists")
	}

	return count > 0, nil
}

// DataPlatformDistrictDistrictTextData retrieves all the records using an executor.
func DataPlatformDistrictDistrictTextData(mods ...qm.QueryMod) dataPlatformDistrictDistrictTextDatumQuery {
	mods = append(mods, qm.From("`data_platform_district_district_text_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_district_district_text_data`.*"})
	}

	return dataPlatformDistrictDistrictTextDatumQuery{q}
}

// FindDataPlatformDistrictDistrictTextDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformDistrictDistrictTextDatum(ctx context.Context, exec boil.ContextExecutor, district string, language string, selectCols ...string) (*DataPlatformDistrictDistrictTextDatum, error) {
	dataPlatformDistrictDistrictTextDatumObj := &DataPlatformDistrictDistrictTextDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_district_district_text_data` where `District`=? AND `Language`=?", sel,
	)

	q := queries.Raw(query, district, language)

	err := q.Bind(ctx, exec, dataPlatformDistrictDistrictTextDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_district_district_text_data")
	}

	return dataPlatformDistrictDistrictTextDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformDistrictDistrictTextDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_district_district_text_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDistrictDistrictTextDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformDistrictDistrictTextDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformDistrictDistrictTextDatumInsertCache[key]
	dataPlatformDistrictDistrictTextDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformDistrictDistrictTextDatumAllColumns,
			dataPlatformDistrictDistrictTextDatumColumnsWithDefault,
			dataPlatformDistrictDistrictTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDistrictDistrictTextDatumType, dataPlatformDistrictDistrictTextDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformDistrictDistrictTextDatumType, dataPlatformDistrictDistrictTextDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_district_district_text_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_district_district_text_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_district_district_text_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformDistrictDistrictTextDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_district_district_text_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.District,
		o.Language,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_district_district_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDistrictDistrictTextDatumInsertCacheMut.Lock()
		dataPlatformDistrictDistrictTextDatumInsertCache[key] = cache
		dataPlatformDistrictDistrictTextDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformDistrictDistrictTextDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformDistrictDistrictTextDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformDistrictDistrictTextDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformDistrictDistrictTextDatumUpdateCache[key]
	dataPlatformDistrictDistrictTextDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformDistrictDistrictTextDatumAllColumns,
			dataPlatformDistrictDistrictTextDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_district_district_text_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_district_district_text_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformDistrictDistrictTextDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformDistrictDistrictTextDatumType, dataPlatformDistrictDistrictTextDatumMapping, append(wl, dataPlatformDistrictDistrictTextDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_district_district_text_data row")
	}

	if !cached {
		dataPlatformDistrictDistrictTextDatumUpdateCacheMut.Lock()
		dataPlatformDistrictDistrictTextDatumUpdateCache[key] = cache
		dataPlatformDistrictDistrictTextDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformDistrictDistrictTextDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_district_district_text_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformDistrictDistrictTextDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDistrictDistrictTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_district_district_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDistrictDistrictTextDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformDistrictDistrictTextDatum slice")
	}

	return nil
}

var mySQLDataPlatformDistrictDistrictTextDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformDistrictDistrictTextDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_district_district_text_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDistrictDistrictTextDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformDistrictDistrictTextDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformDistrictDistrictTextDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformDistrictDistrictTextDatumUpsertCache[key]
	dataPlatformDistrictDistrictTextDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformDistrictDistrictTextDatumAllColumns,
			dataPlatformDistrictDistrictTextDatumColumnsWithDefault,
			dataPlatformDistrictDistrictTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformDistrictDistrictTextDatumAllColumns,
			dataPlatformDistrictDistrictTextDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_district_district_text_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_district_district_text_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_district_district_text_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDistrictDistrictTextDatumType, dataPlatformDistrictDistrictTextDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformDistrictDistrictTextDatumType, dataPlatformDistrictDistrictTextDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_district_district_text_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformDistrictDistrictTextDatumType, dataPlatformDistrictDistrictTextDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_district_district_text_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_district_district_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDistrictDistrictTextDatumUpsertCacheMut.Lock()
		dataPlatformDistrictDistrictTextDatumUpsertCache[key] = cache
		dataPlatformDistrictDistrictTextDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformDistrictDistrictTextDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformDistrictDistrictTextDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformDistrictDistrictTextDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformDistrictDistrictTextDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_district_district_text_data` WHERE `District`=? AND `Language`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_district_district_text_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformDistrictDistrictTextDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformDistrictDistrictTextDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_district_district_text_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformDistrictDistrictTextDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDistrictDistrictTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_district_district_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDistrictDistrictTextDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformDistrictDistrictTextDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformDistrictDistrictTextDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformDistrictDistrictTextDatum(ctx, exec, o.District, o.Language)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformDistrictDistrictTextDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformDistrictDistrictTextDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDistrictDistrictTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_district_district_text_data`.* FROM `data_platform_district_district_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDistrictDistrictTextDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformDistrictDistrictTextDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformDistrictDistrictTextDatumExists checks if the DataPlatformDistrictDistrictTextDatum row exists.
func DataPlatformDistrictDistrictTextDatumExists(ctx context.Context, exec boil.ContextExecutor, district string, language string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_district_district_text_data` where `District`=? AND `Language`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, district, language)
	}
	row := exec.QueryRowContext(ctx, sql, district, language)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_district_district_text_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformDistrictDistrictTextDatum row exists.
func (o *DataPlatformDistrictDistrictTextDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformDistrictDistrictTextDatumExists(ctx, exec, o.District, o.Language)
}
