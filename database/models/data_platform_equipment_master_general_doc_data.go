// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformEquipmentMasterGeneralDocDatum is an object representing the database table.
type DataPlatformEquipmentMasterGeneralDocDatum struct {
	Equipment                int         `boil:"Equipment" json:"Equipment" toml:"Equipment" yaml:"Equipment"`
	DocType                  string      `boil:"DocType" json:"DocType" toml:"DocType" yaml:"DocType"`
	DocVersionID             int         `boil:"DocVersionID" json:"DocVersionID" toml:"DocVersionID" yaml:"DocVersionID"`
	DocID                    string      `boil:"DocID" json:"DocID" toml:"DocID" yaml:"DocID"`
	FileExtension            string      `boil:"FileExtension" json:"FileExtension" toml:"FileExtension" yaml:"FileExtension"`
	FileName                 null.String `boil:"FileName" json:"FileName,omitempty" toml:"FileName" yaml:"FileName,omitempty"`
	FilePath                 null.String `boil:"FilePath" json:"FilePath,omitempty" toml:"FilePath" yaml:"FilePath,omitempty"`
	DocIssuerBusinessPartner null.Int    `boil:"DocIssuerBusinessPartner" json:"DocIssuerBusinessPartner,omitempty" toml:"DocIssuerBusinessPartner" yaml:"DocIssuerBusinessPartner,omitempty"`

	R *dataPlatformEquipmentMasterGeneralDocDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformEquipmentMasterGeneralDocDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformEquipmentMasterGeneralDocDatumColumns = struct {
	Equipment                string
	DocType                  string
	DocVersionID             string
	DocID                    string
	FileExtension            string
	FileName                 string
	FilePath                 string
	DocIssuerBusinessPartner string
}{
	Equipment:                "Equipment",
	DocType:                  "DocType",
	DocVersionID:             "DocVersionID",
	DocID:                    "DocID",
	FileExtension:            "FileExtension",
	FileName:                 "FileName",
	FilePath:                 "FilePath",
	DocIssuerBusinessPartner: "DocIssuerBusinessPartner",
}

var DataPlatformEquipmentMasterGeneralDocDatumTableColumns = struct {
	Equipment                string
	DocType                  string
	DocVersionID             string
	DocID                    string
	FileExtension            string
	FileName                 string
	FilePath                 string
	DocIssuerBusinessPartner string
}{
	Equipment:                "data_platform_equipment_master_general_doc_data.Equipment",
	DocType:                  "data_platform_equipment_master_general_doc_data.DocType",
	DocVersionID:             "data_platform_equipment_master_general_doc_data.DocVersionID",
	DocID:                    "data_platform_equipment_master_general_doc_data.DocID",
	FileExtension:            "data_platform_equipment_master_general_doc_data.FileExtension",
	FileName:                 "data_platform_equipment_master_general_doc_data.FileName",
	FilePath:                 "data_platform_equipment_master_general_doc_data.FilePath",
	DocIssuerBusinessPartner: "data_platform_equipment_master_general_doc_data.DocIssuerBusinessPartner",
}

// Generated where

var DataPlatformEquipmentMasterGeneralDocDatumWhere = struct {
	Equipment                whereHelperint
	DocType                  whereHelperstring
	DocVersionID             whereHelperint
	DocID                    whereHelperstring
	FileExtension            whereHelperstring
	FileName                 whereHelpernull_String
	FilePath                 whereHelpernull_String
	DocIssuerBusinessPartner whereHelpernull_Int
}{
	Equipment:                whereHelperint{field: "`data_platform_equipment_master_general_doc_data`.`Equipment`"},
	DocType:                  whereHelperstring{field: "`data_platform_equipment_master_general_doc_data`.`DocType`"},
	DocVersionID:             whereHelperint{field: "`data_platform_equipment_master_general_doc_data`.`DocVersionID`"},
	DocID:                    whereHelperstring{field: "`data_platform_equipment_master_general_doc_data`.`DocID`"},
	FileExtension:            whereHelperstring{field: "`data_platform_equipment_master_general_doc_data`.`FileExtension`"},
	FileName:                 whereHelpernull_String{field: "`data_platform_equipment_master_general_doc_data`.`FileName`"},
	FilePath:                 whereHelpernull_String{field: "`data_platform_equipment_master_general_doc_data`.`FilePath`"},
	DocIssuerBusinessPartner: whereHelpernull_Int{field: "`data_platform_equipment_master_general_doc_data`.`DocIssuerBusinessPartner`"},
}

// DataPlatformEquipmentMasterGeneralDocDatumRels is where relationship names are stored.
var DataPlatformEquipmentMasterGeneralDocDatumRels = struct {
	DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum string
	DocTypeDataPlatformDocTypeDocTypeDatum                          string
	EquipmentDataPlatformEquipmentMasterGeneralDatum                string
}{
	DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: "DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	DocTypeDataPlatformDocTypeDocTypeDatum:                          "DocTypeDataPlatformDocTypeDocTypeDatum",
	EquipmentDataPlatformEquipmentMasterGeneralDatum:                "EquipmentDataPlatformEquipmentMasterGeneralDatum",
}

// dataPlatformEquipmentMasterGeneralDocDatumR is where relationships are stored.
type dataPlatformEquipmentMasterGeneralDocDatumR struct {
	DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum `boil:"DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	DocTypeDataPlatformDocTypeDocTypeDatum                          *DataPlatformDocTypeDocTypeDatum         `boil:"DocTypeDataPlatformDocTypeDocTypeDatum" json:"DocTypeDataPlatformDocTypeDocTypeDatum" toml:"DocTypeDataPlatformDocTypeDocTypeDatum" yaml:"DocTypeDataPlatformDocTypeDocTypeDatum"`
	EquipmentDataPlatformEquipmentMasterGeneralDatum                *DataPlatformEquipmentMasterGeneralDatum `boil:"EquipmentDataPlatformEquipmentMasterGeneralDatum" json:"EquipmentDataPlatformEquipmentMasterGeneralDatum" toml:"EquipmentDataPlatformEquipmentMasterGeneralDatum" yaml:"EquipmentDataPlatformEquipmentMasterGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformEquipmentMasterGeneralDocDatumR) NewStruct() *dataPlatformEquipmentMasterGeneralDocDatumR {
	return &dataPlatformEquipmentMasterGeneralDocDatumR{}
}

func (r *dataPlatformEquipmentMasterGeneralDocDatumR) GetDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformEquipmentMasterGeneralDocDatumR) GetDocTypeDataPlatformDocTypeDocTypeDatum() *DataPlatformDocTypeDocTypeDatum {
	if r == nil {
		return nil
	}
	return r.DocTypeDataPlatformDocTypeDocTypeDatum
}

func (r *dataPlatformEquipmentMasterGeneralDocDatumR) GetEquipmentDataPlatformEquipmentMasterGeneralDatum() *DataPlatformEquipmentMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.EquipmentDataPlatformEquipmentMasterGeneralDatum
}

// dataPlatformEquipmentMasterGeneralDocDatumL is where Load methods for each relationship are stored.
type dataPlatformEquipmentMasterGeneralDocDatumL struct{}

var (
	dataPlatformEquipmentMasterGeneralDocDatumAllColumns            = []string{"Equipment", "DocType", "DocVersionID", "DocID", "FileExtension", "FileName", "FilePath", "DocIssuerBusinessPartner"}
	dataPlatformEquipmentMasterGeneralDocDatumColumnsWithoutDefault = []string{"Equipment", "DocType", "DocVersionID", "DocID", "FileExtension", "FileName", "FilePath", "DocIssuerBusinessPartner"}
	dataPlatformEquipmentMasterGeneralDocDatumColumnsWithDefault    = []string{}
	dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns     = []string{"Equipment", "DocType", "DocVersionID", "DocID"}
	dataPlatformEquipmentMasterGeneralDocDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformEquipmentMasterGeneralDocDatumSlice is an alias for a slice of pointers to DataPlatformEquipmentMasterGeneralDocDatum.
	// This should almost always be used instead of []DataPlatformEquipmentMasterGeneralDocDatum.
	DataPlatformEquipmentMasterGeneralDocDatumSlice []*DataPlatformEquipmentMasterGeneralDocDatum

	dataPlatformEquipmentMasterGeneralDocDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformEquipmentMasterGeneralDocDatumType                 = reflect.TypeOf(&DataPlatformEquipmentMasterGeneralDocDatum{})
	dataPlatformEquipmentMasterGeneralDocDatumMapping              = queries.MakeStructMapping(dataPlatformEquipmentMasterGeneralDocDatumType)
	dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformEquipmentMasterGeneralDocDatumType, dataPlatformEquipmentMasterGeneralDocDatumMapping, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns)
	dataPlatformEquipmentMasterGeneralDocDatumInsertCacheMut       sync.RWMutex
	dataPlatformEquipmentMasterGeneralDocDatumInsertCache          = make(map[string]insertCache)
	dataPlatformEquipmentMasterGeneralDocDatumUpdateCacheMut       sync.RWMutex
	dataPlatformEquipmentMasterGeneralDocDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformEquipmentMasterGeneralDocDatumUpsertCacheMut       sync.RWMutex
	dataPlatformEquipmentMasterGeneralDocDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformEquipmentMasterGeneralDocDatum record from the query.
func (q dataPlatformEquipmentMasterGeneralDocDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformEquipmentMasterGeneralDocDatum, error) {
	o := &DataPlatformEquipmentMasterGeneralDocDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_equipment_master_general_doc_data")
	}

	return o, nil
}

// All returns all DataPlatformEquipmentMasterGeneralDocDatum records from the query.
func (q dataPlatformEquipmentMasterGeneralDocDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformEquipmentMasterGeneralDocDatumSlice, error) {
	var o []*DataPlatformEquipmentMasterGeneralDocDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformEquipmentMasterGeneralDocDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformEquipmentMasterGeneralDocDatum records in the query.
func (q dataPlatformEquipmentMasterGeneralDocDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_equipment_master_general_doc_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformEquipmentMasterGeneralDocDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_equipment_master_general_doc_data exists")
	}

	return count > 0, nil
}

// DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DocIssuerBusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// DocTypeDataPlatformDocTypeDocTypeDatum pointed to by the foreign key.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) DocTypeDataPlatformDocTypeDocTypeDatum(mods ...qm.QueryMod) dataPlatformDocTypeDocTypeDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`DocType` = ?", o.DocType),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformDocTypeDocTypeData(queryMods...)
}

// EquipmentDataPlatformEquipmentMasterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) EquipmentDataPlatformEquipmentMasterGeneralDatum(mods ...qm.QueryMod) dataPlatformEquipmentMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Equipment` = ?", o.Equipment),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformEquipmentMasterGeneralData(queryMods...)
}

// LoadDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformEquipmentMasterGeneralDocDatumL) LoadDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformEquipmentMasterGeneralDocDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformEquipmentMasterGeneralDocDatum
	var object *DataPlatformEquipmentMasterGeneralDocDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformEquipmentMasterGeneralDocDatum.(*DataPlatformEquipmentMasterGeneralDocDatum)
		if !ok {
			object = new(DataPlatformEquipmentMasterGeneralDocDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformEquipmentMasterGeneralDocDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformEquipmentMasterGeneralDocDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformEquipmentMasterGeneralDocDatum.(*[]*DataPlatformEquipmentMasterGeneralDocDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformEquipmentMasterGeneralDocDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformEquipmentMasterGeneralDocDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformEquipmentMasterGeneralDocDatumR{}
		}
		if !queries.IsNil(object.DocIssuerBusinessPartner) {
			args = append(args, object.DocIssuerBusinessPartner)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformEquipmentMasterGeneralDocDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DocIssuerBusinessPartner) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DocIssuerBusinessPartner) {
				args = append(args, obj.DocIssuerBusinessPartner)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DocIssuerBusinessPartner, foreign.BusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDocTypeDataPlatformDocTypeDocTypeDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformEquipmentMasterGeneralDocDatumL) LoadDocTypeDataPlatformDocTypeDocTypeDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformEquipmentMasterGeneralDocDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformEquipmentMasterGeneralDocDatum
	var object *DataPlatformEquipmentMasterGeneralDocDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformEquipmentMasterGeneralDocDatum.(*DataPlatformEquipmentMasterGeneralDocDatum)
		if !ok {
			object = new(DataPlatformEquipmentMasterGeneralDocDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformEquipmentMasterGeneralDocDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformEquipmentMasterGeneralDocDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformEquipmentMasterGeneralDocDatum.(*[]*DataPlatformEquipmentMasterGeneralDocDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformEquipmentMasterGeneralDocDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformEquipmentMasterGeneralDocDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformEquipmentMasterGeneralDocDatumR{}
		}
		args = append(args, object.DocType)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformEquipmentMasterGeneralDocDatumR{}
			}

			for _, a := range args {
				if a == obj.DocType {
					continue Outer
				}
			}

			args = append(args, obj.DocType)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_doc_type_doc_type_data`),
		qm.WhereIn(`data_platform_doc_type_doc_type_data.DocType in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformDocTypeDocTypeDatum")
	}

	var resultSlice []*DataPlatformDocTypeDocTypeDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformDocTypeDocTypeDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_doc_type_doc_type_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_doc_type_doc_type_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DocTypeDataPlatformDocTypeDocTypeDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DocType == foreign.DocType {
				local.R.DocTypeDataPlatformDocTypeDocTypeDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadEquipmentDataPlatformEquipmentMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformEquipmentMasterGeneralDocDatumL) LoadEquipmentDataPlatformEquipmentMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformEquipmentMasterGeneralDocDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformEquipmentMasterGeneralDocDatum
	var object *DataPlatformEquipmentMasterGeneralDocDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformEquipmentMasterGeneralDocDatum.(*DataPlatformEquipmentMasterGeneralDocDatum)
		if !ok {
			object = new(DataPlatformEquipmentMasterGeneralDocDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformEquipmentMasterGeneralDocDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformEquipmentMasterGeneralDocDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformEquipmentMasterGeneralDocDatum.(*[]*DataPlatformEquipmentMasterGeneralDocDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformEquipmentMasterGeneralDocDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformEquipmentMasterGeneralDocDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformEquipmentMasterGeneralDocDatumR{}
		}
		args = append(args, object.Equipment)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformEquipmentMasterGeneralDocDatumR{}
			}

			for _, a := range args {
				if a == obj.Equipment {
					continue Outer
				}
			}

			args = append(args, obj.Equipment)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_general_data`),
		qm.WhereIn(`data_platform_equipment_master_general_data.Equipment in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformEquipmentMasterGeneralDatum")
	}

	var resultSlice []*DataPlatformEquipmentMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformEquipmentMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_equipment_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Equipment == foreign.Equipment {
				local.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformEquipmentMasterGeneralDocDatum to the related item.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) SetDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_equipment_master_general_doc_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Equipment, o.DocType, o.DocVersionID, o.DocID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DocIssuerBusinessPartner, related.BusinessPartner)
	if o.R == nil {
		o.R = &dataPlatformEquipmentMasterGeneralDocDatumR{
			DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// RemoveDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum relationship.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum to nil.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) RemoveDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error

	queries.SetScanner(&o.DocIssuerBusinessPartner, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetDocTypeDataPlatformDocTypeDocTypeDatum of the dataPlatformEquipmentMasterGeneralDocDatum to the related item.
// Sets o.R.DocTypeDataPlatformDocTypeDocTypeDatum to related.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) SetDocTypeDataPlatformDocTypeDocTypeDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformDocTypeDocTypeDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_equipment_master_general_doc_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DocType"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.DocType, o.Equipment, o.DocType, o.DocVersionID, o.DocID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DocType = related.DocType
	if o.R == nil {
		o.R = &dataPlatformEquipmentMasterGeneralDocDatumR{
			DocTypeDataPlatformDocTypeDocTypeDatum: related,
		}
	} else {
		o.R.DocTypeDataPlatformDocTypeDocTypeDatum = related
	}

	return nil
}

// SetEquipmentDataPlatformEquipmentMasterGeneralDatum of the dataPlatformEquipmentMasterGeneralDocDatum to the related item.
// Sets o.R.EquipmentDataPlatformEquipmentMasterGeneralDatum to related.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) SetEquipmentDataPlatformEquipmentMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformEquipmentMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_equipment_master_general_doc_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Equipment"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Equipment, o.Equipment, o.DocType, o.DocVersionID, o.DocID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Equipment = related.Equipment
	if o.R == nil {
		o.R = &dataPlatformEquipmentMasterGeneralDocDatumR{
			EquipmentDataPlatformEquipmentMasterGeneralDatum: related,
		}
	} else {
		o.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = related
	}

	return nil
}

// DataPlatformEquipmentMasterGeneralDocData retrieves all the records using an executor.
func DataPlatformEquipmentMasterGeneralDocData(mods ...qm.QueryMod) dataPlatformEquipmentMasterGeneralDocDatumQuery {
	mods = append(mods, qm.From("`data_platform_equipment_master_general_doc_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_equipment_master_general_doc_data`.*"})
	}

	return dataPlatformEquipmentMasterGeneralDocDatumQuery{q}
}

// FindDataPlatformEquipmentMasterGeneralDocDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformEquipmentMasterGeneralDocDatum(ctx context.Context, exec boil.ContextExecutor, equipment int, docType string, docVersionID int, docID string, selectCols ...string) (*DataPlatformEquipmentMasterGeneralDocDatum, error) {
	dataPlatformEquipmentMasterGeneralDocDatumObj := &DataPlatformEquipmentMasterGeneralDocDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_equipment_master_general_doc_data` where `Equipment`=? AND `DocType`=? AND `DocVersionID`=? AND `DocID`=?", sel,
	)

	q := queries.Raw(query, equipment, docType, docVersionID, docID)

	err := q.Bind(ctx, exec, dataPlatformEquipmentMasterGeneralDocDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_equipment_master_general_doc_data")
	}

	return dataPlatformEquipmentMasterGeneralDocDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_equipment_master_general_doc_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformEquipmentMasterGeneralDocDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformEquipmentMasterGeneralDocDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformEquipmentMasterGeneralDocDatumInsertCache[key]
	dataPlatformEquipmentMasterGeneralDocDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformEquipmentMasterGeneralDocDatumAllColumns,
			dataPlatformEquipmentMasterGeneralDocDatumColumnsWithDefault,
			dataPlatformEquipmentMasterGeneralDocDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformEquipmentMasterGeneralDocDatumType, dataPlatformEquipmentMasterGeneralDocDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformEquipmentMasterGeneralDocDatumType, dataPlatformEquipmentMasterGeneralDocDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_equipment_master_general_doc_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_equipment_master_general_doc_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_equipment_master_general_doc_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_equipment_master_general_doc_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Equipment,
		o.DocType,
		o.DocVersionID,
		o.DocID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_equipment_master_general_doc_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformEquipmentMasterGeneralDocDatumInsertCacheMut.Lock()
		dataPlatformEquipmentMasterGeneralDocDatumInsertCache[key] = cache
		dataPlatformEquipmentMasterGeneralDocDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformEquipmentMasterGeneralDocDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformEquipmentMasterGeneralDocDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformEquipmentMasterGeneralDocDatumUpdateCache[key]
	dataPlatformEquipmentMasterGeneralDocDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformEquipmentMasterGeneralDocDatumAllColumns,
			dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_equipment_master_general_doc_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_equipment_master_general_doc_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformEquipmentMasterGeneralDocDatumType, dataPlatformEquipmentMasterGeneralDocDatumMapping, append(wl, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_equipment_master_general_doc_data row")
	}

	if !cached {
		dataPlatformEquipmentMasterGeneralDocDatumUpdateCacheMut.Lock()
		dataPlatformEquipmentMasterGeneralDocDatumUpdateCache[key] = cache
		dataPlatformEquipmentMasterGeneralDocDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformEquipmentMasterGeneralDocDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_equipment_master_general_doc_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformEquipmentMasterGeneralDocDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_equipment_master_general_doc_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformEquipmentMasterGeneralDocDatum slice")
	}

	return nil
}

var mySQLDataPlatformEquipmentMasterGeneralDocDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_equipment_master_general_doc_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformEquipmentMasterGeneralDocDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformEquipmentMasterGeneralDocDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformEquipmentMasterGeneralDocDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformEquipmentMasterGeneralDocDatumUpsertCache[key]
	dataPlatformEquipmentMasterGeneralDocDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformEquipmentMasterGeneralDocDatumAllColumns,
			dataPlatformEquipmentMasterGeneralDocDatumColumnsWithDefault,
			dataPlatformEquipmentMasterGeneralDocDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformEquipmentMasterGeneralDocDatumAllColumns,
			dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_equipment_master_general_doc_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_equipment_master_general_doc_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_equipment_master_general_doc_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformEquipmentMasterGeneralDocDatumType, dataPlatformEquipmentMasterGeneralDocDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformEquipmentMasterGeneralDocDatumType, dataPlatformEquipmentMasterGeneralDocDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_equipment_master_general_doc_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformEquipmentMasterGeneralDocDatumType, dataPlatformEquipmentMasterGeneralDocDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_equipment_master_general_doc_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_equipment_master_general_doc_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformEquipmentMasterGeneralDocDatumUpsertCacheMut.Lock()
		dataPlatformEquipmentMasterGeneralDocDatumUpsertCache[key] = cache
		dataPlatformEquipmentMasterGeneralDocDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformEquipmentMasterGeneralDocDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformEquipmentMasterGeneralDocDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_equipment_master_general_doc_data` WHERE `Equipment`=? AND `DocType`=? AND `DocVersionID`=? AND `DocID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_equipment_master_general_doc_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformEquipmentMasterGeneralDocDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformEquipmentMasterGeneralDocDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_equipment_master_general_doc_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformEquipmentMasterGeneralDocDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_equipment_master_general_doc_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformEquipmentMasterGeneralDocDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformEquipmentMasterGeneralDocDatum(ctx, exec, o.Equipment, o.DocType, o.DocVersionID, o.DocID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformEquipmentMasterGeneralDocDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformEquipmentMasterGeneralDocDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_equipment_master_general_doc_data`.* FROM `data_platform_equipment_master_general_doc_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformEquipmentMasterGeneralDocDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformEquipmentMasterGeneralDocDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformEquipmentMasterGeneralDocDatumExists checks if the DataPlatformEquipmentMasterGeneralDocDatum row exists.
func DataPlatformEquipmentMasterGeneralDocDatumExists(ctx context.Context, exec boil.ContextExecutor, equipment int, docType string, docVersionID int, docID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_equipment_master_general_doc_data` where `Equipment`=? AND `DocType`=? AND `DocVersionID`=? AND `DocID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, equipment, docType, docVersionID, docID)
	}
	row := exec.QueryRowContext(ctx, sql, equipment, docType, docVersionID, docID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_equipment_master_general_doc_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformEquipmentMasterGeneralDocDatum row exists.
func (o *DataPlatformEquipmentMasterGeneralDocDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformEquipmentMasterGeneralDocDatumExists(ctx, exec, o.Equipment, o.DocType, o.DocVersionID, o.DocID)
}
