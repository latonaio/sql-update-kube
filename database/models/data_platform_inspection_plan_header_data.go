// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInspectionPlanHeaderDatum is an object representing the database table.
type DataPlatformInspectionPlanHeaderDatum struct {
	InspectionPlantBusinessPartner int         `boil:"InspectionPlantBusinessPartner" json:"InspectionPlantBusinessPartner" toml:"InspectionPlantBusinessPartner" yaml:"InspectionPlantBusinessPartner"`
	InspectionPlant                string      `boil:"InspectionPlant" json:"InspectionPlant" toml:"InspectionPlant" yaml:"InspectionPlant"`
	InspectionPlan                 int         `boil:"InspectionPlan" json:"InspectionPlan" toml:"InspectionPlan" yaml:"InspectionPlan"`
	InspectionPlanGroup            int         `boil:"InspectionPlanGroup" json:"InspectionPlanGroup" toml:"InspectionPlanGroup" yaml:"InspectionPlanGroup"`
	InspectionPlanInternalVersion  int         `boil:"InspectionPlanInternalVersion" json:"InspectionPlanInternalVersion" toml:"InspectionPlanInternalVersion" yaml:"InspectionPlanInternalVersion"`
	ValidityStartDate              null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate                null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	Product                        null.String `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	InspectionPlanText             null.String `boil:"InspectionPlanText" json:"InspectionPlanText,omitempty" toml:"InspectionPlanText" yaml:"InspectionPlanText,omitempty"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                 null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	IsMarkedForDeletion            null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`
	BusinessPartner                null.Int    `boil:"BusinessPartner" json:"BusinessPartner,omitempty" toml:"BusinessPartner" yaml:"BusinessPartner,omitempty"`
	Plant                          null.String `boil:"Plant" json:"Plant,omitempty" toml:"Plant" yaml:"Plant,omitempty"`

	R *dataPlatformInspectionPlanHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInspectionPlanHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInspectionPlanHeaderDatumColumns = struct {
	InspectionPlantBusinessPartner string
	InspectionPlant                string
	InspectionPlan                 string
	InspectionPlanGroup            string
	InspectionPlanInternalVersion  string
	ValidityStartDate              string
	ValidityEndDate                string
	Product                        string
	InspectionPlanText             string
	CreationDate                   string
	LastChangeDate                 string
	IsMarkedForDeletion            string
	BusinessPartner                string
	Plant                          string
}{
	InspectionPlantBusinessPartner: "InspectionPlantBusinessPartner",
	InspectionPlant:                "InspectionPlant",
	InspectionPlan:                 "InspectionPlan",
	InspectionPlanGroup:            "InspectionPlanGroup",
	InspectionPlanInternalVersion:  "InspectionPlanInternalVersion",
	ValidityStartDate:              "ValidityStartDate",
	ValidityEndDate:                "ValidityEndDate",
	Product:                        "Product",
	InspectionPlanText:             "InspectionPlanText",
	CreationDate:                   "CreationDate",
	LastChangeDate:                 "LastChangeDate",
	IsMarkedForDeletion:            "IsMarkedForDeletion",
	BusinessPartner:                "BusinessPartner",
	Plant:                          "Plant",
}

var DataPlatformInspectionPlanHeaderDatumTableColumns = struct {
	InspectionPlantBusinessPartner string
	InspectionPlant                string
	InspectionPlan                 string
	InspectionPlanGroup            string
	InspectionPlanInternalVersion  string
	ValidityStartDate              string
	ValidityEndDate                string
	Product                        string
	InspectionPlanText             string
	CreationDate                   string
	LastChangeDate                 string
	IsMarkedForDeletion            string
	BusinessPartner                string
	Plant                          string
}{
	InspectionPlantBusinessPartner: "data_platform_inspection_plan_header_data.InspectionPlantBusinessPartner",
	InspectionPlant:                "data_platform_inspection_plan_header_data.InspectionPlant",
	InspectionPlan:                 "data_platform_inspection_plan_header_data.InspectionPlan",
	InspectionPlanGroup:            "data_platform_inspection_plan_header_data.InspectionPlanGroup",
	InspectionPlanInternalVersion:  "data_platform_inspection_plan_header_data.InspectionPlanInternalVersion",
	ValidityStartDate:              "data_platform_inspection_plan_header_data.ValidityStartDate",
	ValidityEndDate:                "data_platform_inspection_plan_header_data.ValidityEndDate",
	Product:                        "data_platform_inspection_plan_header_data.Product",
	InspectionPlanText:             "data_platform_inspection_plan_header_data.InspectionPlanText",
	CreationDate:                   "data_platform_inspection_plan_header_data.CreationDate",
	LastChangeDate:                 "data_platform_inspection_plan_header_data.LastChangeDate",
	IsMarkedForDeletion:            "data_platform_inspection_plan_header_data.IsMarkedForDeletion",
	BusinessPartner:                "data_platform_inspection_plan_header_data.BusinessPartner",
	Plant:                          "data_platform_inspection_plan_header_data.Plant",
}

// Generated where

var DataPlatformInspectionPlanHeaderDatumWhere = struct {
	InspectionPlantBusinessPartner whereHelperint
	InspectionPlant                whereHelperstring
	InspectionPlan                 whereHelperint
	InspectionPlanGroup            whereHelperint
	InspectionPlanInternalVersion  whereHelperint
	ValidityStartDate              whereHelpernull_String
	ValidityEndDate                whereHelpernull_String
	Product                        whereHelpernull_String
	InspectionPlanText             whereHelpernull_String
	CreationDate                   whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	IsMarkedForDeletion            whereHelpernull_Bool
	BusinessPartner                whereHelpernull_Int
	Plant                          whereHelpernull_String
}{
	InspectionPlantBusinessPartner: whereHelperint{field: "`data_platform_inspection_plan_header_data`.`InspectionPlantBusinessPartner`"},
	InspectionPlant:                whereHelperstring{field: "`data_platform_inspection_plan_header_data`.`InspectionPlant`"},
	InspectionPlan:                 whereHelperint{field: "`data_platform_inspection_plan_header_data`.`InspectionPlan`"},
	InspectionPlanGroup:            whereHelperint{field: "`data_platform_inspection_plan_header_data`.`InspectionPlanGroup`"},
	InspectionPlanInternalVersion:  whereHelperint{field: "`data_platform_inspection_plan_header_data`.`InspectionPlanInternalVersion`"},
	ValidityStartDate:              whereHelpernull_String{field: "`data_platform_inspection_plan_header_data`.`ValidityStartDate`"},
	ValidityEndDate:                whereHelpernull_String{field: "`data_platform_inspection_plan_header_data`.`ValidityEndDate`"},
	Product:                        whereHelpernull_String{field: "`data_platform_inspection_plan_header_data`.`Product`"},
	InspectionPlanText:             whereHelpernull_String{field: "`data_platform_inspection_plan_header_data`.`InspectionPlanText`"},
	CreationDate:                   whereHelpernull_String{field: "`data_platform_inspection_plan_header_data`.`CreationDate`"},
	LastChangeDate:                 whereHelpernull_String{field: "`data_platform_inspection_plan_header_data`.`LastChangeDate`"},
	IsMarkedForDeletion:            whereHelpernull_Bool{field: "`data_platform_inspection_plan_header_data`.`IsMarkedForDeletion`"},
	BusinessPartner:                whereHelpernull_Int{field: "`data_platform_inspection_plan_header_data`.`BusinessPartner`"},
	Plant:                          whereHelpernull_String{field: "`data_platform_inspection_plan_header_data`.`Plant`"},
}

// DataPlatformInspectionPlanHeaderDatumRels is where relationship names are stored.
var DataPlatformInspectionPlanHeaderDatumRels = struct {
	ProductDataPlatformProductMasterGeneralDatum                     string
	InspectionPlantDataPlatformPlantGeneralDatum                     string
	InspectionPlanDataPlatformInspectionPlanComponentCompositionData string
	InspectionPlanDataPlatformInspectionPlanOperationData            string
	InspectionPlanDataPlatformInspectionPlanSpecData                 string
	InspectionPlanDataPlatformInspectionPlanTaskListData             string
}{
	ProductDataPlatformProductMasterGeneralDatum:                     "ProductDataPlatformProductMasterGeneralDatum",
	InspectionPlantDataPlatformPlantGeneralDatum:                     "InspectionPlantDataPlatformPlantGeneralDatum",
	InspectionPlanDataPlatformInspectionPlanComponentCompositionData: "InspectionPlanDataPlatformInspectionPlanComponentCompositionData",
	InspectionPlanDataPlatformInspectionPlanOperationData:            "InspectionPlanDataPlatformInspectionPlanOperationData",
	InspectionPlanDataPlatformInspectionPlanSpecData:                 "InspectionPlanDataPlatformInspectionPlanSpecData",
	InspectionPlanDataPlatformInspectionPlanTaskListData:             "InspectionPlanDataPlatformInspectionPlanTaskListData",
}

// dataPlatformInspectionPlanHeaderDatumR is where relationships are stored.
type dataPlatformInspectionPlanHeaderDatumR struct {
	ProductDataPlatformProductMasterGeneralDatum                     *DataPlatformProductMasterGeneralDatum                   `boil:"ProductDataPlatformProductMasterGeneralDatum" json:"ProductDataPlatformProductMasterGeneralDatum" toml:"ProductDataPlatformProductMasterGeneralDatum" yaml:"ProductDataPlatformProductMasterGeneralDatum"`
	InspectionPlantDataPlatformPlantGeneralDatum                     *DataPlatformPlantGeneralDatum                           `boil:"InspectionPlantDataPlatformPlantGeneralDatum" json:"InspectionPlantDataPlatformPlantGeneralDatum" toml:"InspectionPlantDataPlatformPlantGeneralDatum" yaml:"InspectionPlantDataPlatformPlantGeneralDatum"`
	InspectionPlanDataPlatformInspectionPlanComponentCompositionData DataPlatformInspectionPlanComponentCompositionDatumSlice `boil:"InspectionPlanDataPlatformInspectionPlanComponentCompositionData" json:"InspectionPlanDataPlatformInspectionPlanComponentCompositionData" toml:"InspectionPlanDataPlatformInspectionPlanComponentCompositionData" yaml:"InspectionPlanDataPlatformInspectionPlanComponentCompositionData"`
	InspectionPlanDataPlatformInspectionPlanOperationData            DataPlatformInspectionPlanOperationDatumSlice            `boil:"InspectionPlanDataPlatformInspectionPlanOperationData" json:"InspectionPlanDataPlatformInspectionPlanOperationData" toml:"InspectionPlanDataPlatformInspectionPlanOperationData" yaml:"InspectionPlanDataPlatformInspectionPlanOperationData"`
	InspectionPlanDataPlatformInspectionPlanSpecData                 DataPlatformInspectionPlanSpecDatumSlice                 `boil:"InspectionPlanDataPlatformInspectionPlanSpecData" json:"InspectionPlanDataPlatformInspectionPlanSpecData" toml:"InspectionPlanDataPlatformInspectionPlanSpecData" yaml:"InspectionPlanDataPlatformInspectionPlanSpecData"`
	InspectionPlanDataPlatformInspectionPlanTaskListData             DataPlatformInspectionPlanTaskListDatumSlice             `boil:"InspectionPlanDataPlatformInspectionPlanTaskListData" json:"InspectionPlanDataPlatformInspectionPlanTaskListData" toml:"InspectionPlanDataPlatformInspectionPlanTaskListData" yaml:"InspectionPlanDataPlatformInspectionPlanTaskListData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInspectionPlanHeaderDatumR) NewStruct() *dataPlatformInspectionPlanHeaderDatumR {
	return &dataPlatformInspectionPlanHeaderDatumR{}
}

func (r *dataPlatformInspectionPlanHeaderDatumR) GetProductDataPlatformProductMasterGeneralDatum() *DataPlatformProductMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformProductMasterGeneralDatum
}

func (r *dataPlatformInspectionPlanHeaderDatumR) GetInspectionPlantDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.InspectionPlantDataPlatformPlantGeneralDatum
}

func (r *dataPlatformInspectionPlanHeaderDatumR) GetInspectionPlanDataPlatformInspectionPlanComponentCompositionData() DataPlatformInspectionPlanComponentCompositionDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionPlanDataPlatformInspectionPlanComponentCompositionData
}

func (r *dataPlatformInspectionPlanHeaderDatumR) GetInspectionPlanDataPlatformInspectionPlanOperationData() DataPlatformInspectionPlanOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionPlanDataPlatformInspectionPlanOperationData
}

func (r *dataPlatformInspectionPlanHeaderDatumR) GetInspectionPlanDataPlatformInspectionPlanSpecData() DataPlatformInspectionPlanSpecDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionPlanDataPlatformInspectionPlanSpecData
}

func (r *dataPlatformInspectionPlanHeaderDatumR) GetInspectionPlanDataPlatformInspectionPlanTaskListData() DataPlatformInspectionPlanTaskListDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionPlanDataPlatformInspectionPlanTaskListData
}

// dataPlatformInspectionPlanHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformInspectionPlanHeaderDatumL struct{}

var (
	dataPlatformInspectionPlanHeaderDatumAllColumns            = []string{"InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionPlanGroup", "InspectionPlanInternalVersion", "ValidityStartDate", "ValidityEndDate", "Product", "InspectionPlanText", "CreationDate", "LastChangeDate", "IsMarkedForDeletion", "BusinessPartner", "Plant"}
	dataPlatformInspectionPlanHeaderDatumColumnsWithoutDefault = []string{"InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionPlanGroup", "InspectionPlanInternalVersion", "ValidityStartDate", "ValidityEndDate", "Product", "InspectionPlanText", "CreationDate", "LastChangeDate", "IsMarkedForDeletion", "BusinessPartner", "Plant"}
	dataPlatformInspectionPlanHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns     = []string{"InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionPlanGroup", "InspectionPlanInternalVersion"}
	dataPlatformInspectionPlanHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInspectionPlanHeaderDatumSlice is an alias for a slice of pointers to DataPlatformInspectionPlanHeaderDatum.
	// This should almost always be used instead of []DataPlatformInspectionPlanHeaderDatum.
	DataPlatformInspectionPlanHeaderDatumSlice []*DataPlatformInspectionPlanHeaderDatum

	dataPlatformInspectionPlanHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInspectionPlanHeaderDatumType                 = reflect.TypeOf(&DataPlatformInspectionPlanHeaderDatum{})
	dataPlatformInspectionPlanHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformInspectionPlanHeaderDatumType)
	dataPlatformInspectionPlanHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInspectionPlanHeaderDatumType, dataPlatformInspectionPlanHeaderDatumMapping, dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns)
	dataPlatformInspectionPlanHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformInspectionPlanHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInspectionPlanHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInspectionPlanHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInspectionPlanHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInspectionPlanHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInspectionPlanHeaderDatum record from the query.
func (q dataPlatformInspectionPlanHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInspectionPlanHeaderDatum, error) {
	o := &DataPlatformInspectionPlanHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_inspection_plan_header_data")
	}

	return o, nil
}

// All returns all DataPlatformInspectionPlanHeaderDatum records from the query.
func (q dataPlatformInspectionPlanHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInspectionPlanHeaderDatumSlice, error) {
	var o []*DataPlatformInspectionPlanHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInspectionPlanHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInspectionPlanHeaderDatum records in the query.
func (q dataPlatformInspectionPlanHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_inspection_plan_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInspectionPlanHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_inspection_plan_header_data exists")
	}

	return count > 0, nil
}

// ProductDataPlatformProductMasterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformInspectionPlanHeaderDatum) ProductDataPlatformProductMasterGeneralDatum(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// InspectionPlantDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformInspectionPlanHeaderDatum) InspectionPlantDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Plant` = ?", o.InspectionPlant),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// InspectionPlanDataPlatformInspectionPlanComponentCompositionData retrieves all the data_platform_inspection_plan_component_composition_datum's DataPlatformInspectionPlanComponentCompositionData with an executor via InspectionPlan column.
func (o *DataPlatformInspectionPlanHeaderDatum) InspectionPlanDataPlatformInspectionPlanComponentCompositionData(mods ...qm.QueryMod) dataPlatformInspectionPlanComponentCompositionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_plan_component_composition_data`.`InspectionPlan`=?", o.InspectionPlan),
	)

	return DataPlatformInspectionPlanComponentCompositionData(queryMods...)
}

// InspectionPlanDataPlatformInspectionPlanOperationData retrieves all the data_platform_inspection_plan_operation_datum's DataPlatformInspectionPlanOperationData with an executor via InspectionPlan column.
func (o *DataPlatformInspectionPlanHeaderDatum) InspectionPlanDataPlatformInspectionPlanOperationData(mods ...qm.QueryMod) dataPlatformInspectionPlanOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_plan_operation_data`.`InspectionPlan`=?", o.InspectionPlan),
	)

	return DataPlatformInspectionPlanOperationData(queryMods...)
}

// InspectionPlanDataPlatformInspectionPlanSpecData retrieves all the data_platform_inspection_plan_spec_datum's DataPlatformInspectionPlanSpecData with an executor via InspectionPlan column.
func (o *DataPlatformInspectionPlanHeaderDatum) InspectionPlanDataPlatformInspectionPlanSpecData(mods ...qm.QueryMod) dataPlatformInspectionPlanSpecDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_plan_spec_data`.`InspectionPlan`=?", o.InspectionPlan),
	)

	return DataPlatformInspectionPlanSpecData(queryMods...)
}

// InspectionPlanDataPlatformInspectionPlanTaskListData retrieves all the data_platform_inspection_plan_task_list_datum's DataPlatformInspectionPlanTaskListData with an executor via InspectionPlan column.
func (o *DataPlatformInspectionPlanHeaderDatum) InspectionPlanDataPlatformInspectionPlanTaskListData(mods ...qm.QueryMod) dataPlatformInspectionPlanTaskListDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_plan_task_list_data`.`InspectionPlan`=?", o.InspectionPlan),
	)

	return DataPlatformInspectionPlanTaskListData(queryMods...)
}

// LoadProductDataPlatformProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionPlanHeaderDatumL) LoadProductDataPlatformProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionPlanHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionPlanHeaderDatum
	var object *DataPlatformInspectionPlanHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionPlanHeaderDatum.(*DataPlatformInspectionPlanHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionPlanHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionPlanHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionPlanHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionPlanHeaderDatum.(*[]*DataPlatformInspectionPlanHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionPlanHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionPlanHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionPlanHeaderDatumR{}
		}
		if !queries.IsNil(object.Product) {
			args = append(args, object.Product)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionPlanHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Product) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Product) {
				args = append(args, obj.Product)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterGeneralDatum")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDataPlatformProductMasterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Product, foreign.Product) {
				local.R.ProductDataPlatformProductMasterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlantDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionPlanHeaderDatumL) LoadInspectionPlantDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionPlanHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionPlanHeaderDatum
	var object *DataPlatformInspectionPlanHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionPlanHeaderDatum.(*DataPlatformInspectionPlanHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionPlanHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionPlanHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionPlanHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionPlanHeaderDatum.(*[]*DataPlatformInspectionPlanHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionPlanHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionPlanHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionPlanHeaderDatumR{}
		}
		args = append(args, object.InspectionPlant)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionPlanHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionPlant {
					continue Outer
				}
			}

			args = append(args, obj.InspectionPlant)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.Plant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionPlantDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InspectionPlant == foreign.Plant {
				local.R.InspectionPlantDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlanDataPlatformInspectionPlanComponentCompositionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionPlanHeaderDatumL) LoadInspectionPlanDataPlatformInspectionPlanComponentCompositionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionPlanHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionPlanHeaderDatum
	var object *DataPlatformInspectionPlanHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionPlanHeaderDatum.(*DataPlatformInspectionPlanHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionPlanHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionPlanHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionPlanHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionPlanHeaderDatum.(*[]*DataPlatformInspectionPlanHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionPlanHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionPlanHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionPlanHeaderDatumR{}
		}
		args = append(args, object.InspectionPlan)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionPlanHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionPlan {
					continue Outer
				}
			}

			args = append(args, obj.InspectionPlan)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_component_composition_data`),
		qm.WhereIn(`data_platform_inspection_plan_component_composition_data.InspectionPlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_plan_component_composition_data")
	}

	var resultSlice []*DataPlatformInspectionPlanComponentCompositionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_plan_component_composition_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_plan_component_composition_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_component_composition_data")
	}

	if singular {
		object.R.InspectionPlanDataPlatformInspectionPlanComponentCompositionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InspectionPlan == foreign.InspectionPlan {
				local.R.InspectionPlanDataPlatformInspectionPlanComponentCompositionData = append(local.R.InspectionPlanDataPlatformInspectionPlanComponentCompositionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlanDataPlatformInspectionPlanOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionPlanHeaderDatumL) LoadInspectionPlanDataPlatformInspectionPlanOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionPlanHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionPlanHeaderDatum
	var object *DataPlatformInspectionPlanHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionPlanHeaderDatum.(*DataPlatformInspectionPlanHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionPlanHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionPlanHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionPlanHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionPlanHeaderDatum.(*[]*DataPlatformInspectionPlanHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionPlanHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionPlanHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionPlanHeaderDatumR{}
		}
		args = append(args, object.InspectionPlan)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionPlanHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionPlan {
					continue Outer
				}
			}

			args = append(args, obj.InspectionPlan)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_operation_data`),
		qm.WhereIn(`data_platform_inspection_plan_operation_data.InspectionPlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_plan_operation_data")
	}

	var resultSlice []*DataPlatformInspectionPlanOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_plan_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_plan_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_operation_data")
	}

	if singular {
		object.R.InspectionPlanDataPlatformInspectionPlanOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InspectionPlan == foreign.InspectionPlan {
				local.R.InspectionPlanDataPlatformInspectionPlanOperationData = append(local.R.InspectionPlanDataPlatformInspectionPlanOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlanDataPlatformInspectionPlanSpecData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionPlanHeaderDatumL) LoadInspectionPlanDataPlatformInspectionPlanSpecData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionPlanHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionPlanHeaderDatum
	var object *DataPlatformInspectionPlanHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionPlanHeaderDatum.(*DataPlatformInspectionPlanHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionPlanHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionPlanHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionPlanHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionPlanHeaderDatum.(*[]*DataPlatformInspectionPlanHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionPlanHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionPlanHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionPlanHeaderDatumR{}
		}
		args = append(args, object.InspectionPlan)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionPlanHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionPlan {
					continue Outer
				}
			}

			args = append(args, obj.InspectionPlan)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_spec_data`),
		qm.WhereIn(`data_platform_inspection_plan_spec_data.InspectionPlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_plan_spec_data")
	}

	var resultSlice []*DataPlatformInspectionPlanSpecDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_plan_spec_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_plan_spec_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_spec_data")
	}

	if singular {
		object.R.InspectionPlanDataPlatformInspectionPlanSpecData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InspectionPlan == foreign.InspectionPlan {
				local.R.InspectionPlanDataPlatformInspectionPlanSpecData = append(local.R.InspectionPlanDataPlatformInspectionPlanSpecData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlanDataPlatformInspectionPlanTaskListData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionPlanHeaderDatumL) LoadInspectionPlanDataPlatformInspectionPlanTaskListData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionPlanHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionPlanHeaderDatum
	var object *DataPlatformInspectionPlanHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionPlanHeaderDatum.(*DataPlatformInspectionPlanHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionPlanHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionPlanHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionPlanHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionPlanHeaderDatum.(*[]*DataPlatformInspectionPlanHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionPlanHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionPlanHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionPlanHeaderDatumR{}
		}
		args = append(args, object.InspectionPlan)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionPlanHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionPlan {
					continue Outer
				}
			}

			args = append(args, obj.InspectionPlan)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_task_list_data`),
		qm.WhereIn(`data_platform_inspection_plan_task_list_data.InspectionPlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_plan_task_list_data")
	}

	var resultSlice []*DataPlatformInspectionPlanTaskListDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_plan_task_list_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_plan_task_list_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_task_list_data")
	}

	if singular {
		object.R.InspectionPlanDataPlatformInspectionPlanTaskListData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InspectionPlan == foreign.InspectionPlan {
				local.R.InspectionPlanDataPlatformInspectionPlanTaskListData = append(local.R.InspectionPlanDataPlatformInspectionPlanTaskListData, foreign)
				break
			}
		}
	}

	return nil
}

// SetProductDataPlatformProductMasterGeneralDatum of the dataPlatformInspectionPlanHeaderDatum to the related item.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum to related.
func (o *DataPlatformInspectionPlanHeaderDatum) SetProductDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_plan_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanGroup, o.InspectionPlanInternalVersion}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Product, related.Product)
	if o.R == nil {
		o.R = &dataPlatformInspectionPlanHeaderDatumR{
			ProductDataPlatformProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductDataPlatformProductMasterGeneralDatum = related
	}

	return nil
}

// RemoveProductDataPlatformProductMasterGeneralDatum relationship.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum to nil.
func (o *DataPlatformInspectionPlanHeaderDatum) RemoveProductDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductMasterGeneralDatum) error {
	var err error

	queries.SetScanner(&o.Product, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Product")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductDataPlatformProductMasterGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetInspectionPlantDataPlatformPlantGeneralDatum of the dataPlatformInspectionPlanHeaderDatum to the related item.
// Sets o.R.InspectionPlantDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformInspectionPlanHeaderDatum) SetInspectionPlantDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_plan_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlant"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Plant, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanGroup, o.InspectionPlanInternalVersion}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InspectionPlant = related.Plant
	if o.R == nil {
		o.R = &dataPlatformInspectionPlanHeaderDatumR{
			InspectionPlantDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.InspectionPlantDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// AddInspectionPlanDataPlatformInspectionPlanComponentCompositionData adds the given related objects to the existing relationships
// of the data_platform_inspection_plan_header_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionPlanDataPlatformInspectionPlanComponentCompositionData.
func (o *DataPlatformInspectionPlanHeaderDatum) AddInspectionPlanDataPlatformInspectionPlanComponentCompositionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionPlanComponentCompositionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionPlan = o.InspectionPlan
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_plan_component_composition_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlan"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InspectionPlan, rel.InspectionPlantBusinessPartner, rel.InspectionPlant, rel.InspectionPlan, rel.InspectionPlanGroup, rel.InspectionPlanInternalVersion, rel.ComponentCompositionType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionPlan = o.InspectionPlan
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionPlanHeaderDatumR{
			InspectionPlanDataPlatformInspectionPlanComponentCompositionData: related,
		}
	} else {
		o.R.InspectionPlanDataPlatformInspectionPlanComponentCompositionData = append(o.R.InspectionPlanDataPlatformInspectionPlanComponentCompositionData, related...)
	}

	return nil
}

// AddInspectionPlanDataPlatformInspectionPlanOperationData adds the given related objects to the existing relationships
// of the data_platform_inspection_plan_header_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionPlanDataPlatformInspectionPlanOperationData.
func (o *DataPlatformInspectionPlanHeaderDatum) AddInspectionPlanDataPlatformInspectionPlanOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionPlanOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionPlan = o.InspectionPlan
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_plan_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlan"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InspectionPlan, rel.InspectionPlantBusinessPartner, rel.InspectionPlant, rel.InspectionPlan, rel.InspectionPlanOperationGroup, rel.InspectionPlanInternalVersion, rel.InspectionPlanOperation, rel.InspectionPlanOperationSequence}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionPlan = o.InspectionPlan
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionPlanHeaderDatumR{
			InspectionPlanDataPlatformInspectionPlanOperationData: related,
		}
	} else {
		o.R.InspectionPlanDataPlatformInspectionPlanOperationData = append(o.R.InspectionPlanDataPlatformInspectionPlanOperationData, related...)
	}

	return nil
}

// AddInspectionPlanDataPlatformInspectionPlanSpecData adds the given related objects to the existing relationships
// of the data_platform_inspection_plan_header_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionPlanDataPlatformInspectionPlanSpecData.
func (o *DataPlatformInspectionPlanHeaderDatum) AddInspectionPlanDataPlatformInspectionPlanSpecData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionPlanSpecDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionPlan = o.InspectionPlan
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_plan_spec_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlan"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanSpecDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InspectionPlan, rel.InspectionPlantBusinessPartner, rel.InspectionPlant, rel.InspectionPlan, rel.InspectionPlanGroup, rel.InspectionPlanInternalVersion, rel.SpecType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionPlan = o.InspectionPlan
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionPlanHeaderDatumR{
			InspectionPlanDataPlatformInspectionPlanSpecData: related,
		}
	} else {
		o.R.InspectionPlanDataPlatformInspectionPlanSpecData = append(o.R.InspectionPlanDataPlatformInspectionPlanSpecData, related...)
	}

	return nil
}

// AddInspectionPlanDataPlatformInspectionPlanTaskListData adds the given related objects to the existing relationships
// of the data_platform_inspection_plan_header_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionPlanDataPlatformInspectionPlanTaskListData.
func (o *DataPlatformInspectionPlanHeaderDatum) AddInspectionPlanDataPlatformInspectionPlanTaskListData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionPlanTaskListDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionPlan = o.InspectionPlan
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_plan_task_list_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlan"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanTaskListDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InspectionPlan, rel.InspectionPlantBusinessPartner, rel.InspectionPlant, rel.InspectionPlan, rel.InspectionPlanGroup, rel.InspectionPlanInternalVersion, rel.InspectionPlanTaskList}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionPlan = o.InspectionPlan
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionPlanHeaderDatumR{
			InspectionPlanDataPlatformInspectionPlanTaskListData: related,
		}
	} else {
		o.R.InspectionPlanDataPlatformInspectionPlanTaskListData = append(o.R.InspectionPlanDataPlatformInspectionPlanTaskListData, related...)
	}

	return nil
}

// DataPlatformInspectionPlanHeaderData retrieves all the records using an executor.
func DataPlatformInspectionPlanHeaderData(mods ...qm.QueryMod) dataPlatformInspectionPlanHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_inspection_plan_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_inspection_plan_header_data`.*"})
	}

	return dataPlatformInspectionPlanHeaderDatumQuery{q}
}

// FindDataPlatformInspectionPlanHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInspectionPlanHeaderDatum(ctx context.Context, exec boil.ContextExecutor, inspectionPlantBusinessPartner int, inspectionPlant string, inspectionPlan int, inspectionPlanGroup int, inspectionPlanInternalVersion int, selectCols ...string) (*DataPlatformInspectionPlanHeaderDatum, error) {
	dataPlatformInspectionPlanHeaderDatumObj := &DataPlatformInspectionPlanHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_inspection_plan_header_data` where `InspectionPlantBusinessPartner`=? AND `InspectionPlant`=? AND `InspectionPlan`=? AND `InspectionPlanGroup`=? AND `InspectionPlanInternalVersion`=?", sel,
	)

	q := queries.Raw(query, inspectionPlantBusinessPartner, inspectionPlant, inspectionPlan, inspectionPlanGroup, inspectionPlanInternalVersion)

	err := q.Bind(ctx, exec, dataPlatformInspectionPlanHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_inspection_plan_header_data")
	}

	return dataPlatformInspectionPlanHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInspectionPlanHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_plan_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionPlanHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInspectionPlanHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanHeaderDatumInsertCache[key]
	dataPlatformInspectionPlanHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInspectionPlanHeaderDatumAllColumns,
			dataPlatformInspectionPlanHeaderDatumColumnsWithDefault,
			dataPlatformInspectionPlanHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanHeaderDatumType, dataPlatformInspectionPlanHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInspectionPlanHeaderDatumType, dataPlatformInspectionPlanHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_inspection_plan_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_inspection_plan_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_inspection_plan_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_inspection_plan_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InspectionPlantBusinessPartner,
		o.InspectionPlant,
		o.InspectionPlan,
		o.InspectionPlanGroup,
		o.InspectionPlanInternalVersion,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_plan_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionPlanHeaderDatumInsertCacheMut.Lock()
		dataPlatformInspectionPlanHeaderDatumInsertCache[key] = cache
		dataPlatformInspectionPlanHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInspectionPlanHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInspectionPlanHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInspectionPlanHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanHeaderDatumUpdateCache[key]
	dataPlatformInspectionPlanHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInspectionPlanHeaderDatumAllColumns,
			dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_inspection_plan_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_inspection_plan_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanHeaderDatumType, dataPlatformInspectionPlanHeaderDatumMapping, append(wl, dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_inspection_plan_header_data row")
	}

	if !cached {
		dataPlatformInspectionPlanHeaderDatumUpdateCacheMut.Lock()
		dataPlatformInspectionPlanHeaderDatumUpdateCache[key] = cache
		dataPlatformInspectionPlanHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInspectionPlanHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_inspection_plan_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInspectionPlanHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_inspection_plan_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInspectionPlanHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformInspectionPlanHeaderDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInspectionPlanHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_plan_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionPlanHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInspectionPlanHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInspectionPlanHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanHeaderDatumUpsertCache[key]
	dataPlatformInspectionPlanHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInspectionPlanHeaderDatumAllColumns,
			dataPlatformInspectionPlanHeaderDatumColumnsWithDefault,
			dataPlatformInspectionPlanHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInspectionPlanHeaderDatumAllColumns,
			dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_inspection_plan_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_inspection_plan_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_inspection_plan_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanHeaderDatumType, dataPlatformInspectionPlanHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInspectionPlanHeaderDatumType, dataPlatformInspectionPlanHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_inspection_plan_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInspectionPlanHeaderDatumType, dataPlatformInspectionPlanHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_inspection_plan_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_plan_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionPlanHeaderDatumUpsertCacheMut.Lock()
		dataPlatformInspectionPlanHeaderDatumUpsertCache[key] = cache
		dataPlatformInspectionPlanHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInspectionPlanHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInspectionPlanHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInspectionPlanHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInspectionPlanHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_inspection_plan_header_data` WHERE `InspectionPlantBusinessPartner`=? AND `InspectionPlant`=? AND `InspectionPlan`=? AND `InspectionPlanGroup`=? AND `InspectionPlanInternalVersion`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_inspection_plan_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInspectionPlanHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInspectionPlanHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_inspection_plan_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInspectionPlanHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_inspection_plan_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInspectionPlanHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInspectionPlanHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInspectionPlanHeaderDatum(ctx, exec, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanGroup, o.InspectionPlanInternalVersion)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInspectionPlanHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInspectionPlanHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_inspection_plan_header_data`.* FROM `data_platform_inspection_plan_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInspectionPlanHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInspectionPlanHeaderDatumExists checks if the DataPlatformInspectionPlanHeaderDatum row exists.
func DataPlatformInspectionPlanHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, inspectionPlantBusinessPartner int, inspectionPlant string, inspectionPlan int, inspectionPlanGroup int, inspectionPlanInternalVersion int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_inspection_plan_header_data` where `InspectionPlantBusinessPartner`=? AND `InspectionPlant`=? AND `InspectionPlan`=? AND `InspectionPlanGroup`=? AND `InspectionPlanInternalVersion`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inspectionPlantBusinessPartner, inspectionPlant, inspectionPlan, inspectionPlanGroup, inspectionPlanInternalVersion)
	}
	row := exec.QueryRowContext(ctx, sql, inspectionPlantBusinessPartner, inspectionPlant, inspectionPlan, inspectionPlanGroup, inspectionPlanInternalVersion)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_inspection_plan_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInspectionPlanHeaderDatum row exists.
func (o *DataPlatformInspectionPlanHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInspectionPlanHeaderDatumExists(ctx, exec, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanGroup, o.InspectionPlanInternalVersion)
}
