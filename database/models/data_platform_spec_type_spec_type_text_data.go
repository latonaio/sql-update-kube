// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSpecTypeSpecTypeTextDatum is an object representing the database table.
type DataPlatformSpecTypeSpecTypeTextDatum struct {
	SpecType            string    `boil:"SpecType" json:"SpecType" toml:"SpecType" yaml:"SpecType"`
	Language            string    `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	SpecTypeName        string    `boil:"SpecTypeName" json:"SpecTypeName" toml:"SpecTypeName" yaml:"SpecTypeName"`
	CreationDate        string    `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate      string    `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion null.Bool `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSpecTypeSpecTypeTextDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSpecTypeSpecTypeTextDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSpecTypeSpecTypeTextDatumColumns = struct {
	SpecType            string
	Language            string
	SpecTypeName        string
	CreationDate        string
	LastChangeDate      string
	IsMarkedForDeletion string
}{
	SpecType:            "SpecType",
	Language:            "Language",
	SpecTypeName:        "SpecTypeName",
	CreationDate:        "CreationDate",
	LastChangeDate:      "LastChangeDate",
	IsMarkedForDeletion: "IsMarkedForDeletion",
}

var DataPlatformSpecTypeSpecTypeTextDatumTableColumns = struct {
	SpecType            string
	Language            string
	SpecTypeName        string
	CreationDate        string
	LastChangeDate      string
	IsMarkedForDeletion string
}{
	SpecType:            "data_platform_spec_type_spec_type_text_data.SpecType",
	Language:            "data_platform_spec_type_spec_type_text_data.Language",
	SpecTypeName:        "data_platform_spec_type_spec_type_text_data.SpecTypeName",
	CreationDate:        "data_platform_spec_type_spec_type_text_data.CreationDate",
	LastChangeDate:      "data_platform_spec_type_spec_type_text_data.LastChangeDate",
	IsMarkedForDeletion: "data_platform_spec_type_spec_type_text_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSpecTypeSpecTypeTextDatumWhere = struct {
	SpecType            whereHelperstring
	Language            whereHelperstring
	SpecTypeName        whereHelperstring
	CreationDate        whereHelperstring
	LastChangeDate      whereHelperstring
	IsMarkedForDeletion whereHelpernull_Bool
}{
	SpecType:            whereHelperstring{field: "`data_platform_spec_type_spec_type_text_data`.`SpecType`"},
	Language:            whereHelperstring{field: "`data_platform_spec_type_spec_type_text_data`.`Language`"},
	SpecTypeName:        whereHelperstring{field: "`data_platform_spec_type_spec_type_text_data`.`SpecTypeName`"},
	CreationDate:        whereHelperstring{field: "`data_platform_spec_type_spec_type_text_data`.`CreationDate`"},
	LastChangeDate:      whereHelperstring{field: "`data_platform_spec_type_spec_type_text_data`.`LastChangeDate`"},
	IsMarkedForDeletion: whereHelpernull_Bool{field: "`data_platform_spec_type_spec_type_text_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSpecTypeSpecTypeTextDatumRels is where relationship names are stored.
var DataPlatformSpecTypeSpecTypeTextDatumRels = struct {
	LanguageDataPlatformLanguageLanguageDatum string
	SpecTypeDataPlatformSpecTypeSpecTypeDatum string
}{
	LanguageDataPlatformLanguageLanguageDatum: "LanguageDataPlatformLanguageLanguageDatum",
	SpecTypeDataPlatformSpecTypeSpecTypeDatum: "SpecTypeDataPlatformSpecTypeSpecTypeDatum",
}

// dataPlatformSpecTypeSpecTypeTextDatumR is where relationships are stored.
type dataPlatformSpecTypeSpecTypeTextDatumR struct {
	LanguageDataPlatformLanguageLanguageDatum *DataPlatformLanguageLanguageDatum `boil:"LanguageDataPlatformLanguageLanguageDatum" json:"LanguageDataPlatformLanguageLanguageDatum" toml:"LanguageDataPlatformLanguageLanguageDatum" yaml:"LanguageDataPlatformLanguageLanguageDatum"`
	SpecTypeDataPlatformSpecTypeSpecTypeDatum *DataPlatformSpecTypeSpecTypeDatum `boil:"SpecTypeDataPlatformSpecTypeSpecTypeDatum" json:"SpecTypeDataPlatformSpecTypeSpecTypeDatum" toml:"SpecTypeDataPlatformSpecTypeSpecTypeDatum" yaml:"SpecTypeDataPlatformSpecTypeSpecTypeDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSpecTypeSpecTypeTextDatumR) NewStruct() *dataPlatformSpecTypeSpecTypeTextDatumR {
	return &dataPlatformSpecTypeSpecTypeTextDatumR{}
}

func (r *dataPlatformSpecTypeSpecTypeTextDatumR) GetLanguageDataPlatformLanguageLanguageDatum() *DataPlatformLanguageLanguageDatum {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformLanguageLanguageDatum
}

func (r *dataPlatformSpecTypeSpecTypeTextDatumR) GetSpecTypeDataPlatformSpecTypeSpecTypeDatum() *DataPlatformSpecTypeSpecTypeDatum {
	if r == nil {
		return nil
	}
	return r.SpecTypeDataPlatformSpecTypeSpecTypeDatum
}

// dataPlatformSpecTypeSpecTypeTextDatumL is where Load methods for each relationship are stored.
type dataPlatformSpecTypeSpecTypeTextDatumL struct{}

var (
	dataPlatformSpecTypeSpecTypeTextDatumAllColumns            = []string{"SpecType", "Language", "SpecTypeName", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSpecTypeSpecTypeTextDatumColumnsWithoutDefault = []string{"SpecType", "Language", "SpecTypeName", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSpecTypeSpecTypeTextDatumColumnsWithDefault    = []string{}
	dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns     = []string{"SpecType", "Language"}
	dataPlatformSpecTypeSpecTypeTextDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSpecTypeSpecTypeTextDatumSlice is an alias for a slice of pointers to DataPlatformSpecTypeSpecTypeTextDatum.
	// This should almost always be used instead of []DataPlatformSpecTypeSpecTypeTextDatum.
	DataPlatformSpecTypeSpecTypeTextDatumSlice []*DataPlatformSpecTypeSpecTypeTextDatum

	dataPlatformSpecTypeSpecTypeTextDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSpecTypeSpecTypeTextDatumType                 = reflect.TypeOf(&DataPlatformSpecTypeSpecTypeTextDatum{})
	dataPlatformSpecTypeSpecTypeTextDatumMapping              = queries.MakeStructMapping(dataPlatformSpecTypeSpecTypeTextDatumType)
	dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSpecTypeSpecTypeTextDatumType, dataPlatformSpecTypeSpecTypeTextDatumMapping, dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns)
	dataPlatformSpecTypeSpecTypeTextDatumInsertCacheMut       sync.RWMutex
	dataPlatformSpecTypeSpecTypeTextDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSpecTypeSpecTypeTextDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSpecTypeSpecTypeTextDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSpecTypeSpecTypeTextDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSpecTypeSpecTypeTextDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSpecTypeSpecTypeTextDatum record from the query.
func (q dataPlatformSpecTypeSpecTypeTextDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSpecTypeSpecTypeTextDatum, error) {
	o := &DataPlatformSpecTypeSpecTypeTextDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_spec_type_spec_type_text_data")
	}

	return o, nil
}

// All returns all DataPlatformSpecTypeSpecTypeTextDatum records from the query.
func (q dataPlatformSpecTypeSpecTypeTextDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSpecTypeSpecTypeTextDatumSlice, error) {
	var o []*DataPlatformSpecTypeSpecTypeTextDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSpecTypeSpecTypeTextDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSpecTypeSpecTypeTextDatum records in the query.
func (q dataPlatformSpecTypeSpecTypeTextDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_spec_type_spec_type_text_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSpecTypeSpecTypeTextDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_spec_type_spec_type_text_data exists")
	}

	return count > 0, nil
}

// LanguageDataPlatformLanguageLanguageDatum pointed to by the foreign key.
func (o *DataPlatformSpecTypeSpecTypeTextDatum) LanguageDataPlatformLanguageLanguageDatum(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.Language),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformLanguageLanguageData(queryMods...)
}

// SpecTypeDataPlatformSpecTypeSpecTypeDatum pointed to by the foreign key.
func (o *DataPlatformSpecTypeSpecTypeTextDatum) SpecTypeDataPlatformSpecTypeSpecTypeDatum(mods ...qm.QueryMod) dataPlatformSpecTypeSpecTypeDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`SpecType` = ?", o.SpecType),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSpecTypeSpecTypeData(queryMods...)
}

// LoadLanguageDataPlatformLanguageLanguageDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSpecTypeSpecTypeTextDatumL) LoadLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSpecTypeSpecTypeTextDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSpecTypeSpecTypeTextDatum
	var object *DataPlatformSpecTypeSpecTypeTextDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSpecTypeSpecTypeTextDatum.(*DataPlatformSpecTypeSpecTypeTextDatum)
		if !ok {
			object = new(DataPlatformSpecTypeSpecTypeTextDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSpecTypeSpecTypeTextDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSpecTypeSpecTypeTextDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSpecTypeSpecTypeTextDatum.(*[]*DataPlatformSpecTypeSpecTypeTextDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSpecTypeSpecTypeTextDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSpecTypeSpecTypeTextDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSpecTypeSpecTypeTextDatumR{}
		}
		args = append(args, object.Language)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSpecTypeSpecTypeTextDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_data`),
		qm.WhereIn(`data_platform_language_language_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformLanguageLanguageDatum")
	}

	var resultSlice []*DataPlatformLanguageLanguageDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformLanguageLanguageDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_language_language_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LanguageDataPlatformLanguageLanguageDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformLanguageLanguageDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadSpecTypeDataPlatformSpecTypeSpecTypeDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSpecTypeSpecTypeTextDatumL) LoadSpecTypeDataPlatformSpecTypeSpecTypeDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSpecTypeSpecTypeTextDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSpecTypeSpecTypeTextDatum
	var object *DataPlatformSpecTypeSpecTypeTextDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSpecTypeSpecTypeTextDatum.(*DataPlatformSpecTypeSpecTypeTextDatum)
		if !ok {
			object = new(DataPlatformSpecTypeSpecTypeTextDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSpecTypeSpecTypeTextDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSpecTypeSpecTypeTextDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSpecTypeSpecTypeTextDatum.(*[]*DataPlatformSpecTypeSpecTypeTextDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSpecTypeSpecTypeTextDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSpecTypeSpecTypeTextDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSpecTypeSpecTypeTextDatumR{}
		}
		args = append(args, object.SpecType)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSpecTypeSpecTypeTextDatumR{}
			}

			for _, a := range args {
				if a == obj.SpecType {
					continue Outer
				}
			}

			args = append(args, obj.SpecType)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_spec_type_spec_type_data`),
		qm.WhereIn(`data_platform_spec_type_spec_type_data.SpecType in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSpecTypeSpecTypeDatum")
	}

	var resultSlice []*DataPlatformSpecTypeSpecTypeDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSpecTypeSpecTypeDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_spec_type_spec_type_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_spec_type_spec_type_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SpecTypeDataPlatformSpecTypeSpecTypeDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SpecType == foreign.SpecType {
				local.R.SpecTypeDataPlatformSpecTypeSpecTypeDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetLanguageDataPlatformLanguageLanguageDatum of the dataPlatformSpecTypeSpecTypeTextDatum to the related item.
// Sets o.R.LanguageDataPlatformLanguageLanguageDatum to related.
func (o *DataPlatformSpecTypeSpecTypeTextDatum) SetLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformLanguageLanguageDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_spec_type_spec_type_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.SpecType, o.Language}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Language = related.Language
	if o.R == nil {
		o.R = &dataPlatformSpecTypeSpecTypeTextDatumR{
			LanguageDataPlatformLanguageLanguageDatum: related,
		}
	} else {
		o.R.LanguageDataPlatformLanguageLanguageDatum = related
	}

	return nil
}

// SetSpecTypeDataPlatformSpecTypeSpecTypeDatum of the dataPlatformSpecTypeSpecTypeTextDatum to the related item.
// Sets o.R.SpecTypeDataPlatformSpecTypeSpecTypeDatum to related.
func (o *DataPlatformSpecTypeSpecTypeTextDatum) SetSpecTypeDataPlatformSpecTypeSpecTypeDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSpecTypeSpecTypeDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_spec_type_spec_type_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SpecType"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.SpecType, o.SpecType, o.Language}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SpecType = related.SpecType
	if o.R == nil {
		o.R = &dataPlatformSpecTypeSpecTypeTextDatumR{
			SpecTypeDataPlatformSpecTypeSpecTypeDatum: related,
		}
	} else {
		o.R.SpecTypeDataPlatformSpecTypeSpecTypeDatum = related
	}

	return nil
}

// DataPlatformSpecTypeSpecTypeTextData retrieves all the records using an executor.
func DataPlatformSpecTypeSpecTypeTextData(mods ...qm.QueryMod) dataPlatformSpecTypeSpecTypeTextDatumQuery {
	mods = append(mods, qm.From("`data_platform_spec_type_spec_type_text_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_spec_type_spec_type_text_data`.*"})
	}

	return dataPlatformSpecTypeSpecTypeTextDatumQuery{q}
}

// FindDataPlatformSpecTypeSpecTypeTextDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSpecTypeSpecTypeTextDatum(ctx context.Context, exec boil.ContextExecutor, specType string, language string, selectCols ...string) (*DataPlatformSpecTypeSpecTypeTextDatum, error) {
	dataPlatformSpecTypeSpecTypeTextDatumObj := &DataPlatformSpecTypeSpecTypeTextDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_spec_type_spec_type_text_data` where `SpecType`=? AND `Language`=?", sel,
	)

	q := queries.Raw(query, specType, language)

	err := q.Bind(ctx, exec, dataPlatformSpecTypeSpecTypeTextDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_spec_type_spec_type_text_data")
	}

	return dataPlatformSpecTypeSpecTypeTextDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSpecTypeSpecTypeTextDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_spec_type_spec_type_text_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSpecTypeSpecTypeTextDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSpecTypeSpecTypeTextDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSpecTypeSpecTypeTextDatumInsertCache[key]
	dataPlatformSpecTypeSpecTypeTextDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSpecTypeSpecTypeTextDatumAllColumns,
			dataPlatformSpecTypeSpecTypeTextDatumColumnsWithDefault,
			dataPlatformSpecTypeSpecTypeTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSpecTypeSpecTypeTextDatumType, dataPlatformSpecTypeSpecTypeTextDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSpecTypeSpecTypeTextDatumType, dataPlatformSpecTypeSpecTypeTextDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_spec_type_spec_type_text_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_spec_type_spec_type_text_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_spec_type_spec_type_text_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_spec_type_spec_type_text_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SpecType,
		o.Language,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_spec_type_spec_type_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSpecTypeSpecTypeTextDatumInsertCacheMut.Lock()
		dataPlatformSpecTypeSpecTypeTextDatumInsertCache[key] = cache
		dataPlatformSpecTypeSpecTypeTextDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSpecTypeSpecTypeTextDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSpecTypeSpecTypeTextDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSpecTypeSpecTypeTextDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSpecTypeSpecTypeTextDatumUpdateCache[key]
	dataPlatformSpecTypeSpecTypeTextDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSpecTypeSpecTypeTextDatumAllColumns,
			dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_spec_type_spec_type_text_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_spec_type_spec_type_text_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSpecTypeSpecTypeTextDatumType, dataPlatformSpecTypeSpecTypeTextDatumMapping, append(wl, dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_spec_type_spec_type_text_data row")
	}

	if !cached {
		dataPlatformSpecTypeSpecTypeTextDatumUpdateCacheMut.Lock()
		dataPlatformSpecTypeSpecTypeTextDatumUpdateCache[key] = cache
		dataPlatformSpecTypeSpecTypeTextDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSpecTypeSpecTypeTextDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_spec_type_spec_type_text_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSpecTypeSpecTypeTextDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_spec_type_spec_type_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSpecTypeSpecTypeTextDatum slice")
	}

	return nil
}

var mySQLDataPlatformSpecTypeSpecTypeTextDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSpecTypeSpecTypeTextDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_spec_type_spec_type_text_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSpecTypeSpecTypeTextDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSpecTypeSpecTypeTextDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSpecTypeSpecTypeTextDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSpecTypeSpecTypeTextDatumUpsertCache[key]
	dataPlatformSpecTypeSpecTypeTextDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSpecTypeSpecTypeTextDatumAllColumns,
			dataPlatformSpecTypeSpecTypeTextDatumColumnsWithDefault,
			dataPlatformSpecTypeSpecTypeTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSpecTypeSpecTypeTextDatumAllColumns,
			dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_spec_type_spec_type_text_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_spec_type_spec_type_text_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_spec_type_spec_type_text_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSpecTypeSpecTypeTextDatumType, dataPlatformSpecTypeSpecTypeTextDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSpecTypeSpecTypeTextDatumType, dataPlatformSpecTypeSpecTypeTextDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_spec_type_spec_type_text_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSpecTypeSpecTypeTextDatumType, dataPlatformSpecTypeSpecTypeTextDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_spec_type_spec_type_text_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_spec_type_spec_type_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSpecTypeSpecTypeTextDatumUpsertCacheMut.Lock()
		dataPlatformSpecTypeSpecTypeTextDatumUpsertCache[key] = cache
		dataPlatformSpecTypeSpecTypeTextDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSpecTypeSpecTypeTextDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSpecTypeSpecTypeTextDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSpecTypeSpecTypeTextDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_spec_type_spec_type_text_data` WHERE `SpecType`=? AND `Language`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_spec_type_spec_type_text_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSpecTypeSpecTypeTextDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSpecTypeSpecTypeTextDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_spec_type_spec_type_text_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSpecTypeSpecTypeTextDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_spec_type_spec_type_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSpecTypeSpecTypeTextDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSpecTypeSpecTypeTextDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSpecTypeSpecTypeTextDatum(ctx, exec, o.SpecType, o.Language)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSpecTypeSpecTypeTextDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSpecTypeSpecTypeTextDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_spec_type_spec_type_text_data`.* FROM `data_platform_spec_type_spec_type_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSpecTypeSpecTypeTextDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSpecTypeSpecTypeTextDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSpecTypeSpecTypeTextDatumExists checks if the DataPlatformSpecTypeSpecTypeTextDatum row exists.
func DataPlatformSpecTypeSpecTypeTextDatumExists(ctx context.Context, exec boil.ContextExecutor, specType string, language string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_spec_type_spec_type_text_data` where `SpecType`=? AND `Language`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, specType, language)
	}
	row := exec.QueryRowContext(ctx, sql, specType, language)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_spec_type_spec_type_text_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSpecTypeSpecTypeTextDatum row exists.
func (o *DataPlatformSpecTypeSpecTypeTextDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSpecTypeSpecTypeTextDatumExists(ctx, exec, o.SpecType, o.Language)
}
