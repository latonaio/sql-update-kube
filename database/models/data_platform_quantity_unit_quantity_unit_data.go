// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformQuantityUnitQuantityUnitDatum is an object representing the database table.
type DataPlatformQuantityUnitQuantityUnitDatum struct {
	QuantityUnit string `boil:"QuantityUnit" json:"QuantityUnit" toml:"QuantityUnit" yaml:"QuantityUnit"`

	R *dataPlatformQuantityUnitQuantityUnitDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformQuantityUnitQuantityUnitDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformQuantityUnitQuantityUnitDatumColumns = struct {
	QuantityUnit string
}{
	QuantityUnit: "QuantityUnit",
}

var DataPlatformQuantityUnitQuantityUnitDatumTableColumns = struct {
	QuantityUnit string
}{
	QuantityUnit: "data_platform_quantity_unit_quantity_unit_data.QuantityUnit",
}

// Generated where

var DataPlatformQuantityUnitQuantityUnitDatumWhere = struct {
	QuantityUnit whereHelperstring
}{
	QuantityUnit: whereHelperstring{field: "`data_platform_quantity_unit_quantity_unit_data`.`QuantityUnit`"},
}

// DataPlatformQuantityUnitQuantityUnitDatumRels is where relationship names are stored.
var DataPlatformQuantityUnitQuantityUnitDatumRels = struct {
	ProductBaseUnitDataPlatformBillOfMaterialHeaderData                    string
	ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData                string
	ProductProductionUnitDataPlatformBillOfMaterialHeaderData              string
	ComponentProductBaseUnitDataPlatformBillOfMaterialItemData             string
	ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData         string
	ProductBaseUnitDataPlatformOperationsHeaderData                        string
	ProductDeliveryUnitDataPlatformOperationsHeaderData                    string
	ProductProductionUnitDataPlatformOperationsHeaderData                  string
	BaseUnitDataPlatformProductMasterGeneralData                           string
	InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData       string
	WeightUnitDataPlatformProductMasterGeneralData                         string
	QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData string
	QuantityUnitDataPlatformQuantityUnitTextData                           string
}{
	ProductBaseUnitDataPlatformBillOfMaterialHeaderData:                    "ProductBaseUnitDataPlatformBillOfMaterialHeaderData",
	ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData:                "ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData",
	ProductProductionUnitDataPlatformBillOfMaterialHeaderData:              "ProductProductionUnitDataPlatformBillOfMaterialHeaderData",
	ComponentProductBaseUnitDataPlatformBillOfMaterialItemData:             "ComponentProductBaseUnitDataPlatformBillOfMaterialItemData",
	ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData:         "ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData",
	ProductBaseUnitDataPlatformOperationsHeaderData:                        "ProductBaseUnitDataPlatformOperationsHeaderData",
	ProductDeliveryUnitDataPlatformOperationsHeaderData:                    "ProductDeliveryUnitDataPlatformOperationsHeaderData",
	ProductProductionUnitDataPlatformOperationsHeaderData:                  "ProductProductionUnitDataPlatformOperationsHeaderData",
	BaseUnitDataPlatformProductMasterGeneralData:                           "BaseUnitDataPlatformProductMasterGeneralData",
	InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData:       "InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData",
	WeightUnitDataPlatformProductMasterGeneralData:                         "WeightUnitDataPlatformProductMasterGeneralData",
	QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData: "QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData",
	QuantityUnitDataPlatformQuantityUnitTextData:                           "QuantityUnitDataPlatformQuantityUnitTextData",
}

// dataPlatformQuantityUnitQuantityUnitDatumR is where relationships are stored.
type dataPlatformQuantityUnitQuantityUnitDatumR struct {
	ProductBaseUnitDataPlatformBillOfMaterialHeaderData                    DataPlatformBillOfMaterialHeaderDatumSlice                   `boil:"ProductBaseUnitDataPlatformBillOfMaterialHeaderData" json:"ProductBaseUnitDataPlatformBillOfMaterialHeaderData" toml:"ProductBaseUnitDataPlatformBillOfMaterialHeaderData" yaml:"ProductBaseUnitDataPlatformBillOfMaterialHeaderData"`
	ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData                DataPlatformBillOfMaterialHeaderDatumSlice                   `boil:"ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData" json:"ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData" toml:"ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData" yaml:"ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData"`
	ProductProductionUnitDataPlatformBillOfMaterialHeaderData              DataPlatformBillOfMaterialHeaderDatumSlice                   `boil:"ProductProductionUnitDataPlatformBillOfMaterialHeaderData" json:"ProductProductionUnitDataPlatformBillOfMaterialHeaderData" toml:"ProductProductionUnitDataPlatformBillOfMaterialHeaderData" yaml:"ProductProductionUnitDataPlatformBillOfMaterialHeaderData"`
	ComponentProductBaseUnitDataPlatformBillOfMaterialItemData             DataPlatformBillOfMaterialItemDatumSlice                     `boil:"ComponentProductBaseUnitDataPlatformBillOfMaterialItemData" json:"ComponentProductBaseUnitDataPlatformBillOfMaterialItemData" toml:"ComponentProductBaseUnitDataPlatformBillOfMaterialItemData" yaml:"ComponentProductBaseUnitDataPlatformBillOfMaterialItemData"`
	ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData         DataPlatformBillOfMaterialItemDatumSlice                     `boil:"ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData" json:"ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData" toml:"ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData" yaml:"ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData"`
	ProductBaseUnitDataPlatformOperationsHeaderData                        DataPlatformOperationsHeaderDatumSlice                       `boil:"ProductBaseUnitDataPlatformOperationsHeaderData" json:"ProductBaseUnitDataPlatformOperationsHeaderData" toml:"ProductBaseUnitDataPlatformOperationsHeaderData" yaml:"ProductBaseUnitDataPlatformOperationsHeaderData"`
	ProductDeliveryUnitDataPlatformOperationsHeaderData                    DataPlatformOperationsHeaderDatumSlice                       `boil:"ProductDeliveryUnitDataPlatformOperationsHeaderData" json:"ProductDeliveryUnitDataPlatformOperationsHeaderData" toml:"ProductDeliveryUnitDataPlatformOperationsHeaderData" yaml:"ProductDeliveryUnitDataPlatformOperationsHeaderData"`
	ProductProductionUnitDataPlatformOperationsHeaderData                  DataPlatformOperationsHeaderDatumSlice                       `boil:"ProductProductionUnitDataPlatformOperationsHeaderData" json:"ProductProductionUnitDataPlatformOperationsHeaderData" toml:"ProductProductionUnitDataPlatformOperationsHeaderData" yaml:"ProductProductionUnitDataPlatformOperationsHeaderData"`
	BaseUnitDataPlatformProductMasterGeneralData                           DataPlatformProductMasterGeneralDatumSlice                   `boil:"BaseUnitDataPlatformProductMasterGeneralData" json:"BaseUnitDataPlatformProductMasterGeneralData" toml:"BaseUnitDataPlatformProductMasterGeneralData" yaml:"BaseUnitDataPlatformProductMasterGeneralData"`
	InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData       DataPlatformProductMasterGeneralDatumSlice                   `boil:"InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData" json:"InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData" toml:"InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData" yaml:"InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData"`
	WeightUnitDataPlatformProductMasterGeneralData                         DataPlatformProductMasterGeneralDatumSlice                   `boil:"WeightUnitDataPlatformProductMasterGeneralData" json:"WeightUnitDataPlatformProductMasterGeneralData" toml:"WeightUnitDataPlatformProductMasterGeneralData" yaml:"WeightUnitDataPlatformProductMasterGeneralData"`
	QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData DataPlatformQuantityUnitConversionQuantityUnitConvDatumSlice `boil:"QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData" json:"QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData" toml:"QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData" yaml:"QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData"`
	QuantityUnitDataPlatformQuantityUnitTextData                           DataPlatformQuantityUnitTextDatumSlice                       `boil:"QuantityUnitDataPlatformQuantityUnitTextData" json:"QuantityUnitDataPlatformQuantityUnitTextData" toml:"QuantityUnitDataPlatformQuantityUnitTextData" yaml:"QuantityUnitDataPlatformQuantityUnitTextData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformQuantityUnitQuantityUnitDatumR) NewStruct() *dataPlatformQuantityUnitQuantityUnitDatumR {
	return &dataPlatformQuantityUnitQuantityUnitDatumR{}
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductBaseUnitDataPlatformBillOfMaterialHeaderData() DataPlatformBillOfMaterialHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformBillOfMaterialHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductDeliveryUnitDataPlatformBillOfMaterialHeaderData() DataPlatformBillOfMaterialHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductProductionUnitDataPlatformBillOfMaterialHeaderData() DataPlatformBillOfMaterialHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformBillOfMaterialHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetComponentProductBaseUnitDataPlatformBillOfMaterialItemData() DataPlatformBillOfMaterialItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData() DataPlatformBillOfMaterialItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductBaseUnitDataPlatformOperationsHeaderData() DataPlatformOperationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformOperationsHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductDeliveryUnitDataPlatformOperationsHeaderData() DataPlatformOperationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformOperationsHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductProductionUnitDataPlatformOperationsHeaderData() DataPlatformOperationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformOperationsHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetBaseUnitDataPlatformProductMasterGeneralData() DataPlatformProductMasterGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.BaseUnitDataPlatformProductMasterGeneralData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData() DataPlatformProductMasterGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetWeightUnitDataPlatformProductMasterGeneralData() DataPlatformProductMasterGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.WeightUnitDataPlatformProductMasterGeneralData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetQuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData() DataPlatformQuantityUnitConversionQuantityUnitConvDatumSlice {
	if r == nil {
		return nil
	}
	return r.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetQuantityUnitDataPlatformQuantityUnitTextData() DataPlatformQuantityUnitTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.QuantityUnitDataPlatformQuantityUnitTextData
}

// dataPlatformQuantityUnitQuantityUnitDatumL is where Load methods for each relationship are stored.
type dataPlatformQuantityUnitQuantityUnitDatumL struct{}

var (
	dataPlatformQuantityUnitQuantityUnitDatumAllColumns            = []string{"QuantityUnit"}
	dataPlatformQuantityUnitQuantityUnitDatumColumnsWithoutDefault = []string{"QuantityUnit"}
	dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault    = []string{}
	dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns     = []string{"QuantityUnit"}
	dataPlatformQuantityUnitQuantityUnitDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformQuantityUnitQuantityUnitDatumSlice is an alias for a slice of pointers to DataPlatformQuantityUnitQuantityUnitDatum.
	// This should almost always be used instead of []DataPlatformQuantityUnitQuantityUnitDatum.
	DataPlatformQuantityUnitQuantityUnitDatumSlice []*DataPlatformQuantityUnitQuantityUnitDatum

	dataPlatformQuantityUnitQuantityUnitDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformQuantityUnitQuantityUnitDatumType                 = reflect.TypeOf(&DataPlatformQuantityUnitQuantityUnitDatum{})
	dataPlatformQuantityUnitQuantityUnitDatumMapping              = queries.MakeStructMapping(dataPlatformQuantityUnitQuantityUnitDatumType)
	dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns)
	dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut       sync.RWMutex
	dataPlatformQuantityUnitQuantityUnitDatumInsertCache          = make(map[string]insertCache)
	dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut       sync.RWMutex
	dataPlatformQuantityUnitQuantityUnitDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut       sync.RWMutex
	dataPlatformQuantityUnitQuantityUnitDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformQuantityUnitQuantityUnitDatum record from the query.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformQuantityUnitQuantityUnitDatum, error) {
	o := &DataPlatformQuantityUnitQuantityUnitDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_quantity_unit_quantity_unit_data")
	}

	return o, nil
}

// All returns all DataPlatformQuantityUnitQuantityUnitDatum records from the query.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformQuantityUnitQuantityUnitDatumSlice, error) {
	var o []*DataPlatformQuantityUnitQuantityUnitDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformQuantityUnitQuantityUnitDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformQuantityUnitQuantityUnitDatum records in the query.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_quantity_unit_quantity_unit_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_quantity_unit_quantity_unit_data exists")
	}

	return count > 0, nil
}

// ProductBaseUnitDataPlatformBillOfMaterialHeaderData retrieves all the data_platform_bill_of_material_header_datum's DataPlatformBillOfMaterialHeaderData with an executor via ProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductBaseUnitDataPlatformBillOfMaterialHeaderData(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_header_data`.`ProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData retrieves all the data_platform_bill_of_material_header_datum's DataPlatformBillOfMaterialHeaderData with an executor via ProductDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_header_data`.`ProductDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// ProductProductionUnitDataPlatformBillOfMaterialHeaderData retrieves all the data_platform_bill_of_material_header_datum's DataPlatformBillOfMaterialHeaderData with an executor via ProductProductionUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductProductionUnitDataPlatformBillOfMaterialHeaderData(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_header_data`.`ProductProductionUnit`=?", o.QuantityUnit),
	)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// ComponentProductBaseUnitDataPlatformBillOfMaterialItemData retrieves all the data_platform_bill_of_material_item_datum's DataPlatformBillOfMaterialItemData with an executor via ComponentProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ComponentProductBaseUnitDataPlatformBillOfMaterialItemData(mods ...qm.QueryMod) dataPlatformBillOfMaterialItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_item_data`.`ComponentProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformBillOfMaterialItemData(queryMods...)
}

// ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData retrieves all the data_platform_bill_of_material_item_datum's DataPlatformBillOfMaterialItemData with an executor via ComponentProductDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData(mods ...qm.QueryMod) dataPlatformBillOfMaterialItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_item_data`.`ComponentProductDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformBillOfMaterialItemData(queryMods...)
}

// ProductBaseUnitDataPlatformOperationsHeaderData retrieves all the data_platform_operations_header_datum's DataPlatformOperationsHeaderData with an executor via ProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductBaseUnitDataPlatformOperationsHeaderData(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_header_data`.`ProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// ProductDeliveryUnitDataPlatformOperationsHeaderData retrieves all the data_platform_operations_header_datum's DataPlatformOperationsHeaderData with an executor via ProductDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductDeliveryUnitDataPlatformOperationsHeaderData(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_header_data`.`ProductDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// ProductProductionUnitDataPlatformOperationsHeaderData retrieves all the data_platform_operations_header_datum's DataPlatformOperationsHeaderData with an executor via ProductProductionUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductProductionUnitDataPlatformOperationsHeaderData(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_header_data`.`ProductProductionUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// BaseUnitDataPlatformProductMasterGeneralData retrieves all the data_platform_product_master_general_datum's DataPlatformProductMasterGeneralData with an executor via BaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) BaseUnitDataPlatformProductMasterGeneralData(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_general_data`.`BaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData retrieves all the data_platform_product_master_general_datum's DataPlatformProductMasterGeneralData with an executor via InternalCapacityQuantityUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_general_data`.`InternalCapacityQuantityUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// WeightUnitDataPlatformProductMasterGeneralData retrieves all the data_platform_product_master_general_datum's DataPlatformProductMasterGeneralData with an executor via WeightUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) WeightUnitDataPlatformProductMasterGeneralData(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_general_data`.`WeightUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData retrieves all the data_platform_quantity_unit_conversion_quantity_unit_conv_datum's DataPlatformQuantityUnitConversionQuantityUnitConvData with an executor via QuantityUnitFrom column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData(mods ...qm.QueryMod) dataPlatformQuantityUnitConversionQuantityUnitConvDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quantity_unit_conversion_quantity_unit_conv_data`.`QuantityUnitFrom`=?", o.QuantityUnit),
	)

	return DataPlatformQuantityUnitConversionQuantityUnitConvData(queryMods...)
}

// QuantityUnitDataPlatformQuantityUnitTextData retrieves all the data_platform_quantity_unit_text_datum's DataPlatformQuantityUnitTextData with an executor via QuantityUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) QuantityUnitDataPlatformQuantityUnitTextData(mods ...qm.QueryMod) dataPlatformQuantityUnitTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quantity_unit_text_data`.`QuantityUnit`=?", o.QuantityUnit),
	)

	return DataPlatformQuantityUnitTextData(queryMods...)
}

// LoadProductBaseUnitDataPlatformBillOfMaterialHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductBaseUnitDataPlatformBillOfMaterialHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.ProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_header_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if singular {
		object.R.ProductBaseUnitDataPlatformBillOfMaterialHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductBaseUnit {
				local.R.ProductBaseUnitDataPlatformBillOfMaterialHeaderData = append(local.R.ProductBaseUnitDataPlatformBillOfMaterialHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformBillOfMaterialHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductDeliveryUnitDataPlatformBillOfMaterialHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.ProductDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_header_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if singular {
		object.R.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductDeliveryUnit {
				local.R.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData = append(local.R.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformBillOfMaterialHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductProductionUnitDataPlatformBillOfMaterialHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.ProductProductionUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_header_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if singular {
		object.R.ProductProductionUnitDataPlatformBillOfMaterialHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductProductionUnit {
				local.R.ProductProductionUnitDataPlatformBillOfMaterialHeaderData = append(local.R.ProductProductionUnitDataPlatformBillOfMaterialHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBaseUnitDataPlatformBillOfMaterialItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadComponentProductBaseUnitDataPlatformBillOfMaterialItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_item_data`),
		qm.WhereIn(`data_platform_bill_of_material_item_data.ComponentProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_item_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_item_data")
	}

	if singular {
		object.R.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ComponentProductBaseUnit {
				local.R.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData = append(local.R.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_item_data`),
		qm.WhereIn(`data_platform_bill_of_material_item_data.ComponentProductDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_item_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_item_data")
	}

	if singular {
		object.R.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ComponentProductDeliveryUnit {
				local.R.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData = append(local.R.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformOperationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductBaseUnitDataPlatformOperationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.ProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_header_data")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if singular {
		object.R.ProductBaseUnitDataPlatformOperationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductBaseUnit {
				local.R.ProductBaseUnitDataPlatformOperationsHeaderData = append(local.R.ProductBaseUnitDataPlatformOperationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformOperationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductDeliveryUnitDataPlatformOperationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.ProductDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_header_data")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if singular {
		object.R.ProductDeliveryUnitDataPlatformOperationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductDeliveryUnit {
				local.R.ProductDeliveryUnitDataPlatformOperationsHeaderData = append(local.R.ProductDeliveryUnitDataPlatformOperationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformOperationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductProductionUnitDataPlatformOperationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.ProductProductionUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_header_data")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if singular {
		object.R.ProductProductionUnitDataPlatformOperationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductProductionUnit {
				local.R.ProductProductionUnitDataPlatformOperationsHeaderData = append(local.R.ProductProductionUnitDataPlatformOperationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBaseUnitDataPlatformProductMasterGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadBaseUnitDataPlatformProductMasterGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.BaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_general_data")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if singular {
		object.R.BaseUnitDataPlatformProductMasterGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.BaseUnit {
				local.R.BaseUnitDataPlatformProductMasterGeneralData = append(local.R.BaseUnitDataPlatformProductMasterGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.InternalCapacityQuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_general_data")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if singular {
		object.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.InternalCapacityQuantityUnit) {
				local.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData = append(local.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadWeightUnitDataPlatformProductMasterGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadWeightUnitDataPlatformProductMasterGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.WeightUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_general_data")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if singular {
		object.R.WeightUnitDataPlatformProductMasterGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.WeightUnit) {
				local.R.WeightUnitDataPlatformProductMasterGeneralData = append(local.R.WeightUnitDataPlatformProductMasterGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadQuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadQuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_conversion_quantity_unit_conv_data`),
		qm.WhereIn(`data_platform_quantity_unit_conversion_quantity_unit_conv_data.QuantityUnitFrom in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quantity_unit_conversion_quantity_unit_conv_data")
	}

	var resultSlice []*DataPlatformQuantityUnitConversionQuantityUnitConvDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quantity_unit_conversion_quantity_unit_conv_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quantity_unit_conversion_quantity_unit_conv_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_conversion_quantity_unit_conv_data")
	}

	if singular {
		object.R.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.QuantityUnitFrom {
				local.R.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData = append(local.R.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadQuantityUnitDataPlatformQuantityUnitTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadQuantityUnitDataPlatformQuantityUnitTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_text_data`),
		qm.WhereIn(`data_platform_quantity_unit_text_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quantity_unit_text_data")
	}

	var resultSlice []*DataPlatformQuantityUnitTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quantity_unit_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quantity_unit_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_text_data")
	}

	if singular {
		object.R.QuantityUnitDataPlatformQuantityUnitTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.QuantityUnit {
				local.R.QuantityUnitDataPlatformQuantityUnitTextData = append(local.R.QuantityUnitDataPlatformQuantityUnitTextData, foreign)
				break
			}
		}
	}

	return nil
}

// AddProductBaseUnitDataPlatformBillOfMaterialHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductBaseUnitDataPlatformBillOfMaterialHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductBaseUnitDataPlatformBillOfMaterialHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.BillOfMaterial}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductBaseUnitDataPlatformBillOfMaterialHeaderData: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformBillOfMaterialHeaderData = append(o.R.ProductBaseUnitDataPlatformBillOfMaterialHeaderData, related...)
	}

	return nil
}

// AddProductDeliveryUnitDataPlatformBillOfMaterialHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductDeliveryUnitDataPlatformBillOfMaterialHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.BillOfMaterial}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData = append(o.R.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData, related...)
	}

	return nil
}

// AddProductProductionUnitDataPlatformBillOfMaterialHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductProductionUnitDataPlatformBillOfMaterialHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductProductionUnitDataPlatformBillOfMaterialHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductProductionUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.BillOfMaterial}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductProductionUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductProductionUnitDataPlatformBillOfMaterialHeaderData: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformBillOfMaterialHeaderData = append(o.R.ProductProductionUnitDataPlatformBillOfMaterialHeaderData, related...)
	}

	return nil
}

// AddComponentProductBaseUnitDataPlatformBillOfMaterialItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddComponentProductBaseUnitDataPlatformBillOfMaterialItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ComponentProductBaseUnitDataPlatformBillOfMaterialItemData: related,
		}
	} else {
		o.R.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData = append(o.R.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData, related...)
	}

	return nil
}

// AddComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData: related,
		}
	} else {
		o.R.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData = append(o.R.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData, related...)
	}

	return nil
}

// AddProductBaseUnitDataPlatformOperationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductBaseUnitDataPlatformOperationsHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductBaseUnitDataPlatformOperationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Operations}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductBaseUnitDataPlatformOperationsHeaderData: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformOperationsHeaderData = append(o.R.ProductBaseUnitDataPlatformOperationsHeaderData, related...)
	}

	return nil
}

// AddProductDeliveryUnitDataPlatformOperationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDeliveryUnitDataPlatformOperationsHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductDeliveryUnitDataPlatformOperationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Operations}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductDeliveryUnitDataPlatformOperationsHeaderData: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformOperationsHeaderData = append(o.R.ProductDeliveryUnitDataPlatformOperationsHeaderData, related...)
	}

	return nil
}

// AddProductProductionUnitDataPlatformOperationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductProductionUnitDataPlatformOperationsHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductProductionUnitDataPlatformOperationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductProductionUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Operations}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductProductionUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductProductionUnitDataPlatformOperationsHeaderData: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformOperationsHeaderData = append(o.R.ProductProductionUnitDataPlatformOperationsHeaderData, related...)
	}

	return nil
}

// AddBaseUnitDataPlatformProductMasterGeneralData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.BaseUnitDataPlatformProductMasterGeneralData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddBaseUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			BaseUnitDataPlatformProductMasterGeneralData: related,
		}
	} else {
		o.R.BaseUnitDataPlatformProductMasterGeneralData = append(o.R.BaseUnitDataPlatformProductMasterGeneralData, related...)
	}

	return nil
}

// AddInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InternalCapacityQuantityUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InternalCapacityQuantityUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InternalCapacityQuantityUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData: related,
		}
	} else {
		o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData = append(o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData, related...)
	}

	return nil
}

// SetInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum's InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData accordingly.
// Replaces o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	query := "update `data_platform_product_master_general_data` set `InternalCapacityQuantityUnit` = null where `InternalCapacityQuantityUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData = nil
	}

	return o.AddInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData(ctx, exec, insert, related...)
}

// RemoveInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData relationships from objects passed in.
// Removes related items from R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InternalCapacityQuantityUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("InternalCapacityQuantityUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData[i] = o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData[ln-1]
			}
			o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData = o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddWeightUnitDataPlatformProductMasterGeneralData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.WeightUnitDataPlatformProductMasterGeneralData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddWeightUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WeightUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"WeightUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WeightUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			WeightUnitDataPlatformProductMasterGeneralData: related,
		}
	} else {
		o.R.WeightUnitDataPlatformProductMasterGeneralData = append(o.R.WeightUnitDataPlatformProductMasterGeneralData, related...)
	}

	return nil
}

// SetWeightUnitDataPlatformProductMasterGeneralData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WeightUnitDataPlatformQuantityUnitQuantityUnitDatum's WeightUnitDataPlatformProductMasterGeneralData accordingly.
// Replaces o.R.WeightUnitDataPlatformProductMasterGeneralData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetWeightUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	query := "update `data_platform_product_master_general_data` set `WeightUnit` = null where `WeightUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.WeightUnitDataPlatformProductMasterGeneralData = nil
	}

	return o.AddWeightUnitDataPlatformProductMasterGeneralData(ctx, exec, insert, related...)
}

// RemoveWeightUnitDataPlatformProductMasterGeneralData relationships from objects passed in.
// Removes related items from R.WeightUnitDataPlatformProductMasterGeneralData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveWeightUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WeightUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("WeightUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WeightUnitDataPlatformProductMasterGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.WeightUnitDataPlatformProductMasterGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.WeightUnitDataPlatformProductMasterGeneralData[i] = o.R.WeightUnitDataPlatformProductMasterGeneralData[ln-1]
			}
			o.R.WeightUnitDataPlatformProductMasterGeneralData = o.R.WeightUnitDataPlatformProductMasterGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddQuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddQuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuantityUnitConversionQuantityUnitConvDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QuantityUnitFrom = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quantity_unit_conversion_quantity_unit_conv_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"QuantityUnitFrom"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitConversionQuantityUnitConvDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.QuantityUnitFrom, rel.QuantityUnitTo}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QuantityUnitFrom = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData: related,
		}
	} else {
		o.R.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData = append(o.R.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData, related...)
	}

	return nil
}

// AddQuantityUnitDataPlatformQuantityUnitTextData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.QuantityUnitDataPlatformQuantityUnitTextData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddQuantityUnitDataPlatformQuantityUnitTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuantityUnitTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QuantityUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quantity_unit_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"QuantityUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.QuantityUnit, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QuantityUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			QuantityUnitDataPlatformQuantityUnitTextData: related,
		}
	} else {
		o.R.QuantityUnitDataPlatformQuantityUnitTextData = append(o.R.QuantityUnitDataPlatformQuantityUnitTextData, related...)
	}

	return nil
}

// DataPlatformQuantityUnitQuantityUnitData retrieves all the records using an executor.
func DataPlatformQuantityUnitQuantityUnitData(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	mods = append(mods, qm.From("`data_platform_quantity_unit_quantity_unit_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_quantity_unit_quantity_unit_data`.*"})
	}

	return dataPlatformQuantityUnitQuantityUnitDatumQuery{q}
}

// FindDataPlatformQuantityUnitQuantityUnitDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, quantityUnit string, selectCols ...string) (*DataPlatformQuantityUnitQuantityUnitDatum, error) {
	dataPlatformQuantityUnitQuantityUnitDatumObj := &DataPlatformQuantityUnitQuantityUnitDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_quantity_unit_quantity_unit_data` where `QuantityUnit`=?", sel,
	)

	q := queries.Raw(query, quantityUnit)

	err := q.Bind(ctx, exec, dataPlatformQuantityUnitQuantityUnitDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_quantity_unit_quantity_unit_data")
	}

	return dataPlatformQuantityUnitQuantityUnitDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quantity_unit_quantity_unit_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformQuantityUnitQuantityUnitDatumInsertCache[key]
	dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformQuantityUnitQuantityUnitDatumAllColumns,
			dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault,
			dataPlatformQuantityUnitQuantityUnitDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_quantity_unit_quantity_unit_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_quantity_unit_quantity_unit_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_quantity_unit_quantity_unit_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_quantity_unit_quantity_unit_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.QuantityUnit,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quantity_unit_quantity_unit_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut.Lock()
		dataPlatformQuantityUnitQuantityUnitDatumInsertCache[key] = cache
		dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformQuantityUnitQuantityUnitDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformQuantityUnitQuantityUnitDatumUpdateCache[key]
	dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformQuantityUnitQuantityUnitDatumAllColumns,
			dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_quantity_unit_quantity_unit_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_quantity_unit_quantity_unit_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, append(wl, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_quantity_unit_quantity_unit_data row")
	}

	if !cached {
		dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut.Lock()
		dataPlatformQuantityUnitQuantityUnitDatumUpdateCache[key] = cache
		dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_quantity_unit_quantity_unit_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformQuantityUnitQuantityUnitDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_quantity_unit_quantity_unit_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformQuantityUnitQuantityUnitDatum slice")
	}

	return nil
}

var mySQLDataPlatformQuantityUnitQuantityUnitDatumUniqueColumns = []string{
	"QuantityUnit",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quantity_unit_quantity_unit_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformQuantityUnitQuantityUnitDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformQuantityUnitQuantityUnitDatumUpsertCache[key]
	dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformQuantityUnitQuantityUnitDatumAllColumns,
			dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault,
			dataPlatformQuantityUnitQuantityUnitDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformQuantityUnitQuantityUnitDatumAllColumns,
			dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_quantity_unit_quantity_unit_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_quantity_unit_quantity_unit_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_quantity_unit_quantity_unit_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_quantity_unit_quantity_unit_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_quantity_unit_quantity_unit_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quantity_unit_quantity_unit_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut.Lock()
		dataPlatformQuantityUnitQuantityUnitDatumUpsertCache[key] = cache
		dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformQuantityUnitQuantityUnitDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformQuantityUnitQuantityUnitDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_quantity_unit_quantity_unit_data` WHERE `QuantityUnit`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_quantity_unit_quantity_unit_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformQuantityUnitQuantityUnitDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_quantity_unit_quantity_unit_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformQuantityUnitQuantityUnitDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_quantity_unit_quantity_unit_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformQuantityUnitQuantityUnitDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformQuantityUnitQuantityUnitDatum(ctx, exec, o.QuantityUnit)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformQuantityUnitQuantityUnitDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformQuantityUnitQuantityUnitDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_quantity_unit_quantity_unit_data`.* FROM `data_platform_quantity_unit_quantity_unit_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformQuantityUnitQuantityUnitDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformQuantityUnitQuantityUnitDatumExists checks if the DataPlatformQuantityUnitQuantityUnitDatum row exists.
func DataPlatformQuantityUnitQuantityUnitDatumExists(ctx context.Context, exec boil.ContextExecutor, quantityUnit string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_quantity_unit_quantity_unit_data` where `QuantityUnit`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, quantityUnit)
	}
	row := exec.QueryRowContext(ctx, sql, quantityUnit)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_quantity_unit_quantity_unit_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformQuantityUnitQuantityUnitDatum row exists.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformQuantityUnitQuantityUnitDatumExists(ctx, exec, o.QuantityUnit)
}
