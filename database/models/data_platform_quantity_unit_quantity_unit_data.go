// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformQuantityUnitQuantityUnitDatum is an object representing the database table.
type DataPlatformQuantityUnitQuantityUnitDatum struct {
	QuantityUnit string `boil:"QuantityUnit" json:"QuantityUnit" toml:"QuantityUnit" yaml:"QuantityUnit"`

	R *dataPlatformQuantityUnitQuantityUnitDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformQuantityUnitQuantityUnitDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformQuantityUnitQuantityUnitDatumColumns = struct {
	QuantityUnit string
}{
	QuantityUnit: "QuantityUnit",
}

var DataPlatformQuantityUnitQuantityUnitDatumTableColumns = struct {
	QuantityUnit string
}{
	QuantityUnit: "data_platform_quantity_unit_quantity_unit_data.QuantityUnit",
}

// Generated where

var DataPlatformQuantityUnitQuantityUnitDatumWhere = struct {
	QuantityUnit whereHelperstring
}{
	QuantityUnit: whereHelperstring{field: "`data_platform_quantity_unit_quantity_unit_data`.`QuantityUnit`"},
}

// DataPlatformQuantityUnitQuantityUnitDatumRels is where relationship names are stored.
var DataPlatformQuantityUnitQuantityUnitDatumRels = struct {
	HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData    string
	InventoryUnitDataPlatformProductMasterBPPlantData         string
	IssuingDeliveryUnitDataPlatformProductMasterBPPlantData   string
	ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData string
	QuantityUnitDataPlatformQuantityUnitTextData              string
}{
	HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData:    "HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData",
	InventoryUnitDataPlatformProductMasterBPPlantData:         "InventoryUnitDataPlatformProductMasterBPPlantData",
	IssuingDeliveryUnitDataPlatformProductMasterBPPlantData:   "IssuingDeliveryUnitDataPlatformProductMasterBPPlantData",
	ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData: "ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData",
	QuantityUnitDataPlatformQuantityUnitTextData:              "QuantityUnitDataPlatformQuantityUnitTextData",
}

// dataPlatformQuantityUnitQuantityUnitDatumR is where relationships are stored.
type dataPlatformQuantityUnitQuantityUnitDatumR struct {
	HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData    DataPlatformDeliveryDocumentHeaderDatumSlice `boil:"HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData" json:"HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData" toml:"HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData" yaml:"HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData"`
	InventoryUnitDataPlatformProductMasterBPPlantData         DataPlatformProductMasterBPPlantDatumSlice   `boil:"InventoryUnitDataPlatformProductMasterBPPlantData" json:"InventoryUnitDataPlatformProductMasterBPPlantData" toml:"InventoryUnitDataPlatformProductMasterBPPlantData" yaml:"InventoryUnitDataPlatformProductMasterBPPlantData"`
	IssuingDeliveryUnitDataPlatformProductMasterBPPlantData   DataPlatformProductMasterBPPlantDatumSlice   `boil:"IssuingDeliveryUnitDataPlatformProductMasterBPPlantData" json:"IssuingDeliveryUnitDataPlatformProductMasterBPPlantData" toml:"IssuingDeliveryUnitDataPlatformProductMasterBPPlantData" yaml:"IssuingDeliveryUnitDataPlatformProductMasterBPPlantData"`
	ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData DataPlatformProductMasterBPPlantDatumSlice   `boil:"ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData" json:"ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData" toml:"ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData" yaml:"ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData"`
	QuantityUnitDataPlatformQuantityUnitTextData              DataPlatformQuantityUnitTextDatumSlice       `boil:"QuantityUnitDataPlatformQuantityUnitTextData" json:"QuantityUnitDataPlatformQuantityUnitTextData" toml:"QuantityUnitDataPlatformQuantityUnitTextData" yaml:"QuantityUnitDataPlatformQuantityUnitTextData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformQuantityUnitQuantityUnitDatumR) NewStruct() *dataPlatformQuantityUnitQuantityUnitDatumR {
	return &dataPlatformQuantityUnitQuantityUnitDatumR{}
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetInventoryUnitDataPlatformProductMasterBPPlantData() DataPlatformProductMasterBPPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.InventoryUnitDataPlatformProductMasterBPPlantData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetIssuingDeliveryUnitDataPlatformProductMasterBPPlantData() DataPlatformProductMasterBPPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetReceivingDeliveryUnitDataPlatformProductMasterBPPlantData() DataPlatformProductMasterBPPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetQuantityUnitDataPlatformQuantityUnitTextData() DataPlatformQuantityUnitTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.QuantityUnitDataPlatformQuantityUnitTextData
}

// dataPlatformQuantityUnitQuantityUnitDatumL is where Load methods for each relationship are stored.
type dataPlatformQuantityUnitQuantityUnitDatumL struct{}

var (
	dataPlatformQuantityUnitQuantityUnitDatumAllColumns            = []string{"QuantityUnit"}
	dataPlatformQuantityUnitQuantityUnitDatumColumnsWithoutDefault = []string{"QuantityUnit"}
	dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault    = []string{}
	dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns     = []string{"QuantityUnit"}
	dataPlatformQuantityUnitQuantityUnitDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformQuantityUnitQuantityUnitDatumSlice is an alias for a slice of pointers to DataPlatformQuantityUnitQuantityUnitDatum.
	// This should almost always be used instead of []DataPlatformQuantityUnitQuantityUnitDatum.
	DataPlatformQuantityUnitQuantityUnitDatumSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	// DataPlatformQuantityUnitQuantityUnitDatumHook is the signature for custom DataPlatformQuantityUnitQuantityUnitDatum hook methods
	DataPlatformQuantityUnitQuantityUnitDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformQuantityUnitQuantityUnitDatum) error

	dataPlatformQuantityUnitQuantityUnitDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformQuantityUnitQuantityUnitDatumType                 = reflect.TypeOf(&DataPlatformQuantityUnitQuantityUnitDatum{})
	dataPlatformQuantityUnitQuantityUnitDatumMapping              = queries.MakeStructMapping(dataPlatformQuantityUnitQuantityUnitDatumType)
	dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns)
	dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut       sync.RWMutex
	dataPlatformQuantityUnitQuantityUnitDatumInsertCache          = make(map[string]insertCache)
	dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut       sync.RWMutex
	dataPlatformQuantityUnitQuantityUnitDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut       sync.RWMutex
	dataPlatformQuantityUnitQuantityUnitDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformQuantityUnitQuantityUnitDatumAfterSelectHooks []DataPlatformQuantityUnitQuantityUnitDatumHook

var dataPlatformQuantityUnitQuantityUnitDatumBeforeInsertHooks []DataPlatformQuantityUnitQuantityUnitDatumHook
var dataPlatformQuantityUnitQuantityUnitDatumAfterInsertHooks []DataPlatformQuantityUnitQuantityUnitDatumHook

var dataPlatformQuantityUnitQuantityUnitDatumBeforeUpdateHooks []DataPlatformQuantityUnitQuantityUnitDatumHook
var dataPlatformQuantityUnitQuantityUnitDatumAfterUpdateHooks []DataPlatformQuantityUnitQuantityUnitDatumHook

var dataPlatformQuantityUnitQuantityUnitDatumBeforeDeleteHooks []DataPlatformQuantityUnitQuantityUnitDatumHook
var dataPlatformQuantityUnitQuantityUnitDatumAfterDeleteHooks []DataPlatformQuantityUnitQuantityUnitDatumHook

var dataPlatformQuantityUnitQuantityUnitDatumBeforeUpsertHooks []DataPlatformQuantityUnitQuantityUnitDatumHook
var dataPlatformQuantityUnitQuantityUnitDatumAfterUpsertHooks []DataPlatformQuantityUnitQuantityUnitDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformQuantityUnitQuantityUnitDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformQuantityUnitQuantityUnitDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformQuantityUnitQuantityUnitDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformQuantityUnitQuantityUnitDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformQuantityUnitQuantityUnitDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformQuantityUnitQuantityUnitDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformQuantityUnitQuantityUnitDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformQuantityUnitQuantityUnitDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformQuantityUnitQuantityUnitDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformQuantityUnitQuantityUnitDatumHook registers your hook function for all future operations.
func AddDataPlatformQuantityUnitQuantityUnitDatumHook(hookPoint boil.HookPoint, dataPlatformQuantityUnitQuantityUnitDatumHook DataPlatformQuantityUnitQuantityUnitDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformQuantityUnitQuantityUnitDatumAfterSelectHooks = append(dataPlatformQuantityUnitQuantityUnitDatumAfterSelectHooks, dataPlatformQuantityUnitQuantityUnitDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformQuantityUnitQuantityUnitDatumBeforeInsertHooks = append(dataPlatformQuantityUnitQuantityUnitDatumBeforeInsertHooks, dataPlatformQuantityUnitQuantityUnitDatumHook)
	case boil.AfterInsertHook:
		dataPlatformQuantityUnitQuantityUnitDatumAfterInsertHooks = append(dataPlatformQuantityUnitQuantityUnitDatumAfterInsertHooks, dataPlatformQuantityUnitQuantityUnitDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformQuantityUnitQuantityUnitDatumBeforeUpdateHooks = append(dataPlatformQuantityUnitQuantityUnitDatumBeforeUpdateHooks, dataPlatformQuantityUnitQuantityUnitDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformQuantityUnitQuantityUnitDatumAfterUpdateHooks = append(dataPlatformQuantityUnitQuantityUnitDatumAfterUpdateHooks, dataPlatformQuantityUnitQuantityUnitDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformQuantityUnitQuantityUnitDatumBeforeDeleteHooks = append(dataPlatformQuantityUnitQuantityUnitDatumBeforeDeleteHooks, dataPlatformQuantityUnitQuantityUnitDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformQuantityUnitQuantityUnitDatumAfterDeleteHooks = append(dataPlatformQuantityUnitQuantityUnitDatumAfterDeleteHooks, dataPlatformQuantityUnitQuantityUnitDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformQuantityUnitQuantityUnitDatumBeforeUpsertHooks = append(dataPlatformQuantityUnitQuantityUnitDatumBeforeUpsertHooks, dataPlatformQuantityUnitQuantityUnitDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformQuantityUnitQuantityUnitDatumAfterUpsertHooks = append(dataPlatformQuantityUnitQuantityUnitDatumAfterUpsertHooks, dataPlatformQuantityUnitQuantityUnitDatumHook)
	}
}

// One returns a single dataPlatformQuantityUnitQuantityUnitDatum record from the query.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformQuantityUnitQuantityUnitDatum, error) {
	o := &DataPlatformQuantityUnitQuantityUnitDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_quantity_unit_quantity_unit_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformQuantityUnitQuantityUnitDatum records from the query.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformQuantityUnitQuantityUnitDatumSlice, error) {
	var o []*DataPlatformQuantityUnitQuantityUnitDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformQuantityUnitQuantityUnitDatum slice")
	}

	if len(dataPlatformQuantityUnitQuantityUnitDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformQuantityUnitQuantityUnitDatum records in the query.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_quantity_unit_quantity_unit_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_quantity_unit_quantity_unit_data exists")
	}

	return count > 0, nil
}

// HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via HeaderWeightUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`HeaderWeightUnit`=?", o.QuantityUnit),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// InventoryUnitDataPlatformProductMasterBPPlantData retrieves all the data_platform_product_master_bp_plant_datum's DataPlatformProductMasterBPPlantData with an executor via InventoryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) InventoryUnitDataPlatformProductMasterBPPlantData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_bp_plant_data`.`InventoryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// IssuingDeliveryUnitDataPlatformProductMasterBPPlantData retrieves all the data_platform_product_master_bp_plant_datum's DataPlatformProductMasterBPPlantData with an executor via IssuingDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) IssuingDeliveryUnitDataPlatformProductMasterBPPlantData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_bp_plant_data`.`IssuingDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData retrieves all the data_platform_product_master_bp_plant_datum's DataPlatformProductMasterBPPlantData with an executor via ReceivingDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_bp_plant_data`.`ReceivingDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// QuantityUnitDataPlatformQuantityUnitTextData retrieves all the data_platform_quantity_unit_text_datum's DataPlatformQuantityUnitTextData with an executor via QuantityUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) QuantityUnitDataPlatformQuantityUnitTextData(mods ...qm.QueryMod) dataPlatformQuantityUnitTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quantity_unit_text_data`.`QuantityUnit`=?", o.QuantityUnit),
	)

	return DataPlatformQuantityUnitTextData(queryMods...)
}

// LoadHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.HeaderWeightUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if len(dataPlatformDeliveryDocumentHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformDeliveryDocumentHeaderDatumR{}
			}
			foreign.R.HeaderWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.HeaderWeightUnit) {
				local.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData = append(local.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformDeliveryDocumentHeaderDatumR{}
				}
				foreign.R.HeaderWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = local
				break
			}
		}
	}

	return nil
}

// LoadInventoryUnitDataPlatformProductMasterBPPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadInventoryUnitDataPlatformProductMasterBPPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.InventoryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_bp_plant_data")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_bp_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if len(dataPlatformProductMasterBPPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InventoryUnitDataPlatformProductMasterBPPlantData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
			}
			foreign.R.InventoryUnitDataPlatformQuantityUnitQuantityUnitDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.InventoryUnit) {
				local.R.InventoryUnitDataPlatformProductMasterBPPlantData = append(local.R.InventoryUnitDataPlatformProductMasterBPPlantData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
				}
				foreign.R.InventoryUnitDataPlatformQuantityUnitQuantityUnitDatum = local
				break
			}
		}
	}

	return nil
}

// LoadIssuingDeliveryUnitDataPlatformProductMasterBPPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadIssuingDeliveryUnitDataPlatformProductMasterBPPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.IssuingDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_bp_plant_data")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_bp_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if len(dataPlatformProductMasterBPPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
			}
			foreign.R.IssuingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.IssuingDeliveryUnit) {
				local.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData = append(local.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
				}
				foreign.R.IssuingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = local
				break
			}
		}
	}

	return nil
}

// LoadReceivingDeliveryUnitDataPlatformProductMasterBPPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadReceivingDeliveryUnitDataPlatformProductMasterBPPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.ReceivingDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_bp_plant_data")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_bp_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if len(dataPlatformProductMasterBPPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
			}
			foreign.R.ReceivingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.ReceivingDeliveryUnit) {
				local.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData = append(local.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
				}
				foreign.R.ReceivingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = local
				break
			}
		}
	}

	return nil
}

// LoadQuantityUnitDataPlatformQuantityUnitTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadQuantityUnitDataPlatformQuantityUnitTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_text_data`),
		qm.WhereIn(`data_platform_quantity_unit_text_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quantity_unit_text_data")
	}

	var resultSlice []*DataPlatformQuantityUnitTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quantity_unit_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quantity_unit_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_text_data")
	}

	if len(dataPlatformQuantityUnitTextDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.QuantityUnitDataPlatformQuantityUnitTextData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformQuantityUnitTextDatumR{}
			}
			foreign.R.QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.QuantityUnit {
				local.R.QuantityUnitDataPlatformQuantityUnitTextData = append(local.R.QuantityUnitDataPlatformQuantityUnitTextData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformQuantityUnitTextDatumR{}
				}
				foreign.R.QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = local
				break
			}
		}
	}

	return nil
}

// AddHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData.
// Sets related.R.HeaderWeightUnitDataPlatformQuantityUnitQuantityUnitDatum appropriately.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HeaderWeightUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"HeaderWeightUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HeaderWeightUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData = append(o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformDeliveryDocumentHeaderDatumR{
				HeaderWeightUnitDataPlatformQuantityUnitQuantityUnitDatum: o,
			}
		} else {
			rel.R.HeaderWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = o
		}
	}
	return nil
}

// SetHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.HeaderWeightUnitDataPlatformQuantityUnitQuantityUnitDatum's HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData with related.
// Sets related.R.HeaderWeightUnitDataPlatformQuantityUnitQuantityUnitDatum's HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData accordingly.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `HeaderWeightUnit` = null where `HeaderWeightUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData {
			queries.SetScanner(&rel.HeaderWeightUnit, nil)
			if rel.R == nil {
				continue
			}

			rel.R.HeaderWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
		}
		o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
// Sets related.R.HeaderWeightUnitDataPlatformQuantityUnitQuantityUnitDatum.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.HeaderWeightUnit, nil)
		if rel.R != nil {
			rel.R.HeaderWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("HeaderWeightUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData[i] = o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData = o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddInventoryUnitDataPlatformProductMasterBPPlantData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.InventoryUnitDataPlatformProductMasterBPPlantData.
// Sets related.R.InventoryUnitDataPlatformQuantityUnitQuantityUnitDatum appropriately.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddInventoryUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InventoryUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InventoryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InventoryUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			InventoryUnitDataPlatformProductMasterBPPlantData: related,
		}
	} else {
		o.R.InventoryUnitDataPlatformProductMasterBPPlantData = append(o.R.InventoryUnitDataPlatformProductMasterBPPlantData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterBPPlantDatumR{
				InventoryUnitDataPlatformQuantityUnitQuantityUnitDatum: o,
			}
		} else {
			rel.R.InventoryUnitDataPlatformQuantityUnitQuantityUnitDatum = o
		}
	}
	return nil
}

// SetInventoryUnitDataPlatformProductMasterBPPlantData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InventoryUnitDataPlatformQuantityUnitQuantityUnitDatum's InventoryUnitDataPlatformProductMasterBPPlantData accordingly.
// Replaces o.R.InventoryUnitDataPlatformProductMasterBPPlantData with related.
// Sets related.R.InventoryUnitDataPlatformQuantityUnitQuantityUnitDatum's InventoryUnitDataPlatformProductMasterBPPlantData accordingly.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetInventoryUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	query := "update `data_platform_product_master_bp_plant_data` set `InventoryUnit` = null where `InventoryUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.InventoryUnitDataPlatformProductMasterBPPlantData {
			queries.SetScanner(&rel.InventoryUnit, nil)
			if rel.R == nil {
				continue
			}

			rel.R.InventoryUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
		}
		o.R.InventoryUnitDataPlatformProductMasterBPPlantData = nil
	}

	return o.AddInventoryUnitDataPlatformProductMasterBPPlantData(ctx, exec, insert, related...)
}

// RemoveInventoryUnitDataPlatformProductMasterBPPlantData relationships from objects passed in.
// Removes related items from R.InventoryUnitDataPlatformProductMasterBPPlantData (uses pointer comparison, removal does not keep order)
// Sets related.R.InventoryUnitDataPlatformQuantityUnitQuantityUnitDatum.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveInventoryUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterBPPlantDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InventoryUnit, nil)
		if rel.R != nil {
			rel.R.InventoryUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("InventoryUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InventoryUnitDataPlatformProductMasterBPPlantData {
			if rel != ri {
				continue
			}

			ln := len(o.R.InventoryUnitDataPlatformProductMasterBPPlantData)
			if ln > 1 && i < ln-1 {
				o.R.InventoryUnitDataPlatformProductMasterBPPlantData[i] = o.R.InventoryUnitDataPlatformProductMasterBPPlantData[ln-1]
			}
			o.R.InventoryUnitDataPlatformProductMasterBPPlantData = o.R.InventoryUnitDataPlatformProductMasterBPPlantData[:ln-1]
			break
		}
	}

	return nil
}

// AddIssuingDeliveryUnitDataPlatformProductMasterBPPlantData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData.
// Sets related.R.IssuingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum appropriately.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddIssuingDeliveryUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.IssuingDeliveryUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"IssuingDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.IssuingDeliveryUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			IssuingDeliveryUnitDataPlatformProductMasterBPPlantData: related,
		}
	} else {
		o.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData = append(o.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterBPPlantDatumR{
				IssuingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: o,
			}
		} else {
			rel.R.IssuingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = o
		}
	}
	return nil
}

// SetIssuingDeliveryUnitDataPlatformProductMasterBPPlantData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.IssuingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum's IssuingDeliveryUnitDataPlatformProductMasterBPPlantData accordingly.
// Replaces o.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData with related.
// Sets related.R.IssuingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum's IssuingDeliveryUnitDataPlatformProductMasterBPPlantData accordingly.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetIssuingDeliveryUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	query := "update `data_platform_product_master_bp_plant_data` set `IssuingDeliveryUnit` = null where `IssuingDeliveryUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData {
			queries.SetScanner(&rel.IssuingDeliveryUnit, nil)
			if rel.R == nil {
				continue
			}

			rel.R.IssuingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
		}
		o.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData = nil
	}

	return o.AddIssuingDeliveryUnitDataPlatformProductMasterBPPlantData(ctx, exec, insert, related...)
}

// RemoveIssuingDeliveryUnitDataPlatformProductMasterBPPlantData relationships from objects passed in.
// Removes related items from R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData (uses pointer comparison, removal does not keep order)
// Sets related.R.IssuingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveIssuingDeliveryUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterBPPlantDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.IssuingDeliveryUnit, nil)
		if rel.R != nil {
			rel.R.IssuingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("IssuingDeliveryUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData {
			if rel != ri {
				continue
			}

			ln := len(o.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData)
			if ln > 1 && i < ln-1 {
				o.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData[i] = o.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData[ln-1]
			}
			o.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData = o.R.IssuingDeliveryUnitDataPlatformProductMasterBPPlantData[:ln-1]
			break
		}
	}

	return nil
}

// AddReceivingDeliveryUnitDataPlatformProductMasterBPPlantData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData.
// Sets related.R.ReceivingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum appropriately.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddReceivingDeliveryUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ReceivingDeliveryUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ReceivingDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ReceivingDeliveryUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData: related,
		}
	} else {
		o.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData = append(o.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterBPPlantDatumR{
				ReceivingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: o,
			}
		} else {
			rel.R.ReceivingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = o
		}
	}
	return nil
}

// SetReceivingDeliveryUnitDataPlatformProductMasterBPPlantData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ReceivingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum's ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData accordingly.
// Replaces o.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData with related.
// Sets related.R.ReceivingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum's ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData accordingly.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetReceivingDeliveryUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	query := "update `data_platform_product_master_bp_plant_data` set `ReceivingDeliveryUnit` = null where `ReceivingDeliveryUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData {
			queries.SetScanner(&rel.ReceivingDeliveryUnit, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ReceivingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
		}
		o.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData = nil
	}

	return o.AddReceivingDeliveryUnitDataPlatformProductMasterBPPlantData(ctx, exec, insert, related...)
}

// RemoveReceivingDeliveryUnitDataPlatformProductMasterBPPlantData relationships from objects passed in.
// Removes related items from R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData (uses pointer comparison, removal does not keep order)
// Sets related.R.ReceivingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveReceivingDeliveryUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterBPPlantDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ReceivingDeliveryUnit, nil)
		if rel.R != nil {
			rel.R.ReceivingDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("ReceivingDeliveryUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData)
			if ln > 1 && i < ln-1 {
				o.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData[i] = o.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData[ln-1]
			}
			o.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData = o.R.ReceivingDeliveryUnitDataPlatformProductMasterBPPlantData[:ln-1]
			break
		}
	}

	return nil
}

// AddQuantityUnitDataPlatformQuantityUnitTextData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.QuantityUnitDataPlatformQuantityUnitTextData.
// Sets related.R.QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum appropriately.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddQuantityUnitDataPlatformQuantityUnitTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuantityUnitTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QuantityUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quantity_unit_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"QuantityUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.QuantityUnit, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QuantityUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			QuantityUnitDataPlatformQuantityUnitTextData: related,
		}
	} else {
		o.R.QuantityUnitDataPlatformQuantityUnitTextData = append(o.R.QuantityUnitDataPlatformQuantityUnitTextData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformQuantityUnitTextDatumR{
				QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum: o,
			}
		} else {
			rel.R.QuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = o
		}
	}
	return nil
}

// DataPlatformQuantityUnitQuantityUnitData retrieves all the records using an executor.
func DataPlatformQuantityUnitQuantityUnitData(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	mods = append(mods, qm.From("`data_platform_quantity_unit_quantity_unit_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_quantity_unit_quantity_unit_data`.*"})
	}

	return dataPlatformQuantityUnitQuantityUnitDatumQuery{q}
}

// FindDataPlatformQuantityUnitQuantityUnitDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, quantityUnit string, selectCols ...string) (*DataPlatformQuantityUnitQuantityUnitDatum, error) {
	dataPlatformQuantityUnitQuantityUnitDatumObj := &DataPlatformQuantityUnitQuantityUnitDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_quantity_unit_quantity_unit_data` where `QuantityUnit`=?", sel,
	)

	q := queries.Raw(query, quantityUnit)

	err := q.Bind(ctx, exec, dataPlatformQuantityUnitQuantityUnitDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_quantity_unit_quantity_unit_data")
	}

	if err = dataPlatformQuantityUnitQuantityUnitDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformQuantityUnitQuantityUnitDatumObj, err
	}

	return dataPlatformQuantityUnitQuantityUnitDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quantity_unit_quantity_unit_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformQuantityUnitQuantityUnitDatumInsertCache[key]
	dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformQuantityUnitQuantityUnitDatumAllColumns,
			dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault,
			dataPlatformQuantityUnitQuantityUnitDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_quantity_unit_quantity_unit_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_quantity_unit_quantity_unit_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_quantity_unit_quantity_unit_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_quantity_unit_quantity_unit_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.QuantityUnit,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quantity_unit_quantity_unit_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut.Lock()
		dataPlatformQuantityUnitQuantityUnitDatumInsertCache[key] = cache
		dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformQuantityUnitQuantityUnitDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformQuantityUnitQuantityUnitDatumUpdateCache[key]
	dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformQuantityUnitQuantityUnitDatumAllColumns,
			dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_quantity_unit_quantity_unit_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_quantity_unit_quantity_unit_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, append(wl, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_quantity_unit_quantity_unit_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_quantity_unit_quantity_unit_data")
	}

	if !cached {
		dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut.Lock()
		dataPlatformQuantityUnitQuantityUnitDatumUpdateCache[key] = cache
		dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_quantity_unit_quantity_unit_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_quantity_unit_quantity_unit_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformQuantityUnitQuantityUnitDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_quantity_unit_quantity_unit_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformQuantityUnitQuantityUnitDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformQuantityUnitQuantityUnitDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformQuantityUnitQuantityUnitDatumUniqueColumns = []string{
	"QuantityUnit",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quantity_unit_quantity_unit_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformQuantityUnitQuantityUnitDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformQuantityUnitQuantityUnitDatumUpsertCache[key]
	dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformQuantityUnitQuantityUnitDatumAllColumns,
			dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault,
			dataPlatformQuantityUnitQuantityUnitDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformQuantityUnitQuantityUnitDatumAllColumns,
			dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_quantity_unit_quantity_unit_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_quantity_unit_quantity_unit_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_quantity_unit_quantity_unit_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_quantity_unit_quantity_unit_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_quantity_unit_quantity_unit_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quantity_unit_quantity_unit_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut.Lock()
		dataPlatformQuantityUnitQuantityUnitDatumUpsertCache[key] = cache
		dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformQuantityUnitQuantityUnitDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformQuantityUnitQuantityUnitDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_quantity_unit_quantity_unit_data` WHERE `QuantityUnit`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_quantity_unit_quantity_unit_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_quantity_unit_quantity_unit_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformQuantityUnitQuantityUnitDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_quantity_unit_quantity_unit_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_quantity_unit_quantity_unit_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformQuantityUnitQuantityUnitDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformQuantityUnitQuantityUnitDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_quantity_unit_quantity_unit_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformQuantityUnitQuantityUnitDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(dataPlatformQuantityUnitQuantityUnitDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformQuantityUnitQuantityUnitDatum(ctx, exec, o.QuantityUnit)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformQuantityUnitQuantityUnitDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformQuantityUnitQuantityUnitDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_quantity_unit_quantity_unit_data`.* FROM `data_platform_quantity_unit_quantity_unit_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformQuantityUnitQuantityUnitDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformQuantityUnitQuantityUnitDatumExists checks if the DataPlatformQuantityUnitQuantityUnitDatum row exists.
func DataPlatformQuantityUnitQuantityUnitDatumExists(ctx context.Context, exec boil.ContextExecutor, quantityUnit string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_quantity_unit_quantity_unit_data` where `QuantityUnit`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, quantityUnit)
	}
	row := exec.QueryRowContext(ctx, sql, quantityUnit)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_quantity_unit_quantity_unit_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformQuantityUnitQuantityUnitDatum row exists.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformQuantityUnitQuantityUnitDatumExists(ctx, exec, o.QuantityUnit)
}
