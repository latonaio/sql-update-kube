// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformQuantityUnitQuantityUnitDatum is an object representing the database table.
type DataPlatformQuantityUnitQuantityUnitDatum struct {
	QuantityUnit string `boil:"QuantityUnit" json:"QuantityUnit" toml:"QuantityUnit" yaml:"QuantityUnit"`

	R *dataPlatformQuantityUnitQuantityUnitDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformQuantityUnitQuantityUnitDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformQuantityUnitQuantityUnitDatumColumns = struct {
	QuantityUnit string
}{
	QuantityUnit: "QuantityUnit",
}

var DataPlatformQuantityUnitQuantityUnitDatumTableColumns = struct {
	QuantityUnit string
}{
	QuantityUnit: "data_platform_quantity_unit_quantity_unit_data.QuantityUnit",
}

// Generated where

var DataPlatformQuantityUnitQuantityUnitDatumWhere = struct {
	QuantityUnit whereHelperstring
}{
	QuantityUnit: whereHelperstring{field: "`data_platform_quantity_unit_quantity_unit_data`.`QuantityUnit`"},
}

// DataPlatformQuantityUnitQuantityUnitDatumRels is where relationship names are stored.
var DataPlatformQuantityUnitQuantityUnitDatumRels = struct {
	ProductBaseUnitDataPlatformBillOfMaterialHeaderData                           string
	ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData                       string
	ProductProductionUnitDataPlatformBillOfMaterialHeaderData                     string
	ComponentProductBaseUnitDataPlatformBillOfMaterialItemData                    string
	ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData                string
	HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData                        string
	BaseUnitDataPlatformDeliveryDocumentItemData                                  string
	DeliveryUnitDataPlatformDeliveryDocumentItemData                              string
	InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData              string
	ItemWeightUnitDataPlatformDeliveryDocumentItemData                            string
	InspectionTypeValueUnitDataPlatformInspectionLotInspectionData                string
	SpecTypeUnitDataPlatformInspectionLotSpecDetailData                           string
	InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData               string
	SpecTypeUnitDataPlatformInspectionPlanSpecDetailData                          string
	BaseUnitDataPlatformInvoiceDocumentItemData                                   string
	InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData                        string
	ItemWeightUnitDataPlatformInvoiceDocumentItemData                             string
	ProductBaseUnitDataPlatformOperationsHeaderData                               string
	ProductDeliveryUnitDataPlatformOperationsHeaderData                           string
	ProductProductionUnitDataPlatformOperationsHeaderData                         string
	OperationsUnitDataPlatformOperationsItemData                                  string
	MoveDurationUnitDataPlatformOperationsItemOperationData                       string
	OperationUnitDataPlatformOperationsItemOperationData                          string
	QueueDurationUnitDataPlatformOperationsItemOperationData                      string
	StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData           string
	WaitDurationUnitDataPlatformOperationsItemOperationData                       string
	BaseUnitDataPlatformOrdersItemData                                            string
	DeliveryUnitDataPlatformOrdersItemData                                        string
	InternalCapacityQuantityUnitDataPlatformOrdersItemData                        string
	ProductWeightUnitDataPlatformOrdersItemData                                   string
	PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData           string
	PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData         string
	PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData         string
	ProductBaseUnitDataPlatformPlannedOrderHeaderData                             string
	ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData             string
	ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData         string
	ProductBaseUnitDataPlatformPlannedOrderItemData                               string
	ProductDeliveryUnitDataPlatformPlannedOrderItemData                           string
	ProductProductionUnitDataPlatformPlannedOrderItemData                         string
	MoveDurationUnitDataPlatformPlannedOrderItemOperationData                     string
	ProductBaseUnitDataPlatformPlannedOrderItemOperationData                      string
	ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData                  string
	ProductOperationUnitDataPlatformPlannedOrderItemOperationData                 string
	ProductProductionUnitDataPlatformPlannedOrderItemOperationData                string
	QueueDurationUnitDataPlatformPlannedOrderItemOperationData                    string
	StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData         string
	WaitDurationUnitDataPlatformPlannedOrderItemOperationData                     string
	SafetyDurationUnitDataPlatformProductMasterBPPlantData                        string
	StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData              string
	BaseUnitDataPlatformProductMasterGeneralData                                  string
	InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData              string
	WeightUnitDataPlatformProductMasterGeneralData                                string
	ProductProcessingDurationUnitDataPlatformProductMasterProductionData          string
	ProductProductionQuantityUnitDataPlatformProductMasterProductionData          string
	MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData             string
	ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData              string
	ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData         string
	ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData        string
	QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData            string
	WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData             string
	ProductBaseUnitDataPlatformProductionOrderHeaderData                          string
	ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData     string
	ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData   string
	ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData string
	ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData   string
	ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData          string
	ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData      string
	ProductBaseUnitDataPlatformProductionOrderItemData                            string
	ProductDeliveryUnitDataPlatformProductionOrderItemData                        string
	ProductProductionUnitDataPlatformProductionOrderItemData                      string
	MoveDurationUnitDataPlatformProductionOrderItemOperationData                  string
	ProductBaseUnitDataPlatformProductionOrderItemOperationData                   string
	ProductDeliveryUnitDataPlatformProductionOrderItemOperationData               string
	ProductOperationUnitDataPlatformProductionOrderItemOperationData              string
	ProductProductionUnitDataPlatformProductionOrderItemOperationData             string
	QueueDurationUnitDataPlatformProductionOrderItemOperationData                 string
	StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData      string
	WaitDurationUnitDataPlatformProductionOrderItemOperationData                  string
	BaseUnitDataPlatformPurchaseRequisitionItemData                               string
	QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData        string
	QuantityUnitDataPlatformQuantityUnitTextData                                  string
	DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData                   string
	SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData             string
	DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData            string
	DurationUnitDataPlatformUsageControlChainUsageControlChainData                string
}{
	ProductBaseUnitDataPlatformBillOfMaterialHeaderData:                           "ProductBaseUnitDataPlatformBillOfMaterialHeaderData",
	ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData:                       "ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData",
	ProductProductionUnitDataPlatformBillOfMaterialHeaderData:                     "ProductProductionUnitDataPlatformBillOfMaterialHeaderData",
	ComponentProductBaseUnitDataPlatformBillOfMaterialItemData:                    "ComponentProductBaseUnitDataPlatformBillOfMaterialItemData",
	ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData:                "ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData",
	HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData:                        "HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData",
	BaseUnitDataPlatformDeliveryDocumentItemData:                                  "BaseUnitDataPlatformDeliveryDocumentItemData",
	DeliveryUnitDataPlatformDeliveryDocumentItemData:                              "DeliveryUnitDataPlatformDeliveryDocumentItemData",
	InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData:              "InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData",
	ItemWeightUnitDataPlatformDeliveryDocumentItemData:                            "ItemWeightUnitDataPlatformDeliveryDocumentItemData",
	InspectionTypeValueUnitDataPlatformInspectionLotInspectionData:                "InspectionTypeValueUnitDataPlatformInspectionLotInspectionData",
	SpecTypeUnitDataPlatformInspectionLotSpecDetailData:                           "SpecTypeUnitDataPlatformInspectionLotSpecDetailData",
	InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData:               "InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData",
	SpecTypeUnitDataPlatformInspectionPlanSpecDetailData:                          "SpecTypeUnitDataPlatformInspectionPlanSpecDetailData",
	BaseUnitDataPlatformInvoiceDocumentItemData:                                   "BaseUnitDataPlatformInvoiceDocumentItemData",
	InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData:                        "InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData",
	ItemWeightUnitDataPlatformInvoiceDocumentItemData:                             "ItemWeightUnitDataPlatformInvoiceDocumentItemData",
	ProductBaseUnitDataPlatformOperationsHeaderData:                               "ProductBaseUnitDataPlatformOperationsHeaderData",
	ProductDeliveryUnitDataPlatformOperationsHeaderData:                           "ProductDeliveryUnitDataPlatformOperationsHeaderData",
	ProductProductionUnitDataPlatformOperationsHeaderData:                         "ProductProductionUnitDataPlatformOperationsHeaderData",
	OperationsUnitDataPlatformOperationsItemData:                                  "OperationsUnitDataPlatformOperationsItemData",
	MoveDurationUnitDataPlatformOperationsItemOperationData:                       "MoveDurationUnitDataPlatformOperationsItemOperationData",
	OperationUnitDataPlatformOperationsItemOperationData:                          "OperationUnitDataPlatformOperationsItemOperationData",
	QueueDurationUnitDataPlatformOperationsItemOperationData:                      "QueueDurationUnitDataPlatformOperationsItemOperationData",
	StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData:           "StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData",
	WaitDurationUnitDataPlatformOperationsItemOperationData:                       "WaitDurationUnitDataPlatformOperationsItemOperationData",
	BaseUnitDataPlatformOrdersItemData:                                            "BaseUnitDataPlatformOrdersItemData",
	DeliveryUnitDataPlatformOrdersItemData:                                        "DeliveryUnitDataPlatformOrdersItemData",
	InternalCapacityQuantityUnitDataPlatformOrdersItemData:                        "InternalCapacityQuantityUnitDataPlatformOrdersItemData",
	ProductWeightUnitDataPlatformOrdersItemData:                                   "ProductWeightUnitDataPlatformOrdersItemData",
	PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData:           "PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData",
	PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData:         "PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData",
	PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData:         "PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData",
	ProductBaseUnitDataPlatformPlannedOrderHeaderData:                             "ProductBaseUnitDataPlatformPlannedOrderHeaderData",
	ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData:             "ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData",
	ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData:         "ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData",
	ProductBaseUnitDataPlatformPlannedOrderItemData:                               "ProductBaseUnitDataPlatformPlannedOrderItemData",
	ProductDeliveryUnitDataPlatformPlannedOrderItemData:                           "ProductDeliveryUnitDataPlatformPlannedOrderItemData",
	ProductProductionUnitDataPlatformPlannedOrderItemData:                         "ProductProductionUnitDataPlatformPlannedOrderItemData",
	MoveDurationUnitDataPlatformPlannedOrderItemOperationData:                     "MoveDurationUnitDataPlatformPlannedOrderItemOperationData",
	ProductBaseUnitDataPlatformPlannedOrderItemOperationData:                      "ProductBaseUnitDataPlatformPlannedOrderItemOperationData",
	ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData:                  "ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData",
	ProductOperationUnitDataPlatformPlannedOrderItemOperationData:                 "ProductOperationUnitDataPlatformPlannedOrderItemOperationData",
	ProductProductionUnitDataPlatformPlannedOrderItemOperationData:                "ProductProductionUnitDataPlatformPlannedOrderItemOperationData",
	QueueDurationUnitDataPlatformPlannedOrderItemOperationData:                    "QueueDurationUnitDataPlatformPlannedOrderItemOperationData",
	StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData:         "StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData",
	WaitDurationUnitDataPlatformPlannedOrderItemOperationData:                     "WaitDurationUnitDataPlatformPlannedOrderItemOperationData",
	SafetyDurationUnitDataPlatformProductMasterBPPlantData:                        "SafetyDurationUnitDataPlatformProductMasterBPPlantData",
	StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData:              "StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData",
	BaseUnitDataPlatformProductMasterGeneralData:                                  "BaseUnitDataPlatformProductMasterGeneralData",
	InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData:              "InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData",
	WeightUnitDataPlatformProductMasterGeneralData:                                "WeightUnitDataPlatformProductMasterGeneralData",
	ProductProcessingDurationUnitDataPlatformProductMasterProductionData:          "ProductProcessingDurationUnitDataPlatformProductMasterProductionData",
	ProductProductionQuantityUnitDataPlatformProductMasterProductionData:          "ProductProductionQuantityUnitDataPlatformProductMasterProductionData",
	MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData:             "MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData",
	ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData:              "ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData",
	ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData:         "ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData",
	ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData:        "ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData",
	QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData:            "QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData",
	WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData:             "WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData",
	ProductBaseUnitDataPlatformProductionOrderHeaderData:                          "ProductBaseUnitDataPlatformProductionOrderHeaderData",
	ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData:     "ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData",
	ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData:   "ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData",
	ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData: "ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData",
	ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData:   "ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData",
	ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData:          "ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData",
	ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData:      "ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData",
	ProductBaseUnitDataPlatformProductionOrderItemData:                            "ProductBaseUnitDataPlatformProductionOrderItemData",
	ProductDeliveryUnitDataPlatformProductionOrderItemData:                        "ProductDeliveryUnitDataPlatformProductionOrderItemData",
	ProductProductionUnitDataPlatformProductionOrderItemData:                      "ProductProductionUnitDataPlatformProductionOrderItemData",
	MoveDurationUnitDataPlatformProductionOrderItemOperationData:                  "MoveDurationUnitDataPlatformProductionOrderItemOperationData",
	ProductBaseUnitDataPlatformProductionOrderItemOperationData:                   "ProductBaseUnitDataPlatformProductionOrderItemOperationData",
	ProductDeliveryUnitDataPlatformProductionOrderItemOperationData:               "ProductDeliveryUnitDataPlatformProductionOrderItemOperationData",
	ProductOperationUnitDataPlatformProductionOrderItemOperationData:              "ProductOperationUnitDataPlatformProductionOrderItemOperationData",
	ProductProductionUnitDataPlatformProductionOrderItemOperationData:             "ProductProductionUnitDataPlatformProductionOrderItemOperationData",
	QueueDurationUnitDataPlatformProductionOrderItemOperationData:                 "QueueDurationUnitDataPlatformProductionOrderItemOperationData",
	StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData:      "StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData",
	WaitDurationUnitDataPlatformProductionOrderItemOperationData:                  "WaitDurationUnitDataPlatformProductionOrderItemOperationData",
	BaseUnitDataPlatformPurchaseRequisitionItemData:                               "BaseUnitDataPlatformPurchaseRequisitionItemData",
	QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData:        "QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData",
	QuantityUnitDataPlatformQuantityUnitTextData:                                  "QuantityUnitDataPlatformQuantityUnitTextData",
	DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData:                   "DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData",
	SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData:             "SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData",
	DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData:            "DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData",
	DurationUnitDataPlatformUsageControlChainUsageControlChainData:                "DurationUnitDataPlatformUsageControlChainUsageControlChainData",
}

// dataPlatformQuantityUnitQuantityUnitDatumR is where relationships are stored.
type dataPlatformQuantityUnitQuantityUnitDatumR struct {
	ProductBaseUnitDataPlatformBillOfMaterialHeaderData                           DataPlatformBillOfMaterialHeaderDatumSlice                   `boil:"ProductBaseUnitDataPlatformBillOfMaterialHeaderData" json:"ProductBaseUnitDataPlatformBillOfMaterialHeaderData" toml:"ProductBaseUnitDataPlatformBillOfMaterialHeaderData" yaml:"ProductBaseUnitDataPlatformBillOfMaterialHeaderData"`
	ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData                       DataPlatformBillOfMaterialHeaderDatumSlice                   `boil:"ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData" json:"ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData" toml:"ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData" yaml:"ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData"`
	ProductProductionUnitDataPlatformBillOfMaterialHeaderData                     DataPlatformBillOfMaterialHeaderDatumSlice                   `boil:"ProductProductionUnitDataPlatformBillOfMaterialHeaderData" json:"ProductProductionUnitDataPlatformBillOfMaterialHeaderData" toml:"ProductProductionUnitDataPlatformBillOfMaterialHeaderData" yaml:"ProductProductionUnitDataPlatformBillOfMaterialHeaderData"`
	ComponentProductBaseUnitDataPlatformBillOfMaterialItemData                    DataPlatformBillOfMaterialItemDatumSlice                     `boil:"ComponentProductBaseUnitDataPlatformBillOfMaterialItemData" json:"ComponentProductBaseUnitDataPlatformBillOfMaterialItemData" toml:"ComponentProductBaseUnitDataPlatformBillOfMaterialItemData" yaml:"ComponentProductBaseUnitDataPlatformBillOfMaterialItemData"`
	ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData                DataPlatformBillOfMaterialItemDatumSlice                     `boil:"ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData" json:"ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData" toml:"ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData" yaml:"ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData"`
	HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData                        DataPlatformDeliveryDocumentHeaderDatumSlice                 `boil:"HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData" json:"HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData" toml:"HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData" yaml:"HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData"`
	BaseUnitDataPlatformDeliveryDocumentItemData                                  DataPlatformDeliveryDocumentItemDatumSlice                   `boil:"BaseUnitDataPlatformDeliveryDocumentItemData" json:"BaseUnitDataPlatformDeliveryDocumentItemData" toml:"BaseUnitDataPlatformDeliveryDocumentItemData" yaml:"BaseUnitDataPlatformDeliveryDocumentItemData"`
	DeliveryUnitDataPlatformDeliveryDocumentItemData                              DataPlatformDeliveryDocumentItemDatumSlice                   `boil:"DeliveryUnitDataPlatformDeliveryDocumentItemData" json:"DeliveryUnitDataPlatformDeliveryDocumentItemData" toml:"DeliveryUnitDataPlatformDeliveryDocumentItemData" yaml:"DeliveryUnitDataPlatformDeliveryDocumentItemData"`
	InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData              DataPlatformDeliveryDocumentItemDatumSlice                   `boil:"InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData" json:"InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData" toml:"InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData" yaml:"InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData"`
	ItemWeightUnitDataPlatformDeliveryDocumentItemData                            DataPlatformDeliveryDocumentItemDatumSlice                   `boil:"ItemWeightUnitDataPlatformDeliveryDocumentItemData" json:"ItemWeightUnitDataPlatformDeliveryDocumentItemData" toml:"ItemWeightUnitDataPlatformDeliveryDocumentItemData" yaml:"ItemWeightUnitDataPlatformDeliveryDocumentItemData"`
	InspectionTypeValueUnitDataPlatformInspectionLotInspectionData                DataPlatformInspectionLotInspectionDatumSlice                `boil:"InspectionTypeValueUnitDataPlatformInspectionLotInspectionData" json:"InspectionTypeValueUnitDataPlatformInspectionLotInspectionData" toml:"InspectionTypeValueUnitDataPlatformInspectionLotInspectionData" yaml:"InspectionTypeValueUnitDataPlatformInspectionLotInspectionData"`
	SpecTypeUnitDataPlatformInspectionLotSpecDetailData                           DataPlatformInspectionLotSpecDetailDatumSlice                `boil:"SpecTypeUnitDataPlatformInspectionLotSpecDetailData" json:"SpecTypeUnitDataPlatformInspectionLotSpecDetailData" toml:"SpecTypeUnitDataPlatformInspectionLotSpecDetailData" yaml:"SpecTypeUnitDataPlatformInspectionLotSpecDetailData"`
	InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData               DataPlatformInspectionPlanInspectionDatumSlice               `boil:"InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData" json:"InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData" toml:"InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData" yaml:"InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData"`
	SpecTypeUnitDataPlatformInspectionPlanSpecDetailData                          DataPlatformInspectionPlanSpecDetailDatumSlice               `boil:"SpecTypeUnitDataPlatformInspectionPlanSpecDetailData" json:"SpecTypeUnitDataPlatformInspectionPlanSpecDetailData" toml:"SpecTypeUnitDataPlatformInspectionPlanSpecDetailData" yaml:"SpecTypeUnitDataPlatformInspectionPlanSpecDetailData"`
	BaseUnitDataPlatformInvoiceDocumentItemData                                   DataPlatformInvoiceDocumentItemDatumSlice                    `boil:"BaseUnitDataPlatformInvoiceDocumentItemData" json:"BaseUnitDataPlatformInvoiceDocumentItemData" toml:"BaseUnitDataPlatformInvoiceDocumentItemData" yaml:"BaseUnitDataPlatformInvoiceDocumentItemData"`
	InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData                        DataPlatformInvoiceDocumentItemDatumSlice                    `boil:"InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData" json:"InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData" toml:"InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData" yaml:"InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData"`
	ItemWeightUnitDataPlatformInvoiceDocumentItemData                             DataPlatformInvoiceDocumentItemDatumSlice                    `boil:"ItemWeightUnitDataPlatformInvoiceDocumentItemData" json:"ItemWeightUnitDataPlatformInvoiceDocumentItemData" toml:"ItemWeightUnitDataPlatformInvoiceDocumentItemData" yaml:"ItemWeightUnitDataPlatformInvoiceDocumentItemData"`
	ProductBaseUnitDataPlatformOperationsHeaderData                               DataPlatformOperationsHeaderDatumSlice                       `boil:"ProductBaseUnitDataPlatformOperationsHeaderData" json:"ProductBaseUnitDataPlatformOperationsHeaderData" toml:"ProductBaseUnitDataPlatformOperationsHeaderData" yaml:"ProductBaseUnitDataPlatformOperationsHeaderData"`
	ProductDeliveryUnitDataPlatformOperationsHeaderData                           DataPlatformOperationsHeaderDatumSlice                       `boil:"ProductDeliveryUnitDataPlatformOperationsHeaderData" json:"ProductDeliveryUnitDataPlatformOperationsHeaderData" toml:"ProductDeliveryUnitDataPlatformOperationsHeaderData" yaml:"ProductDeliveryUnitDataPlatformOperationsHeaderData"`
	ProductProductionUnitDataPlatformOperationsHeaderData                         DataPlatformOperationsHeaderDatumSlice                       `boil:"ProductProductionUnitDataPlatformOperationsHeaderData" json:"ProductProductionUnitDataPlatformOperationsHeaderData" toml:"ProductProductionUnitDataPlatformOperationsHeaderData" yaml:"ProductProductionUnitDataPlatformOperationsHeaderData"`
	OperationsUnitDataPlatformOperationsItemData                                  DataPlatformOperationsItemDatumSlice                         `boil:"OperationsUnitDataPlatformOperationsItemData" json:"OperationsUnitDataPlatformOperationsItemData" toml:"OperationsUnitDataPlatformOperationsItemData" yaml:"OperationsUnitDataPlatformOperationsItemData"`
	MoveDurationUnitDataPlatformOperationsItemOperationData                       DataPlatformOperationsItemOperationDatumSlice                `boil:"MoveDurationUnitDataPlatformOperationsItemOperationData" json:"MoveDurationUnitDataPlatformOperationsItemOperationData" toml:"MoveDurationUnitDataPlatformOperationsItemOperationData" yaml:"MoveDurationUnitDataPlatformOperationsItemOperationData"`
	OperationUnitDataPlatformOperationsItemOperationData                          DataPlatformOperationsItemOperationDatumSlice                `boil:"OperationUnitDataPlatformOperationsItemOperationData" json:"OperationUnitDataPlatformOperationsItemOperationData" toml:"OperationUnitDataPlatformOperationsItemOperationData" yaml:"OperationUnitDataPlatformOperationsItemOperationData"`
	QueueDurationUnitDataPlatformOperationsItemOperationData                      DataPlatformOperationsItemOperationDatumSlice                `boil:"QueueDurationUnitDataPlatformOperationsItemOperationData" json:"QueueDurationUnitDataPlatformOperationsItemOperationData" toml:"QueueDurationUnitDataPlatformOperationsItemOperationData" yaml:"QueueDurationUnitDataPlatformOperationsItemOperationData"`
	StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData           DataPlatformOperationsItemOperationDatumSlice                `boil:"StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData" json:"StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData" toml:"StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData" yaml:"StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData"`
	WaitDurationUnitDataPlatformOperationsItemOperationData                       DataPlatformOperationsItemOperationDatumSlice                `boil:"WaitDurationUnitDataPlatformOperationsItemOperationData" json:"WaitDurationUnitDataPlatformOperationsItemOperationData" toml:"WaitDurationUnitDataPlatformOperationsItemOperationData" yaml:"WaitDurationUnitDataPlatformOperationsItemOperationData"`
	BaseUnitDataPlatformOrdersItemData                                            DataPlatformOrdersItemDatumSlice                             `boil:"BaseUnitDataPlatformOrdersItemData" json:"BaseUnitDataPlatformOrdersItemData" toml:"BaseUnitDataPlatformOrdersItemData" yaml:"BaseUnitDataPlatformOrdersItemData"`
	DeliveryUnitDataPlatformOrdersItemData                                        DataPlatformOrdersItemDatumSlice                             `boil:"DeliveryUnitDataPlatformOrdersItemData" json:"DeliveryUnitDataPlatformOrdersItemData" toml:"DeliveryUnitDataPlatformOrdersItemData" yaml:"DeliveryUnitDataPlatformOrdersItemData"`
	InternalCapacityQuantityUnitDataPlatformOrdersItemData                        DataPlatformOrdersItemDatumSlice                             `boil:"InternalCapacityQuantityUnitDataPlatformOrdersItemData" json:"InternalCapacityQuantityUnitDataPlatformOrdersItemData" toml:"InternalCapacityQuantityUnitDataPlatformOrdersItemData" yaml:"InternalCapacityQuantityUnitDataPlatformOrdersItemData"`
	ProductWeightUnitDataPlatformOrdersItemData                                   DataPlatformOrdersItemDatumSlice                             `boil:"ProductWeightUnitDataPlatformOrdersItemData" json:"ProductWeightUnitDataPlatformOrdersItemData" toml:"ProductWeightUnitDataPlatformOrdersItemData" yaml:"ProductWeightUnitDataPlatformOrdersItemData"`
	PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData           DataPlatformPlannedOrderHeaderDatumSlice                     `boil:"PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData" json:"PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData" toml:"PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData" yaml:"PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData"`
	PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData         DataPlatformPlannedOrderHeaderDatumSlice                     `boil:"PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData" json:"PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData" toml:"PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData" yaml:"PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData"`
	PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData         DataPlatformPlannedOrderHeaderDatumSlice                     `boil:"PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData" json:"PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData" toml:"PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData" yaml:"PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData"`
	ProductBaseUnitDataPlatformPlannedOrderHeaderData                             DataPlatformPlannedOrderHeaderDatumSlice                     `boil:"ProductBaseUnitDataPlatformPlannedOrderHeaderData" json:"ProductBaseUnitDataPlatformPlannedOrderHeaderData" toml:"ProductBaseUnitDataPlatformPlannedOrderHeaderData" yaml:"ProductBaseUnitDataPlatformPlannedOrderHeaderData"`
	ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData             DataPlatformPlannedOrderItemComponentDatumSlice              `boil:"ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData" json:"ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData" toml:"ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData" yaml:"ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData"`
	ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData         DataPlatformPlannedOrderItemComponentDatumSlice              `boil:"ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData" json:"ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData" toml:"ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData" yaml:"ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData"`
	ProductBaseUnitDataPlatformPlannedOrderItemData                               DataPlatformPlannedOrderItemDatumSlice                       `boil:"ProductBaseUnitDataPlatformPlannedOrderItemData" json:"ProductBaseUnitDataPlatformPlannedOrderItemData" toml:"ProductBaseUnitDataPlatformPlannedOrderItemData" yaml:"ProductBaseUnitDataPlatformPlannedOrderItemData"`
	ProductDeliveryUnitDataPlatformPlannedOrderItemData                           DataPlatformPlannedOrderItemDatumSlice                       `boil:"ProductDeliveryUnitDataPlatformPlannedOrderItemData" json:"ProductDeliveryUnitDataPlatformPlannedOrderItemData" toml:"ProductDeliveryUnitDataPlatformPlannedOrderItemData" yaml:"ProductDeliveryUnitDataPlatformPlannedOrderItemData"`
	ProductProductionUnitDataPlatformPlannedOrderItemData                         DataPlatformPlannedOrderItemDatumSlice                       `boil:"ProductProductionUnitDataPlatformPlannedOrderItemData" json:"ProductProductionUnitDataPlatformPlannedOrderItemData" toml:"ProductProductionUnitDataPlatformPlannedOrderItemData" yaml:"ProductProductionUnitDataPlatformPlannedOrderItemData"`
	MoveDurationUnitDataPlatformPlannedOrderItemOperationData                     DataPlatformPlannedOrderItemOperationDatumSlice              `boil:"MoveDurationUnitDataPlatformPlannedOrderItemOperationData" json:"MoveDurationUnitDataPlatformPlannedOrderItemOperationData" toml:"MoveDurationUnitDataPlatformPlannedOrderItemOperationData" yaml:"MoveDurationUnitDataPlatformPlannedOrderItemOperationData"`
	ProductBaseUnitDataPlatformPlannedOrderItemOperationData                      DataPlatformPlannedOrderItemOperationDatumSlice              `boil:"ProductBaseUnitDataPlatformPlannedOrderItemOperationData" json:"ProductBaseUnitDataPlatformPlannedOrderItemOperationData" toml:"ProductBaseUnitDataPlatformPlannedOrderItemOperationData" yaml:"ProductBaseUnitDataPlatformPlannedOrderItemOperationData"`
	ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData                  DataPlatformPlannedOrderItemOperationDatumSlice              `boil:"ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData" json:"ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData" toml:"ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData" yaml:"ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData"`
	ProductOperationUnitDataPlatformPlannedOrderItemOperationData                 DataPlatformPlannedOrderItemOperationDatumSlice              `boil:"ProductOperationUnitDataPlatformPlannedOrderItemOperationData" json:"ProductOperationUnitDataPlatformPlannedOrderItemOperationData" toml:"ProductOperationUnitDataPlatformPlannedOrderItemOperationData" yaml:"ProductOperationUnitDataPlatformPlannedOrderItemOperationData"`
	ProductProductionUnitDataPlatformPlannedOrderItemOperationData                DataPlatformPlannedOrderItemOperationDatumSlice              `boil:"ProductProductionUnitDataPlatformPlannedOrderItemOperationData" json:"ProductProductionUnitDataPlatformPlannedOrderItemOperationData" toml:"ProductProductionUnitDataPlatformPlannedOrderItemOperationData" yaml:"ProductProductionUnitDataPlatformPlannedOrderItemOperationData"`
	QueueDurationUnitDataPlatformPlannedOrderItemOperationData                    DataPlatformPlannedOrderItemOperationDatumSlice              `boil:"QueueDurationUnitDataPlatformPlannedOrderItemOperationData" json:"QueueDurationUnitDataPlatformPlannedOrderItemOperationData" toml:"QueueDurationUnitDataPlatformPlannedOrderItemOperationData" yaml:"QueueDurationUnitDataPlatformPlannedOrderItemOperationData"`
	StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData         DataPlatformPlannedOrderItemOperationDatumSlice              `boil:"StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData" json:"StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData" toml:"StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData" yaml:"StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData"`
	WaitDurationUnitDataPlatformPlannedOrderItemOperationData                     DataPlatformPlannedOrderItemOperationDatumSlice              `boil:"WaitDurationUnitDataPlatformPlannedOrderItemOperationData" json:"WaitDurationUnitDataPlatformPlannedOrderItemOperationData" toml:"WaitDurationUnitDataPlatformPlannedOrderItemOperationData" yaml:"WaitDurationUnitDataPlatformPlannedOrderItemOperationData"`
	SafetyDurationUnitDataPlatformProductMasterBPPlantData                        DataPlatformProductMasterBPPlantDatumSlice                   `boil:"SafetyDurationUnitDataPlatformProductMasterBPPlantData" json:"SafetyDurationUnitDataPlatformProductMasterBPPlantData" toml:"SafetyDurationUnitDataPlatformProductMasterBPPlantData" yaml:"SafetyDurationUnitDataPlatformProductMasterBPPlantData"`
	StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData              DataPlatformProductMasterBPPlantDatumSlice                   `boil:"StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData" json:"StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData" toml:"StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData" yaml:"StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData"`
	BaseUnitDataPlatformProductMasterGeneralData                                  DataPlatformProductMasterGeneralDatumSlice                   `boil:"BaseUnitDataPlatformProductMasterGeneralData" json:"BaseUnitDataPlatformProductMasterGeneralData" toml:"BaseUnitDataPlatformProductMasterGeneralData" yaml:"BaseUnitDataPlatformProductMasterGeneralData"`
	InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData              DataPlatformProductMasterGeneralDatumSlice                   `boil:"InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData" json:"InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData" toml:"InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData" yaml:"InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData"`
	WeightUnitDataPlatformProductMasterGeneralData                                DataPlatformProductMasterGeneralDatumSlice                   `boil:"WeightUnitDataPlatformProductMasterGeneralData" json:"WeightUnitDataPlatformProductMasterGeneralData" toml:"WeightUnitDataPlatformProductMasterGeneralData" yaml:"WeightUnitDataPlatformProductMasterGeneralData"`
	ProductProcessingDurationUnitDataPlatformProductMasterProductionData          DataPlatformProductMasterProductionDatumSlice                `boil:"ProductProcessingDurationUnitDataPlatformProductMasterProductionData" json:"ProductProcessingDurationUnitDataPlatformProductMasterProductionData" toml:"ProductProcessingDurationUnitDataPlatformProductMasterProductionData" yaml:"ProductProcessingDurationUnitDataPlatformProductMasterProductionData"`
	ProductProductionQuantityUnitDataPlatformProductMasterProductionData          DataPlatformProductMasterProductionDatumSlice                `boil:"ProductProductionQuantityUnitDataPlatformProductMasterProductionData" json:"ProductProductionQuantityUnitDataPlatformProductMasterProductionData" toml:"ProductProductionQuantityUnitDataPlatformProductMasterProductionData" yaml:"ProductProductionQuantityUnitDataPlatformProductMasterProductionData"`
	MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData             DataPlatformProductionOrderConfirmationHeaderDatumSlice      `boil:"MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData" json:"MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData" toml:"MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData" yaml:"MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData"`
	ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData              DataPlatformProductionOrderConfirmationHeaderDatumSlice      `boil:"ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData" json:"ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData" toml:"ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData" yaml:"ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData"`
	ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData         DataPlatformProductionOrderConfirmationHeaderDatumSlice      `boil:"ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData" json:"ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData" toml:"ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData" yaml:"ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData"`
	ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData        DataPlatformProductionOrderConfirmationHeaderDatumSlice      `boil:"ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData" json:"ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData" toml:"ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData" yaml:"ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData"`
	QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData            DataPlatformProductionOrderConfirmationHeaderDatumSlice      `boil:"QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData" json:"QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData" toml:"QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData" yaml:"QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData"`
	WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData             DataPlatformProductionOrderConfirmationHeaderDatumSlice      `boil:"WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData" json:"WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData" toml:"WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData" yaml:"WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData"`
	ProductBaseUnitDataPlatformProductionOrderHeaderData                          DataPlatformProductionOrderHeaderDatumSlice                  `boil:"ProductBaseUnitDataPlatformProductionOrderHeaderData" json:"ProductBaseUnitDataPlatformProductionOrderHeaderData" toml:"ProductBaseUnitDataPlatformProductionOrderHeaderData" yaml:"ProductBaseUnitDataPlatformProductionOrderHeaderData"`
	ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData     DataPlatformProductionOrderHeaderDatumSlice                  `boil:"ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData" json:"ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData" toml:"ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData" yaml:"ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData"`
	ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData   DataPlatformProductionOrderHeaderDatumSlice                  `boil:"ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData" json:"ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData" toml:"ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData" yaml:"ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData"`
	ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData DataPlatformProductionOrderHeaderDatumSlice                  `boil:"ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData" json:"ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData" toml:"ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData" yaml:"ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData"`
	ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData   DataPlatformProductionOrderHeaderDatumSlice                  `boil:"ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData" json:"ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData" toml:"ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData" yaml:"ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData"`
	ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData          DataPlatformProductionOrderItemComponentDatumSlice           `boil:"ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData" json:"ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData" toml:"ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData" yaml:"ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData"`
	ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData      DataPlatformProductionOrderItemComponentDatumSlice           `boil:"ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData" json:"ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData" toml:"ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData" yaml:"ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData"`
	ProductBaseUnitDataPlatformProductionOrderItemData                            DataPlatformProductionOrderItemDatumSlice                    `boil:"ProductBaseUnitDataPlatformProductionOrderItemData" json:"ProductBaseUnitDataPlatformProductionOrderItemData" toml:"ProductBaseUnitDataPlatformProductionOrderItemData" yaml:"ProductBaseUnitDataPlatformProductionOrderItemData"`
	ProductDeliveryUnitDataPlatformProductionOrderItemData                        DataPlatformProductionOrderItemDatumSlice                    `boil:"ProductDeliveryUnitDataPlatformProductionOrderItemData" json:"ProductDeliveryUnitDataPlatformProductionOrderItemData" toml:"ProductDeliveryUnitDataPlatformProductionOrderItemData" yaml:"ProductDeliveryUnitDataPlatformProductionOrderItemData"`
	ProductProductionUnitDataPlatformProductionOrderItemData                      DataPlatformProductionOrderItemDatumSlice                    `boil:"ProductProductionUnitDataPlatformProductionOrderItemData" json:"ProductProductionUnitDataPlatformProductionOrderItemData" toml:"ProductProductionUnitDataPlatformProductionOrderItemData" yaml:"ProductProductionUnitDataPlatformProductionOrderItemData"`
	MoveDurationUnitDataPlatformProductionOrderItemOperationData                  DataPlatformProductionOrderItemOperationDatumSlice           `boil:"MoveDurationUnitDataPlatformProductionOrderItemOperationData" json:"MoveDurationUnitDataPlatformProductionOrderItemOperationData" toml:"MoveDurationUnitDataPlatformProductionOrderItemOperationData" yaml:"MoveDurationUnitDataPlatformProductionOrderItemOperationData"`
	ProductBaseUnitDataPlatformProductionOrderItemOperationData                   DataPlatformProductionOrderItemOperationDatumSlice           `boil:"ProductBaseUnitDataPlatformProductionOrderItemOperationData" json:"ProductBaseUnitDataPlatformProductionOrderItemOperationData" toml:"ProductBaseUnitDataPlatformProductionOrderItemOperationData" yaml:"ProductBaseUnitDataPlatformProductionOrderItemOperationData"`
	ProductDeliveryUnitDataPlatformProductionOrderItemOperationData               DataPlatformProductionOrderItemOperationDatumSlice           `boil:"ProductDeliveryUnitDataPlatformProductionOrderItemOperationData" json:"ProductDeliveryUnitDataPlatformProductionOrderItemOperationData" toml:"ProductDeliveryUnitDataPlatformProductionOrderItemOperationData" yaml:"ProductDeliveryUnitDataPlatformProductionOrderItemOperationData"`
	ProductOperationUnitDataPlatformProductionOrderItemOperationData              DataPlatformProductionOrderItemOperationDatumSlice           `boil:"ProductOperationUnitDataPlatformProductionOrderItemOperationData" json:"ProductOperationUnitDataPlatformProductionOrderItemOperationData" toml:"ProductOperationUnitDataPlatformProductionOrderItemOperationData" yaml:"ProductOperationUnitDataPlatformProductionOrderItemOperationData"`
	ProductProductionUnitDataPlatformProductionOrderItemOperationData             DataPlatformProductionOrderItemOperationDatumSlice           `boil:"ProductProductionUnitDataPlatformProductionOrderItemOperationData" json:"ProductProductionUnitDataPlatformProductionOrderItemOperationData" toml:"ProductProductionUnitDataPlatformProductionOrderItemOperationData" yaml:"ProductProductionUnitDataPlatformProductionOrderItemOperationData"`
	QueueDurationUnitDataPlatformProductionOrderItemOperationData                 DataPlatformProductionOrderItemOperationDatumSlice           `boil:"QueueDurationUnitDataPlatformProductionOrderItemOperationData" json:"QueueDurationUnitDataPlatformProductionOrderItemOperationData" toml:"QueueDurationUnitDataPlatformProductionOrderItemOperationData" yaml:"QueueDurationUnitDataPlatformProductionOrderItemOperationData"`
	StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData      DataPlatformProductionOrderItemOperationDatumSlice           `boil:"StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData" json:"StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData" toml:"StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData" yaml:"StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData"`
	WaitDurationUnitDataPlatformProductionOrderItemOperationData                  DataPlatformProductionOrderItemOperationDatumSlice           `boil:"WaitDurationUnitDataPlatformProductionOrderItemOperationData" json:"WaitDurationUnitDataPlatformProductionOrderItemOperationData" toml:"WaitDurationUnitDataPlatformProductionOrderItemOperationData" yaml:"WaitDurationUnitDataPlatformProductionOrderItemOperationData"`
	BaseUnitDataPlatformPurchaseRequisitionItemData                               DataPlatformPurchaseRequisitionItemDatumSlice                `boil:"BaseUnitDataPlatformPurchaseRequisitionItemData" json:"BaseUnitDataPlatformPurchaseRequisitionItemData" toml:"BaseUnitDataPlatformPurchaseRequisitionItemData" yaml:"BaseUnitDataPlatformPurchaseRequisitionItemData"`
	QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData        DataPlatformQuantityUnitConversionQuantityUnitConvDatumSlice `boil:"QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData" json:"QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData" toml:"QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData" yaml:"QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData"`
	QuantityUnitDataPlatformQuantityUnitTextData                                  DataPlatformQuantityUnitTextDatumSlice                       `boil:"QuantityUnitDataPlatformQuantityUnitTextData" json:"QuantityUnitDataPlatformQuantityUnitTextData" toml:"QuantityUnitDataPlatformQuantityUnitTextData" yaml:"QuantityUnitDataPlatformQuantityUnitTextData"`
	DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData                   DataPlatformSCRDeliveryPlantRelationProductDatumSlice        `boil:"DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData" json:"DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData" toml:"DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData" yaml:"DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData"`
	SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData             DataPlatformSCRDeliveryPlantRelationProductDatumSlice        `boil:"SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData" json:"SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData" toml:"SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData" yaml:"SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData"`
	DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData            DataPlatformSCRDeliveryPlantRelationProductMRPAreaDatumSlice `boil:"DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData" json:"DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData" toml:"DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData" yaml:"DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData"`
	DurationUnitDataPlatformUsageControlChainUsageControlChainData                DataPlatformUsageControlChainUsageControlChainDatumSlice     `boil:"DurationUnitDataPlatformUsageControlChainUsageControlChainData" json:"DurationUnitDataPlatformUsageControlChainUsageControlChainData" toml:"DurationUnitDataPlatformUsageControlChainUsageControlChainData" yaml:"DurationUnitDataPlatformUsageControlChainUsageControlChainData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformQuantityUnitQuantityUnitDatumR) NewStruct() *dataPlatformQuantityUnitQuantityUnitDatumR {
	return &dataPlatformQuantityUnitQuantityUnitDatumR{}
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductBaseUnitDataPlatformBillOfMaterialHeaderData() DataPlatformBillOfMaterialHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformBillOfMaterialHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductDeliveryUnitDataPlatformBillOfMaterialHeaderData() DataPlatformBillOfMaterialHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductProductionUnitDataPlatformBillOfMaterialHeaderData() DataPlatformBillOfMaterialHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformBillOfMaterialHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetComponentProductBaseUnitDataPlatformBillOfMaterialItemData() DataPlatformBillOfMaterialItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData() DataPlatformBillOfMaterialItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetBaseUnitDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BaseUnitDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetDeliveryUnitDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliveryUnitDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetInternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetItemWeightUnitDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ItemWeightUnitDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetInspectionTypeValueUnitDataPlatformInspectionLotInspectionData() DataPlatformInspectionLotInspectionDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetSpecTypeUnitDataPlatformInspectionLotSpecDetailData() DataPlatformInspectionLotSpecDetailDatumSlice {
	if r == nil {
		return nil
	}
	return r.SpecTypeUnitDataPlatformInspectionLotSpecDetailData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetInspectionTypeValueUnitDataPlatformInspectionPlanInspectionData() DataPlatformInspectionPlanInspectionDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetSpecTypeUnitDataPlatformInspectionPlanSpecDetailData() DataPlatformInspectionPlanSpecDetailDatumSlice {
	if r == nil {
		return nil
	}
	return r.SpecTypeUnitDataPlatformInspectionPlanSpecDetailData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetBaseUnitDataPlatformInvoiceDocumentItemData() DataPlatformInvoiceDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BaseUnitDataPlatformInvoiceDocumentItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetInvoiceQuantityUnitDataPlatformInvoiceDocumentItemData() DataPlatformInvoiceDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetItemWeightUnitDataPlatformInvoiceDocumentItemData() DataPlatformInvoiceDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ItemWeightUnitDataPlatformInvoiceDocumentItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductBaseUnitDataPlatformOperationsHeaderData() DataPlatformOperationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformOperationsHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductDeliveryUnitDataPlatformOperationsHeaderData() DataPlatformOperationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformOperationsHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductProductionUnitDataPlatformOperationsHeaderData() DataPlatformOperationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformOperationsHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetOperationsUnitDataPlatformOperationsItemData() DataPlatformOperationsItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationsUnitDataPlatformOperationsItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetMoveDurationUnitDataPlatformOperationsItemOperationData() DataPlatformOperationsItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.MoveDurationUnitDataPlatformOperationsItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetOperationUnitDataPlatformOperationsItemOperationData() DataPlatformOperationsItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationUnitDataPlatformOperationsItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetQueueDurationUnitDataPlatformOperationsItemOperationData() DataPlatformOperationsItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.QueueDurationUnitDataPlatformOperationsItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetStandardDeliveryDurationUnitDataPlatformOperationsItemOperationData() DataPlatformOperationsItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetWaitDurationUnitDataPlatformOperationsItemOperationData() DataPlatformOperationsItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.WaitDurationUnitDataPlatformOperationsItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetBaseUnitDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BaseUnitDataPlatformOrdersItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetDeliveryUnitDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliveryUnitDataPlatformOrdersItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetInternalCapacityQuantityUnitDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.InternalCapacityQuantityUnitDataPlatformOrdersItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductWeightUnitDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductWeightUnitDataPlatformOrdersItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetPlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData() DataPlatformPlannedOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetPlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData() DataPlatformPlannedOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetPlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData() DataPlatformPlannedOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductBaseUnitDataPlatformPlannedOrderHeaderData() DataPlatformPlannedOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformPlannedOrderHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData() DataPlatformPlannedOrderItemComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData() DataPlatformPlannedOrderItemComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductBaseUnitDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformPlannedOrderItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductDeliveryUnitDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformPlannedOrderItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductProductionUnitDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformPlannedOrderItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetMoveDurationUnitDataPlatformPlannedOrderItemOperationData() DataPlatformPlannedOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.MoveDurationUnitDataPlatformPlannedOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductBaseUnitDataPlatformPlannedOrderItemOperationData() DataPlatformPlannedOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformPlannedOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductDeliveryUnitDataPlatformPlannedOrderItemOperationData() DataPlatformPlannedOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductOperationUnitDataPlatformPlannedOrderItemOperationData() DataPlatformPlannedOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductOperationUnitDataPlatformPlannedOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductProductionUnitDataPlatformPlannedOrderItemOperationData() DataPlatformPlannedOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformPlannedOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetQueueDurationUnitDataPlatformPlannedOrderItemOperationData() DataPlatformPlannedOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.QueueDurationUnitDataPlatformPlannedOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetStandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData() DataPlatformPlannedOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetWaitDurationUnitDataPlatformPlannedOrderItemOperationData() DataPlatformPlannedOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.WaitDurationUnitDataPlatformPlannedOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetSafetyDurationUnitDataPlatformProductMasterBPPlantData() DataPlatformProductMasterBPPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.SafetyDurationUnitDataPlatformProductMasterBPPlantData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetStandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData() DataPlatformProductMasterBPPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetBaseUnitDataPlatformProductMasterGeneralData() DataPlatformProductMasterGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.BaseUnitDataPlatformProductMasterGeneralData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData() DataPlatformProductMasterGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetWeightUnitDataPlatformProductMasterGeneralData() DataPlatformProductMasterGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.WeightUnitDataPlatformProductMasterGeneralData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductProcessingDurationUnitDataPlatformProductMasterProductionData() DataPlatformProductMasterProductionDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductProcessingDurationUnitDataPlatformProductMasterProductionData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductProductionQuantityUnitDataPlatformProductMasterProductionData() DataPlatformProductMasterProductionDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductProductionQuantityUnitDataPlatformProductMasterProductionData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetMoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData() DataPlatformProductionOrderConfirmationHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData() DataPlatformProductionOrderConfirmationHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData() DataPlatformProductionOrderConfirmationHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData() DataPlatformProductionOrderConfirmationHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetQueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData() DataPlatformProductionOrderConfirmationHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetWaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData() DataPlatformProductionOrderConfirmationHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductBaseUnitDataPlatformProductionOrderHeaderData() DataPlatformProductionOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformProductionOrderHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData() DataPlatformProductionOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData() DataPlatformProductionOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData() DataPlatformProductionOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData() DataPlatformProductionOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetComponentProductBaseUnitDataPlatformProductionOrderItemComponentData() DataPlatformProductionOrderItemComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData() DataPlatformProductionOrderItemComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductBaseUnitDataPlatformProductionOrderItemData() DataPlatformProductionOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformProductionOrderItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductDeliveryUnitDataPlatformProductionOrderItemData() DataPlatformProductionOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformProductionOrderItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductProductionUnitDataPlatformProductionOrderItemData() DataPlatformProductionOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformProductionOrderItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetMoveDurationUnitDataPlatformProductionOrderItemOperationData() DataPlatformProductionOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.MoveDurationUnitDataPlatformProductionOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductBaseUnitDataPlatformProductionOrderItemOperationData() DataPlatformProductionOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformProductionOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductDeliveryUnitDataPlatformProductionOrderItemOperationData() DataPlatformProductionOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformProductionOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductOperationUnitDataPlatformProductionOrderItemOperationData() DataPlatformProductionOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductOperationUnitDataPlatformProductionOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetProductProductionUnitDataPlatformProductionOrderItemOperationData() DataPlatformProductionOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformProductionOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetQueueDurationUnitDataPlatformProductionOrderItemOperationData() DataPlatformProductionOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.QueueDurationUnitDataPlatformProductionOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetStandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData() DataPlatformProductionOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetWaitDurationUnitDataPlatformProductionOrderItemOperationData() DataPlatformProductionOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.WaitDurationUnitDataPlatformProductionOrderItemOperationData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetBaseUnitDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BaseUnitDataPlatformPurchaseRequisitionItemData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetQuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData() DataPlatformQuantityUnitConversionQuantityUnitConvDatumSlice {
	if r == nil {
		return nil
	}
	return r.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetQuantityUnitDataPlatformQuantityUnitTextData() DataPlatformQuantityUnitTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.QuantityUnitDataPlatformQuantityUnitTextData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetDeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData() DataPlatformSCRDeliveryPlantRelationProductDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetSafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData() DataPlatformSCRDeliveryPlantRelationProductDatumSlice {
	if r == nil {
		return nil
	}
	return r.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetDeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData() DataPlatformSCRDeliveryPlantRelationProductMRPAreaDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData
}

func (r *dataPlatformQuantityUnitQuantityUnitDatumR) GetDurationUnitDataPlatformUsageControlChainUsageControlChainData() DataPlatformUsageControlChainUsageControlChainDatumSlice {
	if r == nil {
		return nil
	}
	return r.DurationUnitDataPlatformUsageControlChainUsageControlChainData
}

// dataPlatformQuantityUnitQuantityUnitDatumL is where Load methods for each relationship are stored.
type dataPlatformQuantityUnitQuantityUnitDatumL struct{}

var (
	dataPlatformQuantityUnitQuantityUnitDatumAllColumns            = []string{"QuantityUnit"}
	dataPlatformQuantityUnitQuantityUnitDatumColumnsWithoutDefault = []string{"QuantityUnit"}
	dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault    = []string{}
	dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns     = []string{"QuantityUnit"}
	dataPlatformQuantityUnitQuantityUnitDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformQuantityUnitQuantityUnitDatumSlice is an alias for a slice of pointers to DataPlatformQuantityUnitQuantityUnitDatum.
	// This should almost always be used instead of []DataPlatformQuantityUnitQuantityUnitDatum.
	DataPlatformQuantityUnitQuantityUnitDatumSlice []*DataPlatformQuantityUnitQuantityUnitDatum

	dataPlatformQuantityUnitQuantityUnitDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformQuantityUnitQuantityUnitDatumType                 = reflect.TypeOf(&DataPlatformQuantityUnitQuantityUnitDatum{})
	dataPlatformQuantityUnitQuantityUnitDatumMapping              = queries.MakeStructMapping(dataPlatformQuantityUnitQuantityUnitDatumType)
	dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns)
	dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut       sync.RWMutex
	dataPlatformQuantityUnitQuantityUnitDatumInsertCache          = make(map[string]insertCache)
	dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut       sync.RWMutex
	dataPlatformQuantityUnitQuantityUnitDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut       sync.RWMutex
	dataPlatformQuantityUnitQuantityUnitDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformQuantityUnitQuantityUnitDatum record from the query.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformQuantityUnitQuantityUnitDatum, error) {
	o := &DataPlatformQuantityUnitQuantityUnitDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_quantity_unit_quantity_unit_data")
	}

	return o, nil
}

// All returns all DataPlatformQuantityUnitQuantityUnitDatum records from the query.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformQuantityUnitQuantityUnitDatumSlice, error) {
	var o []*DataPlatformQuantityUnitQuantityUnitDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformQuantityUnitQuantityUnitDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformQuantityUnitQuantityUnitDatum records in the query.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_quantity_unit_quantity_unit_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_quantity_unit_quantity_unit_data exists")
	}

	return count > 0, nil
}

// ProductBaseUnitDataPlatformBillOfMaterialHeaderData retrieves all the data_platform_bill_of_material_header_datum's DataPlatformBillOfMaterialHeaderData with an executor via ProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductBaseUnitDataPlatformBillOfMaterialHeaderData(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_header_data`.`ProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData retrieves all the data_platform_bill_of_material_header_datum's DataPlatformBillOfMaterialHeaderData with an executor via ProductDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_header_data`.`ProductDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// ProductProductionUnitDataPlatformBillOfMaterialHeaderData retrieves all the data_platform_bill_of_material_header_datum's DataPlatformBillOfMaterialHeaderData with an executor via ProductProductionUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductProductionUnitDataPlatformBillOfMaterialHeaderData(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_header_data`.`ProductProductionUnit`=?", o.QuantityUnit),
	)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// ComponentProductBaseUnitDataPlatformBillOfMaterialItemData retrieves all the data_platform_bill_of_material_item_datum's DataPlatformBillOfMaterialItemData with an executor via ComponentProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ComponentProductBaseUnitDataPlatformBillOfMaterialItemData(mods ...qm.QueryMod) dataPlatformBillOfMaterialItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_item_data`.`ComponentProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformBillOfMaterialItemData(queryMods...)
}

// ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData retrieves all the data_platform_bill_of_material_item_datum's DataPlatformBillOfMaterialItemData with an executor via ComponentProductDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData(mods ...qm.QueryMod) dataPlatformBillOfMaterialItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_item_data`.`ComponentProductDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformBillOfMaterialItemData(queryMods...)
}

// HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via HeaderWeightUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`HeaderWeightUnit`=?", o.QuantityUnit),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// BaseUnitDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via BaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) BaseUnitDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`BaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// DeliveryUnitDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via DeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) DeliveryUnitDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`DeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via InternalCapacityQuantityUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`InternalCapacityQuantityUnit`=?", o.QuantityUnit),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// ItemWeightUnitDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via ItemWeightUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ItemWeightUnitDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`ItemWeightUnit`=?", o.QuantityUnit),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// InspectionTypeValueUnitDataPlatformInspectionLotInspectionData retrieves all the data_platform_inspection_lot_inspection_datum's DataPlatformInspectionLotInspectionData with an executor via InspectionTypeValueUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) InspectionTypeValueUnitDataPlatformInspectionLotInspectionData(mods ...qm.QueryMod) dataPlatformInspectionLotInspectionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_lot_inspection_data`.`InspectionTypeValueUnit`=?", o.QuantityUnit),
	)

	return DataPlatformInspectionLotInspectionData(queryMods...)
}

// SpecTypeUnitDataPlatformInspectionLotSpecDetailData retrieves all the data_platform_inspection_lot_spec_detail_datum's DataPlatformInspectionLotSpecDetailData with an executor via SpecTypeUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SpecTypeUnitDataPlatformInspectionLotSpecDetailData(mods ...qm.QueryMod) dataPlatformInspectionLotSpecDetailDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_lot_spec_detail_data`.`SpecTypeUnit`=?", o.QuantityUnit),
	)

	return DataPlatformInspectionLotSpecDetailData(queryMods...)
}

// InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData retrieves all the data_platform_inspection_plan_inspection_datum's DataPlatformInspectionPlanInspectionData with an executor via InspectionTypeValueUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData(mods ...qm.QueryMod) dataPlatformInspectionPlanInspectionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_plan_inspection_data`.`InspectionTypeValueUnit`=?", o.QuantityUnit),
	)

	return DataPlatformInspectionPlanInspectionData(queryMods...)
}

// SpecTypeUnitDataPlatformInspectionPlanSpecDetailData retrieves all the data_platform_inspection_plan_spec_detail_datum's DataPlatformInspectionPlanSpecDetailData with an executor via SpecTypeUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SpecTypeUnitDataPlatformInspectionPlanSpecDetailData(mods ...qm.QueryMod) dataPlatformInspectionPlanSpecDetailDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_plan_spec_detail_data`.`SpecTypeUnit`=?", o.QuantityUnit),
	)

	return DataPlatformInspectionPlanSpecDetailData(queryMods...)
}

// BaseUnitDataPlatformInvoiceDocumentItemData retrieves all the data_platform_invoice_document_item_datum's DataPlatformInvoiceDocumentItemData with an executor via BaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) BaseUnitDataPlatformInvoiceDocumentItemData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_data`.`BaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformInvoiceDocumentItemData(queryMods...)
}

// InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData retrieves all the data_platform_invoice_document_item_datum's DataPlatformInvoiceDocumentItemData with an executor via InvoiceQuantityUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_data`.`InvoiceQuantityUnit`=?", o.QuantityUnit),
	)

	return DataPlatformInvoiceDocumentItemData(queryMods...)
}

// ItemWeightUnitDataPlatformInvoiceDocumentItemData retrieves all the data_platform_invoice_document_item_datum's DataPlatformInvoiceDocumentItemData with an executor via ItemWeightUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ItemWeightUnitDataPlatformInvoiceDocumentItemData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_data`.`ItemWeightUnit`=?", o.QuantityUnit),
	)

	return DataPlatformInvoiceDocumentItemData(queryMods...)
}

// ProductBaseUnitDataPlatformOperationsHeaderData retrieves all the data_platform_operations_header_datum's DataPlatformOperationsHeaderData with an executor via ProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductBaseUnitDataPlatformOperationsHeaderData(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_header_data`.`ProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// ProductDeliveryUnitDataPlatformOperationsHeaderData retrieves all the data_platform_operations_header_datum's DataPlatformOperationsHeaderData with an executor via ProductDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductDeliveryUnitDataPlatformOperationsHeaderData(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_header_data`.`ProductDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// ProductProductionUnitDataPlatformOperationsHeaderData retrieves all the data_platform_operations_header_datum's DataPlatformOperationsHeaderData with an executor via ProductProductionUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductProductionUnitDataPlatformOperationsHeaderData(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_header_data`.`ProductProductionUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// OperationsUnitDataPlatformOperationsItemData retrieves all the data_platform_operations_item_datum's DataPlatformOperationsItemData with an executor via OperationsUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) OperationsUnitDataPlatformOperationsItemData(mods ...qm.QueryMod) dataPlatformOperationsItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_data`.`OperationsUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOperationsItemData(queryMods...)
}

// MoveDurationUnitDataPlatformOperationsItemOperationData retrieves all the data_platform_operations_item_operation_datum's DataPlatformOperationsItemOperationData with an executor via MoveDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) MoveDurationUnitDataPlatformOperationsItemOperationData(mods ...qm.QueryMod) dataPlatformOperationsItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_operation_data`.`MoveDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOperationsItemOperationData(queryMods...)
}

// OperationUnitDataPlatformOperationsItemOperationData retrieves all the data_platform_operations_item_operation_datum's DataPlatformOperationsItemOperationData with an executor via OperationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) OperationUnitDataPlatformOperationsItemOperationData(mods ...qm.QueryMod) dataPlatformOperationsItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_operation_data`.`OperationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOperationsItemOperationData(queryMods...)
}

// QueueDurationUnitDataPlatformOperationsItemOperationData retrieves all the data_platform_operations_item_operation_datum's DataPlatformOperationsItemOperationData with an executor via QueueDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) QueueDurationUnitDataPlatformOperationsItemOperationData(mods ...qm.QueryMod) dataPlatformOperationsItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_operation_data`.`QueueDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOperationsItemOperationData(queryMods...)
}

// StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData retrieves all the data_platform_operations_item_operation_datum's DataPlatformOperationsItemOperationData with an executor via StandardDeliveryDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData(mods ...qm.QueryMod) dataPlatformOperationsItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_operation_data`.`StandardDeliveryDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOperationsItemOperationData(queryMods...)
}

// WaitDurationUnitDataPlatformOperationsItemOperationData retrieves all the data_platform_operations_item_operation_datum's DataPlatformOperationsItemOperationData with an executor via WaitDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) WaitDurationUnitDataPlatformOperationsItemOperationData(mods ...qm.QueryMod) dataPlatformOperationsItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_operation_data`.`WaitDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOperationsItemOperationData(queryMods...)
}

// BaseUnitDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via BaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) BaseUnitDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`BaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// DeliveryUnitDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via DeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) DeliveryUnitDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`DeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// InternalCapacityQuantityUnitDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via InternalCapacityQuantityUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) InternalCapacityQuantityUnitDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`InternalCapacityQuantityUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// ProductWeightUnitDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via ProductWeightUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductWeightUnitDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`ProductWeightUnit`=?", o.QuantityUnit),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData retrieves all the data_platform_planned_order_header_datum's DataPlatformPlannedOrderHeaderData with an executor via PlannedOrderDepartureDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_header_data`.`PlannedOrderDepartureDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderHeaderData(queryMods...)
}

// PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData retrieves all the data_platform_planned_order_header_datum's DataPlatformPlannedOrderHeaderData with an executor via PlannedOrderDepartureProductionUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_header_data`.`PlannedOrderDepartureProductionUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderHeaderData(queryMods...)
}

// PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData retrieves all the data_platform_planned_order_header_datum's DataPlatformPlannedOrderHeaderData with an executor via PlannedOrderDestinationDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_header_data`.`PlannedOrderDestinationDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderHeaderData(queryMods...)
}

// ProductBaseUnitDataPlatformPlannedOrderHeaderData retrieves all the data_platform_planned_order_header_datum's DataPlatformPlannedOrderHeaderData with an executor via ProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductBaseUnitDataPlatformPlannedOrderHeaderData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_header_data`.`ProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderHeaderData(queryMods...)
}

// ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData retrieves all the data_platform_planned_order_item_component_datum's DataPlatformPlannedOrderItemComponentData with an executor via ComponentProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_component_data`.`ComponentProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemComponentData(queryMods...)
}

// ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData retrieves all the data_platform_planned_order_item_component_datum's DataPlatformPlannedOrderItemComponentData with an executor via ComponentProductDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_component_data`.`ComponentProductDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemComponentData(queryMods...)
}

// ProductBaseUnitDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via ProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductBaseUnitDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`ProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// ProductDeliveryUnitDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via ProductDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductDeliveryUnitDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`ProductDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// ProductProductionUnitDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via ProductProductionUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductProductionUnitDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`ProductProductionUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// MoveDurationUnitDataPlatformPlannedOrderItemOperationData retrieves all the data_platform_planned_order_item_operation_datum's DataPlatformPlannedOrderItemOperationData with an executor via MoveDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) MoveDurationUnitDataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_data`.`MoveDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemOperationData(queryMods...)
}

// ProductBaseUnitDataPlatformPlannedOrderItemOperationData retrieves all the data_platform_planned_order_item_operation_datum's DataPlatformPlannedOrderItemOperationData with an executor via ProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductBaseUnitDataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_data`.`ProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemOperationData(queryMods...)
}

// ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData retrieves all the data_platform_planned_order_item_operation_datum's DataPlatformPlannedOrderItemOperationData with an executor via ProductDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_data`.`ProductDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemOperationData(queryMods...)
}

// ProductOperationUnitDataPlatformPlannedOrderItemOperationData retrieves all the data_platform_planned_order_item_operation_datum's DataPlatformPlannedOrderItemOperationData with an executor via ProductOperationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductOperationUnitDataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_data`.`ProductOperationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemOperationData(queryMods...)
}

// ProductProductionUnitDataPlatformPlannedOrderItemOperationData retrieves all the data_platform_planned_order_item_operation_datum's DataPlatformPlannedOrderItemOperationData with an executor via ProductProductionUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductProductionUnitDataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_data`.`ProductProductionUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemOperationData(queryMods...)
}

// QueueDurationUnitDataPlatformPlannedOrderItemOperationData retrieves all the data_platform_planned_order_item_operation_datum's DataPlatformPlannedOrderItemOperationData with an executor via QueueDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) QueueDurationUnitDataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_data`.`QueueDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemOperationData(queryMods...)
}

// StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData retrieves all the data_platform_planned_order_item_operation_datum's DataPlatformPlannedOrderItemOperationData with an executor via StandardDeliveryDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_data`.`StandardDeliveryDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemOperationData(queryMods...)
}

// WaitDurationUnitDataPlatformPlannedOrderItemOperationData retrieves all the data_platform_planned_order_item_operation_datum's DataPlatformPlannedOrderItemOperationData with an executor via WaitDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) WaitDurationUnitDataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_data`.`WaitDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPlannedOrderItemOperationData(queryMods...)
}

// SafetyDurationUnitDataPlatformProductMasterBPPlantData retrieves all the data_platform_product_master_bp_plant_datum's DataPlatformProductMasterBPPlantData with an executor via SafetyDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SafetyDurationUnitDataPlatformProductMasterBPPlantData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_bp_plant_data`.`SafetyDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData retrieves all the data_platform_product_master_bp_plant_datum's DataPlatformProductMasterBPPlantData with an executor via StandardDeliveryDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_bp_plant_data`.`StandardDeliveryDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// BaseUnitDataPlatformProductMasterGeneralData retrieves all the data_platform_product_master_general_datum's DataPlatformProductMasterGeneralData with an executor via BaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) BaseUnitDataPlatformProductMasterGeneralData(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_general_data`.`BaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData retrieves all the data_platform_product_master_general_datum's DataPlatformProductMasterGeneralData with an executor via InternalCapacityQuantityUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_general_data`.`InternalCapacityQuantityUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// WeightUnitDataPlatformProductMasterGeneralData retrieves all the data_platform_product_master_general_datum's DataPlatformProductMasterGeneralData with an executor via WeightUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) WeightUnitDataPlatformProductMasterGeneralData(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_general_data`.`WeightUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// ProductProcessingDurationUnitDataPlatformProductMasterProductionData retrieves all the data_platform_product_master_production_datum's DataPlatformProductMasterProductionData with an executor via ProductProcessingDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductProcessingDurationUnitDataPlatformProductMasterProductionData(mods ...qm.QueryMod) dataPlatformProductMasterProductionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_production_data`.`ProductProcessingDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterProductionData(queryMods...)
}

// ProductProductionQuantityUnitDataPlatformProductMasterProductionData retrieves all the data_platform_product_master_production_datum's DataPlatformProductMasterProductionData with an executor via ProductProductionQuantityUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductProductionQuantityUnitDataPlatformProductMasterProductionData(mods ...qm.QueryMod) dataPlatformProductMasterProductionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_production_data`.`ProductProductionQuantityUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductMasterProductionData(queryMods...)
}

// MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData retrieves all the data_platform_production_order_confirmation_header_datum's DataPlatformProductionOrderConfirmationHeaderData with an executor via MoveDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderConfirmationHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_confirmation_header_data`.`MoveDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderConfirmationHeaderData(queryMods...)
}

// ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData retrieves all the data_platform_production_order_confirmation_header_datum's DataPlatformProductionOrderConfirmationHeaderData with an executor via ProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderConfirmationHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_confirmation_header_data`.`ProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderConfirmationHeaderData(queryMods...)
}

// ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData retrieves all the data_platform_production_order_confirmation_header_datum's DataPlatformProductionOrderConfirmationHeaderData with an executor via ProductOperationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderConfirmationHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_confirmation_header_data`.`ProductOperationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderConfirmationHeaderData(queryMods...)
}

// ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData retrieves all the data_platform_production_order_confirmation_header_datum's DataPlatformProductionOrderConfirmationHeaderData with an executor via ProductProductionUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderConfirmationHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_confirmation_header_data`.`ProductProductionUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderConfirmationHeaderData(queryMods...)
}

// QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData retrieves all the data_platform_production_order_confirmation_header_datum's DataPlatformProductionOrderConfirmationHeaderData with an executor via QueueDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderConfirmationHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_confirmation_header_data`.`QueueDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderConfirmationHeaderData(queryMods...)
}

// WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData retrieves all the data_platform_production_order_confirmation_header_datum's DataPlatformProductionOrderConfirmationHeaderData with an executor via WaitDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderConfirmationHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_confirmation_header_data`.`WaitDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderConfirmationHeaderData(queryMods...)
}

// ProductBaseUnitDataPlatformProductionOrderHeaderData retrieves all the data_platform_production_order_header_datum's DataPlatformProductionOrderHeaderData with an executor via ProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductBaseUnitDataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_header_data`.`ProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderHeaderData(queryMods...)
}

// ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData retrieves all the data_platform_production_order_header_datum's DataPlatformProductionOrderHeaderData with an executor via ProductionOrderDepartureDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_header_data`.`ProductionOrderDepartureDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderHeaderData(queryMods...)
}

// ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData retrieves all the data_platform_production_order_header_datum's DataPlatformProductionOrderHeaderData with an executor via ProductionOrderDepartureProductionUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_header_data`.`ProductionOrderDepartureProductionUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderHeaderData(queryMods...)
}

// ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData retrieves all the data_platform_production_order_header_datum's DataPlatformProductionOrderHeaderData with an executor via ProductionOrderDestinationProductionUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_header_data`.`ProductionOrderDestinationProductionUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderHeaderData(queryMods...)
}

// ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData retrieves all the data_platform_production_order_header_datum's DataPlatformProductionOrderHeaderData with an executor via ProductionOrderDestinationDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_header_data`.`ProductionOrderDestinationDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderHeaderData(queryMods...)
}

// ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData retrieves all the data_platform_production_order_item_component_datum's DataPlatformProductionOrderItemComponentData with an executor via ComponentProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData(mods ...qm.QueryMod) dataPlatformProductionOrderItemComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_component_data`.`ComponentProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemComponentData(queryMods...)
}

// ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData retrieves all the data_platform_production_order_item_component_datum's DataPlatformProductionOrderItemComponentData with an executor via ComponentProductDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData(mods ...qm.QueryMod) dataPlatformProductionOrderItemComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_component_data`.`ComponentProductDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemComponentData(queryMods...)
}

// ProductBaseUnitDataPlatformProductionOrderItemData retrieves all the data_platform_production_order_item_datum's DataPlatformProductionOrderItemData with an executor via ProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductBaseUnitDataPlatformProductionOrderItemData(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_data`.`ProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// ProductDeliveryUnitDataPlatformProductionOrderItemData retrieves all the data_platform_production_order_item_datum's DataPlatformProductionOrderItemData with an executor via ProductDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductDeliveryUnitDataPlatformProductionOrderItemData(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_data`.`ProductDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// ProductProductionUnitDataPlatformProductionOrderItemData retrieves all the data_platform_production_order_item_datum's DataPlatformProductionOrderItemData with an executor via ProductProductionUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductProductionUnitDataPlatformProductionOrderItemData(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_data`.`ProductProductionUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// MoveDurationUnitDataPlatformProductionOrderItemOperationData retrieves all the data_platform_production_order_item_operation_datum's DataPlatformProductionOrderItemOperationData with an executor via MoveDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) MoveDurationUnitDataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_data`.`MoveDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// ProductBaseUnitDataPlatformProductionOrderItemOperationData retrieves all the data_platform_production_order_item_operation_datum's DataPlatformProductionOrderItemOperationData with an executor via ProductBaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductBaseUnitDataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_data`.`ProductBaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// ProductDeliveryUnitDataPlatformProductionOrderItemOperationData retrieves all the data_platform_production_order_item_operation_datum's DataPlatformProductionOrderItemOperationData with an executor via ProductDeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductDeliveryUnitDataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_data`.`ProductDeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// ProductOperationUnitDataPlatformProductionOrderItemOperationData retrieves all the data_platform_production_order_item_operation_datum's DataPlatformProductionOrderItemOperationData with an executor via ProductOperationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductOperationUnitDataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_data`.`ProductOperationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// ProductProductionUnitDataPlatformProductionOrderItemOperationData retrieves all the data_platform_production_order_item_operation_datum's DataPlatformProductionOrderItemOperationData with an executor via ProductProductionUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) ProductProductionUnitDataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_data`.`ProductProductionUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// QueueDurationUnitDataPlatformProductionOrderItemOperationData retrieves all the data_platform_production_order_item_operation_datum's DataPlatformProductionOrderItemOperationData with an executor via QueueDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) QueueDurationUnitDataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_data`.`QueueDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData retrieves all the data_platform_production_order_item_operation_datum's DataPlatformProductionOrderItemOperationData with an executor via StandardDeliveryDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_data`.`StandardDeliveryDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// WaitDurationUnitDataPlatformProductionOrderItemOperationData retrieves all the data_platform_production_order_item_operation_datum's DataPlatformProductionOrderItemOperationData with an executor via WaitDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) WaitDurationUnitDataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_data`.`WaitDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// BaseUnitDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via BaseUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) BaseUnitDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`BaseUnit`=?", o.QuantityUnit),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData retrieves all the data_platform_quantity_unit_conversion_quantity_unit_conv_datum's DataPlatformQuantityUnitConversionQuantityUnitConvData with an executor via QuantityUnitFrom column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData(mods ...qm.QueryMod) dataPlatformQuantityUnitConversionQuantityUnitConvDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quantity_unit_conversion_quantity_unit_conv_data`.`QuantityUnitFrom`=?", o.QuantityUnit),
	)

	return DataPlatformQuantityUnitConversionQuantityUnitConvData(queryMods...)
}

// QuantityUnitDataPlatformQuantityUnitTextData retrieves all the data_platform_quantity_unit_text_datum's DataPlatformQuantityUnitTextData with an executor via QuantityUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) QuantityUnitDataPlatformQuantityUnitTextData(mods ...qm.QueryMod) dataPlatformQuantityUnitTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quantity_unit_text_data`.`QuantityUnit`=?", o.QuantityUnit),
	)

	return DataPlatformQuantityUnitTextData(queryMods...)
}

// DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData retrieves all the data_platform_scr_delivery_plant_relation_product_datum's DataPlatformSCRDeliveryPlantRelationProductData with an executor via DeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationProductDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_delivery_plant_relation_product_data`.`DeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformSCRDeliveryPlantRelationProductData(queryMods...)
}

// SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData retrieves all the data_platform_scr_delivery_plant_relation_product_datum's DataPlatformSCRDeliveryPlantRelationProductData with an executor via SafetyDurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationProductDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_delivery_plant_relation_product_data`.`SafetyDurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformSCRDeliveryPlantRelationProductData(queryMods...)
}

// DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData retrieves all the data_platform_scr_delivery_plant_relation_product_mrp_area_datum's DataPlatformSCRDeliveryPlantRelationProductMRPAreaData with an executor via DeliveryUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationProductMRPAreaDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_delivery_plant_relation_product_mrp_area_data`.`DeliveryUnit`=?", o.QuantityUnit),
	)

	return DataPlatformSCRDeliveryPlantRelationProductMRPAreaData(queryMods...)
}

// DurationUnitDataPlatformUsageControlChainUsageControlChainData retrieves all the data_platform_usage_control_chain_usage_control_chain_datum's DataPlatformUsageControlChainUsageControlChainData with an executor via DurationUnit column.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) DurationUnitDataPlatformUsageControlChainUsageControlChainData(mods ...qm.QueryMod) dataPlatformUsageControlChainUsageControlChainDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_usage_control_chain_usage_control_chain_data`.`DurationUnit`=?", o.QuantityUnit),
	)

	return DataPlatformUsageControlChainUsageControlChainData(queryMods...)
}

// LoadProductBaseUnitDataPlatformBillOfMaterialHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductBaseUnitDataPlatformBillOfMaterialHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.ProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_header_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if singular {
		object.R.ProductBaseUnitDataPlatformBillOfMaterialHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductBaseUnit {
				local.R.ProductBaseUnitDataPlatformBillOfMaterialHeaderData = append(local.R.ProductBaseUnitDataPlatformBillOfMaterialHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformBillOfMaterialHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductDeliveryUnitDataPlatformBillOfMaterialHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.ProductDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_header_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if singular {
		object.R.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductDeliveryUnit {
				local.R.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData = append(local.R.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformBillOfMaterialHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductProductionUnitDataPlatformBillOfMaterialHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.ProductProductionUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_header_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if singular {
		object.R.ProductProductionUnitDataPlatformBillOfMaterialHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductProductionUnit {
				local.R.ProductProductionUnitDataPlatformBillOfMaterialHeaderData = append(local.R.ProductProductionUnitDataPlatformBillOfMaterialHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBaseUnitDataPlatformBillOfMaterialItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadComponentProductBaseUnitDataPlatformBillOfMaterialItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_item_data`),
		qm.WhereIn(`data_platform_bill_of_material_item_data.ComponentProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_item_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_item_data")
	}

	if singular {
		object.R.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ComponentProductBaseUnit {
				local.R.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData = append(local.R.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_item_data`),
		qm.WhereIn(`data_platform_bill_of_material_item_data.ComponentProductDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_item_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_item_data")
	}

	if singular {
		object.R.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ComponentProductDeliveryUnit {
				local.R.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData = append(local.R.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.HeaderWeightUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.HeaderWeightUnit) {
				local.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData = append(local.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBaseUnitDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadBaseUnitDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.BaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.BaseUnitDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.BaseUnit {
				local.R.BaseUnitDataPlatformDeliveryDocumentItemData = append(local.R.BaseUnitDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliveryUnitDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadDeliveryUnitDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.DeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.DeliveryUnitDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.DeliveryUnit {
				local.R.DeliveryUnitDataPlatformDeliveryDocumentItemData = append(local.R.DeliveryUnitDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadInternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.InternalCapacityQuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.InternalCapacityQuantityUnit) {
				local.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData = append(local.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadItemWeightUnitDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadItemWeightUnitDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.ItemWeightUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.ItemWeightUnit) {
				local.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData = append(local.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionTypeValueUnitDataPlatformInspectionLotInspectionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadInspectionTypeValueUnitDataPlatformInspectionLotInspectionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_inspection_data`),
		qm.WhereIn(`data_platform_inspection_lot_inspection_data.InspectionTypeValueUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_lot_inspection_data")
	}

	var resultSlice []*DataPlatformInspectionLotInspectionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_lot_inspection_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_lot_inspection_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_inspection_data")
	}

	if singular {
		object.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.InspectionTypeValueUnit) {
				local.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData = append(local.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSpecTypeUnitDataPlatformInspectionLotSpecDetailData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadSpecTypeUnitDataPlatformInspectionLotSpecDetailData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_spec_detail_data`),
		qm.WhereIn(`data_platform_inspection_lot_spec_detail_data.SpecTypeUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_lot_spec_detail_data")
	}

	var resultSlice []*DataPlatformInspectionLotSpecDetailDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_lot_spec_detail_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_lot_spec_detail_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_spec_detail_data")
	}

	if singular {
		object.R.SpecTypeUnitDataPlatformInspectionLotSpecDetailData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.SpecTypeUnit {
				local.R.SpecTypeUnitDataPlatformInspectionLotSpecDetailData = append(local.R.SpecTypeUnitDataPlatformInspectionLotSpecDetailData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionTypeValueUnitDataPlatformInspectionPlanInspectionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadInspectionTypeValueUnitDataPlatformInspectionPlanInspectionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_inspection_data`),
		qm.WhereIn(`data_platform_inspection_plan_inspection_data.InspectionTypeValueUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_plan_inspection_data")
	}

	var resultSlice []*DataPlatformInspectionPlanInspectionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_plan_inspection_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_plan_inspection_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_inspection_data")
	}

	if singular {
		object.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.InspectionTypeValueUnit) {
				local.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData = append(local.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSpecTypeUnitDataPlatformInspectionPlanSpecDetailData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadSpecTypeUnitDataPlatformInspectionPlanSpecDetailData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_spec_detail_data`),
		qm.WhereIn(`data_platform_inspection_plan_spec_detail_data.SpecTypeUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_plan_spec_detail_data")
	}

	var resultSlice []*DataPlatformInspectionPlanSpecDetailDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_plan_spec_detail_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_plan_spec_detail_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_spec_detail_data")
	}

	if singular {
		object.R.SpecTypeUnitDataPlatformInspectionPlanSpecDetailData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.SpecTypeUnit {
				local.R.SpecTypeUnitDataPlatformInspectionPlanSpecDetailData = append(local.R.SpecTypeUnitDataPlatformInspectionPlanSpecDetailData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBaseUnitDataPlatformInvoiceDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadBaseUnitDataPlatformInvoiceDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_data`),
		qm.WhereIn(`data_platform_invoice_document_item_data.BaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_data")
	}

	if singular {
		object.R.BaseUnitDataPlatformInvoiceDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.BaseUnit {
				local.R.BaseUnitDataPlatformInvoiceDocumentItemData = append(local.R.BaseUnitDataPlatformInvoiceDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInvoiceQuantityUnitDataPlatformInvoiceDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadInvoiceQuantityUnitDataPlatformInvoiceDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_data`),
		qm.WhereIn(`data_platform_invoice_document_item_data.InvoiceQuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_data")
	}

	if singular {
		object.R.InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.InvoiceQuantityUnit {
				local.R.InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData = append(local.R.InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadItemWeightUnitDataPlatformInvoiceDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadItemWeightUnitDataPlatformInvoiceDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_data`),
		qm.WhereIn(`data_platform_invoice_document_item_data.ItemWeightUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_data")
	}

	if singular {
		object.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.ItemWeightUnit) {
				local.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData = append(local.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformOperationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductBaseUnitDataPlatformOperationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.ProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_header_data")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if singular {
		object.R.ProductBaseUnitDataPlatformOperationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductBaseUnit {
				local.R.ProductBaseUnitDataPlatformOperationsHeaderData = append(local.R.ProductBaseUnitDataPlatformOperationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformOperationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductDeliveryUnitDataPlatformOperationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.ProductDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_header_data")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if singular {
		object.R.ProductDeliveryUnitDataPlatformOperationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductDeliveryUnit {
				local.R.ProductDeliveryUnitDataPlatformOperationsHeaderData = append(local.R.ProductDeliveryUnitDataPlatformOperationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformOperationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductProductionUnitDataPlatformOperationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.ProductProductionUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_header_data")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if singular {
		object.R.ProductProductionUnitDataPlatformOperationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductProductionUnit {
				local.R.ProductProductionUnitDataPlatformOperationsHeaderData = append(local.R.ProductProductionUnitDataPlatformOperationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOperationsUnitDataPlatformOperationsItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadOperationsUnitDataPlatformOperationsItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_data`),
		qm.WhereIn(`data_platform_operations_item_data.OperationsUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_data")
	}

	var resultSlice []*DataPlatformOperationsItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_data")
	}

	if singular {
		object.R.OperationsUnitDataPlatformOperationsItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.OperationsUnit) {
				local.R.OperationsUnitDataPlatformOperationsItemData = append(local.R.OperationsUnitDataPlatformOperationsItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadMoveDurationUnitDataPlatformOperationsItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadMoveDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_operation_data`),
		qm.WhereIn(`data_platform_operations_item_operation_data.MoveDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_operation_data")
	}

	var resultSlice []*DataPlatformOperationsItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_operation_data")
	}

	if singular {
		object.R.MoveDurationUnitDataPlatformOperationsItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.MoveDurationUnit) {
				local.R.MoveDurationUnitDataPlatformOperationsItemOperationData = append(local.R.MoveDurationUnitDataPlatformOperationsItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOperationUnitDataPlatformOperationsItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadOperationUnitDataPlatformOperationsItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_operation_data`),
		qm.WhereIn(`data_platform_operations_item_operation_data.OperationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_operation_data")
	}

	var resultSlice []*DataPlatformOperationsItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_operation_data")
	}

	if singular {
		object.R.OperationUnitDataPlatformOperationsItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.OperationUnit {
				local.R.OperationUnitDataPlatformOperationsItemOperationData = append(local.R.OperationUnitDataPlatformOperationsItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadQueueDurationUnitDataPlatformOperationsItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadQueueDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_operation_data`),
		qm.WhereIn(`data_platform_operations_item_operation_data.QueueDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_operation_data")
	}

	var resultSlice []*DataPlatformOperationsItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_operation_data")
	}

	if singular {
		object.R.QueueDurationUnitDataPlatformOperationsItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.QueueDurationUnit) {
				local.R.QueueDurationUnitDataPlatformOperationsItemOperationData = append(local.R.QueueDurationUnitDataPlatformOperationsItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStandardDeliveryDurationUnitDataPlatformOperationsItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadStandardDeliveryDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_operation_data`),
		qm.WhereIn(`data_platform_operations_item_operation_data.StandardDeliveryDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_operation_data")
	}

	var resultSlice []*DataPlatformOperationsItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_operation_data")
	}

	if singular {
		object.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.StandardDeliveryDurationUnit) {
				local.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData = append(local.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadWaitDurationUnitDataPlatformOperationsItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadWaitDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_operation_data`),
		qm.WhereIn(`data_platform_operations_item_operation_data.WaitDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_operation_data")
	}

	var resultSlice []*DataPlatformOperationsItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_operation_data")
	}

	if singular {
		object.R.WaitDurationUnitDataPlatformOperationsItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.WaitDurationUnit) {
				local.R.WaitDurationUnitDataPlatformOperationsItemOperationData = append(local.R.WaitDurationUnitDataPlatformOperationsItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBaseUnitDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadBaseUnitDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.BaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.BaseUnitDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.BaseUnit {
				local.R.BaseUnitDataPlatformOrdersItemData = append(local.R.BaseUnitDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliveryUnitDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadDeliveryUnitDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.DeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.DeliveryUnitDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.DeliveryUnit {
				local.R.DeliveryUnitDataPlatformOrdersItemData = append(local.R.DeliveryUnitDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInternalCapacityQuantityUnitDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadInternalCapacityQuantityUnitDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.InternalCapacityQuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.InternalCapacityQuantityUnit) {
				local.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData = append(local.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductWeightUnitDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductWeightUnitDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.ProductWeightUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.ProductWeightUnitDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.ProductWeightUnit) {
				local.R.ProductWeightUnitDataPlatformOrdersItemData = append(local.R.ProductWeightUnitDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadPlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_data`),
		qm.WhereIn(`data_platform_planned_order_header_data.PlannedOrderDepartureDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_header_data")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_data")
	}

	if singular {
		object.R.PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.PlannedOrderDepartureDeliveryUnit {
				local.R.PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData = append(local.R.PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadPlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_data`),
		qm.WhereIn(`data_platform_planned_order_header_data.PlannedOrderDepartureProductionUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_header_data")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_data")
	}

	if singular {
		object.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.PlannedOrderDepartureProductionUnit) {
				local.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData = append(local.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadPlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_data`),
		qm.WhereIn(`data_platform_planned_order_header_data.PlannedOrderDestinationDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_header_data")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_data")
	}

	if singular {
		object.R.PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.PlannedOrderDestinationDeliveryUnit {
				local.R.PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData = append(local.R.PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformPlannedOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductBaseUnitDataPlatformPlannedOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_data`),
		qm.WhereIn(`data_platform_planned_order_header_data.ProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_header_data")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_data")
	}

	if singular {
		object.R.ProductBaseUnitDataPlatformPlannedOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductBaseUnit {
				local.R.ProductBaseUnitDataPlatformPlannedOrderHeaderData = append(local.R.ProductBaseUnitDataPlatformPlannedOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_component_data`),
		qm.WhereIn(`data_platform_planned_order_item_component_data.ComponentProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_component_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_component_data")
	}

	if singular {
		object.R.ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ComponentProductBaseUnit {
				local.R.ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData = append(local.R.ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_component_data`),
		qm.WhereIn(`data_platform_planned_order_item_component_data.ComponentProductDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_component_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_component_data")
	}

	if singular {
		object.R.ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ComponentProductDeliveryUnit {
				local.R.ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData = append(local.R.ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductBaseUnitDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.ProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.ProductBaseUnitDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductBaseUnit {
				local.R.ProductBaseUnitDataPlatformPlannedOrderItemData = append(local.R.ProductBaseUnitDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductDeliveryUnitDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.ProductDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.ProductDeliveryUnitDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductDeliveryUnit {
				local.R.ProductDeliveryUnitDataPlatformPlannedOrderItemData = append(local.R.ProductDeliveryUnitDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductProductionUnitDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.ProductProductionUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.ProductProductionUnitDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.ProductProductionUnit) {
				local.R.ProductProductionUnitDataPlatformPlannedOrderItemData = append(local.R.ProductProductionUnitDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadMoveDurationUnitDataPlatformPlannedOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadMoveDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_data.MoveDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_data")
	}

	if singular {
		object.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.MoveDurationUnit) {
				local.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData = append(local.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformPlannedOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductBaseUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_data.ProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_data")
	}

	if singular {
		object.R.ProductBaseUnitDataPlatformPlannedOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductBaseUnit {
				local.R.ProductBaseUnitDataPlatformPlannedOrderItemOperationData = append(local.R.ProductBaseUnitDataPlatformPlannedOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformPlannedOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductDeliveryUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_data.ProductDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_data")
	}

	if singular {
		object.R.ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductDeliveryUnit {
				local.R.ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData = append(local.R.ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductOperationUnitDataPlatformPlannedOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductOperationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_data.ProductOperationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_data")
	}

	if singular {
		object.R.ProductOperationUnitDataPlatformPlannedOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductOperationUnit {
				local.R.ProductOperationUnitDataPlatformPlannedOrderItemOperationData = append(local.R.ProductOperationUnitDataPlatformPlannedOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformPlannedOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductProductionUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_data.ProductProductionUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_data")
	}

	if singular {
		object.R.ProductProductionUnitDataPlatformPlannedOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductProductionUnit {
				local.R.ProductProductionUnitDataPlatformPlannedOrderItemOperationData = append(local.R.ProductProductionUnitDataPlatformPlannedOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadQueueDurationUnitDataPlatformPlannedOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadQueueDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_data.QueueDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_data")
	}

	if singular {
		object.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.QueueDurationUnit) {
				local.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData = append(local.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadStandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_data.StandardDeliveryDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_data")
	}

	if singular {
		object.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.StandardDeliveryDurationUnit) {
				local.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData = append(local.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadWaitDurationUnitDataPlatformPlannedOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadWaitDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_data.WaitDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_data")
	}

	if singular {
		object.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.WaitDurationUnit) {
				local.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData = append(local.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSafetyDurationUnitDataPlatformProductMasterBPPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadSafetyDurationUnitDataPlatformProductMasterBPPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.SafetyDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_bp_plant_data")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_bp_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if singular {
		object.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.SafetyDurationUnit) {
				local.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData = append(local.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadStandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.StandardDeliveryDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_bp_plant_data")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_bp_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if singular {
		object.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.StandardDeliveryDurationUnit) {
				local.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData = append(local.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBaseUnitDataPlatformProductMasterGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadBaseUnitDataPlatformProductMasterGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.BaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_general_data")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if singular {
		object.R.BaseUnitDataPlatformProductMasterGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.BaseUnit {
				local.R.BaseUnitDataPlatformProductMasterGeneralData = append(local.R.BaseUnitDataPlatformProductMasterGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.InternalCapacityQuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_general_data")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if singular {
		object.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.InternalCapacityQuantityUnit) {
				local.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData = append(local.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadWeightUnitDataPlatformProductMasterGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadWeightUnitDataPlatformProductMasterGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.WeightUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_general_data")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if singular {
		object.R.WeightUnitDataPlatformProductMasterGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.WeightUnit) {
				local.R.WeightUnitDataPlatformProductMasterGeneralData = append(local.R.WeightUnitDataPlatformProductMasterGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductProcessingDurationUnitDataPlatformProductMasterProductionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductProcessingDurationUnitDataPlatformProductMasterProductionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_production_data`),
		qm.WhereIn(`data_platform_product_master_production_data.ProductProcessingDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_production_data")
	}

	var resultSlice []*DataPlatformProductMasterProductionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_production_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_production_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_production_data")
	}

	if singular {
		object.R.ProductProcessingDurationUnitDataPlatformProductMasterProductionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductProcessingDurationUnit {
				local.R.ProductProcessingDurationUnitDataPlatformProductMasterProductionData = append(local.R.ProductProcessingDurationUnitDataPlatformProductMasterProductionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductProductionQuantityUnitDataPlatformProductMasterProductionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductProductionQuantityUnitDataPlatformProductMasterProductionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_production_data`),
		qm.WhereIn(`data_platform_product_master_production_data.ProductProductionQuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_production_data")
	}

	var resultSlice []*DataPlatformProductMasterProductionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_production_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_production_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_production_data")
	}

	if singular {
		object.R.ProductProductionQuantityUnitDataPlatformProductMasterProductionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductProductionQuantityUnit {
				local.R.ProductProductionQuantityUnitDataPlatformProductMasterProductionData = append(local.R.ProductProductionQuantityUnitDataPlatformProductMasterProductionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadMoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadMoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_confirmation_header_data`),
		qm.WhereIn(`data_platform_production_order_confirmation_header_data.MoveDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_confirmation_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderConfirmationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_confirmation_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_confirmation_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_confirmation_header_data")
	}

	if singular {
		object.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.MoveDurationUnit) {
				local.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData = append(local.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_confirmation_header_data`),
		qm.WhereIn(`data_platform_production_order_confirmation_header_data.ProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_confirmation_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderConfirmationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_confirmation_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_confirmation_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_confirmation_header_data")
	}

	if singular {
		object.R.ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductBaseUnit {
				local.R.ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData = append(local.R.ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_confirmation_header_data`),
		qm.WhereIn(`data_platform_production_order_confirmation_header_data.ProductOperationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_confirmation_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderConfirmationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_confirmation_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_confirmation_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_confirmation_header_data")
	}

	if singular {
		object.R.ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductOperationUnit {
				local.R.ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData = append(local.R.ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_confirmation_header_data`),
		qm.WhereIn(`data_platform_production_order_confirmation_header_data.ProductProductionUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_confirmation_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderConfirmationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_confirmation_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_confirmation_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_confirmation_header_data")
	}

	if singular {
		object.R.ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductProductionUnit {
				local.R.ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData = append(local.R.ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadQueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadQueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_confirmation_header_data`),
		qm.WhereIn(`data_platform_production_order_confirmation_header_data.QueueDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_confirmation_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderConfirmationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_confirmation_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_confirmation_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_confirmation_header_data")
	}

	if singular {
		object.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.QueueDurationUnit) {
				local.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData = append(local.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadWaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadWaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_confirmation_header_data`),
		qm.WhereIn(`data_platform_production_order_confirmation_header_data.WaitDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_confirmation_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderConfirmationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_confirmation_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_confirmation_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_confirmation_header_data")
	}

	if singular {
		object.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.WaitDurationUnit) {
				local.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData = append(local.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformProductionOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductBaseUnitDataPlatformProductionOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_data`),
		qm.WhereIn(`data_platform_production_order_header_data.ProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_data")
	}

	if singular {
		object.R.ProductBaseUnitDataPlatformProductionOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductBaseUnit {
				local.R.ProductBaseUnitDataPlatformProductionOrderHeaderData = append(local.R.ProductBaseUnitDataPlatformProductionOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_data`),
		qm.WhereIn(`data_platform_production_order_header_data.ProductionOrderDepartureDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_data")
	}

	if singular {
		object.R.ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductionOrderDepartureDeliveryUnit {
				local.R.ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData = append(local.R.ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_data`),
		qm.WhereIn(`data_platform_production_order_header_data.ProductionOrderDepartureProductionUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_data")
	}

	if singular {
		object.R.ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductionOrderDepartureProductionUnit {
				local.R.ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData = append(local.R.ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_data`),
		qm.WhereIn(`data_platform_production_order_header_data.ProductionOrderDestinationProductionUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_data")
	}

	if singular {
		object.R.ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductionOrderDestinationProductionUnit {
				local.R.ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData = append(local.R.ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_data`),
		qm.WhereIn(`data_platform_production_order_header_data.ProductionOrderDestinationDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_data")
	}

	if singular {
		object.R.ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductionOrderDestinationDeliveryUnit {
				local.R.ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData = append(local.R.ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductBaseUnitDataPlatformProductionOrderItemComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadComponentProductBaseUnitDataPlatformProductionOrderItemComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_component_data`),
		qm.WhereIn(`data_platform_production_order_item_component_data.ComponentProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_component_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_component_data")
	}

	if singular {
		object.R.ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ComponentProductBaseUnit {
				local.R.ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData = append(local.R.ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_component_data`),
		qm.WhereIn(`data_platform_production_order_item_component_data.ComponentProductDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_component_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_component_data")
	}

	if singular {
		object.R.ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ComponentProductDeliveryUnit {
				local.R.ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData = append(local.R.ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformProductionOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductBaseUnitDataPlatformProductionOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.ProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if singular {
		object.R.ProductBaseUnitDataPlatformProductionOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductBaseUnit {
				local.R.ProductBaseUnitDataPlatformProductionOrderItemData = append(local.R.ProductBaseUnitDataPlatformProductionOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformProductionOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductDeliveryUnitDataPlatformProductionOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.ProductDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if singular {
		object.R.ProductDeliveryUnitDataPlatformProductionOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductDeliveryUnit {
				local.R.ProductDeliveryUnitDataPlatformProductionOrderItemData = append(local.R.ProductDeliveryUnitDataPlatformProductionOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformProductionOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductProductionUnitDataPlatformProductionOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.ProductProductionUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if singular {
		object.R.ProductProductionUnitDataPlatformProductionOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductProductionUnit {
				local.R.ProductProductionUnitDataPlatformProductionOrderItemData = append(local.R.ProductProductionUnitDataPlatformProductionOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadMoveDurationUnitDataPlatformProductionOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadMoveDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.MoveDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if singular {
		object.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.MoveDurationUnit) {
				local.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData = append(local.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformProductionOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductBaseUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.ProductBaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if singular {
		object.R.ProductBaseUnitDataPlatformProductionOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductBaseUnit {
				local.R.ProductBaseUnitDataPlatformProductionOrderItemOperationData = append(local.R.ProductBaseUnitDataPlatformProductionOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformProductionOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductDeliveryUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.ProductDeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if singular {
		object.R.ProductDeliveryUnitDataPlatformProductionOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductDeliveryUnit {
				local.R.ProductDeliveryUnitDataPlatformProductionOrderItemOperationData = append(local.R.ProductDeliveryUnitDataPlatformProductionOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductOperationUnitDataPlatformProductionOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductOperationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.ProductOperationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if singular {
		object.R.ProductOperationUnitDataPlatformProductionOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductOperationUnit {
				local.R.ProductOperationUnitDataPlatformProductionOrderItemOperationData = append(local.R.ProductOperationUnitDataPlatformProductionOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformProductionOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadProductProductionUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.ProductProductionUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if singular {
		object.R.ProductProductionUnitDataPlatformProductionOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.ProductProductionUnit {
				local.R.ProductProductionUnitDataPlatformProductionOrderItemOperationData = append(local.R.ProductProductionUnitDataPlatformProductionOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadQueueDurationUnitDataPlatformProductionOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadQueueDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.QueueDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if singular {
		object.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.QueueDurationUnit) {
				local.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData = append(local.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadStandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadStandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.StandardDeliveryDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if singular {
		object.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.StandardDeliveryDurationUnit) {
				local.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData = append(local.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadWaitDurationUnitDataPlatformProductionOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadWaitDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.WaitDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if singular {
		object.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.WaitDurationUnit) {
				local.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData = append(local.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBaseUnitDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadBaseUnitDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.BaseUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.BaseUnitDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.BaseUnit {
				local.R.BaseUnitDataPlatformPurchaseRequisitionItemData = append(local.R.BaseUnitDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadQuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadQuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_conversion_quantity_unit_conv_data`),
		qm.WhereIn(`data_platform_quantity_unit_conversion_quantity_unit_conv_data.QuantityUnitFrom in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quantity_unit_conversion_quantity_unit_conv_data")
	}

	var resultSlice []*DataPlatformQuantityUnitConversionQuantityUnitConvDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quantity_unit_conversion_quantity_unit_conv_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quantity_unit_conversion_quantity_unit_conv_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_conversion_quantity_unit_conv_data")
	}

	if singular {
		object.R.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.QuantityUnitFrom {
				local.R.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData = append(local.R.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadQuantityUnitDataPlatformQuantityUnitTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadQuantityUnitDataPlatformQuantityUnitTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_text_data`),
		qm.WhereIn(`data_platform_quantity_unit_text_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quantity_unit_text_data")
	}

	var resultSlice []*DataPlatformQuantityUnitTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quantity_unit_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quantity_unit_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_text_data")
	}

	if singular {
		object.R.QuantityUnitDataPlatformQuantityUnitTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.QuantityUnit {
				local.R.QuantityUnitDataPlatformQuantityUnitTextData = append(local.R.QuantityUnitDataPlatformQuantityUnitTextData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadDeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_plant_relation_product_data`),
		qm.WhereIn(`data_platform_scr_delivery_plant_relation_product_data.DeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_delivery_plant_relation_product_data")
	}

	var resultSlice []*DataPlatformSCRDeliveryPlantRelationProductDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_delivery_plant_relation_product_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_delivery_plant_relation_product_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_plant_relation_product_data")
	}

	if singular {
		object.R.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.DeliveryUnit {
				local.R.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData = append(local.R.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadSafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_plant_relation_product_data`),
		qm.WhereIn(`data_platform_scr_delivery_plant_relation_product_data.SafetyDurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_delivery_plant_relation_product_data")
	}

	var resultSlice []*DataPlatformSCRDeliveryPlantRelationProductDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_delivery_plant_relation_product_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_delivery_plant_relation_product_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_plant_relation_product_data")
	}

	if singular {
		object.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.SafetyDurationUnit) {
				local.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData = append(local.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadDeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if a == obj.QuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_plant_relation_product_mrp_area_data`),
		qm.WhereIn(`data_platform_scr_delivery_plant_relation_product_mrp_area_data.DeliveryUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_delivery_plant_relation_product_mrp_area_data")
	}

	var resultSlice []*DataPlatformSCRDeliveryPlantRelationProductMRPAreaDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_delivery_plant_relation_product_mrp_area_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_delivery_plant_relation_product_mrp_area_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_plant_relation_product_mrp_area_data")
	}

	if singular {
		object.R.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.QuantityUnit == foreign.DeliveryUnit {
				local.R.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData = append(local.R.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDurationUnitDataPlatformUsageControlChainUsageControlChainData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuantityUnitQuantityUnitDatumL) LoadDurationUnitDataPlatformUsageControlChainUsageControlChainData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuantityUnitQuantityUnitDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuantityUnitQuantityUnitDatum
	var object *DataPlatformQuantityUnitQuantityUnitDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuantityUnitQuantityUnitDatum.(*DataPlatformQuantityUnitQuantityUnitDatum)
		if !ok {
			object = new(DataPlatformQuantityUnitQuantityUnitDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuantityUnitQuantityUnitDatum.(*[]*DataPlatformQuantityUnitQuantityUnitDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuantityUnitQuantityUnitDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuantityUnitQuantityUnitDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
		}
		args = append(args, object.QuantityUnit)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuantityUnitQuantityUnitDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QuantityUnit) {
					continue Outer
				}
			}

			args = append(args, obj.QuantityUnit)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_usage_control_chain_usage_control_chain_data`),
		qm.WhereIn(`data_platform_usage_control_chain_usage_control_chain_data.DurationUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_usage_control_chain_usage_control_chain_data")
	}

	var resultSlice []*DataPlatformUsageControlChainUsageControlChainDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_usage_control_chain_usage_control_chain_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_usage_control_chain_usage_control_chain_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_usage_control_chain_usage_control_chain_data")
	}

	if singular {
		object.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.QuantityUnit, foreign.DurationUnit) {
				local.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData = append(local.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData, foreign)
				break
			}
		}
	}

	return nil
}

// AddProductBaseUnitDataPlatformBillOfMaterialHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductBaseUnitDataPlatformBillOfMaterialHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductBaseUnitDataPlatformBillOfMaterialHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.BillOfMaterial}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductBaseUnitDataPlatformBillOfMaterialHeaderData: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformBillOfMaterialHeaderData = append(o.R.ProductBaseUnitDataPlatformBillOfMaterialHeaderData, related...)
	}

	return nil
}

// AddProductDeliveryUnitDataPlatformBillOfMaterialHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductDeliveryUnitDataPlatformBillOfMaterialHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.BillOfMaterial}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData = append(o.R.ProductDeliveryUnitDataPlatformBillOfMaterialHeaderData, related...)
	}

	return nil
}

// AddProductProductionUnitDataPlatformBillOfMaterialHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductProductionUnitDataPlatformBillOfMaterialHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductProductionUnitDataPlatformBillOfMaterialHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductProductionUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.BillOfMaterial}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductProductionUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductProductionUnitDataPlatformBillOfMaterialHeaderData: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformBillOfMaterialHeaderData = append(o.R.ProductProductionUnitDataPlatformBillOfMaterialHeaderData, related...)
	}

	return nil
}

// AddComponentProductBaseUnitDataPlatformBillOfMaterialItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddComponentProductBaseUnitDataPlatformBillOfMaterialItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ComponentProductBaseUnitDataPlatformBillOfMaterialItemData: related,
		}
	} else {
		o.R.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData = append(o.R.ComponentProductBaseUnitDataPlatformBillOfMaterialItemData, related...)
	}

	return nil
}

// AddComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData: related,
		}
	} else {
		o.R.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData = append(o.R.ComponentProductDeliveryUnitDataPlatformBillOfMaterialItemData, related...)
	}

	return nil
}

// AddHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HeaderWeightUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"HeaderWeightUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HeaderWeightUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData = append(o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// SetHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.HeaderWeightUnitDataPlatformQuantityUnitQuantityUnitDatum's HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `HeaderWeightUnit` = null where `HeaderWeightUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveHeaderWeightUnitDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.HeaderWeightUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("HeaderWeightUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData[i] = o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData = o.R.HeaderWeightUnitDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddBaseUnitDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.BaseUnitDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddBaseUnitDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			BaseUnitDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.BaseUnitDataPlatformDeliveryDocumentItemData = append(o.R.BaseUnitDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// AddDeliveryUnitDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.DeliveryUnitDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddDeliveryUnitDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			DeliveryUnitDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.DeliveryUnitDataPlatformDeliveryDocumentItemData = append(o.R.DeliveryUnitDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// AddInternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddInternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InternalCapacityQuantityUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InternalCapacityQuantityUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InternalCapacityQuantityUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData = append(o.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetInternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum's InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetInternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `InternalCapacityQuantityUnit` = null where `InternalCapacityQuantityUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddInternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveInternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveInternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InternalCapacityQuantityUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("InternalCapacityQuantityUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData[i] = o.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData = o.R.InternalCapacityQuantityUnitDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddItemWeightUnitDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddItemWeightUnitDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ItemWeightUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ItemWeightUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ItemWeightUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ItemWeightUnitDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData = append(o.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetItemWeightUnitDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum's ItemWeightUnitDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetItemWeightUnitDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `ItemWeightUnit` = null where `ItemWeightUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddItemWeightUnitDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveItemWeightUnitDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.ItemWeightUnitDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveItemWeightUnitDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ItemWeightUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ItemWeightUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData[i] = o.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData = o.R.ItemWeightUnitDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddInspectionTypeValueUnitDataPlatformInspectionLotInspectionData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddInspectionTypeValueUnitDataPlatformInspectionLotInspectionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotInspectionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InspectionTypeValueUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_lot_inspection_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionTypeValueUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.InspectionLot, rel.Inspection}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InspectionTypeValueUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			InspectionTypeValueUnitDataPlatformInspectionLotInspectionData: related,
		}
	} else {
		o.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData = append(o.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData, related...)
	}

	return nil
}

// SetInspectionTypeValueUnitDataPlatformInspectionLotInspectionData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum's InspectionTypeValueUnitDataPlatformInspectionLotInspectionData accordingly.
// Replaces o.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetInspectionTypeValueUnitDataPlatformInspectionLotInspectionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotInspectionDatum) error {
	query := "update `data_platform_inspection_lot_inspection_data` set `InspectionTypeValueUnit` = null where `InspectionTypeValueUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData = nil
	}

	return o.AddInspectionTypeValueUnitDataPlatformInspectionLotInspectionData(ctx, exec, insert, related...)
}

// RemoveInspectionTypeValueUnitDataPlatformInspectionLotInspectionData relationships from objects passed in.
// Removes related items from R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveInspectionTypeValueUnitDataPlatformInspectionLotInspectionData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInspectionLotInspectionDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InspectionTypeValueUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("InspectionTypeValueUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData {
			if rel != ri {
				continue
			}

			ln := len(o.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData)
			if ln > 1 && i < ln-1 {
				o.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData[i] = o.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData[ln-1]
			}
			o.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData = o.R.InspectionTypeValueUnitDataPlatformInspectionLotInspectionData[:ln-1]
			break
		}
	}

	return nil
}

// AddSpecTypeUnitDataPlatformInspectionLotSpecDetailData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.SpecTypeUnitDataPlatformInspectionLotSpecDetailData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddSpecTypeUnitDataPlatformInspectionLotSpecDetailData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotSpecDetailDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SpecTypeUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_lot_spec_detail_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SpecTypeUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotSpecDetailDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.InspectionLot, rel.SpecType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SpecTypeUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			SpecTypeUnitDataPlatformInspectionLotSpecDetailData: related,
		}
	} else {
		o.R.SpecTypeUnitDataPlatformInspectionLotSpecDetailData = append(o.R.SpecTypeUnitDataPlatformInspectionLotSpecDetailData, related...)
	}

	return nil
}

// AddInspectionTypeValueUnitDataPlatformInspectionPlanInspectionData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddInspectionTypeValueUnitDataPlatformInspectionPlanInspectionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionPlanInspectionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InspectionTypeValueUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_plan_inspection_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionTypeValueUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanInspectionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.InspectionPlan, rel.Inspection}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InspectionTypeValueUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData: related,
		}
	} else {
		o.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData = append(o.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData, related...)
	}

	return nil
}

// SetInspectionTypeValueUnitDataPlatformInspectionPlanInspectionData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InspectionTypeValueUnitDataPlatformQuantityUnitQuantityUnitDatum's InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData accordingly.
// Replaces o.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetInspectionTypeValueUnitDataPlatformInspectionPlanInspectionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionPlanInspectionDatum) error {
	query := "update `data_platform_inspection_plan_inspection_data` set `InspectionTypeValueUnit` = null where `InspectionTypeValueUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData = nil
	}

	return o.AddInspectionTypeValueUnitDataPlatformInspectionPlanInspectionData(ctx, exec, insert, related...)
}

// RemoveInspectionTypeValueUnitDataPlatformInspectionPlanInspectionData relationships from objects passed in.
// Removes related items from R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveInspectionTypeValueUnitDataPlatformInspectionPlanInspectionData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInspectionPlanInspectionDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InspectionTypeValueUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("InspectionTypeValueUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData {
			if rel != ri {
				continue
			}

			ln := len(o.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData)
			if ln > 1 && i < ln-1 {
				o.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData[i] = o.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData[ln-1]
			}
			o.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData = o.R.InspectionTypeValueUnitDataPlatformInspectionPlanInspectionData[:ln-1]
			break
		}
	}

	return nil
}

// AddSpecTypeUnitDataPlatformInspectionPlanSpecDetailData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.SpecTypeUnitDataPlatformInspectionPlanSpecDetailData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddSpecTypeUnitDataPlatformInspectionPlanSpecDetailData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionPlanSpecDetailDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SpecTypeUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_plan_spec_detail_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SpecTypeUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanSpecDetailDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.InspectionPlan, rel.SpecType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SpecTypeUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			SpecTypeUnitDataPlatformInspectionPlanSpecDetailData: related,
		}
	} else {
		o.R.SpecTypeUnitDataPlatformInspectionPlanSpecDetailData = append(o.R.SpecTypeUnitDataPlatformInspectionPlanSpecDetailData, related...)
	}

	return nil
}

// AddBaseUnitDataPlatformInvoiceDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.BaseUnitDataPlatformInvoiceDocumentItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddBaseUnitDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.InvoiceDocument, rel.InvoiceDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			BaseUnitDataPlatformInvoiceDocumentItemData: related,
		}
	} else {
		o.R.BaseUnitDataPlatformInvoiceDocumentItemData = append(o.R.BaseUnitDataPlatformInvoiceDocumentItemData, related...)
	}

	return nil
}

// AddInvoiceQuantityUnitDataPlatformInvoiceDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddInvoiceQuantityUnitDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InvoiceQuantityUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InvoiceQuantityUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.InvoiceDocument, rel.InvoiceDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InvoiceQuantityUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData: related,
		}
	} else {
		o.R.InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData = append(o.R.InvoiceQuantityUnitDataPlatformInvoiceDocumentItemData, related...)
	}

	return nil
}

// AddItemWeightUnitDataPlatformInvoiceDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddItemWeightUnitDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ItemWeightUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ItemWeightUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.InvoiceDocument, rel.InvoiceDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ItemWeightUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ItemWeightUnitDataPlatformInvoiceDocumentItemData: related,
		}
	} else {
		o.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData = append(o.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData, related...)
	}

	return nil
}

// SetItemWeightUnitDataPlatformInvoiceDocumentItemData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum's ItemWeightUnitDataPlatformInvoiceDocumentItemData accordingly.
// Replaces o.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetItemWeightUnitDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	query := "update `data_platform_invoice_document_item_data` set `ItemWeightUnit` = null where `ItemWeightUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData = nil
	}

	return o.AddItemWeightUnitDataPlatformInvoiceDocumentItemData(ctx, exec, insert, related...)
}

// RemoveItemWeightUnitDataPlatformInvoiceDocumentItemData relationships from objects passed in.
// Removes related items from R.ItemWeightUnitDataPlatformInvoiceDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveItemWeightUnitDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ItemWeightUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ItemWeightUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData[i] = o.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData[ln-1]
			}
			o.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData = o.R.ItemWeightUnitDataPlatformInvoiceDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductBaseUnitDataPlatformOperationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductBaseUnitDataPlatformOperationsHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductBaseUnitDataPlatformOperationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Operations}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductBaseUnitDataPlatformOperationsHeaderData: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformOperationsHeaderData = append(o.R.ProductBaseUnitDataPlatformOperationsHeaderData, related...)
	}

	return nil
}

// AddProductDeliveryUnitDataPlatformOperationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDeliveryUnitDataPlatformOperationsHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductDeliveryUnitDataPlatformOperationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Operations}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductDeliveryUnitDataPlatformOperationsHeaderData: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformOperationsHeaderData = append(o.R.ProductDeliveryUnitDataPlatformOperationsHeaderData, related...)
	}

	return nil
}

// AddProductProductionUnitDataPlatformOperationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductProductionUnitDataPlatformOperationsHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductProductionUnitDataPlatformOperationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductProductionUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Operations}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductProductionUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductProductionUnitDataPlatformOperationsHeaderData: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformOperationsHeaderData = append(o.R.ProductProductionUnitDataPlatformOperationsHeaderData, related...)
	}

	return nil
}

// AddOperationsUnitDataPlatformOperationsItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.OperationsUnitDataPlatformOperationsItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddOperationsUnitDataPlatformOperationsItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OperationsUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OperationsUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Operations, rel.OperationsItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OperationsUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			OperationsUnitDataPlatformOperationsItemData: related,
		}
	} else {
		o.R.OperationsUnitDataPlatformOperationsItemData = append(o.R.OperationsUnitDataPlatformOperationsItemData, related...)
	}

	return nil
}

// SetOperationsUnitDataPlatformOperationsItemData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OperationsUnitDataPlatformQuantityUnitQuantityUnitDatum's OperationsUnitDataPlatformOperationsItemData accordingly.
// Replaces o.R.OperationsUnitDataPlatformOperationsItemData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetOperationsUnitDataPlatformOperationsItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemDatum) error {
	query := "update `data_platform_operations_item_data` set `OperationsUnit` = null where `OperationsUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.OperationsUnitDataPlatformOperationsItemData = nil
	}

	return o.AddOperationsUnitDataPlatformOperationsItemData(ctx, exec, insert, related...)
}

// RemoveOperationsUnitDataPlatformOperationsItemData relationships from objects passed in.
// Removes related items from R.OperationsUnitDataPlatformOperationsItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveOperationsUnitDataPlatformOperationsItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOperationsItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OperationsUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("OperationsUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OperationsUnitDataPlatformOperationsItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.OperationsUnitDataPlatformOperationsItemData)
			if ln > 1 && i < ln-1 {
				o.R.OperationsUnitDataPlatformOperationsItemData[i] = o.R.OperationsUnitDataPlatformOperationsItemData[ln-1]
			}
			o.R.OperationsUnitDataPlatformOperationsItemData = o.R.OperationsUnitDataPlatformOperationsItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddMoveDurationUnitDataPlatformOperationsItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.MoveDurationUnitDataPlatformOperationsItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddMoveDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MoveDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"MoveDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MoveDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			MoveDurationUnitDataPlatformOperationsItemOperationData: related,
		}
	} else {
		o.R.MoveDurationUnitDataPlatformOperationsItemOperationData = append(o.R.MoveDurationUnitDataPlatformOperationsItemOperationData, related...)
	}

	return nil
}

// SetMoveDurationUnitDataPlatformOperationsItemOperationData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's MoveDurationUnitDataPlatformOperationsItemOperationData accordingly.
// Replaces o.R.MoveDurationUnitDataPlatformOperationsItemOperationData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetMoveDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationDatum) error {
	query := "update `data_platform_operations_item_operation_data` set `MoveDurationUnit` = null where `MoveDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.MoveDurationUnitDataPlatformOperationsItemOperationData = nil
	}

	return o.AddMoveDurationUnitDataPlatformOperationsItemOperationData(ctx, exec, insert, related...)
}

// RemoveMoveDurationUnitDataPlatformOperationsItemOperationData relationships from objects passed in.
// Removes related items from R.MoveDurationUnitDataPlatformOperationsItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveMoveDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOperationsItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MoveDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("MoveDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MoveDurationUnitDataPlatformOperationsItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.MoveDurationUnitDataPlatformOperationsItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.MoveDurationUnitDataPlatformOperationsItemOperationData[i] = o.R.MoveDurationUnitDataPlatformOperationsItemOperationData[ln-1]
			}
			o.R.MoveDurationUnitDataPlatformOperationsItemOperationData = o.R.MoveDurationUnitDataPlatformOperationsItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddOperationUnitDataPlatformOperationsItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.OperationUnitDataPlatformOperationsItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddOperationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OperationUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OperationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OperationUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			OperationUnitDataPlatformOperationsItemOperationData: related,
		}
	} else {
		o.R.OperationUnitDataPlatformOperationsItemOperationData = append(o.R.OperationUnitDataPlatformOperationsItemOperationData, related...)
	}

	return nil
}

// AddQueueDurationUnitDataPlatformOperationsItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.QueueDurationUnitDataPlatformOperationsItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddQueueDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.QueueDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"QueueDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.QueueDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			QueueDurationUnitDataPlatformOperationsItemOperationData: related,
		}
	} else {
		o.R.QueueDurationUnitDataPlatformOperationsItemOperationData = append(o.R.QueueDurationUnitDataPlatformOperationsItemOperationData, related...)
	}

	return nil
}

// SetQueueDurationUnitDataPlatformOperationsItemOperationData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's QueueDurationUnitDataPlatformOperationsItemOperationData accordingly.
// Replaces o.R.QueueDurationUnitDataPlatformOperationsItemOperationData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetQueueDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationDatum) error {
	query := "update `data_platform_operations_item_operation_data` set `QueueDurationUnit` = null where `QueueDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.QueueDurationUnitDataPlatformOperationsItemOperationData = nil
	}

	return o.AddQueueDurationUnitDataPlatformOperationsItemOperationData(ctx, exec, insert, related...)
}

// RemoveQueueDurationUnitDataPlatformOperationsItemOperationData relationships from objects passed in.
// Removes related items from R.QueueDurationUnitDataPlatformOperationsItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveQueueDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOperationsItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.QueueDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("QueueDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.QueueDurationUnitDataPlatformOperationsItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.QueueDurationUnitDataPlatformOperationsItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.QueueDurationUnitDataPlatformOperationsItemOperationData[i] = o.R.QueueDurationUnitDataPlatformOperationsItemOperationData[ln-1]
			}
			o.R.QueueDurationUnitDataPlatformOperationsItemOperationData = o.R.QueueDurationUnitDataPlatformOperationsItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddStandardDeliveryDurationUnitDataPlatformOperationsItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddStandardDeliveryDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StandardDeliveryDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"StandardDeliveryDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StandardDeliveryDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData: related,
		}
	} else {
		o.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData = append(o.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData, related...)
	}

	return nil
}

// SetStandardDeliveryDurationUnitDataPlatformOperationsItemOperationData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData accordingly.
// Replaces o.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetStandardDeliveryDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationDatum) error {
	query := "update `data_platform_operations_item_operation_data` set `StandardDeliveryDurationUnit` = null where `StandardDeliveryDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData = nil
	}

	return o.AddStandardDeliveryDurationUnitDataPlatformOperationsItemOperationData(ctx, exec, insert, related...)
}

// RemoveStandardDeliveryDurationUnitDataPlatformOperationsItemOperationData relationships from objects passed in.
// Removes related items from R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveStandardDeliveryDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOperationsItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StandardDeliveryDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("StandardDeliveryDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData[i] = o.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData[ln-1]
			}
			o.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData = o.R.StandardDeliveryDurationUnitDataPlatformOperationsItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddWaitDurationUnitDataPlatformOperationsItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.WaitDurationUnitDataPlatformOperationsItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddWaitDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WaitDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"WaitDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WaitDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			WaitDurationUnitDataPlatformOperationsItemOperationData: related,
		}
	} else {
		o.R.WaitDurationUnitDataPlatformOperationsItemOperationData = append(o.R.WaitDurationUnitDataPlatformOperationsItemOperationData, related...)
	}

	return nil
}

// SetWaitDurationUnitDataPlatformOperationsItemOperationData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's WaitDurationUnitDataPlatformOperationsItemOperationData accordingly.
// Replaces o.R.WaitDurationUnitDataPlatformOperationsItemOperationData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetWaitDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemOperationDatum) error {
	query := "update `data_platform_operations_item_operation_data` set `WaitDurationUnit` = null where `WaitDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.WaitDurationUnitDataPlatformOperationsItemOperationData = nil
	}

	return o.AddWaitDurationUnitDataPlatformOperationsItemOperationData(ctx, exec, insert, related...)
}

// RemoveWaitDurationUnitDataPlatformOperationsItemOperationData relationships from objects passed in.
// Removes related items from R.WaitDurationUnitDataPlatformOperationsItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveWaitDurationUnitDataPlatformOperationsItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOperationsItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WaitDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("WaitDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WaitDurationUnitDataPlatformOperationsItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.WaitDurationUnitDataPlatformOperationsItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.WaitDurationUnitDataPlatformOperationsItemOperationData[i] = o.R.WaitDurationUnitDataPlatformOperationsItemOperationData[ln-1]
			}
			o.R.WaitDurationUnitDataPlatformOperationsItemOperationData = o.R.WaitDurationUnitDataPlatformOperationsItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddBaseUnitDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.BaseUnitDataPlatformOrdersItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddBaseUnitDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			BaseUnitDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.BaseUnitDataPlatformOrdersItemData = append(o.R.BaseUnitDataPlatformOrdersItemData, related...)
	}

	return nil
}

// AddDeliveryUnitDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.DeliveryUnitDataPlatformOrdersItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddDeliveryUnitDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			DeliveryUnitDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.DeliveryUnitDataPlatformOrdersItemData = append(o.R.DeliveryUnitDataPlatformOrdersItemData, related...)
	}

	return nil
}

// AddInternalCapacityQuantityUnitDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddInternalCapacityQuantityUnitDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InternalCapacityQuantityUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InternalCapacityQuantityUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InternalCapacityQuantityUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			InternalCapacityQuantityUnitDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData = append(o.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetInternalCapacityQuantityUnitDataPlatformOrdersItemData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum's InternalCapacityQuantityUnitDataPlatformOrdersItemData accordingly.
// Replaces o.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetInternalCapacityQuantityUnitDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `InternalCapacityQuantityUnit` = null where `InternalCapacityQuantityUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData = nil
	}

	return o.AddInternalCapacityQuantityUnitDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveInternalCapacityQuantityUnitDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.InternalCapacityQuantityUnitDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveInternalCapacityQuantityUnitDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InternalCapacityQuantityUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("InternalCapacityQuantityUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData[i] = o.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData[ln-1]
			}
			o.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData = o.R.InternalCapacityQuantityUnitDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductWeightUnitDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductWeightUnitDataPlatformOrdersItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductWeightUnitDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductWeightUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductWeightUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductWeightUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductWeightUnitDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.ProductWeightUnitDataPlatformOrdersItemData = append(o.R.ProductWeightUnitDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetProductWeightUnitDataPlatformOrdersItemData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductWeightUnitDataPlatformQuantityUnitQuantityUnitDatum's ProductWeightUnitDataPlatformOrdersItemData accordingly.
// Replaces o.R.ProductWeightUnitDataPlatformOrdersItemData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetProductWeightUnitDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `ProductWeightUnit` = null where `ProductWeightUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductWeightUnitDataPlatformOrdersItemData = nil
	}

	return o.AddProductWeightUnitDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveProductWeightUnitDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.ProductWeightUnitDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveProductWeightUnitDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductWeightUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductWeightUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductWeightUnitDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductWeightUnitDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductWeightUnitDataPlatformOrdersItemData[i] = o.R.ProductWeightUnitDataPlatformOrdersItemData[ln-1]
			}
			o.R.ProductWeightUnitDataPlatformOrdersItemData = o.R.ProductWeightUnitDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddPlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddPlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlannedOrderDepartureDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrderDepartureDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlannedOrderDepartureDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData: related,
		}
	} else {
		o.R.PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData = append(o.R.PlannedOrderDepartureDeliveryUnitDataPlatformPlannedOrderHeaderData, related...)
	}

	return nil
}

// AddPlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddPlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PlannedOrderDepartureProductionUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrderDepartureProductionUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PlannedOrderDepartureProductionUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData: related,
		}
	} else {
		o.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData = append(o.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData, related...)
	}

	return nil
}

// SetPlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum's PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData accordingly.
// Replaces o.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetPlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	query := "update `data_platform_planned_order_header_data` set `PlannedOrderDepartureProductionUnit` = null where `PlannedOrderDepartureProductionUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData = nil
	}

	return o.AddPlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData(ctx, exec, insert, related...)
}

// RemovePlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData relationships from objects passed in.
// Removes related items from R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemovePlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PlannedOrderDepartureProductionUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("PlannedOrderDepartureProductionUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData[i] = o.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData[ln-1]
			}
			o.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData = o.R.PlannedOrderDepartureProductionUnitDataPlatformPlannedOrderHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddPlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddPlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlannedOrderDestinationDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrderDestinationDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlannedOrderDestinationDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData: related,
		}
	} else {
		o.R.PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData = append(o.R.PlannedOrderDestinationDeliveryUnitDataPlatformPlannedOrderHeaderData, related...)
	}

	return nil
}

// AddProductBaseUnitDataPlatformPlannedOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductBaseUnitDataPlatformPlannedOrderHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductBaseUnitDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductBaseUnitDataPlatformPlannedOrderHeaderData: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformPlannedOrderHeaderData = append(o.R.ProductBaseUnitDataPlatformPlannedOrderHeaderData, related...)
	}

	return nil
}

// AddComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData: related,
		}
	} else {
		o.R.ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData = append(o.R.ComponentProductBaseUnitDataPlatformPlannedOrderItemComponentData, related...)
	}

	return nil
}

// AddComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData: related,
		}
	} else {
		o.R.ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData = append(o.R.ComponentProductDeliveryUnitDataPlatformPlannedOrderItemComponentData, related...)
	}

	return nil
}

// AddProductBaseUnitDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductBaseUnitDataPlatformPlannedOrderItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductBaseUnitDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductBaseUnitDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformPlannedOrderItemData = append(o.R.ProductBaseUnitDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// AddProductDeliveryUnitDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDeliveryUnitDataPlatformPlannedOrderItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductDeliveryUnitDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductDeliveryUnitDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformPlannedOrderItemData = append(o.R.ProductDeliveryUnitDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// AddProductProductionUnitDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductProductionUnitDataPlatformPlannedOrderItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductProductionUnitDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductProductionUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductProductionUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductProductionUnitDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformPlannedOrderItemData = append(o.R.ProductProductionUnitDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// SetProductProductionUnitDataPlatformPlannedOrderItemData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum's ProductProductionUnitDataPlatformPlannedOrderItemData accordingly.
// Replaces o.R.ProductProductionUnitDataPlatformPlannedOrderItemData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetProductProductionUnitDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	query := "update `data_platform_planned_order_item_data` set `ProductProductionUnit` = null where `ProductProductionUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductProductionUnitDataPlatformPlannedOrderItemData = nil
	}

	return o.AddProductProductionUnitDataPlatformPlannedOrderItemData(ctx, exec, insert, related...)
}

// RemoveProductProductionUnitDataPlatformPlannedOrderItemData relationships from objects passed in.
// Removes related items from R.ProductProductionUnitDataPlatformPlannedOrderItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveProductProductionUnitDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductProductionUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductProductionUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductProductionUnitDataPlatformPlannedOrderItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductProductionUnitDataPlatformPlannedOrderItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductProductionUnitDataPlatformPlannedOrderItemData[i] = o.R.ProductProductionUnitDataPlatformPlannedOrderItemData[ln-1]
			}
			o.R.ProductProductionUnitDataPlatformPlannedOrderItemData = o.R.ProductProductionUnitDataPlatformPlannedOrderItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddMoveDurationUnitDataPlatformPlannedOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddMoveDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MoveDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"MoveDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MoveDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			MoveDurationUnitDataPlatformPlannedOrderItemOperationData: related,
		}
	} else {
		o.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData = append(o.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData, related...)
	}

	return nil
}

// SetMoveDurationUnitDataPlatformPlannedOrderItemOperationData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's MoveDurationUnitDataPlatformPlannedOrderItemOperationData accordingly.
// Replaces o.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetMoveDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	query := "update `data_platform_planned_order_item_operation_data` set `MoveDurationUnit` = null where `MoveDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData = nil
	}

	return o.AddMoveDurationUnitDataPlatformPlannedOrderItemOperationData(ctx, exec, insert, related...)
}

// RemoveMoveDurationUnitDataPlatformPlannedOrderItemOperationData relationships from objects passed in.
// Removes related items from R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveMoveDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MoveDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("MoveDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData[i] = o.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData[ln-1]
			}
			o.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData = o.R.MoveDurationUnitDataPlatformPlannedOrderItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductBaseUnitDataPlatformPlannedOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductBaseUnitDataPlatformPlannedOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductBaseUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductBaseUnitDataPlatformPlannedOrderItemOperationData: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformPlannedOrderItemOperationData = append(o.R.ProductBaseUnitDataPlatformPlannedOrderItemOperationData, related...)
	}

	return nil
}

// AddProductDeliveryUnitDataPlatformPlannedOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductDeliveryUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData = append(o.R.ProductDeliveryUnitDataPlatformPlannedOrderItemOperationData, related...)
	}

	return nil
}

// AddProductOperationUnitDataPlatformPlannedOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductOperationUnitDataPlatformPlannedOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductOperationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductOperationUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductOperationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductOperationUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductOperationUnitDataPlatformPlannedOrderItemOperationData: related,
		}
	} else {
		o.R.ProductOperationUnitDataPlatformPlannedOrderItemOperationData = append(o.R.ProductOperationUnitDataPlatformPlannedOrderItemOperationData, related...)
	}

	return nil
}

// AddProductProductionUnitDataPlatformPlannedOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductProductionUnitDataPlatformPlannedOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductProductionUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductProductionUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductProductionUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductProductionUnitDataPlatformPlannedOrderItemOperationData: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformPlannedOrderItemOperationData = append(o.R.ProductProductionUnitDataPlatformPlannedOrderItemOperationData, related...)
	}

	return nil
}

// AddQueueDurationUnitDataPlatformPlannedOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddQueueDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.QueueDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"QueueDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.QueueDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			QueueDurationUnitDataPlatformPlannedOrderItemOperationData: related,
		}
	} else {
		o.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData = append(o.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData, related...)
	}

	return nil
}

// SetQueueDurationUnitDataPlatformPlannedOrderItemOperationData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's QueueDurationUnitDataPlatformPlannedOrderItemOperationData accordingly.
// Replaces o.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetQueueDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	query := "update `data_platform_planned_order_item_operation_data` set `QueueDurationUnit` = null where `QueueDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData = nil
	}

	return o.AddQueueDurationUnitDataPlatformPlannedOrderItemOperationData(ctx, exec, insert, related...)
}

// RemoveQueueDurationUnitDataPlatformPlannedOrderItemOperationData relationships from objects passed in.
// Removes related items from R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveQueueDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.QueueDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("QueueDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData[i] = o.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData[ln-1]
			}
			o.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData = o.R.QueueDurationUnitDataPlatformPlannedOrderItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddStandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddStandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StandardDeliveryDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"StandardDeliveryDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StandardDeliveryDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData: related,
		}
	} else {
		o.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData = append(o.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData, related...)
	}

	return nil
}

// SetStandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData accordingly.
// Replaces o.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetStandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	query := "update `data_platform_planned_order_item_operation_data` set `StandardDeliveryDurationUnit` = null where `StandardDeliveryDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData = nil
	}

	return o.AddStandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData(ctx, exec, insert, related...)
}

// RemoveStandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData relationships from objects passed in.
// Removes related items from R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveStandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StandardDeliveryDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("StandardDeliveryDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData[i] = o.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData[ln-1]
			}
			o.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData = o.R.StandardDeliveryDurationUnitDataPlatformPlannedOrderItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddWaitDurationUnitDataPlatformPlannedOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddWaitDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WaitDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"WaitDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WaitDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			WaitDurationUnitDataPlatformPlannedOrderItemOperationData: related,
		}
	} else {
		o.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData = append(o.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData, related...)
	}

	return nil
}

// SetWaitDurationUnitDataPlatformPlannedOrderItemOperationData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's WaitDurationUnitDataPlatformPlannedOrderItemOperationData accordingly.
// Replaces o.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetWaitDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	query := "update `data_platform_planned_order_item_operation_data` set `WaitDurationUnit` = null where `WaitDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData = nil
	}

	return o.AddWaitDurationUnitDataPlatformPlannedOrderItemOperationData(ctx, exec, insert, related...)
}

// RemoveWaitDurationUnitDataPlatformPlannedOrderItemOperationData relationships from objects passed in.
// Removes related items from R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveWaitDurationUnitDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WaitDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("WaitDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData[i] = o.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData[ln-1]
			}
			o.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData = o.R.WaitDurationUnitDataPlatformPlannedOrderItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddSafetyDurationUnitDataPlatformProductMasterBPPlantData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddSafetyDurationUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SafetyDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SafetyDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SafetyDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			SafetyDurationUnitDataPlatformProductMasterBPPlantData: related,
		}
	} else {
		o.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData = append(o.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData, related...)
	}

	return nil
}

// SetSafetyDurationUnitDataPlatformProductMasterBPPlantData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's SafetyDurationUnitDataPlatformProductMasterBPPlantData accordingly.
// Replaces o.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetSafetyDurationUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	query := "update `data_platform_product_master_bp_plant_data` set `SafetyDurationUnit` = null where `SafetyDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData = nil
	}

	return o.AddSafetyDurationUnitDataPlatformProductMasterBPPlantData(ctx, exec, insert, related...)
}

// RemoveSafetyDurationUnitDataPlatformProductMasterBPPlantData relationships from objects passed in.
// Removes related items from R.SafetyDurationUnitDataPlatformProductMasterBPPlantData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveSafetyDurationUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterBPPlantDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SafetyDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("SafetyDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData {
			if rel != ri {
				continue
			}

			ln := len(o.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData)
			if ln > 1 && i < ln-1 {
				o.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData[i] = o.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData[ln-1]
			}
			o.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData = o.R.SafetyDurationUnitDataPlatformProductMasterBPPlantData[:ln-1]
			break
		}
	}

	return nil
}

// AddStandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddStandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StandardDeliveryDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"StandardDeliveryDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StandardDeliveryDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData: related,
		}
	} else {
		o.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData = append(o.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData, related...)
	}

	return nil
}

// SetStandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData accordingly.
// Replaces o.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetStandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	query := "update `data_platform_product_master_bp_plant_data` set `StandardDeliveryDurationUnit` = null where `StandardDeliveryDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData = nil
	}

	return o.AddStandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData(ctx, exec, insert, related...)
}

// RemoveStandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData relationships from objects passed in.
// Removes related items from R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveStandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterBPPlantDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StandardDeliveryDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("StandardDeliveryDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData {
			if rel != ri {
				continue
			}

			ln := len(o.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData)
			if ln > 1 && i < ln-1 {
				o.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData[i] = o.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData[ln-1]
			}
			o.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData = o.R.StandardDeliveryDurationUnitDataPlatformProductMasterBPPlantData[:ln-1]
			break
		}
	}

	return nil
}

// AddBaseUnitDataPlatformProductMasterGeneralData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.BaseUnitDataPlatformProductMasterGeneralData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddBaseUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			BaseUnitDataPlatformProductMasterGeneralData: related,
		}
	} else {
		o.R.BaseUnitDataPlatformProductMasterGeneralData = append(o.R.BaseUnitDataPlatformProductMasterGeneralData, related...)
	}

	return nil
}

// AddInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InternalCapacityQuantityUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InternalCapacityQuantityUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InternalCapacityQuantityUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData: related,
		}
	} else {
		o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData = append(o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData, related...)
	}

	return nil
}

// SetInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum's InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData accordingly.
// Replaces o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	query := "update `data_platform_product_master_general_data` set `InternalCapacityQuantityUnit` = null where `InternalCapacityQuantityUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData = nil
	}

	return o.AddInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData(ctx, exec, insert, related...)
}

// RemoveInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData relationships from objects passed in.
// Removes related items from R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveInternalCapacityQuantityUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InternalCapacityQuantityUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("InternalCapacityQuantityUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData[i] = o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData[ln-1]
			}
			o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData = o.R.InternalCapacityQuantityUnitDataPlatformProductMasterGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddWeightUnitDataPlatformProductMasterGeneralData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.WeightUnitDataPlatformProductMasterGeneralData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddWeightUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WeightUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"WeightUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WeightUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			WeightUnitDataPlatformProductMasterGeneralData: related,
		}
	} else {
		o.R.WeightUnitDataPlatformProductMasterGeneralData = append(o.R.WeightUnitDataPlatformProductMasterGeneralData, related...)
	}

	return nil
}

// SetWeightUnitDataPlatformProductMasterGeneralData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WeightUnitDataPlatformQuantityUnitQuantityUnitDatum's WeightUnitDataPlatformProductMasterGeneralData accordingly.
// Replaces o.R.WeightUnitDataPlatformProductMasterGeneralData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetWeightUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	query := "update `data_platform_product_master_general_data` set `WeightUnit` = null where `WeightUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.WeightUnitDataPlatformProductMasterGeneralData = nil
	}

	return o.AddWeightUnitDataPlatformProductMasterGeneralData(ctx, exec, insert, related...)
}

// RemoveWeightUnitDataPlatformProductMasterGeneralData relationships from objects passed in.
// Removes related items from R.WeightUnitDataPlatformProductMasterGeneralData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveWeightUnitDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WeightUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("WeightUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WeightUnitDataPlatformProductMasterGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.WeightUnitDataPlatformProductMasterGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.WeightUnitDataPlatformProductMasterGeneralData[i] = o.R.WeightUnitDataPlatformProductMasterGeneralData[ln-1]
			}
			o.R.WeightUnitDataPlatformProductMasterGeneralData = o.R.WeightUnitDataPlatformProductMasterGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductProcessingDurationUnitDataPlatformProductMasterProductionData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductProcessingDurationUnitDataPlatformProductMasterProductionData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductProcessingDurationUnitDataPlatformProductMasterProductionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterProductionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductProcessingDurationUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_production_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductProcessingDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductProcessingDurationUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductProcessingDurationUnitDataPlatformProductMasterProductionData: related,
		}
	} else {
		o.R.ProductProcessingDurationUnitDataPlatformProductMasterProductionData = append(o.R.ProductProcessingDurationUnitDataPlatformProductMasterProductionData, related...)
	}

	return nil
}

// AddProductProductionQuantityUnitDataPlatformProductMasterProductionData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductProductionQuantityUnitDataPlatformProductMasterProductionData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductProductionQuantityUnitDataPlatformProductMasterProductionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterProductionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductProductionQuantityUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_production_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionQuantityUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductProductionQuantityUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductProductionQuantityUnitDataPlatformProductMasterProductionData: related,
		}
	} else {
		o.R.ProductProductionQuantityUnitDataPlatformProductMasterProductionData = append(o.R.ProductProductionQuantityUnitDataPlatformProductMasterProductionData, related...)
	}

	return nil
}

// AddMoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddMoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MoveDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_confirmation_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"MoveDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderConfirmationHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.ConfirmationCountingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MoveDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData: related,
		}
	} else {
		o.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData = append(o.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData, related...)
	}

	return nil
}

// SetMoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData accordingly.
// Replaces o.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetMoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	query := "update `data_platform_production_order_confirmation_header_data` set `MoveDurationUnit` = null where `MoveDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData = nil
	}

	return o.AddMoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx, exec, insert, related...)
}

// RemoveMoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData relationships from objects passed in.
// Removes related items from R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveMoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MoveDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("MoveDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData[i] = o.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData[ln-1]
			}
			o.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData = o.R.MoveDurationUnitDataPlatformProductionOrderConfirmationHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_confirmation_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderConfirmationHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.ConfirmationCountingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData = append(o.R.ProductBaseUnitDataPlatformProductionOrderConfirmationHeaderData, related...)
	}

	return nil
}

// AddProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductOperationUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_confirmation_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductOperationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderConfirmationHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.ConfirmationCountingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductOperationUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData: related,
		}
	} else {
		o.R.ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData = append(o.R.ProductOperationUnitDataPlatformProductionOrderConfirmationHeaderData, related...)
	}

	return nil
}

// AddProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductProductionUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_confirmation_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderConfirmationHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.ConfirmationCountingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductProductionUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData = append(o.R.ProductProductionUnitDataPlatformProductionOrderConfirmationHeaderData, related...)
	}

	return nil
}

// AddQueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddQueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.QueueDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_confirmation_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"QueueDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderConfirmationHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.ConfirmationCountingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.QueueDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData: related,
		}
	} else {
		o.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData = append(o.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData, related...)
	}

	return nil
}

// SetQueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData accordingly.
// Replaces o.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetQueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	query := "update `data_platform_production_order_confirmation_header_data` set `QueueDurationUnit` = null where `QueueDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData = nil
	}

	return o.AddQueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx, exec, insert, related...)
}

// RemoveQueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData relationships from objects passed in.
// Removes related items from R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveQueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.QueueDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("QueueDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData[i] = o.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData[ln-1]
			}
			o.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData = o.R.QueueDurationUnitDataPlatformProductionOrderConfirmationHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddWaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddWaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WaitDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_confirmation_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"WaitDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderConfirmationHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.ConfirmationCountingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WaitDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData: related,
		}
	} else {
		o.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData = append(o.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData, related...)
	}

	return nil
}

// SetWaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData accordingly.
// Replaces o.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetWaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	query := "update `data_platform_production_order_confirmation_header_data` set `WaitDurationUnit` = null where `WaitDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData = nil
	}

	return o.AddWaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx, exec, insert, related...)
}

// RemoveWaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData relationships from objects passed in.
// Removes related items from R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveWaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WaitDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("WaitDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData[i] = o.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData[ln-1]
			}
			o.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData = o.R.WaitDurationUnitDataPlatformProductionOrderConfirmationHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductBaseUnitDataPlatformProductionOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductBaseUnitDataPlatformProductionOrderHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductBaseUnitDataPlatformProductionOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductBaseUnitDataPlatformProductionOrderHeaderData: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformProductionOrderHeaderData = append(o.R.ProductBaseUnitDataPlatformProductionOrderHeaderData, related...)
	}

	return nil
}

// AddProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductionOrderDepartureDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrderDepartureDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductionOrderDepartureDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData: related,
		}
	} else {
		o.R.ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData = append(o.R.ProductionOrderDepartureDeliveryUnitDataPlatformProductionOrderHeaderData, related...)
	}

	return nil
}

// AddProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductionOrderDepartureProductionUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrderDepartureProductionUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductionOrderDepartureProductionUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData: related,
		}
	} else {
		o.R.ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData = append(o.R.ProductionOrderDepartureProductionUnitDataPlatformProductionOrderHeaderData, related...)
	}

	return nil
}

// AddProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductionOrderDestinationProductionUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrderDestinationProductionUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductionOrderDestinationProductionUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData: related,
		}
	} else {
		o.R.ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData = append(o.R.ProductionOrderDestinationProductionUnitDataPlatformProductionOrderHeaderData, related...)
	}

	return nil
}

// AddProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductionOrderDestinationDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrderDestinationDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductionOrderDestinationDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData: related,
		}
	} else {
		o.R.ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData = append(o.R.ProductionOrderDestinationDeliveryUnitDataPlatformProductionOrderHeaderData, related...)
	}

	return nil
}

// AddComponentProductBaseUnitDataPlatformProductionOrderItemComponentData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddComponentProductBaseUnitDataPlatformProductionOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData: related,
		}
	} else {
		o.R.ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData = append(o.R.ComponentProductBaseUnitDataPlatformProductionOrderItemComponentData, related...)
	}

	return nil
}

// AddComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProductDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProductDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProductDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData: related,
		}
	} else {
		o.R.ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData = append(o.R.ComponentProductDeliveryUnitDataPlatformProductionOrderItemComponentData, related...)
	}

	return nil
}

// AddProductBaseUnitDataPlatformProductionOrderItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductBaseUnitDataPlatformProductionOrderItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductBaseUnitDataPlatformProductionOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductBaseUnitDataPlatformProductionOrderItemData: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformProductionOrderItemData = append(o.R.ProductBaseUnitDataPlatformProductionOrderItemData, related...)
	}

	return nil
}

// AddProductDeliveryUnitDataPlatformProductionOrderItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDeliveryUnitDataPlatformProductionOrderItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductDeliveryUnitDataPlatformProductionOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductDeliveryUnitDataPlatformProductionOrderItemData: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformProductionOrderItemData = append(o.R.ProductDeliveryUnitDataPlatformProductionOrderItemData, related...)
	}

	return nil
}

// AddProductProductionUnitDataPlatformProductionOrderItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductProductionUnitDataPlatformProductionOrderItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductProductionUnitDataPlatformProductionOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductProductionUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductProductionUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductProductionUnitDataPlatformProductionOrderItemData: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformProductionOrderItemData = append(o.R.ProductProductionUnitDataPlatformProductionOrderItemData, related...)
	}

	return nil
}

// AddMoveDurationUnitDataPlatformProductionOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddMoveDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MoveDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"MoveDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MoveDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			MoveDurationUnitDataPlatformProductionOrderItemOperationData: related,
		}
	} else {
		o.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData = append(o.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData, related...)
	}

	return nil
}

// SetMoveDurationUnitDataPlatformProductionOrderItemOperationData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's MoveDurationUnitDataPlatformProductionOrderItemOperationData accordingly.
// Replaces o.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetMoveDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	query := "update `data_platform_production_order_item_operation_data` set `MoveDurationUnit` = null where `MoveDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData = nil
	}

	return o.AddMoveDurationUnitDataPlatformProductionOrderItemOperationData(ctx, exec, insert, related...)
}

// RemoveMoveDurationUnitDataPlatformProductionOrderItemOperationData relationships from objects passed in.
// Removes related items from R.MoveDurationUnitDataPlatformProductionOrderItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveMoveDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MoveDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("MoveDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData[i] = o.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData[ln-1]
			}
			o.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData = o.R.MoveDurationUnitDataPlatformProductionOrderItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductBaseUnitDataPlatformProductionOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductBaseUnitDataPlatformProductionOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductBaseUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductBaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductBaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductBaseUnitDataPlatformProductionOrderItemOperationData: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformProductionOrderItemOperationData = append(o.R.ProductBaseUnitDataPlatformProductionOrderItemOperationData, related...)
	}

	return nil
}

// AddProductDeliveryUnitDataPlatformProductionOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDeliveryUnitDataPlatformProductionOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductDeliveryUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductDeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductDeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductDeliveryUnitDataPlatformProductionOrderItemOperationData: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformProductionOrderItemOperationData = append(o.R.ProductDeliveryUnitDataPlatformProductionOrderItemOperationData, related...)
	}

	return nil
}

// AddProductOperationUnitDataPlatformProductionOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductOperationUnitDataPlatformProductionOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductOperationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductOperationUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductOperationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductOperationUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductOperationUnitDataPlatformProductionOrderItemOperationData: related,
		}
	} else {
		o.R.ProductOperationUnitDataPlatformProductionOrderItemOperationData = append(o.R.ProductOperationUnitDataPlatformProductionOrderItemOperationData, related...)
	}

	return nil
}

// AddProductProductionUnitDataPlatformProductionOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.ProductProductionUnitDataPlatformProductionOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddProductProductionUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductProductionUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductProductionUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			ProductProductionUnitDataPlatformProductionOrderItemOperationData: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformProductionOrderItemOperationData = append(o.R.ProductProductionUnitDataPlatformProductionOrderItemOperationData, related...)
	}

	return nil
}

// AddQueueDurationUnitDataPlatformProductionOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddQueueDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.QueueDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"QueueDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.QueueDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			QueueDurationUnitDataPlatformProductionOrderItemOperationData: related,
		}
	} else {
		o.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData = append(o.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData, related...)
	}

	return nil
}

// SetQueueDurationUnitDataPlatformProductionOrderItemOperationData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's QueueDurationUnitDataPlatformProductionOrderItemOperationData accordingly.
// Replaces o.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetQueueDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	query := "update `data_platform_production_order_item_operation_data` set `QueueDurationUnit` = null where `QueueDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData = nil
	}

	return o.AddQueueDurationUnitDataPlatformProductionOrderItemOperationData(ctx, exec, insert, related...)
}

// RemoveQueueDurationUnitDataPlatformProductionOrderItemOperationData relationships from objects passed in.
// Removes related items from R.QueueDurationUnitDataPlatformProductionOrderItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveQueueDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.QueueDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("QueueDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData[i] = o.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData[ln-1]
			}
			o.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData = o.R.QueueDurationUnitDataPlatformProductionOrderItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddStandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddStandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StandardDeliveryDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"StandardDeliveryDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StandardDeliveryDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData: related,
		}
	} else {
		o.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData = append(o.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData, related...)
	}

	return nil
}

// SetStandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData accordingly.
// Replaces o.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetStandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	query := "update `data_platform_production_order_item_operation_data` set `StandardDeliveryDurationUnit` = null where `StandardDeliveryDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData = nil
	}

	return o.AddStandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData(ctx, exec, insert, related...)
}

// RemoveStandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData relationships from objects passed in.
// Removes related items from R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveStandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StandardDeliveryDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("StandardDeliveryDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData[i] = o.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData[ln-1]
			}
			o.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData = o.R.StandardDeliveryDurationUnitDataPlatformProductionOrderItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddWaitDurationUnitDataPlatformProductionOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddWaitDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WaitDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"WaitDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WaitDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			WaitDurationUnitDataPlatformProductionOrderItemOperationData: related,
		}
	} else {
		o.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData = append(o.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData, related...)
	}

	return nil
}

// SetWaitDurationUnitDataPlatformProductionOrderItemOperationData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's WaitDurationUnitDataPlatformProductionOrderItemOperationData accordingly.
// Replaces o.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetWaitDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	query := "update `data_platform_production_order_item_operation_data` set `WaitDurationUnit` = null where `WaitDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData = nil
	}

	return o.AddWaitDurationUnitDataPlatformProductionOrderItemOperationData(ctx, exec, insert, related...)
}

// RemoveWaitDurationUnitDataPlatformProductionOrderItemOperationData relationships from objects passed in.
// Removes related items from R.WaitDurationUnitDataPlatformProductionOrderItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveWaitDurationUnitDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WaitDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("WaitDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData[i] = o.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData[ln-1]
			}
			o.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData = o.R.WaitDurationUnitDataPlatformProductionOrderItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddBaseUnitDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.BaseUnitDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddBaseUnitDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BaseUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BaseUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BaseUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			BaseUnitDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.BaseUnitDataPlatformPurchaseRequisitionItemData = append(o.R.BaseUnitDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// AddQuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddQuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuantityUnitConversionQuantityUnitConvDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QuantityUnitFrom = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quantity_unit_conversion_quantity_unit_conv_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"QuantityUnitFrom"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitConversionQuantityUnitConvDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.QuantityUnitFrom, rel.QuantityUnitTo}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QuantityUnitFrom = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData: related,
		}
	} else {
		o.R.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData = append(o.R.QuantityUnitFromDataPlatformQuantityUnitConversionQuantityUnitConvData, related...)
	}

	return nil
}

// AddQuantityUnitDataPlatformQuantityUnitTextData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.QuantityUnitDataPlatformQuantityUnitTextData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddQuantityUnitDataPlatformQuantityUnitTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuantityUnitTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.QuantityUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quantity_unit_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"QuantityUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.QuantityUnit, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.QuantityUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			QuantityUnitDataPlatformQuantityUnitTextData: related,
		}
	} else {
		o.R.QuantityUnitDataPlatformQuantityUnitTextData = append(o.R.QuantityUnitDataPlatformQuantityUnitTextData, related...)
	}

	return nil
}

// AddDeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddDeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryPlantRelationProductDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_delivery_plant_relation_product_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.Product}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData: related,
		}
	} else {
		o.R.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData = append(o.R.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductData, related...)
	}

	return nil
}

// AddSafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddSafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryPlantRelationProductDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SafetyDurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_delivery_plant_relation_product_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SafetyDurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.Product}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SafetyDurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData: related,
		}
	} else {
		o.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData = append(o.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData, related...)
	}

	return nil
}

// SetSafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum's SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData accordingly.
// Replaces o.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetSafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryPlantRelationProductDatum) error {
	query := "update `data_platform_scr_delivery_plant_relation_product_data` set `SafetyDurationUnit` = null where `SafetyDurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData = nil
	}

	return o.AddSafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData(ctx, exec, insert, related...)
}

// RemoveSafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData relationships from objects passed in.
// Removes related items from R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveSafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformSCRDeliveryPlantRelationProductDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SafetyDurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("SafetyDurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData {
			if rel != ri {
				continue
			}

			ln := len(o.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData)
			if ln > 1 && i < ln-1 {
				o.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData[i] = o.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData[ln-1]
			}
			o.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData = o.R.SafetyDurationUnitDataPlatformSCRDeliveryPlantRelationProductData[:ln-1]
			break
		}
	}

	return nil
}

// AddDeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddDeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryPlantRelationProductMRPAreaDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliveryUnit = o.QuantityUnit
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_delivery_plant_relation_product_mrp_area_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliveryUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationProductMRPAreaDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.Product, rel.MRPArea}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliveryUnit = o.QuantityUnit
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData: related,
		}
	} else {
		o.R.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData = append(o.R.DeliveryUnitDataPlatformSCRDeliveryPlantRelationProductMRPAreaData, related...)
	}

	return nil
}

// AddDurationUnitDataPlatformUsageControlChainUsageControlChainData adds the given related objects to the existing relationships
// of the data_platform_quantity_unit_quantity_unit_datum, optionally inserting them as new records.
// Appends related to o.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) AddDurationUnitDataPlatformUsageControlChainUsageControlChainData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformUsageControlChainUsageControlChainDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DurationUnit, o.QuantityUnit)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_usage_control_chain_usage_control_chain_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DurationUnit"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.QuantityUnit, rel.UsageControlChain}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DurationUnit, o.QuantityUnit)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuantityUnitQuantityUnitDatumR{
			DurationUnitDataPlatformUsageControlChainUsageControlChainData: related,
		}
	} else {
		o.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData = append(o.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData, related...)
	}

	return nil
}

// SetDurationUnitDataPlatformUsageControlChainUsageControlChainData removes all previously related items of the
// data_platform_quantity_unit_quantity_unit_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DurationUnitDataPlatformQuantityUnitQuantityUnitDatum's DurationUnitDataPlatformUsageControlChainUsageControlChainData accordingly.
// Replaces o.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData with related.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) SetDurationUnitDataPlatformUsageControlChainUsageControlChainData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformUsageControlChainUsageControlChainDatum) error {
	query := "update `data_platform_usage_control_chain_usage_control_chain_data` set `DurationUnit` = null where `DurationUnit` = ?"
	values := []interface{}{o.QuantityUnit}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData = nil
	}

	return o.AddDurationUnitDataPlatformUsageControlChainUsageControlChainData(ctx, exec, insert, related...)
}

// RemoveDurationUnitDataPlatformUsageControlChainUsageControlChainData relationships from objects passed in.
// Removes related items from R.DurationUnitDataPlatformUsageControlChainUsageControlChainData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformQuantityUnitQuantityUnitDatum) RemoveDurationUnitDataPlatformUsageControlChainUsageControlChainData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformUsageControlChainUsageControlChainDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DurationUnit, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("DurationUnit")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData {
			if rel != ri {
				continue
			}

			ln := len(o.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData)
			if ln > 1 && i < ln-1 {
				o.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData[i] = o.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData[ln-1]
			}
			o.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData = o.R.DurationUnitDataPlatformUsageControlChainUsageControlChainData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformQuantityUnitQuantityUnitData retrieves all the records using an executor.
func DataPlatformQuantityUnitQuantityUnitData(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	mods = append(mods, qm.From("`data_platform_quantity_unit_quantity_unit_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_quantity_unit_quantity_unit_data`.*"})
	}

	return dataPlatformQuantityUnitQuantityUnitDatumQuery{q}
}

// FindDataPlatformQuantityUnitQuantityUnitDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, quantityUnit string, selectCols ...string) (*DataPlatformQuantityUnitQuantityUnitDatum, error) {
	dataPlatformQuantityUnitQuantityUnitDatumObj := &DataPlatformQuantityUnitQuantityUnitDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_quantity_unit_quantity_unit_data` where `QuantityUnit`=?", sel,
	)

	q := queries.Raw(query, quantityUnit)

	err := q.Bind(ctx, exec, dataPlatformQuantityUnitQuantityUnitDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_quantity_unit_quantity_unit_data")
	}

	return dataPlatformQuantityUnitQuantityUnitDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quantity_unit_quantity_unit_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformQuantityUnitQuantityUnitDatumInsertCache[key]
	dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformQuantityUnitQuantityUnitDatumAllColumns,
			dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault,
			dataPlatformQuantityUnitQuantityUnitDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_quantity_unit_quantity_unit_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_quantity_unit_quantity_unit_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_quantity_unit_quantity_unit_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_quantity_unit_quantity_unit_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.QuantityUnit,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quantity_unit_quantity_unit_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut.Lock()
		dataPlatformQuantityUnitQuantityUnitDatumInsertCache[key] = cache
		dataPlatformQuantityUnitQuantityUnitDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformQuantityUnitQuantityUnitDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformQuantityUnitQuantityUnitDatumUpdateCache[key]
	dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformQuantityUnitQuantityUnitDatumAllColumns,
			dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_quantity_unit_quantity_unit_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_quantity_unit_quantity_unit_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, append(wl, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_quantity_unit_quantity_unit_data row")
	}

	if !cached {
		dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut.Lock()
		dataPlatformQuantityUnitQuantityUnitDatumUpdateCache[key] = cache
		dataPlatformQuantityUnitQuantityUnitDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_quantity_unit_quantity_unit_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformQuantityUnitQuantityUnitDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_quantity_unit_quantity_unit_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformQuantityUnitQuantityUnitDatum slice")
	}

	return nil
}

var mySQLDataPlatformQuantityUnitQuantityUnitDatumUniqueColumns = []string{
	"QuantityUnit",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quantity_unit_quantity_unit_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformQuantityUnitQuantityUnitDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformQuantityUnitQuantityUnitDatumUpsertCache[key]
	dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformQuantityUnitQuantityUnitDatumAllColumns,
			dataPlatformQuantityUnitQuantityUnitDatumColumnsWithDefault,
			dataPlatformQuantityUnitQuantityUnitDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformQuantityUnitQuantityUnitDatumAllColumns,
			dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_quantity_unit_quantity_unit_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_quantity_unit_quantity_unit_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_quantity_unit_quantity_unit_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_quantity_unit_quantity_unit_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformQuantityUnitQuantityUnitDatumType, dataPlatformQuantityUnitQuantityUnitDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_quantity_unit_quantity_unit_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quantity_unit_quantity_unit_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut.Lock()
		dataPlatformQuantityUnitQuantityUnitDatumUpsertCache[key] = cache
		dataPlatformQuantityUnitQuantityUnitDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformQuantityUnitQuantityUnitDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformQuantityUnitQuantityUnitDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_quantity_unit_quantity_unit_data` WHERE `QuantityUnit`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_quantity_unit_quantity_unit_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformQuantityUnitQuantityUnitDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformQuantityUnitQuantityUnitDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_quantity_unit_quantity_unit_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformQuantityUnitQuantityUnitDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_quantity_unit_quantity_unit_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformQuantityUnitQuantityUnitDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformQuantityUnitQuantityUnitDatum(ctx, exec, o.QuantityUnit)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformQuantityUnitQuantityUnitDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformQuantityUnitQuantityUnitDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_quantity_unit_quantity_unit_data`.* FROM `data_platform_quantity_unit_quantity_unit_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuantityUnitQuantityUnitDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformQuantityUnitQuantityUnitDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformQuantityUnitQuantityUnitDatumExists checks if the DataPlatformQuantityUnitQuantityUnitDatum row exists.
func DataPlatformQuantityUnitQuantityUnitDatumExists(ctx context.Context, exec boil.ContextExecutor, quantityUnit string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_quantity_unit_quantity_unit_data` where `QuantityUnit`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, quantityUnit)
	}
	row := exec.QueryRowContext(ctx, sql, quantityUnit)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_quantity_unit_quantity_unit_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformQuantityUnitQuantityUnitDatum row exists.
func (o *DataPlatformQuantityUnitQuantityUnitDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformQuantityUnitQuantityUnitDatumExists(ctx, exec, o.QuantityUnit)
}
