// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformQuotationsHeaderPartnerContactDatum is an object representing the database table.
type DataPlatformQuotationsHeaderPartnerContactDatum struct {
	Quotation         int         `boil:"Quotation" json:"Quotation" toml:"Quotation" yaml:"Quotation"`
	PartnerFunction   string      `boil:"PartnerFunction" json:"PartnerFunction" toml:"PartnerFunction" yaml:"PartnerFunction"`
	ContactID         int         `boil:"ContactID" json:"ContactID" toml:"ContactID" yaml:"ContactID"`
	BusinessPartner   null.Int    `boil:"BusinessPartner" json:"BusinessPartner,omitempty" toml:"BusinessPartner" yaml:"BusinessPartner,omitempty"`
	ContactPersonName null.String `boil:"ContactPersonName" json:"ContactPersonName,omitempty" toml:"ContactPersonName" yaml:"ContactPersonName,omitempty"`
	EmailAddress      null.String `boil:"EmailAddress" json:"EmailAddress,omitempty" toml:"EmailAddress" yaml:"EmailAddress,omitempty"`
	PhoneNumber       null.String `boil:"PhoneNumber" json:"PhoneNumber,omitempty" toml:"PhoneNumber" yaml:"PhoneNumber,omitempty"`
	MobilePhoneNumber null.String `boil:"MobilePhoneNumber" json:"MobilePhoneNumber,omitempty" toml:"MobilePhoneNumber" yaml:"MobilePhoneNumber,omitempty"`
	FaxNumber         null.String `boil:"FaxNumber" json:"FaxNumber,omitempty" toml:"FaxNumber" yaml:"FaxNumber,omitempty"`
	ContactTag1       null.String `boil:"ContactTag1" json:"ContactTag1,omitempty" toml:"ContactTag1" yaml:"ContactTag1,omitempty"`
	ContactTag2       null.String `boil:"ContactTag2" json:"ContactTag2,omitempty" toml:"ContactTag2" yaml:"ContactTag2,omitempty"`
	ContactTag3       null.String `boil:"ContactTag3" json:"ContactTag3,omitempty" toml:"ContactTag3" yaml:"ContactTag3,omitempty"`
	ContactTag4       null.String `boil:"ContactTag4" json:"ContactTag4,omitempty" toml:"ContactTag4" yaml:"ContactTag4,omitempty"`

	R *dataPlatformQuotationsHeaderPartnerContactDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformQuotationsHeaderPartnerContactDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformQuotationsHeaderPartnerContactDatumColumns = struct {
	Quotation         string
	PartnerFunction   string
	ContactID         string
	BusinessPartner   string
	ContactPersonName string
	EmailAddress      string
	PhoneNumber       string
	MobilePhoneNumber string
	FaxNumber         string
	ContactTag1       string
	ContactTag2       string
	ContactTag3       string
	ContactTag4       string
}{
	Quotation:         "Quotation",
	PartnerFunction:   "PartnerFunction",
	ContactID:         "ContactID",
	BusinessPartner:   "BusinessPartner",
	ContactPersonName: "ContactPersonName",
	EmailAddress:      "EmailAddress",
	PhoneNumber:       "PhoneNumber",
	MobilePhoneNumber: "MobilePhoneNumber",
	FaxNumber:         "FaxNumber",
	ContactTag1:       "ContactTag1",
	ContactTag2:       "ContactTag2",
	ContactTag3:       "ContactTag3",
	ContactTag4:       "ContactTag4",
}

var DataPlatformQuotationsHeaderPartnerContactDatumTableColumns = struct {
	Quotation         string
	PartnerFunction   string
	ContactID         string
	BusinessPartner   string
	ContactPersonName string
	EmailAddress      string
	PhoneNumber       string
	MobilePhoneNumber string
	FaxNumber         string
	ContactTag1       string
	ContactTag2       string
	ContactTag3       string
	ContactTag4       string
}{
	Quotation:         "data_platform_quotations_header_partner_contact_data.Quotation",
	PartnerFunction:   "data_platform_quotations_header_partner_contact_data.PartnerFunction",
	ContactID:         "data_platform_quotations_header_partner_contact_data.ContactID",
	BusinessPartner:   "data_platform_quotations_header_partner_contact_data.BusinessPartner",
	ContactPersonName: "data_platform_quotations_header_partner_contact_data.ContactPersonName",
	EmailAddress:      "data_platform_quotations_header_partner_contact_data.EmailAddress",
	PhoneNumber:       "data_platform_quotations_header_partner_contact_data.PhoneNumber",
	MobilePhoneNumber: "data_platform_quotations_header_partner_contact_data.MobilePhoneNumber",
	FaxNumber:         "data_platform_quotations_header_partner_contact_data.FaxNumber",
	ContactTag1:       "data_platform_quotations_header_partner_contact_data.ContactTag1",
	ContactTag2:       "data_platform_quotations_header_partner_contact_data.ContactTag2",
	ContactTag3:       "data_platform_quotations_header_partner_contact_data.ContactTag3",
	ContactTag4:       "data_platform_quotations_header_partner_contact_data.ContactTag4",
}

// Generated where

var DataPlatformQuotationsHeaderPartnerContactDatumWhere = struct {
	Quotation         whereHelperint
	PartnerFunction   whereHelperstring
	ContactID         whereHelperint
	BusinessPartner   whereHelpernull_Int
	ContactPersonName whereHelpernull_String
	EmailAddress      whereHelpernull_String
	PhoneNumber       whereHelpernull_String
	MobilePhoneNumber whereHelpernull_String
	FaxNumber         whereHelpernull_String
	ContactTag1       whereHelpernull_String
	ContactTag2       whereHelpernull_String
	ContactTag3       whereHelpernull_String
	ContactTag4       whereHelpernull_String
}{
	Quotation:         whereHelperint{field: "`data_platform_quotations_header_partner_contact_data`.`Quotation`"},
	PartnerFunction:   whereHelperstring{field: "`data_platform_quotations_header_partner_contact_data`.`PartnerFunction`"},
	ContactID:         whereHelperint{field: "`data_platform_quotations_header_partner_contact_data`.`ContactID`"},
	BusinessPartner:   whereHelpernull_Int{field: "`data_platform_quotations_header_partner_contact_data`.`BusinessPartner`"},
	ContactPersonName: whereHelpernull_String{field: "`data_platform_quotations_header_partner_contact_data`.`ContactPersonName`"},
	EmailAddress:      whereHelpernull_String{field: "`data_platform_quotations_header_partner_contact_data`.`EmailAddress`"},
	PhoneNumber:       whereHelpernull_String{field: "`data_platform_quotations_header_partner_contact_data`.`PhoneNumber`"},
	MobilePhoneNumber: whereHelpernull_String{field: "`data_platform_quotations_header_partner_contact_data`.`MobilePhoneNumber`"},
	FaxNumber:         whereHelpernull_String{field: "`data_platform_quotations_header_partner_contact_data`.`FaxNumber`"},
	ContactTag1:       whereHelpernull_String{field: "`data_platform_quotations_header_partner_contact_data`.`ContactTag1`"},
	ContactTag2:       whereHelpernull_String{field: "`data_platform_quotations_header_partner_contact_data`.`ContactTag2`"},
	ContactTag3:       whereHelpernull_String{field: "`data_platform_quotations_header_partner_contact_data`.`ContactTag3`"},
	ContactTag4:       whereHelpernull_String{field: "`data_platform_quotations_header_partner_contact_data`.`ContactTag4`"},
}

// DataPlatformQuotationsHeaderPartnerContactDatumRels is where relationship names are stored.
var DataPlatformQuotationsHeaderPartnerContactDatumRels = struct {
	PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum string
}{
	PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum: "PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum",
}

// dataPlatformQuotationsHeaderPartnerContactDatumR is where relationships are stored.
type dataPlatformQuotationsHeaderPartnerContactDatumR struct {
	PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum *DataPlatformQuotationsHeaderPartnerDatum `boil:"PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum" json:"PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum" toml:"PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum" yaml:"PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformQuotationsHeaderPartnerContactDatumR) NewStruct() *dataPlatformQuotationsHeaderPartnerContactDatumR {
	return &dataPlatformQuotationsHeaderPartnerContactDatumR{}
}

func (r *dataPlatformQuotationsHeaderPartnerContactDatumR) GetPartnerFunctionDataPlatformQuotationsHeaderPartnerDatum() *DataPlatformQuotationsHeaderPartnerDatum {
	if r == nil {
		return nil
	}
	return r.PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum
}

// dataPlatformQuotationsHeaderPartnerContactDatumL is where Load methods for each relationship are stored.
type dataPlatformQuotationsHeaderPartnerContactDatumL struct{}

var (
	dataPlatformQuotationsHeaderPartnerContactDatumAllColumns            = []string{"Quotation", "PartnerFunction", "ContactID", "BusinessPartner", "ContactPersonName", "EmailAddress", "PhoneNumber", "MobilePhoneNumber", "FaxNumber", "ContactTag1", "ContactTag2", "ContactTag3", "ContactTag4"}
	dataPlatformQuotationsHeaderPartnerContactDatumColumnsWithoutDefault = []string{"Quotation", "PartnerFunction", "ContactID", "BusinessPartner", "ContactPersonName", "EmailAddress", "PhoneNumber", "MobilePhoneNumber", "FaxNumber", "ContactTag1", "ContactTag2", "ContactTag3", "ContactTag4"}
	dataPlatformQuotationsHeaderPartnerContactDatumColumnsWithDefault    = []string{}
	dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyColumns     = []string{"Quotation", "PartnerFunction", "ContactID"}
	dataPlatformQuotationsHeaderPartnerContactDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformQuotationsHeaderPartnerContactDatumSlice is an alias for a slice of pointers to DataPlatformQuotationsHeaderPartnerContactDatum.
	// This should almost always be used instead of []DataPlatformQuotationsHeaderPartnerContactDatum.
	DataPlatformQuotationsHeaderPartnerContactDatumSlice []*DataPlatformQuotationsHeaderPartnerContactDatum

	dataPlatformQuotationsHeaderPartnerContactDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformQuotationsHeaderPartnerContactDatumType                 = reflect.TypeOf(&DataPlatformQuotationsHeaderPartnerContactDatum{})
	dataPlatformQuotationsHeaderPartnerContactDatumMapping              = queries.MakeStructMapping(dataPlatformQuotationsHeaderPartnerContactDatumType)
	dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformQuotationsHeaderPartnerContactDatumType, dataPlatformQuotationsHeaderPartnerContactDatumMapping, dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyColumns)
	dataPlatformQuotationsHeaderPartnerContactDatumInsertCacheMut       sync.RWMutex
	dataPlatformQuotationsHeaderPartnerContactDatumInsertCache          = make(map[string]insertCache)
	dataPlatformQuotationsHeaderPartnerContactDatumUpdateCacheMut       sync.RWMutex
	dataPlatformQuotationsHeaderPartnerContactDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformQuotationsHeaderPartnerContactDatumUpsertCacheMut       sync.RWMutex
	dataPlatformQuotationsHeaderPartnerContactDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformQuotationsHeaderPartnerContactDatum record from the query.
func (q dataPlatformQuotationsHeaderPartnerContactDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformQuotationsHeaderPartnerContactDatum, error) {
	o := &DataPlatformQuotationsHeaderPartnerContactDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_quotations_header_partner_contact_data")
	}

	return o, nil
}

// All returns all DataPlatformQuotationsHeaderPartnerContactDatum records from the query.
func (q dataPlatformQuotationsHeaderPartnerContactDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformQuotationsHeaderPartnerContactDatumSlice, error) {
	var o []*DataPlatformQuotationsHeaderPartnerContactDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformQuotationsHeaderPartnerContactDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformQuotationsHeaderPartnerContactDatum records in the query.
func (q dataPlatformQuotationsHeaderPartnerContactDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_quotations_header_partner_contact_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformQuotationsHeaderPartnerContactDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_quotations_header_partner_contact_data exists")
	}

	return count > 0, nil
}

// PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsHeaderPartnerContactDatum) PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum(mods ...qm.QueryMod) dataPlatformQuotationsHeaderPartnerDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PartnerFunction` = ?", o.PartnerFunction),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuotationsHeaderPartnerData(queryMods...)
}

// LoadPartnerFunctionDataPlatformQuotationsHeaderPartnerDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsHeaderPartnerContactDatumL) LoadPartnerFunctionDataPlatformQuotationsHeaderPartnerDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderPartnerContactDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderPartnerContactDatum
	var object *DataPlatformQuotationsHeaderPartnerContactDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderPartnerContactDatum.(*DataPlatformQuotationsHeaderPartnerContactDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderPartnerContactDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderPartnerContactDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderPartnerContactDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderPartnerContactDatum.(*[]*DataPlatformQuotationsHeaderPartnerContactDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderPartnerContactDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderPartnerContactDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderPartnerContactDatumR{}
		}
		args = append(args, object.PartnerFunction)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderPartnerContactDatumR{}
			}

			for _, a := range args {
				if a == obj.PartnerFunction {
					continue Outer
				}
			}

			args = append(args, obj.PartnerFunction)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_partner_data`),
		qm.WhereIn(`data_platform_quotations_header_partner_data.PartnerFunction in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuotationsHeaderPartnerDatum")
	}

	var resultSlice []*DataPlatformQuotationsHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuotationsHeaderPartnerDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quotations_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_partner_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PartnerFunction == foreign.PartnerFunction {
				local.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetPartnerFunctionDataPlatformQuotationsHeaderPartnerDatum of the dataPlatformQuotationsHeaderPartnerContactDatum to the related item.
// Sets o.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum to related.
func (o *DataPlatformQuotationsHeaderPartnerContactDatum) SetPartnerFunctionDataPlatformQuotationsHeaderPartnerDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuotationsHeaderPartnerDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_header_partner_contact_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PartnerFunction"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PartnerFunction, o.Quotation, o.PartnerFunction, o.ContactID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PartnerFunction = related.PartnerFunction
	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderPartnerContactDatumR{
			PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum: related,
		}
	} else {
		o.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerDatum = related
	}

	return nil
}

// DataPlatformQuotationsHeaderPartnerContactData retrieves all the records using an executor.
func DataPlatformQuotationsHeaderPartnerContactData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderPartnerContactDatumQuery {
	mods = append(mods, qm.From("`data_platform_quotations_header_partner_contact_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_quotations_header_partner_contact_data`.*"})
	}

	return dataPlatformQuotationsHeaderPartnerContactDatumQuery{q}
}

// FindDataPlatformQuotationsHeaderPartnerContactDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformQuotationsHeaderPartnerContactDatum(ctx context.Context, exec boil.ContextExecutor, quotation int, partnerFunction string, contactID int, selectCols ...string) (*DataPlatformQuotationsHeaderPartnerContactDatum, error) {
	dataPlatformQuotationsHeaderPartnerContactDatumObj := &DataPlatformQuotationsHeaderPartnerContactDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_quotations_header_partner_contact_data` where `Quotation`=? AND `PartnerFunction`=? AND `ContactID`=?", sel,
	)

	q := queries.Raw(query, quotation, partnerFunction, contactID)

	err := q.Bind(ctx, exec, dataPlatformQuotationsHeaderPartnerContactDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_quotations_header_partner_contact_data")
	}

	return dataPlatformQuotationsHeaderPartnerContactDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformQuotationsHeaderPartnerContactDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_header_partner_contact_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsHeaderPartnerContactDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformQuotationsHeaderPartnerContactDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsHeaderPartnerContactDatumInsertCache[key]
	dataPlatformQuotationsHeaderPartnerContactDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformQuotationsHeaderPartnerContactDatumAllColumns,
			dataPlatformQuotationsHeaderPartnerContactDatumColumnsWithDefault,
			dataPlatformQuotationsHeaderPartnerContactDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderPartnerContactDatumType, dataPlatformQuotationsHeaderPartnerContactDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderPartnerContactDatumType, dataPlatformQuotationsHeaderPartnerContactDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_quotations_header_partner_contact_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_quotations_header_partner_contact_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_quotations_header_partner_contact_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_quotations_header_partner_contact_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Quotation,
		o.PartnerFunction,
		o.ContactID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_header_partner_contact_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsHeaderPartnerContactDatumInsertCacheMut.Lock()
		dataPlatformQuotationsHeaderPartnerContactDatumInsertCache[key] = cache
		dataPlatformQuotationsHeaderPartnerContactDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformQuotationsHeaderPartnerContactDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformQuotationsHeaderPartnerContactDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformQuotationsHeaderPartnerContactDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformQuotationsHeaderPartnerContactDatumUpdateCache[key]
	dataPlatformQuotationsHeaderPartnerContactDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformQuotationsHeaderPartnerContactDatumAllColumns,
			dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_quotations_header_partner_contact_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_quotations_header_partner_contact_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderPartnerContactDatumType, dataPlatformQuotationsHeaderPartnerContactDatumMapping, append(wl, dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_quotations_header_partner_contact_data row")
	}

	if !cached {
		dataPlatformQuotationsHeaderPartnerContactDatumUpdateCacheMut.Lock()
		dataPlatformQuotationsHeaderPartnerContactDatumUpdateCache[key] = cache
		dataPlatformQuotationsHeaderPartnerContactDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformQuotationsHeaderPartnerContactDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_quotations_header_partner_contact_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformQuotationsHeaderPartnerContactDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_quotations_header_partner_contact_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformQuotationsHeaderPartnerContactDatum slice")
	}

	return nil
}

var mySQLDataPlatformQuotationsHeaderPartnerContactDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformQuotationsHeaderPartnerContactDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_header_partner_contact_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsHeaderPartnerContactDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformQuotationsHeaderPartnerContactDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformQuotationsHeaderPartnerContactDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsHeaderPartnerContactDatumUpsertCache[key]
	dataPlatformQuotationsHeaderPartnerContactDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformQuotationsHeaderPartnerContactDatumAllColumns,
			dataPlatformQuotationsHeaderPartnerContactDatumColumnsWithDefault,
			dataPlatformQuotationsHeaderPartnerContactDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformQuotationsHeaderPartnerContactDatumAllColumns,
			dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_quotations_header_partner_contact_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_quotations_header_partner_contact_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_quotations_header_partner_contact_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderPartnerContactDatumType, dataPlatformQuotationsHeaderPartnerContactDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderPartnerContactDatumType, dataPlatformQuotationsHeaderPartnerContactDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_quotations_header_partner_contact_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformQuotationsHeaderPartnerContactDatumType, dataPlatformQuotationsHeaderPartnerContactDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_quotations_header_partner_contact_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_header_partner_contact_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsHeaderPartnerContactDatumUpsertCacheMut.Lock()
		dataPlatformQuotationsHeaderPartnerContactDatumUpsertCache[key] = cache
		dataPlatformQuotationsHeaderPartnerContactDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformQuotationsHeaderPartnerContactDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformQuotationsHeaderPartnerContactDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformQuotationsHeaderPartnerContactDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_quotations_header_partner_contact_data` WHERE `Quotation`=? AND `PartnerFunction`=? AND `ContactID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_quotations_header_partner_contact_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformQuotationsHeaderPartnerContactDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformQuotationsHeaderPartnerContactDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_quotations_header_partner_contact_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformQuotationsHeaderPartnerContactDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_quotations_header_partner_contact_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformQuotationsHeaderPartnerContactDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformQuotationsHeaderPartnerContactDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformQuotationsHeaderPartnerContactDatum(ctx, exec, o.Quotation, o.PartnerFunction, o.ContactID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformQuotationsHeaderPartnerContactDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformQuotationsHeaderPartnerContactDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_quotations_header_partner_contact_data`.* FROM `data_platform_quotations_header_partner_contact_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformQuotationsHeaderPartnerContactDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformQuotationsHeaderPartnerContactDatumExists checks if the DataPlatformQuotationsHeaderPartnerContactDatum row exists.
func DataPlatformQuotationsHeaderPartnerContactDatumExists(ctx context.Context, exec boil.ContextExecutor, quotation int, partnerFunction string, contactID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_quotations_header_partner_contact_data` where `Quotation`=? AND `PartnerFunction`=? AND `ContactID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, quotation, partnerFunction, contactID)
	}
	row := exec.QueryRowContext(ctx, sql, quotation, partnerFunction, contactID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_quotations_header_partner_contact_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformQuotationsHeaderPartnerContactDatum row exists.
func (o *DataPlatformQuotationsHeaderPartnerContactDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformQuotationsHeaderPartnerContactDatumExists(ctx, exec, o.Quotation, o.PartnerFunction, o.ContactID)
}
