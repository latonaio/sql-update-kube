// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformAddressAddressDatum is an object representing the database table.
type DataPlatformAddressAddressDatum struct {
	AddressID         int         `boil:"AddressID" json:"AddressID" toml:"AddressID" yaml:"AddressID"`
	ValidityEndDate   string      `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	ValidityStartDate string      `boil:"ValidityStartDate" json:"ValidityStartDate" toml:"ValidityStartDate" yaml:"ValidityStartDate"`
	PostalCode        string      `boil:"PostalCode" json:"PostalCode" toml:"PostalCode" yaml:"PostalCode"`
	LocalRegion       string      `boil:"LocalRegion" json:"LocalRegion" toml:"LocalRegion" yaml:"LocalRegion"`
	Country           string      `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	GlobalRegion      string      `boil:"GlobalRegion" json:"GlobalRegion" toml:"GlobalRegion" yaml:"GlobalRegion"`
	TimeZone          string      `boil:"TimeZone" json:"TimeZone" toml:"TimeZone" yaml:"TimeZone"`
	District          null.String `boil:"District" json:"District,omitempty" toml:"District" yaml:"District,omitempty"`
	StreetName        string      `boil:"StreetName" json:"StreetName" toml:"StreetName" yaml:"StreetName"`
	CityName          string      `boil:"CityName" json:"CityName" toml:"CityName" yaml:"CityName"`
	Building          null.String `boil:"Building" json:"Building,omitempty" toml:"Building" yaml:"Building,omitempty"`
	Floor             null.Int    `boil:"Floor" json:"Floor,omitempty" toml:"Floor" yaml:"Floor,omitempty"`
	Room              null.Int    `boil:"Room" json:"Room,omitempty" toml:"Room" yaml:"Room,omitempty"`

	R *dataPlatformAddressAddressDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformAddressAddressDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformAddressAddressDatumColumns = struct {
	AddressID         string
	ValidityEndDate   string
	ValidityStartDate string
	PostalCode        string
	LocalRegion       string
	Country           string
	GlobalRegion      string
	TimeZone          string
	District          string
	StreetName        string
	CityName          string
	Building          string
	Floor             string
	Room              string
}{
	AddressID:         "AddressID",
	ValidityEndDate:   "ValidityEndDate",
	ValidityStartDate: "ValidityStartDate",
	PostalCode:        "PostalCode",
	LocalRegion:       "LocalRegion",
	Country:           "Country",
	GlobalRegion:      "GlobalRegion",
	TimeZone:          "TimeZone",
	District:          "District",
	StreetName:        "StreetName",
	CityName:          "CityName",
	Building:          "Building",
	Floor:             "Floor",
	Room:              "Room",
}

var DataPlatformAddressAddressDatumTableColumns = struct {
	AddressID         string
	ValidityEndDate   string
	ValidityStartDate string
	PostalCode        string
	LocalRegion       string
	Country           string
	GlobalRegion      string
	TimeZone          string
	District          string
	StreetName        string
	CityName          string
	Building          string
	Floor             string
	Room              string
}{
	AddressID:         "data_platform_address_address_data.AddressID",
	ValidityEndDate:   "data_platform_address_address_data.ValidityEndDate",
	ValidityStartDate: "data_platform_address_address_data.ValidityStartDate",
	PostalCode:        "data_platform_address_address_data.PostalCode",
	LocalRegion:       "data_platform_address_address_data.LocalRegion",
	Country:           "data_platform_address_address_data.Country",
	GlobalRegion:      "data_platform_address_address_data.GlobalRegion",
	TimeZone:          "data_platform_address_address_data.TimeZone",
	District:          "data_platform_address_address_data.District",
	StreetName:        "data_platform_address_address_data.StreetName",
	CityName:          "data_platform_address_address_data.CityName",
	Building:          "data_platform_address_address_data.Building",
	Floor:             "data_platform_address_address_data.Floor",
	Room:              "data_platform_address_address_data.Room",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DataPlatformAddressAddressDatumWhere = struct {
	AddressID         whereHelperint
	ValidityEndDate   whereHelperstring
	ValidityStartDate whereHelperstring
	PostalCode        whereHelperstring
	LocalRegion       whereHelperstring
	Country           whereHelperstring
	GlobalRegion      whereHelperstring
	TimeZone          whereHelperstring
	District          whereHelpernull_String
	StreetName        whereHelperstring
	CityName          whereHelperstring
	Building          whereHelpernull_String
	Floor             whereHelpernull_Int
	Room              whereHelpernull_Int
}{
	AddressID:         whereHelperint{field: "`data_platform_address_address_data`.`AddressID`"},
	ValidityEndDate:   whereHelperstring{field: "`data_platform_address_address_data`.`ValidityEndDate`"},
	ValidityStartDate: whereHelperstring{field: "`data_platform_address_address_data`.`ValidityStartDate`"},
	PostalCode:        whereHelperstring{field: "`data_platform_address_address_data`.`PostalCode`"},
	LocalRegion:       whereHelperstring{field: "`data_platform_address_address_data`.`LocalRegion`"},
	Country:           whereHelperstring{field: "`data_platform_address_address_data`.`Country`"},
	GlobalRegion:      whereHelperstring{field: "`data_platform_address_address_data`.`GlobalRegion`"},
	TimeZone:          whereHelperstring{field: "`data_platform_address_address_data`.`TimeZone`"},
	District:          whereHelpernull_String{field: "`data_platform_address_address_data`.`District`"},
	StreetName:        whereHelperstring{field: "`data_platform_address_address_data`.`StreetName`"},
	CityName:          whereHelperstring{field: "`data_platform_address_address_data`.`CityName`"},
	Building:          whereHelpernull_String{field: "`data_platform_address_address_data`.`Building`"},
	Floor:             whereHelpernull_Int{field: "`data_platform_address_address_data`.`Floor`"},
	Room:              whereHelpernull_Int{field: "`data_platform_address_address_data`.`Room`"},
}

// DataPlatformAddressAddressDatumRels is where relationship names are stored.
var DataPlatformAddressAddressDatumRels = struct {
	AddressIDDataPlatformBusinessPartnerGeneralData  string
	AddressIDDataPlatformDeliveryDocumentAddressData string
	AddressIDDataPlatformDeliveryDocumentPartnerData string
	AddressIDDataPlatformEquipmentMasterAddressData  string
	AddressIDDataPlatformInvoiceDocumentAddressData  string
	AddressIDDataPlatformInvoiceDocumentPartnerData  string
	AddressIDDataPlatformOrdersAddressData           string
	AddressIDDataPlatformOrdersPartnerData           string
	AddressIDDataPlatformPlantGeneralData            string
	AddressIDDataPlatformProductionOrderAddressData  string
	AddressIDDataPlatformProductionOrderPartnerData  string
	AddressIDDataPlatformQuotationsAddressData       string
	AddressIDDataPlatformQuotationsPartnerData       string
}{
	AddressIDDataPlatformBusinessPartnerGeneralData:  "AddressIDDataPlatformBusinessPartnerGeneralData",
	AddressIDDataPlatformDeliveryDocumentAddressData: "AddressIDDataPlatformDeliveryDocumentAddressData",
	AddressIDDataPlatformDeliveryDocumentPartnerData: "AddressIDDataPlatformDeliveryDocumentPartnerData",
	AddressIDDataPlatformEquipmentMasterAddressData:  "AddressIDDataPlatformEquipmentMasterAddressData",
	AddressIDDataPlatformInvoiceDocumentAddressData:  "AddressIDDataPlatformInvoiceDocumentAddressData",
	AddressIDDataPlatformInvoiceDocumentPartnerData:  "AddressIDDataPlatformInvoiceDocumentPartnerData",
	AddressIDDataPlatformOrdersAddressData:           "AddressIDDataPlatformOrdersAddressData",
	AddressIDDataPlatformOrdersPartnerData:           "AddressIDDataPlatformOrdersPartnerData",
	AddressIDDataPlatformPlantGeneralData:            "AddressIDDataPlatformPlantGeneralData",
	AddressIDDataPlatformProductionOrderAddressData:  "AddressIDDataPlatformProductionOrderAddressData",
	AddressIDDataPlatformProductionOrderPartnerData:  "AddressIDDataPlatformProductionOrderPartnerData",
	AddressIDDataPlatformQuotationsAddressData:       "AddressIDDataPlatformQuotationsAddressData",
	AddressIDDataPlatformQuotationsPartnerData:       "AddressIDDataPlatformQuotationsPartnerData",
}

// dataPlatformAddressAddressDatumR is where relationships are stored.
type dataPlatformAddressAddressDatumR struct {
	AddressIDDataPlatformBusinessPartnerGeneralData  DataPlatformBusinessPartnerGeneralDatumSlice  `boil:"AddressIDDataPlatformBusinessPartnerGeneralData" json:"AddressIDDataPlatformBusinessPartnerGeneralData" toml:"AddressIDDataPlatformBusinessPartnerGeneralData" yaml:"AddressIDDataPlatformBusinessPartnerGeneralData"`
	AddressIDDataPlatformDeliveryDocumentAddressData DataPlatformDeliveryDocumentAddressDatumSlice `boil:"AddressIDDataPlatformDeliveryDocumentAddressData" json:"AddressIDDataPlatformDeliveryDocumentAddressData" toml:"AddressIDDataPlatformDeliveryDocumentAddressData" yaml:"AddressIDDataPlatformDeliveryDocumentAddressData"`
	AddressIDDataPlatformDeliveryDocumentPartnerData DataPlatformDeliveryDocumentPartnerDatumSlice `boil:"AddressIDDataPlatformDeliveryDocumentPartnerData" json:"AddressIDDataPlatformDeliveryDocumentPartnerData" toml:"AddressIDDataPlatformDeliveryDocumentPartnerData" yaml:"AddressIDDataPlatformDeliveryDocumentPartnerData"`
	AddressIDDataPlatformEquipmentMasterAddressData  DataPlatformEquipmentMasterAddressDatumSlice  `boil:"AddressIDDataPlatformEquipmentMasterAddressData" json:"AddressIDDataPlatformEquipmentMasterAddressData" toml:"AddressIDDataPlatformEquipmentMasterAddressData" yaml:"AddressIDDataPlatformEquipmentMasterAddressData"`
	AddressIDDataPlatformInvoiceDocumentAddressData  DataPlatformInvoiceDocumentAddressDatumSlice  `boil:"AddressIDDataPlatformInvoiceDocumentAddressData" json:"AddressIDDataPlatformInvoiceDocumentAddressData" toml:"AddressIDDataPlatformInvoiceDocumentAddressData" yaml:"AddressIDDataPlatformInvoiceDocumentAddressData"`
	AddressIDDataPlatformInvoiceDocumentPartnerData  DataPlatformInvoiceDocumentPartnerDatumSlice  `boil:"AddressIDDataPlatformInvoiceDocumentPartnerData" json:"AddressIDDataPlatformInvoiceDocumentPartnerData" toml:"AddressIDDataPlatformInvoiceDocumentPartnerData" yaml:"AddressIDDataPlatformInvoiceDocumentPartnerData"`
	AddressIDDataPlatformOrdersAddressData           DataPlatformOrdersAddressDatumSlice           `boil:"AddressIDDataPlatformOrdersAddressData" json:"AddressIDDataPlatformOrdersAddressData" toml:"AddressIDDataPlatformOrdersAddressData" yaml:"AddressIDDataPlatformOrdersAddressData"`
	AddressIDDataPlatformOrdersPartnerData           DataPlatformOrdersPartnerDatumSlice           `boil:"AddressIDDataPlatformOrdersPartnerData" json:"AddressIDDataPlatformOrdersPartnerData" toml:"AddressIDDataPlatformOrdersPartnerData" yaml:"AddressIDDataPlatformOrdersPartnerData"`
	AddressIDDataPlatformPlantGeneralData            DataPlatformPlantGeneralDatumSlice            `boil:"AddressIDDataPlatformPlantGeneralData" json:"AddressIDDataPlatformPlantGeneralData" toml:"AddressIDDataPlatformPlantGeneralData" yaml:"AddressIDDataPlatformPlantGeneralData"`
	AddressIDDataPlatformProductionOrderAddressData  DataPlatformProductionOrderAddressDatumSlice  `boil:"AddressIDDataPlatformProductionOrderAddressData" json:"AddressIDDataPlatformProductionOrderAddressData" toml:"AddressIDDataPlatformProductionOrderAddressData" yaml:"AddressIDDataPlatformProductionOrderAddressData"`
	AddressIDDataPlatformProductionOrderPartnerData  DataPlatformProductionOrderPartnerDatumSlice  `boil:"AddressIDDataPlatformProductionOrderPartnerData" json:"AddressIDDataPlatformProductionOrderPartnerData" toml:"AddressIDDataPlatformProductionOrderPartnerData" yaml:"AddressIDDataPlatformProductionOrderPartnerData"`
	AddressIDDataPlatformQuotationsAddressData       DataPlatformQuotationsAddressDatumSlice       `boil:"AddressIDDataPlatformQuotationsAddressData" json:"AddressIDDataPlatformQuotationsAddressData" toml:"AddressIDDataPlatformQuotationsAddressData" yaml:"AddressIDDataPlatformQuotationsAddressData"`
	AddressIDDataPlatformQuotationsPartnerData       DataPlatformQuotationsPartnerDatumSlice       `boil:"AddressIDDataPlatformQuotationsPartnerData" json:"AddressIDDataPlatformQuotationsPartnerData" toml:"AddressIDDataPlatformQuotationsPartnerData" yaml:"AddressIDDataPlatformQuotationsPartnerData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformAddressAddressDatumR) NewStruct() *dataPlatformAddressAddressDatumR {
	return &dataPlatformAddressAddressDatumR{}
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformBusinessPartnerGeneralData() DataPlatformBusinessPartnerGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformBusinessPartnerGeneralData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformDeliveryDocumentAddressData() DataPlatformDeliveryDocumentAddressDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformDeliveryDocumentAddressData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformDeliveryDocumentPartnerData() DataPlatformDeliveryDocumentPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformDeliveryDocumentPartnerData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformEquipmentMasterAddressData() DataPlatformEquipmentMasterAddressDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformEquipmentMasterAddressData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformInvoiceDocumentAddressData() DataPlatformInvoiceDocumentAddressDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformInvoiceDocumentAddressData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformInvoiceDocumentPartnerData() DataPlatformInvoiceDocumentPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformInvoiceDocumentPartnerData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformOrdersAddressData() DataPlatformOrdersAddressDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformOrdersAddressData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformOrdersPartnerData() DataPlatformOrdersPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformOrdersPartnerData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformPlantGeneralData() DataPlatformPlantGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformPlantGeneralData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformProductionOrderAddressData() DataPlatformProductionOrderAddressDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformProductionOrderAddressData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformProductionOrderPartnerData() DataPlatformProductionOrderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformProductionOrderPartnerData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformQuotationsAddressData() DataPlatformQuotationsAddressDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformQuotationsAddressData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformQuotationsPartnerData() DataPlatformQuotationsPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformQuotationsPartnerData
}

// dataPlatformAddressAddressDatumL is where Load methods for each relationship are stored.
type dataPlatformAddressAddressDatumL struct{}

var (
	dataPlatformAddressAddressDatumAllColumns            = []string{"AddressID", "ValidityEndDate", "ValidityStartDate", "PostalCode", "LocalRegion", "Country", "GlobalRegion", "TimeZone", "District", "StreetName", "CityName", "Building", "Floor", "Room"}
	dataPlatformAddressAddressDatumColumnsWithoutDefault = []string{"AddressID", "ValidityEndDate", "ValidityStartDate", "PostalCode", "LocalRegion", "Country", "GlobalRegion", "TimeZone", "District", "StreetName", "CityName", "Building", "Floor", "Room"}
	dataPlatformAddressAddressDatumColumnsWithDefault    = []string{}
	dataPlatformAddressAddressDatumPrimaryKeyColumns     = []string{"AddressID", "ValidityEndDate"}
	dataPlatformAddressAddressDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformAddressAddressDatumSlice is an alias for a slice of pointers to DataPlatformAddressAddressDatum.
	// This should almost always be used instead of []DataPlatformAddressAddressDatum.
	DataPlatformAddressAddressDatumSlice []*DataPlatformAddressAddressDatum

	dataPlatformAddressAddressDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformAddressAddressDatumType                 = reflect.TypeOf(&DataPlatformAddressAddressDatum{})
	dataPlatformAddressAddressDatumMapping              = queries.MakeStructMapping(dataPlatformAddressAddressDatumType)
	dataPlatformAddressAddressDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, dataPlatformAddressAddressDatumPrimaryKeyColumns)
	dataPlatformAddressAddressDatumInsertCacheMut       sync.RWMutex
	dataPlatformAddressAddressDatumInsertCache          = make(map[string]insertCache)
	dataPlatformAddressAddressDatumUpdateCacheMut       sync.RWMutex
	dataPlatformAddressAddressDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformAddressAddressDatumUpsertCacheMut       sync.RWMutex
	dataPlatformAddressAddressDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformAddressAddressDatum record from the query.
func (q dataPlatformAddressAddressDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformAddressAddressDatum, error) {
	o := &DataPlatformAddressAddressDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_address_address_data")
	}

	return o, nil
}

// All returns all DataPlatformAddressAddressDatum records from the query.
func (q dataPlatformAddressAddressDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformAddressAddressDatumSlice, error) {
	var o []*DataPlatformAddressAddressDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformAddressAddressDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformAddressAddressDatum records in the query.
func (q dataPlatformAddressAddressDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_address_address_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformAddressAddressDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_address_address_data exists")
	}

	return count > 0, nil
}

// AddressIDDataPlatformBusinessPartnerGeneralData retrieves all the data_platform_business_partner_general_datum's DataPlatformBusinessPartnerGeneralData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformBusinessPartnerGeneralData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_general_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// AddressIDDataPlatformDeliveryDocumentAddressData retrieves all the data_platform_delivery_document_address_datum's DataPlatformDeliveryDocumentAddressData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformDeliveryDocumentAddressData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentAddressDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_address_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformDeliveryDocumentAddressData(queryMods...)
}

// AddressIDDataPlatformDeliveryDocumentPartnerData retrieves all the data_platform_delivery_document_partner_datum's DataPlatformDeliveryDocumentPartnerData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformDeliveryDocumentPartnerData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_partner_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformDeliveryDocumentPartnerData(queryMods...)
}

// AddressIDDataPlatformEquipmentMasterAddressData retrieves all the data_platform_equipment_master_address_datum's DataPlatformEquipmentMasterAddressData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformEquipmentMasterAddressData(mods ...qm.QueryMod) dataPlatformEquipmentMasterAddressDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_equipment_master_address_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformEquipmentMasterAddressData(queryMods...)
}

// AddressIDDataPlatformInvoiceDocumentAddressData retrieves all the data_platform_invoice_document_address_datum's DataPlatformInvoiceDocumentAddressData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformInvoiceDocumentAddressData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentAddressDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_address_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformInvoiceDocumentAddressData(queryMods...)
}

// AddressIDDataPlatformInvoiceDocumentPartnerData retrieves all the data_platform_invoice_document_partner_datum's DataPlatformInvoiceDocumentPartnerData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformInvoiceDocumentPartnerData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_partner_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformInvoiceDocumentPartnerData(queryMods...)
}

// AddressIDDataPlatformOrdersAddressData retrieves all the data_platform_orders_address_datum's DataPlatformOrdersAddressData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformOrdersAddressData(mods ...qm.QueryMod) dataPlatformOrdersAddressDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_address_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformOrdersAddressData(queryMods...)
}

// AddressIDDataPlatformOrdersPartnerData retrieves all the data_platform_orders_partner_datum's DataPlatformOrdersPartnerData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformOrdersPartnerData(mods ...qm.QueryMod) dataPlatformOrdersPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_partner_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformOrdersPartnerData(queryMods...)
}

// AddressIDDataPlatformPlantGeneralData retrieves all the data_platform_plant_general_datum's DataPlatformPlantGeneralData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformPlantGeneralData(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_plant_general_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformPlantGeneralData(queryMods...)
}

// AddressIDDataPlatformProductionOrderAddressData retrieves all the data_platform_production_order_address_datum's DataPlatformProductionOrderAddressData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformProductionOrderAddressData(mods ...qm.QueryMod) dataPlatformProductionOrderAddressDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_address_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformProductionOrderAddressData(queryMods...)
}

// AddressIDDataPlatformProductionOrderPartnerData retrieves all the data_platform_production_order_partner_datum's DataPlatformProductionOrderPartnerData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformProductionOrderPartnerData(mods ...qm.QueryMod) dataPlatformProductionOrderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_partner_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformProductionOrderPartnerData(queryMods...)
}

// AddressIDDataPlatformQuotationsAddressData retrieves all the data_platform_quotations_address_datum's DataPlatformQuotationsAddressData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformQuotationsAddressData(mods ...qm.QueryMod) dataPlatformQuotationsAddressDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_address_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformQuotationsAddressData(queryMods...)
}

// AddressIDDataPlatformQuotationsPartnerData retrieves all the data_platform_quotations_partner_datum's DataPlatformQuotationsPartnerData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformQuotationsPartnerData(mods ...qm.QueryMod) dataPlatformQuotationsPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_partner_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformQuotationsPartnerData(queryMods...)
}

// LoadAddressIDDataPlatformBusinessPartnerGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformBusinessPartnerGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_general_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if singular {
		object.R.AddressIDDataPlatformBusinessPartnerGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformBusinessPartnerGeneralData = append(local.R.AddressIDDataPlatformBusinessPartnerGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformDeliveryDocumentAddressData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformDeliveryDocumentAddressData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if a == obj.AddressID {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_address_data`),
		qm.WhereIn(`data_platform_delivery_document_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_address_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_address_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_address_data")
	}

	if singular {
		object.R.AddressIDDataPlatformDeliveryDocumentAddressData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AddressID == foreign.AddressID {
				local.R.AddressIDDataPlatformDeliveryDocumentAddressData = append(local.R.AddressIDDataPlatformDeliveryDocumentAddressData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformDeliveryDocumentPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformDeliveryDocumentPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_partner_data`),
		qm.WhereIn(`data_platform_delivery_document_partner_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_partner_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_partner_data")
	}

	if singular {
		object.R.AddressIDDataPlatformDeliveryDocumentPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformDeliveryDocumentPartnerData = append(local.R.AddressIDDataPlatformDeliveryDocumentPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformEquipmentMasterAddressData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformEquipmentMasterAddressData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if a == obj.AddressID {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_address_data`),
		qm.WhereIn(`data_platform_equipment_master_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_equipment_master_address_data")
	}

	var resultSlice []*DataPlatformEquipmentMasterAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_equipment_master_address_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_equipment_master_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_address_data")
	}

	if singular {
		object.R.AddressIDDataPlatformEquipmentMasterAddressData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AddressID == foreign.AddressID {
				local.R.AddressIDDataPlatformEquipmentMasterAddressData = append(local.R.AddressIDDataPlatformEquipmentMasterAddressData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformInvoiceDocumentAddressData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformInvoiceDocumentAddressData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if a == obj.AddressID {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_address_data`),
		qm.WhereIn(`data_platform_invoice_document_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_address_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_address_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_address_data")
	}

	if singular {
		object.R.AddressIDDataPlatformInvoiceDocumentAddressData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AddressID == foreign.AddressID {
				local.R.AddressIDDataPlatformInvoiceDocumentAddressData = append(local.R.AddressIDDataPlatformInvoiceDocumentAddressData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformInvoiceDocumentPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformInvoiceDocumentPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_partner_data`),
		qm.WhereIn(`data_platform_invoice_document_partner_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_partner_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_partner_data")
	}

	if singular {
		object.R.AddressIDDataPlatformInvoiceDocumentPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformInvoiceDocumentPartnerData = append(local.R.AddressIDDataPlatformInvoiceDocumentPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformOrdersAddressData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformOrdersAddressData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if a == obj.AddressID {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_address_data`),
		qm.WhereIn(`data_platform_orders_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_address_data")
	}

	var resultSlice []*DataPlatformOrdersAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_address_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_address_data")
	}

	if singular {
		object.R.AddressIDDataPlatformOrdersAddressData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AddressID == foreign.AddressID {
				local.R.AddressIDDataPlatformOrdersAddressData = append(local.R.AddressIDDataPlatformOrdersAddressData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformOrdersPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformOrdersPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_partner_data`),
		qm.WhereIn(`data_platform_orders_partner_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_partner_data")
	}

	var resultSlice []*DataPlatformOrdersPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_partner_data")
	}

	if singular {
		object.R.AddressIDDataPlatformOrdersPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformOrdersPartnerData = append(local.R.AddressIDDataPlatformOrdersPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformPlantGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformPlantGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_plant_general_data")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_plant_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if singular {
		object.R.AddressIDDataPlatformPlantGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformPlantGeneralData = append(local.R.AddressIDDataPlatformPlantGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformProductionOrderAddressData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformProductionOrderAddressData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if a == obj.AddressID {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_address_data`),
		qm.WhereIn(`data_platform_production_order_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_address_data")
	}

	var resultSlice []*DataPlatformProductionOrderAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_address_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_address_data")
	}

	if singular {
		object.R.AddressIDDataPlatformProductionOrderAddressData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AddressID == foreign.AddressID {
				local.R.AddressIDDataPlatformProductionOrderAddressData = append(local.R.AddressIDDataPlatformProductionOrderAddressData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformProductionOrderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformProductionOrderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_partner_data`),
		qm.WhereIn(`data_platform_production_order_partner_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_partner_data")
	}

	var resultSlice []*DataPlatformProductionOrderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_partner_data")
	}

	if singular {
		object.R.AddressIDDataPlatformProductionOrderPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformProductionOrderPartnerData = append(local.R.AddressIDDataPlatformProductionOrderPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformQuotationsAddressData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformQuotationsAddressData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if a == obj.AddressID {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_address_data`),
		qm.WhereIn(`data_platform_quotations_address_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_address_data")
	}

	var resultSlice []*DataPlatformQuotationsAddressDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_address_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_address_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_address_data")
	}

	if singular {
		object.R.AddressIDDataPlatformQuotationsAddressData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AddressID == foreign.AddressID {
				local.R.AddressIDDataPlatformQuotationsAddressData = append(local.R.AddressIDDataPlatformQuotationsAddressData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformQuotationsPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformQuotationsPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_partner_data`),
		qm.WhereIn(`data_platform_quotations_partner_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_partner_data")
	}

	var resultSlice []*DataPlatformQuotationsPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_partner_data")
	}

	if singular {
		object.R.AddressIDDataPlatformQuotationsPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformQuotationsPartnerData = append(local.R.AddressIDDataPlatformQuotationsPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// AddAddressIDDataPlatformBusinessPartnerGeneralData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformBusinessPartnerGeneralData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformBusinessPartnerGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.AddressID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.AddressID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformBusinessPartnerGeneralData: related,
		}
	} else {
		o.R.AddressIDDataPlatformBusinessPartnerGeneralData = append(o.R.AddressIDDataPlatformBusinessPartnerGeneralData, related...)
	}

	return nil
}

// SetAddressIDDataPlatformBusinessPartnerGeneralData removes all previously related items of the
// data_platform_address_address_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformBusinessPartnerGeneralData accordingly.
// Replaces o.R.AddressIDDataPlatformBusinessPartnerGeneralData with related.
func (o *DataPlatformAddressAddressDatum) SetAddressIDDataPlatformBusinessPartnerGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerGeneralDatum) error {
	query := "update `data_platform_business_partner_general_data` set `AddressID` = null where `AddressID` = ?"
	values := []interface{}{o.AddressID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformBusinessPartnerGeneralData = nil
	}

	return o.AddAddressIDDataPlatformBusinessPartnerGeneralData(ctx, exec, insert, related...)
}

// RemoveAddressIDDataPlatformBusinessPartnerGeneralData relationships from objects passed in.
// Removes related items from R.AddressIDDataPlatformBusinessPartnerGeneralData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformAddressAddressDatum) RemoveAddressIDDataPlatformBusinessPartnerGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformBusinessPartnerGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressIDDataPlatformBusinessPartnerGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressIDDataPlatformBusinessPartnerGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.AddressIDDataPlatformBusinessPartnerGeneralData[i] = o.R.AddressIDDataPlatformBusinessPartnerGeneralData[ln-1]
			}
			o.R.AddressIDDataPlatformBusinessPartnerGeneralData = o.R.AddressIDDataPlatformBusinessPartnerGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddAddressIDDataPlatformDeliveryDocumentAddressData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformDeliveryDocumentAddressData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformDeliveryDocumentAddressData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentAddressDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AddressID = o.AddressID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_address_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentAddressDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.DeliveryDocument, rel.AddressID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AddressID = o.AddressID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformDeliveryDocumentAddressData: related,
		}
	} else {
		o.R.AddressIDDataPlatformDeliveryDocumentAddressData = append(o.R.AddressIDDataPlatformDeliveryDocumentAddressData, related...)
	}

	return nil
}

// AddAddressIDDataPlatformDeliveryDocumentPartnerData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformDeliveryDocumentPartnerData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformDeliveryDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.AddressID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.DeliveryDocument, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.AddressID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformDeliveryDocumentPartnerData: related,
		}
	} else {
		o.R.AddressIDDataPlatformDeliveryDocumentPartnerData = append(o.R.AddressIDDataPlatformDeliveryDocumentPartnerData, related...)
	}

	return nil
}

// SetAddressIDDataPlatformDeliveryDocumentPartnerData removes all previously related items of the
// data_platform_address_address_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformDeliveryDocumentPartnerData accordingly.
// Replaces o.R.AddressIDDataPlatformDeliveryDocumentPartnerData with related.
func (o *DataPlatformAddressAddressDatum) SetAddressIDDataPlatformDeliveryDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentPartnerDatum) error {
	query := "update `data_platform_delivery_document_partner_data` set `AddressID` = null where `AddressID` = ?"
	values := []interface{}{o.AddressID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformDeliveryDocumentPartnerData = nil
	}

	return o.AddAddressIDDataPlatformDeliveryDocumentPartnerData(ctx, exec, insert, related...)
}

// RemoveAddressIDDataPlatformDeliveryDocumentPartnerData relationships from objects passed in.
// Removes related items from R.AddressIDDataPlatformDeliveryDocumentPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformAddressAddressDatum) RemoveAddressIDDataPlatformDeliveryDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressIDDataPlatformDeliveryDocumentPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressIDDataPlatformDeliveryDocumentPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.AddressIDDataPlatformDeliveryDocumentPartnerData[i] = o.R.AddressIDDataPlatformDeliveryDocumentPartnerData[ln-1]
			}
			o.R.AddressIDDataPlatformDeliveryDocumentPartnerData = o.R.AddressIDDataPlatformDeliveryDocumentPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddAddressIDDataPlatformEquipmentMasterAddressData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformEquipmentMasterAddressData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformEquipmentMasterAddressData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformEquipmentMasterAddressDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AddressID = o.AddressID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_equipment_master_address_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterAddressDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.Equipment, rel.AddressID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AddressID = o.AddressID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformEquipmentMasterAddressData: related,
		}
	} else {
		o.R.AddressIDDataPlatformEquipmentMasterAddressData = append(o.R.AddressIDDataPlatformEquipmentMasterAddressData, related...)
	}

	return nil
}

// AddAddressIDDataPlatformInvoiceDocumentAddressData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformInvoiceDocumentAddressData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformInvoiceDocumentAddressData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentAddressDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AddressID = o.AddressID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_address_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentAddressDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.InvoiceDocument, rel.AddressID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AddressID = o.AddressID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformInvoiceDocumentAddressData: related,
		}
	} else {
		o.R.AddressIDDataPlatformInvoiceDocumentAddressData = append(o.R.AddressIDDataPlatformInvoiceDocumentAddressData, related...)
	}

	return nil
}

// AddAddressIDDataPlatformInvoiceDocumentPartnerData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformInvoiceDocumentPartnerData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformInvoiceDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.AddressID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.InvoiceDocument, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.AddressID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformInvoiceDocumentPartnerData: related,
		}
	} else {
		o.R.AddressIDDataPlatformInvoiceDocumentPartnerData = append(o.R.AddressIDDataPlatformInvoiceDocumentPartnerData, related...)
	}

	return nil
}

// SetAddressIDDataPlatformInvoiceDocumentPartnerData removes all previously related items of the
// data_platform_address_address_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformInvoiceDocumentPartnerData accordingly.
// Replaces o.R.AddressIDDataPlatformInvoiceDocumentPartnerData with related.
func (o *DataPlatformAddressAddressDatum) SetAddressIDDataPlatformInvoiceDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentPartnerDatum) error {
	query := "update `data_platform_invoice_document_partner_data` set `AddressID` = null where `AddressID` = ?"
	values := []interface{}{o.AddressID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformInvoiceDocumentPartnerData = nil
	}

	return o.AddAddressIDDataPlatformInvoiceDocumentPartnerData(ctx, exec, insert, related...)
}

// RemoveAddressIDDataPlatformInvoiceDocumentPartnerData relationships from objects passed in.
// Removes related items from R.AddressIDDataPlatformInvoiceDocumentPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformAddressAddressDatum) RemoveAddressIDDataPlatformInvoiceDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInvoiceDocumentPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressIDDataPlatformInvoiceDocumentPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressIDDataPlatformInvoiceDocumentPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.AddressIDDataPlatformInvoiceDocumentPartnerData[i] = o.R.AddressIDDataPlatformInvoiceDocumentPartnerData[ln-1]
			}
			o.R.AddressIDDataPlatformInvoiceDocumentPartnerData = o.R.AddressIDDataPlatformInvoiceDocumentPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddAddressIDDataPlatformOrdersAddressData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformOrdersAddressData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformOrdersAddressData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersAddressDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AddressID = o.AddressID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_address_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersAddressDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.OrderID, rel.AddressID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AddressID = o.AddressID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformOrdersAddressData: related,
		}
	} else {
		o.R.AddressIDDataPlatformOrdersAddressData = append(o.R.AddressIDDataPlatformOrdersAddressData, related...)
	}

	return nil
}

// AddAddressIDDataPlatformOrdersPartnerData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformOrdersPartnerData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformOrdersPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.AddressID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.OrderID, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.AddressID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformOrdersPartnerData: related,
		}
	} else {
		o.R.AddressIDDataPlatformOrdersPartnerData = append(o.R.AddressIDDataPlatformOrdersPartnerData, related...)
	}

	return nil
}

// SetAddressIDDataPlatformOrdersPartnerData removes all previously related items of the
// data_platform_address_address_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformOrdersPartnerData accordingly.
// Replaces o.R.AddressIDDataPlatformOrdersPartnerData with related.
func (o *DataPlatformAddressAddressDatum) SetAddressIDDataPlatformOrdersPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersPartnerDatum) error {
	query := "update `data_platform_orders_partner_data` set `AddressID` = null where `AddressID` = ?"
	values := []interface{}{o.AddressID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformOrdersPartnerData = nil
	}

	return o.AddAddressIDDataPlatformOrdersPartnerData(ctx, exec, insert, related...)
}

// RemoveAddressIDDataPlatformOrdersPartnerData relationships from objects passed in.
// Removes related items from R.AddressIDDataPlatformOrdersPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformAddressAddressDatum) RemoveAddressIDDataPlatformOrdersPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressIDDataPlatformOrdersPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressIDDataPlatformOrdersPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.AddressIDDataPlatformOrdersPartnerData[i] = o.R.AddressIDDataPlatformOrdersPartnerData[ln-1]
			}
			o.R.AddressIDDataPlatformOrdersPartnerData = o.R.AddressIDDataPlatformOrdersPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddAddressIDDataPlatformPlantGeneralData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformPlantGeneralData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlantGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.AddressID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.AddressID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformPlantGeneralData: related,
		}
	} else {
		o.R.AddressIDDataPlatformPlantGeneralData = append(o.R.AddressIDDataPlatformPlantGeneralData, related...)
	}

	return nil
}

// SetAddressIDDataPlatformPlantGeneralData removes all previously related items of the
// data_platform_address_address_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformPlantGeneralData accordingly.
// Replaces o.R.AddressIDDataPlatformPlantGeneralData with related.
func (o *DataPlatformAddressAddressDatum) SetAddressIDDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlantGeneralDatum) error {
	query := "update `data_platform_plant_general_data` set `AddressID` = null where `AddressID` = ?"
	values := []interface{}{o.AddressID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformPlantGeneralData = nil
	}

	return o.AddAddressIDDataPlatformPlantGeneralData(ctx, exec, insert, related...)
}

// RemoveAddressIDDataPlatformPlantGeneralData relationships from objects passed in.
// Removes related items from R.AddressIDDataPlatformPlantGeneralData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformAddressAddressDatum) RemoveAddressIDDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlantGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressIDDataPlatformPlantGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressIDDataPlatformPlantGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.AddressIDDataPlatformPlantGeneralData[i] = o.R.AddressIDDataPlatformPlantGeneralData[ln-1]
			}
			o.R.AddressIDDataPlatformPlantGeneralData = o.R.AddressIDDataPlatformPlantGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddAddressIDDataPlatformProductionOrderAddressData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformProductionOrderAddressData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformProductionOrderAddressData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderAddressDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AddressID = o.AddressID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_address_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderAddressDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.ProductionOrder, rel.AddressID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AddressID = o.AddressID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformProductionOrderAddressData: related,
		}
	} else {
		o.R.AddressIDDataPlatformProductionOrderAddressData = append(o.R.AddressIDDataPlatformProductionOrderAddressData, related...)
	}

	return nil
}

// AddAddressIDDataPlatformProductionOrderPartnerData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformProductionOrderPartnerData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformProductionOrderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.AddressID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.ProductionOrder, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.AddressID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformProductionOrderPartnerData: related,
		}
	} else {
		o.R.AddressIDDataPlatformProductionOrderPartnerData = append(o.R.AddressIDDataPlatformProductionOrderPartnerData, related...)
	}

	return nil
}

// SetAddressIDDataPlatformProductionOrderPartnerData removes all previously related items of the
// data_platform_address_address_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformProductionOrderPartnerData accordingly.
// Replaces o.R.AddressIDDataPlatformProductionOrderPartnerData with related.
func (o *DataPlatformAddressAddressDatum) SetAddressIDDataPlatformProductionOrderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderPartnerDatum) error {
	query := "update `data_platform_production_order_partner_data` set `AddressID` = null where `AddressID` = ?"
	values := []interface{}{o.AddressID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformProductionOrderPartnerData = nil
	}

	return o.AddAddressIDDataPlatformProductionOrderPartnerData(ctx, exec, insert, related...)
}

// RemoveAddressIDDataPlatformProductionOrderPartnerData relationships from objects passed in.
// Removes related items from R.AddressIDDataPlatformProductionOrderPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformAddressAddressDatum) RemoveAddressIDDataPlatformProductionOrderPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressIDDataPlatformProductionOrderPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressIDDataPlatformProductionOrderPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.AddressIDDataPlatformProductionOrderPartnerData[i] = o.R.AddressIDDataPlatformProductionOrderPartnerData[ln-1]
			}
			o.R.AddressIDDataPlatformProductionOrderPartnerData = o.R.AddressIDDataPlatformProductionOrderPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddAddressIDDataPlatformQuotationsAddressData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformQuotationsAddressData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformQuotationsAddressData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsAddressDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AddressID = o.AddressID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_address_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsAddressDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.Quotation, rel.AddressID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AddressID = o.AddressID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformQuotationsAddressData: related,
		}
	} else {
		o.R.AddressIDDataPlatformQuotationsAddressData = append(o.R.AddressIDDataPlatformQuotationsAddressData, related...)
	}

	return nil
}

// AddAddressIDDataPlatformQuotationsPartnerData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformQuotationsPartnerData.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformQuotationsPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.AddressID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.Quotation, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.AddressID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformQuotationsPartnerData: related,
		}
	} else {
		o.R.AddressIDDataPlatformQuotationsPartnerData = append(o.R.AddressIDDataPlatformQuotationsPartnerData, related...)
	}

	return nil
}

// SetAddressIDDataPlatformQuotationsPartnerData removes all previously related items of the
// data_platform_address_address_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformQuotationsPartnerData accordingly.
// Replaces o.R.AddressIDDataPlatformQuotationsPartnerData with related.
func (o *DataPlatformAddressAddressDatum) SetAddressIDDataPlatformQuotationsPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsPartnerDatum) error {
	query := "update `data_platform_quotations_partner_data` set `AddressID` = null where `AddressID` = ?"
	values := []interface{}{o.AddressID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.AddressIDDataPlatformQuotationsPartnerData = nil
	}

	return o.AddAddressIDDataPlatformQuotationsPartnerData(ctx, exec, insert, related...)
}

// RemoveAddressIDDataPlatformQuotationsPartnerData relationships from objects passed in.
// Removes related items from R.AddressIDDataPlatformQuotationsPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformAddressAddressDatum) RemoveAddressIDDataPlatformQuotationsPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformQuotationsPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressIDDataPlatformQuotationsPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressIDDataPlatformQuotationsPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.AddressIDDataPlatformQuotationsPartnerData[i] = o.R.AddressIDDataPlatformQuotationsPartnerData[ln-1]
			}
			o.R.AddressIDDataPlatformQuotationsPartnerData = o.R.AddressIDDataPlatformQuotationsPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformAddressAddressData retrieves all the records using an executor.
func DataPlatformAddressAddressData(mods ...qm.QueryMod) dataPlatformAddressAddressDatumQuery {
	mods = append(mods, qm.From("`data_platform_address_address_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_address_address_data`.*"})
	}

	return dataPlatformAddressAddressDatumQuery{q}
}

// FindDataPlatformAddressAddressDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, addressID int, validityEndDate string, selectCols ...string) (*DataPlatformAddressAddressDatum, error) {
	dataPlatformAddressAddressDatumObj := &DataPlatformAddressAddressDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_address_address_data` where `AddressID`=? AND `ValidityEndDate`=?", sel,
	)

	q := queries.Raw(query, addressID, validityEndDate)

	err := q.Bind(ctx, exec, dataPlatformAddressAddressDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_address_address_data")
	}

	return dataPlatformAddressAddressDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformAddressAddressDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_address_address_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformAddressAddressDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformAddressAddressDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformAddressAddressDatumInsertCache[key]
	dataPlatformAddressAddressDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformAddressAddressDatumAllColumns,
			dataPlatformAddressAddressDatumColumnsWithDefault,
			dataPlatformAddressAddressDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_address_address_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_address_address_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_address_address_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformAddressAddressDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_address_address_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AddressID,
		o.ValidityEndDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_address_address_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformAddressAddressDatumInsertCacheMut.Lock()
		dataPlatformAddressAddressDatumInsertCache[key] = cache
		dataPlatformAddressAddressDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformAddressAddressDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformAddressAddressDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformAddressAddressDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformAddressAddressDatumUpdateCache[key]
	dataPlatformAddressAddressDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformAddressAddressDatumAllColumns,
			dataPlatformAddressAddressDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_address_address_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_address_address_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformAddressAddressDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, append(wl, dataPlatformAddressAddressDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_address_address_data row")
	}

	if !cached {
		dataPlatformAddressAddressDatumUpdateCacheMut.Lock()
		dataPlatformAddressAddressDatumUpdateCache[key] = cache
		dataPlatformAddressAddressDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformAddressAddressDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_address_address_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformAddressAddressDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformAddressAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_address_address_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformAddressAddressDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformAddressAddressDatum slice")
	}

	return nil
}

var mySQLDataPlatformAddressAddressDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformAddressAddressDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_address_address_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformAddressAddressDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformAddressAddressDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformAddressAddressDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformAddressAddressDatumUpsertCache[key]
	dataPlatformAddressAddressDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformAddressAddressDatumAllColumns,
			dataPlatformAddressAddressDatumColumnsWithDefault,
			dataPlatformAddressAddressDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformAddressAddressDatumAllColumns,
			dataPlatformAddressAddressDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_address_address_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_address_address_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_address_address_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_address_address_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_address_address_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_address_address_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformAddressAddressDatumUpsertCacheMut.Lock()
		dataPlatformAddressAddressDatumUpsertCache[key] = cache
		dataPlatformAddressAddressDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformAddressAddressDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformAddressAddressDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformAddressAddressDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformAddressAddressDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_address_address_data` WHERE `AddressID`=? AND `ValidityEndDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_address_address_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformAddressAddressDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformAddressAddressDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_address_address_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformAddressAddressDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformAddressAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_address_address_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformAddressAddressDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformAddressAddressDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformAddressAddressDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformAddressAddressDatum(ctx, exec, o.AddressID, o.ValidityEndDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformAddressAddressDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformAddressAddressDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformAddressAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_address_address_data`.* FROM `data_platform_address_address_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformAddressAddressDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformAddressAddressDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformAddressAddressDatumExists checks if the DataPlatformAddressAddressDatum row exists.
func DataPlatformAddressAddressDatumExists(ctx context.Context, exec boil.ContextExecutor, addressID int, validityEndDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_address_address_data` where `AddressID`=? AND `ValidityEndDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, addressID, validityEndDate)
	}
	row := exec.QueryRowContext(ctx, sql, addressID, validityEndDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_address_address_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformAddressAddressDatum row exists.
func (o *DataPlatformAddressAddressDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformAddressAddressDatumExists(ctx, exec, o.AddressID, o.ValidityEndDate)
}
