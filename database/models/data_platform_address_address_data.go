// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformAddressAddressDatum is an object representing the database table.
type DataPlatformAddressAddressDatum struct {
	AddressID         int         `boil:"AddressID" json:"AddressID" toml:"AddressID" yaml:"AddressID"`
	ValidityEndDate   time.Time   `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	ValidityStartDate time.Time   `boil:"ValidityStartDate" json:"ValidityStartDate" toml:"ValidityStartDate" yaml:"ValidityStartDate"`
	PostalCode        string      `boil:"PostalCode" json:"PostalCode" toml:"PostalCode" yaml:"PostalCode"`
	LocalRegion       string      `boil:"LocalRegion" json:"LocalRegion" toml:"LocalRegion" yaml:"LocalRegion"`
	Country           string      `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	GlobalRegion      string      `boil:"GlobalRegion" json:"GlobalRegion" toml:"GlobalRegion" yaml:"GlobalRegion"`
	TimeZone          string      `boil:"TimeZone" json:"TimeZone" toml:"TimeZone" yaml:"TimeZone"`
	District          null.String `boil:"District" json:"District,omitempty" toml:"District" yaml:"District,omitempty"`
	StreetName        string      `boil:"StreetName" json:"StreetName" toml:"StreetName" yaml:"StreetName"`
	CityName          string      `boil:"CityName" json:"CityName" toml:"CityName" yaml:"CityName"`
	Builiding         null.String `boil:"Builiding" json:"Builiding,omitempty" toml:"Builiding" yaml:"Builiding,omitempty"`
	Floor             null.Int    `boil:"Floor" json:"Floor,omitempty" toml:"Floor" yaml:"Floor,omitempty"`
	Room              null.Int    `boil:"Room" json:"Room,omitempty" toml:"Room" yaml:"Room,omitempty"`

	R *dataPlatformAddressAddressDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformAddressAddressDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformAddressAddressDatumColumns = struct {
	AddressID         string
	ValidityEndDate   string
	ValidityStartDate string
	PostalCode        string
	LocalRegion       string
	Country           string
	GlobalRegion      string
	TimeZone          string
	District          string
	StreetName        string
	CityName          string
	Builiding         string
	Floor             string
	Room              string
}{
	AddressID:         "AddressID",
	ValidityEndDate:   "ValidityEndDate",
	ValidityStartDate: "ValidityStartDate",
	PostalCode:        "PostalCode",
	LocalRegion:       "LocalRegion",
	Country:           "Country",
	GlobalRegion:      "GlobalRegion",
	TimeZone:          "TimeZone",
	District:          "District",
	StreetName:        "StreetName",
	CityName:          "CityName",
	Builiding:         "Builiding",
	Floor:             "Floor",
	Room:              "Room",
}

var DataPlatformAddressAddressDatumTableColumns = struct {
	AddressID         string
	ValidityEndDate   string
	ValidityStartDate string
	PostalCode        string
	LocalRegion       string
	Country           string
	GlobalRegion      string
	TimeZone          string
	District          string
	StreetName        string
	CityName          string
	Builiding         string
	Floor             string
	Room              string
}{
	AddressID:         "data_platform_address_address_data.AddressID",
	ValidityEndDate:   "data_platform_address_address_data.ValidityEndDate",
	ValidityStartDate: "data_platform_address_address_data.ValidityStartDate",
	PostalCode:        "data_platform_address_address_data.PostalCode",
	LocalRegion:       "data_platform_address_address_data.LocalRegion",
	Country:           "data_platform_address_address_data.Country",
	GlobalRegion:      "data_platform_address_address_data.GlobalRegion",
	TimeZone:          "data_platform_address_address_data.TimeZone",
	District:          "data_platform_address_address_data.District",
	StreetName:        "data_platform_address_address_data.StreetName",
	CityName:          "data_platform_address_address_data.CityName",
	Builiding:         "data_platform_address_address_data.Builiding",
	Floor:             "data_platform_address_address_data.Floor",
	Room:              "data_platform_address_address_data.Room",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var DataPlatformAddressAddressDatumWhere = struct {
	AddressID         whereHelperint
	ValidityEndDate   whereHelpertime_Time
	ValidityStartDate whereHelpertime_Time
	PostalCode        whereHelperstring
	LocalRegion       whereHelperstring
	Country           whereHelperstring
	GlobalRegion      whereHelperstring
	TimeZone          whereHelperstring
	District          whereHelpernull_String
	StreetName        whereHelperstring
	CityName          whereHelperstring
	Builiding         whereHelpernull_String
	Floor             whereHelpernull_Int
	Room              whereHelpernull_Int
}{
	AddressID:         whereHelperint{field: "`data_platform_address_address_data`.`AddressID`"},
	ValidityEndDate:   whereHelpertime_Time{field: "`data_platform_address_address_data`.`ValidityEndDate`"},
	ValidityStartDate: whereHelpertime_Time{field: "`data_platform_address_address_data`.`ValidityStartDate`"},
	PostalCode:        whereHelperstring{field: "`data_platform_address_address_data`.`PostalCode`"},
	LocalRegion:       whereHelperstring{field: "`data_platform_address_address_data`.`LocalRegion`"},
	Country:           whereHelperstring{field: "`data_platform_address_address_data`.`Country`"},
	GlobalRegion:      whereHelperstring{field: "`data_platform_address_address_data`.`GlobalRegion`"},
	TimeZone:          whereHelperstring{field: "`data_platform_address_address_data`.`TimeZone`"},
	District:          whereHelpernull_String{field: "`data_platform_address_address_data`.`District`"},
	StreetName:        whereHelperstring{field: "`data_platform_address_address_data`.`StreetName`"},
	CityName:          whereHelperstring{field: "`data_platform_address_address_data`.`CityName`"},
	Builiding:         whereHelpernull_String{field: "`data_platform_address_address_data`.`Builiding`"},
	Floor:             whereHelpernull_Int{field: "`data_platform_address_address_data`.`Floor`"},
	Room:              whereHelpernull_Int{field: "`data_platform_address_address_data`.`Room`"},
}

// DataPlatformAddressAddressDatumRels is where relationship names are stored.
var DataPlatformAddressAddressDatumRels = struct {
	AddressIDDataPlatformBusinessPartnerGeneralData string
	AddressIDDataPlatformFinInstMasterBranchData    string
	AddressIDDataPlatformFinInstMasterGeneralData   string
	AddressIDDataPlatformOrdersHeaderPartnerData    string
}{
	AddressIDDataPlatformBusinessPartnerGeneralData: "AddressIDDataPlatformBusinessPartnerGeneralData",
	AddressIDDataPlatformFinInstMasterBranchData:    "AddressIDDataPlatformFinInstMasterBranchData",
	AddressIDDataPlatformFinInstMasterGeneralData:   "AddressIDDataPlatformFinInstMasterGeneralData",
	AddressIDDataPlatformOrdersHeaderPartnerData:    "AddressIDDataPlatformOrdersHeaderPartnerData",
}

// dataPlatformAddressAddressDatumR is where relationships are stored.
type dataPlatformAddressAddressDatumR struct {
	AddressIDDataPlatformBusinessPartnerGeneralData DataPlatformBusinessPartnerGeneralDatumSlice `boil:"AddressIDDataPlatformBusinessPartnerGeneralData" json:"AddressIDDataPlatformBusinessPartnerGeneralData" toml:"AddressIDDataPlatformBusinessPartnerGeneralData" yaml:"AddressIDDataPlatformBusinessPartnerGeneralData"`
	AddressIDDataPlatformFinInstMasterBranchData    DataPlatformFinInstMasterBranchDatumSlice    `boil:"AddressIDDataPlatformFinInstMasterBranchData" json:"AddressIDDataPlatformFinInstMasterBranchData" toml:"AddressIDDataPlatformFinInstMasterBranchData" yaml:"AddressIDDataPlatformFinInstMasterBranchData"`
	AddressIDDataPlatformFinInstMasterGeneralData   DataPlatformFinInstMasterGeneralDatumSlice   `boil:"AddressIDDataPlatformFinInstMasterGeneralData" json:"AddressIDDataPlatformFinInstMasterGeneralData" toml:"AddressIDDataPlatformFinInstMasterGeneralData" yaml:"AddressIDDataPlatformFinInstMasterGeneralData"`
	AddressIDDataPlatformOrdersHeaderPartnerData    DataPlatformOrdersHeaderPartnerDatumSlice    `boil:"AddressIDDataPlatformOrdersHeaderPartnerData" json:"AddressIDDataPlatformOrdersHeaderPartnerData" toml:"AddressIDDataPlatformOrdersHeaderPartnerData" yaml:"AddressIDDataPlatformOrdersHeaderPartnerData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformAddressAddressDatumR) NewStruct() *dataPlatformAddressAddressDatumR {
	return &dataPlatformAddressAddressDatumR{}
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformBusinessPartnerGeneralData() DataPlatformBusinessPartnerGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformBusinessPartnerGeneralData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformFinInstMasterBranchData() DataPlatformFinInstMasterBranchDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformFinInstMasterBranchData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformFinInstMasterGeneralData() DataPlatformFinInstMasterGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformFinInstMasterGeneralData
}

func (r *dataPlatformAddressAddressDatumR) GetAddressIDDataPlatformOrdersHeaderPartnerData() DataPlatformOrdersHeaderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.AddressIDDataPlatformOrdersHeaderPartnerData
}

// dataPlatformAddressAddressDatumL is where Load methods for each relationship are stored.
type dataPlatformAddressAddressDatumL struct{}

var (
	dataPlatformAddressAddressDatumAllColumns            = []string{"AddressID", "ValidityEndDate", "ValidityStartDate", "PostalCode", "LocalRegion", "Country", "GlobalRegion", "TimeZone", "District", "StreetName", "CityName", "Builiding", "Floor", "Room"}
	dataPlatformAddressAddressDatumColumnsWithoutDefault = []string{"AddressID", "ValidityEndDate", "ValidityStartDate", "PostalCode", "LocalRegion", "Country", "GlobalRegion", "TimeZone", "District", "StreetName", "CityName", "Builiding", "Floor", "Room"}
	dataPlatformAddressAddressDatumColumnsWithDefault    = []string{}
	dataPlatformAddressAddressDatumPrimaryKeyColumns     = []string{"AddressID", "ValidityEndDate"}
	dataPlatformAddressAddressDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformAddressAddressDatumSlice is an alias for a slice of pointers to DataPlatformAddressAddressDatum.
	// This should almost always be used instead of []DataPlatformAddressAddressDatum.
	DataPlatformAddressAddressDatumSlice []*DataPlatformAddressAddressDatum
	// DataPlatformAddressAddressDatumHook is the signature for custom DataPlatformAddressAddressDatum hook methods
	DataPlatformAddressAddressDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformAddressAddressDatum) error

	dataPlatformAddressAddressDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformAddressAddressDatumType                 = reflect.TypeOf(&DataPlatformAddressAddressDatum{})
	dataPlatformAddressAddressDatumMapping              = queries.MakeStructMapping(dataPlatformAddressAddressDatumType)
	dataPlatformAddressAddressDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, dataPlatformAddressAddressDatumPrimaryKeyColumns)
	dataPlatformAddressAddressDatumInsertCacheMut       sync.RWMutex
	dataPlatformAddressAddressDatumInsertCache          = make(map[string]insertCache)
	dataPlatformAddressAddressDatumUpdateCacheMut       sync.RWMutex
	dataPlatformAddressAddressDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformAddressAddressDatumUpsertCacheMut       sync.RWMutex
	dataPlatformAddressAddressDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformAddressAddressDatumAfterSelectHooks []DataPlatformAddressAddressDatumHook

var dataPlatformAddressAddressDatumBeforeInsertHooks []DataPlatformAddressAddressDatumHook
var dataPlatformAddressAddressDatumAfterInsertHooks []DataPlatformAddressAddressDatumHook

var dataPlatformAddressAddressDatumBeforeUpdateHooks []DataPlatformAddressAddressDatumHook
var dataPlatformAddressAddressDatumAfterUpdateHooks []DataPlatformAddressAddressDatumHook

var dataPlatformAddressAddressDatumBeforeDeleteHooks []DataPlatformAddressAddressDatumHook
var dataPlatformAddressAddressDatumAfterDeleteHooks []DataPlatformAddressAddressDatumHook

var dataPlatformAddressAddressDatumBeforeUpsertHooks []DataPlatformAddressAddressDatumHook
var dataPlatformAddressAddressDatumAfterUpsertHooks []DataPlatformAddressAddressDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformAddressAddressDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformAddressAddressDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformAddressAddressDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformAddressAddressDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformAddressAddressDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformAddressAddressDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformAddressAddressDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformAddressAddressDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformAddressAddressDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformAddressAddressDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformAddressAddressDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformAddressAddressDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformAddressAddressDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformAddressAddressDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformAddressAddressDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformAddressAddressDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformAddressAddressDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformAddressAddressDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformAddressAddressDatumHook registers your hook function for all future operations.
func AddDataPlatformAddressAddressDatumHook(hookPoint boil.HookPoint, dataPlatformAddressAddressDatumHook DataPlatformAddressAddressDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformAddressAddressDatumAfterSelectHooks = append(dataPlatformAddressAddressDatumAfterSelectHooks, dataPlatformAddressAddressDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformAddressAddressDatumBeforeInsertHooks = append(dataPlatformAddressAddressDatumBeforeInsertHooks, dataPlatformAddressAddressDatumHook)
	case boil.AfterInsertHook:
		dataPlatformAddressAddressDatumAfterInsertHooks = append(dataPlatformAddressAddressDatumAfterInsertHooks, dataPlatformAddressAddressDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformAddressAddressDatumBeforeUpdateHooks = append(dataPlatformAddressAddressDatumBeforeUpdateHooks, dataPlatformAddressAddressDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformAddressAddressDatumAfterUpdateHooks = append(dataPlatformAddressAddressDatumAfterUpdateHooks, dataPlatformAddressAddressDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformAddressAddressDatumBeforeDeleteHooks = append(dataPlatformAddressAddressDatumBeforeDeleteHooks, dataPlatformAddressAddressDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformAddressAddressDatumAfterDeleteHooks = append(dataPlatformAddressAddressDatumAfterDeleteHooks, dataPlatformAddressAddressDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformAddressAddressDatumBeforeUpsertHooks = append(dataPlatformAddressAddressDatumBeforeUpsertHooks, dataPlatformAddressAddressDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformAddressAddressDatumAfterUpsertHooks = append(dataPlatformAddressAddressDatumAfterUpsertHooks, dataPlatformAddressAddressDatumHook)
	}
}

// One returns a single dataPlatformAddressAddressDatum record from the query.
func (q dataPlatformAddressAddressDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformAddressAddressDatum, error) {
	o := &DataPlatformAddressAddressDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_address_address_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformAddressAddressDatum records from the query.
func (q dataPlatformAddressAddressDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformAddressAddressDatumSlice, error) {
	var o []*DataPlatformAddressAddressDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformAddressAddressDatum slice")
	}

	if len(dataPlatformAddressAddressDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformAddressAddressDatum records in the query.
func (q dataPlatformAddressAddressDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_address_address_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformAddressAddressDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_address_address_data exists")
	}

	return count > 0, nil
}

// AddressIDDataPlatformBusinessPartnerGeneralData retrieves all the data_platform_business_partner_general_datum's DataPlatformBusinessPartnerGeneralData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformBusinessPartnerGeneralData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_general_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// AddressIDDataPlatformFinInstMasterBranchData retrieves all the data_platform_fin_inst_master_branch_datum's DataPlatformFinInstMasterBranchData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformFinInstMasterBranchData(mods ...qm.QueryMod) dataPlatformFinInstMasterBranchDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_fin_inst_master_branch_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformFinInstMasterBranchData(queryMods...)
}

// AddressIDDataPlatformFinInstMasterGeneralData retrieves all the data_platform_fin_inst_master_general_datum's DataPlatformFinInstMasterGeneralData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformFinInstMasterGeneralData(mods ...qm.QueryMod) dataPlatformFinInstMasterGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_fin_inst_master_general_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformFinInstMasterGeneralData(queryMods...)
}

// AddressIDDataPlatformOrdersHeaderPartnerData retrieves all the data_platform_orders_header_partner_datum's DataPlatformOrdersHeaderPartnerData with an executor via AddressID column.
func (o *DataPlatformAddressAddressDatum) AddressIDDataPlatformOrdersHeaderPartnerData(mods ...qm.QueryMod) dataPlatformOrdersHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_partner_data`.`AddressID`=?", o.AddressID),
	)

	return DataPlatformOrdersHeaderPartnerData(queryMods...)
}

// LoadAddressIDDataPlatformBusinessPartnerGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformBusinessPartnerGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_general_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AddressIDDataPlatformBusinessPartnerGeneralData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}
			foreign.R.AddressIDDataPlatformAddressAddressDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformBusinessPartnerGeneralData = append(local.R.AddressIDDataPlatformBusinessPartnerGeneralData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
				}
				foreign.R.AddressIDDataPlatformAddressAddressDatum = local
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformFinInstMasterBranchData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformFinInstMasterBranchData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_fin_inst_master_branch_data`),
		qm.WhereIn(`data_platform_fin_inst_master_branch_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_fin_inst_master_branch_data")
	}

	var resultSlice []*DataPlatformFinInstMasterBranchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_fin_inst_master_branch_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_fin_inst_master_branch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_fin_inst_master_branch_data")
	}

	if len(dataPlatformFinInstMasterBranchDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AddressIDDataPlatformFinInstMasterBranchData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformFinInstMasterBranchDatumR{}
			}
			foreign.R.AddressIDDataPlatformAddressAddressDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformFinInstMasterBranchData = append(local.R.AddressIDDataPlatformFinInstMasterBranchData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformFinInstMasterBranchDatumR{}
				}
				foreign.R.AddressIDDataPlatformAddressAddressDatum = local
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformFinInstMasterGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformFinInstMasterGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_fin_inst_master_general_data`),
		qm.WhereIn(`data_platform_fin_inst_master_general_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_fin_inst_master_general_data")
	}

	var resultSlice []*DataPlatformFinInstMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_fin_inst_master_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_fin_inst_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_fin_inst_master_general_data")
	}

	if len(dataPlatformFinInstMasterGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AddressIDDataPlatformFinInstMasterGeneralData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformFinInstMasterGeneralDatumR{}
			}
			foreign.R.AddressIDDataPlatformAddressAddressDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformFinInstMasterGeneralData = append(local.R.AddressIDDataPlatformFinInstMasterGeneralData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformFinInstMasterGeneralDatumR{}
				}
				foreign.R.AddressIDDataPlatformAddressAddressDatum = local
				break
			}
		}
	}

	return nil
}

// LoadAddressIDDataPlatformOrdersHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformAddressAddressDatumL) LoadAddressIDDataPlatformOrdersHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformAddressAddressDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformAddressAddressDatum
	var object *DataPlatformAddressAddressDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformAddressAddressDatum.(*DataPlatformAddressAddressDatum)
		if !ok {
			object = new(DataPlatformAddressAddressDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformAddressAddressDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformAddressAddressDatum.(*[]*DataPlatformAddressAddressDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformAddressAddressDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformAddressAddressDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformAddressAddressDatumR{}
		}
		args = append(args, object.AddressID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformAddressAddressDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AddressID) {
					continue Outer
				}
			}

			args = append(args, obj.AddressID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_partner_data`),
		qm.WhereIn(`data_platform_orders_header_partner_data.AddressID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_partner_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_partner_data")
	}

	if len(dataPlatformOrdersHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AddressIDDataPlatformOrdersHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}
			foreign.R.AddressIDDataPlatformAddressAddressDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.AddressID, foreign.AddressID) {
				local.R.AddressIDDataPlatformOrdersHeaderPartnerData = append(local.R.AddressIDDataPlatformOrdersHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformOrdersHeaderPartnerDatumR{}
				}
				foreign.R.AddressIDDataPlatformAddressAddressDatum = local
				break
			}
		}
	}

	return nil
}

// AddAddressIDDataPlatformBusinessPartnerGeneralData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformBusinessPartnerGeneralData.
// Sets related.R.AddressIDDataPlatformAddressAddressDatum appropriately.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformBusinessPartnerGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.AddressID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.AddressID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformBusinessPartnerGeneralData: related,
		}
	} else {
		o.R.AddressIDDataPlatformBusinessPartnerGeneralData = append(o.R.AddressIDDataPlatformBusinessPartnerGeneralData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerGeneralDatumR{
				AddressIDDataPlatformAddressAddressDatum: o,
			}
		} else {
			rel.R.AddressIDDataPlatformAddressAddressDatum = o
		}
	}
	return nil
}

// SetAddressIDDataPlatformBusinessPartnerGeneralData removes all previously related items of the
// data_platform_address_address_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformBusinessPartnerGeneralData accordingly.
// Replaces o.R.AddressIDDataPlatformBusinessPartnerGeneralData with related.
// Sets related.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformBusinessPartnerGeneralData accordingly.
func (o *DataPlatformAddressAddressDatum) SetAddressIDDataPlatformBusinessPartnerGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerGeneralDatum) error {
	query := "update `data_platform_business_partner_general_data` set `AddressID` = null where `AddressID` = ?"
	values := []interface{}{o.AddressID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AddressIDDataPlatformBusinessPartnerGeneralData {
			queries.SetScanner(&rel.AddressID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AddressIDDataPlatformAddressAddressDatum = nil
		}
		o.R.AddressIDDataPlatformBusinessPartnerGeneralData = nil
	}

	return o.AddAddressIDDataPlatformBusinessPartnerGeneralData(ctx, exec, insert, related...)
}

// RemoveAddressIDDataPlatformBusinessPartnerGeneralData relationships from objects passed in.
// Removes related items from R.AddressIDDataPlatformBusinessPartnerGeneralData (uses pointer comparison, removal does not keep order)
// Sets related.R.AddressIDDataPlatformAddressAddressDatum.
func (o *DataPlatformAddressAddressDatum) RemoveAddressIDDataPlatformBusinessPartnerGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformBusinessPartnerGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if rel.R != nil {
			rel.R.AddressIDDataPlatformAddressAddressDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressIDDataPlatformBusinessPartnerGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressIDDataPlatformBusinessPartnerGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.AddressIDDataPlatformBusinessPartnerGeneralData[i] = o.R.AddressIDDataPlatformBusinessPartnerGeneralData[ln-1]
			}
			o.R.AddressIDDataPlatformBusinessPartnerGeneralData = o.R.AddressIDDataPlatformBusinessPartnerGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddAddressIDDataPlatformFinInstMasterBranchData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformFinInstMasterBranchData.
// Sets related.R.AddressIDDataPlatformAddressAddressDatum appropriately.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformFinInstMasterBranchData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformFinInstMasterBranchDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.AddressID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_fin_inst_master_branch_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformFinInstMasterBranchDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.FinInstCountry, rel.FinInstCode}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.AddressID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformFinInstMasterBranchData: related,
		}
	} else {
		o.R.AddressIDDataPlatformFinInstMasterBranchData = append(o.R.AddressIDDataPlatformFinInstMasterBranchData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformFinInstMasterBranchDatumR{
				AddressIDDataPlatformAddressAddressDatum: o,
			}
		} else {
			rel.R.AddressIDDataPlatformAddressAddressDatum = o
		}
	}
	return nil
}

// SetAddressIDDataPlatformFinInstMasterBranchData removes all previously related items of the
// data_platform_address_address_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformFinInstMasterBranchData accordingly.
// Replaces o.R.AddressIDDataPlatformFinInstMasterBranchData with related.
// Sets related.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformFinInstMasterBranchData accordingly.
func (o *DataPlatformAddressAddressDatum) SetAddressIDDataPlatformFinInstMasterBranchData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformFinInstMasterBranchDatum) error {
	query := "update `data_platform_fin_inst_master_branch_data` set `AddressID` = null where `AddressID` = ?"
	values := []interface{}{o.AddressID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AddressIDDataPlatformFinInstMasterBranchData {
			queries.SetScanner(&rel.AddressID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AddressIDDataPlatformAddressAddressDatum = nil
		}
		o.R.AddressIDDataPlatformFinInstMasterBranchData = nil
	}

	return o.AddAddressIDDataPlatformFinInstMasterBranchData(ctx, exec, insert, related...)
}

// RemoveAddressIDDataPlatformFinInstMasterBranchData relationships from objects passed in.
// Removes related items from R.AddressIDDataPlatformFinInstMasterBranchData (uses pointer comparison, removal does not keep order)
// Sets related.R.AddressIDDataPlatformAddressAddressDatum.
func (o *DataPlatformAddressAddressDatum) RemoveAddressIDDataPlatformFinInstMasterBranchData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformFinInstMasterBranchDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if rel.R != nil {
			rel.R.AddressIDDataPlatformAddressAddressDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressIDDataPlatformFinInstMasterBranchData {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressIDDataPlatformFinInstMasterBranchData)
			if ln > 1 && i < ln-1 {
				o.R.AddressIDDataPlatformFinInstMasterBranchData[i] = o.R.AddressIDDataPlatformFinInstMasterBranchData[ln-1]
			}
			o.R.AddressIDDataPlatformFinInstMasterBranchData = o.R.AddressIDDataPlatformFinInstMasterBranchData[:ln-1]
			break
		}
	}

	return nil
}

// AddAddressIDDataPlatformFinInstMasterGeneralData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformFinInstMasterGeneralData.
// Sets related.R.AddressIDDataPlatformAddressAddressDatum appropriately.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformFinInstMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformFinInstMasterGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.AddressID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_fin_inst_master_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformFinInstMasterGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.FinInstCountry, rel.FinInstCode}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.AddressID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformFinInstMasterGeneralData: related,
		}
	} else {
		o.R.AddressIDDataPlatformFinInstMasterGeneralData = append(o.R.AddressIDDataPlatformFinInstMasterGeneralData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformFinInstMasterGeneralDatumR{
				AddressIDDataPlatformAddressAddressDatum: o,
			}
		} else {
			rel.R.AddressIDDataPlatformAddressAddressDatum = o
		}
	}
	return nil
}

// SetAddressIDDataPlatformFinInstMasterGeneralData removes all previously related items of the
// data_platform_address_address_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformFinInstMasterGeneralData accordingly.
// Replaces o.R.AddressIDDataPlatformFinInstMasterGeneralData with related.
// Sets related.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformFinInstMasterGeneralData accordingly.
func (o *DataPlatformAddressAddressDatum) SetAddressIDDataPlatformFinInstMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformFinInstMasterGeneralDatum) error {
	query := "update `data_platform_fin_inst_master_general_data` set `AddressID` = null where `AddressID` = ?"
	values := []interface{}{o.AddressID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AddressIDDataPlatformFinInstMasterGeneralData {
			queries.SetScanner(&rel.AddressID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AddressIDDataPlatformAddressAddressDatum = nil
		}
		o.R.AddressIDDataPlatformFinInstMasterGeneralData = nil
	}

	return o.AddAddressIDDataPlatformFinInstMasterGeneralData(ctx, exec, insert, related...)
}

// RemoveAddressIDDataPlatformFinInstMasterGeneralData relationships from objects passed in.
// Removes related items from R.AddressIDDataPlatformFinInstMasterGeneralData (uses pointer comparison, removal does not keep order)
// Sets related.R.AddressIDDataPlatformAddressAddressDatum.
func (o *DataPlatformAddressAddressDatum) RemoveAddressIDDataPlatformFinInstMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformFinInstMasterGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if rel.R != nil {
			rel.R.AddressIDDataPlatformAddressAddressDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressIDDataPlatformFinInstMasterGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressIDDataPlatformFinInstMasterGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.AddressIDDataPlatformFinInstMasterGeneralData[i] = o.R.AddressIDDataPlatformFinInstMasterGeneralData[ln-1]
			}
			o.R.AddressIDDataPlatformFinInstMasterGeneralData = o.R.AddressIDDataPlatformFinInstMasterGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddAddressIDDataPlatformOrdersHeaderPartnerData adds the given related objects to the existing relationships
// of the data_platform_address_address_datum, optionally inserting them as new records.
// Appends related to o.R.AddressIDDataPlatformOrdersHeaderPartnerData.
// Sets related.R.AddressIDDataPlatformAddressAddressDatum appropriately.
func (o *DataPlatformAddressAddressDatum) AddAddressIDDataPlatformOrdersHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.AddressID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"AddressID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.AddressID, rel.OrderID, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.AddressID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformAddressAddressDatumR{
			AddressIDDataPlatformOrdersHeaderPartnerData: related,
		}
	} else {
		o.R.AddressIDDataPlatformOrdersHeaderPartnerData = append(o.R.AddressIDDataPlatformOrdersHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformOrdersHeaderPartnerDatumR{
				AddressIDDataPlatformAddressAddressDatum: o,
			}
		} else {
			rel.R.AddressIDDataPlatformAddressAddressDatum = o
		}
	}
	return nil
}

// SetAddressIDDataPlatformOrdersHeaderPartnerData removes all previously related items of the
// data_platform_address_address_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformOrdersHeaderPartnerData accordingly.
// Replaces o.R.AddressIDDataPlatformOrdersHeaderPartnerData with related.
// Sets related.R.AddressIDDataPlatformAddressAddressDatum's AddressIDDataPlatformOrdersHeaderPartnerData accordingly.
func (o *DataPlatformAddressAddressDatum) SetAddressIDDataPlatformOrdersHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderPartnerDatum) error {
	query := "update `data_platform_orders_header_partner_data` set `AddressID` = null where `AddressID` = ?"
	values := []interface{}{o.AddressID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AddressIDDataPlatformOrdersHeaderPartnerData {
			queries.SetScanner(&rel.AddressID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AddressIDDataPlatformAddressAddressDatum = nil
		}
		o.R.AddressIDDataPlatformOrdersHeaderPartnerData = nil
	}

	return o.AddAddressIDDataPlatformOrdersHeaderPartnerData(ctx, exec, insert, related...)
}

// RemoveAddressIDDataPlatformOrdersHeaderPartnerData relationships from objects passed in.
// Removes related items from R.AddressIDDataPlatformOrdersHeaderPartnerData (uses pointer comparison, removal does not keep order)
// Sets related.R.AddressIDDataPlatformAddressAddressDatum.
func (o *DataPlatformAddressAddressDatum) RemoveAddressIDDataPlatformOrdersHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersHeaderPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if rel.R != nil {
			rel.R.AddressIDDataPlatformAddressAddressDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("AddressID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressIDDataPlatformOrdersHeaderPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressIDDataPlatformOrdersHeaderPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.AddressIDDataPlatformOrdersHeaderPartnerData[i] = o.R.AddressIDDataPlatformOrdersHeaderPartnerData[ln-1]
			}
			o.R.AddressIDDataPlatformOrdersHeaderPartnerData = o.R.AddressIDDataPlatformOrdersHeaderPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformAddressAddressData retrieves all the records using an executor.
func DataPlatformAddressAddressData(mods ...qm.QueryMod) dataPlatformAddressAddressDatumQuery {
	mods = append(mods, qm.From("`data_platform_address_address_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_address_address_data`.*"})
	}

	return dataPlatformAddressAddressDatumQuery{q}
}

// FindDataPlatformAddressAddressDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformAddressAddressDatum(ctx context.Context, exec boil.ContextExecutor, addressID int, validityEndDate time.Time, selectCols ...string) (*DataPlatformAddressAddressDatum, error) {
	dataPlatformAddressAddressDatumObj := &DataPlatformAddressAddressDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_address_address_data` where `AddressID`=? AND `ValidityEndDate`=?", sel,
	)

	q := queries.Raw(query, addressID, validityEndDate)

	err := q.Bind(ctx, exec, dataPlatformAddressAddressDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_address_address_data")
	}

	if err = dataPlatformAddressAddressDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformAddressAddressDatumObj, err
	}

	return dataPlatformAddressAddressDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformAddressAddressDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_address_address_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformAddressAddressDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformAddressAddressDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformAddressAddressDatumInsertCache[key]
	dataPlatformAddressAddressDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformAddressAddressDatumAllColumns,
			dataPlatformAddressAddressDatumColumnsWithDefault,
			dataPlatformAddressAddressDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_address_address_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_address_address_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_address_address_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformAddressAddressDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_address_address_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AddressID,
		o.ValidityEndDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_address_address_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformAddressAddressDatumInsertCacheMut.Lock()
		dataPlatformAddressAddressDatumInsertCache[key] = cache
		dataPlatformAddressAddressDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformAddressAddressDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformAddressAddressDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformAddressAddressDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformAddressAddressDatumUpdateCache[key]
	dataPlatformAddressAddressDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformAddressAddressDatumAllColumns,
			dataPlatformAddressAddressDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_address_address_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_address_address_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformAddressAddressDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, append(wl, dataPlatformAddressAddressDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_address_address_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_address_address_data")
	}

	if !cached {
		dataPlatformAddressAddressDatumUpdateCacheMut.Lock()
		dataPlatformAddressAddressDatumUpdateCache[key] = cache
		dataPlatformAddressAddressDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformAddressAddressDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_address_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_address_address_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformAddressAddressDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformAddressAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_address_address_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformAddressAddressDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformAddressAddressDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformAddressAddressDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformAddressAddressDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformAddressAddressDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_address_address_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformAddressAddressDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformAddressAddressDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformAddressAddressDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformAddressAddressDatumUpsertCache[key]
	dataPlatformAddressAddressDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformAddressAddressDatumAllColumns,
			dataPlatformAddressAddressDatumColumnsWithDefault,
			dataPlatformAddressAddressDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformAddressAddressDatumAllColumns,
			dataPlatformAddressAddressDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_address_address_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_address_address_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_address_address_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_address_address_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformAddressAddressDatumType, dataPlatformAddressAddressDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_address_address_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_address_address_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformAddressAddressDatumUpsertCacheMut.Lock()
		dataPlatformAddressAddressDatumUpsertCache[key] = cache
		dataPlatformAddressAddressDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformAddressAddressDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformAddressAddressDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformAddressAddressDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformAddressAddressDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_address_address_data` WHERE `AddressID`=? AND `ValidityEndDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_address_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_address_address_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformAddressAddressDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformAddressAddressDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_address_address_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_address_address_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformAddressAddressDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformAddressAddressDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformAddressAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_address_address_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformAddressAddressDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformAddressAddressDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_address_address_data")
	}

	if len(dataPlatformAddressAddressDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformAddressAddressDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformAddressAddressDatum(ctx, exec, o.AddressID, o.ValidityEndDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformAddressAddressDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformAddressAddressDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformAddressAddressDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_address_address_data`.* FROM `data_platform_address_address_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformAddressAddressDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformAddressAddressDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformAddressAddressDatumExists checks if the DataPlatformAddressAddressDatum row exists.
func DataPlatformAddressAddressDatumExists(ctx context.Context, exec boil.ContextExecutor, addressID int, validityEndDate time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_address_address_data` where `AddressID`=? AND `ValidityEndDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, addressID, validityEndDate)
	}
	row := exec.QueryRowContext(ctx, sql, addressID, validityEndDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_address_address_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformAddressAddressDatum row exists.
func (o *DataPlatformAddressAddressDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformAddressAddressDatumExists(ctx, exec, o.AddressID, o.ValidityEndDate)
}
