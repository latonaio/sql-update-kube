// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPaymentMethodPaymentMethodDatum is an object representing the database table.
type DataPlatformPaymentMethodPaymentMethodDatum struct {
	PaymentMethod string `boil:"PaymentMethod" json:"PaymentMethod" toml:"PaymentMethod" yaml:"PaymentMethod"`

	R *dataPlatformPaymentMethodPaymentMethodDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPaymentMethodPaymentMethodDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPaymentMethodPaymentMethodDatumColumns = struct {
	PaymentMethod string
}{
	PaymentMethod: "PaymentMethod",
}

var DataPlatformPaymentMethodPaymentMethodDatumTableColumns = struct {
	PaymentMethod string
}{
	PaymentMethod: "data_platform_payment_method_payment_method_data.PaymentMethod",
}

// Generated where

var DataPlatformPaymentMethodPaymentMethodDatumWhere = struct {
	PaymentMethod whereHelperstring
}{
	PaymentMethod: whereHelperstring{field: "`data_platform_payment_method_payment_method_data`.`PaymentMethod`"},
}

// DataPlatformPaymentMethodPaymentMethodDatumRels is where relationship names are stored.
var DataPlatformPaymentMethodPaymentMethodDatumRels = struct {
	PaymentMethodDataPlatformOrdersHeaderData      string
	PaymentMethodDataPlatformPaymentMethodTextData string
}{
	PaymentMethodDataPlatformOrdersHeaderData:      "PaymentMethodDataPlatformOrdersHeaderData",
	PaymentMethodDataPlatformPaymentMethodTextData: "PaymentMethodDataPlatformPaymentMethodTextData",
}

// dataPlatformPaymentMethodPaymentMethodDatumR is where relationships are stored.
type dataPlatformPaymentMethodPaymentMethodDatumR struct {
	PaymentMethodDataPlatformOrdersHeaderData      DataPlatformOrdersHeaderDatumSlice      `boil:"PaymentMethodDataPlatformOrdersHeaderData" json:"PaymentMethodDataPlatformOrdersHeaderData" toml:"PaymentMethodDataPlatformOrdersHeaderData" yaml:"PaymentMethodDataPlatformOrdersHeaderData"`
	PaymentMethodDataPlatformPaymentMethodTextData DataPlatformPaymentMethodTextDatumSlice `boil:"PaymentMethodDataPlatformPaymentMethodTextData" json:"PaymentMethodDataPlatformPaymentMethodTextData" toml:"PaymentMethodDataPlatformPaymentMethodTextData" yaml:"PaymentMethodDataPlatformPaymentMethodTextData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPaymentMethodPaymentMethodDatumR) NewStruct() *dataPlatformPaymentMethodPaymentMethodDatumR {
	return &dataPlatformPaymentMethodPaymentMethodDatumR{}
}

func (r *dataPlatformPaymentMethodPaymentMethodDatumR) GetPaymentMethodDataPlatformOrdersHeaderData() DataPlatformOrdersHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.PaymentMethodDataPlatformOrdersHeaderData
}

func (r *dataPlatformPaymentMethodPaymentMethodDatumR) GetPaymentMethodDataPlatformPaymentMethodTextData() DataPlatformPaymentMethodTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.PaymentMethodDataPlatformPaymentMethodTextData
}

// dataPlatformPaymentMethodPaymentMethodDatumL is where Load methods for each relationship are stored.
type dataPlatformPaymentMethodPaymentMethodDatumL struct{}

var (
	dataPlatformPaymentMethodPaymentMethodDatumAllColumns            = []string{"PaymentMethod"}
	dataPlatformPaymentMethodPaymentMethodDatumColumnsWithoutDefault = []string{"PaymentMethod"}
	dataPlatformPaymentMethodPaymentMethodDatumColumnsWithDefault    = []string{}
	dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyColumns     = []string{"PaymentMethod"}
	dataPlatformPaymentMethodPaymentMethodDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPaymentMethodPaymentMethodDatumSlice is an alias for a slice of pointers to DataPlatformPaymentMethodPaymentMethodDatum.
	// This should almost always be used instead of []DataPlatformPaymentMethodPaymentMethodDatum.
	DataPlatformPaymentMethodPaymentMethodDatumSlice []*DataPlatformPaymentMethodPaymentMethodDatum
	// DataPlatformPaymentMethodPaymentMethodDatumHook is the signature for custom DataPlatformPaymentMethodPaymentMethodDatum hook methods
	DataPlatformPaymentMethodPaymentMethodDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformPaymentMethodPaymentMethodDatum) error

	dataPlatformPaymentMethodPaymentMethodDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPaymentMethodPaymentMethodDatumType                 = reflect.TypeOf(&DataPlatformPaymentMethodPaymentMethodDatum{})
	dataPlatformPaymentMethodPaymentMethodDatumMapping              = queries.MakeStructMapping(dataPlatformPaymentMethodPaymentMethodDatumType)
	dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPaymentMethodPaymentMethodDatumType, dataPlatformPaymentMethodPaymentMethodDatumMapping, dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyColumns)
	dataPlatformPaymentMethodPaymentMethodDatumInsertCacheMut       sync.RWMutex
	dataPlatformPaymentMethodPaymentMethodDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPaymentMethodPaymentMethodDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPaymentMethodPaymentMethodDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPaymentMethodPaymentMethodDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPaymentMethodPaymentMethodDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformPaymentMethodPaymentMethodDatumAfterSelectHooks []DataPlatformPaymentMethodPaymentMethodDatumHook

var dataPlatformPaymentMethodPaymentMethodDatumBeforeInsertHooks []DataPlatformPaymentMethodPaymentMethodDatumHook
var dataPlatformPaymentMethodPaymentMethodDatumAfterInsertHooks []DataPlatformPaymentMethodPaymentMethodDatumHook

var dataPlatformPaymentMethodPaymentMethodDatumBeforeUpdateHooks []DataPlatformPaymentMethodPaymentMethodDatumHook
var dataPlatformPaymentMethodPaymentMethodDatumAfterUpdateHooks []DataPlatformPaymentMethodPaymentMethodDatumHook

var dataPlatformPaymentMethodPaymentMethodDatumBeforeDeleteHooks []DataPlatformPaymentMethodPaymentMethodDatumHook
var dataPlatformPaymentMethodPaymentMethodDatumAfterDeleteHooks []DataPlatformPaymentMethodPaymentMethodDatumHook

var dataPlatformPaymentMethodPaymentMethodDatumBeforeUpsertHooks []DataPlatformPaymentMethodPaymentMethodDatumHook
var dataPlatformPaymentMethodPaymentMethodDatumAfterUpsertHooks []DataPlatformPaymentMethodPaymentMethodDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodPaymentMethodDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodPaymentMethodDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodPaymentMethodDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodPaymentMethodDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodPaymentMethodDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodPaymentMethodDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodPaymentMethodDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodPaymentMethodDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformPaymentMethodPaymentMethodDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformPaymentMethodPaymentMethodDatumHook registers your hook function for all future operations.
func AddDataPlatformPaymentMethodPaymentMethodDatumHook(hookPoint boil.HookPoint, dataPlatformPaymentMethodPaymentMethodDatumHook DataPlatformPaymentMethodPaymentMethodDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformPaymentMethodPaymentMethodDatumAfterSelectHooks = append(dataPlatformPaymentMethodPaymentMethodDatumAfterSelectHooks, dataPlatformPaymentMethodPaymentMethodDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformPaymentMethodPaymentMethodDatumBeforeInsertHooks = append(dataPlatformPaymentMethodPaymentMethodDatumBeforeInsertHooks, dataPlatformPaymentMethodPaymentMethodDatumHook)
	case boil.AfterInsertHook:
		dataPlatformPaymentMethodPaymentMethodDatumAfterInsertHooks = append(dataPlatformPaymentMethodPaymentMethodDatumAfterInsertHooks, dataPlatformPaymentMethodPaymentMethodDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformPaymentMethodPaymentMethodDatumBeforeUpdateHooks = append(dataPlatformPaymentMethodPaymentMethodDatumBeforeUpdateHooks, dataPlatformPaymentMethodPaymentMethodDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformPaymentMethodPaymentMethodDatumAfterUpdateHooks = append(dataPlatformPaymentMethodPaymentMethodDatumAfterUpdateHooks, dataPlatformPaymentMethodPaymentMethodDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformPaymentMethodPaymentMethodDatumBeforeDeleteHooks = append(dataPlatformPaymentMethodPaymentMethodDatumBeforeDeleteHooks, dataPlatformPaymentMethodPaymentMethodDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformPaymentMethodPaymentMethodDatumAfterDeleteHooks = append(dataPlatformPaymentMethodPaymentMethodDatumAfterDeleteHooks, dataPlatformPaymentMethodPaymentMethodDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformPaymentMethodPaymentMethodDatumBeforeUpsertHooks = append(dataPlatformPaymentMethodPaymentMethodDatumBeforeUpsertHooks, dataPlatformPaymentMethodPaymentMethodDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformPaymentMethodPaymentMethodDatumAfterUpsertHooks = append(dataPlatformPaymentMethodPaymentMethodDatumAfterUpsertHooks, dataPlatformPaymentMethodPaymentMethodDatumHook)
	}
}

// One returns a single dataPlatformPaymentMethodPaymentMethodDatum record from the query.
func (q dataPlatformPaymentMethodPaymentMethodDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPaymentMethodPaymentMethodDatum, error) {
	o := &DataPlatformPaymentMethodPaymentMethodDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_payment_method_payment_method_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformPaymentMethodPaymentMethodDatum records from the query.
func (q dataPlatformPaymentMethodPaymentMethodDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPaymentMethodPaymentMethodDatumSlice, error) {
	var o []*DataPlatformPaymentMethodPaymentMethodDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPaymentMethodPaymentMethodDatum slice")
	}

	if len(dataPlatformPaymentMethodPaymentMethodDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformPaymentMethodPaymentMethodDatum records in the query.
func (q dataPlatformPaymentMethodPaymentMethodDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_payment_method_payment_method_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPaymentMethodPaymentMethodDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_payment_method_payment_method_data exists")
	}

	return count > 0, nil
}

// PaymentMethodDataPlatformOrdersHeaderData retrieves all the data_platform_orders_header_datum's DataPlatformOrdersHeaderData with an executor via PaymentMethod column.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) PaymentMethodDataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_data`.`PaymentMethod`=?", o.PaymentMethod),
	)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// PaymentMethodDataPlatformPaymentMethodTextData retrieves all the data_platform_payment_method_text_datum's DataPlatformPaymentMethodTextData with an executor via PaymentMethod column.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) PaymentMethodDataPlatformPaymentMethodTextData(mods ...qm.QueryMod) dataPlatformPaymentMethodTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_payment_method_text_data`.`PaymentMethod`=?", o.PaymentMethod),
	)

	return DataPlatformPaymentMethodTextData(queryMods...)
}

// LoadPaymentMethodDataPlatformOrdersHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPaymentMethodPaymentMethodDatumL) LoadPaymentMethodDataPlatformOrdersHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPaymentMethodPaymentMethodDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPaymentMethodPaymentMethodDatum
	var object *DataPlatformPaymentMethodPaymentMethodDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPaymentMethodPaymentMethodDatum.(*DataPlatformPaymentMethodPaymentMethodDatum)
		if !ok {
			object = new(DataPlatformPaymentMethodPaymentMethodDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPaymentMethodPaymentMethodDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPaymentMethodPaymentMethodDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPaymentMethodPaymentMethodDatum.(*[]*DataPlatformPaymentMethodPaymentMethodDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPaymentMethodPaymentMethodDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPaymentMethodPaymentMethodDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPaymentMethodPaymentMethodDatumR{}
		}
		args = append(args, object.PaymentMethod)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPaymentMethodPaymentMethodDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentMethod {
					continue Outer
				}
			}

			args = append(args, obj.PaymentMethod)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.PaymentMethod in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if len(dataPlatformOrdersHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PaymentMethodDataPlatformOrdersHeaderData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformOrdersHeaderDatumR{}
			}
			foreign.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PaymentMethod == foreign.PaymentMethod {
				local.R.PaymentMethodDataPlatformOrdersHeaderData = append(local.R.PaymentMethodDataPlatformOrdersHeaderData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformOrdersHeaderDatumR{}
				}
				foreign.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = local
				break
			}
		}
	}

	return nil
}

// LoadPaymentMethodDataPlatformPaymentMethodTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPaymentMethodPaymentMethodDatumL) LoadPaymentMethodDataPlatformPaymentMethodTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPaymentMethodPaymentMethodDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPaymentMethodPaymentMethodDatum
	var object *DataPlatformPaymentMethodPaymentMethodDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPaymentMethodPaymentMethodDatum.(*DataPlatformPaymentMethodPaymentMethodDatum)
		if !ok {
			object = new(DataPlatformPaymentMethodPaymentMethodDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPaymentMethodPaymentMethodDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPaymentMethodPaymentMethodDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPaymentMethodPaymentMethodDatum.(*[]*DataPlatformPaymentMethodPaymentMethodDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPaymentMethodPaymentMethodDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPaymentMethodPaymentMethodDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPaymentMethodPaymentMethodDatumR{}
		}
		args = append(args, object.PaymentMethod)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPaymentMethodPaymentMethodDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentMethod {
					continue Outer
				}
			}

			args = append(args, obj.PaymentMethod)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_method_text_data`),
		qm.WhereIn(`data_platform_payment_method_text_data.PaymentMethod in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_payment_method_text_data")
	}

	var resultSlice []*DataPlatformPaymentMethodTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_payment_method_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_payment_method_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_method_text_data")
	}

	if len(dataPlatformPaymentMethodTextDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PaymentMethodDataPlatformPaymentMethodTextData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformPaymentMethodTextDatumR{}
			}
			foreign.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PaymentMethod == foreign.PaymentMethod {
				local.R.PaymentMethodDataPlatformPaymentMethodTextData = append(local.R.PaymentMethodDataPlatformPaymentMethodTextData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformPaymentMethodTextDatumR{}
				}
				foreign.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = local
				break
			}
		}
	}

	return nil
}

// AddPaymentMethodDataPlatformOrdersHeaderData adds the given related objects to the existing relationships
// of the data_platform_payment_method_payment_method_datum, optionally inserting them as new records.
// Appends related to o.R.PaymentMethodDataPlatformOrdersHeaderData.
// Sets related.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum appropriately.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) AddPaymentMethodDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PaymentMethod = o.PaymentMethod
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PaymentMethod"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PaymentMethod, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PaymentMethod = o.PaymentMethod
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPaymentMethodPaymentMethodDatumR{
			PaymentMethodDataPlatformOrdersHeaderData: related,
		}
	} else {
		o.R.PaymentMethodDataPlatformOrdersHeaderData = append(o.R.PaymentMethodDataPlatformOrdersHeaderData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformOrdersHeaderDatumR{
				PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: o,
			}
		} else {
			rel.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = o
		}
	}
	return nil
}

// AddPaymentMethodDataPlatformPaymentMethodTextData adds the given related objects to the existing relationships
// of the data_platform_payment_method_payment_method_datum, optionally inserting them as new records.
// Appends related to o.R.PaymentMethodDataPlatformPaymentMethodTextData.
// Sets related.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum appropriately.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) AddPaymentMethodDataPlatformPaymentMethodTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPaymentMethodTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PaymentMethod = o.PaymentMethod
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_payment_method_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PaymentMethod"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPaymentMethodTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PaymentMethod, rel.PaymentMethod, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PaymentMethod = o.PaymentMethod
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPaymentMethodPaymentMethodDatumR{
			PaymentMethodDataPlatformPaymentMethodTextData: related,
		}
	} else {
		o.R.PaymentMethodDataPlatformPaymentMethodTextData = append(o.R.PaymentMethodDataPlatformPaymentMethodTextData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformPaymentMethodTextDatumR{
				PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: o,
			}
		} else {
			rel.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = o
		}
	}
	return nil
}

// DataPlatformPaymentMethodPaymentMethodData retrieves all the records using an executor.
func DataPlatformPaymentMethodPaymentMethodData(mods ...qm.QueryMod) dataPlatformPaymentMethodPaymentMethodDatumQuery {
	mods = append(mods, qm.From("`data_platform_payment_method_payment_method_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_payment_method_payment_method_data`.*"})
	}

	return dataPlatformPaymentMethodPaymentMethodDatumQuery{q}
}

// FindDataPlatformPaymentMethodPaymentMethodDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, paymentMethod string, selectCols ...string) (*DataPlatformPaymentMethodPaymentMethodDatum, error) {
	dataPlatformPaymentMethodPaymentMethodDatumObj := &DataPlatformPaymentMethodPaymentMethodDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_payment_method_payment_method_data` where `PaymentMethod`=?", sel,
	)

	q := queries.Raw(query, paymentMethod)

	err := q.Bind(ctx, exec, dataPlatformPaymentMethodPaymentMethodDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_payment_method_payment_method_data")
	}

	if err = dataPlatformPaymentMethodPaymentMethodDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformPaymentMethodPaymentMethodDatumObj, err
	}

	return dataPlatformPaymentMethodPaymentMethodDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_payment_method_payment_method_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPaymentMethodPaymentMethodDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPaymentMethodPaymentMethodDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPaymentMethodPaymentMethodDatumInsertCache[key]
	dataPlatformPaymentMethodPaymentMethodDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPaymentMethodPaymentMethodDatumAllColumns,
			dataPlatformPaymentMethodPaymentMethodDatumColumnsWithDefault,
			dataPlatformPaymentMethodPaymentMethodDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPaymentMethodPaymentMethodDatumType, dataPlatformPaymentMethodPaymentMethodDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPaymentMethodPaymentMethodDatumType, dataPlatformPaymentMethodPaymentMethodDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_payment_method_payment_method_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_payment_method_payment_method_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_payment_method_payment_method_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_payment_method_payment_method_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentMethod,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_payment_method_payment_method_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPaymentMethodPaymentMethodDatumInsertCacheMut.Lock()
		dataPlatformPaymentMethodPaymentMethodDatumInsertCache[key] = cache
		dataPlatformPaymentMethodPaymentMethodDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformPaymentMethodPaymentMethodDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformPaymentMethodPaymentMethodDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPaymentMethodPaymentMethodDatumUpdateCache[key]
	dataPlatformPaymentMethodPaymentMethodDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPaymentMethodPaymentMethodDatumAllColumns,
			dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_payment_method_payment_method_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_payment_method_payment_method_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPaymentMethodPaymentMethodDatumType, dataPlatformPaymentMethodPaymentMethodDatumMapping, append(wl, dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_payment_method_payment_method_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_payment_method_payment_method_data")
	}

	if !cached {
		dataPlatformPaymentMethodPaymentMethodDatumUpdateCacheMut.Lock()
		dataPlatformPaymentMethodPaymentMethodDatumUpdateCache[key] = cache
		dataPlatformPaymentMethodPaymentMethodDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPaymentMethodPaymentMethodDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_payment_method_payment_method_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_payment_method_payment_method_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPaymentMethodPaymentMethodDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_payment_method_payment_method_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformPaymentMethodPaymentMethodDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformPaymentMethodPaymentMethodDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformPaymentMethodPaymentMethodDatumUniqueColumns = []string{
	"PaymentMethod",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_payment_method_payment_method_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPaymentMethodPaymentMethodDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPaymentMethodPaymentMethodDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPaymentMethodPaymentMethodDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPaymentMethodPaymentMethodDatumUpsertCache[key]
	dataPlatformPaymentMethodPaymentMethodDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPaymentMethodPaymentMethodDatumAllColumns,
			dataPlatformPaymentMethodPaymentMethodDatumColumnsWithDefault,
			dataPlatformPaymentMethodPaymentMethodDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPaymentMethodPaymentMethodDatumAllColumns,
			dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_payment_method_payment_method_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_payment_method_payment_method_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_payment_method_payment_method_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPaymentMethodPaymentMethodDatumType, dataPlatformPaymentMethodPaymentMethodDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPaymentMethodPaymentMethodDatumType, dataPlatformPaymentMethodPaymentMethodDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_payment_method_payment_method_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPaymentMethodPaymentMethodDatumType, dataPlatformPaymentMethodPaymentMethodDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_payment_method_payment_method_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_payment_method_payment_method_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPaymentMethodPaymentMethodDatumUpsertCacheMut.Lock()
		dataPlatformPaymentMethodPaymentMethodDatumUpsertCache[key] = cache
		dataPlatformPaymentMethodPaymentMethodDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformPaymentMethodPaymentMethodDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformPaymentMethodPaymentMethodDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_payment_method_payment_method_data` WHERE `PaymentMethod`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_payment_method_payment_method_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_payment_method_payment_method_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPaymentMethodPaymentMethodDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformPaymentMethodPaymentMethodDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_payment_method_payment_method_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_payment_method_payment_method_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPaymentMethodPaymentMethodDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformPaymentMethodPaymentMethodDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_payment_method_payment_method_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformPaymentMethodPaymentMethodDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_payment_method_payment_method_data")
	}

	if len(dataPlatformPaymentMethodPaymentMethodDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPaymentMethodPaymentMethodDatum(ctx, exec, o.PaymentMethod)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPaymentMethodPaymentMethodDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPaymentMethodPaymentMethodDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_payment_method_payment_method_data`.* FROM `data_platform_payment_method_payment_method_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPaymentMethodPaymentMethodDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPaymentMethodPaymentMethodDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPaymentMethodPaymentMethodDatumExists checks if the DataPlatformPaymentMethodPaymentMethodDatum row exists.
func DataPlatformPaymentMethodPaymentMethodDatumExists(ctx context.Context, exec boil.ContextExecutor, paymentMethod string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_payment_method_payment_method_data` where `PaymentMethod`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, paymentMethod)
	}
	row := exec.QueryRowContext(ctx, sql, paymentMethod)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_payment_method_payment_method_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPaymentMethodPaymentMethodDatum row exists.
func (o *DataPlatformPaymentMethodPaymentMethodDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPaymentMethodPaymentMethodDatumExists(ctx, exec, o.PaymentMethod)
}
