// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPlannedOrderHeaderDatum is an object representing the database table.
type DataPlatformPlannedOrderHeaderDatum struct {
	PlannedOrder                                    int          `boil:"PlannedOrder" json:"PlannedOrder" toml:"PlannedOrder" yaml:"PlannedOrder"`
	SupplyChainRelationshipID                       int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID               int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID          int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipProductionPlantID        null.Int     `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID,omitempty" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID,omitempty"`
	PlannedOrderType                                string       `boil:"PlannedOrderType" json:"PlannedOrderType" toml:"PlannedOrderType" yaml:"PlannedOrderType"`
	Product                                         string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Buyer                                           int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                          int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DestinationDeliverToParty                       int          `boil:"DestinationDeliverToParty" json:"DestinationDeliverToParty" toml:"DestinationDeliverToParty" yaml:"DestinationDeliverToParty"`
	DestinationDeliverToPlant                       string       `boil:"DestinationDeliverToPlant" json:"DestinationDeliverToPlant" toml:"DestinationDeliverToPlant" yaml:"DestinationDeliverToPlant"`
	DestinationDeliverToPlantStorageLocation        null.String  `boil:"DestinationDeliverToPlantStorageLocation" json:"DestinationDeliverToPlantStorageLocation,omitempty" toml:"DestinationDeliverToPlantStorageLocation" yaml:"DestinationDeliverToPlantStorageLocation,omitempty"`
	DepartureDeliverFromParty                       int          `boil:"DepartureDeliverFromParty" json:"DepartureDeliverFromParty" toml:"DepartureDeliverFromParty" yaml:"DepartureDeliverFromParty"`
	DepartureDeliverFromPlant                       string       `boil:"DepartureDeliverFromPlant" json:"DepartureDeliverFromPlant" toml:"DepartureDeliverFromPlant" yaml:"DepartureDeliverFromPlant"`
	DepartureDeliverFromPlantStorageLocation        null.String  `boil:"DepartureDeliverFromPlantStorageLocation" json:"DepartureDeliverFromPlantStorageLocation,omitempty" toml:"DepartureDeliverFromPlantStorageLocation" yaml:"DepartureDeliverFromPlantStorageLocation,omitempty"`
	OwnerProductionPlantBusinessPartner             null.Int     `boil:"OwnerProductionPlantBusinessPartner" json:"OwnerProductionPlantBusinessPartner,omitempty" toml:"OwnerProductionPlantBusinessPartner" yaml:"OwnerProductionPlantBusinessPartner,omitempty"`
	OwnerProductionPlant                            null.String  `boil:"OwnerProductionPlant" json:"OwnerProductionPlant,omitempty" toml:"OwnerProductionPlant" yaml:"OwnerProductionPlant,omitempty"`
	OwnerProductionPlantStorageLocation             null.String  `boil:"OwnerProductionPlantStorageLocation" json:"OwnerProductionPlantStorageLocation,omitempty" toml:"OwnerProductionPlantStorageLocation" yaml:"OwnerProductionPlantStorageLocation,omitempty"`
	ProductBaseUnit                                 string       `boil:"ProductBaseUnit" json:"ProductBaseUnit" toml:"ProductBaseUnit" yaml:"ProductBaseUnit"`
	MRPArea                                         null.String  `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	MRPController                                   null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ProductionVersion                               null.Int     `boil:"ProductionVersion" json:"ProductionVersion,omitempty" toml:"ProductionVersion" yaml:"ProductionVersion,omitempty"`
	BillOfMaterial                                  null.Int     `boil:"BillOfMaterial" json:"BillOfMaterial,omitempty" toml:"BillOfMaterial" yaml:"BillOfMaterial,omitempty"`
	Operations                                      null.Int     `boil:"Operations" json:"Operations,omitempty" toml:"Operations" yaml:"Operations,omitempty"`
	PlannedOrderQuantityInBaseUnit                  float32      `boil:"PlannedOrderQuantityInBaseUnit" json:"PlannedOrderQuantityInBaseUnit" toml:"PlannedOrderQuantityInBaseUnit" yaml:"PlannedOrderQuantityInBaseUnit"`
	PlannedOrderQuantityInDestinationDeliveryUnit   float32      `boil:"PlannedOrderQuantityInDestinationDeliveryUnit" json:"PlannedOrderQuantityInDestinationDeliveryUnit" toml:"PlannedOrderQuantityInDestinationDeliveryUnit" yaml:"PlannedOrderQuantityInDestinationDeliveryUnit"`
	PlannedOrderQuantityInDepartureDeliveryUnit     float32      `boil:"PlannedOrderQuantityInDepartureDeliveryUnit" json:"PlannedOrderQuantityInDepartureDeliveryUnit" toml:"PlannedOrderQuantityInDepartureDeliveryUnit" yaml:"PlannedOrderQuantityInDepartureDeliveryUnit"`
	PlannedOrderQuantityInDestinationProductionUnit null.Float32 `boil:"PlannedOrderQuantityInDestinationProductionUnit" json:"PlannedOrderQuantityInDestinationProductionUnit,omitempty" toml:"PlannedOrderQuantityInDestinationProductionUnit" yaml:"PlannedOrderQuantityInDestinationProductionUnit,omitempty"`
	PlannedOrderQuantityInDepartureProductionUnit   null.Float32 `boil:"PlannedOrderQuantityInDepartureProductionUnit" json:"PlannedOrderQuantityInDepartureProductionUnit,omitempty" toml:"PlannedOrderQuantityInDepartureProductionUnit" yaml:"PlannedOrderQuantityInDepartureProductionUnit,omitempty"`
	PlannedOrderDestinationDeliveryUnit             string       `boil:"PlannedOrderDestinationDeliveryUnit" json:"PlannedOrderDestinationDeliveryUnit" toml:"PlannedOrderDestinationDeliveryUnit" yaml:"PlannedOrderDestinationDeliveryUnit"`
	PlannedOrderDepartureDeliveryUnit               string       `boil:"PlannedOrderDepartureDeliveryUnit" json:"PlannedOrderDepartureDeliveryUnit" toml:"PlannedOrderDepartureDeliveryUnit" yaml:"PlannedOrderDepartureDeliveryUnit"`
	PlannedOrderDestinationProductionUnit           null.String  `boil:"PlannedOrderDestinationProductionUnit" json:"PlannedOrderDestinationProductionUnit,omitempty" toml:"PlannedOrderDestinationProductionUnit" yaml:"PlannedOrderDestinationProductionUnit,omitempty"`
	PlannedOrderDepartureProductionUnit             null.String  `boil:"PlannedOrderDepartureProductionUnit" json:"PlannedOrderDepartureProductionUnit,omitempty" toml:"PlannedOrderDepartureProductionUnit" yaml:"PlannedOrderDepartureProductionUnit,omitempty"`
	PlannedOrderPlannedScrapQtyInBaseUnit           null.Float32 `boil:"PlannedOrderPlannedScrapQtyInBaseUnit" json:"PlannedOrderPlannedScrapQtyInBaseUnit,omitempty" toml:"PlannedOrderPlannedScrapQtyInBaseUnit" yaml:"PlannedOrderPlannedScrapQtyInBaseUnit,omitempty"`
	PlannedOrderPlannedStartDate                    string       `boil:"PlannedOrderPlannedStartDate" json:"PlannedOrderPlannedStartDate" toml:"PlannedOrderPlannedStartDate" yaml:"PlannedOrderPlannedStartDate"`
	PlannedOrderPlannedStartTime                    string       `boil:"PlannedOrderPlannedStartTime" json:"PlannedOrderPlannedStartTime" toml:"PlannedOrderPlannedStartTime" yaml:"PlannedOrderPlannedStartTime"`
	PlannedOrderPlannedEndDate                      string       `boil:"PlannedOrderPlannedEndDate" json:"PlannedOrderPlannedEndDate" toml:"PlannedOrderPlannedEndDate" yaml:"PlannedOrderPlannedEndDate"`
	PlannedOrderPlannedEndTime                      string       `boil:"PlannedOrderPlannedEndTime" json:"PlannedOrderPlannedEndTime" toml:"PlannedOrderPlannedEndTime" yaml:"PlannedOrderPlannedEndTime"`
	OrderID                                         null.Int     `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                                       null.Int     `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	Project                                         null.Int     `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	WBSElement                                      null.Int     `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	Reservation                                     null.Int     `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	ReservationItem                                 null.Int     `boil:"ReservationItem" json:"ReservationItem,omitempty" toml:"ReservationItem" yaml:"ReservationItem,omitempty"`
	PlannedOrderLongText                            null.String  `boil:"PlannedOrderLongText" json:"PlannedOrderLongText,omitempty" toml:"PlannedOrderLongText" yaml:"PlannedOrderLongText,omitempty"`
	LastScheduledDate                               null.String  `boil:"LastScheduledDate" json:"LastScheduledDate,omitempty" toml:"LastScheduledDate" yaml:"LastScheduledDate,omitempty"`
	ScheduledBasicEndDate                           null.String  `boil:"ScheduledBasicEndDate" json:"ScheduledBasicEndDate,omitempty" toml:"ScheduledBasicEndDate" yaml:"ScheduledBasicEndDate,omitempty"`
	ScheduledBasicEndTime                           null.String  `boil:"ScheduledBasicEndTime" json:"ScheduledBasicEndTime,omitempty" toml:"ScheduledBasicEndTime" yaml:"ScheduledBasicEndTime,omitempty"`
	ScheduledBasicStartDate                         null.String  `boil:"ScheduledBasicStartDate" json:"ScheduledBasicStartDate,omitempty" toml:"ScheduledBasicStartDate" yaml:"ScheduledBasicStartDate,omitempty"`
	ScheduledBasicStartTime                         null.String  `boil:"ScheduledBasicStartTime" json:"ScheduledBasicStartTime,omitempty" toml:"ScheduledBasicStartTime" yaml:"ScheduledBasicStartTime,omitempty"`
	SchedulingType                                  null.String  `boil:"SchedulingType" json:"SchedulingType,omitempty" toml:"SchedulingType" yaml:"SchedulingType,omitempty"`
	PlannedOrderIsReleased                          null.Bool    `boil:"PlannedOrderIsReleased" json:"PlannedOrderIsReleased,omitempty" toml:"PlannedOrderIsReleased" yaml:"PlannedOrderIsReleased,omitempty"`
	CreationDate                                    string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                                    string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                                  string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                                  string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsMarkedForDeletion                             null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPlannedOrderHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPlannedOrderHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPlannedOrderHeaderDatumColumns = struct {
	PlannedOrder                                    string
	SupplyChainRelationshipID                       string
	SupplyChainRelationshipDeliveryID               string
	SupplyChainRelationshipDeliveryPlantID          string
	SupplyChainRelationshipProductionPlantID        string
	PlannedOrderType                                string
	Product                                         string
	Buyer                                           string
	Seller                                          string
	DestinationDeliverToParty                       string
	DestinationDeliverToPlant                       string
	DestinationDeliverToPlantStorageLocation        string
	DepartureDeliverFromParty                       string
	DepartureDeliverFromPlant                       string
	DepartureDeliverFromPlantStorageLocation        string
	OwnerProductionPlantBusinessPartner             string
	OwnerProductionPlant                            string
	OwnerProductionPlantStorageLocation             string
	ProductBaseUnit                                 string
	MRPArea                                         string
	MRPController                                   string
	ProductionVersion                               string
	BillOfMaterial                                  string
	Operations                                      string
	PlannedOrderQuantityInBaseUnit                  string
	PlannedOrderQuantityInDestinationDeliveryUnit   string
	PlannedOrderQuantityInDepartureDeliveryUnit     string
	PlannedOrderQuantityInDestinationProductionUnit string
	PlannedOrderQuantityInDepartureProductionUnit   string
	PlannedOrderDestinationDeliveryUnit             string
	PlannedOrderDepartureDeliveryUnit               string
	PlannedOrderDestinationProductionUnit           string
	PlannedOrderDepartureProductionUnit             string
	PlannedOrderPlannedScrapQtyInBaseUnit           string
	PlannedOrderPlannedStartDate                    string
	PlannedOrderPlannedStartTime                    string
	PlannedOrderPlannedEndDate                      string
	PlannedOrderPlannedEndTime                      string
	OrderID                                         string
	OrderItem                                       string
	Project                                         string
	WBSElement                                      string
	Reservation                                     string
	ReservationItem                                 string
	PlannedOrderLongText                            string
	LastScheduledDate                               string
	ScheduledBasicEndDate                           string
	ScheduledBasicEndTime                           string
	ScheduledBasicStartDate                         string
	ScheduledBasicStartTime                         string
	SchedulingType                                  string
	PlannedOrderIsReleased                          string
	CreationDate                                    string
	CreationTime                                    string
	LastChangeDate                                  string
	LastChangeTime                                  string
	IsMarkedForDeletion                             string
}{
	PlannedOrder:                                    "PlannedOrder",
	SupplyChainRelationshipID:                       "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:               "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:          "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID:        "SupplyChainRelationshipProductionPlantID",
	PlannedOrderType:                                "PlannedOrderType",
	Product:                                         "Product",
	Buyer:                                           "Buyer",
	Seller:                                          "Seller",
	DestinationDeliverToParty:                       "DestinationDeliverToParty",
	DestinationDeliverToPlant:                       "DestinationDeliverToPlant",
	DestinationDeliverToPlantStorageLocation:        "DestinationDeliverToPlantStorageLocation",
	DepartureDeliverFromParty:                       "DepartureDeliverFromParty",
	DepartureDeliverFromPlant:                       "DepartureDeliverFromPlant",
	DepartureDeliverFromPlantStorageLocation:        "DepartureDeliverFromPlantStorageLocation",
	OwnerProductionPlantBusinessPartner:             "OwnerProductionPlantBusinessPartner",
	OwnerProductionPlant:                            "OwnerProductionPlant",
	OwnerProductionPlantStorageLocation:             "OwnerProductionPlantStorageLocation",
	ProductBaseUnit:                                 "ProductBaseUnit",
	MRPArea:                                         "MRPArea",
	MRPController:                                   "MRPController",
	ProductionVersion:                               "ProductionVersion",
	BillOfMaterial:                                  "BillOfMaterial",
	Operations:                                      "Operations",
	PlannedOrderQuantityInBaseUnit:                  "PlannedOrderQuantityInBaseUnit",
	PlannedOrderQuantityInDestinationDeliveryUnit:   "PlannedOrderQuantityInDestinationDeliveryUnit",
	PlannedOrderQuantityInDepartureDeliveryUnit:     "PlannedOrderQuantityInDepartureDeliveryUnit",
	PlannedOrderQuantityInDestinationProductionUnit: "PlannedOrderQuantityInDestinationProductionUnit",
	PlannedOrderQuantityInDepartureProductionUnit:   "PlannedOrderQuantityInDepartureProductionUnit",
	PlannedOrderDestinationDeliveryUnit:             "PlannedOrderDestinationDeliveryUnit",
	PlannedOrderDepartureDeliveryUnit:               "PlannedOrderDepartureDeliveryUnit",
	PlannedOrderDestinationProductionUnit:           "PlannedOrderDestinationProductionUnit",
	PlannedOrderDepartureProductionUnit:             "PlannedOrderDepartureProductionUnit",
	PlannedOrderPlannedScrapQtyInBaseUnit:           "PlannedOrderPlannedScrapQtyInBaseUnit",
	PlannedOrderPlannedStartDate:                    "PlannedOrderPlannedStartDate",
	PlannedOrderPlannedStartTime:                    "PlannedOrderPlannedStartTime",
	PlannedOrderPlannedEndDate:                      "PlannedOrderPlannedEndDate",
	PlannedOrderPlannedEndTime:                      "PlannedOrderPlannedEndTime",
	OrderID:                                         "OrderID",
	OrderItem:                                       "OrderItem",
	Project:                                         "Project",
	WBSElement:                                      "WBSElement",
	Reservation:                                     "Reservation",
	ReservationItem:                                 "ReservationItem",
	PlannedOrderLongText:                            "PlannedOrderLongText",
	LastScheduledDate:                               "LastScheduledDate",
	ScheduledBasicEndDate:                           "ScheduledBasicEndDate",
	ScheduledBasicEndTime:                           "ScheduledBasicEndTime",
	ScheduledBasicStartDate:                         "ScheduledBasicStartDate",
	ScheduledBasicStartTime:                         "ScheduledBasicStartTime",
	SchedulingType:                                  "SchedulingType",
	PlannedOrderIsReleased:                          "PlannedOrderIsReleased",
	CreationDate:                                    "CreationDate",
	CreationTime:                                    "CreationTime",
	LastChangeDate:                                  "LastChangeDate",
	LastChangeTime:                                  "LastChangeTime",
	IsMarkedForDeletion:                             "IsMarkedForDeletion",
}

var DataPlatformPlannedOrderHeaderDatumTableColumns = struct {
	PlannedOrder                                    string
	SupplyChainRelationshipID                       string
	SupplyChainRelationshipDeliveryID               string
	SupplyChainRelationshipDeliveryPlantID          string
	SupplyChainRelationshipProductionPlantID        string
	PlannedOrderType                                string
	Product                                         string
	Buyer                                           string
	Seller                                          string
	DestinationDeliverToParty                       string
	DestinationDeliverToPlant                       string
	DestinationDeliverToPlantStorageLocation        string
	DepartureDeliverFromParty                       string
	DepartureDeliverFromPlant                       string
	DepartureDeliverFromPlantStorageLocation        string
	OwnerProductionPlantBusinessPartner             string
	OwnerProductionPlant                            string
	OwnerProductionPlantStorageLocation             string
	ProductBaseUnit                                 string
	MRPArea                                         string
	MRPController                                   string
	ProductionVersion                               string
	BillOfMaterial                                  string
	Operations                                      string
	PlannedOrderQuantityInBaseUnit                  string
	PlannedOrderQuantityInDestinationDeliveryUnit   string
	PlannedOrderQuantityInDepartureDeliveryUnit     string
	PlannedOrderQuantityInDestinationProductionUnit string
	PlannedOrderQuantityInDepartureProductionUnit   string
	PlannedOrderDestinationDeliveryUnit             string
	PlannedOrderDepartureDeliveryUnit               string
	PlannedOrderDestinationProductionUnit           string
	PlannedOrderDepartureProductionUnit             string
	PlannedOrderPlannedScrapQtyInBaseUnit           string
	PlannedOrderPlannedStartDate                    string
	PlannedOrderPlannedStartTime                    string
	PlannedOrderPlannedEndDate                      string
	PlannedOrderPlannedEndTime                      string
	OrderID                                         string
	OrderItem                                       string
	Project                                         string
	WBSElement                                      string
	Reservation                                     string
	ReservationItem                                 string
	PlannedOrderLongText                            string
	LastScheduledDate                               string
	ScheduledBasicEndDate                           string
	ScheduledBasicEndTime                           string
	ScheduledBasicStartDate                         string
	ScheduledBasicStartTime                         string
	SchedulingType                                  string
	PlannedOrderIsReleased                          string
	CreationDate                                    string
	CreationTime                                    string
	LastChangeDate                                  string
	LastChangeTime                                  string
	IsMarkedForDeletion                             string
}{
	PlannedOrder:                                    "data_platform_planned_order_header_data.PlannedOrder",
	SupplyChainRelationshipID:                       "data_platform_planned_order_header_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:               "data_platform_planned_order_header_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:          "data_platform_planned_order_header_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID:        "data_platform_planned_order_header_data.SupplyChainRelationshipProductionPlantID",
	PlannedOrderType:                                "data_platform_planned_order_header_data.PlannedOrderType",
	Product:                                         "data_platform_planned_order_header_data.Product",
	Buyer:                                           "data_platform_planned_order_header_data.Buyer",
	Seller:                                          "data_platform_planned_order_header_data.Seller",
	DestinationDeliverToParty:                       "data_platform_planned_order_header_data.DestinationDeliverToParty",
	DestinationDeliverToPlant:                       "data_platform_planned_order_header_data.DestinationDeliverToPlant",
	DestinationDeliverToPlantStorageLocation:        "data_platform_planned_order_header_data.DestinationDeliverToPlantStorageLocation",
	DepartureDeliverFromParty:                       "data_platform_planned_order_header_data.DepartureDeliverFromParty",
	DepartureDeliverFromPlant:                       "data_platform_planned_order_header_data.DepartureDeliverFromPlant",
	DepartureDeliverFromPlantStorageLocation:        "data_platform_planned_order_header_data.DepartureDeliverFromPlantStorageLocation",
	OwnerProductionPlantBusinessPartner:             "data_platform_planned_order_header_data.OwnerProductionPlantBusinessPartner",
	OwnerProductionPlant:                            "data_platform_planned_order_header_data.OwnerProductionPlant",
	OwnerProductionPlantStorageLocation:             "data_platform_planned_order_header_data.OwnerProductionPlantStorageLocation",
	ProductBaseUnit:                                 "data_platform_planned_order_header_data.ProductBaseUnit",
	MRPArea:                                         "data_platform_planned_order_header_data.MRPArea",
	MRPController:                                   "data_platform_planned_order_header_data.MRPController",
	ProductionVersion:                               "data_platform_planned_order_header_data.ProductionVersion",
	BillOfMaterial:                                  "data_platform_planned_order_header_data.BillOfMaterial",
	Operations:                                      "data_platform_planned_order_header_data.Operations",
	PlannedOrderQuantityInBaseUnit:                  "data_platform_planned_order_header_data.PlannedOrderQuantityInBaseUnit",
	PlannedOrderQuantityInDestinationDeliveryUnit:   "data_platform_planned_order_header_data.PlannedOrderQuantityInDestinationDeliveryUnit",
	PlannedOrderQuantityInDepartureDeliveryUnit:     "data_platform_planned_order_header_data.PlannedOrderQuantityInDepartureDeliveryUnit",
	PlannedOrderQuantityInDestinationProductionUnit: "data_platform_planned_order_header_data.PlannedOrderQuantityInDestinationProductionUnit",
	PlannedOrderQuantityInDepartureProductionUnit:   "data_platform_planned_order_header_data.PlannedOrderQuantityInDepartureProductionUnit",
	PlannedOrderDestinationDeliveryUnit:             "data_platform_planned_order_header_data.PlannedOrderDestinationDeliveryUnit",
	PlannedOrderDepartureDeliveryUnit:               "data_platform_planned_order_header_data.PlannedOrderDepartureDeliveryUnit",
	PlannedOrderDestinationProductionUnit:           "data_platform_planned_order_header_data.PlannedOrderDestinationProductionUnit",
	PlannedOrderDepartureProductionUnit:             "data_platform_planned_order_header_data.PlannedOrderDepartureProductionUnit",
	PlannedOrderPlannedScrapQtyInBaseUnit:           "data_platform_planned_order_header_data.PlannedOrderPlannedScrapQtyInBaseUnit",
	PlannedOrderPlannedStartDate:                    "data_platform_planned_order_header_data.PlannedOrderPlannedStartDate",
	PlannedOrderPlannedStartTime:                    "data_platform_planned_order_header_data.PlannedOrderPlannedStartTime",
	PlannedOrderPlannedEndDate:                      "data_platform_planned_order_header_data.PlannedOrderPlannedEndDate",
	PlannedOrderPlannedEndTime:                      "data_platform_planned_order_header_data.PlannedOrderPlannedEndTime",
	OrderID:                                         "data_platform_planned_order_header_data.OrderID",
	OrderItem:                                       "data_platform_planned_order_header_data.OrderItem",
	Project:                                         "data_platform_planned_order_header_data.Project",
	WBSElement:                                      "data_platform_planned_order_header_data.WBSElement",
	Reservation:                                     "data_platform_planned_order_header_data.Reservation",
	ReservationItem:                                 "data_platform_planned_order_header_data.ReservationItem",
	PlannedOrderLongText:                            "data_platform_planned_order_header_data.PlannedOrderLongText",
	LastScheduledDate:                               "data_platform_planned_order_header_data.LastScheduledDate",
	ScheduledBasicEndDate:                           "data_platform_planned_order_header_data.ScheduledBasicEndDate",
	ScheduledBasicEndTime:                           "data_platform_planned_order_header_data.ScheduledBasicEndTime",
	ScheduledBasicStartDate:                         "data_platform_planned_order_header_data.ScheduledBasicStartDate",
	ScheduledBasicStartTime:                         "data_platform_planned_order_header_data.ScheduledBasicStartTime",
	SchedulingType:                                  "data_platform_planned_order_header_data.SchedulingType",
	PlannedOrderIsReleased:                          "data_platform_planned_order_header_data.PlannedOrderIsReleased",
	CreationDate:                                    "data_platform_planned_order_header_data.CreationDate",
	CreationTime:                                    "data_platform_planned_order_header_data.CreationTime",
	LastChangeDate:                                  "data_platform_planned_order_header_data.LastChangeDate",
	LastChangeTime:                                  "data_platform_planned_order_header_data.LastChangeTime",
	IsMarkedForDeletion:                             "data_platform_planned_order_header_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPlannedOrderHeaderDatumWhere = struct {
	PlannedOrder                                    whereHelperint
	SupplyChainRelationshipID                       whereHelperint
	SupplyChainRelationshipDeliveryID               whereHelperint
	SupplyChainRelationshipDeliveryPlantID          whereHelperint
	SupplyChainRelationshipProductionPlantID        whereHelpernull_Int
	PlannedOrderType                                whereHelperstring
	Product                                         whereHelperstring
	Buyer                                           whereHelperint
	Seller                                          whereHelperint
	DestinationDeliverToParty                       whereHelperint
	DestinationDeliverToPlant                       whereHelperstring
	DestinationDeliverToPlantStorageLocation        whereHelpernull_String
	DepartureDeliverFromParty                       whereHelperint
	DepartureDeliverFromPlant                       whereHelperstring
	DepartureDeliverFromPlantStorageLocation        whereHelpernull_String
	OwnerProductionPlantBusinessPartner             whereHelpernull_Int
	OwnerProductionPlant                            whereHelpernull_String
	OwnerProductionPlantStorageLocation             whereHelpernull_String
	ProductBaseUnit                                 whereHelperstring
	MRPArea                                         whereHelpernull_String
	MRPController                                   whereHelpernull_String
	ProductionVersion                               whereHelpernull_Int
	BillOfMaterial                                  whereHelpernull_Int
	Operations                                      whereHelpernull_Int
	PlannedOrderQuantityInBaseUnit                  whereHelperfloat32
	PlannedOrderQuantityInDestinationDeliveryUnit   whereHelperfloat32
	PlannedOrderQuantityInDepartureDeliveryUnit     whereHelperfloat32
	PlannedOrderQuantityInDestinationProductionUnit whereHelpernull_Float32
	PlannedOrderQuantityInDepartureProductionUnit   whereHelpernull_Float32
	PlannedOrderDestinationDeliveryUnit             whereHelperstring
	PlannedOrderDepartureDeliveryUnit               whereHelperstring
	PlannedOrderDestinationProductionUnit           whereHelpernull_String
	PlannedOrderDepartureProductionUnit             whereHelpernull_String
	PlannedOrderPlannedScrapQtyInBaseUnit           whereHelpernull_Float32
	PlannedOrderPlannedStartDate                    whereHelperstring
	PlannedOrderPlannedStartTime                    whereHelperstring
	PlannedOrderPlannedEndDate                      whereHelperstring
	PlannedOrderPlannedEndTime                      whereHelperstring
	OrderID                                         whereHelpernull_Int
	OrderItem                                       whereHelpernull_Int
	Project                                         whereHelpernull_Int
	WBSElement                                      whereHelpernull_Int
	Reservation                                     whereHelpernull_Int
	ReservationItem                                 whereHelpernull_Int
	PlannedOrderLongText                            whereHelpernull_String
	LastScheduledDate                               whereHelpernull_String
	ScheduledBasicEndDate                           whereHelpernull_String
	ScheduledBasicEndTime                           whereHelpernull_String
	ScheduledBasicStartDate                         whereHelpernull_String
	ScheduledBasicStartTime                         whereHelpernull_String
	SchedulingType                                  whereHelpernull_String
	PlannedOrderIsReleased                          whereHelpernull_Bool
	CreationDate                                    whereHelperstring
	CreationTime                                    whereHelperstring
	LastChangeDate                                  whereHelperstring
	LastChangeTime                                  whereHelperstring
	IsMarkedForDeletion                             whereHelpernull_Bool
}{
	PlannedOrder:                                    whereHelperint{field: "`data_platform_planned_order_header_data`.`PlannedOrder`"},
	SupplyChainRelationshipID:                       whereHelperint{field: "`data_platform_planned_order_header_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:               whereHelperint{field: "`data_platform_planned_order_header_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:          whereHelperint{field: "`data_platform_planned_order_header_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipProductionPlantID:        whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`SupplyChainRelationshipProductionPlantID`"},
	PlannedOrderType:                                whereHelperstring{field: "`data_platform_planned_order_header_data`.`PlannedOrderType`"},
	Product:                                         whereHelperstring{field: "`data_platform_planned_order_header_data`.`Product`"},
	Buyer:                                           whereHelperint{field: "`data_platform_planned_order_header_data`.`Buyer`"},
	Seller:                                          whereHelperint{field: "`data_platform_planned_order_header_data`.`Seller`"},
	DestinationDeliverToParty:                       whereHelperint{field: "`data_platform_planned_order_header_data`.`DestinationDeliverToParty`"},
	DestinationDeliverToPlant:                       whereHelperstring{field: "`data_platform_planned_order_header_data`.`DestinationDeliverToPlant`"},
	DestinationDeliverToPlantStorageLocation:        whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`DestinationDeliverToPlantStorageLocation`"},
	DepartureDeliverFromParty:                       whereHelperint{field: "`data_platform_planned_order_header_data`.`DepartureDeliverFromParty`"},
	DepartureDeliverFromPlant:                       whereHelperstring{field: "`data_platform_planned_order_header_data`.`DepartureDeliverFromPlant`"},
	DepartureDeliverFromPlantStorageLocation:        whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`DepartureDeliverFromPlantStorageLocation`"},
	OwnerProductionPlantBusinessPartner:             whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`OwnerProductionPlantBusinessPartner`"},
	OwnerProductionPlant:                            whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`OwnerProductionPlant`"},
	OwnerProductionPlantStorageLocation:             whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`OwnerProductionPlantStorageLocation`"},
	ProductBaseUnit:                                 whereHelperstring{field: "`data_platform_planned_order_header_data`.`ProductBaseUnit`"},
	MRPArea:                                         whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`MRPArea`"},
	MRPController:                                   whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`MRPController`"},
	ProductionVersion:                               whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`ProductionVersion`"},
	BillOfMaterial:                                  whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`BillOfMaterial`"},
	Operations:                                      whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`Operations`"},
	PlannedOrderQuantityInBaseUnit:                  whereHelperfloat32{field: "`data_platform_planned_order_header_data`.`PlannedOrderQuantityInBaseUnit`"},
	PlannedOrderQuantityInDestinationDeliveryUnit:   whereHelperfloat32{field: "`data_platform_planned_order_header_data`.`PlannedOrderQuantityInDestinationDeliveryUnit`"},
	PlannedOrderQuantityInDepartureDeliveryUnit:     whereHelperfloat32{field: "`data_platform_planned_order_header_data`.`PlannedOrderQuantityInDepartureDeliveryUnit`"},
	PlannedOrderQuantityInDestinationProductionUnit: whereHelpernull_Float32{field: "`data_platform_planned_order_header_data`.`PlannedOrderQuantityInDestinationProductionUnit`"},
	PlannedOrderQuantityInDepartureProductionUnit:   whereHelpernull_Float32{field: "`data_platform_planned_order_header_data`.`PlannedOrderQuantityInDepartureProductionUnit`"},
	PlannedOrderDestinationDeliveryUnit:             whereHelperstring{field: "`data_platform_planned_order_header_data`.`PlannedOrderDestinationDeliveryUnit`"},
	PlannedOrderDepartureDeliveryUnit:               whereHelperstring{field: "`data_platform_planned_order_header_data`.`PlannedOrderDepartureDeliveryUnit`"},
	PlannedOrderDestinationProductionUnit:           whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`PlannedOrderDestinationProductionUnit`"},
	PlannedOrderDepartureProductionUnit:             whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`PlannedOrderDepartureProductionUnit`"},
	PlannedOrderPlannedScrapQtyInBaseUnit:           whereHelpernull_Float32{field: "`data_platform_planned_order_header_data`.`PlannedOrderPlannedScrapQtyInBaseUnit`"},
	PlannedOrderPlannedStartDate:                    whereHelperstring{field: "`data_platform_planned_order_header_data`.`PlannedOrderPlannedStartDate`"},
	PlannedOrderPlannedStartTime:                    whereHelperstring{field: "`data_platform_planned_order_header_data`.`PlannedOrderPlannedStartTime`"},
	PlannedOrderPlannedEndDate:                      whereHelperstring{field: "`data_platform_planned_order_header_data`.`PlannedOrderPlannedEndDate`"},
	PlannedOrderPlannedEndTime:                      whereHelperstring{field: "`data_platform_planned_order_header_data`.`PlannedOrderPlannedEndTime`"},
	OrderID:                                         whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`OrderID`"},
	OrderItem:                                       whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`OrderItem`"},
	Project:                                         whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`Project`"},
	WBSElement:                                      whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`WBSElement`"},
	Reservation:                                     whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`Reservation`"},
	ReservationItem:                                 whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`ReservationItem`"},
	PlannedOrderLongText:                            whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`PlannedOrderLongText`"},
	LastScheduledDate:                               whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`LastScheduledDate`"},
	ScheduledBasicEndDate:                           whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`ScheduledBasicEndDate`"},
	ScheduledBasicEndTime:                           whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`ScheduledBasicEndTime`"},
	ScheduledBasicStartDate:                         whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`ScheduledBasicStartDate`"},
	ScheduledBasicStartTime:                         whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`ScheduledBasicStartTime`"},
	SchedulingType:                                  whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`SchedulingType`"},
	PlannedOrderIsReleased:                          whereHelpernull_Bool{field: "`data_platform_planned_order_header_data`.`PlannedOrderIsReleased`"},
	CreationDate:                                    whereHelperstring{field: "`data_platform_planned_order_header_data`.`CreationDate`"},
	CreationTime:                                    whereHelperstring{field: "`data_platform_planned_order_header_data`.`CreationTime`"},
	LastChangeDate:                                  whereHelperstring{field: "`data_platform_planned_order_header_data`.`LastChangeDate`"},
	LastChangeTime:                                  whereHelperstring{field: "`data_platform_planned_order_header_data`.`LastChangeTime`"},
	IsMarkedForDeletion:                             whereHelpernull_Bool{field: "`data_platform_planned_order_header_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPlannedOrderHeaderDatumRels is where relationship names are stored.
var DataPlatformPlannedOrderHeaderDatumRels = struct {
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum                          string
	Operation                                                                    string
	OrderIDDataPlatformOrdersItemDatum                                           string
	OwnerProductionPlantDataPlatformPlantStorageLocationDatum                    string
	PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum   string
	PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum string
	PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum string
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum                     string
	ProductionVersionDataPlatformProductionVersionHeaderDatum                    string
	BuyerDataPlatformSCRDeliveryRelationDatum                                    string
	BuyerDataPlatformSCRGeneralDatum                                             string
	PlannedOrderDataPlatformPlannedOrderHeaderDocData                            string
	PlannedOrderDataPlatformPlannedOrderItemData                                 string
}{
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum: "BillOfMaterialDataPlatformBillOfMaterialHeaderDatum",
	Operation:                          "Operation",
	OrderIDDataPlatformOrdersItemDatum: "OrderIDDataPlatformOrdersItemDatum",
	OwnerProductionPlantDataPlatformPlantStorageLocationDatum:                    "OwnerProductionPlantDataPlatformPlantStorageLocationDatum",
	PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum:   "PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: "PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum",
	PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: "PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum:                     "ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductionVersionDataPlatformProductionVersionHeaderDatum:                    "ProductionVersionDataPlatformProductionVersionHeaderDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:                                    "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:                                             "BuyerDataPlatformSCRGeneralDatum",
	PlannedOrderDataPlatformPlannedOrderHeaderDocData:                            "PlannedOrderDataPlatformPlannedOrderHeaderDocData",
	PlannedOrderDataPlatformPlannedOrderItemData:                                 "PlannedOrderDataPlatformPlannedOrderItemData",
}

// dataPlatformPlannedOrderHeaderDatumR is where relationships are stored.
type dataPlatformPlannedOrderHeaderDatumR struct {
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum                          *DataPlatformBillOfMaterialHeaderDatum      `boil:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" json:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" toml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" yaml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum"`
	Operation                                                                    *DataPlatformOperationsHeaderDatum          `boil:"Operation" json:"Operation" toml:"Operation" yaml:"Operation"`
	OrderIDDataPlatformOrdersItemDatum                                           *DataPlatformOrdersItemDatum                `boil:"OrderIDDataPlatformOrdersItemDatum" json:"OrderIDDataPlatformOrdersItemDatum" toml:"OrderIDDataPlatformOrdersItemDatum" yaml:"OrderIDDataPlatformOrdersItemDatum"`
	OwnerProductionPlantDataPlatformPlantStorageLocationDatum                    *DataPlatformPlantStorageLocationDatum      `boil:"OwnerProductionPlantDataPlatformPlantStorageLocationDatum" json:"OwnerProductionPlantDataPlatformPlantStorageLocationDatum" toml:"OwnerProductionPlantDataPlatformPlantStorageLocationDatum" yaml:"OwnerProductionPlantDataPlatformPlantStorageLocationDatum"`
	PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum   *DataPlatformQuantityUnitQuantityUnitDatum  `boil:"PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum  `boil:"PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum  `boil:"PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum                     *DataPlatformQuantityUnitQuantityUnitDatum  `boil:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductionVersionDataPlatformProductionVersionHeaderDatum                    *DataPlatformProductionVersionHeaderDatum   `boil:"ProductionVersionDataPlatformProductionVersionHeaderDatum" json:"ProductionVersionDataPlatformProductionVersionHeaderDatum" toml:"ProductionVersionDataPlatformProductionVersionHeaderDatum" yaml:"ProductionVersionDataPlatformProductionVersionHeaderDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum                                    *DataPlatformSCRDeliveryRelationDatum       `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum                                             *DataPlatformSCRGeneralDatum                `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	PlannedOrderDataPlatformPlannedOrderHeaderDocData                            DataPlatformPlannedOrderHeaderDocDatumSlice `boil:"PlannedOrderDataPlatformPlannedOrderHeaderDocData" json:"PlannedOrderDataPlatformPlannedOrderHeaderDocData" toml:"PlannedOrderDataPlatformPlannedOrderHeaderDocData" yaml:"PlannedOrderDataPlatformPlannedOrderHeaderDocData"`
	PlannedOrderDataPlatformPlannedOrderItemData                                 DataPlatformPlannedOrderItemDatumSlice      `boil:"PlannedOrderDataPlatformPlannedOrderItemData" json:"PlannedOrderDataPlatformPlannedOrderItemData" toml:"PlannedOrderDataPlatformPlannedOrderItemData" yaml:"PlannedOrderDataPlatformPlannedOrderItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPlannedOrderHeaderDatumR) NewStruct() *dataPlatformPlannedOrderHeaderDatumR {
	return &dataPlatformPlannedOrderHeaderDatumR{}
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum() *DataPlatformBillOfMaterialHeaderDatum {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetOperation() *DataPlatformOperationsHeaderDatum {
	if r == nil {
		return nil
	}
	return r.Operation
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetOrderIDDataPlatformOrdersItemDatum() *DataPlatformOrdersItemDatum {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersItemDatum
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetOwnerProductionPlantDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.OwnerProductionPlantDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetPlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetPlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetPlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetProductionVersionDataPlatformProductionVersionHeaderDatum() *DataPlatformProductionVersionHeaderDatum {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformProductionVersionHeaderDatum
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetPlannedOrderDataPlatformPlannedOrderHeaderDocData() DataPlatformPlannedOrderHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderHeaderDocData
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetPlannedOrderDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderItemData
}

// dataPlatformPlannedOrderHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformPlannedOrderHeaderDatumL struct{}

var (
	dataPlatformPlannedOrderHeaderDatumAllColumns            = []string{"PlannedOrder", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "PlannedOrderType", "Product", "Buyer", "Seller", "DestinationDeliverToParty", "DestinationDeliverToPlant", "DestinationDeliverToPlantStorageLocation", "DepartureDeliverFromParty", "DepartureDeliverFromPlant", "DepartureDeliverFromPlantStorageLocation", "OwnerProductionPlantBusinessPartner", "OwnerProductionPlant", "OwnerProductionPlantStorageLocation", "ProductBaseUnit", "MRPArea", "MRPController", "ProductionVersion", "BillOfMaterial", "Operations", "PlannedOrderQuantityInBaseUnit", "PlannedOrderQuantityInDestinationDeliveryUnit", "PlannedOrderQuantityInDepartureDeliveryUnit", "PlannedOrderQuantityInDestinationProductionUnit", "PlannedOrderQuantityInDepartureProductionUnit", "PlannedOrderDestinationDeliveryUnit", "PlannedOrderDepartureDeliveryUnit", "PlannedOrderDestinationProductionUnit", "PlannedOrderDepartureProductionUnit", "PlannedOrderPlannedScrapQtyInBaseUnit", "PlannedOrderPlannedStartDate", "PlannedOrderPlannedStartTime", "PlannedOrderPlannedEndDate", "PlannedOrderPlannedEndTime", "OrderID", "OrderItem", "Project", "WBSElement", "Reservation", "ReservationItem", "PlannedOrderLongText", "LastScheduledDate", "ScheduledBasicEndDate", "ScheduledBasicEndTime", "ScheduledBasicStartDate", "ScheduledBasicStartTime", "SchedulingType", "PlannedOrderIsReleased", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderHeaderDatumColumnsWithoutDefault = []string{"PlannedOrder", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "PlannedOrderType", "Product", "Buyer", "Seller", "DestinationDeliverToParty", "DestinationDeliverToPlant", "DestinationDeliverToPlantStorageLocation", "DepartureDeliverFromParty", "DepartureDeliverFromPlant", "DepartureDeliverFromPlantStorageLocation", "OwnerProductionPlantBusinessPartner", "OwnerProductionPlant", "OwnerProductionPlantStorageLocation", "ProductBaseUnit", "MRPArea", "MRPController", "ProductionVersion", "BillOfMaterial", "Operations", "PlannedOrderQuantityInBaseUnit", "PlannedOrderQuantityInDestinationDeliveryUnit", "PlannedOrderQuantityInDepartureDeliveryUnit", "PlannedOrderQuantityInDestinationProductionUnit", "PlannedOrderQuantityInDepartureProductionUnit", "PlannedOrderDestinationDeliveryUnit", "PlannedOrderDepartureDeliveryUnit", "PlannedOrderDestinationProductionUnit", "PlannedOrderDepartureProductionUnit", "PlannedOrderPlannedScrapQtyInBaseUnit", "PlannedOrderPlannedStartDate", "PlannedOrderPlannedStartTime", "PlannedOrderPlannedEndDate", "PlannedOrderPlannedEndTime", "OrderID", "OrderItem", "Project", "WBSElement", "Reservation", "ReservationItem", "PlannedOrderLongText", "LastScheduledDate", "ScheduledBasicEndDate", "ScheduledBasicEndTime", "ScheduledBasicStartDate", "ScheduledBasicStartTime", "SchedulingType", "PlannedOrderIsReleased", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns     = []string{"PlannedOrder"}
	dataPlatformPlannedOrderHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPlannedOrderHeaderDatumSlice is an alias for a slice of pointers to DataPlatformPlannedOrderHeaderDatum.
	// This should almost always be used instead of []DataPlatformPlannedOrderHeaderDatum.
	DataPlatformPlannedOrderHeaderDatumSlice []*DataPlatformPlannedOrderHeaderDatum

	dataPlatformPlannedOrderHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPlannedOrderHeaderDatumType                 = reflect.TypeOf(&DataPlatformPlannedOrderHeaderDatum{})
	dataPlatformPlannedOrderHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformPlannedOrderHeaderDatumType)
	dataPlatformPlannedOrderHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns)
	dataPlatformPlannedOrderHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPlannedOrderHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPlannedOrderHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPlannedOrderHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPlannedOrderHeaderDatum record from the query.
func (q dataPlatformPlannedOrderHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPlannedOrderHeaderDatum, error) {
	o := &DataPlatformPlannedOrderHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_planned_order_header_data")
	}

	return o, nil
}

// All returns all DataPlatformPlannedOrderHeaderDatum records from the query.
func (q dataPlatformPlannedOrderHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPlannedOrderHeaderDatumSlice, error) {
	var o []*DataPlatformPlannedOrderHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPlannedOrderHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPlannedOrderHeaderDatum records in the query.
func (q dataPlatformPlannedOrderHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_planned_order_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPlannedOrderHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_planned_order_header_data exists")
	}

	return count > 0, nil
}

// BillOfMaterialDataPlatformBillOfMaterialHeaderDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) BillOfMaterialDataPlatformBillOfMaterialHeaderDatum(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillOfMaterial` = ?", o.BillOfMaterial),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// Operation pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) Operation(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Operations` = ?", o.Operations),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// OrderIDDataPlatformOrdersItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) OrderIDDataPlatformOrdersItemDatum(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersItemData(queryMods...)
}

// OwnerProductionPlantDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) OwnerProductionPlantDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Plant` = ?", o.OwnerProductionPlant),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.PlannedOrderDepartureDeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.PlannedOrderDepartureProductionUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.PlannedOrderDestinationDeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductBaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductionVersionDataPlatformProductionVersionHeaderDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) ProductionVersionDataPlatformProductionVersionHeaderDatum(mods ...qm.QueryMod) dataPlatformProductionVersionHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductionVersion` = ?", o.ProductionVersion),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionVersionHeaderData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// PlannedOrderDataPlatformPlannedOrderHeaderDocData retrieves all the data_platform_planned_order_header_doc_datum's DataPlatformPlannedOrderHeaderDocData with an executor via PlannedOrder column.
func (o *DataPlatformPlannedOrderHeaderDatum) PlannedOrderDataPlatformPlannedOrderHeaderDocData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_header_doc_data`.`PlannedOrder`=?", o.PlannedOrder),
	)

	return DataPlatformPlannedOrderHeaderDocData(queryMods...)
}

// PlannedOrderDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via PlannedOrder column.
func (o *DataPlatformPlannedOrderHeaderDatum) PlannedOrderDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`PlannedOrder`=?", o.PlannedOrder),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		if !queries.IsNil(object.BillOfMaterial) {
			args = append(args, object.BillOfMaterial)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillOfMaterial) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillOfMaterial) {
				args = append(args, obj.BillOfMaterial)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBillOfMaterialHeaderDatum")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBillOfMaterialHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillOfMaterial, foreign.BillOfMaterial) {
				local.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		if !queries.IsNil(object.Operations) {
			args = append(args, object.Operations)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Operations) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Operations) {
				args = append(args, obj.Operations)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.Operations in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOperationsHeaderDatum")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOperationsHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Operation = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Operations, foreign.Operations) {
				local.R.Operation = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadOrderIDDataPlatformOrdersItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersItemDatum")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDDataPlatformOrdersItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDDataPlatformOrdersItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOwnerProductionPlantDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadOwnerProductionPlantDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		if !queries.IsNil(object.OwnerProductionPlant) {
			args = append(args, object.OwnerProductionPlant)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OwnerProductionPlant) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OwnerProductionPlant) {
				args = append(args, obj.OwnerProductionPlant)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.Plant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OwnerProductionPlantDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OwnerProductionPlant, foreign.Plant) {
				local.R.OwnerProductionPlantDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadPlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		args = append(args, object.PlannedOrderDepartureDeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrderDepartureDeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrderDepartureDeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlannedOrderDepartureDeliveryUnit == foreign.QuantityUnit {
				local.R.PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadPlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		if !queries.IsNil(object.PlannedOrderDepartureProductionUnit) {
			args = append(args, object.PlannedOrderDepartureProductionUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlannedOrderDepartureProductionUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PlannedOrderDepartureProductionUnit) {
				args = append(args, obj.PlannedOrderDepartureProductionUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlannedOrderDepartureProductionUnit, foreign.QuantityUnit) {
				local.R.PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadPlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		args = append(args, object.PlannedOrderDestinationDeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrderDestinationDeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrderDestinationDeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlannedOrderDestinationDeliveryUnit == foreign.QuantityUnit {
				local.R.PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		args = append(args, object.ProductBaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductBaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductBaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductBaseUnit == foreign.QuantityUnit {
				local.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformProductionVersionHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadProductionVersionDataPlatformProductionVersionHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		if !queries.IsNil(object.ProductionVersion) {
			args = append(args, object.ProductionVersion)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionVersion) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductionVersion) {
				args = append(args, obj.ProductionVersion)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_version_header_data`),
		qm.WhereIn(`data_platform_production_version_header_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionVersionHeaderDatum")
	}

	var resultSlice []*DataPlatformProductionVersionHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionVersionHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_version_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_version_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionVersionDataPlatformProductionVersionHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductionVersion, foreign.ProductionVersion) {
				local.R.ProductionVersionDataPlatformProductionVersionHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDataPlatformPlannedOrderHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadPlannedOrderDataPlatformPlannedOrderHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		args = append(args, object.PlannedOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_doc_data`),
		qm.WhereIn(`data_platform_planned_order_header_doc_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_header_doc_data")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_doc_data")
	}

	if singular {
		object.R.PlannedOrderDataPlatformPlannedOrderHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderHeaderDocData = append(local.R.PlannedOrderDataPlatformPlannedOrderHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadPlannedOrderDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		args = append(args, object.PlannedOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.PlannedOrderDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderItemData = append(local.R.PlannedOrderDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillOfMaterial, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillOfMaterial, related.BillOfMaterial)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			BillOfMaterialDataPlatformBillOfMaterialHeaderDatum: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = related
	}

	return nil
}

// RemoveBillOfMaterialDataPlatformBillOfMaterialHeaderDatum relationship.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum to nil.
func (o *DataPlatformPlannedOrderHeaderDatum) RemoveBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformBillOfMaterialHeaderDatum) error {
	var err error

	queries.SetScanner(&o.BillOfMaterial, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillOfMaterial")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOperation of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.Operation to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetOperation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOperationsHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Operations"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Operations, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Operations, related.Operations)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			Operation: related,
		}
	} else {
		o.R.Operation = related
	}

	return nil
}

// RemoveOperation relationship.
// Sets o.R.Operation to nil.
func (o *DataPlatformPlannedOrderHeaderDatum) RemoveOperation(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformOperationsHeaderDatum) error {
	var err error

	queries.SetScanner(&o.Operations, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Operations")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Operation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOrderIDDataPlatformOrdersItemDatum of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.OrderID)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			OrderIDDataPlatformOrdersItemDatum: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersItemDatum = related
	}

	return nil
}

// RemoveOrderIDDataPlatformOrdersItemDatum relationship.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to nil.
func (o *DataPlatformPlannedOrderHeaderDatum) RemoveOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformOrdersItemDatum) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderIDDataPlatformOrdersItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOwnerProductionPlantDataPlatformPlantStorageLocationDatum of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.OwnerProductionPlantDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetOwnerProductionPlantDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OwnerProductionPlant"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Plant, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OwnerProductionPlant, related.Plant)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			OwnerProductionPlantDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.OwnerProductionPlantDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// RemoveOwnerProductionPlantDataPlatformPlantStorageLocationDatum relationship.
// Sets o.R.OwnerProductionPlantDataPlatformPlantStorageLocationDatum to nil.
func (o *DataPlatformPlannedOrderHeaderDatum) RemoveOwnerProductionPlantDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPlantStorageLocationDatum) error {
	var err error

	queries.SetScanner(&o.OwnerProductionPlant, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("OwnerProductionPlant")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OwnerProductionPlantDataPlatformPlantStorageLocationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetPlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrderDepartureDeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlannedOrderDepartureDeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.PlannedOrderDepartureDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetPlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetPlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrderDepartureProductionUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlannedOrderDepartureProductionUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemovePlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformPlannedOrderHeaderDatum) RemovePlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.PlannedOrderDepartureProductionUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PlannedOrderDepartureProductionUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PlannedOrderDepartureProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetPlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrderDestinationDeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlannedOrderDestinationDeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.PlannedOrderDestinationDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductBaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductionVersionDataPlatformProductionVersionHeaderDatum of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.ProductionVersionDataPlatformProductionVersionHeaderDatum to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetProductionVersionDataPlatformProductionVersionHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionVersionHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductionVersion, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductionVersion, related.ProductionVersion)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			ProductionVersionDataPlatformProductionVersionHeaderDatum: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformProductionVersionHeaderDatum = related
	}

	return nil
}

// RemoveProductionVersionDataPlatformProductionVersionHeaderDatum relationship.
// Sets o.R.ProductionVersionDataPlatformProductionVersionHeaderDatum to nil.
func (o *DataPlatformPlannedOrderHeaderDatum) RemoveProductionVersionDataPlatformProductionVersionHeaderDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductionVersionHeaderDatum) error {
	var err error

	queries.SetScanner(&o.ProductionVersion, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductionVersion")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductionVersionDataPlatformProductionVersionHeaderDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// AddPlannedOrderDataPlatformPlannedOrderHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_planned_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.PlannedOrderDataPlatformPlannedOrderHeaderDocData.
func (o *DataPlatformPlannedOrderHeaderDatum) AddPlannedOrderDataPlatformPlannedOrderHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlannedOrder = o.PlannedOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PlannedOrder, rel.PlannedOrder, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlannedOrder = o.PlannedOrder
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			PlannedOrderDataPlatformPlannedOrderHeaderDocData: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderHeaderDocData = append(o.R.PlannedOrderDataPlatformPlannedOrderHeaderDocData, related...)
	}

	return nil
}

// AddPlannedOrderDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_planned_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.PlannedOrderDataPlatformPlannedOrderItemData.
func (o *DataPlatformPlannedOrderHeaderDatum) AddPlannedOrderDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlannedOrder = o.PlannedOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PlannedOrder, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlannedOrder = o.PlannedOrder
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			PlannedOrderDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderItemData = append(o.R.PlannedOrderDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// DataPlatformPlannedOrderHeaderData retrieves all the records using an executor.
func DataPlatformPlannedOrderHeaderData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_planned_order_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_planned_order_header_data`.*"})
	}

	return dataPlatformPlannedOrderHeaderDatumQuery{q}
}

// FindDataPlatformPlannedOrderHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPlannedOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, plannedOrder int, selectCols ...string) (*DataPlatformPlannedOrderHeaderDatum, error) {
	dataPlatformPlannedOrderHeaderDatumObj := &DataPlatformPlannedOrderHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_planned_order_header_data` where `PlannedOrder`=?", sel,
	)

	q := queries.Raw(query, plannedOrder)

	err := q.Bind(ctx, exec, dataPlatformPlannedOrderHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_planned_order_header_data")
	}

	return dataPlatformPlannedOrderHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPlannedOrderHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPlannedOrderHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderHeaderDatumInsertCache[key]
	dataPlatformPlannedOrderHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPlannedOrderHeaderDatumAllColumns,
			dataPlatformPlannedOrderHeaderDatumColumnsWithDefault,
			dataPlatformPlannedOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_planned_order_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_planned_order_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_planned_order_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_planned_order_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PlannedOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderHeaderDatumInsertCacheMut.Lock()
		dataPlatformPlannedOrderHeaderDatumInsertCache[key] = cache
		dataPlatformPlannedOrderHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPlannedOrderHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPlannedOrderHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPlannedOrderHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderHeaderDatumUpdateCache[key]
	dataPlatformPlannedOrderHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPlannedOrderHeaderDatumAllColumns,
			dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_planned_order_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, append(wl, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_planned_order_header_data row")
	}

	if !cached {
		dataPlatformPlannedOrderHeaderDatumUpdateCacheMut.Lock()
		dataPlatformPlannedOrderHeaderDatumUpdateCache[key] = cache
		dataPlatformPlannedOrderHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPlannedOrderHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_planned_order_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPlannedOrderHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPlannedOrderHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformPlannedOrderHeaderDatumUniqueColumns = []string{
	"PlannedOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPlannedOrderHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPlannedOrderHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPlannedOrderHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderHeaderDatumUpsertCache[key]
	dataPlatformPlannedOrderHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPlannedOrderHeaderDatumAllColumns,
			dataPlatformPlannedOrderHeaderDatumColumnsWithDefault,
			dataPlatformPlannedOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPlannedOrderHeaderDatumAllColumns,
			dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_planned_order_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_planned_order_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_planned_order_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_planned_order_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_planned_order_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderHeaderDatumUpsertCacheMut.Lock()
		dataPlatformPlannedOrderHeaderDatumUpsertCache[key] = cache
		dataPlatformPlannedOrderHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPlannedOrderHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPlannedOrderHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPlannedOrderHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPlannedOrderHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_planned_order_header_data` WHERE `PlannedOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_planned_order_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPlannedOrderHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPlannedOrderHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_planned_order_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPlannedOrderHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_planned_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPlannedOrderHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPlannedOrderHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPlannedOrderHeaderDatum(ctx, exec, o.PlannedOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPlannedOrderHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPlannedOrderHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_planned_order_header_data`.* FROM `data_platform_planned_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPlannedOrderHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPlannedOrderHeaderDatumExists checks if the DataPlatformPlannedOrderHeaderDatum row exists.
func DataPlatformPlannedOrderHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, plannedOrder int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_planned_order_header_data` where `PlannedOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, plannedOrder)
	}
	row := exec.QueryRowContext(ctx, sql, plannedOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_planned_order_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPlannedOrderHeaderDatum row exists.
func (o *DataPlatformPlannedOrderHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPlannedOrderHeaderDatumExists(ctx, exec, o.PlannedOrder)
}
