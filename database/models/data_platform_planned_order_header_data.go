// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPlannedOrderHeaderDatum is an object representing the database table.
type DataPlatformPlannedOrderHeaderDatum struct {
	PlannedOrder                             int          `boil:"PlannedOrder" json:"PlannedOrder" toml:"PlannedOrder" yaml:"PlannedOrder"`
	PlannedOrderType                         null.String  `boil:"PlannedOrderType" json:"PlannedOrderType,omitempty" toml:"PlannedOrderType" yaml:"PlannedOrderType,omitempty"`
	Product                                  null.String  `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	ProductDeliverFromParty                  null.Int     `boil:"ProductDeliverFromParty" json:"ProductDeliverFromParty,omitempty" toml:"ProductDeliverFromParty" yaml:"ProductDeliverFromParty,omitempty"`
	ProductDeliverToParty                    null.Int     `boil:"ProductDeliverToParty" json:"ProductDeliverToParty,omitempty" toml:"ProductDeliverToParty" yaml:"ProductDeliverToParty,omitempty"`
	OriginIssuingPlant                       null.String  `boil:"OriginIssuingPlant" json:"OriginIssuingPlant,omitempty" toml:"OriginIssuingPlant" yaml:"OriginIssuingPlant,omitempty"`
	OriginIssuingPlantStorageLocation        null.String  `boil:"OriginIssuingPlantStorageLocation" json:"OriginIssuingPlantStorageLocation,omitempty" toml:"OriginIssuingPlantStorageLocation" yaml:"OriginIssuingPlantStorageLocation,omitempty"`
	DestinationReceivingPlant                null.String  `boil:"DestinationReceivingPlant" json:"DestinationReceivingPlant,omitempty" toml:"DestinationReceivingPlant" yaml:"DestinationReceivingPlant,omitempty"`
	DestinationReceivingPlantStorageLocation null.String  `boil:"DestinationReceivingPlantStorageLocation" json:"DestinationReceivingPlantStorageLocation,omitempty" toml:"DestinationReceivingPlantStorageLocation" yaml:"DestinationReceivingPlantStorageLocation,omitempty"`
	OwnerProductionPlantBusinessPartner      null.Int     `boil:"OwnerProductionPlantBusinessPartner" json:"OwnerProductionPlantBusinessPartner,omitempty" toml:"OwnerProductionPlantBusinessPartner" yaml:"OwnerProductionPlantBusinessPartner,omitempty"`
	OwnerProductionPlant                     null.String  `boil:"OwnerProductionPlant" json:"OwnerProductionPlant,omitempty" toml:"OwnerProductionPlant" yaml:"OwnerProductionPlant,omitempty"`
	OwnerProductionPlantStorageLocation      null.String  `boil:"OwnerProductionPlantStorageLocation" json:"OwnerProductionPlantStorageLocation,omitempty" toml:"OwnerProductionPlantStorageLocation" yaml:"OwnerProductionPlantStorageLocation,omitempty"`
	MRPArea                                  null.String  `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	MRPController                            null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	PlannedOrderQuantityInBaseUnit           null.Float32 `boil:"PlannedOrderQuantityInBaseUnit" json:"PlannedOrderQuantityInBaseUnit,omitempty" toml:"PlannedOrderQuantityInBaseUnit" yaml:"PlannedOrderQuantityInBaseUnit,omitempty"`
	PlannedOrderPlannedScrapQtyInBaseUnit    null.Float32 `boil:"PlannedOrderPlannedScrapQtyInBaseUnit" json:"PlannedOrderPlannedScrapQtyInBaseUnit,omitempty" toml:"PlannedOrderPlannedScrapQtyInBaseUnit" yaml:"PlannedOrderPlannedScrapQtyInBaseUnit,omitempty"`
	PlannedOrderOriginIssuingUnit            null.String  `boil:"PlannedOrderOriginIssuingUnit" json:"PlannedOrderOriginIssuingUnit,omitempty" toml:"PlannedOrderOriginIssuingUnit" yaml:"PlannedOrderOriginIssuingUnit,omitempty"`
	PlannedOrderDestinationReceivingUnit     null.String  `boil:"PlannedOrderDestinationReceivingUnit" json:"PlannedOrderDestinationReceivingUnit,omitempty" toml:"PlannedOrderDestinationReceivingUnit" yaml:"PlannedOrderDestinationReceivingUnit,omitempty"`
	PlannedOrderOriginIssuingQuantity        null.Float32 `boil:"PlannedOrderOriginIssuingQuantity" json:"PlannedOrderOriginIssuingQuantity,omitempty" toml:"PlannedOrderOriginIssuingQuantity" yaml:"PlannedOrderOriginIssuingQuantity,omitempty"`
	PlannedOrderDestinationReceivingQuantity null.Float32 `boil:"PlannedOrderDestinationReceivingQuantity" json:"PlannedOrderDestinationReceivingQuantity,omitempty" toml:"PlannedOrderDestinationReceivingQuantity" yaml:"PlannedOrderDestinationReceivingQuantity,omitempty"`
	PlannedOrderPlannedStartDate             null.String  `boil:"PlannedOrderPlannedStartDate" json:"PlannedOrderPlannedStartDate,omitempty" toml:"PlannedOrderPlannedStartDate" yaml:"PlannedOrderPlannedStartDate,omitempty"`
	PlannedOrderPlannedStartTime             null.String  `boil:"PlannedOrderPlannedStartTime" json:"PlannedOrderPlannedStartTime,omitempty" toml:"PlannedOrderPlannedStartTime" yaml:"PlannedOrderPlannedStartTime,omitempty"`
	PlannedOrderPlannedEndDate               null.String  `boil:"PlannedOrderPlannedEndDate" json:"PlannedOrderPlannedEndDate,omitempty" toml:"PlannedOrderPlannedEndDate" yaml:"PlannedOrderPlannedEndDate,omitempty"`
	PlannedOrderPlannedEndTime               null.String  `boil:"PlannedOrderPlannedEndTime" json:"PlannedOrderPlannedEndTime,omitempty" toml:"PlannedOrderPlannedEndTime" yaml:"PlannedOrderPlannedEndTime,omitempty"`
	LastChangeDateTime                       null.String  `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	OrderID                                  null.Int     `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                                null.Int     `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	ProductBuyer                             null.Int     `boil:"ProductBuyer" json:"ProductBuyer,omitempty" toml:"ProductBuyer" yaml:"ProductBuyer,omitempty"`
	ProductSeller                            null.Int     `boil:"ProductSeller" json:"ProductSeller,omitempty" toml:"ProductSeller" yaml:"ProductSeller,omitempty"`
	Project                                  null.String  `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	Reservation                              null.Int     `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	ReservationItem                          null.Int     `boil:"ReservationItem" json:"ReservationItem,omitempty" toml:"ReservationItem" yaml:"ReservationItem,omitempty"`
	PlannedOrderLongText                     null.String  `boil:"PlannedOrderLongText" json:"PlannedOrderLongText,omitempty" toml:"PlannedOrderLongText" yaml:"PlannedOrderLongText,omitempty"`
	PlannedOrderIsFixed                      null.Bool    `boil:"PlannedOrderIsFixed" json:"PlannedOrderIsFixed,omitempty" toml:"PlannedOrderIsFixed" yaml:"PlannedOrderIsFixed,omitempty"`
	PlannedOrderBOMIsFixed                   null.Bool    `boil:"PlannedOrderBOMIsFixed" json:"PlannedOrderBOMIsFixed,omitempty" toml:"PlannedOrderBOMIsFixed" yaml:"PlannedOrderBOMIsFixed,omitempty"`
	LastScheduledDate                        null.String  `boil:"LastScheduledDate" json:"LastScheduledDate,omitempty" toml:"LastScheduledDate" yaml:"LastScheduledDate,omitempty"`
	ScheduledBasicEndDate                    null.String  `boil:"ScheduledBasicEndDate" json:"ScheduledBasicEndDate,omitempty" toml:"ScheduledBasicEndDate" yaml:"ScheduledBasicEndDate,omitempty"`
	ScheduledBasicEndTime                    null.String  `boil:"ScheduledBasicEndTime" json:"ScheduledBasicEndTime,omitempty" toml:"ScheduledBasicEndTime" yaml:"ScheduledBasicEndTime,omitempty"`
	ScheduledBasicStartDate                  null.String  `boil:"ScheduledBasicStartDate" json:"ScheduledBasicStartDate,omitempty" toml:"ScheduledBasicStartDate" yaml:"ScheduledBasicStartDate,omitempty"`
	ScheduledBasicStartTime                  null.String  `boil:"ScheduledBasicStartTime" json:"ScheduledBasicStartTime,omitempty" toml:"ScheduledBasicStartTime" yaml:"ScheduledBasicStartTime,omitempty"`
	SchedulingType                           null.String  `boil:"SchedulingType" json:"SchedulingType,omitempty" toml:"SchedulingType" yaml:"SchedulingType,omitempty"`
	PlannedOrderIsReleased                   null.Bool    `boil:"PlannedOrderIsReleased" json:"PlannedOrderIsReleased,omitempty" toml:"PlannedOrderIsReleased" yaml:"PlannedOrderIsReleased,omitempty"`
	IsMarkedForDeletion                      null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPlannedOrderHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPlannedOrderHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPlannedOrderHeaderDatumColumns = struct {
	PlannedOrder                             string
	PlannedOrderType                         string
	Product                                  string
	ProductDeliverFromParty                  string
	ProductDeliverToParty                    string
	OriginIssuingPlant                       string
	OriginIssuingPlantStorageLocation        string
	DestinationReceivingPlant                string
	DestinationReceivingPlantStorageLocation string
	OwnerProductionPlantBusinessPartner      string
	OwnerProductionPlant                     string
	OwnerProductionPlantStorageLocation      string
	MRPArea                                  string
	MRPController                            string
	PlannedOrderQuantityInBaseUnit           string
	PlannedOrderPlannedScrapQtyInBaseUnit    string
	PlannedOrderOriginIssuingUnit            string
	PlannedOrderDestinationReceivingUnit     string
	PlannedOrderOriginIssuingQuantity        string
	PlannedOrderDestinationReceivingQuantity string
	PlannedOrderPlannedStartDate             string
	PlannedOrderPlannedStartTime             string
	PlannedOrderPlannedEndDate               string
	PlannedOrderPlannedEndTime               string
	LastChangeDateTime                       string
	OrderID                                  string
	OrderItem                                string
	ProductBuyer                             string
	ProductSeller                            string
	Project                                  string
	Reservation                              string
	ReservationItem                          string
	PlannedOrderLongText                     string
	PlannedOrderIsFixed                      string
	PlannedOrderBOMIsFixed                   string
	LastScheduledDate                        string
	ScheduledBasicEndDate                    string
	ScheduledBasicEndTime                    string
	ScheduledBasicStartDate                  string
	ScheduledBasicStartTime                  string
	SchedulingType                           string
	PlannedOrderIsReleased                   string
	IsMarkedForDeletion                      string
}{
	PlannedOrder:                             "PlannedOrder",
	PlannedOrderType:                         "PlannedOrderType",
	Product:                                  "Product",
	ProductDeliverFromParty:                  "ProductDeliverFromParty",
	ProductDeliverToParty:                    "ProductDeliverToParty",
	OriginIssuingPlant:                       "OriginIssuingPlant",
	OriginIssuingPlantStorageLocation:        "OriginIssuingPlantStorageLocation",
	DestinationReceivingPlant:                "DestinationReceivingPlant",
	DestinationReceivingPlantStorageLocation: "DestinationReceivingPlantStorageLocation",
	OwnerProductionPlantBusinessPartner:      "OwnerProductionPlantBusinessPartner",
	OwnerProductionPlant:                     "OwnerProductionPlant",
	OwnerProductionPlantStorageLocation:      "OwnerProductionPlantStorageLocation",
	MRPArea:                                  "MRPArea",
	MRPController:                            "MRPController",
	PlannedOrderQuantityInBaseUnit:           "PlannedOrderQuantityInBaseUnit",
	PlannedOrderPlannedScrapQtyInBaseUnit:    "PlannedOrderPlannedScrapQtyInBaseUnit",
	PlannedOrderOriginIssuingUnit:            "PlannedOrderOriginIssuingUnit",
	PlannedOrderDestinationReceivingUnit:     "PlannedOrderDestinationReceivingUnit",
	PlannedOrderOriginIssuingQuantity:        "PlannedOrderOriginIssuingQuantity",
	PlannedOrderDestinationReceivingQuantity: "PlannedOrderDestinationReceivingQuantity",
	PlannedOrderPlannedStartDate:             "PlannedOrderPlannedStartDate",
	PlannedOrderPlannedStartTime:             "PlannedOrderPlannedStartTime",
	PlannedOrderPlannedEndDate:               "PlannedOrderPlannedEndDate",
	PlannedOrderPlannedEndTime:               "PlannedOrderPlannedEndTime",
	LastChangeDateTime:                       "LastChangeDateTime",
	OrderID:                                  "OrderID",
	OrderItem:                                "OrderItem",
	ProductBuyer:                             "ProductBuyer",
	ProductSeller:                            "ProductSeller",
	Project:                                  "Project",
	Reservation:                              "Reservation",
	ReservationItem:                          "ReservationItem",
	PlannedOrderLongText:                     "PlannedOrderLongText",
	PlannedOrderIsFixed:                      "PlannedOrderIsFixed",
	PlannedOrderBOMIsFixed:                   "PlannedOrderBOMIsFixed",
	LastScheduledDate:                        "LastScheduledDate",
	ScheduledBasicEndDate:                    "ScheduledBasicEndDate",
	ScheduledBasicEndTime:                    "ScheduledBasicEndTime",
	ScheduledBasicStartDate:                  "ScheduledBasicStartDate",
	ScheduledBasicStartTime:                  "ScheduledBasicStartTime",
	SchedulingType:                           "SchedulingType",
	PlannedOrderIsReleased:                   "PlannedOrderIsReleased",
	IsMarkedForDeletion:                      "IsMarkedForDeletion",
}

var DataPlatformPlannedOrderHeaderDatumTableColumns = struct {
	PlannedOrder                             string
	PlannedOrderType                         string
	Product                                  string
	ProductDeliverFromParty                  string
	ProductDeliverToParty                    string
	OriginIssuingPlant                       string
	OriginIssuingPlantStorageLocation        string
	DestinationReceivingPlant                string
	DestinationReceivingPlantStorageLocation string
	OwnerProductionPlantBusinessPartner      string
	OwnerProductionPlant                     string
	OwnerProductionPlantStorageLocation      string
	MRPArea                                  string
	MRPController                            string
	PlannedOrderQuantityInBaseUnit           string
	PlannedOrderPlannedScrapQtyInBaseUnit    string
	PlannedOrderOriginIssuingUnit            string
	PlannedOrderDestinationReceivingUnit     string
	PlannedOrderOriginIssuingQuantity        string
	PlannedOrderDestinationReceivingQuantity string
	PlannedOrderPlannedStartDate             string
	PlannedOrderPlannedStartTime             string
	PlannedOrderPlannedEndDate               string
	PlannedOrderPlannedEndTime               string
	LastChangeDateTime                       string
	OrderID                                  string
	OrderItem                                string
	ProductBuyer                             string
	ProductSeller                            string
	Project                                  string
	Reservation                              string
	ReservationItem                          string
	PlannedOrderLongText                     string
	PlannedOrderIsFixed                      string
	PlannedOrderBOMIsFixed                   string
	LastScheduledDate                        string
	ScheduledBasicEndDate                    string
	ScheduledBasicEndTime                    string
	ScheduledBasicStartDate                  string
	ScheduledBasicStartTime                  string
	SchedulingType                           string
	PlannedOrderIsReleased                   string
	IsMarkedForDeletion                      string
}{
	PlannedOrder:                             "data_platform_planned_order_header_data.PlannedOrder",
	PlannedOrderType:                         "data_platform_planned_order_header_data.PlannedOrderType",
	Product:                                  "data_platform_planned_order_header_data.Product",
	ProductDeliverFromParty:                  "data_platform_planned_order_header_data.ProductDeliverFromParty",
	ProductDeliverToParty:                    "data_platform_planned_order_header_data.ProductDeliverToParty",
	OriginIssuingPlant:                       "data_platform_planned_order_header_data.OriginIssuingPlant",
	OriginIssuingPlantStorageLocation:        "data_platform_planned_order_header_data.OriginIssuingPlantStorageLocation",
	DestinationReceivingPlant:                "data_platform_planned_order_header_data.DestinationReceivingPlant",
	DestinationReceivingPlantStorageLocation: "data_platform_planned_order_header_data.DestinationReceivingPlantStorageLocation",
	OwnerProductionPlantBusinessPartner:      "data_platform_planned_order_header_data.OwnerProductionPlantBusinessPartner",
	OwnerProductionPlant:                     "data_platform_planned_order_header_data.OwnerProductionPlant",
	OwnerProductionPlantStorageLocation:      "data_platform_planned_order_header_data.OwnerProductionPlantStorageLocation",
	MRPArea:                                  "data_platform_planned_order_header_data.MRPArea",
	MRPController:                            "data_platform_planned_order_header_data.MRPController",
	PlannedOrderQuantityInBaseUnit:           "data_platform_planned_order_header_data.PlannedOrderQuantityInBaseUnit",
	PlannedOrderPlannedScrapQtyInBaseUnit:    "data_platform_planned_order_header_data.PlannedOrderPlannedScrapQtyInBaseUnit",
	PlannedOrderOriginIssuingUnit:            "data_platform_planned_order_header_data.PlannedOrderOriginIssuingUnit",
	PlannedOrderDestinationReceivingUnit:     "data_platform_planned_order_header_data.PlannedOrderDestinationReceivingUnit",
	PlannedOrderOriginIssuingQuantity:        "data_platform_planned_order_header_data.PlannedOrderOriginIssuingQuantity",
	PlannedOrderDestinationReceivingQuantity: "data_platform_planned_order_header_data.PlannedOrderDestinationReceivingQuantity",
	PlannedOrderPlannedStartDate:             "data_platform_planned_order_header_data.PlannedOrderPlannedStartDate",
	PlannedOrderPlannedStartTime:             "data_platform_planned_order_header_data.PlannedOrderPlannedStartTime",
	PlannedOrderPlannedEndDate:               "data_platform_planned_order_header_data.PlannedOrderPlannedEndDate",
	PlannedOrderPlannedEndTime:               "data_platform_planned_order_header_data.PlannedOrderPlannedEndTime",
	LastChangeDateTime:                       "data_platform_planned_order_header_data.LastChangeDateTime",
	OrderID:                                  "data_platform_planned_order_header_data.OrderID",
	OrderItem:                                "data_platform_planned_order_header_data.OrderItem",
	ProductBuyer:                             "data_platform_planned_order_header_data.ProductBuyer",
	ProductSeller:                            "data_platform_planned_order_header_data.ProductSeller",
	Project:                                  "data_platform_planned_order_header_data.Project",
	Reservation:                              "data_platform_planned_order_header_data.Reservation",
	ReservationItem:                          "data_platform_planned_order_header_data.ReservationItem",
	PlannedOrderLongText:                     "data_platform_planned_order_header_data.PlannedOrderLongText",
	PlannedOrderIsFixed:                      "data_platform_planned_order_header_data.PlannedOrderIsFixed",
	PlannedOrderBOMIsFixed:                   "data_platform_planned_order_header_data.PlannedOrderBOMIsFixed",
	LastScheduledDate:                        "data_platform_planned_order_header_data.LastScheduledDate",
	ScheduledBasicEndDate:                    "data_platform_planned_order_header_data.ScheduledBasicEndDate",
	ScheduledBasicEndTime:                    "data_platform_planned_order_header_data.ScheduledBasicEndTime",
	ScheduledBasicStartDate:                  "data_platform_planned_order_header_data.ScheduledBasicStartDate",
	ScheduledBasicStartTime:                  "data_platform_planned_order_header_data.ScheduledBasicStartTime",
	SchedulingType:                           "data_platform_planned_order_header_data.SchedulingType",
	PlannedOrderIsReleased:                   "data_platform_planned_order_header_data.PlannedOrderIsReleased",
	IsMarkedForDeletion:                      "data_platform_planned_order_header_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPlannedOrderHeaderDatumWhere = struct {
	PlannedOrder                             whereHelperint
	PlannedOrderType                         whereHelpernull_String
	Product                                  whereHelpernull_String
	ProductDeliverFromParty                  whereHelpernull_Int
	ProductDeliverToParty                    whereHelpernull_Int
	OriginIssuingPlant                       whereHelpernull_String
	OriginIssuingPlantStorageLocation        whereHelpernull_String
	DestinationReceivingPlant                whereHelpernull_String
	DestinationReceivingPlantStorageLocation whereHelpernull_String
	OwnerProductionPlantBusinessPartner      whereHelpernull_Int
	OwnerProductionPlant                     whereHelpernull_String
	OwnerProductionPlantStorageLocation      whereHelpernull_String
	MRPArea                                  whereHelpernull_String
	MRPController                            whereHelpernull_String
	PlannedOrderQuantityInBaseUnit           whereHelpernull_Float32
	PlannedOrderPlannedScrapQtyInBaseUnit    whereHelpernull_Float32
	PlannedOrderOriginIssuingUnit            whereHelpernull_String
	PlannedOrderDestinationReceivingUnit     whereHelpernull_String
	PlannedOrderOriginIssuingQuantity        whereHelpernull_Float32
	PlannedOrderDestinationReceivingQuantity whereHelpernull_Float32
	PlannedOrderPlannedStartDate             whereHelpernull_String
	PlannedOrderPlannedStartTime             whereHelpernull_String
	PlannedOrderPlannedEndDate               whereHelpernull_String
	PlannedOrderPlannedEndTime               whereHelpernull_String
	LastChangeDateTime                       whereHelpernull_String
	OrderID                                  whereHelpernull_Int
	OrderItem                                whereHelpernull_Int
	ProductBuyer                             whereHelpernull_Int
	ProductSeller                            whereHelpernull_Int
	Project                                  whereHelpernull_String
	Reservation                              whereHelpernull_Int
	ReservationItem                          whereHelpernull_Int
	PlannedOrderLongText                     whereHelpernull_String
	PlannedOrderIsFixed                      whereHelpernull_Bool
	PlannedOrderBOMIsFixed                   whereHelpernull_Bool
	LastScheduledDate                        whereHelpernull_String
	ScheduledBasicEndDate                    whereHelpernull_String
	ScheduledBasicEndTime                    whereHelpernull_String
	ScheduledBasicStartDate                  whereHelpernull_String
	ScheduledBasicStartTime                  whereHelpernull_String
	SchedulingType                           whereHelpernull_String
	PlannedOrderIsReleased                   whereHelpernull_Bool
	IsMarkedForDeletion                      whereHelpernull_Bool
}{
	PlannedOrder:                             whereHelperint{field: "`data_platform_planned_order_header_data`.`PlannedOrder`"},
	PlannedOrderType:                         whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`PlannedOrderType`"},
	Product:                                  whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`Product`"},
	ProductDeliverFromParty:                  whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`ProductDeliverFromParty`"},
	ProductDeliverToParty:                    whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`ProductDeliverToParty`"},
	OriginIssuingPlant:                       whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`OriginIssuingPlant`"},
	OriginIssuingPlantStorageLocation:        whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`OriginIssuingPlantStorageLocation`"},
	DestinationReceivingPlant:                whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`DestinationReceivingPlant`"},
	DestinationReceivingPlantStorageLocation: whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`DestinationReceivingPlantStorageLocation`"},
	OwnerProductionPlantBusinessPartner:      whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`OwnerProductionPlantBusinessPartner`"},
	OwnerProductionPlant:                     whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`OwnerProductionPlant`"},
	OwnerProductionPlantStorageLocation:      whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`OwnerProductionPlantStorageLocation`"},
	MRPArea:                                  whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`MRPArea`"},
	MRPController:                            whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`MRPController`"},
	PlannedOrderQuantityInBaseUnit:           whereHelpernull_Float32{field: "`data_platform_planned_order_header_data`.`PlannedOrderQuantityInBaseUnit`"},
	PlannedOrderPlannedScrapQtyInBaseUnit:    whereHelpernull_Float32{field: "`data_platform_planned_order_header_data`.`PlannedOrderPlannedScrapQtyInBaseUnit`"},
	PlannedOrderOriginIssuingUnit:            whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`PlannedOrderOriginIssuingUnit`"},
	PlannedOrderDestinationReceivingUnit:     whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`PlannedOrderDestinationReceivingUnit`"},
	PlannedOrderOriginIssuingQuantity:        whereHelpernull_Float32{field: "`data_platform_planned_order_header_data`.`PlannedOrderOriginIssuingQuantity`"},
	PlannedOrderDestinationReceivingQuantity: whereHelpernull_Float32{field: "`data_platform_planned_order_header_data`.`PlannedOrderDestinationReceivingQuantity`"},
	PlannedOrderPlannedStartDate:             whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`PlannedOrderPlannedStartDate`"},
	PlannedOrderPlannedStartTime:             whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`PlannedOrderPlannedStartTime`"},
	PlannedOrderPlannedEndDate:               whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`PlannedOrderPlannedEndDate`"},
	PlannedOrderPlannedEndTime:               whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`PlannedOrderPlannedEndTime`"},
	LastChangeDateTime:                       whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`LastChangeDateTime`"},
	OrderID:                                  whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`OrderID`"},
	OrderItem:                                whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`OrderItem`"},
	ProductBuyer:                             whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`ProductBuyer`"},
	ProductSeller:                            whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`ProductSeller`"},
	Project:                                  whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`Project`"},
	Reservation:                              whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`Reservation`"},
	ReservationItem:                          whereHelpernull_Int{field: "`data_platform_planned_order_header_data`.`ReservationItem`"},
	PlannedOrderLongText:                     whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`PlannedOrderLongText`"},
	PlannedOrderIsFixed:                      whereHelpernull_Bool{field: "`data_platform_planned_order_header_data`.`PlannedOrderIsFixed`"},
	PlannedOrderBOMIsFixed:                   whereHelpernull_Bool{field: "`data_platform_planned_order_header_data`.`PlannedOrderBOMIsFixed`"},
	LastScheduledDate:                        whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`LastScheduledDate`"},
	ScheduledBasicEndDate:                    whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`ScheduledBasicEndDate`"},
	ScheduledBasicEndTime:                    whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`ScheduledBasicEndTime`"},
	ScheduledBasicStartDate:                  whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`ScheduledBasicStartDate`"},
	ScheduledBasicStartTime:                  whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`ScheduledBasicStartTime`"},
	SchedulingType:                           whereHelpernull_String{field: "`data_platform_planned_order_header_data`.`SchedulingType`"},
	PlannedOrderIsReleased:                   whereHelpernull_Bool{field: "`data_platform_planned_order_header_data`.`PlannedOrderIsReleased`"},
	IsMarkedForDeletion:                      whereHelpernull_Bool{field: "`data_platform_planned_order_header_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPlannedOrderHeaderDatumRels is where relationship names are stored.
var DataPlatformPlannedOrderHeaderDatumRels = struct {
	ProductDataPlatformProductMasterGeneralDatum string
	OrderIDDataPlatformOrdersItemDatum           string
	PlannedOrderDataPlatformPlannedOrderItemData string
}{
	ProductDataPlatformProductMasterGeneralDatum: "ProductDataPlatformProductMasterGeneralDatum",
	OrderIDDataPlatformOrdersItemDatum:           "OrderIDDataPlatformOrdersItemDatum",
	PlannedOrderDataPlatformPlannedOrderItemData: "PlannedOrderDataPlatformPlannedOrderItemData",
}

// dataPlatformPlannedOrderHeaderDatumR is where relationships are stored.
type dataPlatformPlannedOrderHeaderDatumR struct {
	ProductDataPlatformProductMasterGeneralDatum *DataPlatformProductMasterGeneralDatum `boil:"ProductDataPlatformProductMasterGeneralDatum" json:"ProductDataPlatformProductMasterGeneralDatum" toml:"ProductDataPlatformProductMasterGeneralDatum" yaml:"ProductDataPlatformProductMasterGeneralDatum"`
	OrderIDDataPlatformOrdersItemDatum           *DataPlatformOrdersItemDatum           `boil:"OrderIDDataPlatformOrdersItemDatum" json:"OrderIDDataPlatformOrdersItemDatum" toml:"OrderIDDataPlatformOrdersItemDatum" yaml:"OrderIDDataPlatformOrdersItemDatum"`
	PlannedOrderDataPlatformPlannedOrderItemData DataPlatformPlannedOrderItemDatumSlice `boil:"PlannedOrderDataPlatformPlannedOrderItemData" json:"PlannedOrderDataPlatformPlannedOrderItemData" toml:"PlannedOrderDataPlatformPlannedOrderItemData" yaml:"PlannedOrderDataPlatformPlannedOrderItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPlannedOrderHeaderDatumR) NewStruct() *dataPlatformPlannedOrderHeaderDatumR {
	return &dataPlatformPlannedOrderHeaderDatumR{}
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetProductDataPlatformProductMasterGeneralDatum() *DataPlatformProductMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformProductMasterGeneralDatum
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetOrderIDDataPlatformOrdersItemDatum() *DataPlatformOrdersItemDatum {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersItemDatum
}

func (r *dataPlatformPlannedOrderHeaderDatumR) GetPlannedOrderDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderItemData
}

// dataPlatformPlannedOrderHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformPlannedOrderHeaderDatumL struct{}

var (
	dataPlatformPlannedOrderHeaderDatumAllColumns            = []string{"PlannedOrder", "PlannedOrderType", "Product", "ProductDeliverFromParty", "ProductDeliverToParty", "OriginIssuingPlant", "OriginIssuingPlantStorageLocation", "DestinationReceivingPlant", "DestinationReceivingPlantStorageLocation", "OwnerProductionPlantBusinessPartner", "OwnerProductionPlant", "OwnerProductionPlantStorageLocation", "MRPArea", "MRPController", "PlannedOrderQuantityInBaseUnit", "PlannedOrderPlannedScrapQtyInBaseUnit", "PlannedOrderOriginIssuingUnit", "PlannedOrderDestinationReceivingUnit", "PlannedOrderOriginIssuingQuantity", "PlannedOrderDestinationReceivingQuantity", "PlannedOrderPlannedStartDate", "PlannedOrderPlannedStartTime", "PlannedOrderPlannedEndDate", "PlannedOrderPlannedEndTime", "LastChangeDateTime", "OrderID", "OrderItem", "ProductBuyer", "ProductSeller", "Project", "Reservation", "ReservationItem", "PlannedOrderLongText", "PlannedOrderIsFixed", "PlannedOrderBOMIsFixed", "LastScheduledDate", "ScheduledBasicEndDate", "ScheduledBasicEndTime", "ScheduledBasicStartDate", "ScheduledBasicStartTime", "SchedulingType", "PlannedOrderIsReleased", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderHeaderDatumColumnsWithoutDefault = []string{"PlannedOrder", "PlannedOrderType", "Product", "ProductDeliverFromParty", "ProductDeliverToParty", "OriginIssuingPlant", "OriginIssuingPlantStorageLocation", "DestinationReceivingPlant", "DestinationReceivingPlantStorageLocation", "OwnerProductionPlantBusinessPartner", "OwnerProductionPlant", "OwnerProductionPlantStorageLocation", "MRPArea", "MRPController", "PlannedOrderQuantityInBaseUnit", "PlannedOrderPlannedScrapQtyInBaseUnit", "PlannedOrderOriginIssuingUnit", "PlannedOrderDestinationReceivingUnit", "PlannedOrderOriginIssuingQuantity", "PlannedOrderDestinationReceivingQuantity", "PlannedOrderPlannedStartDate", "PlannedOrderPlannedStartTime", "PlannedOrderPlannedEndDate", "PlannedOrderPlannedEndTime", "LastChangeDateTime", "OrderID", "OrderItem", "ProductBuyer", "ProductSeller", "Project", "Reservation", "ReservationItem", "PlannedOrderLongText", "PlannedOrderIsFixed", "PlannedOrderBOMIsFixed", "LastScheduledDate", "ScheduledBasicEndDate", "ScheduledBasicEndTime", "ScheduledBasicStartDate", "ScheduledBasicStartTime", "SchedulingType", "PlannedOrderIsReleased", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns     = []string{"PlannedOrder"}
	dataPlatformPlannedOrderHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPlannedOrderHeaderDatumSlice is an alias for a slice of pointers to DataPlatformPlannedOrderHeaderDatum.
	// This should almost always be used instead of []DataPlatformPlannedOrderHeaderDatum.
	DataPlatformPlannedOrderHeaderDatumSlice []*DataPlatformPlannedOrderHeaderDatum

	dataPlatformPlannedOrderHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPlannedOrderHeaderDatumType                 = reflect.TypeOf(&DataPlatformPlannedOrderHeaderDatum{})
	dataPlatformPlannedOrderHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformPlannedOrderHeaderDatumType)
	dataPlatformPlannedOrderHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns)
	dataPlatformPlannedOrderHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPlannedOrderHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPlannedOrderHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPlannedOrderHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPlannedOrderHeaderDatum record from the query.
func (q dataPlatformPlannedOrderHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPlannedOrderHeaderDatum, error) {
	o := &DataPlatformPlannedOrderHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_planned_order_header_data")
	}

	return o, nil
}

// All returns all DataPlatformPlannedOrderHeaderDatum records from the query.
func (q dataPlatformPlannedOrderHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPlannedOrderHeaderDatumSlice, error) {
	var o []*DataPlatformPlannedOrderHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPlannedOrderHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPlannedOrderHeaderDatum records in the query.
func (q dataPlatformPlannedOrderHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_planned_order_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPlannedOrderHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_planned_order_header_data exists")
	}

	return count > 0, nil
}

// ProductDataPlatformProductMasterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) ProductDataPlatformProductMasterGeneralDatum(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// OrderIDDataPlatformOrdersItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderHeaderDatum) OrderIDDataPlatformOrdersItemDatum(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersItemData(queryMods...)
}

// PlannedOrderDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via PlannedOrder column.
func (o *DataPlatformPlannedOrderHeaderDatum) PlannedOrderDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`PlannedOrder`=?", o.PlannedOrder),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// LoadProductDataPlatformProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadProductDataPlatformProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		if !queries.IsNil(object.Product) {
			args = append(args, object.Product)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Product) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Product) {
				args = append(args, obj.Product)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterGeneralDatum")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDataPlatformProductMasterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Product, foreign.Product) {
				local.R.ProductDataPlatformProductMasterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadOrderIDDataPlatformOrdersItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersItemDatum")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDDataPlatformOrdersItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDDataPlatformOrdersItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlannedOrderHeaderDatumL) LoadPlannedOrderDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderHeaderDatum
	var object *DataPlatformPlannedOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderHeaderDatum.(*DataPlatformPlannedOrderHeaderDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderHeaderDatum.(*[]*DataPlatformPlannedOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderHeaderDatumR{}
		}
		args = append(args, object.PlannedOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.PlannedOrderDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderItemData = append(local.R.PlannedOrderDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// SetProductDataPlatformProductMasterGeneralDatum of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetProductDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Product, related.Product)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			ProductDataPlatformProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductDataPlatformProductMasterGeneralDatum = related
	}

	return nil
}

// RemoveProductDataPlatformProductMasterGeneralDatum relationship.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum to nil.
func (o *DataPlatformPlannedOrderHeaderDatum) RemoveProductDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductMasterGeneralDatum) error {
	var err error

	queries.SetScanner(&o.Product, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Product")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductDataPlatformProductMasterGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOrderIDDataPlatformOrdersItemDatum of the dataPlatformPlannedOrderHeaderDatum to the related item.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to related.
func (o *DataPlatformPlannedOrderHeaderDatum) SetOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.PlannedOrder}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.OrderID)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			OrderIDDataPlatformOrdersItemDatum: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersItemDatum = related
	}

	return nil
}

// RemoveOrderIDDataPlatformOrdersItemDatum relationship.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to nil.
func (o *DataPlatformPlannedOrderHeaderDatum) RemoveOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformOrdersItemDatum) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderIDDataPlatformOrdersItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// AddPlannedOrderDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_planned_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.PlannedOrderDataPlatformPlannedOrderItemData.
func (o *DataPlatformPlannedOrderHeaderDatum) AddPlannedOrderDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlannedOrder = o.PlannedOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PlannedOrder, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlannedOrder = o.PlannedOrder
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlannedOrderHeaderDatumR{
			PlannedOrderDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderItemData = append(o.R.PlannedOrderDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// DataPlatformPlannedOrderHeaderData retrieves all the records using an executor.
func DataPlatformPlannedOrderHeaderData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_planned_order_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_planned_order_header_data`.*"})
	}

	return dataPlatformPlannedOrderHeaderDatumQuery{q}
}

// FindDataPlatformPlannedOrderHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPlannedOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, plannedOrder int, selectCols ...string) (*DataPlatformPlannedOrderHeaderDatum, error) {
	dataPlatformPlannedOrderHeaderDatumObj := &DataPlatformPlannedOrderHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_planned_order_header_data` where `PlannedOrder`=?", sel,
	)

	q := queries.Raw(query, plannedOrder)

	err := q.Bind(ctx, exec, dataPlatformPlannedOrderHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_planned_order_header_data")
	}

	return dataPlatformPlannedOrderHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPlannedOrderHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPlannedOrderHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderHeaderDatumInsertCache[key]
	dataPlatformPlannedOrderHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPlannedOrderHeaderDatumAllColumns,
			dataPlatformPlannedOrderHeaderDatumColumnsWithDefault,
			dataPlatformPlannedOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_planned_order_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_planned_order_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_planned_order_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_planned_order_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PlannedOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderHeaderDatumInsertCacheMut.Lock()
		dataPlatformPlannedOrderHeaderDatumInsertCache[key] = cache
		dataPlatformPlannedOrderHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPlannedOrderHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPlannedOrderHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPlannedOrderHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderHeaderDatumUpdateCache[key]
	dataPlatformPlannedOrderHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPlannedOrderHeaderDatumAllColumns,
			dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_planned_order_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, append(wl, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_planned_order_header_data row")
	}

	if !cached {
		dataPlatformPlannedOrderHeaderDatumUpdateCacheMut.Lock()
		dataPlatformPlannedOrderHeaderDatumUpdateCache[key] = cache
		dataPlatformPlannedOrderHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPlannedOrderHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_planned_order_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPlannedOrderHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPlannedOrderHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformPlannedOrderHeaderDatumUniqueColumns = []string{
	"PlannedOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPlannedOrderHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPlannedOrderHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPlannedOrderHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderHeaderDatumUpsertCache[key]
	dataPlatformPlannedOrderHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPlannedOrderHeaderDatumAllColumns,
			dataPlatformPlannedOrderHeaderDatumColumnsWithDefault,
			dataPlatformPlannedOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPlannedOrderHeaderDatumAllColumns,
			dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_planned_order_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_planned_order_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_planned_order_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_planned_order_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPlannedOrderHeaderDatumType, dataPlatformPlannedOrderHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_planned_order_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderHeaderDatumUpsertCacheMut.Lock()
		dataPlatformPlannedOrderHeaderDatumUpsertCache[key] = cache
		dataPlatformPlannedOrderHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPlannedOrderHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPlannedOrderHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPlannedOrderHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPlannedOrderHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_planned_order_header_data` WHERE `PlannedOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_planned_order_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPlannedOrderHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPlannedOrderHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_planned_order_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPlannedOrderHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_planned_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPlannedOrderHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPlannedOrderHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPlannedOrderHeaderDatum(ctx, exec, o.PlannedOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPlannedOrderHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPlannedOrderHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_planned_order_header_data`.* FROM `data_platform_planned_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPlannedOrderHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPlannedOrderHeaderDatumExists checks if the DataPlatformPlannedOrderHeaderDatum row exists.
func DataPlatformPlannedOrderHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, plannedOrder int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_planned_order_header_data` where `PlannedOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, plannedOrder)
	}
	row := exec.QueryRowContext(ctx, sql, plannedOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_planned_order_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPlannedOrderHeaderDatum row exists.
func (o *DataPlatformPlannedOrderHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPlannedOrderHeaderDatumExists(ctx, exec, o.PlannedOrder)
}
