// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerCustomerPartnerFunctionDatum is an object representing the database table.
type DataPlatformBusinessPartnerCustomerPartnerFunctionDatum struct {
	BusinessPartner                int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Customer                       int         `boil:"Customer" json:"Customer" toml:"Customer" yaml:"Customer"`
	PartnerCounter                 int         `boil:"PartnerCounter" json:"PartnerCounter" toml:"PartnerCounter" yaml:"PartnerCounter"`
	PartnerFunction                null.String `boil:"PartnerFunction" json:"PartnerFunction,omitempty" toml:"PartnerFunction" yaml:"PartnerFunction,omitempty"`
	PartnerFunctionBusinessPartner null.Int    `boil:"PartnerFunctionBusinessPartner" json:"PartnerFunctionBusinessPartner,omitempty" toml:"PartnerFunctionBusinessPartner" yaml:"PartnerFunctionBusinessPartner,omitempty"`
	DefaultPartner                 null.Bool   `boil:"DefaultPartner" json:"DefaultPartner,omitempty" toml:"DefaultPartner" yaml:"DefaultPartner,omitempty"`
	CreationDate                   null.Time   `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	IsMarkedForDeletion            null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerCustomerPartnerFunctionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerCustomerPartnerFunctionDatumColumns = struct {
	BusinessPartner                string
	Customer                       string
	PartnerCounter                 string
	PartnerFunction                string
	PartnerFunctionBusinessPartner string
	DefaultPartner                 string
	CreationDate                   string
	IsMarkedForDeletion            string
}{
	BusinessPartner:                "BusinessPartner",
	Customer:                       "Customer",
	PartnerCounter:                 "PartnerCounter",
	PartnerFunction:                "PartnerFunction",
	PartnerFunctionBusinessPartner: "PartnerFunctionBusinessPartner",
	DefaultPartner:                 "DefaultPartner",
	CreationDate:                   "CreationDate",
	IsMarkedForDeletion:            "IsMarkedForDeletion",
}

var DataPlatformBusinessPartnerCustomerPartnerFunctionDatumTableColumns = struct {
	BusinessPartner                string
	Customer                       string
	PartnerCounter                 string
	PartnerFunction                string
	PartnerFunctionBusinessPartner string
	DefaultPartner                 string
	CreationDate                   string
	IsMarkedForDeletion            string
}{
	BusinessPartner:                "data_platform_business_partner_customer_partner_function_data.BusinessPartner",
	Customer:                       "data_platform_business_partner_customer_partner_function_data.Customer",
	PartnerCounter:                 "data_platform_business_partner_customer_partner_function_data.PartnerCounter",
	PartnerFunction:                "data_platform_business_partner_customer_partner_function_data.PartnerFunction",
	PartnerFunctionBusinessPartner: "data_platform_business_partner_customer_partner_function_data.PartnerFunctionBusinessPartner",
	DefaultPartner:                 "data_platform_business_partner_customer_partner_function_data.DefaultPartner",
	CreationDate:                   "data_platform_business_partner_customer_partner_function_data.CreationDate",
	IsMarkedForDeletion:            "data_platform_business_partner_customer_partner_function_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformBusinessPartnerCustomerPartnerFunctionDatumWhere = struct {
	BusinessPartner                whereHelperint
	Customer                       whereHelperint
	PartnerCounter                 whereHelperint
	PartnerFunction                whereHelpernull_String
	PartnerFunctionBusinessPartner whereHelpernull_Int
	DefaultPartner                 whereHelpernull_Bool
	CreationDate                   whereHelpernull_Time
	IsMarkedForDeletion            whereHelpernull_Bool
}{
	BusinessPartner:                whereHelperint{field: "`data_platform_business_partner_customer_partner_function_data`.`BusinessPartner`"},
	Customer:                       whereHelperint{field: "`data_platform_business_partner_customer_partner_function_data`.`Customer`"},
	PartnerCounter:                 whereHelperint{field: "`data_platform_business_partner_customer_partner_function_data`.`PartnerCounter`"},
	PartnerFunction:                whereHelpernull_String{field: "`data_platform_business_partner_customer_partner_function_data`.`PartnerFunction`"},
	PartnerFunctionBusinessPartner: whereHelpernull_Int{field: "`data_platform_business_partner_customer_partner_function_data`.`PartnerFunctionBusinessPartner`"},
	DefaultPartner:                 whereHelpernull_Bool{field: "`data_platform_business_partner_customer_partner_function_data`.`DefaultPartner`"},
	CreationDate:                   whereHelpernull_Time{field: "`data_platform_business_partner_customer_partner_function_data`.`CreationDate`"},
	IsMarkedForDeletion:            whereHelpernull_Bool{field: "`data_platform_business_partner_customer_partner_function_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBusinessPartnerCustomerPartnerFunctionDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerCustomerPartnerFunctionDatumRels = struct {
	PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum string
	PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum        string
	BusinessPartnerDataPlatformBusinessPartnerCustomerDatum               string
	BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData    string
}{
	PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: "PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum:        "PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum",
	BusinessPartnerDataPlatformBusinessPartnerCustomerDatum:               "BusinessPartnerDataPlatformBusinessPartnerCustomerDatum",
	BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData:    "BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData",
}

// dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR is where relationships are stored.
type dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR struct {
	PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum                  `boil:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum        *DataPlatformPartnerFunctionPartnerFunctionDatum          `boil:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum" json:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum" toml:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum" yaml:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum"`
	BusinessPartnerDataPlatformBusinessPartnerCustomerDatum               *DataPlatformBusinessPartnerCustomerDatum                 `boil:"BusinessPartnerDataPlatformBusinessPartnerCustomerDatum" json:"BusinessPartnerDataPlatformBusinessPartnerCustomerDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerCustomerDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerCustomerDatum"`
	BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData    DataPlatformBusinessPartnerCustomerPartnerPlantDatumSlice `boil:"BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData" json:"BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData" toml:"BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData" yaml:"BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR) NewStruct() *dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR {
	return &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
}

func (r *dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR) GetPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR) GetPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum() *DataPlatformPartnerFunctionPartnerFunctionDatum {
	if r == nil {
		return nil
	}
	return r.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum
}

func (r *dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR) GetBusinessPartnerDataPlatformBusinessPartnerCustomerDatum() *DataPlatformBusinessPartnerCustomerDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum
}

func (r *dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR) GetBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData() DataPlatformBusinessPartnerCustomerPartnerPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData
}

// dataPlatformBusinessPartnerCustomerPartnerFunctionDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerCustomerPartnerFunctionDatumL struct{}

var (
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAllColumns            = []string{"BusinessPartner", "Customer", "PartnerCounter", "PartnerFunction", "PartnerFunctionBusinessPartner", "DefaultPartner", "CreationDate", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumColumnsWithoutDefault = []string{"BusinessPartner", "Customer", "PartnerCounter", "PartnerFunction", "PartnerFunctionBusinessPartner", "DefaultPartner", "CreationDate", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Customer", "PartnerCounter"}
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerCustomerPartnerFunctionDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerCustomerPartnerFunctionDatum.
	DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice []*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum
	// DataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook is the signature for custom DataPlatformBusinessPartnerCustomerPartnerFunctionDatum hook methods
	DataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) error

	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerCustomerPartnerFunctionDatum{})
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumType)
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumType, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumMapping, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks []DataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook

var dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeInsertHooks []DataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook
var dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterInsertHooks []DataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook

var dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeUpdateHooks []DataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook
var dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterUpdateHooks []DataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook

var dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeDeleteHooks []DataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook
var dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterDeleteHooks []DataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook

var dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeUpsertHooks []DataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook
var dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterUpsertHooks []DataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook registers your hook function for all future operations.
func AddDataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook(hookPoint boil.HookPoint, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook DataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks = append(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeInsertHooks = append(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeInsertHooks, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.AfterInsertHook:
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterInsertHooks = append(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterInsertHooks, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeUpdateHooks = append(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeUpdateHooks, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterUpdateHooks = append(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterUpdateHooks, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeDeleteHooks = append(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeDeleteHooks, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterDeleteHooks = append(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterDeleteHooks, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeUpsertHooks = append(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeUpsertHooks, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterUpsertHooks = append(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterUpsertHooks, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumHook)
	}
}

// One returns a single dataPlatformBusinessPartnerCustomerPartnerFunctionDatum record from the query.
func (q dataPlatformBusinessPartnerCustomerPartnerFunctionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum, error) {
	o := &DataPlatformBusinessPartnerCustomerPartnerFunctionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_customer_partner_function_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerCustomerPartnerFunctionDatum records from the query.
func (q dataPlatformBusinessPartnerCustomerPartnerFunctionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerCustomerPartnerFunctionDatum slice")
	}

	if len(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerCustomerPartnerFunctionDatum records in the query.
func (q dataPlatformBusinessPartnerCustomerPartnerFunctionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_customer_partner_function_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerCustomerPartnerFunctionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_customer_partner_function_data exists")
	}

	return count > 0, nil
}

// PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.PartnerFunctionBusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(mods ...qm.QueryMod) dataPlatformPartnerFunctionPartnerFunctionDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PartnerFunction` = ?", o.PartnerFunction),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPartnerFunctionPartnerFunctionData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerCustomerDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) BusinessPartnerDataPlatformBusinessPartnerCustomerDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerCustomerDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerCustomerData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData retrieves all the data_platform_business_partner_customer_partner_plant_datum's DataPlatformBusinessPartnerCustomerPartnerPlantData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData(mods ...qm.QueryMod) dataPlatformBusinessPartnerCustomerPartnerPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_customer_partner_plant_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerCustomerPartnerPlantData(queryMods...)
}

// LoadPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerCustomerPartnerFunctionDatumL) LoadPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum
	var object *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum.(*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum.(*[]*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
		}
		if !queries.IsNil(object.PartnerFunctionBusinessPartner) {
			args = append(args, object.PartnerFunctionBusinessPartner)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PartnerFunctionBusinessPartner) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PartnerFunctionBusinessPartner) {
				args = append(args, obj.PartnerFunctionBusinessPartner)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		foreign.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(foreign.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PartnerFunctionBusinessPartner, foreign.BusinessPartner) {
				local.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
				}
				foreign.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(foreign.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData, local)
				break
			}
		}
	}

	return nil
}

// LoadPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerCustomerPartnerFunctionDatumL) LoadPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum
	var object *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum.(*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum.(*[]*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
		}
		if !queries.IsNil(object.PartnerFunction) {
			args = append(args, object.PartnerFunction)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PartnerFunction) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PartnerFunction) {
				args = append(args, obj.PartnerFunction)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_partner_function_partner_function_data`),
		qm.WhereIn(`data_platform_partner_function_partner_function_data.PartnerFunction in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPartnerFunctionPartnerFunctionDatum")
	}

	var resultSlice []*DataPlatformPartnerFunctionPartnerFunctionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPartnerFunctionPartnerFunctionDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_partner_function_partner_function_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_partner_function_partner_function_data")
	}

	if len(dataPlatformPartnerFunctionPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformPartnerFunctionPartnerFunctionDatumR{}
		}
		foreign.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(foreign.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PartnerFunction, foreign.PartnerFunction) {
				local.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformPartnerFunctionPartnerFunctionDatumR{}
				}
				foreign.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(foreign.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerCustomerDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerCustomerPartnerFunctionDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerCustomerDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum
	var object *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum.(*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum.(*[]*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_customer_data`),
		qm.WhereIn(`data_platform_business_partner_customer_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerCustomerDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerCustomerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerCustomerDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_customer_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_customer_data")
	}

	if len(dataPlatformBusinessPartnerCustomerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerCustomerDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerCustomerDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerCustomerPartnerFunctionDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum
	var object *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum.(*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum.(*[]*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerCustomerPartnerFunctionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_customer_partner_plant_data`),
		qm.WhereIn(`data_platform_business_partner_customer_partner_plant_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_customer_partner_plant_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerCustomerPartnerPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_customer_partner_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_customer_partner_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_customer_partner_plant_data")
	}

	if len(dataPlatformBusinessPartnerCustomerPartnerPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerCustomerPartnerPlantDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData = append(local.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerCustomerPartnerPlantDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionDatum = local
				break
			}
		}
	}

	return nil
}

// SetPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformBusinessPartnerCustomerPartnerFunctionDatum to the related item.
// Sets o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
// Adds o to related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) SetPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_customer_partner_function_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PartnerFunctionBusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Customer, o.PartnerCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PartnerFunctionBusinessPartner, related.BusinessPartner)
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{
			PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerGeneralDatumR{
			PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData: DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice{o},
		}
	} else {
		related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData, o)
	}

	return nil
}

// RemovePartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum relationship.
// Sets o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) RemovePartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error

	queries.SetScanner(&o.PartnerFunctionBusinessPartner, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("PartnerFunctionBusinessPartner")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData {
		if queries.Equal(o.PartnerFunctionBusinessPartner, ri.PartnerFunctionBusinessPartner) {
			continue
		}

		ln := len(related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData)
		if ln > 1 && i < ln-1 {
			related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData[i] = related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData[ln-1]
		}
		related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData[:ln-1]
		break
	}
	return nil
}

// SetPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum of the dataPlatformBusinessPartnerCustomerPartnerFunctionDatum to the related item.
// Sets o.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum to related.
// Adds o to related.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) SetPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPartnerFunctionPartnerFunctionDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_customer_partner_function_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PartnerFunction"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PartnerFunction, o.BusinessPartner, o.Customer, o.PartnerCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PartnerFunction, related.PartnerFunction)
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{
			PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum: related,
		}
	} else {
		o.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformPartnerFunctionPartnerFunctionDatumR{
			PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData: DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice{o},
		}
	} else {
		related.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(related.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData, o)
	}

	return nil
}

// RemovePartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum relationship.
// Sets o.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) RemovePartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPartnerFunctionPartnerFunctionDatum) error {
	var err error

	queries.SetScanner(&o.PartnerFunction, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("PartnerFunction")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData {
		if queries.Equal(o.PartnerFunction, ri.PartnerFunction) {
			continue
		}

		ln := len(related.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData)
		if ln > 1 && i < ln-1 {
			related.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData[i] = related.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData[ln-1]
		}
		related.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData = related.R.PartnerFunctionDataPlatformBusinessPartnerCustomerPartnerFunctionData[:ln-1]
		break
	}
	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerCustomerDatum of the dataPlatformBusinessPartnerCustomerPartnerFunctionDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) SetBusinessPartnerDataPlatformBusinessPartnerCustomerDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerCustomerDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_customer_partner_function_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Customer, o.PartnerCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{
			BusinessPartnerDataPlatformBusinessPartnerCustomerDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerCustomerDatumR{
			BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData: DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData = append(related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionData, o)
	}

	return nil
}

// AddBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData adds the given related objects to the existing relationships
// of the data_platform_business_partner_customer_partner_function_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionDatum appropriately.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) AddBusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerCustomerPartnerPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_customer_partner_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerPartnerPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.PartnerFunction, rel.BusinessPartner, rel.Customer, rel.PartnerCounter, rel.PartnerFunctionBusinessPartner, rel.PlantCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerCustomerPartnerFunctionDatumR{
			BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData = append(o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerPlantData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerCustomerPartnerPlantDatumR{
				BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerCustomerPartnerFunctionDatum = o
		}
	}
	return nil
}

// DataPlatformBusinessPartnerCustomerPartnerFunctionData retrieves all the records using an executor.
func DataPlatformBusinessPartnerCustomerPartnerFunctionData(mods ...qm.QueryMod) dataPlatformBusinessPartnerCustomerPartnerFunctionDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_customer_partner_function_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_customer_partner_function_data`.*"})
	}

	return dataPlatformBusinessPartnerCustomerPartnerFunctionDatumQuery{q}
}

// FindDataPlatformBusinessPartnerCustomerPartnerFunctionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerCustomerPartnerFunctionDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, customer int, partnerCounter int, selectCols ...string) (*DataPlatformBusinessPartnerCustomerPartnerFunctionDatum, error) {
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumObj := &DataPlatformBusinessPartnerCustomerPartnerFunctionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_customer_partner_function_data` where `BusinessPartner`=? AND `Customer`=? AND `PartnerCounter`=?", sel,
	)

	q := queries.Raw(query, businessPartner, customer, partnerCounter)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_customer_partner_function_data")
	}

	if err = dataPlatformBusinessPartnerCustomerPartnerFunctionDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformBusinessPartnerCustomerPartnerFunctionDatumObj, err
	}

	return dataPlatformBusinessPartnerCustomerPartnerFunctionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_customer_partner_function_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerCustomerPartnerFunctionDatumInsertCache[key]
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAllColumns,
			dataPlatformBusinessPartnerCustomerPartnerFunctionDatumColumnsWithDefault,
			dataPlatformBusinessPartnerCustomerPartnerFunctionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumType, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumType, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_customer_partner_function_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_customer_partner_function_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_customer_partner_function_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_customer_partner_function_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Customer,
		o.PartnerCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_customer_partner_function_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformBusinessPartnerCustomerPartnerFunctionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpdateCache[key]
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAllColumns,
			dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_business_partner_customer_partner_function_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_customer_partner_function_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumType, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumMapping, append(wl, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_business_partner_customer_partner_function_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_business_partner_customer_partner_function_data")
	}

	if !cached {
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerCustomerPartnerFunctionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_business_partner_customer_partner_function_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_business_partner_customer_partner_function_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_customer_partner_function_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerCustomerPartnerFunctionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformBusinessPartnerCustomerPartnerFunctionDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformBusinessPartnerCustomerPartnerFunctionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_customer_partner_function_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerCustomerPartnerFunctionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpsertCache[key]
	dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAllColumns,
			dataPlatformBusinessPartnerCustomerPartnerFunctionDatumColumnsWithDefault,
			dataPlatformBusinessPartnerCustomerPartnerFunctionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAllColumns,
			dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_customer_partner_function_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_customer_partner_function_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_customer_partner_function_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumType, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumType, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_customer_partner_function_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumType, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_customer_partner_function_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_customer_partner_function_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerCustomerPartnerFunctionDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformBusinessPartnerCustomerPartnerFunctionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformBusinessPartnerCustomerPartnerFunctionDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_customer_partner_function_data` WHERE `BusinessPartner`=? AND `Customer`=? AND `PartnerCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_business_partner_customer_partner_function_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_business_partner_customer_partner_function_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerCustomerPartnerFunctionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformBusinessPartnerCustomerPartnerFunctionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_customer_partner_function_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_customer_partner_function_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_customer_partner_function_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerCustomerPartnerFunctionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_customer_partner_function_data")
	}

	if len(dataPlatformBusinessPartnerCustomerPartnerFunctionDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerCustomerPartnerFunctionDatum(ctx, exec, o.BusinessPartner, o.Customer, o.PartnerCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_customer_partner_function_data`.* FROM `data_platform_business_partner_customer_partner_function_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerCustomerPartnerFunctionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerCustomerPartnerFunctionDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerCustomerPartnerFunctionDatumExists checks if the DataPlatformBusinessPartnerCustomerPartnerFunctionDatum row exists.
func DataPlatformBusinessPartnerCustomerPartnerFunctionDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, customer int, partnerCounter int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_customer_partner_function_data` where `BusinessPartner`=? AND `Customer`=? AND `PartnerCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, customer, partnerCounter)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, customer, partnerCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_customer_partner_function_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerCustomerPartnerFunctionDatum row exists.
func (o *DataPlatformBusinessPartnerCustomerPartnerFunctionDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerCustomerPartnerFunctionDatumExists(ctx, exec, o.BusinessPartner, o.Customer, o.PartnerCounter)
}
