// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformCountryCountryDatum is an object representing the database table.
type DataPlatformCountryCountryDatum struct {
	Country      string `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	GlobalRegion string `boil:"GlobalRegion" json:"GlobalRegion" toml:"GlobalRegion" yaml:"GlobalRegion"`

	R *dataPlatformCountryCountryDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformCountryCountryDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformCountryCountryDatumColumns = struct {
	Country      string
	GlobalRegion string
}{
	Country:      "Country",
	GlobalRegion: "GlobalRegion",
}

var DataPlatformCountryCountryDatumTableColumns = struct {
	Country      string
	GlobalRegion string
}{
	Country:      "data_platform_country_country_data.Country",
	GlobalRegion: "data_platform_country_country_data.GlobalRegion",
}

// Generated where

var DataPlatformCountryCountryDatumWhere = struct {
	Country      whereHelperstring
	GlobalRegion whereHelperstring
}{
	Country:      whereHelperstring{field: "`data_platform_country_country_data`.`Country`"},
	GlobalRegion: whereHelperstring{field: "`data_platform_country_country_data`.`GlobalRegion`"},
}

// DataPlatformCountryCountryDatumRels is where relationship names are stored.
var DataPlatformCountryCountryDatumRels = struct {
	GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum string
	CountryDataPlatformBusinessPartnerGeneralData         string
	BillFromCountryDataPlatformContractHeaderData         string
	BillToCountryDataPlatformContractHeaderData           string
	BillFromCountryDataPlatformDeliveryDocumentHeaderData string
	BillToCountryDataPlatformDeliveryDocumentHeaderData   string
	CountryOfOriginDataPlatformDeliveryDocumentItemData   string
	CountryDataPlatformDeliveryDocumentPartnerData        string
	BillFromCountryDataPlatformInvoiceDocumentHeaderData  string
	BillToCountryDataPlatformInvoiceDocumentHeaderData    string
	CountryOfOriginDataPlatformInvoiceDocumentItemData    string
	CountryDataPlatformInvoiceDocumentPartnerData         string
	BillFromCountryDataPlatformOrdersHeaderData           string
	BillToCountryDataPlatformOrdersHeaderData             string
	CountryOfOriginDataPlatformOrdersItemData             string
	CountryDataPlatformOrdersPartnerData                  string
	CountryDataPlatformPlantGeneralData                   string
	CountryOfOriginDataPlatformProductMasterGeneralData   string
	CountryDataPlatformProductionOrderPartnerData         string
	BillFromCountryDataPlatformQuotationsHeaderData       string
	BillToCountryDataPlatformQuotationsHeaderData         string
	CountryDataPlatformQuotationsPartnerData              string
}{
	GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum: "GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum",
	CountryDataPlatformBusinessPartnerGeneralData:         "CountryDataPlatformBusinessPartnerGeneralData",
	BillFromCountryDataPlatformContractHeaderData:         "BillFromCountryDataPlatformContractHeaderData",
	BillToCountryDataPlatformContractHeaderData:           "BillToCountryDataPlatformContractHeaderData",
	BillFromCountryDataPlatformDeliveryDocumentHeaderData: "BillFromCountryDataPlatformDeliveryDocumentHeaderData",
	BillToCountryDataPlatformDeliveryDocumentHeaderData:   "BillToCountryDataPlatformDeliveryDocumentHeaderData",
	CountryOfOriginDataPlatformDeliveryDocumentItemData:   "CountryOfOriginDataPlatformDeliveryDocumentItemData",
	CountryDataPlatformDeliveryDocumentPartnerData:        "CountryDataPlatformDeliveryDocumentPartnerData",
	BillFromCountryDataPlatformInvoiceDocumentHeaderData:  "BillFromCountryDataPlatformInvoiceDocumentHeaderData",
	BillToCountryDataPlatformInvoiceDocumentHeaderData:    "BillToCountryDataPlatformInvoiceDocumentHeaderData",
	CountryOfOriginDataPlatformInvoiceDocumentItemData:    "CountryOfOriginDataPlatformInvoiceDocumentItemData",
	CountryDataPlatformInvoiceDocumentPartnerData:         "CountryDataPlatformInvoiceDocumentPartnerData",
	BillFromCountryDataPlatformOrdersHeaderData:           "BillFromCountryDataPlatformOrdersHeaderData",
	BillToCountryDataPlatformOrdersHeaderData:             "BillToCountryDataPlatformOrdersHeaderData",
	CountryOfOriginDataPlatformOrdersItemData:             "CountryOfOriginDataPlatformOrdersItemData",
	CountryDataPlatformOrdersPartnerData:                  "CountryDataPlatformOrdersPartnerData",
	CountryDataPlatformPlantGeneralData:                   "CountryDataPlatformPlantGeneralData",
	CountryOfOriginDataPlatformProductMasterGeneralData:   "CountryOfOriginDataPlatformProductMasterGeneralData",
	CountryDataPlatformProductionOrderPartnerData:         "CountryDataPlatformProductionOrderPartnerData",
	BillFromCountryDataPlatformQuotationsHeaderData:       "BillFromCountryDataPlatformQuotationsHeaderData",
	BillToCountryDataPlatformQuotationsHeaderData:         "BillToCountryDataPlatformQuotationsHeaderData",
	CountryDataPlatformQuotationsPartnerData:              "CountryDataPlatformQuotationsPartnerData",
}

// dataPlatformCountryCountryDatumR is where relationships are stored.
type dataPlatformCountryCountryDatumR struct {
	GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum *DataPlatformGlobalRegionGlobalRegionDatum    `boil:"GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum" json:"GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum" toml:"GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum" yaml:"GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum"`
	CountryDataPlatformBusinessPartnerGeneralData         DataPlatformBusinessPartnerGeneralDatumSlice  `boil:"CountryDataPlatformBusinessPartnerGeneralData" json:"CountryDataPlatformBusinessPartnerGeneralData" toml:"CountryDataPlatformBusinessPartnerGeneralData" yaml:"CountryDataPlatformBusinessPartnerGeneralData"`
	BillFromCountryDataPlatformContractHeaderData         DataPlatformContractHeaderDatumSlice          `boil:"BillFromCountryDataPlatformContractHeaderData" json:"BillFromCountryDataPlatformContractHeaderData" toml:"BillFromCountryDataPlatformContractHeaderData" yaml:"BillFromCountryDataPlatformContractHeaderData"`
	BillToCountryDataPlatformContractHeaderData           DataPlatformContractHeaderDatumSlice          `boil:"BillToCountryDataPlatformContractHeaderData" json:"BillToCountryDataPlatformContractHeaderData" toml:"BillToCountryDataPlatformContractHeaderData" yaml:"BillToCountryDataPlatformContractHeaderData"`
	BillFromCountryDataPlatformDeliveryDocumentHeaderData DataPlatformDeliveryDocumentHeaderDatumSlice  `boil:"BillFromCountryDataPlatformDeliveryDocumentHeaderData" json:"BillFromCountryDataPlatformDeliveryDocumentHeaderData" toml:"BillFromCountryDataPlatformDeliveryDocumentHeaderData" yaml:"BillFromCountryDataPlatformDeliveryDocumentHeaderData"`
	BillToCountryDataPlatformDeliveryDocumentHeaderData   DataPlatformDeliveryDocumentHeaderDatumSlice  `boil:"BillToCountryDataPlatformDeliveryDocumentHeaderData" json:"BillToCountryDataPlatformDeliveryDocumentHeaderData" toml:"BillToCountryDataPlatformDeliveryDocumentHeaderData" yaml:"BillToCountryDataPlatformDeliveryDocumentHeaderData"`
	CountryOfOriginDataPlatformDeliveryDocumentItemData   DataPlatformDeliveryDocumentItemDatumSlice    `boil:"CountryOfOriginDataPlatformDeliveryDocumentItemData" json:"CountryOfOriginDataPlatformDeliveryDocumentItemData" toml:"CountryOfOriginDataPlatformDeliveryDocumentItemData" yaml:"CountryOfOriginDataPlatformDeliveryDocumentItemData"`
	CountryDataPlatformDeliveryDocumentPartnerData        DataPlatformDeliveryDocumentPartnerDatumSlice `boil:"CountryDataPlatformDeliveryDocumentPartnerData" json:"CountryDataPlatformDeliveryDocumentPartnerData" toml:"CountryDataPlatformDeliveryDocumentPartnerData" yaml:"CountryDataPlatformDeliveryDocumentPartnerData"`
	BillFromCountryDataPlatformInvoiceDocumentHeaderData  DataPlatformInvoiceDocumentHeaderDatumSlice   `boil:"BillFromCountryDataPlatformInvoiceDocumentHeaderData" json:"BillFromCountryDataPlatformInvoiceDocumentHeaderData" toml:"BillFromCountryDataPlatformInvoiceDocumentHeaderData" yaml:"BillFromCountryDataPlatformInvoiceDocumentHeaderData"`
	BillToCountryDataPlatformInvoiceDocumentHeaderData    DataPlatformInvoiceDocumentHeaderDatumSlice   `boil:"BillToCountryDataPlatformInvoiceDocumentHeaderData" json:"BillToCountryDataPlatformInvoiceDocumentHeaderData" toml:"BillToCountryDataPlatformInvoiceDocumentHeaderData" yaml:"BillToCountryDataPlatformInvoiceDocumentHeaderData"`
	CountryOfOriginDataPlatformInvoiceDocumentItemData    DataPlatformInvoiceDocumentItemDatumSlice     `boil:"CountryOfOriginDataPlatformInvoiceDocumentItemData" json:"CountryOfOriginDataPlatformInvoiceDocumentItemData" toml:"CountryOfOriginDataPlatformInvoiceDocumentItemData" yaml:"CountryOfOriginDataPlatformInvoiceDocumentItemData"`
	CountryDataPlatformInvoiceDocumentPartnerData         DataPlatformInvoiceDocumentPartnerDatumSlice  `boil:"CountryDataPlatformInvoiceDocumentPartnerData" json:"CountryDataPlatformInvoiceDocumentPartnerData" toml:"CountryDataPlatformInvoiceDocumentPartnerData" yaml:"CountryDataPlatformInvoiceDocumentPartnerData"`
	BillFromCountryDataPlatformOrdersHeaderData           DataPlatformOrdersHeaderDatumSlice            `boil:"BillFromCountryDataPlatformOrdersHeaderData" json:"BillFromCountryDataPlatformOrdersHeaderData" toml:"BillFromCountryDataPlatformOrdersHeaderData" yaml:"BillFromCountryDataPlatformOrdersHeaderData"`
	BillToCountryDataPlatformOrdersHeaderData             DataPlatformOrdersHeaderDatumSlice            `boil:"BillToCountryDataPlatformOrdersHeaderData" json:"BillToCountryDataPlatformOrdersHeaderData" toml:"BillToCountryDataPlatformOrdersHeaderData" yaml:"BillToCountryDataPlatformOrdersHeaderData"`
	CountryOfOriginDataPlatformOrdersItemData             DataPlatformOrdersItemDatumSlice              `boil:"CountryOfOriginDataPlatformOrdersItemData" json:"CountryOfOriginDataPlatformOrdersItemData" toml:"CountryOfOriginDataPlatformOrdersItemData" yaml:"CountryOfOriginDataPlatformOrdersItemData"`
	CountryDataPlatformOrdersPartnerData                  DataPlatformOrdersPartnerDatumSlice           `boil:"CountryDataPlatformOrdersPartnerData" json:"CountryDataPlatformOrdersPartnerData" toml:"CountryDataPlatformOrdersPartnerData" yaml:"CountryDataPlatformOrdersPartnerData"`
	CountryDataPlatformPlantGeneralData                   DataPlatformPlantGeneralDatumSlice            `boil:"CountryDataPlatformPlantGeneralData" json:"CountryDataPlatformPlantGeneralData" toml:"CountryDataPlatformPlantGeneralData" yaml:"CountryDataPlatformPlantGeneralData"`
	CountryOfOriginDataPlatformProductMasterGeneralData   DataPlatformProductMasterGeneralDatumSlice    `boil:"CountryOfOriginDataPlatformProductMasterGeneralData" json:"CountryOfOriginDataPlatformProductMasterGeneralData" toml:"CountryOfOriginDataPlatformProductMasterGeneralData" yaml:"CountryOfOriginDataPlatformProductMasterGeneralData"`
	CountryDataPlatformProductionOrderPartnerData         DataPlatformProductionOrderPartnerDatumSlice  `boil:"CountryDataPlatformProductionOrderPartnerData" json:"CountryDataPlatformProductionOrderPartnerData" toml:"CountryDataPlatformProductionOrderPartnerData" yaml:"CountryDataPlatformProductionOrderPartnerData"`
	BillFromCountryDataPlatformQuotationsHeaderData       DataPlatformQuotationsHeaderDatumSlice        `boil:"BillFromCountryDataPlatformQuotationsHeaderData" json:"BillFromCountryDataPlatformQuotationsHeaderData" toml:"BillFromCountryDataPlatformQuotationsHeaderData" yaml:"BillFromCountryDataPlatformQuotationsHeaderData"`
	BillToCountryDataPlatformQuotationsHeaderData         DataPlatformQuotationsHeaderDatumSlice        `boil:"BillToCountryDataPlatformQuotationsHeaderData" json:"BillToCountryDataPlatformQuotationsHeaderData" toml:"BillToCountryDataPlatformQuotationsHeaderData" yaml:"BillToCountryDataPlatformQuotationsHeaderData"`
	CountryDataPlatformQuotationsPartnerData              DataPlatformQuotationsPartnerDatumSlice       `boil:"CountryDataPlatformQuotationsPartnerData" json:"CountryDataPlatformQuotationsPartnerData" toml:"CountryDataPlatformQuotationsPartnerData" yaml:"CountryDataPlatformQuotationsPartnerData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformCountryCountryDatumR) NewStruct() *dataPlatformCountryCountryDatumR {
	return &dataPlatformCountryCountryDatumR{}
}

func (r *dataPlatformCountryCountryDatumR) GetGlobalRegionDataPlatformGlobalRegionGlobalRegionDatum() *DataPlatformGlobalRegionGlobalRegionDatum {
	if r == nil {
		return nil
	}
	return r.GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum
}

func (r *dataPlatformCountryCountryDatumR) GetCountryDataPlatformBusinessPartnerGeneralData() DataPlatformBusinessPartnerGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformBusinessPartnerGeneralData
}

func (r *dataPlatformCountryCountryDatumR) GetBillFromCountryDataPlatformContractHeaderData() DataPlatformContractHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromCountryDataPlatformContractHeaderData
}

func (r *dataPlatformCountryCountryDatumR) GetBillToCountryDataPlatformContractHeaderData() DataPlatformContractHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillToCountryDataPlatformContractHeaderData
}

func (r *dataPlatformCountryCountryDatumR) GetBillFromCountryDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromCountryDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformCountryCountryDatumR) GetBillToCountryDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillToCountryDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryOfOriginDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryDataPlatformDeliveryDocumentPartnerData() DataPlatformDeliveryDocumentPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformDeliveryDocumentPartnerData
}

func (r *dataPlatformCountryCountryDatumR) GetBillFromCountryDataPlatformInvoiceDocumentHeaderData() DataPlatformInvoiceDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromCountryDataPlatformInvoiceDocumentHeaderData
}

func (r *dataPlatformCountryCountryDatumR) GetBillToCountryDataPlatformInvoiceDocumentHeaderData() DataPlatformInvoiceDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillToCountryDataPlatformInvoiceDocumentHeaderData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryOfOriginDataPlatformInvoiceDocumentItemData() DataPlatformInvoiceDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginDataPlatformInvoiceDocumentItemData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryDataPlatformInvoiceDocumentPartnerData() DataPlatformInvoiceDocumentPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformInvoiceDocumentPartnerData
}

func (r *dataPlatformCountryCountryDatumR) GetBillFromCountryDataPlatformOrdersHeaderData() DataPlatformOrdersHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromCountryDataPlatformOrdersHeaderData
}

func (r *dataPlatformCountryCountryDatumR) GetBillToCountryDataPlatformOrdersHeaderData() DataPlatformOrdersHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillToCountryDataPlatformOrdersHeaderData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryOfOriginDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginDataPlatformOrdersItemData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryDataPlatformOrdersPartnerData() DataPlatformOrdersPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformOrdersPartnerData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryDataPlatformPlantGeneralData() DataPlatformPlantGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformPlantGeneralData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryOfOriginDataPlatformProductMasterGeneralData() DataPlatformProductMasterGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginDataPlatformProductMasterGeneralData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryDataPlatformProductionOrderPartnerData() DataPlatformProductionOrderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformProductionOrderPartnerData
}

func (r *dataPlatformCountryCountryDatumR) GetBillFromCountryDataPlatformQuotationsHeaderData() DataPlatformQuotationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillFromCountryDataPlatformQuotationsHeaderData
}

func (r *dataPlatformCountryCountryDatumR) GetBillToCountryDataPlatformQuotationsHeaderData() DataPlatformQuotationsHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillToCountryDataPlatformQuotationsHeaderData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryDataPlatformQuotationsPartnerData() DataPlatformQuotationsPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformQuotationsPartnerData
}

// dataPlatformCountryCountryDatumL is where Load methods for each relationship are stored.
type dataPlatformCountryCountryDatumL struct{}

var (
	dataPlatformCountryCountryDatumAllColumns            = []string{"Country", "GlobalRegion"}
	dataPlatformCountryCountryDatumColumnsWithoutDefault = []string{"Country", "GlobalRegion"}
	dataPlatformCountryCountryDatumColumnsWithDefault    = []string{}
	dataPlatformCountryCountryDatumPrimaryKeyColumns     = []string{"Country"}
	dataPlatformCountryCountryDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformCountryCountryDatumSlice is an alias for a slice of pointers to DataPlatformCountryCountryDatum.
	// This should almost always be used instead of []DataPlatformCountryCountryDatum.
	DataPlatformCountryCountryDatumSlice []*DataPlatformCountryCountryDatum

	dataPlatformCountryCountryDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformCountryCountryDatumType                 = reflect.TypeOf(&DataPlatformCountryCountryDatum{})
	dataPlatformCountryCountryDatumMapping              = queries.MakeStructMapping(dataPlatformCountryCountryDatumType)
	dataPlatformCountryCountryDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, dataPlatformCountryCountryDatumPrimaryKeyColumns)
	dataPlatformCountryCountryDatumInsertCacheMut       sync.RWMutex
	dataPlatformCountryCountryDatumInsertCache          = make(map[string]insertCache)
	dataPlatformCountryCountryDatumUpdateCacheMut       sync.RWMutex
	dataPlatformCountryCountryDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformCountryCountryDatumUpsertCacheMut       sync.RWMutex
	dataPlatformCountryCountryDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformCountryCountryDatum record from the query.
func (q dataPlatformCountryCountryDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformCountryCountryDatum, error) {
	o := &DataPlatformCountryCountryDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_country_country_data")
	}

	return o, nil
}

// All returns all DataPlatformCountryCountryDatum records from the query.
func (q dataPlatformCountryCountryDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformCountryCountryDatumSlice, error) {
	var o []*DataPlatformCountryCountryDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformCountryCountryDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformCountryCountryDatum records in the query.
func (q dataPlatformCountryCountryDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_country_country_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformCountryCountryDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_country_country_data exists")
	}

	return count > 0, nil
}

// GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum pointed to by the foreign key.
func (o *DataPlatformCountryCountryDatum) GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum(mods ...qm.QueryMod) dataPlatformGlobalRegionGlobalRegionDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`GlobalRegion` = ?", o.GlobalRegion),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformGlobalRegionGlobalRegionData(queryMods...)
}

// CountryDataPlatformBusinessPartnerGeneralData retrieves all the data_platform_business_partner_general_datum's DataPlatformBusinessPartnerGeneralData with an executor via Country column.
func (o *DataPlatformCountryCountryDatum) CountryDataPlatformBusinessPartnerGeneralData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_general_data`.`Country`=?", o.Country),
	)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// BillFromCountryDataPlatformContractHeaderData retrieves all the data_platform_contract_header_datum's DataPlatformContractHeaderData with an executor via BillFromCountry column.
func (o *DataPlatformCountryCountryDatum) BillFromCountryDataPlatformContractHeaderData(mods ...qm.QueryMod) dataPlatformContractHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_contract_header_data`.`BillFromCountry`=?", o.Country),
	)

	return DataPlatformContractHeaderData(queryMods...)
}

// BillToCountryDataPlatformContractHeaderData retrieves all the data_platform_contract_header_datum's DataPlatformContractHeaderData with an executor via BillToCountry column.
func (o *DataPlatformCountryCountryDatum) BillToCountryDataPlatformContractHeaderData(mods ...qm.QueryMod) dataPlatformContractHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_contract_header_data`.`BillToCountry`=?", o.Country),
	)

	return DataPlatformContractHeaderData(queryMods...)
}

// BillFromCountryDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via BillFromCountry column.
func (o *DataPlatformCountryCountryDatum) BillFromCountryDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`BillFromCountry`=?", o.Country),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// BillToCountryDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via BillToCountry column.
func (o *DataPlatformCountryCountryDatum) BillToCountryDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`BillToCountry`=?", o.Country),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// CountryOfOriginDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via CountryOfOrigin column.
func (o *DataPlatformCountryCountryDatum) CountryOfOriginDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`CountryOfOrigin`=?", o.Country),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// CountryDataPlatformDeliveryDocumentPartnerData retrieves all the data_platform_delivery_document_partner_datum's DataPlatformDeliveryDocumentPartnerData with an executor via Country column.
func (o *DataPlatformCountryCountryDatum) CountryDataPlatformDeliveryDocumentPartnerData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_partner_data`.`Country`=?", o.Country),
	)

	return DataPlatformDeliveryDocumentPartnerData(queryMods...)
}

// BillFromCountryDataPlatformInvoiceDocumentHeaderData retrieves all the data_platform_invoice_document_header_datum's DataPlatformInvoiceDocumentHeaderData with an executor via BillFromCountry column.
func (o *DataPlatformCountryCountryDatum) BillFromCountryDataPlatformInvoiceDocumentHeaderData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_header_data`.`BillFromCountry`=?", o.Country),
	)

	return DataPlatformInvoiceDocumentHeaderData(queryMods...)
}

// BillToCountryDataPlatformInvoiceDocumentHeaderData retrieves all the data_platform_invoice_document_header_datum's DataPlatformInvoiceDocumentHeaderData with an executor via BillToCountry column.
func (o *DataPlatformCountryCountryDatum) BillToCountryDataPlatformInvoiceDocumentHeaderData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_header_data`.`BillToCountry`=?", o.Country),
	)

	return DataPlatformInvoiceDocumentHeaderData(queryMods...)
}

// CountryOfOriginDataPlatformInvoiceDocumentItemData retrieves all the data_platform_invoice_document_item_datum's DataPlatformInvoiceDocumentItemData with an executor via CountryOfOrigin column.
func (o *DataPlatformCountryCountryDatum) CountryOfOriginDataPlatformInvoiceDocumentItemData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_item_data`.`CountryOfOrigin`=?", o.Country),
	)

	return DataPlatformInvoiceDocumentItemData(queryMods...)
}

// CountryDataPlatformInvoiceDocumentPartnerData retrieves all the data_platform_invoice_document_partner_datum's DataPlatformInvoiceDocumentPartnerData with an executor via Country column.
func (o *DataPlatformCountryCountryDatum) CountryDataPlatformInvoiceDocumentPartnerData(mods ...qm.QueryMod) dataPlatformInvoiceDocumentPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_invoice_document_partner_data`.`Country`=?", o.Country),
	)

	return DataPlatformInvoiceDocumentPartnerData(queryMods...)
}

// BillFromCountryDataPlatformOrdersHeaderData retrieves all the data_platform_orders_header_datum's DataPlatformOrdersHeaderData with an executor via BillFromCountry column.
func (o *DataPlatformCountryCountryDatum) BillFromCountryDataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_data`.`BillFromCountry`=?", o.Country),
	)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// BillToCountryDataPlatformOrdersHeaderData retrieves all the data_platform_orders_header_datum's DataPlatformOrdersHeaderData with an executor via BillToCountry column.
func (o *DataPlatformCountryCountryDatum) BillToCountryDataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_data`.`BillToCountry`=?", o.Country),
	)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// CountryOfOriginDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via CountryOfOrigin column.
func (o *DataPlatformCountryCountryDatum) CountryOfOriginDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`CountryOfOrigin`=?", o.Country),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// CountryDataPlatformOrdersPartnerData retrieves all the data_platform_orders_partner_datum's DataPlatformOrdersPartnerData with an executor via Country column.
func (o *DataPlatformCountryCountryDatum) CountryDataPlatformOrdersPartnerData(mods ...qm.QueryMod) dataPlatformOrdersPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_partner_data`.`Country`=?", o.Country),
	)

	return DataPlatformOrdersPartnerData(queryMods...)
}

// CountryDataPlatformPlantGeneralData retrieves all the data_platform_plant_general_datum's DataPlatformPlantGeneralData with an executor via Country column.
func (o *DataPlatformCountryCountryDatum) CountryDataPlatformPlantGeneralData(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_plant_general_data`.`Country`=?", o.Country),
	)

	return DataPlatformPlantGeneralData(queryMods...)
}

// CountryOfOriginDataPlatformProductMasterGeneralData retrieves all the data_platform_product_master_general_datum's DataPlatformProductMasterGeneralData with an executor via CountryOfOrigin column.
func (o *DataPlatformCountryCountryDatum) CountryOfOriginDataPlatformProductMasterGeneralData(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_general_data`.`CountryOfOrigin`=?", o.Country),
	)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// CountryDataPlatformProductionOrderPartnerData retrieves all the data_platform_production_order_partner_datum's DataPlatformProductionOrderPartnerData with an executor via Country column.
func (o *DataPlatformCountryCountryDatum) CountryDataPlatformProductionOrderPartnerData(mods ...qm.QueryMod) dataPlatformProductionOrderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_partner_data`.`Country`=?", o.Country),
	)

	return DataPlatformProductionOrderPartnerData(queryMods...)
}

// BillFromCountryDataPlatformQuotationsHeaderData retrieves all the data_platform_quotations_header_datum's DataPlatformQuotationsHeaderData with an executor via BillFromCountry column.
func (o *DataPlatformCountryCountryDatum) BillFromCountryDataPlatformQuotationsHeaderData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_header_data`.`BillFromCountry`=?", o.Country),
	)

	return DataPlatformQuotationsHeaderData(queryMods...)
}

// BillToCountryDataPlatformQuotationsHeaderData retrieves all the data_platform_quotations_header_datum's DataPlatformQuotationsHeaderData with an executor via BillToCountry column.
func (o *DataPlatformCountryCountryDatum) BillToCountryDataPlatformQuotationsHeaderData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_header_data`.`BillToCountry`=?", o.Country),
	)

	return DataPlatformQuotationsHeaderData(queryMods...)
}

// CountryDataPlatformQuotationsPartnerData retrieves all the data_platform_quotations_partner_datum's DataPlatformQuotationsPartnerData with an executor via Country column.
func (o *DataPlatformCountryCountryDatum) CountryDataPlatformQuotationsPartnerData(mods ...qm.QueryMod) dataPlatformQuotationsPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_partner_data`.`Country`=?", o.Country),
	)

	return DataPlatformQuotationsPartnerData(queryMods...)
}

// LoadGlobalRegionDataPlatformGlobalRegionGlobalRegionDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformCountryCountryDatumL) LoadGlobalRegionDataPlatformGlobalRegionGlobalRegionDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.GlobalRegion)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if a == obj.GlobalRegion {
					continue Outer
				}
			}

			args = append(args, obj.GlobalRegion)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_global_region_global_region_data`),
		qm.WhereIn(`data_platform_global_region_global_region_data.GlobalRegion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformGlobalRegionGlobalRegionDatum")
	}

	var resultSlice []*DataPlatformGlobalRegionGlobalRegionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformGlobalRegionGlobalRegionDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_global_region_global_region_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_global_region_global_region_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GlobalRegion == foreign.GlobalRegion {
				local.R.GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformBusinessPartnerGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryDataPlatformBusinessPartnerGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_general_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if singular {
		object.R.CountryDataPlatformBusinessPartnerGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Country == foreign.Country {
				local.R.CountryDataPlatformBusinessPartnerGeneralData = append(local.R.CountryDataPlatformBusinessPartnerGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromCountryDataPlatformContractHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadBillFromCountryDataPlatformContractHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_contract_header_data`),
		qm.WhereIn(`data_platform_contract_header_data.BillFromCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_contract_header_data")
	}

	var resultSlice []*DataPlatformContractHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_contract_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_contract_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_contract_header_data")
	}

	if singular {
		object.R.BillFromCountryDataPlatformContractHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.BillFromCountry) {
				local.R.BillFromCountryDataPlatformContractHeaderData = append(local.R.BillFromCountryDataPlatformContractHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillToCountryDataPlatformContractHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadBillToCountryDataPlatformContractHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_contract_header_data`),
		qm.WhereIn(`data_platform_contract_header_data.BillToCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_contract_header_data")
	}

	var resultSlice []*DataPlatformContractHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_contract_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_contract_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_contract_header_data")
	}

	if singular {
		object.R.BillToCountryDataPlatformContractHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.BillToCountry) {
				local.R.BillToCountryDataPlatformContractHeaderData = append(local.R.BillToCountryDataPlatformContractHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromCountryDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadBillFromCountryDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.BillFromCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.BillFromCountry) {
				local.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData = append(local.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillToCountryDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadBillToCountryDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.BillToCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.BillToCountryDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.BillToCountry) {
				local.R.BillToCountryDataPlatformDeliveryDocumentHeaderData = append(local.R.BillToCountryDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryOfOriginDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.CountryOfOrigin in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.CountryOfOriginDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.CountryOfOrigin) {
				local.R.CountryOfOriginDataPlatformDeliveryDocumentItemData = append(local.R.CountryOfOriginDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformDeliveryDocumentPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryDataPlatformDeliveryDocumentPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_partner_data`),
		qm.WhereIn(`data_platform_delivery_document_partner_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_partner_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_partner_data")
	}

	if singular {
		object.R.CountryDataPlatformDeliveryDocumentPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.Country) {
				local.R.CountryDataPlatformDeliveryDocumentPartnerData = append(local.R.CountryDataPlatformDeliveryDocumentPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromCountryDataPlatformInvoiceDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadBillFromCountryDataPlatformInvoiceDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_header_data`),
		qm.WhereIn(`data_platform_invoice_document_header_data.BillFromCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_header_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_header_data")
	}

	if singular {
		object.R.BillFromCountryDataPlatformInvoiceDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Country == foreign.BillFromCountry {
				local.R.BillFromCountryDataPlatformInvoiceDocumentHeaderData = append(local.R.BillFromCountryDataPlatformInvoiceDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillToCountryDataPlatformInvoiceDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadBillToCountryDataPlatformInvoiceDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_header_data`),
		qm.WhereIn(`data_platform_invoice_document_header_data.BillToCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_header_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_header_data")
	}

	if singular {
		object.R.BillToCountryDataPlatformInvoiceDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Country == foreign.BillToCountry {
				local.R.BillToCountryDataPlatformInvoiceDocumentHeaderData = append(local.R.BillToCountryDataPlatformInvoiceDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginDataPlatformInvoiceDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryOfOriginDataPlatformInvoiceDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_item_data`),
		qm.WhereIn(`data_platform_invoice_document_item_data.CountryOfOrigin in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_item_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_item_data")
	}

	if singular {
		object.R.CountryOfOriginDataPlatformInvoiceDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.CountryOfOrigin) {
				local.R.CountryOfOriginDataPlatformInvoiceDocumentItemData = append(local.R.CountryOfOriginDataPlatformInvoiceDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformInvoiceDocumentPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryDataPlatformInvoiceDocumentPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_invoice_document_partner_data`),
		qm.WhereIn(`data_platform_invoice_document_partner_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_invoice_document_partner_data")
	}

	var resultSlice []*DataPlatformInvoiceDocumentPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_invoice_document_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_invoice_document_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_invoice_document_partner_data")
	}

	if singular {
		object.R.CountryDataPlatformInvoiceDocumentPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.Country) {
				local.R.CountryDataPlatformInvoiceDocumentPartnerData = append(local.R.CountryDataPlatformInvoiceDocumentPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromCountryDataPlatformOrdersHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadBillFromCountryDataPlatformOrdersHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.BillFromCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if singular {
		object.R.BillFromCountryDataPlatformOrdersHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.BillFromCountry) {
				local.R.BillFromCountryDataPlatformOrdersHeaderData = append(local.R.BillFromCountryDataPlatformOrdersHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillToCountryDataPlatformOrdersHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadBillToCountryDataPlatformOrdersHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.BillToCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if singular {
		object.R.BillToCountryDataPlatformOrdersHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.BillToCountry) {
				local.R.BillToCountryDataPlatformOrdersHeaderData = append(local.R.BillToCountryDataPlatformOrdersHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryOfOriginDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.CountryOfOrigin in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.CountryOfOriginDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.CountryOfOrigin) {
				local.R.CountryOfOriginDataPlatformOrdersItemData = append(local.R.CountryOfOriginDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformOrdersPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryDataPlatformOrdersPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_partner_data`),
		qm.WhereIn(`data_platform_orders_partner_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_partner_data")
	}

	var resultSlice []*DataPlatformOrdersPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_partner_data")
	}

	if singular {
		object.R.CountryDataPlatformOrdersPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.Country) {
				local.R.CountryDataPlatformOrdersPartnerData = append(local.R.CountryDataPlatformOrdersPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformPlantGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryDataPlatformPlantGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_plant_general_data")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_plant_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if singular {
		object.R.CountryDataPlatformPlantGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.Country) {
				local.R.CountryDataPlatformPlantGeneralData = append(local.R.CountryDataPlatformPlantGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginDataPlatformProductMasterGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryOfOriginDataPlatformProductMasterGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.CountryOfOrigin in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_general_data")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if singular {
		object.R.CountryOfOriginDataPlatformProductMasterGeneralData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.CountryOfOrigin) {
				local.R.CountryOfOriginDataPlatformProductMasterGeneralData = append(local.R.CountryOfOriginDataPlatformProductMasterGeneralData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformProductionOrderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryDataPlatformProductionOrderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_partner_data`),
		qm.WhereIn(`data_platform_production_order_partner_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_partner_data")
	}

	var resultSlice []*DataPlatformProductionOrderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_partner_data")
	}

	if singular {
		object.R.CountryDataPlatformProductionOrderPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.Country) {
				local.R.CountryDataPlatformProductionOrderPartnerData = append(local.R.CountryDataPlatformProductionOrderPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillFromCountryDataPlatformQuotationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadBillFromCountryDataPlatformQuotationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_data`),
		qm.WhereIn(`data_platform_quotations_header_data.BillFromCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_header_data")
	}

	var resultSlice []*DataPlatformQuotationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_data")
	}

	if singular {
		object.R.BillFromCountryDataPlatformQuotationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.BillFromCountry) {
				local.R.BillFromCountryDataPlatformQuotationsHeaderData = append(local.R.BillFromCountryDataPlatformQuotationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBillToCountryDataPlatformQuotationsHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadBillToCountryDataPlatformQuotationsHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_data`),
		qm.WhereIn(`data_platform_quotations_header_data.BillToCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_header_data")
	}

	var resultSlice []*DataPlatformQuotationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_data")
	}

	if singular {
		object.R.BillToCountryDataPlatformQuotationsHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.BillToCountry) {
				local.R.BillToCountryDataPlatformQuotationsHeaderData = append(local.R.BillToCountryDataPlatformQuotationsHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformQuotationsPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryDataPlatformQuotationsPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_partner_data`),
		qm.WhereIn(`data_platform_quotations_partner_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_partner_data")
	}

	var resultSlice []*DataPlatformQuotationsPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_partner_data")
	}

	if singular {
		object.R.CountryDataPlatformQuotationsPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.Country) {
				local.R.CountryDataPlatformQuotationsPartnerData = append(local.R.CountryDataPlatformQuotationsPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// SetGlobalRegionDataPlatformGlobalRegionGlobalRegionDatum of the dataPlatformCountryCountryDatum to the related item.
// Sets o.R.GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum to related.
func (o *DataPlatformCountryCountryDatum) SetGlobalRegionDataPlatformGlobalRegionGlobalRegionDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformGlobalRegionGlobalRegionDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_country_country_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"GlobalRegion"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformCountryCountryDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.GlobalRegion, o.Country}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GlobalRegion = related.GlobalRegion
	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum: related,
		}
	} else {
		o.R.GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum = related
	}

	return nil
}

// AddCountryDataPlatformBusinessPartnerGeneralData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformBusinessPartnerGeneralData.
func (o *DataPlatformCountryCountryDatum) AddCountryDataPlatformBusinessPartnerGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Country = o.Country
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Country = o.Country
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryDataPlatformBusinessPartnerGeneralData: related,
		}
	} else {
		o.R.CountryDataPlatformBusinessPartnerGeneralData = append(o.R.CountryDataPlatformBusinessPartnerGeneralData, related...)
	}

	return nil
}

// AddBillFromCountryDataPlatformContractHeaderData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromCountryDataPlatformContractHeaderData.
func (o *DataPlatformCountryCountryDatum) AddBillFromCountryDataPlatformContractHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformContractHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillFromCountry, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromCountry"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.Contract}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillFromCountry, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			BillFromCountryDataPlatformContractHeaderData: related,
		}
	} else {
		o.R.BillFromCountryDataPlatformContractHeaderData = append(o.R.BillFromCountryDataPlatformContractHeaderData, related...)
	}

	return nil
}

// SetBillFromCountryDataPlatformContractHeaderData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillFromCountryDataPlatformCountryCountryDatum's BillFromCountryDataPlatformContractHeaderData accordingly.
// Replaces o.R.BillFromCountryDataPlatformContractHeaderData with related.
func (o *DataPlatformCountryCountryDatum) SetBillFromCountryDataPlatformContractHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformContractHeaderDatum) error {
	query := "update `data_platform_contract_header_data` set `BillFromCountry` = null where `BillFromCountry` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillFromCountryDataPlatformContractHeaderData = nil
	}

	return o.AddBillFromCountryDataPlatformContractHeaderData(ctx, exec, insert, related...)
}

// RemoveBillFromCountryDataPlatformContractHeaderData relationships from objects passed in.
// Removes related items from R.BillFromCountryDataPlatformContractHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveBillFromCountryDataPlatformContractHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformContractHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillFromCountry, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillFromCountry")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillFromCountryDataPlatformContractHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillFromCountryDataPlatformContractHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.BillFromCountryDataPlatformContractHeaderData[i] = o.R.BillFromCountryDataPlatformContractHeaderData[ln-1]
			}
			o.R.BillFromCountryDataPlatformContractHeaderData = o.R.BillFromCountryDataPlatformContractHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillToCountryDataPlatformContractHeaderData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.BillToCountryDataPlatformContractHeaderData.
func (o *DataPlatformCountryCountryDatum) AddBillToCountryDataPlatformContractHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformContractHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillToCountry, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_contract_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillToCountry"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformContractHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.Contract}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillToCountry, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			BillToCountryDataPlatformContractHeaderData: related,
		}
	} else {
		o.R.BillToCountryDataPlatformContractHeaderData = append(o.R.BillToCountryDataPlatformContractHeaderData, related...)
	}

	return nil
}

// SetBillToCountryDataPlatformContractHeaderData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillToCountryDataPlatformCountryCountryDatum's BillToCountryDataPlatformContractHeaderData accordingly.
// Replaces o.R.BillToCountryDataPlatformContractHeaderData with related.
func (o *DataPlatformCountryCountryDatum) SetBillToCountryDataPlatformContractHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformContractHeaderDatum) error {
	query := "update `data_platform_contract_header_data` set `BillToCountry` = null where `BillToCountry` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillToCountryDataPlatformContractHeaderData = nil
	}

	return o.AddBillToCountryDataPlatformContractHeaderData(ctx, exec, insert, related...)
}

// RemoveBillToCountryDataPlatformContractHeaderData relationships from objects passed in.
// Removes related items from R.BillToCountryDataPlatformContractHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveBillToCountryDataPlatformContractHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformContractHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillToCountry, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillToCountry")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillToCountryDataPlatformContractHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillToCountryDataPlatformContractHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.BillToCountryDataPlatformContractHeaderData[i] = o.R.BillToCountryDataPlatformContractHeaderData[ln-1]
			}
			o.R.BillToCountryDataPlatformContractHeaderData = o.R.BillToCountryDataPlatformContractHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillFromCountryDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformCountryCountryDatum) AddBillFromCountryDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillFromCountry, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromCountry"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillFromCountry, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			BillFromCountryDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData = append(o.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// SetBillFromCountryDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillFromCountryDataPlatformCountryCountryDatum's BillFromCountryDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData with related.
func (o *DataPlatformCountryCountryDatum) SetBillFromCountryDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `BillFromCountry` = null where `BillFromCountry` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddBillFromCountryDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveBillFromCountryDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.BillFromCountryDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveBillFromCountryDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillFromCountry, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillFromCountry")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData[i] = o.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData = o.R.BillFromCountryDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillToCountryDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.BillToCountryDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformCountryCountryDatum) AddBillToCountryDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillToCountry, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillToCountry"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillToCountry, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			BillToCountryDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.BillToCountryDataPlatformDeliveryDocumentHeaderData = append(o.R.BillToCountryDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// SetBillToCountryDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillToCountryDataPlatformCountryCountryDatum's BillToCountryDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.BillToCountryDataPlatformDeliveryDocumentHeaderData with related.
func (o *DataPlatformCountryCountryDatum) SetBillToCountryDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `BillToCountry` = null where `BillToCountry` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillToCountryDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddBillToCountryDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveBillToCountryDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.BillToCountryDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveBillToCountryDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillToCountry, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillToCountry")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillToCountryDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillToCountryDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.BillToCountryDataPlatformDeliveryDocumentHeaderData[i] = o.R.BillToCountryDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.BillToCountryDataPlatformDeliveryDocumentHeaderData = o.R.BillToCountryDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryOfOriginDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryOfOriginDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformCountryCountryDatum) AddCountryOfOriginDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryOfOrigin, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOrigin"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryOfOrigin, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryOfOriginDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.CountryOfOriginDataPlatformDeliveryDocumentItemData = append(o.R.CountryOfOriginDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetCountryOfOriginDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryOfOriginDataPlatformCountryCountryDatum's CountryOfOriginDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.CountryOfOriginDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformCountryCountryDatum) SetCountryOfOriginDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `CountryOfOrigin` = null where `CountryOfOrigin` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryOfOriginDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddCountryOfOriginDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveCountryOfOriginDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.CountryOfOriginDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveCountryOfOriginDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryOfOrigin, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("CountryOfOrigin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryOfOriginDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryOfOriginDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.CountryOfOriginDataPlatformDeliveryDocumentItemData[i] = o.R.CountryOfOriginDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.CountryOfOriginDataPlatformDeliveryDocumentItemData = o.R.CountryOfOriginDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryDataPlatformDeliveryDocumentPartnerData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformDeliveryDocumentPartnerData.
func (o *DataPlatformCountryCountryDatum) AddCountryDataPlatformDeliveryDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Country, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.DeliveryDocument, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Country, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryDataPlatformDeliveryDocumentPartnerData: related,
		}
	} else {
		o.R.CountryDataPlatformDeliveryDocumentPartnerData = append(o.R.CountryDataPlatformDeliveryDocumentPartnerData, related...)
	}

	return nil
}

// SetCountryDataPlatformDeliveryDocumentPartnerData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryDataPlatformCountryCountryDatum's CountryDataPlatformDeliveryDocumentPartnerData accordingly.
// Replaces o.R.CountryDataPlatformDeliveryDocumentPartnerData with related.
func (o *DataPlatformCountryCountryDatum) SetCountryDataPlatformDeliveryDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentPartnerDatum) error {
	query := "update `data_platform_delivery_document_partner_data` set `Country` = null where `Country` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryDataPlatformDeliveryDocumentPartnerData = nil
	}

	return o.AddCountryDataPlatformDeliveryDocumentPartnerData(ctx, exec, insert, related...)
}

// RemoveCountryDataPlatformDeliveryDocumentPartnerData relationships from objects passed in.
// Removes related items from R.CountryDataPlatformDeliveryDocumentPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveCountryDataPlatformDeliveryDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Country, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Country")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDataPlatformDeliveryDocumentPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDataPlatformDeliveryDocumentPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.CountryDataPlatformDeliveryDocumentPartnerData[i] = o.R.CountryDataPlatformDeliveryDocumentPartnerData[ln-1]
			}
			o.R.CountryDataPlatformDeliveryDocumentPartnerData = o.R.CountryDataPlatformDeliveryDocumentPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillFromCountryDataPlatformInvoiceDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromCountryDataPlatformInvoiceDocumentHeaderData.
func (o *DataPlatformCountryCountryDatum) AddBillFromCountryDataPlatformInvoiceDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillFromCountry = o.Country
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromCountry"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.InvoiceDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillFromCountry = o.Country
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			BillFromCountryDataPlatformInvoiceDocumentHeaderData: related,
		}
	} else {
		o.R.BillFromCountryDataPlatformInvoiceDocumentHeaderData = append(o.R.BillFromCountryDataPlatformInvoiceDocumentHeaderData, related...)
	}

	return nil
}

// AddBillToCountryDataPlatformInvoiceDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.BillToCountryDataPlatformInvoiceDocumentHeaderData.
func (o *DataPlatformCountryCountryDatum) AddBillToCountryDataPlatformInvoiceDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillToCountry = o.Country
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillToCountry"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.InvoiceDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillToCountry = o.Country
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			BillToCountryDataPlatformInvoiceDocumentHeaderData: related,
		}
	} else {
		o.R.BillToCountryDataPlatformInvoiceDocumentHeaderData = append(o.R.BillToCountryDataPlatformInvoiceDocumentHeaderData, related...)
	}

	return nil
}

// AddCountryOfOriginDataPlatformInvoiceDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryOfOriginDataPlatformInvoiceDocumentItemData.
func (o *DataPlatformCountryCountryDatum) AddCountryOfOriginDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryOfOrigin, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOrigin"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.InvoiceDocument, rel.InvoiceDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryOfOrigin, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryOfOriginDataPlatformInvoiceDocumentItemData: related,
		}
	} else {
		o.R.CountryOfOriginDataPlatformInvoiceDocumentItemData = append(o.R.CountryOfOriginDataPlatformInvoiceDocumentItemData, related...)
	}

	return nil
}

// SetCountryOfOriginDataPlatformInvoiceDocumentItemData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryOfOriginDataPlatformCountryCountryDatum's CountryOfOriginDataPlatformInvoiceDocumentItemData accordingly.
// Replaces o.R.CountryOfOriginDataPlatformInvoiceDocumentItemData with related.
func (o *DataPlatformCountryCountryDatum) SetCountryOfOriginDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	query := "update `data_platform_invoice_document_item_data` set `CountryOfOrigin` = null where `CountryOfOrigin` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryOfOriginDataPlatformInvoiceDocumentItemData = nil
	}

	return o.AddCountryOfOriginDataPlatformInvoiceDocumentItemData(ctx, exec, insert, related...)
}

// RemoveCountryOfOriginDataPlatformInvoiceDocumentItemData relationships from objects passed in.
// Removes related items from R.CountryOfOriginDataPlatformInvoiceDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveCountryOfOriginDataPlatformInvoiceDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInvoiceDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryOfOrigin, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("CountryOfOrigin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryOfOriginDataPlatformInvoiceDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryOfOriginDataPlatformInvoiceDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.CountryOfOriginDataPlatformInvoiceDocumentItemData[i] = o.R.CountryOfOriginDataPlatformInvoiceDocumentItemData[ln-1]
			}
			o.R.CountryOfOriginDataPlatformInvoiceDocumentItemData = o.R.CountryOfOriginDataPlatformInvoiceDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryDataPlatformInvoiceDocumentPartnerData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformInvoiceDocumentPartnerData.
func (o *DataPlatformCountryCountryDatum) AddCountryDataPlatformInvoiceDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Country, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_invoice_document_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInvoiceDocumentPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.InvoiceDocument, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Country, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryDataPlatformInvoiceDocumentPartnerData: related,
		}
	} else {
		o.R.CountryDataPlatformInvoiceDocumentPartnerData = append(o.R.CountryDataPlatformInvoiceDocumentPartnerData, related...)
	}

	return nil
}

// SetCountryDataPlatformInvoiceDocumentPartnerData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryDataPlatformCountryCountryDatum's CountryDataPlatformInvoiceDocumentPartnerData accordingly.
// Replaces o.R.CountryDataPlatformInvoiceDocumentPartnerData with related.
func (o *DataPlatformCountryCountryDatum) SetCountryDataPlatformInvoiceDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInvoiceDocumentPartnerDatum) error {
	query := "update `data_platform_invoice_document_partner_data` set `Country` = null where `Country` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryDataPlatformInvoiceDocumentPartnerData = nil
	}

	return o.AddCountryDataPlatformInvoiceDocumentPartnerData(ctx, exec, insert, related...)
}

// RemoveCountryDataPlatformInvoiceDocumentPartnerData relationships from objects passed in.
// Removes related items from R.CountryDataPlatformInvoiceDocumentPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveCountryDataPlatformInvoiceDocumentPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInvoiceDocumentPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Country, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Country")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDataPlatformInvoiceDocumentPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDataPlatformInvoiceDocumentPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.CountryDataPlatformInvoiceDocumentPartnerData[i] = o.R.CountryDataPlatformInvoiceDocumentPartnerData[ln-1]
			}
			o.R.CountryDataPlatformInvoiceDocumentPartnerData = o.R.CountryDataPlatformInvoiceDocumentPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillFromCountryDataPlatformOrdersHeaderData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromCountryDataPlatformOrdersHeaderData.
func (o *DataPlatformCountryCountryDatum) AddBillFromCountryDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillFromCountry, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromCountry"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillFromCountry, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			BillFromCountryDataPlatformOrdersHeaderData: related,
		}
	} else {
		o.R.BillFromCountryDataPlatformOrdersHeaderData = append(o.R.BillFromCountryDataPlatformOrdersHeaderData, related...)
	}

	return nil
}

// SetBillFromCountryDataPlatformOrdersHeaderData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillFromCountryDataPlatformCountryCountryDatum's BillFromCountryDataPlatformOrdersHeaderData accordingly.
// Replaces o.R.BillFromCountryDataPlatformOrdersHeaderData with related.
func (o *DataPlatformCountryCountryDatum) SetBillFromCountryDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	query := "update `data_platform_orders_header_data` set `BillFromCountry` = null where `BillFromCountry` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillFromCountryDataPlatformOrdersHeaderData = nil
	}

	return o.AddBillFromCountryDataPlatformOrdersHeaderData(ctx, exec, insert, related...)
}

// RemoveBillFromCountryDataPlatformOrdersHeaderData relationships from objects passed in.
// Removes related items from R.BillFromCountryDataPlatformOrdersHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveBillFromCountryDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillFromCountry, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillFromCountry")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillFromCountryDataPlatformOrdersHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillFromCountryDataPlatformOrdersHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.BillFromCountryDataPlatformOrdersHeaderData[i] = o.R.BillFromCountryDataPlatformOrdersHeaderData[ln-1]
			}
			o.R.BillFromCountryDataPlatformOrdersHeaderData = o.R.BillFromCountryDataPlatformOrdersHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillToCountryDataPlatformOrdersHeaderData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.BillToCountryDataPlatformOrdersHeaderData.
func (o *DataPlatformCountryCountryDatum) AddBillToCountryDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillToCountry, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillToCountry"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillToCountry, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			BillToCountryDataPlatformOrdersHeaderData: related,
		}
	} else {
		o.R.BillToCountryDataPlatformOrdersHeaderData = append(o.R.BillToCountryDataPlatformOrdersHeaderData, related...)
	}

	return nil
}

// SetBillToCountryDataPlatformOrdersHeaderData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillToCountryDataPlatformCountryCountryDatum's BillToCountryDataPlatformOrdersHeaderData accordingly.
// Replaces o.R.BillToCountryDataPlatformOrdersHeaderData with related.
func (o *DataPlatformCountryCountryDatum) SetBillToCountryDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	query := "update `data_platform_orders_header_data` set `BillToCountry` = null where `BillToCountry` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillToCountryDataPlatformOrdersHeaderData = nil
	}

	return o.AddBillToCountryDataPlatformOrdersHeaderData(ctx, exec, insert, related...)
}

// RemoveBillToCountryDataPlatformOrdersHeaderData relationships from objects passed in.
// Removes related items from R.BillToCountryDataPlatformOrdersHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveBillToCountryDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillToCountry, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillToCountry")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillToCountryDataPlatformOrdersHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillToCountryDataPlatformOrdersHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.BillToCountryDataPlatformOrdersHeaderData[i] = o.R.BillToCountryDataPlatformOrdersHeaderData[ln-1]
			}
			o.R.BillToCountryDataPlatformOrdersHeaderData = o.R.BillToCountryDataPlatformOrdersHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryOfOriginDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryOfOriginDataPlatformOrdersItemData.
func (o *DataPlatformCountryCountryDatum) AddCountryOfOriginDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryOfOrigin, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOrigin"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryOfOrigin, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryOfOriginDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.CountryOfOriginDataPlatformOrdersItemData = append(o.R.CountryOfOriginDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetCountryOfOriginDataPlatformOrdersItemData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryOfOriginDataPlatformCountryCountryDatum's CountryOfOriginDataPlatformOrdersItemData accordingly.
// Replaces o.R.CountryOfOriginDataPlatformOrdersItemData with related.
func (o *DataPlatformCountryCountryDatum) SetCountryOfOriginDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `CountryOfOrigin` = null where `CountryOfOrigin` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryOfOriginDataPlatformOrdersItemData = nil
	}

	return o.AddCountryOfOriginDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveCountryOfOriginDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.CountryOfOriginDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveCountryOfOriginDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryOfOrigin, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("CountryOfOrigin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryOfOriginDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryOfOriginDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.CountryOfOriginDataPlatformOrdersItemData[i] = o.R.CountryOfOriginDataPlatformOrdersItemData[ln-1]
			}
			o.R.CountryOfOriginDataPlatformOrdersItemData = o.R.CountryOfOriginDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryDataPlatformOrdersPartnerData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformOrdersPartnerData.
func (o *DataPlatformCountryCountryDatum) AddCountryDataPlatformOrdersPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Country, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.OrderID, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Country, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryDataPlatformOrdersPartnerData: related,
		}
	} else {
		o.R.CountryDataPlatformOrdersPartnerData = append(o.R.CountryDataPlatformOrdersPartnerData, related...)
	}

	return nil
}

// SetCountryDataPlatformOrdersPartnerData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryDataPlatformCountryCountryDatum's CountryDataPlatformOrdersPartnerData accordingly.
// Replaces o.R.CountryDataPlatformOrdersPartnerData with related.
func (o *DataPlatformCountryCountryDatum) SetCountryDataPlatformOrdersPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersPartnerDatum) error {
	query := "update `data_platform_orders_partner_data` set `Country` = null where `Country` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryDataPlatformOrdersPartnerData = nil
	}

	return o.AddCountryDataPlatformOrdersPartnerData(ctx, exec, insert, related...)
}

// RemoveCountryDataPlatformOrdersPartnerData relationships from objects passed in.
// Removes related items from R.CountryDataPlatformOrdersPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveCountryDataPlatformOrdersPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Country, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Country")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDataPlatformOrdersPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDataPlatformOrdersPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.CountryDataPlatformOrdersPartnerData[i] = o.R.CountryDataPlatformOrdersPartnerData[ln-1]
			}
			o.R.CountryDataPlatformOrdersPartnerData = o.R.CountryDataPlatformOrdersPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryDataPlatformPlantGeneralData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformPlantGeneralData.
func (o *DataPlatformCountryCountryDatum) AddCountryDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlantGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Country, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_plant_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlantGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Country, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryDataPlatformPlantGeneralData: related,
		}
	} else {
		o.R.CountryDataPlatformPlantGeneralData = append(o.R.CountryDataPlatformPlantGeneralData, related...)
	}

	return nil
}

// SetCountryDataPlatformPlantGeneralData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryDataPlatformCountryCountryDatum's CountryDataPlatformPlantGeneralData accordingly.
// Replaces o.R.CountryDataPlatformPlantGeneralData with related.
func (o *DataPlatformCountryCountryDatum) SetCountryDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlantGeneralDatum) error {
	query := "update `data_platform_plant_general_data` set `Country` = null where `Country` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryDataPlatformPlantGeneralData = nil
	}

	return o.AddCountryDataPlatformPlantGeneralData(ctx, exec, insert, related...)
}

// RemoveCountryDataPlatformPlantGeneralData relationships from objects passed in.
// Removes related items from R.CountryDataPlatformPlantGeneralData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveCountryDataPlatformPlantGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlantGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Country, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Country")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDataPlatformPlantGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDataPlatformPlantGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.CountryDataPlatformPlantGeneralData[i] = o.R.CountryDataPlatformPlantGeneralData[ln-1]
			}
			o.R.CountryDataPlatformPlantGeneralData = o.R.CountryDataPlatformPlantGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryOfOriginDataPlatformProductMasterGeneralData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryOfOriginDataPlatformProductMasterGeneralData.
func (o *DataPlatformCountryCountryDatum) AddCountryOfOriginDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CountryOfOrigin, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOrigin"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.Product}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CountryOfOrigin, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryOfOriginDataPlatformProductMasterGeneralData: related,
		}
	} else {
		o.R.CountryOfOriginDataPlatformProductMasterGeneralData = append(o.R.CountryOfOriginDataPlatformProductMasterGeneralData, related...)
	}

	return nil
}

// SetCountryOfOriginDataPlatformProductMasterGeneralData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryOfOriginDataPlatformCountryCountryDatum's CountryOfOriginDataPlatformProductMasterGeneralData accordingly.
// Replaces o.R.CountryOfOriginDataPlatformProductMasterGeneralData with related.
func (o *DataPlatformCountryCountryDatum) SetCountryOfOriginDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterGeneralDatum) error {
	query := "update `data_platform_product_master_general_data` set `CountryOfOrigin` = null where `CountryOfOrigin` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryOfOriginDataPlatformProductMasterGeneralData = nil
	}

	return o.AddCountryOfOriginDataPlatformProductMasterGeneralData(ctx, exec, insert, related...)
}

// RemoveCountryOfOriginDataPlatformProductMasterGeneralData relationships from objects passed in.
// Removes related items from R.CountryOfOriginDataPlatformProductMasterGeneralData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveCountryOfOriginDataPlatformProductMasterGeneralData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductMasterGeneralDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CountryOfOrigin, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("CountryOfOrigin")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryOfOriginDataPlatformProductMasterGeneralData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryOfOriginDataPlatformProductMasterGeneralData)
			if ln > 1 && i < ln-1 {
				o.R.CountryOfOriginDataPlatformProductMasterGeneralData[i] = o.R.CountryOfOriginDataPlatformProductMasterGeneralData[ln-1]
			}
			o.R.CountryOfOriginDataPlatformProductMasterGeneralData = o.R.CountryOfOriginDataPlatformProductMasterGeneralData[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryDataPlatformProductionOrderPartnerData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformProductionOrderPartnerData.
func (o *DataPlatformCountryCountryDatum) AddCountryDataPlatformProductionOrderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Country, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.ProductionOrder, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Country, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryDataPlatformProductionOrderPartnerData: related,
		}
	} else {
		o.R.CountryDataPlatformProductionOrderPartnerData = append(o.R.CountryDataPlatformProductionOrderPartnerData, related...)
	}

	return nil
}

// SetCountryDataPlatformProductionOrderPartnerData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryDataPlatformCountryCountryDatum's CountryDataPlatformProductionOrderPartnerData accordingly.
// Replaces o.R.CountryDataPlatformProductionOrderPartnerData with related.
func (o *DataPlatformCountryCountryDatum) SetCountryDataPlatformProductionOrderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderPartnerDatum) error {
	query := "update `data_platform_production_order_partner_data` set `Country` = null where `Country` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryDataPlatformProductionOrderPartnerData = nil
	}

	return o.AddCountryDataPlatformProductionOrderPartnerData(ctx, exec, insert, related...)
}

// RemoveCountryDataPlatformProductionOrderPartnerData relationships from objects passed in.
// Removes related items from R.CountryDataPlatformProductionOrderPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveCountryDataPlatformProductionOrderPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Country, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Country")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDataPlatformProductionOrderPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDataPlatformProductionOrderPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.CountryDataPlatformProductionOrderPartnerData[i] = o.R.CountryDataPlatformProductionOrderPartnerData[ln-1]
			}
			o.R.CountryDataPlatformProductionOrderPartnerData = o.R.CountryDataPlatformProductionOrderPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillFromCountryDataPlatformQuotationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.BillFromCountryDataPlatformQuotationsHeaderData.
func (o *DataPlatformCountryCountryDatum) AddBillFromCountryDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillFromCountry, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillFromCountry"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.Quotation}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillFromCountry, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			BillFromCountryDataPlatformQuotationsHeaderData: related,
		}
	} else {
		o.R.BillFromCountryDataPlatformQuotationsHeaderData = append(o.R.BillFromCountryDataPlatformQuotationsHeaderData, related...)
	}

	return nil
}

// SetBillFromCountryDataPlatformQuotationsHeaderData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillFromCountryDataPlatformCountryCountryDatum's BillFromCountryDataPlatformQuotationsHeaderData accordingly.
// Replaces o.R.BillFromCountryDataPlatformQuotationsHeaderData with related.
func (o *DataPlatformCountryCountryDatum) SetBillFromCountryDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderDatum) error {
	query := "update `data_platform_quotations_header_data` set `BillFromCountry` = null where `BillFromCountry` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillFromCountryDataPlatformQuotationsHeaderData = nil
	}

	return o.AddBillFromCountryDataPlatformQuotationsHeaderData(ctx, exec, insert, related...)
}

// RemoveBillFromCountryDataPlatformQuotationsHeaderData relationships from objects passed in.
// Removes related items from R.BillFromCountryDataPlatformQuotationsHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveBillFromCountryDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformQuotationsHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillFromCountry, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillFromCountry")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillFromCountryDataPlatformQuotationsHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillFromCountryDataPlatformQuotationsHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.BillFromCountryDataPlatformQuotationsHeaderData[i] = o.R.BillFromCountryDataPlatformQuotationsHeaderData[ln-1]
			}
			o.R.BillFromCountryDataPlatformQuotationsHeaderData = o.R.BillFromCountryDataPlatformQuotationsHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddBillToCountryDataPlatformQuotationsHeaderData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.BillToCountryDataPlatformQuotationsHeaderData.
func (o *DataPlatformCountryCountryDatum) AddBillToCountryDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillToCountry, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillToCountry"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.Quotation}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillToCountry, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			BillToCountryDataPlatformQuotationsHeaderData: related,
		}
	} else {
		o.R.BillToCountryDataPlatformQuotationsHeaderData = append(o.R.BillToCountryDataPlatformQuotationsHeaderData, related...)
	}

	return nil
}

// SetBillToCountryDataPlatformQuotationsHeaderData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillToCountryDataPlatformCountryCountryDatum's BillToCountryDataPlatformQuotationsHeaderData accordingly.
// Replaces o.R.BillToCountryDataPlatformQuotationsHeaderData with related.
func (o *DataPlatformCountryCountryDatum) SetBillToCountryDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderDatum) error {
	query := "update `data_platform_quotations_header_data` set `BillToCountry` = null where `BillToCountry` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.BillToCountryDataPlatformQuotationsHeaderData = nil
	}

	return o.AddBillToCountryDataPlatformQuotationsHeaderData(ctx, exec, insert, related...)
}

// RemoveBillToCountryDataPlatformQuotationsHeaderData relationships from objects passed in.
// Removes related items from R.BillToCountryDataPlatformQuotationsHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveBillToCountryDataPlatformQuotationsHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformQuotationsHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillToCountry, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("BillToCountry")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillToCountryDataPlatformQuotationsHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillToCountryDataPlatformQuotationsHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.BillToCountryDataPlatformQuotationsHeaderData[i] = o.R.BillToCountryDataPlatformQuotationsHeaderData[ln-1]
			}
			o.R.BillToCountryDataPlatformQuotationsHeaderData = o.R.BillToCountryDataPlatformQuotationsHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryDataPlatformQuotationsPartnerData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformQuotationsPartnerData.
func (o *DataPlatformCountryCountryDatum) AddCountryDataPlatformQuotationsPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Country, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.Quotation, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Country, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryDataPlatformQuotationsPartnerData: related,
		}
	} else {
		o.R.CountryDataPlatformQuotationsPartnerData = append(o.R.CountryDataPlatformQuotationsPartnerData, related...)
	}

	return nil
}

// SetCountryDataPlatformQuotationsPartnerData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryDataPlatformCountryCountryDatum's CountryDataPlatformQuotationsPartnerData accordingly.
// Replaces o.R.CountryDataPlatformQuotationsPartnerData with related.
func (o *DataPlatformCountryCountryDatum) SetCountryDataPlatformQuotationsPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsPartnerDatum) error {
	query := "update `data_platform_quotations_partner_data` set `Country` = null where `Country` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryDataPlatformQuotationsPartnerData = nil
	}

	return o.AddCountryDataPlatformQuotationsPartnerData(ctx, exec, insert, related...)
}

// RemoveCountryDataPlatformQuotationsPartnerData relationships from objects passed in.
// Removes related items from R.CountryDataPlatformQuotationsPartnerData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformCountryCountryDatum) RemoveCountryDataPlatformQuotationsPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformQuotationsPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Country, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Country")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDataPlatformQuotationsPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDataPlatformQuotationsPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.CountryDataPlatformQuotationsPartnerData[i] = o.R.CountryDataPlatformQuotationsPartnerData[ln-1]
			}
			o.R.CountryDataPlatformQuotationsPartnerData = o.R.CountryDataPlatformQuotationsPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformCountryCountryData retrieves all the records using an executor.
func DataPlatformCountryCountryData(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	mods = append(mods, qm.From("`data_platform_country_country_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_country_country_data`.*"})
	}

	return dataPlatformCountryCountryDatumQuery{q}
}

// FindDataPlatformCountryCountryDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, country string, selectCols ...string) (*DataPlatformCountryCountryDatum, error) {
	dataPlatformCountryCountryDatumObj := &DataPlatformCountryCountryDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_country_country_data` where `Country`=?", sel,
	)

	q := queries.Raw(query, country)

	err := q.Bind(ctx, exec, dataPlatformCountryCountryDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_country_country_data")
	}

	return dataPlatformCountryCountryDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformCountryCountryDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_country_country_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformCountryCountryDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformCountryCountryDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformCountryCountryDatumInsertCache[key]
	dataPlatformCountryCountryDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformCountryCountryDatumAllColumns,
			dataPlatformCountryCountryDatumColumnsWithDefault,
			dataPlatformCountryCountryDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_country_country_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_country_country_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_country_country_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformCountryCountryDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_country_country_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Country,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_country_country_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformCountryCountryDatumInsertCacheMut.Lock()
		dataPlatformCountryCountryDatumInsertCache[key] = cache
		dataPlatformCountryCountryDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformCountryCountryDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformCountryCountryDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformCountryCountryDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformCountryCountryDatumUpdateCache[key]
	dataPlatformCountryCountryDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformCountryCountryDatumAllColumns,
			dataPlatformCountryCountryDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_country_country_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_country_country_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformCountryCountryDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, append(wl, dataPlatformCountryCountryDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_country_country_data row")
	}

	if !cached {
		dataPlatformCountryCountryDatumUpdateCacheMut.Lock()
		dataPlatformCountryCountryDatumUpdateCache[key] = cache
		dataPlatformCountryCountryDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformCountryCountryDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_country_country_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformCountryCountryDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCountryCountryDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_country_country_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCountryCountryDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformCountryCountryDatum slice")
	}

	return nil
}

var mySQLDataPlatformCountryCountryDatumUniqueColumns = []string{
	"Country",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformCountryCountryDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_country_country_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformCountryCountryDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformCountryCountryDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformCountryCountryDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformCountryCountryDatumUpsertCache[key]
	dataPlatformCountryCountryDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformCountryCountryDatumAllColumns,
			dataPlatformCountryCountryDatumColumnsWithDefault,
			dataPlatformCountryCountryDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformCountryCountryDatumAllColumns,
			dataPlatformCountryCountryDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_country_country_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_country_country_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_country_country_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_country_country_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_country_country_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_country_country_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformCountryCountryDatumUpsertCacheMut.Lock()
		dataPlatformCountryCountryDatumUpsertCache[key] = cache
		dataPlatformCountryCountryDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformCountryCountryDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformCountryCountryDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformCountryCountryDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformCountryCountryDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_country_country_data` WHERE `Country`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_country_country_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformCountryCountryDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformCountryCountryDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_country_country_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformCountryCountryDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCountryCountryDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_country_country_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCountryCountryDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformCountryCountryDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformCountryCountryDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformCountryCountryDatum(ctx, exec, o.Country)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformCountryCountryDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformCountryCountryDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCountryCountryDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_country_country_data`.* FROM `data_platform_country_country_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCountryCountryDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformCountryCountryDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformCountryCountryDatumExists checks if the DataPlatformCountryCountryDatum row exists.
func DataPlatformCountryCountryDatumExists(ctx context.Context, exec boil.ContextExecutor, country string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_country_country_data` where `Country`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, country)
	}
	row := exec.QueryRowContext(ctx, sql, country)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_country_country_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformCountryCountryDatum row exists.
func (o *DataPlatformCountryCountryDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformCountryCountryDatumExists(ctx, exec, o.Country)
}
