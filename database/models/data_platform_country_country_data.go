// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformCountryCountryDatum is an object representing the database table.
type DataPlatformCountryCountryDatum struct {
	Country      string `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	GlobalRegion string `boil:"GlobalRegion" json:"GlobalRegion" toml:"GlobalRegion" yaml:"GlobalRegion"`

	R *dataPlatformCountryCountryDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformCountryCountryDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformCountryCountryDatumColumns = struct {
	Country      string
	GlobalRegion string
}{
	Country:      "Country",
	GlobalRegion: "GlobalRegion",
}

var DataPlatformCountryCountryDatumTableColumns = struct {
	Country      string
	GlobalRegion string
}{
	Country:      "data_platform_country_country_data.Country",
	GlobalRegion: "data_platform_country_country_data.GlobalRegion",
}

// Generated where

var DataPlatformCountryCountryDatumWhere = struct {
	Country      whereHelperstring
	GlobalRegion whereHelperstring
}{
	Country:      whereHelperstring{field: "`data_platform_country_country_data`.`Country`"},
	GlobalRegion: whereHelperstring{field: "`data_platform_country_country_data`.`GlobalRegion`"},
}

// DataPlatformCountryCountryDatumRels is where relationship names are stored.
var DataPlatformCountryCountryDatumRels = struct {
	GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum      string
	DepartureCountryDataPlatformBusinessPartnerCustomerTaxData string
	CountryDataPlatformBusinessPartnerGeneralData              string
	DepartureCountryDataPlatformBusinessPartnerSupplierTaxData string
	CountryDataPlatformOrdersHeaderPartnerData                 string
	CountryDataPlatformProductMasterTaxData                    string
}{
	GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum:      "GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum",
	DepartureCountryDataPlatformBusinessPartnerCustomerTaxData: "DepartureCountryDataPlatformBusinessPartnerCustomerTaxData",
	CountryDataPlatformBusinessPartnerGeneralData:              "CountryDataPlatformBusinessPartnerGeneralData",
	DepartureCountryDataPlatformBusinessPartnerSupplierTaxData: "DepartureCountryDataPlatformBusinessPartnerSupplierTaxData",
	CountryDataPlatformOrdersHeaderPartnerData:                 "CountryDataPlatformOrdersHeaderPartnerData",
	CountryDataPlatformProductMasterTaxData:                    "CountryDataPlatformProductMasterTaxData",
}

// dataPlatformCountryCountryDatumR is where relationships are stored.
type dataPlatformCountryCountryDatumR struct {
	GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum      *DataPlatformGlobalRegionGlobalRegionDatum       `boil:"GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum" json:"GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum" toml:"GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum" yaml:"GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum"`
	DepartureCountryDataPlatformBusinessPartnerCustomerTaxData DataPlatformBusinessPartnerCustomerTaxDatumSlice `boil:"DepartureCountryDataPlatformBusinessPartnerCustomerTaxData" json:"DepartureCountryDataPlatformBusinessPartnerCustomerTaxData" toml:"DepartureCountryDataPlatformBusinessPartnerCustomerTaxData" yaml:"DepartureCountryDataPlatformBusinessPartnerCustomerTaxData"`
	CountryDataPlatformBusinessPartnerGeneralData              DataPlatformBusinessPartnerGeneralDatumSlice     `boil:"CountryDataPlatformBusinessPartnerGeneralData" json:"CountryDataPlatformBusinessPartnerGeneralData" toml:"CountryDataPlatformBusinessPartnerGeneralData" yaml:"CountryDataPlatformBusinessPartnerGeneralData"`
	DepartureCountryDataPlatformBusinessPartnerSupplierTaxData DataPlatformBusinessPartnerSupplierTaxDatumSlice `boil:"DepartureCountryDataPlatformBusinessPartnerSupplierTaxData" json:"DepartureCountryDataPlatformBusinessPartnerSupplierTaxData" toml:"DepartureCountryDataPlatformBusinessPartnerSupplierTaxData" yaml:"DepartureCountryDataPlatformBusinessPartnerSupplierTaxData"`
	CountryDataPlatformOrdersHeaderPartnerData                 DataPlatformOrdersHeaderPartnerDatumSlice        `boil:"CountryDataPlatformOrdersHeaderPartnerData" json:"CountryDataPlatformOrdersHeaderPartnerData" toml:"CountryDataPlatformOrdersHeaderPartnerData" yaml:"CountryDataPlatformOrdersHeaderPartnerData"`
	CountryDataPlatformProductMasterTaxData                    DataPlatformProductMasterTaxDatumSlice           `boil:"CountryDataPlatformProductMasterTaxData" json:"CountryDataPlatformProductMasterTaxData" toml:"CountryDataPlatformProductMasterTaxData" yaml:"CountryDataPlatformProductMasterTaxData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformCountryCountryDatumR) NewStruct() *dataPlatformCountryCountryDatumR {
	return &dataPlatformCountryCountryDatumR{}
}

func (r *dataPlatformCountryCountryDatumR) GetGlobalRegionDataPlatformGlobalRegionGlobalRegionDatum() *DataPlatformGlobalRegionGlobalRegionDatum {
	if r == nil {
		return nil
	}
	return r.GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum
}

func (r *dataPlatformCountryCountryDatumR) GetDepartureCountryDataPlatformBusinessPartnerCustomerTaxData() DataPlatformBusinessPartnerCustomerTaxDatumSlice {
	if r == nil {
		return nil
	}
	return r.DepartureCountryDataPlatformBusinessPartnerCustomerTaxData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryDataPlatformBusinessPartnerGeneralData() DataPlatformBusinessPartnerGeneralDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformBusinessPartnerGeneralData
}

func (r *dataPlatformCountryCountryDatumR) GetDepartureCountryDataPlatformBusinessPartnerSupplierTaxData() DataPlatformBusinessPartnerSupplierTaxDatumSlice {
	if r == nil {
		return nil
	}
	return r.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryDataPlatformOrdersHeaderPartnerData() DataPlatformOrdersHeaderPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformOrdersHeaderPartnerData
}

func (r *dataPlatformCountryCountryDatumR) GetCountryDataPlatformProductMasterTaxData() DataPlatformProductMasterTaxDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformProductMasterTaxData
}

// dataPlatformCountryCountryDatumL is where Load methods for each relationship are stored.
type dataPlatformCountryCountryDatumL struct{}

var (
	dataPlatformCountryCountryDatumAllColumns            = []string{"Country", "GlobalRegion"}
	dataPlatformCountryCountryDatumColumnsWithoutDefault = []string{"Country", "GlobalRegion"}
	dataPlatformCountryCountryDatumColumnsWithDefault    = []string{}
	dataPlatformCountryCountryDatumPrimaryKeyColumns     = []string{"Country"}
	dataPlatformCountryCountryDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformCountryCountryDatumSlice is an alias for a slice of pointers to DataPlatformCountryCountryDatum.
	// This should almost always be used instead of []DataPlatformCountryCountryDatum.
	DataPlatformCountryCountryDatumSlice []*DataPlatformCountryCountryDatum
	// DataPlatformCountryCountryDatumHook is the signature for custom DataPlatformCountryCountryDatum hook methods
	DataPlatformCountryCountryDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformCountryCountryDatum) error

	dataPlatformCountryCountryDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformCountryCountryDatumType                 = reflect.TypeOf(&DataPlatformCountryCountryDatum{})
	dataPlatformCountryCountryDatumMapping              = queries.MakeStructMapping(dataPlatformCountryCountryDatumType)
	dataPlatformCountryCountryDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, dataPlatformCountryCountryDatumPrimaryKeyColumns)
	dataPlatformCountryCountryDatumInsertCacheMut       sync.RWMutex
	dataPlatformCountryCountryDatumInsertCache          = make(map[string]insertCache)
	dataPlatformCountryCountryDatumUpdateCacheMut       sync.RWMutex
	dataPlatformCountryCountryDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformCountryCountryDatumUpsertCacheMut       sync.RWMutex
	dataPlatformCountryCountryDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformCountryCountryDatumAfterSelectHooks []DataPlatformCountryCountryDatumHook

var dataPlatformCountryCountryDatumBeforeInsertHooks []DataPlatformCountryCountryDatumHook
var dataPlatformCountryCountryDatumAfterInsertHooks []DataPlatformCountryCountryDatumHook

var dataPlatformCountryCountryDatumBeforeUpdateHooks []DataPlatformCountryCountryDatumHook
var dataPlatformCountryCountryDatumAfterUpdateHooks []DataPlatformCountryCountryDatumHook

var dataPlatformCountryCountryDatumBeforeDeleteHooks []DataPlatformCountryCountryDatumHook
var dataPlatformCountryCountryDatumAfterDeleteHooks []DataPlatformCountryCountryDatumHook

var dataPlatformCountryCountryDatumBeforeUpsertHooks []DataPlatformCountryCountryDatumHook
var dataPlatformCountryCountryDatumAfterUpsertHooks []DataPlatformCountryCountryDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformCountryCountryDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformCountryCountryDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformCountryCountryDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformCountryCountryDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformCountryCountryDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformCountryCountryDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformCountryCountryDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformCountryCountryDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformCountryCountryDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformCountryCountryDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformCountryCountryDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformCountryCountryDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformCountryCountryDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformCountryCountryDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformCountryCountryDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformCountryCountryDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformCountryCountryDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformCountryCountryDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformCountryCountryDatumHook registers your hook function for all future operations.
func AddDataPlatformCountryCountryDatumHook(hookPoint boil.HookPoint, dataPlatformCountryCountryDatumHook DataPlatformCountryCountryDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformCountryCountryDatumAfterSelectHooks = append(dataPlatformCountryCountryDatumAfterSelectHooks, dataPlatformCountryCountryDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformCountryCountryDatumBeforeInsertHooks = append(dataPlatformCountryCountryDatumBeforeInsertHooks, dataPlatformCountryCountryDatumHook)
	case boil.AfterInsertHook:
		dataPlatformCountryCountryDatumAfterInsertHooks = append(dataPlatformCountryCountryDatumAfterInsertHooks, dataPlatformCountryCountryDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformCountryCountryDatumBeforeUpdateHooks = append(dataPlatformCountryCountryDatumBeforeUpdateHooks, dataPlatformCountryCountryDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformCountryCountryDatumAfterUpdateHooks = append(dataPlatformCountryCountryDatumAfterUpdateHooks, dataPlatformCountryCountryDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformCountryCountryDatumBeforeDeleteHooks = append(dataPlatformCountryCountryDatumBeforeDeleteHooks, dataPlatformCountryCountryDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformCountryCountryDatumAfterDeleteHooks = append(dataPlatformCountryCountryDatumAfterDeleteHooks, dataPlatformCountryCountryDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformCountryCountryDatumBeforeUpsertHooks = append(dataPlatformCountryCountryDatumBeforeUpsertHooks, dataPlatformCountryCountryDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformCountryCountryDatumAfterUpsertHooks = append(dataPlatformCountryCountryDatumAfterUpsertHooks, dataPlatformCountryCountryDatumHook)
	}
}

// One returns a single dataPlatformCountryCountryDatum record from the query.
func (q dataPlatformCountryCountryDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformCountryCountryDatum, error) {
	o := &DataPlatformCountryCountryDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_country_country_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformCountryCountryDatum records from the query.
func (q dataPlatformCountryCountryDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformCountryCountryDatumSlice, error) {
	var o []*DataPlatformCountryCountryDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformCountryCountryDatum slice")
	}

	if len(dataPlatformCountryCountryDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformCountryCountryDatum records in the query.
func (q dataPlatformCountryCountryDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_country_country_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformCountryCountryDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_country_country_data exists")
	}

	return count > 0, nil
}

// GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum pointed to by the foreign key.
func (o *DataPlatformCountryCountryDatum) GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum(mods ...qm.QueryMod) dataPlatformGlobalRegionGlobalRegionDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`GlobalRegion` = ?", o.GlobalRegion),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformGlobalRegionGlobalRegionData(queryMods...)
}

// DepartureCountryDataPlatformBusinessPartnerCustomerTaxData retrieves all the data_platform_business_partner_customer_tax_datum's DataPlatformBusinessPartnerCustomerTaxData with an executor via DepartureCountry column.
func (o *DataPlatformCountryCountryDatum) DepartureCountryDataPlatformBusinessPartnerCustomerTaxData(mods ...qm.QueryMod) dataPlatformBusinessPartnerCustomerTaxDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_customer_tax_data`.`DepartureCountry`=?", o.Country),
	)

	return DataPlatformBusinessPartnerCustomerTaxData(queryMods...)
}

// CountryDataPlatformBusinessPartnerGeneralData retrieves all the data_platform_business_partner_general_datum's DataPlatformBusinessPartnerGeneralData with an executor via Country column.
func (o *DataPlatformCountryCountryDatum) CountryDataPlatformBusinessPartnerGeneralData(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_general_data`.`Country`=?", o.Country),
	)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// DepartureCountryDataPlatformBusinessPartnerSupplierTaxData retrieves all the data_platform_business_partner_supplier_tax_datum's DataPlatformBusinessPartnerSupplierTaxData with an executor via DepartureCountry column.
func (o *DataPlatformCountryCountryDatum) DepartureCountryDataPlatformBusinessPartnerSupplierTaxData(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierTaxDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_supplier_tax_data`.`DepartureCountry`=?", o.Country),
	)

	return DataPlatformBusinessPartnerSupplierTaxData(queryMods...)
}

// CountryDataPlatformOrdersHeaderPartnerData retrieves all the data_platform_orders_header_partner_datum's DataPlatformOrdersHeaderPartnerData with an executor via Country column.
func (o *DataPlatformCountryCountryDatum) CountryDataPlatformOrdersHeaderPartnerData(mods ...qm.QueryMod) dataPlatformOrdersHeaderPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_partner_data`.`Country`=?", o.Country),
	)

	return DataPlatformOrdersHeaderPartnerData(queryMods...)
}

// CountryDataPlatformProductMasterTaxData retrieves all the data_platform_product_master_tax_datum's DataPlatformProductMasterTaxData with an executor via Country column.
func (o *DataPlatformCountryCountryDatum) CountryDataPlatformProductMasterTaxData(mods ...qm.QueryMod) dataPlatformProductMasterTaxDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_tax_data`.`Country`=?", o.Country),
	)

	return DataPlatformProductMasterTaxData(queryMods...)
}

// LoadGlobalRegionDataPlatformGlobalRegionGlobalRegionDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformCountryCountryDatumL) LoadGlobalRegionDataPlatformGlobalRegionGlobalRegionDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.GlobalRegion)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if a == obj.GlobalRegion {
					continue Outer
				}
			}

			args = append(args, obj.GlobalRegion)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_global_region_global_region_data`),
		qm.WhereIn(`data_platform_global_region_global_region_data.GlobalRegion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformGlobalRegionGlobalRegionDatum")
	}

	var resultSlice []*DataPlatformGlobalRegionGlobalRegionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformGlobalRegionGlobalRegionDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_global_region_global_region_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_global_region_global_region_data")
	}

	if len(dataPlatformGlobalRegionGlobalRegionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformGlobalRegionGlobalRegionDatumR{}
		}
		foreign.R.GlobalRegionDataPlatformCountryCountryData = append(foreign.R.GlobalRegionDataPlatformCountryCountryData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GlobalRegion == foreign.GlobalRegion {
				local.R.GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformGlobalRegionGlobalRegionDatumR{}
				}
				foreign.R.GlobalRegionDataPlatformCountryCountryData = append(foreign.R.GlobalRegionDataPlatformCountryCountryData, local)
				break
			}
		}
	}

	return nil
}

// LoadDepartureCountryDataPlatformBusinessPartnerCustomerTaxData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadDepartureCountryDataPlatformBusinessPartnerCustomerTaxData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_customer_tax_data`),
		qm.WhereIn(`data_platform_business_partner_customer_tax_data.DepartureCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_customer_tax_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerCustomerTaxDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_customer_tax_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_customer_tax_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_customer_tax_data")
	}

	if len(dataPlatformBusinessPartnerCustomerTaxDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DepartureCountryDataPlatformBusinessPartnerCustomerTaxData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerCustomerTaxDatumR{}
			}
			foreign.R.DepartureCountryDataPlatformCountryCountryDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Country == foreign.DepartureCountry {
				local.R.DepartureCountryDataPlatformBusinessPartnerCustomerTaxData = append(local.R.DepartureCountryDataPlatformBusinessPartnerCustomerTaxData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerCustomerTaxDatumR{}
				}
				foreign.R.DepartureCountryDataPlatformCountryCountryDatum = local
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformBusinessPartnerGeneralData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryDataPlatformBusinessPartnerGeneralData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_general_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_general_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CountryDataPlatformBusinessPartnerGeneralData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
			}
			foreign.R.CountryDataPlatformCountryCountryDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Country == foreign.Country {
				local.R.CountryDataPlatformBusinessPartnerGeneralData = append(local.R.CountryDataPlatformBusinessPartnerGeneralData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
				}
				foreign.R.CountryDataPlatformCountryCountryDatum = local
				break
			}
		}
	}

	return nil
}

// LoadDepartureCountryDataPlatformBusinessPartnerSupplierTaxData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadDepartureCountryDataPlatformBusinessPartnerSupplierTaxData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_supplier_tax_data`),
		qm.WhereIn(`data_platform_business_partner_supplier_tax_data.DepartureCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_supplier_tax_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerSupplierTaxDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_supplier_tax_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_supplier_tax_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_supplier_tax_data")
	}

	if len(dataPlatformBusinessPartnerSupplierTaxDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerSupplierTaxDatumR{}
			}
			foreign.R.DepartureCountryDataPlatformCountryCountryDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Country == foreign.DepartureCountry {
				local.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData = append(local.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerSupplierTaxDatumR{}
				}
				foreign.R.DepartureCountryDataPlatformCountryCountryDatum = local
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformOrdersHeaderPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryDataPlatformOrdersHeaderPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_partner_data`),
		qm.WhereIn(`data_platform_orders_header_partner_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_partner_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_partner_data")
	}

	if len(dataPlatformOrdersHeaderPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CountryDataPlatformOrdersHeaderPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformOrdersHeaderPartnerDatumR{}
			}
			foreign.R.CountryDataPlatformCountryCountryDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.Country) {
				local.R.CountryDataPlatformOrdersHeaderPartnerData = append(local.R.CountryDataPlatformOrdersHeaderPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformOrdersHeaderPartnerDatumR{}
				}
				foreign.R.CountryDataPlatformCountryCountryDatum = local
				break
			}
		}
	}

	return nil
}

// LoadCountryDataPlatformProductMasterTaxData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformCountryCountryDatumL) LoadCountryDataPlatformProductMasterTaxData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCountryCountryDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCountryCountryDatum
	var object *DataPlatformCountryCountryDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCountryCountryDatum.(*DataPlatformCountryCountryDatum)
		if !ok {
			object = new(DataPlatformCountryCountryDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCountryCountryDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCountryCountryDatum.(*[]*DataPlatformCountryCountryDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCountryCountryDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCountryCountryDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCountryCountryDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCountryCountryDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_tax_data`),
		qm.WhereIn(`data_platform_product_master_tax_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_tax_data")
	}

	var resultSlice []*DataPlatformProductMasterTaxDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_tax_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_tax_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_tax_data")
	}

	if len(dataPlatformProductMasterTaxDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CountryDataPlatformProductMasterTaxData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterTaxDatumR{}
			}
			foreign.R.CountryDataPlatformCountryCountryDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Country == foreign.Country {
				local.R.CountryDataPlatformProductMasterTaxData = append(local.R.CountryDataPlatformProductMasterTaxData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterTaxDatumR{}
				}
				foreign.R.CountryDataPlatformCountryCountryDatum = local
				break
			}
		}
	}

	return nil
}

// SetGlobalRegionDataPlatformGlobalRegionGlobalRegionDatum of the dataPlatformCountryCountryDatum to the related item.
// Sets o.R.GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum to related.
// Adds o to related.R.GlobalRegionDataPlatformCountryCountryData.
func (o *DataPlatformCountryCountryDatum) SetGlobalRegionDataPlatformGlobalRegionGlobalRegionDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformGlobalRegionGlobalRegionDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_country_country_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"GlobalRegion"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformCountryCountryDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.GlobalRegion, o.Country}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GlobalRegion = related.GlobalRegion
	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum: related,
		}
	} else {
		o.R.GlobalRegionDataPlatformGlobalRegionGlobalRegionDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformGlobalRegionGlobalRegionDatumR{
			GlobalRegionDataPlatformCountryCountryData: DataPlatformCountryCountryDatumSlice{o},
		}
	} else {
		related.R.GlobalRegionDataPlatformCountryCountryData = append(related.R.GlobalRegionDataPlatformCountryCountryData, o)
	}

	return nil
}

// AddDepartureCountryDataPlatformBusinessPartnerCustomerTaxData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.DepartureCountryDataPlatformBusinessPartnerCustomerTaxData.
// Sets related.R.DepartureCountryDataPlatformCountryCountryDatum appropriately.
func (o *DataPlatformCountryCountryDatum) AddDepartureCountryDataPlatformBusinessPartnerCustomerTaxData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerCustomerTaxDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DepartureCountry = o.Country
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_customer_tax_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DepartureCountry"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerTaxDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.BusinessPartner, rel.Customer, rel.DepartureCountry}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DepartureCountry = o.Country
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			DepartureCountryDataPlatformBusinessPartnerCustomerTaxData: related,
		}
	} else {
		o.R.DepartureCountryDataPlatformBusinessPartnerCustomerTaxData = append(o.R.DepartureCountryDataPlatformBusinessPartnerCustomerTaxData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerCustomerTaxDatumR{
				DepartureCountryDataPlatformCountryCountryDatum: o,
			}
		} else {
			rel.R.DepartureCountryDataPlatformCountryCountryDatum = o
		}
	}
	return nil
}

// AddCountryDataPlatformBusinessPartnerGeneralData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformBusinessPartnerGeneralData.
// Sets related.R.CountryDataPlatformCountryCountryDatum appropriately.
func (o *DataPlatformCountryCountryDatum) AddCountryDataPlatformBusinessPartnerGeneralData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Country = o.Country
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_general_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerGeneralDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Country = o.Country
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryDataPlatformBusinessPartnerGeneralData: related,
		}
	} else {
		o.R.CountryDataPlatformBusinessPartnerGeneralData = append(o.R.CountryDataPlatformBusinessPartnerGeneralData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerGeneralDatumR{
				CountryDataPlatformCountryCountryDatum: o,
			}
		} else {
			rel.R.CountryDataPlatformCountryCountryDatum = o
		}
	}
	return nil
}

// AddDepartureCountryDataPlatformBusinessPartnerSupplierTaxData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData.
// Sets related.R.DepartureCountryDataPlatformCountryCountryDatum appropriately.
func (o *DataPlatformCountryCountryDatum) AddDepartureCountryDataPlatformBusinessPartnerSupplierTaxData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerSupplierTaxDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DepartureCountry = o.Country
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_supplier_tax_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DepartureCountry"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.BusinessPartner, rel.Supplier, rel.DepartureCountry}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DepartureCountry = o.Country
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			DepartureCountryDataPlatformBusinessPartnerSupplierTaxData: related,
		}
	} else {
		o.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData = append(o.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerSupplierTaxDatumR{
				DepartureCountryDataPlatformCountryCountryDatum: o,
			}
		} else {
			rel.R.DepartureCountryDataPlatformCountryCountryDatum = o
		}
	}
	return nil
}

// AddCountryDataPlatformOrdersHeaderPartnerData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformOrdersHeaderPartnerData.
// Sets related.R.CountryDataPlatformCountryCountryDatum appropriately.
func (o *DataPlatformCountryCountryDatum) AddCountryDataPlatformOrdersHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Country, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.OrderID, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Country, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryDataPlatformOrdersHeaderPartnerData: related,
		}
	} else {
		o.R.CountryDataPlatformOrdersHeaderPartnerData = append(o.R.CountryDataPlatformOrdersHeaderPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformOrdersHeaderPartnerDatumR{
				CountryDataPlatformCountryCountryDatum: o,
			}
		} else {
			rel.R.CountryDataPlatformCountryCountryDatum = o
		}
	}
	return nil
}

// SetCountryDataPlatformOrdersHeaderPartnerData removes all previously related items of the
// data_platform_country_country_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryDataPlatformCountryCountryDatum's CountryDataPlatformOrdersHeaderPartnerData accordingly.
// Replaces o.R.CountryDataPlatformOrdersHeaderPartnerData with related.
// Sets related.R.CountryDataPlatformCountryCountryDatum's CountryDataPlatformOrdersHeaderPartnerData accordingly.
func (o *DataPlatformCountryCountryDatum) SetCountryDataPlatformOrdersHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderPartnerDatum) error {
	query := "update `data_platform_orders_header_partner_data` set `Country` = null where `Country` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CountryDataPlatformOrdersHeaderPartnerData {
			queries.SetScanner(&rel.Country, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CountryDataPlatformCountryCountryDatum = nil
		}
		o.R.CountryDataPlatformOrdersHeaderPartnerData = nil
	}

	return o.AddCountryDataPlatformOrdersHeaderPartnerData(ctx, exec, insert, related...)
}

// RemoveCountryDataPlatformOrdersHeaderPartnerData relationships from objects passed in.
// Removes related items from R.CountryDataPlatformOrdersHeaderPartnerData (uses pointer comparison, removal does not keep order)
// Sets related.R.CountryDataPlatformCountryCountryDatum.
func (o *DataPlatformCountryCountryDatum) RemoveCountryDataPlatformOrdersHeaderPartnerData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersHeaderPartnerDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Country, nil)
		if rel.R != nil {
			rel.R.CountryDataPlatformCountryCountryDatum = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("Country")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDataPlatformOrdersHeaderPartnerData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDataPlatformOrdersHeaderPartnerData)
			if ln > 1 && i < ln-1 {
				o.R.CountryDataPlatformOrdersHeaderPartnerData[i] = o.R.CountryDataPlatformOrdersHeaderPartnerData[ln-1]
			}
			o.R.CountryDataPlatformOrdersHeaderPartnerData = o.R.CountryDataPlatformOrdersHeaderPartnerData[:ln-1]
			break
		}
	}

	return nil
}

// AddCountryDataPlatformProductMasterTaxData adds the given related objects to the existing relationships
// of the data_platform_country_country_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformProductMasterTaxData.
// Sets related.R.CountryDataPlatformCountryCountryDatum appropriately.
func (o *DataPlatformCountryCountryDatum) AddCountryDataPlatformProductMasterTaxData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterTaxDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Country = o.Country
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_tax_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterTaxDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.Product, rel.BusinessPartner, rel.Country, rel.TaxCategory}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Country = o.Country
		}
	}

	if o.R == nil {
		o.R = &dataPlatformCountryCountryDatumR{
			CountryDataPlatformProductMasterTaxData: related,
		}
	} else {
		o.R.CountryDataPlatformProductMasterTaxData = append(o.R.CountryDataPlatformProductMasterTaxData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterTaxDatumR{
				CountryDataPlatformCountryCountryDatum: o,
			}
		} else {
			rel.R.CountryDataPlatformCountryCountryDatum = o
		}
	}
	return nil
}

// DataPlatformCountryCountryData retrieves all the records using an executor.
func DataPlatformCountryCountryData(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	mods = append(mods, qm.From("`data_platform_country_country_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_country_country_data`.*"})
	}

	return dataPlatformCountryCountryDatumQuery{q}
}

// FindDataPlatformCountryCountryDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, country string, selectCols ...string) (*DataPlatformCountryCountryDatum, error) {
	dataPlatformCountryCountryDatumObj := &DataPlatformCountryCountryDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_country_country_data` where `Country`=?", sel,
	)

	q := queries.Raw(query, country)

	err := q.Bind(ctx, exec, dataPlatformCountryCountryDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_country_country_data")
	}

	if err = dataPlatformCountryCountryDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformCountryCountryDatumObj, err
	}

	return dataPlatformCountryCountryDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformCountryCountryDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_country_country_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformCountryCountryDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformCountryCountryDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformCountryCountryDatumInsertCache[key]
	dataPlatformCountryCountryDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformCountryCountryDatumAllColumns,
			dataPlatformCountryCountryDatumColumnsWithDefault,
			dataPlatformCountryCountryDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_country_country_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_country_country_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_country_country_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformCountryCountryDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_country_country_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Country,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_country_country_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformCountryCountryDatumInsertCacheMut.Lock()
		dataPlatformCountryCountryDatumInsertCache[key] = cache
		dataPlatformCountryCountryDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformCountryCountryDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformCountryCountryDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformCountryCountryDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformCountryCountryDatumUpdateCache[key]
	dataPlatformCountryCountryDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformCountryCountryDatumAllColumns,
			dataPlatformCountryCountryDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_country_country_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_country_country_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformCountryCountryDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, append(wl, dataPlatformCountryCountryDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_country_country_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_country_country_data")
	}

	if !cached {
		dataPlatformCountryCountryDatumUpdateCacheMut.Lock()
		dataPlatformCountryCountryDatumUpdateCache[key] = cache
		dataPlatformCountryCountryDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformCountryCountryDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_country_country_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_country_country_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformCountryCountryDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCountryCountryDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_country_country_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCountryCountryDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformCountryCountryDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformCountryCountryDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformCountryCountryDatumUniqueColumns = []string{
	"Country",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformCountryCountryDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_country_country_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformCountryCountryDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformCountryCountryDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformCountryCountryDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformCountryCountryDatumUpsertCache[key]
	dataPlatformCountryCountryDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformCountryCountryDatumAllColumns,
			dataPlatformCountryCountryDatumColumnsWithDefault,
			dataPlatformCountryCountryDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformCountryCountryDatumAllColumns,
			dataPlatformCountryCountryDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_country_country_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_country_country_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_country_country_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_country_country_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformCountryCountryDatumType, dataPlatformCountryCountryDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_country_country_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_country_country_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformCountryCountryDatumUpsertCacheMut.Lock()
		dataPlatformCountryCountryDatumUpsertCache[key] = cache
		dataPlatformCountryCountryDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformCountryCountryDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformCountryCountryDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformCountryCountryDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformCountryCountryDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_country_country_data` WHERE `Country`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_country_country_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_country_country_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformCountryCountryDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformCountryCountryDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_country_country_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_country_country_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformCountryCountryDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformCountryCountryDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCountryCountryDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_country_country_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCountryCountryDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformCountryCountryDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_country_country_data")
	}

	if len(dataPlatformCountryCountryDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformCountryCountryDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformCountryCountryDatum(ctx, exec, o.Country)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformCountryCountryDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformCountryCountryDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCountryCountryDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_country_country_data`.* FROM `data_platform_country_country_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCountryCountryDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformCountryCountryDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformCountryCountryDatumExists checks if the DataPlatformCountryCountryDatum row exists.
func DataPlatformCountryCountryDatumExists(ctx context.Context, exec boil.ContextExecutor, country string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_country_country_data` where `Country`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, country)
	}
	row := exec.QueryRowContext(ctx, sql, country)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_country_country_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformCountryCountryDatum row exists.
func (o *DataPlatformCountryCountryDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformCountryCountryDatumExists(ctx, exec, o.Country)
}
