// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformCodeConversionCodeConversionDatum is an object representing the database table.
type DataPlatformCodeConversionCodeConversionDatum struct {
	CodeConversionID      int          `boil:"CodeConversionID" json:"CodeConversionID" toml:"CodeConversionID" yaml:"CodeConversionID"`
	SystemConvertTo       string       `boil:"SystemConvertTo" json:"SystemConvertTo" toml:"SystemConvertTo" yaml:"SystemConvertTo"`
	SystemConvertFrom     string       `boil:"SystemConvertFrom" json:"SystemConvertFrom" toml:"SystemConvertFrom" yaml:"SystemConvertFrom"`
	LabelConvertTo        string       `boil:"LabelConvertTo" json:"LabelConvertTo" toml:"LabelConvertTo" yaml:"LabelConvertTo"`
	LabelConvertFrom      string       `boil:"LabelConvertFrom" json:"LabelConvertFrom" toml:"LabelConvertFrom" yaml:"LabelConvertFrom"`
	CodeConvertFromInt    null.Int     `boil:"CodeConvertFromInt" json:"CodeConvertFromInt,omitempty" toml:"CodeConvertFromInt" yaml:"CodeConvertFromInt,omitempty"`
	CodeConvertFromFloat  null.Float32 `boil:"CodeConvertFromFloat" json:"CodeConvertFromFloat,omitempty" toml:"CodeConvertFromFloat" yaml:"CodeConvertFromFloat,omitempty"`
	CodeConvertFromString null.String  `boil:"CodeConvertFromString" json:"CodeConvertFromString,omitempty" toml:"CodeConvertFromString" yaml:"CodeConvertFromString,omitempty"`
	CodeConvertToInt      null.Int     `boil:"CodeConvertToInt" json:"CodeConvertToInt,omitempty" toml:"CodeConvertToInt" yaml:"CodeConvertToInt,omitempty"`
	CodeConvertToFloat    null.Float32 `boil:"CodeConvertToFloat" json:"CodeConvertToFloat,omitempty" toml:"CodeConvertToFloat" yaml:"CodeConvertToFloat,omitempty"`
	CodeConvertToString   null.String  `boil:"CodeConvertToString" json:"CodeConvertToString,omitempty" toml:"CodeConvertToString" yaml:"CodeConvertToString,omitempty"`
	BusinessPartner       int          `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`

	R *dataPlatformCodeConversionCodeConversionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformCodeConversionCodeConversionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformCodeConversionCodeConversionDatumColumns = struct {
	CodeConversionID      string
	SystemConvertTo       string
	SystemConvertFrom     string
	LabelConvertTo        string
	LabelConvertFrom      string
	CodeConvertFromInt    string
	CodeConvertFromFloat  string
	CodeConvertFromString string
	CodeConvertToInt      string
	CodeConvertToFloat    string
	CodeConvertToString   string
	BusinessPartner       string
}{
	CodeConversionID:      "CodeConversionID",
	SystemConvertTo:       "SystemConvertTo",
	SystemConvertFrom:     "SystemConvertFrom",
	LabelConvertTo:        "LabelConvertTo",
	LabelConvertFrom:      "LabelConvertFrom",
	CodeConvertFromInt:    "CodeConvertFromInt",
	CodeConvertFromFloat:  "CodeConvertFromFloat",
	CodeConvertFromString: "CodeConvertFromString",
	CodeConvertToInt:      "CodeConvertToInt",
	CodeConvertToFloat:    "CodeConvertToFloat",
	CodeConvertToString:   "CodeConvertToString",
	BusinessPartner:       "BusinessPartner",
}

var DataPlatformCodeConversionCodeConversionDatumTableColumns = struct {
	CodeConversionID      string
	SystemConvertTo       string
	SystemConvertFrom     string
	LabelConvertTo        string
	LabelConvertFrom      string
	CodeConvertFromInt    string
	CodeConvertFromFloat  string
	CodeConvertFromString string
	CodeConvertToInt      string
	CodeConvertToFloat    string
	CodeConvertToString   string
	BusinessPartner       string
}{
	CodeConversionID:      "data_platform_code_conversion_code_conversion_data.CodeConversionID",
	SystemConvertTo:       "data_platform_code_conversion_code_conversion_data.SystemConvertTo",
	SystemConvertFrom:     "data_platform_code_conversion_code_conversion_data.SystemConvertFrom",
	LabelConvertTo:        "data_platform_code_conversion_code_conversion_data.LabelConvertTo",
	LabelConvertFrom:      "data_platform_code_conversion_code_conversion_data.LabelConvertFrom",
	CodeConvertFromInt:    "data_platform_code_conversion_code_conversion_data.CodeConvertFromInt",
	CodeConvertFromFloat:  "data_platform_code_conversion_code_conversion_data.CodeConvertFromFloat",
	CodeConvertFromString: "data_platform_code_conversion_code_conversion_data.CodeConvertFromString",
	CodeConvertToInt:      "data_platform_code_conversion_code_conversion_data.CodeConvertToInt",
	CodeConvertToFloat:    "data_platform_code_conversion_code_conversion_data.CodeConvertToFloat",
	CodeConvertToString:   "data_platform_code_conversion_code_conversion_data.CodeConvertToString",
	BusinessPartner:       "data_platform_code_conversion_code_conversion_data.BusinessPartner",
}

// Generated where

var DataPlatformCodeConversionCodeConversionDatumWhere = struct {
	CodeConversionID      whereHelperint
	SystemConvertTo       whereHelperstring
	SystemConvertFrom     whereHelperstring
	LabelConvertTo        whereHelperstring
	LabelConvertFrom      whereHelperstring
	CodeConvertFromInt    whereHelpernull_Int
	CodeConvertFromFloat  whereHelpernull_Float32
	CodeConvertFromString whereHelpernull_String
	CodeConvertToInt      whereHelpernull_Int
	CodeConvertToFloat    whereHelpernull_Float32
	CodeConvertToString   whereHelpernull_String
	BusinessPartner       whereHelperint
}{
	CodeConversionID:      whereHelperint{field: "`data_platform_code_conversion_code_conversion_data`.`CodeConversionID`"},
	SystemConvertTo:       whereHelperstring{field: "`data_platform_code_conversion_code_conversion_data`.`SystemConvertTo`"},
	SystemConvertFrom:     whereHelperstring{field: "`data_platform_code_conversion_code_conversion_data`.`SystemConvertFrom`"},
	LabelConvertTo:        whereHelperstring{field: "`data_platform_code_conversion_code_conversion_data`.`LabelConvertTo`"},
	LabelConvertFrom:      whereHelperstring{field: "`data_platform_code_conversion_code_conversion_data`.`LabelConvertFrom`"},
	CodeConvertFromInt:    whereHelpernull_Int{field: "`data_platform_code_conversion_code_conversion_data`.`CodeConvertFromInt`"},
	CodeConvertFromFloat:  whereHelpernull_Float32{field: "`data_platform_code_conversion_code_conversion_data`.`CodeConvertFromFloat`"},
	CodeConvertFromString: whereHelpernull_String{field: "`data_platform_code_conversion_code_conversion_data`.`CodeConvertFromString`"},
	CodeConvertToInt:      whereHelpernull_Int{field: "`data_platform_code_conversion_code_conversion_data`.`CodeConvertToInt`"},
	CodeConvertToFloat:    whereHelpernull_Float32{field: "`data_platform_code_conversion_code_conversion_data`.`CodeConvertToFloat`"},
	CodeConvertToString:   whereHelpernull_String{field: "`data_platform_code_conversion_code_conversion_data`.`CodeConvertToString`"},
	BusinessPartner:       whereHelperint{field: "`data_platform_code_conversion_code_conversion_data`.`BusinessPartner`"},
}

// DataPlatformCodeConversionCodeConversionDatumRels is where relationship names are stored.
var DataPlatformCodeConversionCodeConversionDatumRels = struct {
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum string
}{
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: "BusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
}

// dataPlatformCodeConversionCodeConversionDatumR is where relationships are stored.
type dataPlatformCodeConversionCodeConversionDatumR struct {
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum `boil:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformCodeConversionCodeConversionDatumR) NewStruct() *dataPlatformCodeConversionCodeConversionDatumR {
	return &dataPlatformCodeConversionCodeConversionDatumR{}
}

func (r *dataPlatformCodeConversionCodeConversionDatumR) GetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

// dataPlatformCodeConversionCodeConversionDatumL is where Load methods for each relationship are stored.
type dataPlatformCodeConversionCodeConversionDatumL struct{}

var (
	dataPlatformCodeConversionCodeConversionDatumAllColumns            = []string{"CodeConversionID", "SystemConvertTo", "SystemConvertFrom", "LabelConvertTo", "LabelConvertFrom", "CodeConvertFromInt", "CodeConvertFromFloat", "CodeConvertFromString", "CodeConvertToInt", "CodeConvertToFloat", "CodeConvertToString", "BusinessPartner"}
	dataPlatformCodeConversionCodeConversionDatumColumnsWithoutDefault = []string{"CodeConversionID", "SystemConvertTo", "SystemConvertFrom", "LabelConvertTo", "LabelConvertFrom", "CodeConvertFromInt", "CodeConvertFromFloat", "CodeConvertFromString", "CodeConvertToInt", "CodeConvertToFloat", "CodeConvertToString", "BusinessPartner"}
	dataPlatformCodeConversionCodeConversionDatumColumnsWithDefault    = []string{}
	dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns     = []string{"CodeConversionID", "SystemConvertTo", "SystemConvertFrom", "LabelConvertTo", "LabelConvertFrom", "BusinessPartner"}
	dataPlatformCodeConversionCodeConversionDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformCodeConversionCodeConversionDatumSlice is an alias for a slice of pointers to DataPlatformCodeConversionCodeConversionDatum.
	// This should almost always be used instead of []DataPlatformCodeConversionCodeConversionDatum.
	DataPlatformCodeConversionCodeConversionDatumSlice []*DataPlatformCodeConversionCodeConversionDatum

	dataPlatformCodeConversionCodeConversionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformCodeConversionCodeConversionDatumType                 = reflect.TypeOf(&DataPlatformCodeConversionCodeConversionDatum{})
	dataPlatformCodeConversionCodeConversionDatumMapping              = queries.MakeStructMapping(dataPlatformCodeConversionCodeConversionDatumType)
	dataPlatformCodeConversionCodeConversionDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformCodeConversionCodeConversionDatumType, dataPlatformCodeConversionCodeConversionDatumMapping, dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns)
	dataPlatformCodeConversionCodeConversionDatumInsertCacheMut       sync.RWMutex
	dataPlatformCodeConversionCodeConversionDatumInsertCache          = make(map[string]insertCache)
	dataPlatformCodeConversionCodeConversionDatumUpdateCacheMut       sync.RWMutex
	dataPlatformCodeConversionCodeConversionDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformCodeConversionCodeConversionDatumUpsertCacheMut       sync.RWMutex
	dataPlatformCodeConversionCodeConversionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformCodeConversionCodeConversionDatum record from the query.
func (q dataPlatformCodeConversionCodeConversionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformCodeConversionCodeConversionDatum, error) {
	o := &DataPlatformCodeConversionCodeConversionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_code_conversion_code_conversion_data")
	}

	return o, nil
}

// All returns all DataPlatformCodeConversionCodeConversionDatum records from the query.
func (q dataPlatformCodeConversionCodeConversionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformCodeConversionCodeConversionDatumSlice, error) {
	var o []*DataPlatformCodeConversionCodeConversionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformCodeConversionCodeConversionDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformCodeConversionCodeConversionDatum records in the query.
func (q dataPlatformCodeConversionCodeConversionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_code_conversion_code_conversion_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformCodeConversionCodeConversionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_code_conversion_code_conversion_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformCodeConversionCodeConversionDatum) BusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformCodeConversionCodeConversionDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCodeConversionCodeConversionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCodeConversionCodeConversionDatum
	var object *DataPlatformCodeConversionCodeConversionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCodeConversionCodeConversionDatum.(*DataPlatformCodeConversionCodeConversionDatum)
		if !ok {
			object = new(DataPlatformCodeConversionCodeConversionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCodeConversionCodeConversionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCodeConversionCodeConversionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCodeConversionCodeConversionDatum.(*[]*DataPlatformCodeConversionCodeConversionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCodeConversionCodeConversionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCodeConversionCodeConversionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCodeConversionCodeConversionDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCodeConversionCodeConversionDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformCodeConversionCodeConversionDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformCodeConversionCodeConversionDatum) SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_code_conversion_code_conversion_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.CodeConversionID, o.SystemConvertTo, o.SystemConvertFrom, o.LabelConvertTo, o.LabelConvertFrom, o.BusinessPartner}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformCodeConversionCodeConversionDatumR{
			BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// DataPlatformCodeConversionCodeConversionData retrieves all the records using an executor.
func DataPlatformCodeConversionCodeConversionData(mods ...qm.QueryMod) dataPlatformCodeConversionCodeConversionDatumQuery {
	mods = append(mods, qm.From("`data_platform_code_conversion_code_conversion_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_code_conversion_code_conversion_data`.*"})
	}

	return dataPlatformCodeConversionCodeConversionDatumQuery{q}
}

// FindDataPlatformCodeConversionCodeConversionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformCodeConversionCodeConversionDatum(ctx context.Context, exec boil.ContextExecutor, codeConversionID int, systemConvertTo string, systemConvertFrom string, labelConvertTo string, labelConvertFrom string, businessPartner int, selectCols ...string) (*DataPlatformCodeConversionCodeConversionDatum, error) {
	dataPlatformCodeConversionCodeConversionDatumObj := &DataPlatformCodeConversionCodeConversionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_code_conversion_code_conversion_data` where `CodeConversionID`=? AND `SystemConvertTo`=? AND `SystemConvertFrom`=? AND `LabelConvertTo`=? AND `LabelConvertFrom`=? AND `BusinessPartner`=?", sel,
	)

	q := queries.Raw(query, codeConversionID, systemConvertTo, systemConvertFrom, labelConvertTo, labelConvertFrom, businessPartner)

	err := q.Bind(ctx, exec, dataPlatformCodeConversionCodeConversionDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_code_conversion_code_conversion_data")
	}

	return dataPlatformCodeConversionCodeConversionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformCodeConversionCodeConversionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_code_conversion_code_conversion_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformCodeConversionCodeConversionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformCodeConversionCodeConversionDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformCodeConversionCodeConversionDatumInsertCache[key]
	dataPlatformCodeConversionCodeConversionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformCodeConversionCodeConversionDatumAllColumns,
			dataPlatformCodeConversionCodeConversionDatumColumnsWithDefault,
			dataPlatformCodeConversionCodeConversionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformCodeConversionCodeConversionDatumType, dataPlatformCodeConversionCodeConversionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformCodeConversionCodeConversionDatumType, dataPlatformCodeConversionCodeConversionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_code_conversion_code_conversion_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_code_conversion_code_conversion_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_code_conversion_code_conversion_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_code_conversion_code_conversion_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CodeConversionID,
		o.SystemConvertTo,
		o.SystemConvertFrom,
		o.LabelConvertTo,
		o.LabelConvertFrom,
		o.BusinessPartner,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_code_conversion_code_conversion_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformCodeConversionCodeConversionDatumInsertCacheMut.Lock()
		dataPlatformCodeConversionCodeConversionDatumInsertCache[key] = cache
		dataPlatformCodeConversionCodeConversionDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformCodeConversionCodeConversionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformCodeConversionCodeConversionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformCodeConversionCodeConversionDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformCodeConversionCodeConversionDatumUpdateCache[key]
	dataPlatformCodeConversionCodeConversionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformCodeConversionCodeConversionDatumAllColumns,
			dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_code_conversion_code_conversion_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_code_conversion_code_conversion_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformCodeConversionCodeConversionDatumType, dataPlatformCodeConversionCodeConversionDatumMapping, append(wl, dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_code_conversion_code_conversion_data row")
	}

	if !cached {
		dataPlatformCodeConversionCodeConversionDatumUpdateCacheMut.Lock()
		dataPlatformCodeConversionCodeConversionDatumUpdateCache[key] = cache
		dataPlatformCodeConversionCodeConversionDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformCodeConversionCodeConversionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_code_conversion_code_conversion_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformCodeConversionCodeConversionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCodeConversionCodeConversionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_code_conversion_code_conversion_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformCodeConversionCodeConversionDatum slice")
	}

	return nil
}

var mySQLDataPlatformCodeConversionCodeConversionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformCodeConversionCodeConversionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_code_conversion_code_conversion_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformCodeConversionCodeConversionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformCodeConversionCodeConversionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformCodeConversionCodeConversionDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformCodeConversionCodeConversionDatumUpsertCache[key]
	dataPlatformCodeConversionCodeConversionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformCodeConversionCodeConversionDatumAllColumns,
			dataPlatformCodeConversionCodeConversionDatumColumnsWithDefault,
			dataPlatformCodeConversionCodeConversionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformCodeConversionCodeConversionDatumAllColumns,
			dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_code_conversion_code_conversion_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_code_conversion_code_conversion_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_code_conversion_code_conversion_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformCodeConversionCodeConversionDatumType, dataPlatformCodeConversionCodeConversionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformCodeConversionCodeConversionDatumType, dataPlatformCodeConversionCodeConversionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_code_conversion_code_conversion_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformCodeConversionCodeConversionDatumType, dataPlatformCodeConversionCodeConversionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_code_conversion_code_conversion_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_code_conversion_code_conversion_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformCodeConversionCodeConversionDatumUpsertCacheMut.Lock()
		dataPlatformCodeConversionCodeConversionDatumUpsertCache[key] = cache
		dataPlatformCodeConversionCodeConversionDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformCodeConversionCodeConversionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformCodeConversionCodeConversionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformCodeConversionCodeConversionDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformCodeConversionCodeConversionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_code_conversion_code_conversion_data` WHERE `CodeConversionID`=? AND `SystemConvertTo`=? AND `SystemConvertFrom`=? AND `LabelConvertTo`=? AND `LabelConvertFrom`=? AND `BusinessPartner`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_code_conversion_code_conversion_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformCodeConversionCodeConversionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformCodeConversionCodeConversionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_code_conversion_code_conversion_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformCodeConversionCodeConversionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCodeConversionCodeConversionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_code_conversion_code_conversion_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformCodeConversionCodeConversionDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformCodeConversionCodeConversionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformCodeConversionCodeConversionDatum(ctx, exec, o.CodeConversionID, o.SystemConvertTo, o.SystemConvertFrom, o.LabelConvertTo, o.LabelConvertFrom, o.BusinessPartner)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformCodeConversionCodeConversionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformCodeConversionCodeConversionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCodeConversionCodeConversionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_code_conversion_code_conversion_data`.* FROM `data_platform_code_conversion_code_conversion_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCodeConversionCodeConversionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformCodeConversionCodeConversionDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformCodeConversionCodeConversionDatumExists checks if the DataPlatformCodeConversionCodeConversionDatum row exists.
func DataPlatformCodeConversionCodeConversionDatumExists(ctx context.Context, exec boil.ContextExecutor, codeConversionID int, systemConvertTo string, systemConvertFrom string, labelConvertTo string, labelConvertFrom string, businessPartner int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_code_conversion_code_conversion_data` where `CodeConversionID`=? AND `SystemConvertTo`=? AND `SystemConvertFrom`=? AND `LabelConvertTo`=? AND `LabelConvertFrom`=? AND `BusinessPartner`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, codeConversionID, systemConvertTo, systemConvertFrom, labelConvertTo, labelConvertFrom, businessPartner)
	}
	row := exec.QueryRowContext(ctx, sql, codeConversionID, systemConvertTo, systemConvertFrom, labelConvertTo, labelConvertFrom, businessPartner)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_code_conversion_code_conversion_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformCodeConversionCodeConversionDatum row exists.
func (o *DataPlatformCodeConversionCodeConversionDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformCodeConversionCodeConversionDatumExists(ctx, exec, o.CodeConversionID, o.SystemConvertTo, o.SystemConvertFrom, o.LabelConvertTo, o.LabelConvertFrom, o.BusinessPartner)
}
