// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPurchaseRequisitionHeaderDatum is an object representing the database table.
type DataPlatformPurchaseRequisitionHeaderDatum struct {
	PurchaseRequisition          int       `boil:"PurchaseRequisition" json:"PurchaseRequisition" toml:"PurchaseRequisition" yaml:"PurchaseRequisition"`
	PurchaseRequisitionDate      string    `boil:"PurchaseRequisitionDate" json:"PurchaseRequisitionDate" toml:"PurchaseRequisitionDate" yaml:"PurchaseRequisitionDate"`
	Buyer                        int       `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	PurchaseRequisitionType      string    `boil:"PurchaseRequisitionType" json:"PurchaseRequisitionType" toml:"PurchaseRequisitionType" yaml:"PurchaseRequisitionType"`
	PlannedOrder                 null.Int  `boil:"PlannedOrder" json:"PlannedOrder,omitempty" toml:"PlannedOrder" yaml:"PlannedOrder,omitempty"`
	PlannedOrderItem             null.Int  `boil:"PlannedOrderItem" json:"PlannedOrderItem,omitempty" toml:"PlannedOrderItem" yaml:"PlannedOrderItem,omitempty"`
	ProductionOrder              null.Int  `boil:"ProductionOrder" json:"ProductionOrder,omitempty" toml:"ProductionOrder" yaml:"ProductionOrder,omitempty"`
	ProductionOrderItem          null.Int  `boil:"ProductionOrderItem" json:"ProductionOrderItem,omitempty" toml:"ProductionOrderItem" yaml:"ProductionOrderItem,omitempty"`
	PrecedingOrderID             null.Int  `boil:"PrecedingOrderID" json:"PrecedingOrderID,omitempty" toml:"PrecedingOrderID" yaml:"PrecedingOrderID,omitempty"`
	PrecedingOrderItem           null.Int  `boil:"PrecedingOrderItem" json:"PrecedingOrderItem,omitempty" toml:"PrecedingOrderItem" yaml:"PrecedingOrderItem,omitempty"`
	Project                      null.Int  `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	WBSElement                   null.Int  `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	HeaderOrderStatus            string    `boil:"HeaderOrderStatus" json:"HeaderOrderStatus" toml:"HeaderOrderStatus" yaml:"HeaderOrderStatus"`
	HeaderCompleteOrderIsDefined null.Bool `boil:"HeaderCompleteOrderIsDefined" json:"HeaderCompleteOrderIsDefined,omitempty" toml:"HeaderCompleteOrderIsDefined" yaml:"HeaderCompleteOrderIsDefined,omitempty"`
	CreationDate                 string    `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                 string    `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate               string    `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime               string    `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsReleased                   null.Bool `boil:"IsReleased" json:"IsReleased,omitempty" toml:"IsReleased" yaml:"IsReleased,omitempty"`
	IsCancelled                  null.Bool `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion          null.Bool `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPurchaseRequisitionHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPurchaseRequisitionHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPurchaseRequisitionHeaderDatumColumns = struct {
	PurchaseRequisition          string
	PurchaseRequisitionDate      string
	Buyer                        string
	PurchaseRequisitionType      string
	PlannedOrder                 string
	PlannedOrderItem             string
	ProductionOrder              string
	ProductionOrderItem          string
	PrecedingOrderID             string
	PrecedingOrderItem           string
	Project                      string
	WBSElement                   string
	HeaderOrderStatus            string
	HeaderCompleteOrderIsDefined string
	CreationDate                 string
	CreationTime                 string
	LastChangeDate               string
	LastChangeTime               string
	IsReleased                   string
	IsCancelled                  string
	IsMarkedForDeletion          string
}{
	PurchaseRequisition:          "PurchaseRequisition",
	PurchaseRequisitionDate:      "PurchaseRequisitionDate",
	Buyer:                        "Buyer",
	PurchaseRequisitionType:      "PurchaseRequisitionType",
	PlannedOrder:                 "PlannedOrder",
	PlannedOrderItem:             "PlannedOrderItem",
	ProductionOrder:              "ProductionOrder",
	ProductionOrderItem:          "ProductionOrderItem",
	PrecedingOrderID:             "PrecedingOrderID",
	PrecedingOrderItem:           "PrecedingOrderItem",
	Project:                      "Project",
	WBSElement:                   "WBSElement",
	HeaderOrderStatus:            "HeaderOrderStatus",
	HeaderCompleteOrderIsDefined: "HeaderCompleteOrderIsDefined",
	CreationDate:                 "CreationDate",
	CreationTime:                 "CreationTime",
	LastChangeDate:               "LastChangeDate",
	LastChangeTime:               "LastChangeTime",
	IsReleased:                   "IsReleased",
	IsCancelled:                  "IsCancelled",
	IsMarkedForDeletion:          "IsMarkedForDeletion",
}

var DataPlatformPurchaseRequisitionHeaderDatumTableColumns = struct {
	PurchaseRequisition          string
	PurchaseRequisitionDate      string
	Buyer                        string
	PurchaseRequisitionType      string
	PlannedOrder                 string
	PlannedOrderItem             string
	ProductionOrder              string
	ProductionOrderItem          string
	PrecedingOrderID             string
	PrecedingOrderItem           string
	Project                      string
	WBSElement                   string
	HeaderOrderStatus            string
	HeaderCompleteOrderIsDefined string
	CreationDate                 string
	CreationTime                 string
	LastChangeDate               string
	LastChangeTime               string
	IsReleased                   string
	IsCancelled                  string
	IsMarkedForDeletion          string
}{
	PurchaseRequisition:          "data_platform_purchase_requisition_header_data.PurchaseRequisition",
	PurchaseRequisitionDate:      "data_platform_purchase_requisition_header_data.PurchaseRequisitionDate",
	Buyer:                        "data_platform_purchase_requisition_header_data.Buyer",
	PurchaseRequisitionType:      "data_platform_purchase_requisition_header_data.PurchaseRequisitionType",
	PlannedOrder:                 "data_platform_purchase_requisition_header_data.PlannedOrder",
	PlannedOrderItem:             "data_platform_purchase_requisition_header_data.PlannedOrderItem",
	ProductionOrder:              "data_platform_purchase_requisition_header_data.ProductionOrder",
	ProductionOrderItem:          "data_platform_purchase_requisition_header_data.ProductionOrderItem",
	PrecedingOrderID:             "data_platform_purchase_requisition_header_data.PrecedingOrderID",
	PrecedingOrderItem:           "data_platform_purchase_requisition_header_data.PrecedingOrderItem",
	Project:                      "data_platform_purchase_requisition_header_data.Project",
	WBSElement:                   "data_platform_purchase_requisition_header_data.WBSElement",
	HeaderOrderStatus:            "data_platform_purchase_requisition_header_data.HeaderOrderStatus",
	HeaderCompleteOrderIsDefined: "data_platform_purchase_requisition_header_data.HeaderCompleteOrderIsDefined",
	CreationDate:                 "data_platform_purchase_requisition_header_data.CreationDate",
	CreationTime:                 "data_platform_purchase_requisition_header_data.CreationTime",
	LastChangeDate:               "data_platform_purchase_requisition_header_data.LastChangeDate",
	LastChangeTime:               "data_platform_purchase_requisition_header_data.LastChangeTime",
	IsReleased:                   "data_platform_purchase_requisition_header_data.IsReleased",
	IsCancelled:                  "data_platform_purchase_requisition_header_data.IsCancelled",
	IsMarkedForDeletion:          "data_platform_purchase_requisition_header_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPurchaseRequisitionHeaderDatumWhere = struct {
	PurchaseRequisition          whereHelperint
	PurchaseRequisitionDate      whereHelperstring
	Buyer                        whereHelperint
	PurchaseRequisitionType      whereHelperstring
	PlannedOrder                 whereHelpernull_Int
	PlannedOrderItem             whereHelpernull_Int
	ProductionOrder              whereHelpernull_Int
	ProductionOrderItem          whereHelpernull_Int
	PrecedingOrderID             whereHelpernull_Int
	PrecedingOrderItem           whereHelpernull_Int
	Project                      whereHelpernull_Int
	WBSElement                   whereHelpernull_Int
	HeaderOrderStatus            whereHelperstring
	HeaderCompleteOrderIsDefined whereHelpernull_Bool
	CreationDate                 whereHelperstring
	CreationTime                 whereHelperstring
	LastChangeDate               whereHelperstring
	LastChangeTime               whereHelperstring
	IsReleased                   whereHelpernull_Bool
	IsCancelled                  whereHelpernull_Bool
	IsMarkedForDeletion          whereHelpernull_Bool
}{
	PurchaseRequisition:          whereHelperint{field: "`data_platform_purchase_requisition_header_data`.`PurchaseRequisition`"},
	PurchaseRequisitionDate:      whereHelperstring{field: "`data_platform_purchase_requisition_header_data`.`PurchaseRequisitionDate`"},
	Buyer:                        whereHelperint{field: "`data_platform_purchase_requisition_header_data`.`Buyer`"},
	PurchaseRequisitionType:      whereHelperstring{field: "`data_platform_purchase_requisition_header_data`.`PurchaseRequisitionType`"},
	PlannedOrder:                 whereHelpernull_Int{field: "`data_platform_purchase_requisition_header_data`.`PlannedOrder`"},
	PlannedOrderItem:             whereHelpernull_Int{field: "`data_platform_purchase_requisition_header_data`.`PlannedOrderItem`"},
	ProductionOrder:              whereHelpernull_Int{field: "`data_platform_purchase_requisition_header_data`.`ProductionOrder`"},
	ProductionOrderItem:          whereHelpernull_Int{field: "`data_platform_purchase_requisition_header_data`.`ProductionOrderItem`"},
	PrecedingOrderID:             whereHelpernull_Int{field: "`data_platform_purchase_requisition_header_data`.`PrecedingOrderID`"},
	PrecedingOrderItem:           whereHelpernull_Int{field: "`data_platform_purchase_requisition_header_data`.`PrecedingOrderItem`"},
	Project:                      whereHelpernull_Int{field: "`data_platform_purchase_requisition_header_data`.`Project`"},
	WBSElement:                   whereHelpernull_Int{field: "`data_platform_purchase_requisition_header_data`.`WBSElement`"},
	HeaderOrderStatus:            whereHelperstring{field: "`data_platform_purchase_requisition_header_data`.`HeaderOrderStatus`"},
	HeaderCompleteOrderIsDefined: whereHelpernull_Bool{field: "`data_platform_purchase_requisition_header_data`.`HeaderCompleteOrderIsDefined`"},
	CreationDate:                 whereHelperstring{field: "`data_platform_purchase_requisition_header_data`.`CreationDate`"},
	CreationTime:                 whereHelperstring{field: "`data_platform_purchase_requisition_header_data`.`CreationTime`"},
	LastChangeDate:               whereHelperstring{field: "`data_platform_purchase_requisition_header_data`.`LastChangeDate`"},
	LastChangeTime:               whereHelperstring{field: "`data_platform_purchase_requisition_header_data`.`LastChangeTime`"},
	IsReleased:                   whereHelpernull_Bool{field: "`data_platform_purchase_requisition_header_data`.`IsReleased`"},
	IsCancelled:                  whereHelpernull_Bool{field: "`data_platform_purchase_requisition_header_data`.`IsCancelled`"},
	IsMarkedForDeletion:          whereHelpernull_Bool{field: "`data_platform_purchase_requisition_header_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPurchaseRequisitionHeaderDatumRels is where relationship names are stored.
var DataPlatformPurchaseRequisitionHeaderDatumRels = struct {
	BuyerDataPlatformBusinessPartnerGeneralDatum          string
	PrecedingOrderIDDataPlatformOrdersHeaderDatum         string
	PrecedingOrderIDDataPlatformOrdersItemDatum           string
	ProductionOrderDataPlatformProductionOrderItemDatum   string
	ProductionOrderDataPlatformProductionOrderHeaderDatum string
	BuyerDataPlatformPurchaseRequisitionItemData          string
}{
	BuyerDataPlatformBusinessPartnerGeneralDatum:          "BuyerDataPlatformBusinessPartnerGeneralDatum",
	PrecedingOrderIDDataPlatformOrdersHeaderDatum:         "PrecedingOrderIDDataPlatformOrdersHeaderDatum",
	PrecedingOrderIDDataPlatformOrdersItemDatum:           "PrecedingOrderIDDataPlatformOrdersItemDatum",
	ProductionOrderDataPlatformProductionOrderItemDatum:   "ProductionOrderDataPlatformProductionOrderItemDatum",
	ProductionOrderDataPlatformProductionOrderHeaderDatum: "ProductionOrderDataPlatformProductionOrderHeaderDatum",
	BuyerDataPlatformPurchaseRequisitionItemData:          "BuyerDataPlatformPurchaseRequisitionItemData",
}

// dataPlatformPurchaseRequisitionHeaderDatumR is where relationships are stored.
type dataPlatformPurchaseRequisitionHeaderDatumR struct {
	BuyerDataPlatformBusinessPartnerGeneralDatum          *DataPlatformBusinessPartnerGeneralDatum      `boil:"BuyerDataPlatformBusinessPartnerGeneralDatum" json:"BuyerDataPlatformBusinessPartnerGeneralDatum" toml:"BuyerDataPlatformBusinessPartnerGeneralDatum" yaml:"BuyerDataPlatformBusinessPartnerGeneralDatum"`
	PrecedingOrderIDDataPlatformOrdersHeaderDatum         *DataPlatformOrdersHeaderDatum                `boil:"PrecedingOrderIDDataPlatformOrdersHeaderDatum" json:"PrecedingOrderIDDataPlatformOrdersHeaderDatum" toml:"PrecedingOrderIDDataPlatformOrdersHeaderDatum" yaml:"PrecedingOrderIDDataPlatformOrdersHeaderDatum"`
	PrecedingOrderIDDataPlatformOrdersItemDatum           *DataPlatformOrdersItemDatum                  `boil:"PrecedingOrderIDDataPlatformOrdersItemDatum" json:"PrecedingOrderIDDataPlatformOrdersItemDatum" toml:"PrecedingOrderIDDataPlatformOrdersItemDatum" yaml:"PrecedingOrderIDDataPlatformOrdersItemDatum"`
	ProductionOrderDataPlatformProductionOrderItemDatum   *DataPlatformProductionOrderItemDatum         `boil:"ProductionOrderDataPlatformProductionOrderItemDatum" json:"ProductionOrderDataPlatformProductionOrderItemDatum" toml:"ProductionOrderDataPlatformProductionOrderItemDatum" yaml:"ProductionOrderDataPlatformProductionOrderItemDatum"`
	ProductionOrderDataPlatformProductionOrderHeaderDatum *DataPlatformProductionOrderHeaderDatum       `boil:"ProductionOrderDataPlatformProductionOrderHeaderDatum" json:"ProductionOrderDataPlatformProductionOrderHeaderDatum" toml:"ProductionOrderDataPlatformProductionOrderHeaderDatum" yaml:"ProductionOrderDataPlatformProductionOrderHeaderDatum"`
	BuyerDataPlatformPurchaseRequisitionItemData          DataPlatformPurchaseRequisitionItemDatumSlice `boil:"BuyerDataPlatformPurchaseRequisitionItemData" json:"BuyerDataPlatformPurchaseRequisitionItemData" toml:"BuyerDataPlatformPurchaseRequisitionItemData" yaml:"BuyerDataPlatformPurchaseRequisitionItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPurchaseRequisitionHeaderDatumR) NewStruct() *dataPlatformPurchaseRequisitionHeaderDatumR {
	return &dataPlatformPurchaseRequisitionHeaderDatumR{}
}

func (r *dataPlatformPurchaseRequisitionHeaderDatumR) GetBuyerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformPurchaseRequisitionHeaderDatumR) GetPrecedingOrderIDDataPlatformOrdersHeaderDatum() *DataPlatformOrdersHeaderDatum {
	if r == nil {
		return nil
	}
	return r.PrecedingOrderIDDataPlatformOrdersHeaderDatum
}

func (r *dataPlatformPurchaseRequisitionHeaderDatumR) GetPrecedingOrderIDDataPlatformOrdersItemDatum() *DataPlatformOrdersItemDatum {
	if r == nil {
		return nil
	}
	return r.PrecedingOrderIDDataPlatformOrdersItemDatum
}

func (r *dataPlatformPurchaseRequisitionHeaderDatumR) GetProductionOrderDataPlatformProductionOrderItemDatum() *DataPlatformProductionOrderItemDatum {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDataPlatformProductionOrderItemDatum
}

func (r *dataPlatformPurchaseRequisitionHeaderDatumR) GetProductionOrderDataPlatformProductionOrderHeaderDatum() *DataPlatformProductionOrderHeaderDatum {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDataPlatformProductionOrderHeaderDatum
}

func (r *dataPlatformPurchaseRequisitionHeaderDatumR) GetBuyerDataPlatformPurchaseRequisitionItemData() DataPlatformPurchaseRequisitionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformPurchaseRequisitionItemData
}

// dataPlatformPurchaseRequisitionHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformPurchaseRequisitionHeaderDatumL struct{}

var (
	dataPlatformPurchaseRequisitionHeaderDatumAllColumns            = []string{"PurchaseRequisition", "PurchaseRequisitionDate", "Buyer", "PurchaseRequisitionType", "PlannedOrder", "PlannedOrderItem", "ProductionOrder", "ProductionOrderItem", "PrecedingOrderID", "PrecedingOrderItem", "Project", "WBSElement", "HeaderOrderStatus", "HeaderCompleteOrderIsDefined", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformPurchaseRequisitionHeaderDatumColumnsWithoutDefault = []string{"PurchaseRequisition", "PurchaseRequisitionDate", "Buyer", "PurchaseRequisitionType", "PlannedOrder", "PlannedOrderItem", "ProductionOrder", "ProductionOrderItem", "PrecedingOrderID", "PrecedingOrderItem", "Project", "WBSElement", "HeaderOrderStatus", "HeaderCompleteOrderIsDefined", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformPurchaseRequisitionHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns     = []string{"PurchaseRequisition"}
	dataPlatformPurchaseRequisitionHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPurchaseRequisitionHeaderDatumSlice is an alias for a slice of pointers to DataPlatformPurchaseRequisitionHeaderDatum.
	// This should almost always be used instead of []DataPlatformPurchaseRequisitionHeaderDatum.
	DataPlatformPurchaseRequisitionHeaderDatumSlice []*DataPlatformPurchaseRequisitionHeaderDatum

	dataPlatformPurchaseRequisitionHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPurchaseRequisitionHeaderDatumType                 = reflect.TypeOf(&DataPlatformPurchaseRequisitionHeaderDatum{})
	dataPlatformPurchaseRequisitionHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformPurchaseRequisitionHeaderDatumType)
	dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPurchaseRequisitionHeaderDatumType, dataPlatformPurchaseRequisitionHeaderDatumMapping, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns)
	dataPlatformPurchaseRequisitionHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformPurchaseRequisitionHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPurchaseRequisitionHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPurchaseRequisitionHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPurchaseRequisitionHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPurchaseRequisitionHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPurchaseRequisitionHeaderDatum record from the query.
func (q dataPlatformPurchaseRequisitionHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPurchaseRequisitionHeaderDatum, error) {
	o := &DataPlatformPurchaseRequisitionHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_purchase_requisition_header_data")
	}

	return o, nil
}

// All returns all DataPlatformPurchaseRequisitionHeaderDatum records from the query.
func (q dataPlatformPurchaseRequisitionHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPurchaseRequisitionHeaderDatumSlice, error) {
	var o []*DataPlatformPurchaseRequisitionHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPurchaseRequisitionHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPurchaseRequisitionHeaderDatum records in the query.
func (q dataPlatformPurchaseRequisitionHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_purchase_requisition_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPurchaseRequisitionHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_purchase_requisition_header_data exists")
	}

	return count > 0, nil
}

// BuyerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) BuyerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// PrecedingOrderIDDataPlatformOrdersHeaderDatum pointed to by the foreign key.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) PrecedingOrderIDDataPlatformOrdersHeaderDatum(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.PrecedingOrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// PrecedingOrderIDDataPlatformOrdersItemDatum pointed to by the foreign key.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) PrecedingOrderIDDataPlatformOrdersItemDatum(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.PrecedingOrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersItemData(queryMods...)
}

// ProductionOrderDataPlatformProductionOrderItemDatum pointed to by the foreign key.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) ProductionOrderDataPlatformProductionOrderItemDatum(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductionOrder` = ?", o.ProductionOrder),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// ProductionOrderDataPlatformProductionOrderHeaderDatum pointed to by the foreign key.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) ProductionOrderDataPlatformProductionOrderHeaderDatum(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductionOrder` = ?", o.ProductionOrder),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionOrderHeaderData(queryMods...)
}

// BuyerDataPlatformPurchaseRequisitionItemData retrieves all the data_platform_purchase_requisition_item_datum's DataPlatformPurchaseRequisitionItemData with an executor via Buyer column.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) BuyerDataPlatformPurchaseRequisitionItemData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_purchase_requisition_item_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformPurchaseRequisitionItemData(queryMods...)
}

// LoadBuyerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPurchaseRequisitionHeaderDatumL) LoadBuyerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPurchaseRequisitionHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPurchaseRequisitionHeaderDatum
	var object *DataPlatformPurchaseRequisitionHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPurchaseRequisitionHeaderDatum.(*DataPlatformPurchaseRequisitionHeaderDatum)
		if !ok {
			object = new(DataPlatformPurchaseRequisitionHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPurchaseRequisitionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPurchaseRequisitionHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPurchaseRequisitionHeaderDatum.(*[]*DataPlatformPurchaseRequisitionHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPurchaseRequisitionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPurchaseRequisitionHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPurchaseRequisitionHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPurchaseRequisitionHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.BusinessPartner {
				local.R.BuyerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPrecedingOrderIDDataPlatformOrdersHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPurchaseRequisitionHeaderDatumL) LoadPrecedingOrderIDDataPlatformOrdersHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPurchaseRequisitionHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPurchaseRequisitionHeaderDatum
	var object *DataPlatformPurchaseRequisitionHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPurchaseRequisitionHeaderDatum.(*DataPlatformPurchaseRequisitionHeaderDatum)
		if !ok {
			object = new(DataPlatformPurchaseRequisitionHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPurchaseRequisitionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPurchaseRequisitionHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPurchaseRequisitionHeaderDatum.(*[]*DataPlatformPurchaseRequisitionHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPurchaseRequisitionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPurchaseRequisitionHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPurchaseRequisitionHeaderDatumR{}
		}
		if !queries.IsNil(object.PrecedingOrderID) {
			args = append(args, object.PrecedingOrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPurchaseRequisitionHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PrecedingOrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PrecedingOrderID) {
				args = append(args, obj.PrecedingOrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersHeaderDatum")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PrecedingOrderIDDataPlatformOrdersHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PrecedingOrderID, foreign.OrderID) {
				local.R.PrecedingOrderIDDataPlatformOrdersHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPrecedingOrderIDDataPlatformOrdersItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPurchaseRequisitionHeaderDatumL) LoadPrecedingOrderIDDataPlatformOrdersItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPurchaseRequisitionHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPurchaseRequisitionHeaderDatum
	var object *DataPlatformPurchaseRequisitionHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPurchaseRequisitionHeaderDatum.(*DataPlatformPurchaseRequisitionHeaderDatum)
		if !ok {
			object = new(DataPlatformPurchaseRequisitionHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPurchaseRequisitionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPurchaseRequisitionHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPurchaseRequisitionHeaderDatum.(*[]*DataPlatformPurchaseRequisitionHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPurchaseRequisitionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPurchaseRequisitionHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPurchaseRequisitionHeaderDatumR{}
		}
		if !queries.IsNil(object.PrecedingOrderID) {
			args = append(args, object.PrecedingOrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPurchaseRequisitionHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PrecedingOrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PrecedingOrderID) {
				args = append(args, obj.PrecedingOrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersItemDatum")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PrecedingOrderIDDataPlatformOrdersItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PrecedingOrderID, foreign.OrderID) {
				local.R.PrecedingOrderIDDataPlatformOrdersItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDataPlatformProductionOrderItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPurchaseRequisitionHeaderDatumL) LoadProductionOrderDataPlatformProductionOrderItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPurchaseRequisitionHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPurchaseRequisitionHeaderDatum
	var object *DataPlatformPurchaseRequisitionHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPurchaseRequisitionHeaderDatum.(*DataPlatformPurchaseRequisitionHeaderDatum)
		if !ok {
			object = new(DataPlatformPurchaseRequisitionHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPurchaseRequisitionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPurchaseRequisitionHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPurchaseRequisitionHeaderDatum.(*[]*DataPlatformPurchaseRequisitionHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPurchaseRequisitionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPurchaseRequisitionHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPurchaseRequisitionHeaderDatumR{}
		}
		if !queries.IsNil(object.ProductionOrder) {
			args = append(args, object.ProductionOrder)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPurchaseRequisitionHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionOrder) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductionOrder) {
				args = append(args, obj.ProductionOrder)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.ProductionOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionOrderItemDatum")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionOrderItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionOrderDataPlatformProductionOrderItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductionOrder, foreign.ProductionOrder) {
				local.R.ProductionOrderDataPlatformProductionOrderItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDataPlatformProductionOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPurchaseRequisitionHeaderDatumL) LoadProductionOrderDataPlatformProductionOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPurchaseRequisitionHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPurchaseRequisitionHeaderDatum
	var object *DataPlatformPurchaseRequisitionHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPurchaseRequisitionHeaderDatum.(*DataPlatformPurchaseRequisitionHeaderDatum)
		if !ok {
			object = new(DataPlatformPurchaseRequisitionHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPurchaseRequisitionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPurchaseRequisitionHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPurchaseRequisitionHeaderDatum.(*[]*DataPlatformPurchaseRequisitionHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPurchaseRequisitionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPurchaseRequisitionHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPurchaseRequisitionHeaderDatumR{}
		}
		if !queries.IsNil(object.ProductionOrder) {
			args = append(args, object.ProductionOrder)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPurchaseRequisitionHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionOrder) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductionOrder) {
				args = append(args, obj.ProductionOrder)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_data`),
		qm.WhereIn(`data_platform_production_order_header_data.ProductionOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionOrderHeaderDatum")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionOrderDataPlatformProductionOrderHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductionOrder, foreign.ProductionOrder) {
				local.R.ProductionOrderDataPlatformProductionOrderHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformPurchaseRequisitionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPurchaseRequisitionHeaderDatumL) LoadBuyerDataPlatformPurchaseRequisitionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPurchaseRequisitionHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPurchaseRequisitionHeaderDatum
	var object *DataPlatformPurchaseRequisitionHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPurchaseRequisitionHeaderDatum.(*DataPlatformPurchaseRequisitionHeaderDatum)
		if !ok {
			object = new(DataPlatformPurchaseRequisitionHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPurchaseRequisitionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPurchaseRequisitionHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPurchaseRequisitionHeaderDatum.(*[]*DataPlatformPurchaseRequisitionHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPurchaseRequisitionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPurchaseRequisitionHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPurchaseRequisitionHeaderDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPurchaseRequisitionHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_purchase_requisition_item_data`),
		qm.WhereIn(`data_platform_purchase_requisition_item_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_purchase_requisition_item_data")
	}

	var resultSlice []*DataPlatformPurchaseRequisitionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_purchase_requisition_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_purchase_requisition_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_purchase_requisition_item_data")
	}

	if singular {
		object.R.BuyerDataPlatformPurchaseRequisitionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformPurchaseRequisitionItemData = append(local.R.BuyerDataPlatformPurchaseRequisitionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBuyerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformPurchaseRequisitionHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) SetBuyerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_purchase_requisition_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.PurchaseRequisition}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformPurchaseRequisitionHeaderDatumR{
			BuyerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetPrecedingOrderIDDataPlatformOrdersHeaderDatum of the dataPlatformPurchaseRequisitionHeaderDatum to the related item.
// Sets o.R.PrecedingOrderIDDataPlatformOrdersHeaderDatum to related.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) SetPrecedingOrderIDDataPlatformOrdersHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_purchase_requisition_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PrecedingOrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.PurchaseRequisition}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PrecedingOrderID, related.OrderID)
	if o.R == nil {
		o.R = &dataPlatformPurchaseRequisitionHeaderDatumR{
			PrecedingOrderIDDataPlatformOrdersHeaderDatum: related,
		}
	} else {
		o.R.PrecedingOrderIDDataPlatformOrdersHeaderDatum = related
	}

	return nil
}

// RemovePrecedingOrderIDDataPlatformOrdersHeaderDatum relationship.
// Sets o.R.PrecedingOrderIDDataPlatformOrdersHeaderDatum to nil.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) RemovePrecedingOrderIDDataPlatformOrdersHeaderDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformOrdersHeaderDatum) error {
	var err error

	queries.SetScanner(&o.PrecedingOrderID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PrecedingOrderID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PrecedingOrderIDDataPlatformOrdersHeaderDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPrecedingOrderIDDataPlatformOrdersItemDatum of the dataPlatformPurchaseRequisitionHeaderDatum to the related item.
// Sets o.R.PrecedingOrderIDDataPlatformOrdersItemDatum to related.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) SetPrecedingOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_purchase_requisition_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PrecedingOrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.PurchaseRequisition}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PrecedingOrderID, related.OrderID)
	if o.R == nil {
		o.R = &dataPlatformPurchaseRequisitionHeaderDatumR{
			PrecedingOrderIDDataPlatformOrdersItemDatum: related,
		}
	} else {
		o.R.PrecedingOrderIDDataPlatformOrdersItemDatum = related
	}

	return nil
}

// RemovePrecedingOrderIDDataPlatformOrdersItemDatum relationship.
// Sets o.R.PrecedingOrderIDDataPlatformOrdersItemDatum to nil.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) RemovePrecedingOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformOrdersItemDatum) error {
	var err error

	queries.SetScanner(&o.PrecedingOrderID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PrecedingOrderID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PrecedingOrderIDDataPlatformOrdersItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductionOrderDataPlatformProductionOrderItemDatum of the dataPlatformPurchaseRequisitionHeaderDatum to the related item.
// Sets o.R.ProductionOrderDataPlatformProductionOrderItemDatum to related.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) SetProductionOrderDataPlatformProductionOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionOrderItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_purchase_requisition_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrder"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductionOrder, o.PurchaseRequisition}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductionOrder, related.ProductionOrder)
	if o.R == nil {
		o.R = &dataPlatformPurchaseRequisitionHeaderDatumR{
			ProductionOrderDataPlatformProductionOrderItemDatum: related,
		}
	} else {
		o.R.ProductionOrderDataPlatformProductionOrderItemDatum = related
	}

	return nil
}

// RemoveProductionOrderDataPlatformProductionOrderItemDatum relationship.
// Sets o.R.ProductionOrderDataPlatformProductionOrderItemDatum to nil.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) RemoveProductionOrderDataPlatformProductionOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductionOrderItemDatum) error {
	var err error

	queries.SetScanner(&o.ProductionOrder, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductionOrder")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductionOrderDataPlatformProductionOrderItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductionOrderDataPlatformProductionOrderHeaderDatum of the dataPlatformPurchaseRequisitionHeaderDatum to the related item.
// Sets o.R.ProductionOrderDataPlatformProductionOrderHeaderDatum to related.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) SetProductionOrderDataPlatformProductionOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_purchase_requisition_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrder"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductionOrder, o.PurchaseRequisition}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductionOrder, related.ProductionOrder)
	if o.R == nil {
		o.R = &dataPlatformPurchaseRequisitionHeaderDatumR{
			ProductionOrderDataPlatformProductionOrderHeaderDatum: related,
		}
	} else {
		o.R.ProductionOrderDataPlatformProductionOrderHeaderDatum = related
	}

	return nil
}

// RemoveProductionOrderDataPlatformProductionOrderHeaderDatum relationship.
// Sets o.R.ProductionOrderDataPlatformProductionOrderHeaderDatum to nil.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) RemoveProductionOrderDataPlatformProductionOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductionOrderHeaderDatum) error {
	var err error

	queries.SetScanner(&o.ProductionOrder, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductionOrder")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductionOrderDataPlatformProductionOrderHeaderDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// AddBuyerDataPlatformPurchaseRequisitionItemData adds the given related objects to the existing relationships
// of the data_platform_purchase_requisition_header_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformPurchaseRequisitionItemData.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) AddBuyerDataPlatformPurchaseRequisitionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPurchaseRequisitionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_purchase_requisition_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.PurchaseRequisition, rel.PurchaseRequisitionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPurchaseRequisitionHeaderDatumR{
			BuyerDataPlatformPurchaseRequisitionItemData: related,
		}
	} else {
		o.R.BuyerDataPlatformPurchaseRequisitionItemData = append(o.R.BuyerDataPlatformPurchaseRequisitionItemData, related...)
	}

	return nil
}

// DataPlatformPurchaseRequisitionHeaderData retrieves all the records using an executor.
func DataPlatformPurchaseRequisitionHeaderData(mods ...qm.QueryMod) dataPlatformPurchaseRequisitionHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_purchase_requisition_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_purchase_requisition_header_data`.*"})
	}

	return dataPlatformPurchaseRequisitionHeaderDatumQuery{q}
}

// FindDataPlatformPurchaseRequisitionHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPurchaseRequisitionHeaderDatum(ctx context.Context, exec boil.ContextExecutor, purchaseRequisition int, selectCols ...string) (*DataPlatformPurchaseRequisitionHeaderDatum, error) {
	dataPlatformPurchaseRequisitionHeaderDatumObj := &DataPlatformPurchaseRequisitionHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_purchase_requisition_header_data` where `PurchaseRequisition`=?", sel,
	)

	q := queries.Raw(query, purchaseRequisition)

	err := q.Bind(ctx, exec, dataPlatformPurchaseRequisitionHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_purchase_requisition_header_data")
	}

	return dataPlatformPurchaseRequisitionHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_purchase_requisition_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPurchaseRequisitionHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPurchaseRequisitionHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPurchaseRequisitionHeaderDatumInsertCache[key]
	dataPlatformPurchaseRequisitionHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPurchaseRequisitionHeaderDatumAllColumns,
			dataPlatformPurchaseRequisitionHeaderDatumColumnsWithDefault,
			dataPlatformPurchaseRequisitionHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPurchaseRequisitionHeaderDatumType, dataPlatformPurchaseRequisitionHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPurchaseRequisitionHeaderDatumType, dataPlatformPurchaseRequisitionHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_purchase_requisition_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_purchase_requisition_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_purchase_requisition_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_purchase_requisition_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PurchaseRequisition,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_purchase_requisition_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPurchaseRequisitionHeaderDatumInsertCacheMut.Lock()
		dataPlatformPurchaseRequisitionHeaderDatumInsertCache[key] = cache
		dataPlatformPurchaseRequisitionHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPurchaseRequisitionHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPurchaseRequisitionHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPurchaseRequisitionHeaderDatumUpdateCache[key]
	dataPlatformPurchaseRequisitionHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPurchaseRequisitionHeaderDatumAllColumns,
			dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_purchase_requisition_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_purchase_requisition_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPurchaseRequisitionHeaderDatumType, dataPlatformPurchaseRequisitionHeaderDatumMapping, append(wl, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_purchase_requisition_header_data row")
	}

	if !cached {
		dataPlatformPurchaseRequisitionHeaderDatumUpdateCacheMut.Lock()
		dataPlatformPurchaseRequisitionHeaderDatumUpdateCache[key] = cache
		dataPlatformPurchaseRequisitionHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPurchaseRequisitionHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_purchase_requisition_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPurchaseRequisitionHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_purchase_requisition_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPurchaseRequisitionHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformPurchaseRequisitionHeaderDatumUniqueColumns = []string{
	"PurchaseRequisition",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_purchase_requisition_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPurchaseRequisitionHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPurchaseRequisitionHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPurchaseRequisitionHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPurchaseRequisitionHeaderDatumUpsertCache[key]
	dataPlatformPurchaseRequisitionHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPurchaseRequisitionHeaderDatumAllColumns,
			dataPlatformPurchaseRequisitionHeaderDatumColumnsWithDefault,
			dataPlatformPurchaseRequisitionHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPurchaseRequisitionHeaderDatumAllColumns,
			dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_purchase_requisition_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_purchase_requisition_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_purchase_requisition_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPurchaseRequisitionHeaderDatumType, dataPlatformPurchaseRequisitionHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPurchaseRequisitionHeaderDatumType, dataPlatformPurchaseRequisitionHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_purchase_requisition_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPurchaseRequisitionHeaderDatumType, dataPlatformPurchaseRequisitionHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_purchase_requisition_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_purchase_requisition_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPurchaseRequisitionHeaderDatumUpsertCacheMut.Lock()
		dataPlatformPurchaseRequisitionHeaderDatumUpsertCache[key] = cache
		dataPlatformPurchaseRequisitionHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPurchaseRequisitionHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPurchaseRequisitionHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_purchase_requisition_header_data` WHERE `PurchaseRequisition`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_purchase_requisition_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPurchaseRequisitionHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPurchaseRequisitionHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_purchase_requisition_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPurchaseRequisitionHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_purchase_requisition_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPurchaseRequisitionHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPurchaseRequisitionHeaderDatum(ctx, exec, o.PurchaseRequisition)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPurchaseRequisitionHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPurchaseRequisitionHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_purchase_requisition_header_data`.* FROM `data_platform_purchase_requisition_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPurchaseRequisitionHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPurchaseRequisitionHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPurchaseRequisitionHeaderDatumExists checks if the DataPlatformPurchaseRequisitionHeaderDatum row exists.
func DataPlatformPurchaseRequisitionHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, purchaseRequisition int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_purchase_requisition_header_data` where `PurchaseRequisition`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, purchaseRequisition)
	}
	row := exec.QueryRowContext(ctx, sql, purchaseRequisition)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_purchase_requisition_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPurchaseRequisitionHeaderDatum row exists.
func (o *DataPlatformPurchaseRequisitionHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPurchaseRequisitionHeaderDatumExists(ctx, exec, o.PurchaseRequisition)
}
