// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformOrdersItemScheduleLineDatum is an object representing the database table.
type DataPlatformOrdersItemScheduleLineDatum struct {
	OrderID                                         int          `boil:"OrderID" json:"OrderID" toml:"OrderID" yaml:"OrderID"`
	OrderItem                                       int          `boil:"OrderItem" json:"OrderItem" toml:"OrderItem" yaml:"OrderItem"`
	ScheduleLine                                    int          `boil:"ScheduleLine" json:"ScheduleLine" toml:"ScheduleLine" yaml:"ScheduleLine"`
	SupplyChainRelationshipID                       int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipStockConfPlantID         int          `boil:"SupplyChainRelationshipStockConfPlantID" json:"SupplyChainRelationshipStockConfPlantID" toml:"SupplyChainRelationshipStockConfPlantID" yaml:"SupplyChainRelationshipStockConfPlantID"`
	Product                                         string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	StockConfirmationBusinessPartner                int          `boil:"StockConfirmationBusinessPartner" json:"StockConfirmationBusinessPartner" toml:"StockConfirmationBusinessPartner" yaml:"StockConfirmationBusinessPartner"`
	StockConfirmationPlant                          string       `boil:"StockConfirmationPlant" json:"StockConfirmationPlant" toml:"StockConfirmationPlant" yaml:"StockConfirmationPlant"`
	StockConfirmationPlantTimeZone                  null.String  `boil:"StockConfirmationPlantTimeZone" json:"StockConfirmationPlantTimeZone,omitempty" toml:"StockConfirmationPlantTimeZone" yaml:"StockConfirmationPlantTimeZone,omitempty"`
	StockConfirmationPlantBatch                     null.String  `boil:"StockConfirmationPlantBatch" json:"StockConfirmationPlantBatch,omitempty" toml:"StockConfirmationPlantBatch" yaml:"StockConfirmationPlantBatch,omitempty"`
	StockConfirmationPlantBatchValidityStartDate    null.String  `boil:"StockConfirmationPlantBatchValidityStartDate" json:"StockConfirmationPlantBatchValidityStartDate,omitempty" toml:"StockConfirmationPlantBatchValidityStartDate" yaml:"StockConfirmationPlantBatchValidityStartDate,omitempty"`
	StockConfirmationPlantBatchValidityEndDate      null.String  `boil:"StockConfirmationPlantBatchValidityEndDate" json:"StockConfirmationPlantBatchValidityEndDate,omitempty" toml:"StockConfirmationPlantBatchValidityEndDate" yaml:"StockConfirmationPlantBatchValidityEndDate,omitempty"`
	RequestedDeliveryDate                           string       `boil:"RequestedDeliveryDate" json:"RequestedDeliveryDate" toml:"RequestedDeliveryDate" yaml:"RequestedDeliveryDate"`
	RequestedDeliveryTime                           string       `boil:"RequestedDeliveryTime" json:"RequestedDeliveryTime" toml:"RequestedDeliveryTime" yaml:"RequestedDeliveryTime"`
	ConfirmedDeliveryDate                           string       `boil:"ConfirmedDeliveryDate" json:"ConfirmedDeliveryDate" toml:"ConfirmedDeliveryDate" yaml:"ConfirmedDeliveryDate"`
	ScheduleLineOrderQuantity                       float32      `boil:"ScheduleLineOrderQuantity" json:"ScheduleLineOrderQuantity" toml:"ScheduleLineOrderQuantity" yaml:"ScheduleLineOrderQuantity"`
	OriginalOrderQuantityInBaseUnit                 float32      `boil:"OriginalOrderQuantityInBaseUnit" json:"OriginalOrderQuantityInBaseUnit" toml:"OriginalOrderQuantityInBaseUnit" yaml:"OriginalOrderQuantityInBaseUnit"`
	ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit float32      `boil:"ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit" json:"ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit" toml:"ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit" yaml:"ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit"`
	ConfirmedOrderQuantityByPDTAvailCheck           float32      `boil:"ConfirmedOrderQuantityByPDTAvailCheck" json:"ConfirmedOrderQuantityByPDTAvailCheck" toml:"ConfirmedOrderQuantityByPDTAvailCheck" yaml:"ConfirmedOrderQuantityByPDTAvailCheck"`
	DeliveredQuantityInBaseUnit                     null.Float32 `boil:"DeliveredQuantityInBaseUnit" json:"DeliveredQuantityInBaseUnit,omitempty" toml:"DeliveredQuantityInBaseUnit" yaml:"DeliveredQuantityInBaseUnit,omitempty"`
	UndeliveredQuantityInBaseUnit                   null.Float32 `boil:"UndeliveredQuantityInBaseUnit" json:"UndeliveredQuantityInBaseUnit,omitempty" toml:"UndeliveredQuantityInBaseUnit" yaml:"UndeliveredQuantityInBaseUnit,omitempty"`
	OpenConfirmedQuantityInBaseUnit                 null.Float32 `boil:"OpenConfirmedQuantityInBaseUnit" json:"OpenConfirmedQuantityInBaseUnit,omitempty" toml:"OpenConfirmedQuantityInBaseUnit" yaml:"OpenConfirmedQuantityInBaseUnit,omitempty"`
	StockIsFullyConfirmed                           null.Bool    `boil:"StockIsFullyConfirmed" json:"StockIsFullyConfirmed,omitempty" toml:"StockIsFullyConfirmed" yaml:"StockIsFullyConfirmed,omitempty"`
	PlusMinusFlag                                   string       `boil:"PlusMinusFlag" json:"PlusMinusFlag" toml:"PlusMinusFlag" yaml:"PlusMinusFlag"`
	ItemScheduleLineDeliveryBlockStatus             null.Bool    `boil:"ItemScheduleLineDeliveryBlockStatus" json:"ItemScheduleLineDeliveryBlockStatus,omitempty" toml:"ItemScheduleLineDeliveryBlockStatus" yaml:"ItemScheduleLineDeliveryBlockStatus,omitempty"`
	IsCancelled                                     null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion                             null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformOrdersItemScheduleLineDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformOrdersItemScheduleLineDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformOrdersItemScheduleLineDatumColumns = struct {
	OrderID                                         string
	OrderItem                                       string
	ScheduleLine                                    string
	SupplyChainRelationshipID                       string
	SupplyChainRelationshipStockConfPlantID         string
	Product                                         string
	StockConfirmationBusinessPartner                string
	StockConfirmationPlant                          string
	StockConfirmationPlantTimeZone                  string
	StockConfirmationPlantBatch                     string
	StockConfirmationPlantBatchValidityStartDate    string
	StockConfirmationPlantBatchValidityEndDate      string
	RequestedDeliveryDate                           string
	RequestedDeliveryTime                           string
	ConfirmedDeliveryDate                           string
	ScheduleLineOrderQuantity                       string
	OriginalOrderQuantityInBaseUnit                 string
	ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit string
	ConfirmedOrderQuantityByPDTAvailCheck           string
	DeliveredQuantityInBaseUnit                     string
	UndeliveredQuantityInBaseUnit                   string
	OpenConfirmedQuantityInBaseUnit                 string
	StockIsFullyConfirmed                           string
	PlusMinusFlag                                   string
	ItemScheduleLineDeliveryBlockStatus             string
	IsCancelled                                     string
	IsMarkedForDeletion                             string
}{
	OrderID:                                         "OrderID",
	OrderItem:                                       "OrderItem",
	ScheduleLine:                                    "ScheduleLine",
	SupplyChainRelationshipID:                       "SupplyChainRelationshipID",
	SupplyChainRelationshipStockConfPlantID:         "SupplyChainRelationshipStockConfPlantID",
	Product:                                         "Product",
	StockConfirmationBusinessPartner:                "StockConfirmationBusinessPartner",
	StockConfirmationPlant:                          "StockConfirmationPlant",
	StockConfirmationPlantTimeZone:                  "StockConfirmationPlantTimeZone",
	StockConfirmationPlantBatch:                     "StockConfirmationPlantBatch",
	StockConfirmationPlantBatchValidityStartDate:    "StockConfirmationPlantBatchValidityStartDate",
	StockConfirmationPlantBatchValidityEndDate:      "StockConfirmationPlantBatchValidityEndDate",
	RequestedDeliveryDate:                           "RequestedDeliveryDate",
	RequestedDeliveryTime:                           "RequestedDeliveryTime",
	ConfirmedDeliveryDate:                           "ConfirmedDeliveryDate",
	ScheduleLineOrderQuantity:                       "ScheduleLineOrderQuantity",
	OriginalOrderQuantityInBaseUnit:                 "OriginalOrderQuantityInBaseUnit",
	ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit: "ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit",
	ConfirmedOrderQuantityByPDTAvailCheck:           "ConfirmedOrderQuantityByPDTAvailCheck",
	DeliveredQuantityInBaseUnit:                     "DeliveredQuantityInBaseUnit",
	UndeliveredQuantityInBaseUnit:                   "UndeliveredQuantityInBaseUnit",
	OpenConfirmedQuantityInBaseUnit:                 "OpenConfirmedQuantityInBaseUnit",
	StockIsFullyConfirmed:                           "StockIsFullyConfirmed",
	PlusMinusFlag:                                   "PlusMinusFlag",
	ItemScheduleLineDeliveryBlockStatus:             "ItemScheduleLineDeliveryBlockStatus",
	IsCancelled:                                     "IsCancelled",
	IsMarkedForDeletion:                             "IsMarkedForDeletion",
}

var DataPlatformOrdersItemScheduleLineDatumTableColumns = struct {
	OrderID                                         string
	OrderItem                                       string
	ScheduleLine                                    string
	SupplyChainRelationshipID                       string
	SupplyChainRelationshipStockConfPlantID         string
	Product                                         string
	StockConfirmationBusinessPartner                string
	StockConfirmationPlant                          string
	StockConfirmationPlantTimeZone                  string
	StockConfirmationPlantBatch                     string
	StockConfirmationPlantBatchValidityStartDate    string
	StockConfirmationPlantBatchValidityEndDate      string
	RequestedDeliveryDate                           string
	RequestedDeliveryTime                           string
	ConfirmedDeliveryDate                           string
	ScheduleLineOrderQuantity                       string
	OriginalOrderQuantityInBaseUnit                 string
	ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit string
	ConfirmedOrderQuantityByPDTAvailCheck           string
	DeliveredQuantityInBaseUnit                     string
	UndeliveredQuantityInBaseUnit                   string
	OpenConfirmedQuantityInBaseUnit                 string
	StockIsFullyConfirmed                           string
	PlusMinusFlag                                   string
	ItemScheduleLineDeliveryBlockStatus             string
	IsCancelled                                     string
	IsMarkedForDeletion                             string
}{
	OrderID:                                         "data_platform_orders_item_schedule_line_data.OrderID",
	OrderItem:                                       "data_platform_orders_item_schedule_line_data.OrderItem",
	ScheduleLine:                                    "data_platform_orders_item_schedule_line_data.ScheduleLine",
	SupplyChainRelationshipID:                       "data_platform_orders_item_schedule_line_data.SupplyChainRelationshipID",
	SupplyChainRelationshipStockConfPlantID:         "data_platform_orders_item_schedule_line_data.SupplyChainRelationshipStockConfPlantID",
	Product:                                         "data_platform_orders_item_schedule_line_data.Product",
	StockConfirmationBusinessPartner:                "data_platform_orders_item_schedule_line_data.StockConfirmationBusinessPartner",
	StockConfirmationPlant:                          "data_platform_orders_item_schedule_line_data.StockConfirmationPlant",
	StockConfirmationPlantTimeZone:                  "data_platform_orders_item_schedule_line_data.StockConfirmationPlantTimeZone",
	StockConfirmationPlantBatch:                     "data_platform_orders_item_schedule_line_data.StockConfirmationPlantBatch",
	StockConfirmationPlantBatchValidityStartDate:    "data_platform_orders_item_schedule_line_data.StockConfirmationPlantBatchValidityStartDate",
	StockConfirmationPlantBatchValidityEndDate:      "data_platform_orders_item_schedule_line_data.StockConfirmationPlantBatchValidityEndDate",
	RequestedDeliveryDate:                           "data_platform_orders_item_schedule_line_data.RequestedDeliveryDate",
	RequestedDeliveryTime:                           "data_platform_orders_item_schedule_line_data.RequestedDeliveryTime",
	ConfirmedDeliveryDate:                           "data_platform_orders_item_schedule_line_data.ConfirmedDeliveryDate",
	ScheduleLineOrderQuantity:                       "data_platform_orders_item_schedule_line_data.ScheduleLineOrderQuantity",
	OriginalOrderQuantityInBaseUnit:                 "data_platform_orders_item_schedule_line_data.OriginalOrderQuantityInBaseUnit",
	ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit: "data_platform_orders_item_schedule_line_data.ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit",
	ConfirmedOrderQuantityByPDTAvailCheck:           "data_platform_orders_item_schedule_line_data.ConfirmedOrderQuantityByPDTAvailCheck",
	DeliveredQuantityInBaseUnit:                     "data_platform_orders_item_schedule_line_data.DeliveredQuantityInBaseUnit",
	UndeliveredQuantityInBaseUnit:                   "data_platform_orders_item_schedule_line_data.UndeliveredQuantityInBaseUnit",
	OpenConfirmedQuantityInBaseUnit:                 "data_platform_orders_item_schedule_line_data.OpenConfirmedQuantityInBaseUnit",
	StockIsFullyConfirmed:                           "data_platform_orders_item_schedule_line_data.StockIsFullyConfirmed",
	PlusMinusFlag:                                   "data_platform_orders_item_schedule_line_data.PlusMinusFlag",
	ItemScheduleLineDeliveryBlockStatus:             "data_platform_orders_item_schedule_line_data.ItemScheduleLineDeliveryBlockStatus",
	IsCancelled:                                     "data_platform_orders_item_schedule_line_data.IsCancelled",
	IsMarkedForDeletion:                             "data_platform_orders_item_schedule_line_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformOrdersItemScheduleLineDatumWhere = struct {
	OrderID                                         whereHelperint
	OrderItem                                       whereHelperint
	ScheduleLine                                    whereHelperint
	SupplyChainRelationshipID                       whereHelperint
	SupplyChainRelationshipStockConfPlantID         whereHelperint
	Product                                         whereHelperstring
	StockConfirmationBusinessPartner                whereHelperint
	StockConfirmationPlant                          whereHelperstring
	StockConfirmationPlantTimeZone                  whereHelpernull_String
	StockConfirmationPlantBatch                     whereHelpernull_String
	StockConfirmationPlantBatchValidityStartDate    whereHelpernull_String
	StockConfirmationPlantBatchValidityEndDate      whereHelpernull_String
	RequestedDeliveryDate                           whereHelperstring
	RequestedDeliveryTime                           whereHelperstring
	ConfirmedDeliveryDate                           whereHelperstring
	ScheduleLineOrderQuantity                       whereHelperfloat32
	OriginalOrderQuantityInBaseUnit                 whereHelperfloat32
	ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit whereHelperfloat32
	ConfirmedOrderQuantityByPDTAvailCheck           whereHelperfloat32
	DeliveredQuantityInBaseUnit                     whereHelpernull_Float32
	UndeliveredQuantityInBaseUnit                   whereHelpernull_Float32
	OpenConfirmedQuantityInBaseUnit                 whereHelpernull_Float32
	StockIsFullyConfirmed                           whereHelpernull_Bool
	PlusMinusFlag                                   whereHelperstring
	ItemScheduleLineDeliveryBlockStatus             whereHelpernull_Bool
	IsCancelled                                     whereHelpernull_Bool
	IsMarkedForDeletion                             whereHelpernull_Bool
}{
	OrderID:                                         whereHelperint{field: "`data_platform_orders_item_schedule_line_data`.`OrderID`"},
	OrderItem:                                       whereHelperint{field: "`data_platform_orders_item_schedule_line_data`.`OrderItem`"},
	ScheduleLine:                                    whereHelperint{field: "`data_platform_orders_item_schedule_line_data`.`ScheduleLine`"},
	SupplyChainRelationshipID:                       whereHelperint{field: "`data_platform_orders_item_schedule_line_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipStockConfPlantID:         whereHelperint{field: "`data_platform_orders_item_schedule_line_data`.`SupplyChainRelationshipStockConfPlantID`"},
	Product:                                         whereHelperstring{field: "`data_platform_orders_item_schedule_line_data`.`Product`"},
	StockConfirmationBusinessPartner:                whereHelperint{field: "`data_platform_orders_item_schedule_line_data`.`StockConfirmationBusinessPartner`"},
	StockConfirmationPlant:                          whereHelperstring{field: "`data_platform_orders_item_schedule_line_data`.`StockConfirmationPlant`"},
	StockConfirmationPlantTimeZone:                  whereHelpernull_String{field: "`data_platform_orders_item_schedule_line_data`.`StockConfirmationPlantTimeZone`"},
	StockConfirmationPlantBatch:                     whereHelpernull_String{field: "`data_platform_orders_item_schedule_line_data`.`StockConfirmationPlantBatch`"},
	StockConfirmationPlantBatchValidityStartDate:    whereHelpernull_String{field: "`data_platform_orders_item_schedule_line_data`.`StockConfirmationPlantBatchValidityStartDate`"},
	StockConfirmationPlantBatchValidityEndDate:      whereHelpernull_String{field: "`data_platform_orders_item_schedule_line_data`.`StockConfirmationPlantBatchValidityEndDate`"},
	RequestedDeliveryDate:                           whereHelperstring{field: "`data_platform_orders_item_schedule_line_data`.`RequestedDeliveryDate`"},
	RequestedDeliveryTime:                           whereHelperstring{field: "`data_platform_orders_item_schedule_line_data`.`RequestedDeliveryTime`"},
	ConfirmedDeliveryDate:                           whereHelperstring{field: "`data_platform_orders_item_schedule_line_data`.`ConfirmedDeliveryDate`"},
	ScheduleLineOrderQuantity:                       whereHelperfloat32{field: "`data_platform_orders_item_schedule_line_data`.`ScheduleLineOrderQuantity`"},
	OriginalOrderQuantityInBaseUnit:                 whereHelperfloat32{field: "`data_platform_orders_item_schedule_line_data`.`OriginalOrderQuantityInBaseUnit`"},
	ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit: whereHelperfloat32{field: "`data_platform_orders_item_schedule_line_data`.`ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit`"},
	ConfirmedOrderQuantityByPDTAvailCheck:           whereHelperfloat32{field: "`data_platform_orders_item_schedule_line_data`.`ConfirmedOrderQuantityByPDTAvailCheck`"},
	DeliveredQuantityInBaseUnit:                     whereHelpernull_Float32{field: "`data_platform_orders_item_schedule_line_data`.`DeliveredQuantityInBaseUnit`"},
	UndeliveredQuantityInBaseUnit:                   whereHelpernull_Float32{field: "`data_platform_orders_item_schedule_line_data`.`UndeliveredQuantityInBaseUnit`"},
	OpenConfirmedQuantityInBaseUnit:                 whereHelpernull_Float32{field: "`data_platform_orders_item_schedule_line_data`.`OpenConfirmedQuantityInBaseUnit`"},
	StockIsFullyConfirmed:                           whereHelpernull_Bool{field: "`data_platform_orders_item_schedule_line_data`.`StockIsFullyConfirmed`"},
	PlusMinusFlag:                                   whereHelperstring{field: "`data_platform_orders_item_schedule_line_data`.`PlusMinusFlag`"},
	ItemScheduleLineDeliveryBlockStatus:             whereHelpernull_Bool{field: "`data_platform_orders_item_schedule_line_data`.`ItemScheduleLineDeliveryBlockStatus`"},
	IsCancelled:                                     whereHelpernull_Bool{field: "`data_platform_orders_item_schedule_line_data`.`IsCancelled`"},
	IsMarkedForDeletion:                             whereHelpernull_Bool{field: "`data_platform_orders_item_schedule_line_data`.`IsMarkedForDeletion`"},
}

// DataPlatformOrdersItemScheduleLineDatumRels is where relationship names are stored.
var DataPlatformOrdersItemScheduleLineDatumRels = struct {
}{}

// dataPlatformOrdersItemScheduleLineDatumR is where relationships are stored.
type dataPlatformOrdersItemScheduleLineDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformOrdersItemScheduleLineDatumR) NewStruct() *dataPlatformOrdersItemScheduleLineDatumR {
	return &dataPlatformOrdersItemScheduleLineDatumR{}
}

// dataPlatformOrdersItemScheduleLineDatumL is where Load methods for each relationship are stored.
type dataPlatformOrdersItemScheduleLineDatumL struct{}

var (
	dataPlatformOrdersItemScheduleLineDatumAllColumns            = []string{"OrderID", "OrderItem", "ScheduleLine", "SupplyChainRelationshipID", "SupplyChainRelationshipStockConfPlantID", "Product", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "StockConfirmationPlantTimeZone", "StockConfirmationPlantBatch", "StockConfirmationPlantBatchValidityStartDate", "StockConfirmationPlantBatchValidityEndDate", "RequestedDeliveryDate", "RequestedDeliveryTime", "ConfirmedDeliveryDate", "ScheduleLineOrderQuantity", "OriginalOrderQuantityInBaseUnit", "ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit", "ConfirmedOrderQuantityByPDTAvailCheck", "DeliveredQuantityInBaseUnit", "UndeliveredQuantityInBaseUnit", "OpenConfirmedQuantityInBaseUnit", "StockIsFullyConfirmed", "PlusMinusFlag", "ItemScheduleLineDeliveryBlockStatus", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformOrdersItemScheduleLineDatumColumnsWithoutDefault = []string{"OrderID", "OrderItem", "ScheduleLine", "SupplyChainRelationshipID", "SupplyChainRelationshipStockConfPlantID", "Product", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "StockConfirmationPlantTimeZone", "StockConfirmationPlantBatch", "StockConfirmationPlantBatchValidityStartDate", "StockConfirmationPlantBatchValidityEndDate", "RequestedDeliveryDate", "RequestedDeliveryTime", "ConfirmedDeliveryDate", "ScheduleLineOrderQuantity", "OriginalOrderQuantityInBaseUnit", "ConfirmedOrderQuantityByPDTAvailCheckInBaseUnit", "ConfirmedOrderQuantityByPDTAvailCheck", "DeliveredQuantityInBaseUnit", "UndeliveredQuantityInBaseUnit", "OpenConfirmedQuantityInBaseUnit", "StockIsFullyConfirmed", "PlusMinusFlag", "ItemScheduleLineDeliveryBlockStatus", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformOrdersItemScheduleLineDatumColumnsWithDefault    = []string{}
	dataPlatformOrdersItemScheduleLineDatumPrimaryKeyColumns     = []string{"OrderID", "OrderItem", "ScheduleLine"}
	dataPlatformOrdersItemScheduleLineDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformOrdersItemScheduleLineDatumSlice is an alias for a slice of pointers to DataPlatformOrdersItemScheduleLineDatum.
	// This should almost always be used instead of []DataPlatformOrdersItemScheduleLineDatum.
	DataPlatformOrdersItemScheduleLineDatumSlice []*DataPlatformOrdersItemScheduleLineDatum

	dataPlatformOrdersItemScheduleLineDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformOrdersItemScheduleLineDatumType                 = reflect.TypeOf(&DataPlatformOrdersItemScheduleLineDatum{})
	dataPlatformOrdersItemScheduleLineDatumMapping              = queries.MakeStructMapping(dataPlatformOrdersItemScheduleLineDatumType)
	dataPlatformOrdersItemScheduleLineDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformOrdersItemScheduleLineDatumType, dataPlatformOrdersItemScheduleLineDatumMapping, dataPlatformOrdersItemScheduleLineDatumPrimaryKeyColumns)
	dataPlatformOrdersItemScheduleLineDatumInsertCacheMut       sync.RWMutex
	dataPlatformOrdersItemScheduleLineDatumInsertCache          = make(map[string]insertCache)
	dataPlatformOrdersItemScheduleLineDatumUpdateCacheMut       sync.RWMutex
	dataPlatformOrdersItemScheduleLineDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformOrdersItemScheduleLineDatumUpsertCacheMut       sync.RWMutex
	dataPlatformOrdersItemScheduleLineDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformOrdersItemScheduleLineDatum record from the query.
func (q dataPlatformOrdersItemScheduleLineDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformOrdersItemScheduleLineDatum, error) {
	o := &DataPlatformOrdersItemScheduleLineDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_orders_item_schedule_line_data")
	}

	return o, nil
}

// All returns all DataPlatformOrdersItemScheduleLineDatum records from the query.
func (q dataPlatformOrdersItemScheduleLineDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformOrdersItemScheduleLineDatumSlice, error) {
	var o []*DataPlatformOrdersItemScheduleLineDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformOrdersItemScheduleLineDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformOrdersItemScheduleLineDatum records in the query.
func (q dataPlatformOrdersItemScheduleLineDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_orders_item_schedule_line_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformOrdersItemScheduleLineDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_orders_item_schedule_line_data exists")
	}

	return count > 0, nil
}

// DataPlatformOrdersItemScheduleLineData retrieves all the records using an executor.
func DataPlatformOrdersItemScheduleLineData(mods ...qm.QueryMod) dataPlatformOrdersItemScheduleLineDatumQuery {
	mods = append(mods, qm.From("`data_platform_orders_item_schedule_line_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_orders_item_schedule_line_data`.*"})
	}

	return dataPlatformOrdersItemScheduleLineDatumQuery{q}
}

// FindDataPlatformOrdersItemScheduleLineDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformOrdersItemScheduleLineDatum(ctx context.Context, exec boil.ContextExecutor, orderID int, orderItem int, scheduleLine int, selectCols ...string) (*DataPlatformOrdersItemScheduleLineDatum, error) {
	dataPlatformOrdersItemScheduleLineDatumObj := &DataPlatformOrdersItemScheduleLineDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_orders_item_schedule_line_data` where `OrderID`=? AND `OrderItem`=? AND `ScheduleLine`=?", sel,
	)

	q := queries.Raw(query, orderID, orderItem, scheduleLine)

	err := q.Bind(ctx, exec, dataPlatformOrdersItemScheduleLineDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_orders_item_schedule_line_data")
	}

	return dataPlatformOrdersItemScheduleLineDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformOrdersItemScheduleLineDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_item_schedule_line_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersItemScheduleLineDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformOrdersItemScheduleLineDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersItemScheduleLineDatumInsertCache[key]
	dataPlatformOrdersItemScheduleLineDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformOrdersItemScheduleLineDatumAllColumns,
			dataPlatformOrdersItemScheduleLineDatumColumnsWithDefault,
			dataPlatformOrdersItemScheduleLineDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersItemScheduleLineDatumType, dataPlatformOrdersItemScheduleLineDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformOrdersItemScheduleLineDatumType, dataPlatformOrdersItemScheduleLineDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_orders_item_schedule_line_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_orders_item_schedule_line_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_orders_item_schedule_line_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemScheduleLineDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_orders_item_schedule_line_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrderID,
		o.OrderItem,
		o.ScheduleLine,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_item_schedule_line_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersItemScheduleLineDatumInsertCacheMut.Lock()
		dataPlatformOrdersItemScheduleLineDatumInsertCache[key] = cache
		dataPlatformOrdersItemScheduleLineDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformOrdersItemScheduleLineDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformOrdersItemScheduleLineDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformOrdersItemScheduleLineDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformOrdersItemScheduleLineDatumUpdateCache[key]
	dataPlatformOrdersItemScheduleLineDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformOrdersItemScheduleLineDatumAllColumns,
			dataPlatformOrdersItemScheduleLineDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_orders_item_schedule_line_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_orders_item_schedule_line_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemScheduleLineDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersItemScheduleLineDatumType, dataPlatformOrdersItemScheduleLineDatumMapping, append(wl, dataPlatformOrdersItemScheduleLineDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_orders_item_schedule_line_data row")
	}

	if !cached {
		dataPlatformOrdersItemScheduleLineDatumUpdateCacheMut.Lock()
		dataPlatformOrdersItemScheduleLineDatumUpdateCache[key] = cache
		dataPlatformOrdersItemScheduleLineDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformOrdersItemScheduleLineDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_orders_item_schedule_line_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformOrdersItemScheduleLineDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_orders_item_schedule_line_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersItemScheduleLineDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformOrdersItemScheduleLineDatum slice")
	}

	return nil
}

var mySQLDataPlatformOrdersItemScheduleLineDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformOrdersItemScheduleLineDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_item_schedule_line_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersItemScheduleLineDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformOrdersItemScheduleLineDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformOrdersItemScheduleLineDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersItemScheduleLineDatumUpsertCache[key]
	dataPlatformOrdersItemScheduleLineDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformOrdersItemScheduleLineDatumAllColumns,
			dataPlatformOrdersItemScheduleLineDatumColumnsWithDefault,
			dataPlatformOrdersItemScheduleLineDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformOrdersItemScheduleLineDatumAllColumns,
			dataPlatformOrdersItemScheduleLineDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_orders_item_schedule_line_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_orders_item_schedule_line_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_orders_item_schedule_line_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersItemScheduleLineDatumType, dataPlatformOrdersItemScheduleLineDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformOrdersItemScheduleLineDatumType, dataPlatformOrdersItemScheduleLineDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_orders_item_schedule_line_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformOrdersItemScheduleLineDatumType, dataPlatformOrdersItemScheduleLineDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_orders_item_schedule_line_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_item_schedule_line_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersItemScheduleLineDatumUpsertCacheMut.Lock()
		dataPlatformOrdersItemScheduleLineDatumUpsertCache[key] = cache
		dataPlatformOrdersItemScheduleLineDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformOrdersItemScheduleLineDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformOrdersItemScheduleLineDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformOrdersItemScheduleLineDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformOrdersItemScheduleLineDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_orders_item_schedule_line_data` WHERE `OrderID`=? AND `OrderItem`=? AND `ScheduleLine`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_orders_item_schedule_line_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformOrdersItemScheduleLineDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformOrdersItemScheduleLineDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_orders_item_schedule_line_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformOrdersItemScheduleLineDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_orders_item_schedule_line_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersItemScheduleLineDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformOrdersItemScheduleLineDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformOrdersItemScheduleLineDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformOrdersItemScheduleLineDatum(ctx, exec, o.OrderID, o.OrderItem, o.ScheduleLine)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformOrdersItemScheduleLineDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformOrdersItemScheduleLineDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersItemScheduleLineDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_orders_item_schedule_line_data`.* FROM `data_platform_orders_item_schedule_line_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersItemScheduleLineDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformOrdersItemScheduleLineDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformOrdersItemScheduleLineDatumExists checks if the DataPlatformOrdersItemScheduleLineDatum row exists.
func DataPlatformOrdersItemScheduleLineDatumExists(ctx context.Context, exec boil.ContextExecutor, orderID int, orderItem int, scheduleLine int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_orders_item_schedule_line_data` where `OrderID`=? AND `OrderItem`=? AND `ScheduleLine`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID, orderItem, scheduleLine)
	}
	row := exec.QueryRowContext(ctx, sql, orderID, orderItem, scheduleLine)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_orders_item_schedule_line_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformOrdersItemScheduleLineDatum row exists.
func (o *DataPlatformOrdersItemScheduleLineDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformOrdersItemScheduleLineDatumExists(ctx, exec, o.OrderID, o.OrderItem, o.ScheduleLine)
}
