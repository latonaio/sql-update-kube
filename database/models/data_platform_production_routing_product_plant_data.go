// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionRoutingProductPlantDatum is an object representing the database table.
type DataPlatformProductionRoutingProductPlantDatum struct {
	BusinessPartner                int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Product                        string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Plant                          string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	ProductionRoutingGroup         string      `boil:"ProductionRoutingGroup" json:"ProductionRoutingGroup" toml:"ProductionRoutingGroup" yaml:"ProductionRoutingGroup"`
	ProductionRouting              string      `boil:"ProductionRouting" json:"ProductionRouting" toml:"ProductionRouting" yaml:"ProductionRouting"`
	ProductionRoutingMatlAssgmt    string      `boil:"ProductionRoutingMatlAssgmt" json:"ProductionRoutingMatlAssgmt" toml:"ProductionRoutingMatlAssgmt" yaml:"ProductionRoutingMatlAssgmt"`
	ProductionRtgMatlAssgmtIntVers string      `boil:"ProductionRtgMatlAssgmtIntVers" json:"ProductionRtgMatlAssgmtIntVers" toml:"ProductionRtgMatlAssgmtIntVers" yaml:"ProductionRtgMatlAssgmtIntVers"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                 null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	ValidityStartDate              null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate                null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	ChangeNumber                   null.String `boil:"ChangeNumber" json:"ChangeNumber,omitempty" toml:"ChangeNumber" yaml:"ChangeNumber,omitempty"`

	R *dataPlatformProductionRoutingProductPlantDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionRoutingProductPlantDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionRoutingProductPlantDatumColumns = struct {
	BusinessPartner                string
	Product                        string
	Plant                          string
	ProductionRoutingGroup         string
	ProductionRouting              string
	ProductionRoutingMatlAssgmt    string
	ProductionRtgMatlAssgmtIntVers string
	CreationDate                   string
	LastChangeDate                 string
	ValidityStartDate              string
	ValidityEndDate                string
	ChangeNumber                   string
}{
	BusinessPartner:                "BusinessPartner",
	Product:                        "Product",
	Plant:                          "Plant",
	ProductionRoutingGroup:         "ProductionRoutingGroup",
	ProductionRouting:              "ProductionRouting",
	ProductionRoutingMatlAssgmt:    "ProductionRoutingMatlAssgmt",
	ProductionRtgMatlAssgmtIntVers: "ProductionRtgMatlAssgmtIntVers",
	CreationDate:                   "CreationDate",
	LastChangeDate:                 "LastChangeDate",
	ValidityStartDate:              "ValidityStartDate",
	ValidityEndDate:                "ValidityEndDate",
	ChangeNumber:                   "ChangeNumber",
}

var DataPlatformProductionRoutingProductPlantDatumTableColumns = struct {
	BusinessPartner                string
	Product                        string
	Plant                          string
	ProductionRoutingGroup         string
	ProductionRouting              string
	ProductionRoutingMatlAssgmt    string
	ProductionRtgMatlAssgmtIntVers string
	CreationDate                   string
	LastChangeDate                 string
	ValidityStartDate              string
	ValidityEndDate                string
	ChangeNumber                   string
}{
	BusinessPartner:                "data_platform_production_routing_product_plant_data.BusinessPartner",
	Product:                        "data_platform_production_routing_product_plant_data.Product",
	Plant:                          "data_platform_production_routing_product_plant_data.Plant",
	ProductionRoutingGroup:         "data_platform_production_routing_product_plant_data.ProductionRoutingGroup",
	ProductionRouting:              "data_platform_production_routing_product_plant_data.ProductionRouting",
	ProductionRoutingMatlAssgmt:    "data_platform_production_routing_product_plant_data.ProductionRoutingMatlAssgmt",
	ProductionRtgMatlAssgmtIntVers: "data_platform_production_routing_product_plant_data.ProductionRtgMatlAssgmtIntVers",
	CreationDate:                   "data_platform_production_routing_product_plant_data.CreationDate",
	LastChangeDate:                 "data_platform_production_routing_product_plant_data.LastChangeDate",
	ValidityStartDate:              "data_platform_production_routing_product_plant_data.ValidityStartDate",
	ValidityEndDate:                "data_platform_production_routing_product_plant_data.ValidityEndDate",
	ChangeNumber:                   "data_platform_production_routing_product_plant_data.ChangeNumber",
}

// Generated where

var DataPlatformProductionRoutingProductPlantDatumWhere = struct {
	BusinessPartner                whereHelperint
	Product                        whereHelperstring
	Plant                          whereHelperstring
	ProductionRoutingGroup         whereHelperstring
	ProductionRouting              whereHelperstring
	ProductionRoutingMatlAssgmt    whereHelperstring
	ProductionRtgMatlAssgmtIntVers whereHelperstring
	CreationDate                   whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	ValidityStartDate              whereHelpernull_String
	ValidityEndDate                whereHelpernull_String
	ChangeNumber                   whereHelpernull_String
}{
	BusinessPartner:                whereHelperint{field: "`data_platform_production_routing_product_plant_data`.`BusinessPartner`"},
	Product:                        whereHelperstring{field: "`data_platform_production_routing_product_plant_data`.`Product`"},
	Plant:                          whereHelperstring{field: "`data_platform_production_routing_product_plant_data`.`Plant`"},
	ProductionRoutingGroup:         whereHelperstring{field: "`data_platform_production_routing_product_plant_data`.`ProductionRoutingGroup`"},
	ProductionRouting:              whereHelperstring{field: "`data_platform_production_routing_product_plant_data`.`ProductionRouting`"},
	ProductionRoutingMatlAssgmt:    whereHelperstring{field: "`data_platform_production_routing_product_plant_data`.`ProductionRoutingMatlAssgmt`"},
	ProductionRtgMatlAssgmtIntVers: whereHelperstring{field: "`data_platform_production_routing_product_plant_data`.`ProductionRtgMatlAssgmtIntVers`"},
	CreationDate:                   whereHelpernull_String{field: "`data_platform_production_routing_product_plant_data`.`CreationDate`"},
	LastChangeDate:                 whereHelpernull_String{field: "`data_platform_production_routing_product_plant_data`.`LastChangeDate`"},
	ValidityStartDate:              whereHelpernull_String{field: "`data_platform_production_routing_product_plant_data`.`ValidityStartDate`"},
	ValidityEndDate:                whereHelpernull_String{field: "`data_platform_production_routing_product_plant_data`.`ValidityEndDate`"},
	ChangeNumber:                   whereHelpernull_String{field: "`data_platform_production_routing_product_plant_data`.`ChangeNumber`"},
}

// DataPlatformProductionRoutingProductPlantDatumRels is where relationship names are stored.
var DataPlatformProductionRoutingProductPlantDatumRels = struct {
}{}

// dataPlatformProductionRoutingProductPlantDatumR is where relationships are stored.
type dataPlatformProductionRoutingProductPlantDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionRoutingProductPlantDatumR) NewStruct() *dataPlatformProductionRoutingProductPlantDatumR {
	return &dataPlatformProductionRoutingProductPlantDatumR{}
}

// dataPlatformProductionRoutingProductPlantDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionRoutingProductPlantDatumL struct{}

var (
	dataPlatformProductionRoutingProductPlantDatumAllColumns            = []string{"BusinessPartner", "Product", "Plant", "ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingMatlAssgmt", "ProductionRtgMatlAssgmtIntVers", "CreationDate", "LastChangeDate", "ValidityStartDate", "ValidityEndDate", "ChangeNumber"}
	dataPlatformProductionRoutingProductPlantDatumColumnsWithoutDefault = []string{"BusinessPartner", "Product", "Plant", "ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingMatlAssgmt", "ProductionRtgMatlAssgmtIntVers", "CreationDate", "LastChangeDate", "ValidityStartDate", "ValidityEndDate", "ChangeNumber"}
	dataPlatformProductionRoutingProductPlantDatumColumnsWithDefault    = []string{}
	dataPlatformProductionRoutingProductPlantDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Product", "Plant", "ProductionRoutingGroup", "ProductionRouting", "ProductionRoutingMatlAssgmt", "ProductionRtgMatlAssgmtIntVers"}
	dataPlatformProductionRoutingProductPlantDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionRoutingProductPlantDatumSlice is an alias for a slice of pointers to DataPlatformProductionRoutingProductPlantDatum.
	// This should almost always be used instead of []DataPlatformProductionRoutingProductPlantDatum.
	DataPlatformProductionRoutingProductPlantDatumSlice []*DataPlatformProductionRoutingProductPlantDatum

	dataPlatformProductionRoutingProductPlantDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionRoutingProductPlantDatumType                 = reflect.TypeOf(&DataPlatformProductionRoutingProductPlantDatum{})
	dataPlatformProductionRoutingProductPlantDatumMapping              = queries.MakeStructMapping(dataPlatformProductionRoutingProductPlantDatumType)
	dataPlatformProductionRoutingProductPlantDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionRoutingProductPlantDatumType, dataPlatformProductionRoutingProductPlantDatumMapping, dataPlatformProductionRoutingProductPlantDatumPrimaryKeyColumns)
	dataPlatformProductionRoutingProductPlantDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionRoutingProductPlantDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionRoutingProductPlantDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionRoutingProductPlantDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionRoutingProductPlantDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionRoutingProductPlantDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionRoutingProductPlantDatum record from the query.
func (q dataPlatformProductionRoutingProductPlantDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionRoutingProductPlantDatum, error) {
	o := &DataPlatformProductionRoutingProductPlantDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_routing_product_plant_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionRoutingProductPlantDatum records from the query.
func (q dataPlatformProductionRoutingProductPlantDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionRoutingProductPlantDatumSlice, error) {
	var o []*DataPlatformProductionRoutingProductPlantDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionRoutingProductPlantDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionRoutingProductPlantDatum records in the query.
func (q dataPlatformProductionRoutingProductPlantDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_routing_product_plant_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionRoutingProductPlantDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_routing_product_plant_data exists")
	}

	return count > 0, nil
}

// DataPlatformProductionRoutingProductPlantData retrieves all the records using an executor.
func DataPlatformProductionRoutingProductPlantData(mods ...qm.QueryMod) dataPlatformProductionRoutingProductPlantDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_routing_product_plant_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_routing_product_plant_data`.*"})
	}

	return dataPlatformProductionRoutingProductPlantDatumQuery{q}
}

// FindDataPlatformProductionRoutingProductPlantDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionRoutingProductPlantDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, product string, plant string, productionRoutingGroup string, productionRouting string, productionRoutingMatlAssgmt string, productionRtgMatlAssgmtIntVers string, selectCols ...string) (*DataPlatformProductionRoutingProductPlantDatum, error) {
	dataPlatformProductionRoutingProductPlantDatumObj := &DataPlatformProductionRoutingProductPlantDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_routing_product_plant_data` where `BusinessPartner`=? AND `Product`=? AND `Plant`=? AND `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingMatlAssgmt`=? AND `ProductionRtgMatlAssgmtIntVers`=?", sel,
	)

	q := queries.Raw(query, businessPartner, product, plant, productionRoutingGroup, productionRouting, productionRoutingMatlAssgmt, productionRtgMatlAssgmtIntVers)

	err := q.Bind(ctx, exec, dataPlatformProductionRoutingProductPlantDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_routing_product_plant_data")
	}

	return dataPlatformProductionRoutingProductPlantDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionRoutingProductPlantDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_routing_product_plant_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionRoutingProductPlantDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionRoutingProductPlantDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionRoutingProductPlantDatumInsertCache[key]
	dataPlatformProductionRoutingProductPlantDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionRoutingProductPlantDatumAllColumns,
			dataPlatformProductionRoutingProductPlantDatumColumnsWithDefault,
			dataPlatformProductionRoutingProductPlantDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionRoutingProductPlantDatumType, dataPlatformProductionRoutingProductPlantDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionRoutingProductPlantDatumType, dataPlatformProductionRoutingProductPlantDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_routing_product_plant_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_routing_product_plant_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_routing_product_plant_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionRoutingProductPlantDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_routing_product_plant_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Product,
		o.Plant,
		o.ProductionRoutingGroup,
		o.ProductionRouting,
		o.ProductionRoutingMatlAssgmt,
		o.ProductionRtgMatlAssgmtIntVers,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_routing_product_plant_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionRoutingProductPlantDatumInsertCacheMut.Lock()
		dataPlatformProductionRoutingProductPlantDatumInsertCache[key] = cache
		dataPlatformProductionRoutingProductPlantDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionRoutingProductPlantDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionRoutingProductPlantDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionRoutingProductPlantDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionRoutingProductPlantDatumUpdateCache[key]
	dataPlatformProductionRoutingProductPlantDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionRoutingProductPlantDatumAllColumns,
			dataPlatformProductionRoutingProductPlantDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_routing_product_plant_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_routing_product_plant_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionRoutingProductPlantDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionRoutingProductPlantDatumType, dataPlatformProductionRoutingProductPlantDatumMapping, append(wl, dataPlatformProductionRoutingProductPlantDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_routing_product_plant_data row")
	}

	if !cached {
		dataPlatformProductionRoutingProductPlantDatumUpdateCacheMut.Lock()
		dataPlatformProductionRoutingProductPlantDatumUpdateCache[key] = cache
		dataPlatformProductionRoutingProductPlantDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionRoutingProductPlantDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_routing_product_plant_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionRoutingProductPlantDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionRoutingProductPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_routing_product_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionRoutingProductPlantDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionRoutingProductPlantDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionRoutingProductPlantDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionRoutingProductPlantDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_routing_product_plant_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionRoutingProductPlantDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionRoutingProductPlantDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionRoutingProductPlantDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionRoutingProductPlantDatumUpsertCache[key]
	dataPlatformProductionRoutingProductPlantDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionRoutingProductPlantDatumAllColumns,
			dataPlatformProductionRoutingProductPlantDatumColumnsWithDefault,
			dataPlatformProductionRoutingProductPlantDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionRoutingProductPlantDatumAllColumns,
			dataPlatformProductionRoutingProductPlantDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_routing_product_plant_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_routing_product_plant_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_routing_product_plant_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionRoutingProductPlantDatumType, dataPlatformProductionRoutingProductPlantDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionRoutingProductPlantDatumType, dataPlatformProductionRoutingProductPlantDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_routing_product_plant_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionRoutingProductPlantDatumType, dataPlatformProductionRoutingProductPlantDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_routing_product_plant_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_routing_product_plant_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionRoutingProductPlantDatumUpsertCacheMut.Lock()
		dataPlatformProductionRoutingProductPlantDatumUpsertCache[key] = cache
		dataPlatformProductionRoutingProductPlantDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionRoutingProductPlantDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionRoutingProductPlantDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionRoutingProductPlantDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionRoutingProductPlantDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_routing_product_plant_data` WHERE `BusinessPartner`=? AND `Product`=? AND `Plant`=? AND `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingMatlAssgmt`=? AND `ProductionRtgMatlAssgmtIntVers`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_routing_product_plant_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionRoutingProductPlantDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionRoutingProductPlantDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_routing_product_plant_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionRoutingProductPlantDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionRoutingProductPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_routing_product_plant_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionRoutingProductPlantDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionRoutingProductPlantDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionRoutingProductPlantDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionRoutingProductPlantDatum(ctx, exec, o.BusinessPartner, o.Product, o.Plant, o.ProductionRoutingGroup, o.ProductionRouting, o.ProductionRoutingMatlAssgmt, o.ProductionRtgMatlAssgmtIntVers)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionRoutingProductPlantDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionRoutingProductPlantDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionRoutingProductPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_routing_product_plant_data`.* FROM `data_platform_production_routing_product_plant_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionRoutingProductPlantDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionRoutingProductPlantDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionRoutingProductPlantDatumExists checks if the DataPlatformProductionRoutingProductPlantDatum row exists.
func DataPlatformProductionRoutingProductPlantDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, product string, plant string, productionRoutingGroup string, productionRouting string, productionRoutingMatlAssgmt string, productionRtgMatlAssgmtIntVers string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_routing_product_plant_data` where `BusinessPartner`=? AND `Product`=? AND `Plant`=? AND `ProductionRoutingGroup`=? AND `ProductionRouting`=? AND `ProductionRoutingMatlAssgmt`=? AND `ProductionRtgMatlAssgmtIntVers`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, product, plant, productionRoutingGroup, productionRouting, productionRoutingMatlAssgmt, productionRtgMatlAssgmtIntVers)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, product, plant, productionRoutingGroup, productionRouting, productionRoutingMatlAssgmt, productionRtgMatlAssgmtIntVers)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_routing_product_plant_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionRoutingProductPlantDatum row exists.
func (o *DataPlatformProductionRoutingProductPlantDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionRoutingProductPlantDatumExists(ctx, exec, o.BusinessPartner, o.Product, o.Plant, o.ProductionRoutingGroup, o.ProductionRouting, o.ProductionRoutingMatlAssgmt, o.ProductionRtgMatlAssgmtIntVers)
}
