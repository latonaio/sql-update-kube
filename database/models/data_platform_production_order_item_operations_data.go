// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionOrderItemOperationsDatum is an object representing the database table.
type DataPlatformProductionOrderItemOperationsDatum struct {
	ProductionOrder                      int          `boil:"ProductionOrder" json:"ProductionOrder" toml:"ProductionOrder" yaml:"ProductionOrder"`
	ProductionOrderItem                  int          `boil:"ProductionOrderItem" json:"ProductionOrderItem" toml:"ProductionOrderItem" yaml:"ProductionOrderItem"`
	Operations                           int          `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	OperationsItem                       int          `boil:"OperationsItem" json:"OperationsItem" toml:"OperationsItem" yaml:"OperationsItem"`
	Sequence                             int          `boil:"Sequence" json:"Sequence" toml:"Sequence" yaml:"Sequence"`
	OperationsText                       null.String  `boil:"OperationsText" json:"OperationsText,omitempty" toml:"OperationsText" yaml:"OperationsText,omitempty"`
	SequenceText                         null.String  `boil:"SequenceText" json:"SequenceText,omitempty" toml:"SequenceText" yaml:"SequenceText,omitempty"`
	OperationIsReleased                  null.Bool    `boil:"OperationIsReleased" json:"OperationIsReleased,omitempty" toml:"OperationIsReleased" yaml:"OperationIsReleased,omitempty"`
	OperationIsPartiallyConfirmed        null.Bool    `boil:"OperationIsPartiallyConfirmed" json:"OperationIsPartiallyConfirmed,omitempty" toml:"OperationIsPartiallyConfirmed" yaml:"OperationIsPartiallyConfirmed,omitempty"`
	OperationIsConfirmed                 null.Bool    `boil:"OperationIsConfirmed" json:"OperationIsConfirmed,omitempty" toml:"OperationIsConfirmed" yaml:"OperationIsConfirmed,omitempty"`
	OperationIsClosed                    null.Bool    `boil:"OperationIsClosed" json:"OperationIsClosed,omitempty" toml:"OperationIsClosed" yaml:"OperationIsClosed,omitempty"`
	OperationIsMarkedForDeletion         null.Bool    `boil:"OperationIsMarkedForDeletion" json:"OperationIsMarkedForDeletion,omitempty" toml:"OperationIsMarkedForDeletion" yaml:"OperationIsMarkedForDeletion,omitempty"`
	ProductionPlant                      null.String  `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	WorkCenter                           null.Int     `boil:"WorkCenter" json:"WorkCenter,omitempty" toml:"WorkCenter" yaml:"WorkCenter,omitempty"`
	OperationErlstSchedldExecStrtDte     null.String  `boil:"OperationErlstSchedldExecStrtDte" json:"OperationErlstSchedldExecStrtDte,omitempty" toml:"OperationErlstSchedldExecStrtDte" yaml:"OperationErlstSchedldExecStrtDte,omitempty"`
	OperationErlstSchedldExecStrtTme     null.String  `boil:"OperationErlstSchedldExecStrtTme" json:"OperationErlstSchedldExecStrtTme,omitempty" toml:"OperationErlstSchedldExecStrtTme" yaml:"OperationErlstSchedldExecStrtTme,omitempty"`
	OperationErlstSchedldExecEndDate     null.String  `boil:"OperationErlstSchedldExecEndDate" json:"OperationErlstSchedldExecEndDate,omitempty" toml:"OperationErlstSchedldExecEndDate" yaml:"OperationErlstSchedldExecEndDate,omitempty"`
	OperationErlstSchedldExecEndTme      null.String  `boil:"OperationErlstSchedldExecEndTme" json:"OperationErlstSchedldExecEndTme,omitempty" toml:"OperationErlstSchedldExecEndTme" yaml:"OperationErlstSchedldExecEndTme,omitempty"`
	OperationActualExecutionStartDate    null.String  `boil:"OperationActualExecutionStartDate" json:"OperationActualExecutionStartDate,omitempty" toml:"OperationActualExecutionStartDate" yaml:"OperationActualExecutionStartDate,omitempty"`
	OperationActualExecutionStartTime    null.String  `boil:"OperationActualExecutionStartTime" json:"OperationActualExecutionStartTime,omitempty" toml:"OperationActualExecutionStartTime" yaml:"OperationActualExecutionStartTime,omitempty"`
	OperationActualExecutionEndDate      null.String  `boil:"OperationActualExecutionEndDate" json:"OperationActualExecutionEndDate,omitempty" toml:"OperationActualExecutionEndDate" yaml:"OperationActualExecutionEndDate,omitempty"`
	OperationActualExecutionEndTime      null.String  `boil:"OperationActualExecutionEndTime" json:"OperationActualExecutionEndTime,omitempty" toml:"OperationActualExecutionEndTime" yaml:"OperationActualExecutionEndTime,omitempty"`
	ErlstSchedldExecDurnInWorkdays       null.String  `boil:"ErlstSchedldExecDurnInWorkdays" json:"ErlstSchedldExecDurnInWorkdays,omitempty" toml:"ErlstSchedldExecDurnInWorkdays" yaml:"ErlstSchedldExecDurnInWorkdays,omitempty"`
	OperationActualExecutionDays         null.String  `boil:"OperationActualExecutionDays" json:"OperationActualExecutionDays,omitempty" toml:"OperationActualExecutionDays" yaml:"OperationActualExecutionDays,omitempty"`
	OperationUnit                        null.String  `boil:"OperationUnit" json:"OperationUnit,omitempty" toml:"OperationUnit" yaml:"OperationUnit,omitempty"`
	OperationPlannedTotalQuantity        null.Float32 `boil:"OperationPlannedTotalQuantity" json:"OperationPlannedTotalQuantity,omitempty" toml:"OperationPlannedTotalQuantity" yaml:"OperationPlannedTotalQuantity,omitempty"`
	OperationTotalConfirmedYieldQuantity null.Float32 `boil:"OperationTotalConfirmedYieldQuantity" json:"OperationTotalConfirmedYieldQuantity,omitempty" toml:"OperationTotalConfirmedYieldQuantity" yaml:"OperationTotalConfirmedYieldQuantity,omitempty"`

	R *dataPlatformProductionOrderItemOperationsDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionOrderItemOperationsDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionOrderItemOperationsDatumColumns = struct {
	ProductionOrder                      string
	ProductionOrderItem                  string
	Operations                           string
	OperationsItem                       string
	Sequence                             string
	OperationsText                       string
	SequenceText                         string
	OperationIsReleased                  string
	OperationIsPartiallyConfirmed        string
	OperationIsConfirmed                 string
	OperationIsClosed                    string
	OperationIsMarkedForDeletion         string
	ProductionPlant                      string
	WorkCenter                           string
	OperationErlstSchedldExecStrtDte     string
	OperationErlstSchedldExecStrtTme     string
	OperationErlstSchedldExecEndDate     string
	OperationErlstSchedldExecEndTme      string
	OperationActualExecutionStartDate    string
	OperationActualExecutionStartTime    string
	OperationActualExecutionEndDate      string
	OperationActualExecutionEndTime      string
	ErlstSchedldExecDurnInWorkdays       string
	OperationActualExecutionDays         string
	OperationUnit                        string
	OperationPlannedTotalQuantity        string
	OperationTotalConfirmedYieldQuantity string
}{
	ProductionOrder:                      "ProductionOrder",
	ProductionOrderItem:                  "ProductionOrderItem",
	Operations:                           "Operations",
	OperationsItem:                       "OperationsItem",
	Sequence:                             "Sequence",
	OperationsText:                       "OperationsText",
	SequenceText:                         "SequenceText",
	OperationIsReleased:                  "OperationIsReleased",
	OperationIsPartiallyConfirmed:        "OperationIsPartiallyConfirmed",
	OperationIsConfirmed:                 "OperationIsConfirmed",
	OperationIsClosed:                    "OperationIsClosed",
	OperationIsMarkedForDeletion:         "OperationIsMarkedForDeletion",
	ProductionPlant:                      "ProductionPlant",
	WorkCenter:                           "WorkCenter",
	OperationErlstSchedldExecStrtDte:     "OperationErlstSchedldExecStrtDte",
	OperationErlstSchedldExecStrtTme:     "OperationErlstSchedldExecStrtTme",
	OperationErlstSchedldExecEndDate:     "OperationErlstSchedldExecEndDate",
	OperationErlstSchedldExecEndTme:      "OperationErlstSchedldExecEndTme",
	OperationActualExecutionStartDate:    "OperationActualExecutionStartDate",
	OperationActualExecutionStartTime:    "OperationActualExecutionStartTime",
	OperationActualExecutionEndDate:      "OperationActualExecutionEndDate",
	OperationActualExecutionEndTime:      "OperationActualExecutionEndTime",
	ErlstSchedldExecDurnInWorkdays:       "ErlstSchedldExecDurnInWorkdays",
	OperationActualExecutionDays:         "OperationActualExecutionDays",
	OperationUnit:                        "OperationUnit",
	OperationPlannedTotalQuantity:        "OperationPlannedTotalQuantity",
	OperationTotalConfirmedYieldQuantity: "OperationTotalConfirmedYieldQuantity",
}

var DataPlatformProductionOrderItemOperationsDatumTableColumns = struct {
	ProductionOrder                      string
	ProductionOrderItem                  string
	Operations                           string
	OperationsItem                       string
	Sequence                             string
	OperationsText                       string
	SequenceText                         string
	OperationIsReleased                  string
	OperationIsPartiallyConfirmed        string
	OperationIsConfirmed                 string
	OperationIsClosed                    string
	OperationIsMarkedForDeletion         string
	ProductionPlant                      string
	WorkCenter                           string
	OperationErlstSchedldExecStrtDte     string
	OperationErlstSchedldExecStrtTme     string
	OperationErlstSchedldExecEndDate     string
	OperationErlstSchedldExecEndTme      string
	OperationActualExecutionStartDate    string
	OperationActualExecutionStartTime    string
	OperationActualExecutionEndDate      string
	OperationActualExecutionEndTime      string
	ErlstSchedldExecDurnInWorkdays       string
	OperationActualExecutionDays         string
	OperationUnit                        string
	OperationPlannedTotalQuantity        string
	OperationTotalConfirmedYieldQuantity string
}{
	ProductionOrder:                      "data_platform_production_order_item_operations_data.ProductionOrder",
	ProductionOrderItem:                  "data_platform_production_order_item_operations_data.ProductionOrderItem",
	Operations:                           "data_platform_production_order_item_operations_data.Operations",
	OperationsItem:                       "data_platform_production_order_item_operations_data.OperationsItem",
	Sequence:                             "data_platform_production_order_item_operations_data.Sequence",
	OperationsText:                       "data_platform_production_order_item_operations_data.OperationsText",
	SequenceText:                         "data_platform_production_order_item_operations_data.SequenceText",
	OperationIsReleased:                  "data_platform_production_order_item_operations_data.OperationIsReleased",
	OperationIsPartiallyConfirmed:        "data_platform_production_order_item_operations_data.OperationIsPartiallyConfirmed",
	OperationIsConfirmed:                 "data_platform_production_order_item_operations_data.OperationIsConfirmed",
	OperationIsClosed:                    "data_platform_production_order_item_operations_data.OperationIsClosed",
	OperationIsMarkedForDeletion:         "data_platform_production_order_item_operations_data.OperationIsMarkedForDeletion",
	ProductionPlant:                      "data_platform_production_order_item_operations_data.ProductionPlant",
	WorkCenter:                           "data_platform_production_order_item_operations_data.WorkCenter",
	OperationErlstSchedldExecStrtDte:     "data_platform_production_order_item_operations_data.OperationErlstSchedldExecStrtDte",
	OperationErlstSchedldExecStrtTme:     "data_platform_production_order_item_operations_data.OperationErlstSchedldExecStrtTme",
	OperationErlstSchedldExecEndDate:     "data_platform_production_order_item_operations_data.OperationErlstSchedldExecEndDate",
	OperationErlstSchedldExecEndTme:      "data_platform_production_order_item_operations_data.OperationErlstSchedldExecEndTme",
	OperationActualExecutionStartDate:    "data_platform_production_order_item_operations_data.OperationActualExecutionStartDate",
	OperationActualExecutionStartTime:    "data_platform_production_order_item_operations_data.OperationActualExecutionStartTime",
	OperationActualExecutionEndDate:      "data_platform_production_order_item_operations_data.OperationActualExecutionEndDate",
	OperationActualExecutionEndTime:      "data_platform_production_order_item_operations_data.OperationActualExecutionEndTime",
	ErlstSchedldExecDurnInWorkdays:       "data_platform_production_order_item_operations_data.ErlstSchedldExecDurnInWorkdays",
	OperationActualExecutionDays:         "data_platform_production_order_item_operations_data.OperationActualExecutionDays",
	OperationUnit:                        "data_platform_production_order_item_operations_data.OperationUnit",
	OperationPlannedTotalQuantity:        "data_platform_production_order_item_operations_data.OperationPlannedTotalQuantity",
	OperationTotalConfirmedYieldQuantity: "data_platform_production_order_item_operations_data.OperationTotalConfirmedYieldQuantity",
}

// Generated where

var DataPlatformProductionOrderItemOperationsDatumWhere = struct {
	ProductionOrder                      whereHelperint
	ProductionOrderItem                  whereHelperint
	Operations                           whereHelperint
	OperationsItem                       whereHelperint
	Sequence                             whereHelperint
	OperationsText                       whereHelpernull_String
	SequenceText                         whereHelpernull_String
	OperationIsReleased                  whereHelpernull_Bool
	OperationIsPartiallyConfirmed        whereHelpernull_Bool
	OperationIsConfirmed                 whereHelpernull_Bool
	OperationIsClosed                    whereHelpernull_Bool
	OperationIsMarkedForDeletion         whereHelpernull_Bool
	ProductionPlant                      whereHelpernull_String
	WorkCenter                           whereHelpernull_Int
	OperationErlstSchedldExecStrtDte     whereHelpernull_String
	OperationErlstSchedldExecStrtTme     whereHelpernull_String
	OperationErlstSchedldExecEndDate     whereHelpernull_String
	OperationErlstSchedldExecEndTme      whereHelpernull_String
	OperationActualExecutionStartDate    whereHelpernull_String
	OperationActualExecutionStartTime    whereHelpernull_String
	OperationActualExecutionEndDate      whereHelpernull_String
	OperationActualExecutionEndTime      whereHelpernull_String
	ErlstSchedldExecDurnInWorkdays       whereHelpernull_String
	OperationActualExecutionDays         whereHelpernull_String
	OperationUnit                        whereHelpernull_String
	OperationPlannedTotalQuantity        whereHelpernull_Float32
	OperationTotalConfirmedYieldQuantity whereHelpernull_Float32
}{
	ProductionOrder:                      whereHelperint{field: "`data_platform_production_order_item_operations_data`.`ProductionOrder`"},
	ProductionOrderItem:                  whereHelperint{field: "`data_platform_production_order_item_operations_data`.`ProductionOrderItem`"},
	Operations:                           whereHelperint{field: "`data_platform_production_order_item_operations_data`.`Operations`"},
	OperationsItem:                       whereHelperint{field: "`data_platform_production_order_item_operations_data`.`OperationsItem`"},
	Sequence:                             whereHelperint{field: "`data_platform_production_order_item_operations_data`.`Sequence`"},
	OperationsText:                       whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`OperationsText`"},
	SequenceText:                         whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`SequenceText`"},
	OperationIsReleased:                  whereHelpernull_Bool{field: "`data_platform_production_order_item_operations_data`.`OperationIsReleased`"},
	OperationIsPartiallyConfirmed:        whereHelpernull_Bool{field: "`data_platform_production_order_item_operations_data`.`OperationIsPartiallyConfirmed`"},
	OperationIsConfirmed:                 whereHelpernull_Bool{field: "`data_platform_production_order_item_operations_data`.`OperationIsConfirmed`"},
	OperationIsClosed:                    whereHelpernull_Bool{field: "`data_platform_production_order_item_operations_data`.`OperationIsClosed`"},
	OperationIsMarkedForDeletion:         whereHelpernull_Bool{field: "`data_platform_production_order_item_operations_data`.`OperationIsMarkedForDeletion`"},
	ProductionPlant:                      whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`ProductionPlant`"},
	WorkCenter:                           whereHelpernull_Int{field: "`data_platform_production_order_item_operations_data`.`WorkCenter`"},
	OperationErlstSchedldExecStrtDte:     whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`OperationErlstSchedldExecStrtDte`"},
	OperationErlstSchedldExecStrtTme:     whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`OperationErlstSchedldExecStrtTme`"},
	OperationErlstSchedldExecEndDate:     whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`OperationErlstSchedldExecEndDate`"},
	OperationErlstSchedldExecEndTme:      whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`OperationErlstSchedldExecEndTme`"},
	OperationActualExecutionStartDate:    whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`OperationActualExecutionStartDate`"},
	OperationActualExecutionStartTime:    whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`OperationActualExecutionStartTime`"},
	OperationActualExecutionEndDate:      whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`OperationActualExecutionEndDate`"},
	OperationActualExecutionEndTime:      whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`OperationActualExecutionEndTime`"},
	ErlstSchedldExecDurnInWorkdays:       whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`ErlstSchedldExecDurnInWorkdays`"},
	OperationActualExecutionDays:         whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`OperationActualExecutionDays`"},
	OperationUnit:                        whereHelpernull_String{field: "`data_platform_production_order_item_operations_data`.`OperationUnit`"},
	OperationPlannedTotalQuantity:        whereHelpernull_Float32{field: "`data_platform_production_order_item_operations_data`.`OperationPlannedTotalQuantity`"},
	OperationTotalConfirmedYieldQuantity: whereHelpernull_Float32{field: "`data_platform_production_order_item_operations_data`.`OperationTotalConfirmedYieldQuantity`"},
}

// DataPlatformProductionOrderItemOperationsDatumRels is where relationship names are stored.
var DataPlatformProductionOrderItemOperationsDatumRels = struct {
}{}

// dataPlatformProductionOrderItemOperationsDatumR is where relationships are stored.
type dataPlatformProductionOrderItemOperationsDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionOrderItemOperationsDatumR) NewStruct() *dataPlatformProductionOrderItemOperationsDatumR {
	return &dataPlatformProductionOrderItemOperationsDatumR{}
}

// dataPlatformProductionOrderItemOperationsDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionOrderItemOperationsDatumL struct{}

var (
	dataPlatformProductionOrderItemOperationsDatumAllColumns            = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "Sequence", "OperationsText", "SequenceText", "OperationIsReleased", "OperationIsPartiallyConfirmed", "OperationIsConfirmed", "OperationIsClosed", "OperationIsMarkedForDeletion", "ProductionPlant", "WorkCenter", "OperationErlstSchedldExecStrtDte", "OperationErlstSchedldExecStrtTme", "OperationErlstSchedldExecEndDate", "OperationErlstSchedldExecEndTme", "OperationActualExecutionStartDate", "OperationActualExecutionStartTime", "OperationActualExecutionEndDate", "OperationActualExecutionEndTime", "ErlstSchedldExecDurnInWorkdays", "OperationActualExecutionDays", "OperationUnit", "OperationPlannedTotalQuantity", "OperationTotalConfirmedYieldQuantity"}
	dataPlatformProductionOrderItemOperationsDatumColumnsWithoutDefault = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "Sequence", "OperationsText", "SequenceText", "OperationIsReleased", "OperationIsPartiallyConfirmed", "OperationIsConfirmed", "OperationIsClosed", "OperationIsMarkedForDeletion", "ProductionPlant", "WorkCenter", "OperationErlstSchedldExecStrtDte", "OperationErlstSchedldExecStrtTme", "OperationErlstSchedldExecEndDate", "OperationErlstSchedldExecEndTme", "OperationActualExecutionStartDate", "OperationActualExecutionStartTime", "OperationActualExecutionEndDate", "OperationActualExecutionEndTime", "ErlstSchedldExecDurnInWorkdays", "OperationActualExecutionDays", "OperationUnit", "OperationPlannedTotalQuantity", "OperationTotalConfirmedYieldQuantity"}
	dataPlatformProductionOrderItemOperationsDatumColumnsWithDefault    = []string{}
	dataPlatformProductionOrderItemOperationsDatumPrimaryKeyColumns     = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem"}
	dataPlatformProductionOrderItemOperationsDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionOrderItemOperationsDatumSlice is an alias for a slice of pointers to DataPlatformProductionOrderItemOperationsDatum.
	// This should almost always be used instead of []DataPlatformProductionOrderItemOperationsDatum.
	DataPlatformProductionOrderItemOperationsDatumSlice []*DataPlatformProductionOrderItemOperationsDatum

	dataPlatformProductionOrderItemOperationsDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionOrderItemOperationsDatumType                 = reflect.TypeOf(&DataPlatformProductionOrderItemOperationsDatum{})
	dataPlatformProductionOrderItemOperationsDatumMapping              = queries.MakeStructMapping(dataPlatformProductionOrderItemOperationsDatumType)
	dataPlatformProductionOrderItemOperationsDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionOrderItemOperationsDatumType, dataPlatformProductionOrderItemOperationsDatumMapping, dataPlatformProductionOrderItemOperationsDatumPrimaryKeyColumns)
	dataPlatformProductionOrderItemOperationsDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemOperationsDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionOrderItemOperationsDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemOperationsDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionOrderItemOperationsDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemOperationsDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionOrderItemOperationsDatum record from the query.
func (q dataPlatformProductionOrderItemOperationsDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionOrderItemOperationsDatum, error) {
	o := &DataPlatformProductionOrderItemOperationsDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_order_item_operations_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionOrderItemOperationsDatum records from the query.
func (q dataPlatformProductionOrderItemOperationsDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionOrderItemOperationsDatumSlice, error) {
	var o []*DataPlatformProductionOrderItemOperationsDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionOrderItemOperationsDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionOrderItemOperationsDatum records in the query.
func (q dataPlatformProductionOrderItemOperationsDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_order_item_operations_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionOrderItemOperationsDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_order_item_operations_data exists")
	}

	return count > 0, nil
}

// DataPlatformProductionOrderItemOperationsData retrieves all the records using an executor.
func DataPlatformProductionOrderItemOperationsData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationsDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_order_item_operations_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_order_item_operations_data`.*"})
	}

	return dataPlatformProductionOrderItemOperationsDatumQuery{q}
}

// FindDataPlatformProductionOrderItemOperationsDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionOrderItemOperationsDatum(ctx context.Context, exec boil.ContextExecutor, productionOrder int, productionOrderItem int, operations int, operationsItem int, selectCols ...string) (*DataPlatformProductionOrderItemOperationsDatum, error) {
	dataPlatformProductionOrderItemOperationsDatumObj := &DataPlatformProductionOrderItemOperationsDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_order_item_operations_data` where `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=?", sel,
	)

	q := queries.Raw(query, productionOrder, productionOrderItem, operations, operationsItem)

	err := q.Bind(ctx, exec, dataPlatformProductionOrderItemOperationsDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_order_item_operations_data")
	}

	return dataPlatformProductionOrderItemOperationsDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionOrderItemOperationsDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_item_operations_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderItemOperationsDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionOrderItemOperationsDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemOperationsDatumInsertCache[key]
	dataPlatformProductionOrderItemOperationsDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionOrderItemOperationsDatumAllColumns,
			dataPlatformProductionOrderItemOperationsDatumColumnsWithDefault,
			dataPlatformProductionOrderItemOperationsDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationsDatumType, dataPlatformProductionOrderItemOperationsDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationsDatumType, dataPlatformProductionOrderItemOperationsDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_order_item_operations_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_order_item_operations_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_order_item_operations_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationsDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_order_item_operations_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionOrder,
		o.ProductionOrderItem,
		o.Operations,
		o.OperationsItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_item_operations_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderItemOperationsDatumInsertCacheMut.Lock()
		dataPlatformProductionOrderItemOperationsDatumInsertCache[key] = cache
		dataPlatformProductionOrderItemOperationsDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionOrderItemOperationsDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionOrderItemOperationsDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionOrderItemOperationsDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemOperationsDatumUpdateCache[key]
	dataPlatformProductionOrderItemOperationsDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionOrderItemOperationsDatumAllColumns,
			dataPlatformProductionOrderItemOperationsDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_order_item_operations_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_order_item_operations_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationsDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationsDatumType, dataPlatformProductionOrderItemOperationsDatumMapping, append(wl, dataPlatformProductionOrderItemOperationsDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_order_item_operations_data row")
	}

	if !cached {
		dataPlatformProductionOrderItemOperationsDatumUpdateCacheMut.Lock()
		dataPlatformProductionOrderItemOperationsDatumUpdateCache[key] = cache
		dataPlatformProductionOrderItemOperationsDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionOrderItemOperationsDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_order_item_operations_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionOrderItemOperationsDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemOperationsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_order_item_operations_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemOperationsDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionOrderItemOperationsDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionOrderItemOperationsDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionOrderItemOperationsDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_item_operations_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderItemOperationsDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionOrderItemOperationsDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionOrderItemOperationsDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemOperationsDatumUpsertCache[key]
	dataPlatformProductionOrderItemOperationsDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionOrderItemOperationsDatumAllColumns,
			dataPlatformProductionOrderItemOperationsDatumColumnsWithDefault,
			dataPlatformProductionOrderItemOperationsDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionOrderItemOperationsDatumAllColumns,
			dataPlatformProductionOrderItemOperationsDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_order_item_operations_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_order_item_operations_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_order_item_operations_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationsDatumType, dataPlatformProductionOrderItemOperationsDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationsDatumType, dataPlatformProductionOrderItemOperationsDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_order_item_operations_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionOrderItemOperationsDatumType, dataPlatformProductionOrderItemOperationsDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_order_item_operations_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_item_operations_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderItemOperationsDatumUpsertCacheMut.Lock()
		dataPlatformProductionOrderItemOperationsDatumUpsertCache[key] = cache
		dataPlatformProductionOrderItemOperationsDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionOrderItemOperationsDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionOrderItemOperationsDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionOrderItemOperationsDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionOrderItemOperationsDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_order_item_operations_data` WHERE `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_order_item_operations_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionOrderItemOperationsDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionOrderItemOperationsDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_order_item_operations_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionOrderItemOperationsDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemOperationsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_order_item_operations_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemOperationsDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionOrderItemOperationsDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionOrderItemOperationsDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionOrderItemOperationsDatum(ctx, exec, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionOrderItemOperationsDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionOrderItemOperationsDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemOperationsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_order_item_operations_data`.* FROM `data_platform_production_order_item_operations_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemOperationsDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionOrderItemOperationsDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionOrderItemOperationsDatumExists checks if the DataPlatformProductionOrderItemOperationsDatum row exists.
func DataPlatformProductionOrderItemOperationsDatumExists(ctx context.Context, exec boil.ContextExecutor, productionOrder int, productionOrderItem int, operations int, operationsItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_order_item_operations_data` where `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionOrder, productionOrderItem, operations, operationsItem)
	}
	row := exec.QueryRowContext(ctx, sql, productionOrder, productionOrderItem, operations, operationsItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_order_item_operations_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionOrderItemOperationsDatum row exists.
func (o *DataPlatformProductionOrderItemOperationsDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionOrderItemOperationsDatumExists(ctx, exec, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem)
}
