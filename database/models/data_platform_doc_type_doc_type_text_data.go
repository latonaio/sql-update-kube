// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformDocTypeDocTypeTextDatum is an object representing the database table.
type DataPlatformDocTypeDocTypeTextDatum struct {
	DocType     string      `boil:"DocType" json:"DocType" toml:"DocType" yaml:"DocType"`
	Language    string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	DocTypeName null.String `boil:"DocTypeName" json:"DocTypeName,omitempty" toml:"DocTypeName" yaml:"DocTypeName,omitempty"`

	R *dataPlatformDocTypeDocTypeTextDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformDocTypeDocTypeTextDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformDocTypeDocTypeTextDatumColumns = struct {
	DocType     string
	Language    string
	DocTypeName string
}{
	DocType:     "DocType",
	Language:    "Language",
	DocTypeName: "DocTypeName",
}

var DataPlatformDocTypeDocTypeTextDatumTableColumns = struct {
	DocType     string
	Language    string
	DocTypeName string
}{
	DocType:     "data_platform_doc_type_doc_type_text_data.DocType",
	Language:    "data_platform_doc_type_doc_type_text_data.Language",
	DocTypeName: "data_platform_doc_type_doc_type_text_data.DocTypeName",
}

// Generated where

var DataPlatformDocTypeDocTypeTextDatumWhere = struct {
	DocType     whereHelperstring
	Language    whereHelperstring
	DocTypeName whereHelpernull_String
}{
	DocType:     whereHelperstring{field: "`data_platform_doc_type_doc_type_text_data`.`DocType`"},
	Language:    whereHelperstring{field: "`data_platform_doc_type_doc_type_text_data`.`Language`"},
	DocTypeName: whereHelpernull_String{field: "`data_platform_doc_type_doc_type_text_data`.`DocTypeName`"},
}

// DataPlatformDocTypeDocTypeTextDatumRels is where relationship names are stored.
var DataPlatformDocTypeDocTypeTextDatumRels = struct {
}{}

// dataPlatformDocTypeDocTypeTextDatumR is where relationships are stored.
type dataPlatformDocTypeDocTypeTextDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformDocTypeDocTypeTextDatumR) NewStruct() *dataPlatformDocTypeDocTypeTextDatumR {
	return &dataPlatformDocTypeDocTypeTextDatumR{}
}

// dataPlatformDocTypeDocTypeTextDatumL is where Load methods for each relationship are stored.
type dataPlatformDocTypeDocTypeTextDatumL struct{}

var (
	dataPlatformDocTypeDocTypeTextDatumAllColumns            = []string{"DocType", "Language", "DocTypeName"}
	dataPlatformDocTypeDocTypeTextDatumColumnsWithoutDefault = []string{"DocType", "Language", "DocTypeName"}
	dataPlatformDocTypeDocTypeTextDatumColumnsWithDefault    = []string{}
	dataPlatformDocTypeDocTypeTextDatumPrimaryKeyColumns     = []string{"DocType", "Language"}
	dataPlatformDocTypeDocTypeTextDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformDocTypeDocTypeTextDatumSlice is an alias for a slice of pointers to DataPlatformDocTypeDocTypeTextDatum.
	// This should almost always be used instead of []DataPlatformDocTypeDocTypeTextDatum.
	DataPlatformDocTypeDocTypeTextDatumSlice []*DataPlatformDocTypeDocTypeTextDatum

	dataPlatformDocTypeDocTypeTextDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformDocTypeDocTypeTextDatumType                 = reflect.TypeOf(&DataPlatformDocTypeDocTypeTextDatum{})
	dataPlatformDocTypeDocTypeTextDatumMapping              = queries.MakeStructMapping(dataPlatformDocTypeDocTypeTextDatumType)
	dataPlatformDocTypeDocTypeTextDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformDocTypeDocTypeTextDatumType, dataPlatformDocTypeDocTypeTextDatumMapping, dataPlatformDocTypeDocTypeTextDatumPrimaryKeyColumns)
	dataPlatformDocTypeDocTypeTextDatumInsertCacheMut       sync.RWMutex
	dataPlatformDocTypeDocTypeTextDatumInsertCache          = make(map[string]insertCache)
	dataPlatformDocTypeDocTypeTextDatumUpdateCacheMut       sync.RWMutex
	dataPlatformDocTypeDocTypeTextDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformDocTypeDocTypeTextDatumUpsertCacheMut       sync.RWMutex
	dataPlatformDocTypeDocTypeTextDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformDocTypeDocTypeTextDatum record from the query.
func (q dataPlatformDocTypeDocTypeTextDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformDocTypeDocTypeTextDatum, error) {
	o := &DataPlatformDocTypeDocTypeTextDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_doc_type_doc_type_text_data")
	}

	return o, nil
}

// All returns all DataPlatformDocTypeDocTypeTextDatum records from the query.
func (q dataPlatformDocTypeDocTypeTextDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformDocTypeDocTypeTextDatumSlice, error) {
	var o []*DataPlatformDocTypeDocTypeTextDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformDocTypeDocTypeTextDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformDocTypeDocTypeTextDatum records in the query.
func (q dataPlatformDocTypeDocTypeTextDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_doc_type_doc_type_text_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformDocTypeDocTypeTextDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_doc_type_doc_type_text_data exists")
	}

	return count > 0, nil
}

// DataPlatformDocTypeDocTypeTextData retrieves all the records using an executor.
func DataPlatformDocTypeDocTypeTextData(mods ...qm.QueryMod) dataPlatformDocTypeDocTypeTextDatumQuery {
	mods = append(mods, qm.From("`data_platform_doc_type_doc_type_text_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_doc_type_doc_type_text_data`.*"})
	}

	return dataPlatformDocTypeDocTypeTextDatumQuery{q}
}

// FindDataPlatformDocTypeDocTypeTextDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformDocTypeDocTypeTextDatum(ctx context.Context, exec boil.ContextExecutor, docType string, language string, selectCols ...string) (*DataPlatformDocTypeDocTypeTextDatum, error) {
	dataPlatformDocTypeDocTypeTextDatumObj := &DataPlatformDocTypeDocTypeTextDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_doc_type_doc_type_text_data` where `DocType`=? AND `Language`=?", sel,
	)

	q := queries.Raw(query, docType, language)

	err := q.Bind(ctx, exec, dataPlatformDocTypeDocTypeTextDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_doc_type_doc_type_text_data")
	}

	return dataPlatformDocTypeDocTypeTextDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformDocTypeDocTypeTextDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_doc_type_doc_type_text_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDocTypeDocTypeTextDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformDocTypeDocTypeTextDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformDocTypeDocTypeTextDatumInsertCache[key]
	dataPlatformDocTypeDocTypeTextDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformDocTypeDocTypeTextDatumAllColumns,
			dataPlatformDocTypeDocTypeTextDatumColumnsWithDefault,
			dataPlatformDocTypeDocTypeTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeTextDatumType, dataPlatformDocTypeDocTypeTextDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeTextDatumType, dataPlatformDocTypeDocTypeTextDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_doc_type_doc_type_text_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_doc_type_doc_type_text_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_doc_type_doc_type_text_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformDocTypeDocTypeTextDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_doc_type_doc_type_text_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DocType,
		o.Language,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_doc_type_doc_type_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDocTypeDocTypeTextDatumInsertCacheMut.Lock()
		dataPlatformDocTypeDocTypeTextDatumInsertCache[key] = cache
		dataPlatformDocTypeDocTypeTextDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformDocTypeDocTypeTextDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformDocTypeDocTypeTextDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformDocTypeDocTypeTextDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformDocTypeDocTypeTextDatumUpdateCache[key]
	dataPlatformDocTypeDocTypeTextDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformDocTypeDocTypeTextDatumAllColumns,
			dataPlatformDocTypeDocTypeTextDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_doc_type_doc_type_text_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_doc_type_doc_type_text_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformDocTypeDocTypeTextDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeTextDatumType, dataPlatformDocTypeDocTypeTextDatumMapping, append(wl, dataPlatformDocTypeDocTypeTextDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_doc_type_doc_type_text_data row")
	}

	if !cached {
		dataPlatformDocTypeDocTypeTextDatumUpdateCacheMut.Lock()
		dataPlatformDocTypeDocTypeTextDatumUpdateCache[key] = cache
		dataPlatformDocTypeDocTypeTextDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformDocTypeDocTypeTextDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_doc_type_doc_type_text_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformDocTypeDocTypeTextDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDocTypeDocTypeTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_doc_type_doc_type_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDocTypeDocTypeTextDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformDocTypeDocTypeTextDatum slice")
	}

	return nil
}

var mySQLDataPlatformDocTypeDocTypeTextDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformDocTypeDocTypeTextDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_doc_type_doc_type_text_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDocTypeDocTypeTextDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformDocTypeDocTypeTextDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformDocTypeDocTypeTextDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformDocTypeDocTypeTextDatumUpsertCache[key]
	dataPlatformDocTypeDocTypeTextDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformDocTypeDocTypeTextDatumAllColumns,
			dataPlatformDocTypeDocTypeTextDatumColumnsWithDefault,
			dataPlatformDocTypeDocTypeTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformDocTypeDocTypeTextDatumAllColumns,
			dataPlatformDocTypeDocTypeTextDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_doc_type_doc_type_text_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_doc_type_doc_type_text_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_doc_type_doc_type_text_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeTextDatumType, dataPlatformDocTypeDocTypeTextDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformDocTypeDocTypeTextDatumType, dataPlatformDocTypeDocTypeTextDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_doc_type_doc_type_text_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformDocTypeDocTypeTextDatumType, dataPlatformDocTypeDocTypeTextDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_doc_type_doc_type_text_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_doc_type_doc_type_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDocTypeDocTypeTextDatumUpsertCacheMut.Lock()
		dataPlatformDocTypeDocTypeTextDatumUpsertCache[key] = cache
		dataPlatformDocTypeDocTypeTextDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformDocTypeDocTypeTextDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformDocTypeDocTypeTextDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformDocTypeDocTypeTextDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformDocTypeDocTypeTextDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_doc_type_doc_type_text_data` WHERE `DocType`=? AND `Language`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_doc_type_doc_type_text_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformDocTypeDocTypeTextDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformDocTypeDocTypeTextDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_doc_type_doc_type_text_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformDocTypeDocTypeTextDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDocTypeDocTypeTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_doc_type_doc_type_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDocTypeDocTypeTextDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformDocTypeDocTypeTextDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformDocTypeDocTypeTextDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformDocTypeDocTypeTextDatum(ctx, exec, o.DocType, o.Language)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformDocTypeDocTypeTextDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformDocTypeDocTypeTextDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDocTypeDocTypeTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_doc_type_doc_type_text_data`.* FROM `data_platform_doc_type_doc_type_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDocTypeDocTypeTextDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformDocTypeDocTypeTextDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformDocTypeDocTypeTextDatumExists checks if the DataPlatformDocTypeDocTypeTextDatum row exists.
func DataPlatformDocTypeDocTypeTextDatumExists(ctx context.Context, exec boil.ContextExecutor, docType string, language string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_doc_type_doc_type_text_data` where `DocType`=? AND `Language`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, docType, language)
	}
	row := exec.QueryRowContext(ctx, sql, docType, language)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_doc_type_doc_type_text_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformDocTypeDocTypeTextDatum row exists.
func (o *DataPlatformDocTypeDocTypeTextDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformDocTypeDocTypeTextDatumExists(ctx, exec, o.DocType, o.Language)
}
