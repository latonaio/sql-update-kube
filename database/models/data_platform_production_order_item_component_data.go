// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionOrderItemComponentDatum is an object representing the database table.
type DataPlatformProductionOrderItemComponentDatum struct {
	ProductionOrder                      int          `boil:"ProductionOrder" json:"ProductionOrder" toml:"ProductionOrder" yaml:"ProductionOrder"`
	ProductionOrderItem                  int          `boil:"ProductionOrderItem" json:"ProductionOrderItem" toml:"ProductionOrderItem" yaml:"ProductionOrderItem"`
	Operations                           int          `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	OperationsItem                       int          `boil:"OperationsItem" json:"OperationsItem" toml:"OperationsItem" yaml:"OperationsItem"`
	BillOfMaterial                       int          `boil:"BillOfMaterial" json:"BillOfMaterial" toml:"BillOfMaterial" yaml:"BillOfMaterial"`
	BillOfMaterialItem                   int          `boil:"BillOfMaterialItem" json:"BillOfMaterialItem" toml:"BillOfMaterialItem" yaml:"BillOfMaterialItem"`
	Reservation                          null.Int     `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	ReservationItem                      null.Int     `boil:"ReservationItem" json:"ReservationItem,omitempty" toml:"ReservationItem" yaml:"ReservationItem,omitempty"`
	ComponentProduct                     null.String  `boil:"ComponentProduct" json:"ComponentProduct,omitempty" toml:"ComponentProduct" yaml:"ComponentProduct,omitempty"`
	ComponentProductRequirementDate      null.String  `boil:"ComponentProductRequirementDate" json:"ComponentProductRequirementDate,omitempty" toml:"ComponentProductRequirementDate" yaml:"ComponentProductRequirementDate,omitempty"`
	ComponentProductRequirementTime      null.String  `boil:"ComponentProductRequirementTime" json:"ComponentProductRequirementTime,omitempty" toml:"ComponentProductRequirementTime" yaml:"ComponentProductRequirementTime,omitempty"`
	ComponentProductIsMarkedForBackflush null.Bool    `boil:"ComponentProductIsMarkedForBackflush" json:"ComponentProductIsMarkedForBackflush,omitempty" toml:"ComponentProductIsMarkedForBackflush" yaml:"ComponentProductIsMarkedForBackflush,omitempty"`
	ComponentProductBusinessPartner      null.Int     `boil:"ComponentProductBusinessPartner" json:"ComponentProductBusinessPartner,omitempty" toml:"ComponentProductBusinessPartner" yaml:"ComponentProductBusinessPartner,omitempty"`
	StockConfirmationPlant               null.String  `boil:"StockConfirmationPlant" json:"StockConfirmationPlant,omitempty" toml:"StockConfirmationPlant" yaml:"StockConfirmationPlant,omitempty"`
	PlannedOrder                         null.Int     `boil:"PlannedOrder" json:"PlannedOrder,omitempty" toml:"PlannedOrder" yaml:"PlannedOrder,omitempty"`
	OrderID                              null.Int     `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                            null.Int     `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	SortField                            null.String  `boil:"SortField" json:"SortField,omitempty" toml:"SortField" yaml:"SortField,omitempty"`
	BOMItemDescription                   null.String  `boil:"BOMItemDescription" json:"BOMItemDescription,omitempty" toml:"BOMItemDescription" yaml:"BOMItemDescription,omitempty"`
	StorageLocation                      null.String  `boil:"StorageLocation" json:"StorageLocation,omitempty" toml:"StorageLocation" yaml:"StorageLocation,omitempty"`
	Batch                                null.String  `boil:"Batch" json:"Batch,omitempty" toml:"Batch" yaml:"Batch,omitempty"`
	GoodsRecipientName                   null.String  `boil:"GoodsRecipientName" json:"GoodsRecipientName,omitempty" toml:"GoodsRecipientName" yaml:"GoodsRecipientName,omitempty"`
	UnloadingPointName                   null.String  `boil:"UnloadingPointName" json:"UnloadingPointName,omitempty" toml:"UnloadingPointName" yaml:"UnloadingPointName,omitempty"`
	ProductCompIsAlternativeItem         null.Bool    `boil:"ProductCompIsAlternativeItem" json:"ProductCompIsAlternativeItem,omitempty" toml:"ProductCompIsAlternativeItem" yaml:"ProductCompIsAlternativeItem,omitempty"`
	CostingPolicy                        null.String  `boil:"CostingPolicy" json:"CostingPolicy,omitempty" toml:"CostingPolicy" yaml:"CostingPolicy,omitempty"`
	PriceUnitQty                         null.String  `boil:"PriceUnitQty" json:"PriceUnitQty,omitempty" toml:"PriceUnitQty" yaml:"PriceUnitQty,omitempty"`
	StandardPrice                        null.Float32 `boil:"StandardPrice" json:"StandardPrice,omitempty" toml:"StandardPrice" yaml:"StandardPrice,omitempty"`
	MovingAveragePrice                   null.Float32 `boil:"MovingAveragePrice" json:"MovingAveragePrice,omitempty" toml:"MovingAveragePrice" yaml:"MovingAveragePrice,omitempty"`
	ComponentScrapInPercent              null.Float32 `boil:"ComponentScrapInPercent" json:"ComponentScrapInPercent,omitempty" toml:"ComponentScrapInPercent" yaml:"ComponentScrapInPercent,omitempty"`
	OperationScrapInPercent              null.Float32 `boil:"OperationScrapInPercent" json:"OperationScrapInPercent,omitempty" toml:"OperationScrapInPercent" yaml:"OperationScrapInPercent,omitempty"`
	BaseUnit                             null.String  `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	RequiredQuantity                     null.Float32 `boil:"RequiredQuantity" json:"RequiredQuantity,omitempty" toml:"RequiredQuantity" yaml:"RequiredQuantity,omitempty"`
	WithdrawnQuantity                    null.Float32 `boil:"WithdrawnQuantity" json:"WithdrawnQuantity,omitempty" toml:"WithdrawnQuantity" yaml:"WithdrawnQuantity,omitempty"`
	ConfirmedAvailableQuantity           null.Float32 `boil:"ConfirmedAvailableQuantity" json:"ConfirmedAvailableQuantity,omitempty" toml:"ConfirmedAvailableQuantity" yaml:"ConfirmedAvailableQuantity,omitempty"`
	ProductCompOriginalQuantity          null.Float32 `boil:"ProductCompOriginalQuantity" json:"ProductCompOriginalQuantity,omitempty" toml:"ProductCompOriginalQuantity" yaml:"ProductCompOriginalQuantity,omitempty"`
	IsMarkedForDeletion                  null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductionOrderItemComponentDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionOrderItemComponentDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionOrderItemComponentDatumColumns = struct {
	ProductionOrder                      string
	ProductionOrderItem                  string
	Operations                           string
	OperationsItem                       string
	BillOfMaterial                       string
	BillOfMaterialItem                   string
	Reservation                          string
	ReservationItem                      string
	ComponentProduct                     string
	ComponentProductRequirementDate      string
	ComponentProductRequirementTime      string
	ComponentProductIsMarkedForBackflush string
	ComponentProductBusinessPartner      string
	StockConfirmationPlant               string
	PlannedOrder                         string
	OrderID                              string
	OrderItem                            string
	SortField                            string
	BOMItemDescription                   string
	StorageLocation                      string
	Batch                                string
	GoodsRecipientName                   string
	UnloadingPointName                   string
	ProductCompIsAlternativeItem         string
	CostingPolicy                        string
	PriceUnitQty                         string
	StandardPrice                        string
	MovingAveragePrice                   string
	ComponentScrapInPercent              string
	OperationScrapInPercent              string
	BaseUnit                             string
	RequiredQuantity                     string
	WithdrawnQuantity                    string
	ConfirmedAvailableQuantity           string
	ProductCompOriginalQuantity          string
	IsMarkedForDeletion                  string
}{
	ProductionOrder:                      "ProductionOrder",
	ProductionOrderItem:                  "ProductionOrderItem",
	Operations:                           "Operations",
	OperationsItem:                       "OperationsItem",
	BillOfMaterial:                       "BillOfMaterial",
	BillOfMaterialItem:                   "BillOfMaterialItem",
	Reservation:                          "Reservation",
	ReservationItem:                      "ReservationItem",
	ComponentProduct:                     "ComponentProduct",
	ComponentProductRequirementDate:      "ComponentProductRequirementDate",
	ComponentProductRequirementTime:      "ComponentProductRequirementTime",
	ComponentProductIsMarkedForBackflush: "ComponentProductIsMarkedForBackflush",
	ComponentProductBusinessPartner:      "ComponentProductBusinessPartner",
	StockConfirmationPlant:               "StockConfirmationPlant",
	PlannedOrder:                         "PlannedOrder",
	OrderID:                              "OrderID",
	OrderItem:                            "OrderItem",
	SortField:                            "SortField",
	BOMItemDescription:                   "BOMItemDescription",
	StorageLocation:                      "StorageLocation",
	Batch:                                "Batch",
	GoodsRecipientName:                   "GoodsRecipientName",
	UnloadingPointName:                   "UnloadingPointName",
	ProductCompIsAlternativeItem:         "ProductCompIsAlternativeItem",
	CostingPolicy:                        "CostingPolicy",
	PriceUnitQty:                         "PriceUnitQty",
	StandardPrice:                        "StandardPrice",
	MovingAveragePrice:                   "MovingAveragePrice",
	ComponentScrapInPercent:              "ComponentScrapInPercent",
	OperationScrapInPercent:              "OperationScrapInPercent",
	BaseUnit:                             "BaseUnit",
	RequiredQuantity:                     "RequiredQuantity",
	WithdrawnQuantity:                    "WithdrawnQuantity",
	ConfirmedAvailableQuantity:           "ConfirmedAvailableQuantity",
	ProductCompOriginalQuantity:          "ProductCompOriginalQuantity",
	IsMarkedForDeletion:                  "IsMarkedForDeletion",
}

var DataPlatformProductionOrderItemComponentDatumTableColumns = struct {
	ProductionOrder                      string
	ProductionOrderItem                  string
	Operations                           string
	OperationsItem                       string
	BillOfMaterial                       string
	BillOfMaterialItem                   string
	Reservation                          string
	ReservationItem                      string
	ComponentProduct                     string
	ComponentProductRequirementDate      string
	ComponentProductRequirementTime      string
	ComponentProductIsMarkedForBackflush string
	ComponentProductBusinessPartner      string
	StockConfirmationPlant               string
	PlannedOrder                         string
	OrderID                              string
	OrderItem                            string
	SortField                            string
	BOMItemDescription                   string
	StorageLocation                      string
	Batch                                string
	GoodsRecipientName                   string
	UnloadingPointName                   string
	ProductCompIsAlternativeItem         string
	CostingPolicy                        string
	PriceUnitQty                         string
	StandardPrice                        string
	MovingAveragePrice                   string
	ComponentScrapInPercent              string
	OperationScrapInPercent              string
	BaseUnit                             string
	RequiredQuantity                     string
	WithdrawnQuantity                    string
	ConfirmedAvailableQuantity           string
	ProductCompOriginalQuantity          string
	IsMarkedForDeletion                  string
}{
	ProductionOrder:                      "data_platform_production_order_item_component_data.ProductionOrder",
	ProductionOrderItem:                  "data_platform_production_order_item_component_data.ProductionOrderItem",
	Operations:                           "data_platform_production_order_item_component_data.Operations",
	OperationsItem:                       "data_platform_production_order_item_component_data.OperationsItem",
	BillOfMaterial:                       "data_platform_production_order_item_component_data.BillOfMaterial",
	BillOfMaterialItem:                   "data_platform_production_order_item_component_data.BillOfMaterialItem",
	Reservation:                          "data_platform_production_order_item_component_data.Reservation",
	ReservationItem:                      "data_platform_production_order_item_component_data.ReservationItem",
	ComponentProduct:                     "data_platform_production_order_item_component_data.ComponentProduct",
	ComponentProductRequirementDate:      "data_platform_production_order_item_component_data.ComponentProductRequirementDate",
	ComponentProductRequirementTime:      "data_platform_production_order_item_component_data.ComponentProductRequirementTime",
	ComponentProductIsMarkedForBackflush: "data_platform_production_order_item_component_data.ComponentProductIsMarkedForBackflush",
	ComponentProductBusinessPartner:      "data_platform_production_order_item_component_data.ComponentProductBusinessPartner",
	StockConfirmationPlant:               "data_platform_production_order_item_component_data.StockConfirmationPlant",
	PlannedOrder:                         "data_platform_production_order_item_component_data.PlannedOrder",
	OrderID:                              "data_platform_production_order_item_component_data.OrderID",
	OrderItem:                            "data_platform_production_order_item_component_data.OrderItem",
	SortField:                            "data_platform_production_order_item_component_data.SortField",
	BOMItemDescription:                   "data_platform_production_order_item_component_data.BOMItemDescription",
	StorageLocation:                      "data_platform_production_order_item_component_data.StorageLocation",
	Batch:                                "data_platform_production_order_item_component_data.Batch",
	GoodsRecipientName:                   "data_platform_production_order_item_component_data.GoodsRecipientName",
	UnloadingPointName:                   "data_platform_production_order_item_component_data.UnloadingPointName",
	ProductCompIsAlternativeItem:         "data_platform_production_order_item_component_data.ProductCompIsAlternativeItem",
	CostingPolicy:                        "data_platform_production_order_item_component_data.CostingPolicy",
	PriceUnitQty:                         "data_platform_production_order_item_component_data.PriceUnitQty",
	StandardPrice:                        "data_platform_production_order_item_component_data.StandardPrice",
	MovingAveragePrice:                   "data_platform_production_order_item_component_data.MovingAveragePrice",
	ComponentScrapInPercent:              "data_platform_production_order_item_component_data.ComponentScrapInPercent",
	OperationScrapInPercent:              "data_platform_production_order_item_component_data.OperationScrapInPercent",
	BaseUnit:                             "data_platform_production_order_item_component_data.BaseUnit",
	RequiredQuantity:                     "data_platform_production_order_item_component_data.RequiredQuantity",
	WithdrawnQuantity:                    "data_platform_production_order_item_component_data.WithdrawnQuantity",
	ConfirmedAvailableQuantity:           "data_platform_production_order_item_component_data.ConfirmedAvailableQuantity",
	ProductCompOriginalQuantity:          "data_platform_production_order_item_component_data.ProductCompOriginalQuantity",
	IsMarkedForDeletion:                  "data_platform_production_order_item_component_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductionOrderItemComponentDatumWhere = struct {
	ProductionOrder                      whereHelperint
	ProductionOrderItem                  whereHelperint
	Operations                           whereHelperint
	OperationsItem                       whereHelperint
	BillOfMaterial                       whereHelperint
	BillOfMaterialItem                   whereHelperint
	Reservation                          whereHelpernull_Int
	ReservationItem                      whereHelpernull_Int
	ComponentProduct                     whereHelpernull_String
	ComponentProductRequirementDate      whereHelpernull_String
	ComponentProductRequirementTime      whereHelpernull_String
	ComponentProductIsMarkedForBackflush whereHelpernull_Bool
	ComponentProductBusinessPartner      whereHelpernull_Int
	StockConfirmationPlant               whereHelpernull_String
	PlannedOrder                         whereHelpernull_Int
	OrderID                              whereHelpernull_Int
	OrderItem                            whereHelpernull_Int
	SortField                            whereHelpernull_String
	BOMItemDescription                   whereHelpernull_String
	StorageLocation                      whereHelpernull_String
	Batch                                whereHelpernull_String
	GoodsRecipientName                   whereHelpernull_String
	UnloadingPointName                   whereHelpernull_String
	ProductCompIsAlternativeItem         whereHelpernull_Bool
	CostingPolicy                        whereHelpernull_String
	PriceUnitQty                         whereHelpernull_String
	StandardPrice                        whereHelpernull_Float32
	MovingAveragePrice                   whereHelpernull_Float32
	ComponentScrapInPercent              whereHelpernull_Float32
	OperationScrapInPercent              whereHelpernull_Float32
	BaseUnit                             whereHelpernull_String
	RequiredQuantity                     whereHelpernull_Float32
	WithdrawnQuantity                    whereHelpernull_Float32
	ConfirmedAvailableQuantity           whereHelpernull_Float32
	ProductCompOriginalQuantity          whereHelpernull_Float32
	IsMarkedForDeletion                  whereHelpernull_Bool
}{
	ProductionOrder:                      whereHelperint{field: "`data_platform_production_order_item_component_data`.`ProductionOrder`"},
	ProductionOrderItem:                  whereHelperint{field: "`data_platform_production_order_item_component_data`.`ProductionOrderItem`"},
	Operations:                           whereHelperint{field: "`data_platform_production_order_item_component_data`.`Operations`"},
	OperationsItem:                       whereHelperint{field: "`data_platform_production_order_item_component_data`.`OperationsItem`"},
	BillOfMaterial:                       whereHelperint{field: "`data_platform_production_order_item_component_data`.`BillOfMaterial`"},
	BillOfMaterialItem:                   whereHelperint{field: "`data_platform_production_order_item_component_data`.`BillOfMaterialItem`"},
	Reservation:                          whereHelpernull_Int{field: "`data_platform_production_order_item_component_data`.`Reservation`"},
	ReservationItem:                      whereHelpernull_Int{field: "`data_platform_production_order_item_component_data`.`ReservationItem`"},
	ComponentProduct:                     whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`ComponentProduct`"},
	ComponentProductRequirementDate:      whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`ComponentProductRequirementDate`"},
	ComponentProductRequirementTime:      whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`ComponentProductRequirementTime`"},
	ComponentProductIsMarkedForBackflush: whereHelpernull_Bool{field: "`data_platform_production_order_item_component_data`.`ComponentProductIsMarkedForBackflush`"},
	ComponentProductBusinessPartner:      whereHelpernull_Int{field: "`data_platform_production_order_item_component_data`.`ComponentProductBusinessPartner`"},
	StockConfirmationPlant:               whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`StockConfirmationPlant`"},
	PlannedOrder:                         whereHelpernull_Int{field: "`data_platform_production_order_item_component_data`.`PlannedOrder`"},
	OrderID:                              whereHelpernull_Int{field: "`data_platform_production_order_item_component_data`.`OrderID`"},
	OrderItem:                            whereHelpernull_Int{field: "`data_platform_production_order_item_component_data`.`OrderItem`"},
	SortField:                            whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`SortField`"},
	BOMItemDescription:                   whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`BOMItemDescription`"},
	StorageLocation:                      whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`StorageLocation`"},
	Batch:                                whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`Batch`"},
	GoodsRecipientName:                   whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`GoodsRecipientName`"},
	UnloadingPointName:                   whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`UnloadingPointName`"},
	ProductCompIsAlternativeItem:         whereHelpernull_Bool{field: "`data_platform_production_order_item_component_data`.`ProductCompIsAlternativeItem`"},
	CostingPolicy:                        whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`CostingPolicy`"},
	PriceUnitQty:                         whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`PriceUnitQty`"},
	StandardPrice:                        whereHelpernull_Float32{field: "`data_platform_production_order_item_component_data`.`StandardPrice`"},
	MovingAveragePrice:                   whereHelpernull_Float32{field: "`data_platform_production_order_item_component_data`.`MovingAveragePrice`"},
	ComponentScrapInPercent:              whereHelpernull_Float32{field: "`data_platform_production_order_item_component_data`.`ComponentScrapInPercent`"},
	OperationScrapInPercent:              whereHelpernull_Float32{field: "`data_platform_production_order_item_component_data`.`OperationScrapInPercent`"},
	BaseUnit:                             whereHelpernull_String{field: "`data_platform_production_order_item_component_data`.`BaseUnit`"},
	RequiredQuantity:                     whereHelpernull_Float32{field: "`data_platform_production_order_item_component_data`.`RequiredQuantity`"},
	WithdrawnQuantity:                    whereHelpernull_Float32{field: "`data_platform_production_order_item_component_data`.`WithdrawnQuantity`"},
	ConfirmedAvailableQuantity:           whereHelpernull_Float32{field: "`data_platform_production_order_item_component_data`.`ConfirmedAvailableQuantity`"},
	ProductCompOriginalQuantity:          whereHelpernull_Float32{field: "`data_platform_production_order_item_component_data`.`ProductCompOriginalQuantity`"},
	IsMarkedForDeletion:                  whereHelpernull_Bool{field: "`data_platform_production_order_item_component_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductionOrderItemComponentDatumRels is where relationship names are stored.
var DataPlatformProductionOrderItemComponentDatumRels = struct {
}{}

// dataPlatformProductionOrderItemComponentDatumR is where relationships are stored.
type dataPlatformProductionOrderItemComponentDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionOrderItemComponentDatumR) NewStruct() *dataPlatformProductionOrderItemComponentDatumR {
	return &dataPlatformProductionOrderItemComponentDatumR{}
}

// dataPlatformProductionOrderItemComponentDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionOrderItemComponentDatumL struct{}

var (
	dataPlatformProductionOrderItemComponentDatumAllColumns            = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "BillOfMaterial", "BillOfMaterialItem", "Reservation", "ReservationItem", "ComponentProduct", "ComponentProductRequirementDate", "ComponentProductRequirementTime", "ComponentProductIsMarkedForBackflush", "ComponentProductBusinessPartner", "StockConfirmationPlant", "PlannedOrder", "OrderID", "OrderItem", "SortField", "BOMItemDescription", "StorageLocation", "Batch", "GoodsRecipientName", "UnloadingPointName", "ProductCompIsAlternativeItem", "CostingPolicy", "PriceUnitQty", "StandardPrice", "MovingAveragePrice", "ComponentScrapInPercent", "OperationScrapInPercent", "BaseUnit", "RequiredQuantity", "WithdrawnQuantity", "ConfirmedAvailableQuantity", "ProductCompOriginalQuantity", "IsMarkedForDeletion"}
	dataPlatformProductionOrderItemComponentDatumColumnsWithoutDefault = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "BillOfMaterial", "BillOfMaterialItem", "Reservation", "ReservationItem", "ComponentProduct", "ComponentProductRequirementDate", "ComponentProductRequirementTime", "ComponentProductIsMarkedForBackflush", "ComponentProductBusinessPartner", "StockConfirmationPlant", "PlannedOrder", "OrderID", "OrderItem", "SortField", "BOMItemDescription", "StorageLocation", "Batch", "GoodsRecipientName", "UnloadingPointName", "ProductCompIsAlternativeItem", "CostingPolicy", "PriceUnitQty", "StandardPrice", "MovingAveragePrice", "ComponentScrapInPercent", "OperationScrapInPercent", "BaseUnit", "RequiredQuantity", "WithdrawnQuantity", "ConfirmedAvailableQuantity", "ProductCompOriginalQuantity", "IsMarkedForDeletion"}
	dataPlatformProductionOrderItemComponentDatumColumnsWithDefault    = []string{}
	dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns     = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "BillOfMaterial", "BillOfMaterialItem"}
	dataPlatformProductionOrderItemComponentDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionOrderItemComponentDatumSlice is an alias for a slice of pointers to DataPlatformProductionOrderItemComponentDatum.
	// This should almost always be used instead of []DataPlatformProductionOrderItemComponentDatum.
	DataPlatformProductionOrderItemComponentDatumSlice []*DataPlatformProductionOrderItemComponentDatum

	dataPlatformProductionOrderItemComponentDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionOrderItemComponentDatumType                 = reflect.TypeOf(&DataPlatformProductionOrderItemComponentDatum{})
	dataPlatformProductionOrderItemComponentDatumMapping              = queries.MakeStructMapping(dataPlatformProductionOrderItemComponentDatumType)
	dataPlatformProductionOrderItemComponentDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionOrderItemComponentDatumType, dataPlatformProductionOrderItemComponentDatumMapping, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns)
	dataPlatformProductionOrderItemComponentDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemComponentDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionOrderItemComponentDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemComponentDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionOrderItemComponentDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemComponentDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionOrderItemComponentDatum record from the query.
func (q dataPlatformProductionOrderItemComponentDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionOrderItemComponentDatum, error) {
	o := &DataPlatformProductionOrderItemComponentDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_order_item_component_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionOrderItemComponentDatum records from the query.
func (q dataPlatformProductionOrderItemComponentDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionOrderItemComponentDatumSlice, error) {
	var o []*DataPlatformProductionOrderItemComponentDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionOrderItemComponentDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionOrderItemComponentDatum records in the query.
func (q dataPlatformProductionOrderItemComponentDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_order_item_component_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionOrderItemComponentDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_order_item_component_data exists")
	}

	return count > 0, nil
}

// DataPlatformProductionOrderItemComponentData retrieves all the records using an executor.
func DataPlatformProductionOrderItemComponentData(mods ...qm.QueryMod) dataPlatformProductionOrderItemComponentDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_order_item_component_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_order_item_component_data`.*"})
	}

	return dataPlatformProductionOrderItemComponentDatumQuery{q}
}

// FindDataPlatformProductionOrderItemComponentDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionOrderItemComponentDatum(ctx context.Context, exec boil.ContextExecutor, productionOrder int, productionOrderItem int, operations int, operationsItem int, billOfMaterial int, billOfMaterialItem int, selectCols ...string) (*DataPlatformProductionOrderItemComponentDatum, error) {
	dataPlatformProductionOrderItemComponentDatumObj := &DataPlatformProductionOrderItemComponentDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_order_item_component_data` where `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=? AND `BillOfMaterial`=? AND `BillOfMaterialItem`=?", sel,
	)

	q := queries.Raw(query, productionOrder, productionOrderItem, operations, operationsItem, billOfMaterial, billOfMaterialItem)

	err := q.Bind(ctx, exec, dataPlatformProductionOrderItemComponentDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_order_item_component_data")
	}

	return dataPlatformProductionOrderItemComponentDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionOrderItemComponentDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_item_component_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderItemComponentDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionOrderItemComponentDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemComponentDatumInsertCache[key]
	dataPlatformProductionOrderItemComponentDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionOrderItemComponentDatumAllColumns,
			dataPlatformProductionOrderItemComponentDatumColumnsWithDefault,
			dataPlatformProductionOrderItemComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemComponentDatumType, dataPlatformProductionOrderItemComponentDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderItemComponentDatumType, dataPlatformProductionOrderItemComponentDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_order_item_component_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_order_item_component_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_order_item_component_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_order_item_component_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionOrder,
		o.ProductionOrderItem,
		o.Operations,
		o.OperationsItem,
		o.BillOfMaterial,
		o.BillOfMaterialItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_item_component_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderItemComponentDatumInsertCacheMut.Lock()
		dataPlatformProductionOrderItemComponentDatumInsertCache[key] = cache
		dataPlatformProductionOrderItemComponentDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionOrderItemComponentDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionOrderItemComponentDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionOrderItemComponentDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemComponentDatumUpdateCache[key]
	dataPlatformProductionOrderItemComponentDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionOrderItemComponentDatumAllColumns,
			dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_order_item_component_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_order_item_component_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemComponentDatumType, dataPlatformProductionOrderItemComponentDatumMapping, append(wl, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_order_item_component_data row")
	}

	if !cached {
		dataPlatformProductionOrderItemComponentDatumUpdateCacheMut.Lock()
		dataPlatformProductionOrderItemComponentDatumUpdateCache[key] = cache
		dataPlatformProductionOrderItemComponentDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionOrderItemComponentDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_order_item_component_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionOrderItemComponentDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_order_item_component_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionOrderItemComponentDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionOrderItemComponentDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionOrderItemComponentDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_item_component_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderItemComponentDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionOrderItemComponentDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionOrderItemComponentDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemComponentDatumUpsertCache[key]
	dataPlatformProductionOrderItemComponentDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionOrderItemComponentDatumAllColumns,
			dataPlatformProductionOrderItemComponentDatumColumnsWithDefault,
			dataPlatformProductionOrderItemComponentDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionOrderItemComponentDatumAllColumns,
			dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_order_item_component_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_order_item_component_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_order_item_component_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemComponentDatumType, dataPlatformProductionOrderItemComponentDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderItemComponentDatumType, dataPlatformProductionOrderItemComponentDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_order_item_component_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionOrderItemComponentDatumType, dataPlatformProductionOrderItemComponentDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_order_item_component_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_item_component_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderItemComponentDatumUpsertCacheMut.Lock()
		dataPlatformProductionOrderItemComponentDatumUpsertCache[key] = cache
		dataPlatformProductionOrderItemComponentDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionOrderItemComponentDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionOrderItemComponentDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionOrderItemComponentDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionOrderItemComponentDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_order_item_component_data` WHERE `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=? AND `BillOfMaterial`=? AND `BillOfMaterialItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_order_item_component_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionOrderItemComponentDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionOrderItemComponentDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_order_item_component_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionOrderItemComponentDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_order_item_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionOrderItemComponentDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionOrderItemComponentDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionOrderItemComponentDatum(ctx, exec, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.BillOfMaterial, o.BillOfMaterialItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionOrderItemComponentDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionOrderItemComponentDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemComponentDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_order_item_component_data`.* FROM `data_platform_production_order_item_component_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionOrderItemComponentDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionOrderItemComponentDatumExists checks if the DataPlatformProductionOrderItemComponentDatum row exists.
func DataPlatformProductionOrderItemComponentDatumExists(ctx context.Context, exec boil.ContextExecutor, productionOrder int, productionOrderItem int, operations int, operationsItem int, billOfMaterial int, billOfMaterialItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_order_item_component_data` where `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=? AND `BillOfMaterial`=? AND `BillOfMaterialItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionOrder, productionOrderItem, operations, operationsItem, billOfMaterial, billOfMaterialItem)
	}
	row := exec.QueryRowContext(ctx, sql, productionOrder, productionOrderItem, operations, operationsItem, billOfMaterial, billOfMaterialItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_order_item_component_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionOrderItemComponentDatum row exists.
func (o *DataPlatformProductionOrderItemComponentDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionOrderItemComponentDatumExists(ctx, exec, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.BillOfMaterial, o.BillOfMaterialItem)
}
