// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformFinInstMasterBusinessPartnerDatum is an object representing the database table.
type DataPlatformFinInstMasterBusinessPartnerDatum struct {
	FinInstCountry         string      `boil:"FinInstCountry" json:"FinInstCountry" toml:"FinInstCountry" yaml:"FinInstCountry"`
	FinInstNumber          string      `boil:"FinInstNumber" json:"FinInstNumber" toml:"FinInstNumber" yaml:"FinInstNumber"`
	FinInstBusinessPartner int         `boil:"FinInstBusinessPartner" json:"FinInstBusinessPartner" toml:"FinInstBusinessPartner" yaml:"FinInstBusinessPartner"`
	ValidityEndDate        string      `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	ValidityStartDate      null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	IsMarkedForDeletion    null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformFinInstMasterBusinessPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformFinInstMasterBusinessPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformFinInstMasterBusinessPartnerDatumColumns = struct {
	FinInstCountry         string
	FinInstNumber          string
	FinInstBusinessPartner string
	ValidityEndDate        string
	ValidityStartDate      string
	IsMarkedForDeletion    string
}{
	FinInstCountry:         "FinInstCountry",
	FinInstNumber:          "FinInstNumber",
	FinInstBusinessPartner: "FinInstBusinessPartner",
	ValidityEndDate:        "ValidityEndDate",
	ValidityStartDate:      "ValidityStartDate",
	IsMarkedForDeletion:    "IsMarkedForDeletion",
}

var DataPlatformFinInstMasterBusinessPartnerDatumTableColumns = struct {
	FinInstCountry         string
	FinInstNumber          string
	FinInstBusinessPartner string
	ValidityEndDate        string
	ValidityStartDate      string
	IsMarkedForDeletion    string
}{
	FinInstCountry:         "data_platform_fin_inst_master_business_partner_data.FinInstCountry",
	FinInstNumber:          "data_platform_fin_inst_master_business_partner_data.FinInstNumber",
	FinInstBusinessPartner: "data_platform_fin_inst_master_business_partner_data.FinInstBusinessPartner",
	ValidityEndDate:        "data_platform_fin_inst_master_business_partner_data.ValidityEndDate",
	ValidityStartDate:      "data_platform_fin_inst_master_business_partner_data.ValidityStartDate",
	IsMarkedForDeletion:    "data_platform_fin_inst_master_business_partner_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformFinInstMasterBusinessPartnerDatumWhere = struct {
	FinInstCountry         whereHelperstring
	FinInstNumber          whereHelperstring
	FinInstBusinessPartner whereHelperint
	ValidityEndDate        whereHelperstring
	ValidityStartDate      whereHelpernull_String
	IsMarkedForDeletion    whereHelpernull_Bool
}{
	FinInstCountry:         whereHelperstring{field: "`data_platform_fin_inst_master_business_partner_data`.`FinInstCountry`"},
	FinInstNumber:          whereHelperstring{field: "`data_platform_fin_inst_master_business_partner_data`.`FinInstNumber`"},
	FinInstBusinessPartner: whereHelperint{field: "`data_platform_fin_inst_master_business_partner_data`.`FinInstBusinessPartner`"},
	ValidityEndDate:        whereHelperstring{field: "`data_platform_fin_inst_master_business_partner_data`.`ValidityEndDate`"},
	ValidityStartDate:      whereHelpernull_String{field: "`data_platform_fin_inst_master_business_partner_data`.`ValidityStartDate`"},
	IsMarkedForDeletion:    whereHelpernull_Bool{field: "`data_platform_fin_inst_master_business_partner_data`.`IsMarkedForDeletion`"},
}

// DataPlatformFinInstMasterBusinessPartnerDatumRels is where relationship names are stored.
var DataPlatformFinInstMasterBusinessPartnerDatumRels = struct {
	FinInstCountryDataPlatformFinInstMasterGeneralDatum string
}{
	FinInstCountryDataPlatformFinInstMasterGeneralDatum: "FinInstCountryDataPlatformFinInstMasterGeneralDatum",
}

// dataPlatformFinInstMasterBusinessPartnerDatumR is where relationships are stored.
type dataPlatformFinInstMasterBusinessPartnerDatumR struct {
	FinInstCountryDataPlatformFinInstMasterGeneralDatum *DataPlatformFinInstMasterGeneralDatum `boil:"FinInstCountryDataPlatformFinInstMasterGeneralDatum" json:"FinInstCountryDataPlatformFinInstMasterGeneralDatum" toml:"FinInstCountryDataPlatformFinInstMasterGeneralDatum" yaml:"FinInstCountryDataPlatformFinInstMasterGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformFinInstMasterBusinessPartnerDatumR) NewStruct() *dataPlatformFinInstMasterBusinessPartnerDatumR {
	return &dataPlatformFinInstMasterBusinessPartnerDatumR{}
}

func (r *dataPlatformFinInstMasterBusinessPartnerDatumR) GetFinInstCountryDataPlatformFinInstMasterGeneralDatum() *DataPlatformFinInstMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.FinInstCountryDataPlatformFinInstMasterGeneralDatum
}

// dataPlatformFinInstMasterBusinessPartnerDatumL is where Load methods for each relationship are stored.
type dataPlatformFinInstMasterBusinessPartnerDatumL struct{}

var (
	dataPlatformFinInstMasterBusinessPartnerDatumAllColumns            = []string{"FinInstCountry", "FinInstNumber", "FinInstBusinessPartner", "ValidityEndDate", "ValidityStartDate", "IsMarkedForDeletion"}
	dataPlatformFinInstMasterBusinessPartnerDatumColumnsWithoutDefault = []string{"FinInstCountry", "FinInstNumber", "FinInstBusinessPartner", "ValidityEndDate", "ValidityStartDate", "IsMarkedForDeletion"}
	dataPlatformFinInstMasterBusinessPartnerDatumColumnsWithDefault    = []string{}
	dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyColumns     = []string{"FinInstCountry", "FinInstNumber", "FinInstBusinessPartner", "ValidityEndDate"}
	dataPlatformFinInstMasterBusinessPartnerDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformFinInstMasterBusinessPartnerDatumSlice is an alias for a slice of pointers to DataPlatformFinInstMasterBusinessPartnerDatum.
	// This should almost always be used instead of []DataPlatformFinInstMasterBusinessPartnerDatum.
	DataPlatformFinInstMasterBusinessPartnerDatumSlice []*DataPlatformFinInstMasterBusinessPartnerDatum
	// DataPlatformFinInstMasterBusinessPartnerDatumHook is the signature for custom DataPlatformFinInstMasterBusinessPartnerDatum hook methods
	DataPlatformFinInstMasterBusinessPartnerDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformFinInstMasterBusinessPartnerDatum) error

	dataPlatformFinInstMasterBusinessPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformFinInstMasterBusinessPartnerDatumType                 = reflect.TypeOf(&DataPlatformFinInstMasterBusinessPartnerDatum{})
	dataPlatformFinInstMasterBusinessPartnerDatumMapping              = queries.MakeStructMapping(dataPlatformFinInstMasterBusinessPartnerDatumType)
	dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformFinInstMasterBusinessPartnerDatumType, dataPlatformFinInstMasterBusinessPartnerDatumMapping, dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyColumns)
	dataPlatformFinInstMasterBusinessPartnerDatumInsertCacheMut       sync.RWMutex
	dataPlatformFinInstMasterBusinessPartnerDatumInsertCache          = make(map[string]insertCache)
	dataPlatformFinInstMasterBusinessPartnerDatumUpdateCacheMut       sync.RWMutex
	dataPlatformFinInstMasterBusinessPartnerDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformFinInstMasterBusinessPartnerDatumUpsertCacheMut       sync.RWMutex
	dataPlatformFinInstMasterBusinessPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformFinInstMasterBusinessPartnerDatumAfterSelectHooks []DataPlatformFinInstMasterBusinessPartnerDatumHook

var dataPlatformFinInstMasterBusinessPartnerDatumBeforeInsertHooks []DataPlatformFinInstMasterBusinessPartnerDatumHook
var dataPlatformFinInstMasterBusinessPartnerDatumAfterInsertHooks []DataPlatformFinInstMasterBusinessPartnerDatumHook

var dataPlatformFinInstMasterBusinessPartnerDatumBeforeUpdateHooks []DataPlatformFinInstMasterBusinessPartnerDatumHook
var dataPlatformFinInstMasterBusinessPartnerDatumAfterUpdateHooks []DataPlatformFinInstMasterBusinessPartnerDatumHook

var dataPlatformFinInstMasterBusinessPartnerDatumBeforeDeleteHooks []DataPlatformFinInstMasterBusinessPartnerDatumHook
var dataPlatformFinInstMasterBusinessPartnerDatumAfterDeleteHooks []DataPlatformFinInstMasterBusinessPartnerDatumHook

var dataPlatformFinInstMasterBusinessPartnerDatumBeforeUpsertHooks []DataPlatformFinInstMasterBusinessPartnerDatumHook
var dataPlatformFinInstMasterBusinessPartnerDatumAfterUpsertHooks []DataPlatformFinInstMasterBusinessPartnerDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterBusinessPartnerDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterBusinessPartnerDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterBusinessPartnerDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterBusinessPartnerDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterBusinessPartnerDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterBusinessPartnerDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterBusinessPartnerDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterBusinessPartnerDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformFinInstMasterBusinessPartnerDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformFinInstMasterBusinessPartnerDatumHook registers your hook function for all future operations.
func AddDataPlatformFinInstMasterBusinessPartnerDatumHook(hookPoint boil.HookPoint, dataPlatformFinInstMasterBusinessPartnerDatumHook DataPlatformFinInstMasterBusinessPartnerDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformFinInstMasterBusinessPartnerDatumAfterSelectHooks = append(dataPlatformFinInstMasterBusinessPartnerDatumAfterSelectHooks, dataPlatformFinInstMasterBusinessPartnerDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformFinInstMasterBusinessPartnerDatumBeforeInsertHooks = append(dataPlatformFinInstMasterBusinessPartnerDatumBeforeInsertHooks, dataPlatformFinInstMasterBusinessPartnerDatumHook)
	case boil.AfterInsertHook:
		dataPlatformFinInstMasterBusinessPartnerDatumAfterInsertHooks = append(dataPlatformFinInstMasterBusinessPartnerDatumAfterInsertHooks, dataPlatformFinInstMasterBusinessPartnerDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformFinInstMasterBusinessPartnerDatumBeforeUpdateHooks = append(dataPlatformFinInstMasterBusinessPartnerDatumBeforeUpdateHooks, dataPlatformFinInstMasterBusinessPartnerDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformFinInstMasterBusinessPartnerDatumAfterUpdateHooks = append(dataPlatformFinInstMasterBusinessPartnerDatumAfterUpdateHooks, dataPlatformFinInstMasterBusinessPartnerDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformFinInstMasterBusinessPartnerDatumBeforeDeleteHooks = append(dataPlatformFinInstMasterBusinessPartnerDatumBeforeDeleteHooks, dataPlatformFinInstMasterBusinessPartnerDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformFinInstMasterBusinessPartnerDatumAfterDeleteHooks = append(dataPlatformFinInstMasterBusinessPartnerDatumAfterDeleteHooks, dataPlatformFinInstMasterBusinessPartnerDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformFinInstMasterBusinessPartnerDatumBeforeUpsertHooks = append(dataPlatformFinInstMasterBusinessPartnerDatumBeforeUpsertHooks, dataPlatformFinInstMasterBusinessPartnerDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformFinInstMasterBusinessPartnerDatumAfterUpsertHooks = append(dataPlatformFinInstMasterBusinessPartnerDatumAfterUpsertHooks, dataPlatformFinInstMasterBusinessPartnerDatumHook)
	}
}

// One returns a single dataPlatformFinInstMasterBusinessPartnerDatum record from the query.
func (q dataPlatformFinInstMasterBusinessPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformFinInstMasterBusinessPartnerDatum, error) {
	o := &DataPlatformFinInstMasterBusinessPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_fin_inst_master_business_partner_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformFinInstMasterBusinessPartnerDatum records from the query.
func (q dataPlatformFinInstMasterBusinessPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformFinInstMasterBusinessPartnerDatumSlice, error) {
	var o []*DataPlatformFinInstMasterBusinessPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformFinInstMasterBusinessPartnerDatum slice")
	}

	if len(dataPlatformFinInstMasterBusinessPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformFinInstMasterBusinessPartnerDatum records in the query.
func (q dataPlatformFinInstMasterBusinessPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_fin_inst_master_business_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformFinInstMasterBusinessPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_fin_inst_master_business_partner_data exists")
	}

	return count > 0, nil
}

// FinInstCountryDataPlatformFinInstMasterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) FinInstCountryDataPlatformFinInstMasterGeneralDatum(mods ...qm.QueryMod) dataPlatformFinInstMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`FinInstCountry` = ?", o.FinInstCountry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformFinInstMasterGeneralData(queryMods...)
}

// LoadFinInstCountryDataPlatformFinInstMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformFinInstMasterBusinessPartnerDatumL) LoadFinInstCountryDataPlatformFinInstMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformFinInstMasterBusinessPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformFinInstMasterBusinessPartnerDatum
	var object *DataPlatformFinInstMasterBusinessPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformFinInstMasterBusinessPartnerDatum.(*DataPlatformFinInstMasterBusinessPartnerDatum)
		if !ok {
			object = new(DataPlatformFinInstMasterBusinessPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformFinInstMasterBusinessPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformFinInstMasterBusinessPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformFinInstMasterBusinessPartnerDatum.(*[]*DataPlatformFinInstMasterBusinessPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformFinInstMasterBusinessPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformFinInstMasterBusinessPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformFinInstMasterBusinessPartnerDatumR{}
		}
		args = append(args, object.FinInstCountry)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformFinInstMasterBusinessPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.FinInstCountry {
					continue Outer
				}
			}

			args = append(args, obj.FinInstCountry)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_fin_inst_master_general_data`),
		qm.WhereIn(`data_platform_fin_inst_master_general_data.FinInstCountry in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformFinInstMasterGeneralDatum")
	}

	var resultSlice []*DataPlatformFinInstMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformFinInstMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_fin_inst_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_fin_inst_master_general_data")
	}

	if len(dataPlatformFinInstMasterGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FinInstCountryDataPlatformFinInstMasterGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformFinInstMasterGeneralDatumR{}
		}
		foreign.R.FinInstCountryDataPlatformFinInstMasterBusinessPartnerData = append(foreign.R.FinInstCountryDataPlatformFinInstMasterBusinessPartnerData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FinInstCountry == foreign.FinInstCountry {
				local.R.FinInstCountryDataPlatformFinInstMasterGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformFinInstMasterGeneralDatumR{}
				}
				foreign.R.FinInstCountryDataPlatformFinInstMasterBusinessPartnerData = append(foreign.R.FinInstCountryDataPlatformFinInstMasterBusinessPartnerData, local)
				break
			}
		}
	}

	return nil
}

// SetFinInstCountryDataPlatformFinInstMasterGeneralDatum of the dataPlatformFinInstMasterBusinessPartnerDatum to the related item.
// Sets o.R.FinInstCountryDataPlatformFinInstMasterGeneralDatum to related.
// Adds o to related.R.FinInstCountryDataPlatformFinInstMasterBusinessPartnerData.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) SetFinInstCountryDataPlatformFinInstMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformFinInstMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_fin_inst_master_business_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"FinInstCountry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.FinInstCountry, o.FinInstCountry, o.FinInstNumber, o.FinInstBusinessPartner, o.ValidityEndDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FinInstCountry = related.FinInstCountry
	if o.R == nil {
		o.R = &dataPlatformFinInstMasterBusinessPartnerDatumR{
			FinInstCountryDataPlatformFinInstMasterGeneralDatum: related,
		}
	} else {
		o.R.FinInstCountryDataPlatformFinInstMasterGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformFinInstMasterGeneralDatumR{
			FinInstCountryDataPlatformFinInstMasterBusinessPartnerData: DataPlatformFinInstMasterBusinessPartnerDatumSlice{o},
		}
	} else {
		related.R.FinInstCountryDataPlatformFinInstMasterBusinessPartnerData = append(related.R.FinInstCountryDataPlatformFinInstMasterBusinessPartnerData, o)
	}

	return nil
}

// DataPlatformFinInstMasterBusinessPartnerData retrieves all the records using an executor.
func DataPlatformFinInstMasterBusinessPartnerData(mods ...qm.QueryMod) dataPlatformFinInstMasterBusinessPartnerDatumQuery {
	mods = append(mods, qm.From("`data_platform_fin_inst_master_business_partner_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_fin_inst_master_business_partner_data`.*"})
	}

	return dataPlatformFinInstMasterBusinessPartnerDatumQuery{q}
}

// FindDataPlatformFinInstMasterBusinessPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformFinInstMasterBusinessPartnerDatum(ctx context.Context, exec boil.ContextExecutor, finInstCountry string, finInstNumber string, finInstBusinessPartner int, validityEndDate string, selectCols ...string) (*DataPlatformFinInstMasterBusinessPartnerDatum, error) {
	dataPlatformFinInstMasterBusinessPartnerDatumObj := &DataPlatformFinInstMasterBusinessPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_fin_inst_master_business_partner_data` where `FinInstCountry`=? AND `FinInstNumber`=? AND `FinInstBusinessPartner`=? AND `ValidityEndDate`=?", sel,
	)

	q := queries.Raw(query, finInstCountry, finInstNumber, finInstBusinessPartner, validityEndDate)

	err := q.Bind(ctx, exec, dataPlatformFinInstMasterBusinessPartnerDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_fin_inst_master_business_partner_data")
	}

	if err = dataPlatformFinInstMasterBusinessPartnerDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformFinInstMasterBusinessPartnerDatumObj, err
	}

	return dataPlatformFinInstMasterBusinessPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_fin_inst_master_business_partner_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformFinInstMasterBusinessPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformFinInstMasterBusinessPartnerDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformFinInstMasterBusinessPartnerDatumInsertCache[key]
	dataPlatformFinInstMasterBusinessPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformFinInstMasterBusinessPartnerDatumAllColumns,
			dataPlatformFinInstMasterBusinessPartnerDatumColumnsWithDefault,
			dataPlatformFinInstMasterBusinessPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformFinInstMasterBusinessPartnerDatumType, dataPlatformFinInstMasterBusinessPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformFinInstMasterBusinessPartnerDatumType, dataPlatformFinInstMasterBusinessPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_fin_inst_master_business_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_fin_inst_master_business_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_fin_inst_master_business_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_fin_inst_master_business_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.FinInstCountry,
		o.FinInstNumber,
		o.FinInstBusinessPartner,
		o.ValidityEndDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_fin_inst_master_business_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformFinInstMasterBusinessPartnerDatumInsertCacheMut.Lock()
		dataPlatformFinInstMasterBusinessPartnerDatumInsertCache[key] = cache
		dataPlatformFinInstMasterBusinessPartnerDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformFinInstMasterBusinessPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformFinInstMasterBusinessPartnerDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformFinInstMasterBusinessPartnerDatumUpdateCache[key]
	dataPlatformFinInstMasterBusinessPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformFinInstMasterBusinessPartnerDatumAllColumns,
			dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_fin_inst_master_business_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_fin_inst_master_business_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformFinInstMasterBusinessPartnerDatumType, dataPlatformFinInstMasterBusinessPartnerDatumMapping, append(wl, dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_fin_inst_master_business_partner_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_fin_inst_master_business_partner_data")
	}

	if !cached {
		dataPlatformFinInstMasterBusinessPartnerDatumUpdateCacheMut.Lock()
		dataPlatformFinInstMasterBusinessPartnerDatumUpdateCache[key] = cache
		dataPlatformFinInstMasterBusinessPartnerDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformFinInstMasterBusinessPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_fin_inst_master_business_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_fin_inst_master_business_partner_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformFinInstMasterBusinessPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_fin_inst_master_business_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformFinInstMasterBusinessPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformFinInstMasterBusinessPartnerDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformFinInstMasterBusinessPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_fin_inst_master_business_partner_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformFinInstMasterBusinessPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformFinInstMasterBusinessPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformFinInstMasterBusinessPartnerDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformFinInstMasterBusinessPartnerDatumUpsertCache[key]
	dataPlatformFinInstMasterBusinessPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformFinInstMasterBusinessPartnerDatumAllColumns,
			dataPlatformFinInstMasterBusinessPartnerDatumColumnsWithDefault,
			dataPlatformFinInstMasterBusinessPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformFinInstMasterBusinessPartnerDatumAllColumns,
			dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_fin_inst_master_business_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_fin_inst_master_business_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_fin_inst_master_business_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformFinInstMasterBusinessPartnerDatumType, dataPlatformFinInstMasterBusinessPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformFinInstMasterBusinessPartnerDatumType, dataPlatformFinInstMasterBusinessPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_fin_inst_master_business_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformFinInstMasterBusinessPartnerDatumType, dataPlatformFinInstMasterBusinessPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_fin_inst_master_business_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_fin_inst_master_business_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformFinInstMasterBusinessPartnerDatumUpsertCacheMut.Lock()
		dataPlatformFinInstMasterBusinessPartnerDatumUpsertCache[key] = cache
		dataPlatformFinInstMasterBusinessPartnerDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformFinInstMasterBusinessPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformFinInstMasterBusinessPartnerDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_fin_inst_master_business_partner_data` WHERE `FinInstCountry`=? AND `FinInstNumber`=? AND `FinInstBusinessPartner`=? AND `ValidityEndDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_fin_inst_master_business_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_fin_inst_master_business_partner_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformFinInstMasterBusinessPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformFinInstMasterBusinessPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_fin_inst_master_business_partner_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_fin_inst_master_business_partner_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformFinInstMasterBusinessPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformFinInstMasterBusinessPartnerDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_fin_inst_master_business_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformFinInstMasterBusinessPartnerDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_fin_inst_master_business_partner_data")
	}

	if len(dataPlatformFinInstMasterBusinessPartnerDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformFinInstMasterBusinessPartnerDatum(ctx, exec, o.FinInstCountry, o.FinInstNumber, o.FinInstBusinessPartner, o.ValidityEndDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformFinInstMasterBusinessPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformFinInstMasterBusinessPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_fin_inst_master_business_partner_data`.* FROM `data_platform_fin_inst_master_business_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformFinInstMasterBusinessPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformFinInstMasterBusinessPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformFinInstMasterBusinessPartnerDatumExists checks if the DataPlatformFinInstMasterBusinessPartnerDatum row exists.
func DataPlatformFinInstMasterBusinessPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, finInstCountry string, finInstNumber string, finInstBusinessPartner int, validityEndDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_fin_inst_master_business_partner_data` where `FinInstCountry`=? AND `FinInstNumber`=? AND `FinInstBusinessPartner`=? AND `ValidityEndDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, finInstCountry, finInstNumber, finInstBusinessPartner, validityEndDate)
	}
	row := exec.QueryRowContext(ctx, sql, finInstCountry, finInstNumber, finInstBusinessPartner, validityEndDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_fin_inst_master_business_partner_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformFinInstMasterBusinessPartnerDatum row exists.
func (o *DataPlatformFinInstMasterBusinessPartnerDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformFinInstMasterBusinessPartnerDatumExists(ctx, exec, o.FinInstCountry, o.FinInstNumber, o.FinInstBusinessPartner, o.ValidityEndDate)
}
