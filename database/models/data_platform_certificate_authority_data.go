// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformCertificateAuthorityDatum is an object representing the database table.
type DataPlatformCertificateAuthorityDatum struct {
	CertificateAuthorityChain string    `boil:"CertificateAuthorityChain" json:"CertificateAuthorityChain" toml:"CertificateAuthorityChain" yaml:"CertificateAuthorityChain"`
	DataIssuer                int       `boil:"DataIssuer" json:"DataIssuer" toml:"DataIssuer" yaml:"DataIssuer"`
	DataAuthorizer            int       `boil:"DataAuthorizer" json:"DataAuthorizer" toml:"DataAuthorizer" yaml:"DataAuthorizer"`
	DataDistributor           int       `boil:"DataDistributor" json:"DataDistributor" toml:"DataDistributor" yaml:"DataDistributor"`
	Test                      string    `boil:"Test" json:"Test" toml:"Test" yaml:"Test"`
	CreationDate              string    `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime              string    `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate            string    `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime            string    `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsMarkedForDeletion       null.Bool `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformCertificateAuthorityDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformCertificateAuthorityDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformCertificateAuthorityDatumColumns = struct {
	CertificateAuthorityChain string
	DataIssuer                string
	DataAuthorizer            string
	DataDistributor           string
	Test                      string
	CreationDate              string
	CreationTime              string
	LastChangeDate            string
	LastChangeTime            string
	IsMarkedForDeletion       string
}{
	CertificateAuthorityChain: "CertificateAuthorityChain",
	DataIssuer:                "DataIssuer",
	DataAuthorizer:            "DataAuthorizer",
	DataDistributor:           "DataDistributor",
	Test:                      "Test",
	CreationDate:              "CreationDate",
	CreationTime:              "CreationTime",
	LastChangeDate:            "LastChangeDate",
	LastChangeTime:            "LastChangeTime",
	IsMarkedForDeletion:       "IsMarkedForDeletion",
}

var DataPlatformCertificateAuthorityDatumTableColumns = struct {
	CertificateAuthorityChain string
	DataIssuer                string
	DataAuthorizer            string
	DataDistributor           string
	Test                      string
	CreationDate              string
	CreationTime              string
	LastChangeDate            string
	LastChangeTime            string
	IsMarkedForDeletion       string
}{
	CertificateAuthorityChain: "data_platform_certificate_authority_data.CertificateAuthorityChain",
	DataIssuer:                "data_platform_certificate_authority_data.DataIssuer",
	DataAuthorizer:            "data_platform_certificate_authority_data.DataAuthorizer",
	DataDistributor:           "data_platform_certificate_authority_data.DataDistributor",
	Test:                      "data_platform_certificate_authority_data.Test",
	CreationDate:              "data_platform_certificate_authority_data.CreationDate",
	CreationTime:              "data_platform_certificate_authority_data.CreationTime",
	LastChangeDate:            "data_platform_certificate_authority_data.LastChangeDate",
	LastChangeTime:            "data_platform_certificate_authority_data.LastChangeTime",
	IsMarkedForDeletion:       "data_platform_certificate_authority_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformCertificateAuthorityDatumWhere = struct {
	CertificateAuthorityChain whereHelperstring
	DataIssuer                whereHelperint
	DataAuthorizer            whereHelperint
	DataDistributor           whereHelperint
	Test                      whereHelperstring
	CreationDate              whereHelperstring
	CreationTime              whereHelperstring
	LastChangeDate            whereHelperstring
	LastChangeTime            whereHelperstring
	IsMarkedForDeletion       whereHelpernull_Bool
}{
	CertificateAuthorityChain: whereHelperstring{field: "`data_platform_certificate_authority_data`.`CertificateAuthorityChain`"},
	DataIssuer:                whereHelperint{field: "`data_platform_certificate_authority_data`.`DataIssuer`"},
	DataAuthorizer:            whereHelperint{field: "`data_platform_certificate_authority_data`.`DataAuthorizer`"},
	DataDistributor:           whereHelperint{field: "`data_platform_certificate_authority_data`.`DataDistributor`"},
	Test:                      whereHelperstring{field: "`data_platform_certificate_authority_data`.`Test`"},
	CreationDate:              whereHelperstring{field: "`data_platform_certificate_authority_data`.`CreationDate`"},
	CreationTime:              whereHelperstring{field: "`data_platform_certificate_authority_data`.`CreationTime`"},
	LastChangeDate:            whereHelperstring{field: "`data_platform_certificate_authority_data`.`LastChangeDate`"},
	LastChangeTime:            whereHelperstring{field: "`data_platform_certificate_authority_data`.`LastChangeTime`"},
	IsMarkedForDeletion:       whereHelpernull_Bool{field: "`data_platform_certificate_authority_data`.`IsMarkedForDeletion`"},
}

// DataPlatformCertificateAuthorityDatumRels is where relationship names are stored.
var DataPlatformCertificateAuthorityDatumRels = struct {
	DataAuthorizerDataPlatformBusinessPartnerGeneralDatum  string
	DataDistributorDataPlatformBusinessPartnerGeneralDatum string
	DataIssuerDataPlatformBusinessPartnerGeneralDatum      string
}{
	DataAuthorizerDataPlatformBusinessPartnerGeneralDatum:  "DataAuthorizerDataPlatformBusinessPartnerGeneralDatum",
	DataDistributorDataPlatformBusinessPartnerGeneralDatum: "DataDistributorDataPlatformBusinessPartnerGeneralDatum",
	DataIssuerDataPlatformBusinessPartnerGeneralDatum:      "DataIssuerDataPlatformBusinessPartnerGeneralDatum",
}

// dataPlatformCertificateAuthorityDatumR is where relationships are stored.
type dataPlatformCertificateAuthorityDatumR struct {
	DataAuthorizerDataPlatformBusinessPartnerGeneralDatum  *DataPlatformBusinessPartnerGeneralDatum `boil:"DataAuthorizerDataPlatformBusinessPartnerGeneralDatum" json:"DataAuthorizerDataPlatformBusinessPartnerGeneralDatum" toml:"DataAuthorizerDataPlatformBusinessPartnerGeneralDatum" yaml:"DataAuthorizerDataPlatformBusinessPartnerGeneralDatum"`
	DataDistributorDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum `boil:"DataDistributorDataPlatformBusinessPartnerGeneralDatum" json:"DataDistributorDataPlatformBusinessPartnerGeneralDatum" toml:"DataDistributorDataPlatformBusinessPartnerGeneralDatum" yaml:"DataDistributorDataPlatformBusinessPartnerGeneralDatum"`
	DataIssuerDataPlatformBusinessPartnerGeneralDatum      *DataPlatformBusinessPartnerGeneralDatum `boil:"DataIssuerDataPlatformBusinessPartnerGeneralDatum" json:"DataIssuerDataPlatformBusinessPartnerGeneralDatum" toml:"DataIssuerDataPlatformBusinessPartnerGeneralDatum" yaml:"DataIssuerDataPlatformBusinessPartnerGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformCertificateAuthorityDatumR) NewStruct() *dataPlatformCertificateAuthorityDatumR {
	return &dataPlatformCertificateAuthorityDatumR{}
}

func (r *dataPlatformCertificateAuthorityDatumR) GetDataAuthorizerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.DataAuthorizerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformCertificateAuthorityDatumR) GetDataDistributorDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.DataDistributorDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformCertificateAuthorityDatumR) GetDataIssuerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.DataIssuerDataPlatformBusinessPartnerGeneralDatum
}

// dataPlatformCertificateAuthorityDatumL is where Load methods for each relationship are stored.
type dataPlatformCertificateAuthorityDatumL struct{}

var (
	dataPlatformCertificateAuthorityDatumAllColumns            = []string{"CertificateAuthorityChain", "DataIssuer", "DataAuthorizer", "DataDistributor", "Test", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformCertificateAuthorityDatumColumnsWithoutDefault = []string{"CertificateAuthorityChain", "DataIssuer", "DataAuthorizer", "DataDistributor", "Test", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformCertificateAuthorityDatumColumnsWithDefault    = []string{}
	dataPlatformCertificateAuthorityDatumPrimaryKeyColumns     = []string{"CertificateAuthorityChain"}
	dataPlatformCertificateAuthorityDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformCertificateAuthorityDatumSlice is an alias for a slice of pointers to DataPlatformCertificateAuthorityDatum.
	// This should almost always be used instead of []DataPlatformCertificateAuthorityDatum.
	DataPlatformCertificateAuthorityDatumSlice []*DataPlatformCertificateAuthorityDatum

	dataPlatformCertificateAuthorityDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformCertificateAuthorityDatumType                 = reflect.TypeOf(&DataPlatformCertificateAuthorityDatum{})
	dataPlatformCertificateAuthorityDatumMapping              = queries.MakeStructMapping(dataPlatformCertificateAuthorityDatumType)
	dataPlatformCertificateAuthorityDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformCertificateAuthorityDatumType, dataPlatformCertificateAuthorityDatumMapping, dataPlatformCertificateAuthorityDatumPrimaryKeyColumns)
	dataPlatformCertificateAuthorityDatumInsertCacheMut       sync.RWMutex
	dataPlatformCertificateAuthorityDatumInsertCache          = make(map[string]insertCache)
	dataPlatformCertificateAuthorityDatumUpdateCacheMut       sync.RWMutex
	dataPlatformCertificateAuthorityDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformCertificateAuthorityDatumUpsertCacheMut       sync.RWMutex
	dataPlatformCertificateAuthorityDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformCertificateAuthorityDatum record from the query.
func (q dataPlatformCertificateAuthorityDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformCertificateAuthorityDatum, error) {
	o := &DataPlatformCertificateAuthorityDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_certificate_authority_data")
	}

	return o, nil
}

// All returns all DataPlatformCertificateAuthorityDatum records from the query.
func (q dataPlatformCertificateAuthorityDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformCertificateAuthorityDatumSlice, error) {
	var o []*DataPlatformCertificateAuthorityDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformCertificateAuthorityDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformCertificateAuthorityDatum records in the query.
func (q dataPlatformCertificateAuthorityDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_certificate_authority_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformCertificateAuthorityDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_certificate_authority_data exists")
	}

	return count > 0, nil
}

// DataAuthorizerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformCertificateAuthorityDatum) DataAuthorizerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DataAuthorizer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// DataDistributorDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformCertificateAuthorityDatum) DataDistributorDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DataDistributor),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// DataIssuerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformCertificateAuthorityDatum) DataIssuerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DataIssuer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// LoadDataAuthorizerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformCertificateAuthorityDatumL) LoadDataAuthorizerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCertificateAuthorityDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCertificateAuthorityDatum
	var object *DataPlatformCertificateAuthorityDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCertificateAuthorityDatum.(*DataPlatformCertificateAuthorityDatum)
		if !ok {
			object = new(DataPlatformCertificateAuthorityDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCertificateAuthorityDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCertificateAuthorityDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCertificateAuthorityDatum.(*[]*DataPlatformCertificateAuthorityDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCertificateAuthorityDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCertificateAuthorityDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCertificateAuthorityDatumR{}
		}
		args = append(args, object.DataAuthorizer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCertificateAuthorityDatumR{}
			}

			for _, a := range args {
				if a == obj.DataAuthorizer {
					continue Outer
				}
			}

			args = append(args, obj.DataAuthorizer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DataAuthorizerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DataAuthorizer == foreign.BusinessPartner {
				local.R.DataAuthorizerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDataDistributorDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformCertificateAuthorityDatumL) LoadDataDistributorDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCertificateAuthorityDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCertificateAuthorityDatum
	var object *DataPlatformCertificateAuthorityDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCertificateAuthorityDatum.(*DataPlatformCertificateAuthorityDatum)
		if !ok {
			object = new(DataPlatformCertificateAuthorityDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCertificateAuthorityDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCertificateAuthorityDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCertificateAuthorityDatum.(*[]*DataPlatformCertificateAuthorityDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCertificateAuthorityDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCertificateAuthorityDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCertificateAuthorityDatumR{}
		}
		args = append(args, object.DataDistributor)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCertificateAuthorityDatumR{}
			}

			for _, a := range args {
				if a == obj.DataDistributor {
					continue Outer
				}
			}

			args = append(args, obj.DataDistributor)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DataDistributorDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DataDistributor == foreign.BusinessPartner {
				local.R.DataDistributorDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDataIssuerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformCertificateAuthorityDatumL) LoadDataIssuerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformCertificateAuthorityDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformCertificateAuthorityDatum
	var object *DataPlatformCertificateAuthorityDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformCertificateAuthorityDatum.(*DataPlatformCertificateAuthorityDatum)
		if !ok {
			object = new(DataPlatformCertificateAuthorityDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformCertificateAuthorityDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformCertificateAuthorityDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformCertificateAuthorityDatum.(*[]*DataPlatformCertificateAuthorityDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformCertificateAuthorityDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformCertificateAuthorityDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformCertificateAuthorityDatumR{}
		}
		args = append(args, object.DataIssuer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformCertificateAuthorityDatumR{}
			}

			for _, a := range args {
				if a == obj.DataIssuer {
					continue Outer
				}
			}

			args = append(args, obj.DataIssuer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DataIssuerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DataIssuer == foreign.BusinessPartner {
				local.R.DataIssuerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetDataAuthorizerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformCertificateAuthorityDatum to the related item.
// Sets o.R.DataAuthorizerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformCertificateAuthorityDatum) SetDataAuthorizerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_certificate_authority_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DataAuthorizer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformCertificateAuthorityDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.CertificateAuthorityChain}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DataAuthorizer = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformCertificateAuthorityDatumR{
			DataAuthorizerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.DataAuthorizerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetDataDistributorDataPlatformBusinessPartnerGeneralDatum of the dataPlatformCertificateAuthorityDatum to the related item.
// Sets o.R.DataDistributorDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformCertificateAuthorityDatum) SetDataDistributorDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_certificate_authority_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DataDistributor"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformCertificateAuthorityDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.CertificateAuthorityChain}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DataDistributor = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformCertificateAuthorityDatumR{
			DataDistributorDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.DataDistributorDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetDataIssuerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformCertificateAuthorityDatum to the related item.
// Sets o.R.DataIssuerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformCertificateAuthorityDatum) SetDataIssuerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_certificate_authority_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DataIssuer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformCertificateAuthorityDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.CertificateAuthorityChain}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DataIssuer = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformCertificateAuthorityDatumR{
			DataIssuerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.DataIssuerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// DataPlatformCertificateAuthorityData retrieves all the records using an executor.
func DataPlatformCertificateAuthorityData(mods ...qm.QueryMod) dataPlatformCertificateAuthorityDatumQuery {
	mods = append(mods, qm.From("`data_platform_certificate_authority_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_certificate_authority_data`.*"})
	}

	return dataPlatformCertificateAuthorityDatumQuery{q}
}

// FindDataPlatformCertificateAuthorityDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformCertificateAuthorityDatum(ctx context.Context, exec boil.ContextExecutor, certificateAuthorityChain string, selectCols ...string) (*DataPlatformCertificateAuthorityDatum, error) {
	dataPlatformCertificateAuthorityDatumObj := &DataPlatformCertificateAuthorityDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_certificate_authority_data` where `CertificateAuthorityChain`=?", sel,
	)

	q := queries.Raw(query, certificateAuthorityChain)

	err := q.Bind(ctx, exec, dataPlatformCertificateAuthorityDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_certificate_authority_data")
	}

	return dataPlatformCertificateAuthorityDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformCertificateAuthorityDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_certificate_authority_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformCertificateAuthorityDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformCertificateAuthorityDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformCertificateAuthorityDatumInsertCache[key]
	dataPlatformCertificateAuthorityDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformCertificateAuthorityDatumAllColumns,
			dataPlatformCertificateAuthorityDatumColumnsWithDefault,
			dataPlatformCertificateAuthorityDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformCertificateAuthorityDatumType, dataPlatformCertificateAuthorityDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformCertificateAuthorityDatumType, dataPlatformCertificateAuthorityDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_certificate_authority_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_certificate_authority_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_certificate_authority_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformCertificateAuthorityDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_certificate_authority_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CertificateAuthorityChain,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_certificate_authority_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformCertificateAuthorityDatumInsertCacheMut.Lock()
		dataPlatformCertificateAuthorityDatumInsertCache[key] = cache
		dataPlatformCertificateAuthorityDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformCertificateAuthorityDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformCertificateAuthorityDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformCertificateAuthorityDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformCertificateAuthorityDatumUpdateCache[key]
	dataPlatformCertificateAuthorityDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformCertificateAuthorityDatumAllColumns,
			dataPlatformCertificateAuthorityDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_certificate_authority_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_certificate_authority_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformCertificateAuthorityDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformCertificateAuthorityDatumType, dataPlatformCertificateAuthorityDatumMapping, append(wl, dataPlatformCertificateAuthorityDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_certificate_authority_data row")
	}

	if !cached {
		dataPlatformCertificateAuthorityDatumUpdateCacheMut.Lock()
		dataPlatformCertificateAuthorityDatumUpdateCache[key] = cache
		dataPlatformCertificateAuthorityDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformCertificateAuthorityDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_certificate_authority_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformCertificateAuthorityDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCertificateAuthorityDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_certificate_authority_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCertificateAuthorityDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformCertificateAuthorityDatum slice")
	}

	return nil
}

var mySQLDataPlatformCertificateAuthorityDatumUniqueColumns = []string{
	"CertificateAuthorityChain",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformCertificateAuthorityDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_certificate_authority_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformCertificateAuthorityDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformCertificateAuthorityDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformCertificateAuthorityDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformCertificateAuthorityDatumUpsertCache[key]
	dataPlatformCertificateAuthorityDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformCertificateAuthorityDatumAllColumns,
			dataPlatformCertificateAuthorityDatumColumnsWithDefault,
			dataPlatformCertificateAuthorityDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformCertificateAuthorityDatumAllColumns,
			dataPlatformCertificateAuthorityDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_certificate_authority_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_certificate_authority_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_certificate_authority_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformCertificateAuthorityDatumType, dataPlatformCertificateAuthorityDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformCertificateAuthorityDatumType, dataPlatformCertificateAuthorityDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_certificate_authority_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformCertificateAuthorityDatumType, dataPlatformCertificateAuthorityDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_certificate_authority_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_certificate_authority_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformCertificateAuthorityDatumUpsertCacheMut.Lock()
		dataPlatformCertificateAuthorityDatumUpsertCache[key] = cache
		dataPlatformCertificateAuthorityDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformCertificateAuthorityDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformCertificateAuthorityDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformCertificateAuthorityDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformCertificateAuthorityDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_certificate_authority_data` WHERE `CertificateAuthorityChain`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_certificate_authority_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformCertificateAuthorityDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformCertificateAuthorityDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_certificate_authority_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformCertificateAuthorityDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCertificateAuthorityDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_certificate_authority_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCertificateAuthorityDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformCertificateAuthorityDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformCertificateAuthorityDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformCertificateAuthorityDatum(ctx, exec, o.CertificateAuthorityChain)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformCertificateAuthorityDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformCertificateAuthorityDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCertificateAuthorityDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_certificate_authority_data`.* FROM `data_platform_certificate_authority_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCertificateAuthorityDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformCertificateAuthorityDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformCertificateAuthorityDatumExists checks if the DataPlatformCertificateAuthorityDatum row exists.
func DataPlatformCertificateAuthorityDatumExists(ctx context.Context, exec boil.ContextExecutor, certificateAuthorityChain string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_certificate_authority_data` where `CertificateAuthorityChain`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, certificateAuthorityChain)
	}
	row := exec.QueryRowContext(ctx, sql, certificateAuthorityChain)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_certificate_authority_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformCertificateAuthorityDatum row exists.
func (o *DataPlatformCertificateAuthorityDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformCertificateAuthorityDatumExists(ctx, exec, o.CertificateAuthorityChain)
}
