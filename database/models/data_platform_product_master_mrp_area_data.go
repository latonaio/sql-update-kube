// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductMasterMRPAreaDatum is an object representing the database table.
type DataPlatformProductMasterMRPAreaDatum struct {
	Product                                   string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner                           int          `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                                     string       `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	MRPArea                                   string       `boil:"MRPArea" json:"MRPArea" toml:"MRPArea" yaml:"MRPArea"`
	StorageLocationForMRP                     string       `boil:"StorageLocationForMRP" json:"StorageLocationForMRP" toml:"StorageLocationForMRP" yaml:"StorageLocationForMRP"`
	MRPType                                   string       `boil:"MRPType" json:"MRPType" toml:"MRPType" yaml:"MRPType"`
	MRPController                             string       `boil:"MRPController" json:"MRPController" toml:"MRPController" yaml:"MRPController"`
	ReorderThresholdQuantity                  null.Float32 `boil:"ReorderThresholdQuantity" json:"ReorderThresholdQuantity,omitempty" toml:"ReorderThresholdQuantity" yaml:"ReorderThresholdQuantity,omitempty"`
	PlanningTimeFence                         null.Int     `boil:"PlanningTimeFence" json:"PlanningTimeFence,omitempty" toml:"PlanningTimeFence" yaml:"PlanningTimeFence,omitempty"`
	MRPPlanningCalendar                       null.String  `boil:"MRPPlanningCalendar" json:"MRPPlanningCalendar,omitempty" toml:"MRPPlanningCalendar" yaml:"MRPPlanningCalendar,omitempty"`
	SafetyStockQuantityInBaseUnit             null.Float32 `boil:"SafetyStockQuantityInBaseUnit" json:"SafetyStockQuantityInBaseUnit,omitempty" toml:"SafetyStockQuantityInBaseUnit" yaml:"SafetyStockQuantityInBaseUnit,omitempty"`
	SafetyDuration                            null.Int     `boil:"SafetyDuration" json:"SafetyDuration,omitempty" toml:"SafetyDuration" yaml:"SafetyDuration,omitempty"`
	MaximumStockQuantityInBaseUnit            null.Float32 `boil:"MaximumStockQuantityInBaseUnit" json:"MaximumStockQuantityInBaseUnit,omitempty" toml:"MaximumStockQuantityInBaseUnit" yaml:"MaximumStockQuantityInBaseUnit,omitempty"`
	MinumumDeliveryQuantityInBaseUnit         null.Float32 `boil:"MinumumDeliveryQuantityInBaseUnit" json:"MinumumDeliveryQuantityInBaseUnit,omitempty" toml:"MinumumDeliveryQuantityInBaseUnit" yaml:"MinumumDeliveryQuantityInBaseUnit,omitempty"`
	MinumumDeliveryLotSizeQuantityInBaseUnit  null.Float32 `boil:"MinumumDeliveryLotSizeQuantityInBaseUnit" json:"MinumumDeliveryLotSizeQuantityInBaseUnit,omitempty" toml:"MinumumDeliveryLotSizeQuantityInBaseUnit" yaml:"MinumumDeliveryLotSizeQuantityInBaseUnit,omitempty"`
	StandardDeliveryLotSizeQuantityInBaseUnit null.Float32 `boil:"StandardDeliveryLotSizeQuantityInBaseUnit" json:"StandardDeliveryLotSizeQuantityInBaseUnit,omitempty" toml:"StandardDeliveryLotSizeQuantityInBaseUnit" yaml:"StandardDeliveryLotSizeQuantityInBaseUnit,omitempty"`
	DeliveryLotSizeRoundingQuantityInBaseUnit null.Float32 `boil:"DeliveryLotSizeRoundingQuantityInBaseUnit" json:"DeliveryLotSizeRoundingQuantityInBaseUnit,omitempty" toml:"DeliveryLotSizeRoundingQuantityInBaseUnit" yaml:"DeliveryLotSizeRoundingQuantityInBaseUnit,omitempty"`
	MaximumDeliveryLotSizeQuantityInBaseUnit  null.Float32 `boil:"MaximumDeliveryLotSizeQuantityInBaseUnit" json:"MaximumDeliveryLotSizeQuantityInBaseUnit,omitempty" toml:"MaximumDeliveryLotSizeQuantityInBaseUnit" yaml:"MaximumDeliveryLotSizeQuantityInBaseUnit,omitempty"`
	MaximumDeliveryQuantityInBaseUnit         null.Float32 `boil:"MaximumDeliveryQuantityInBaseUnit" json:"MaximumDeliveryQuantityInBaseUnit,omitempty" toml:"MaximumDeliveryQuantityInBaseUnit" yaml:"MaximumDeliveryQuantityInBaseUnit,omitempty"`
	DeliveryLotSizeIsFixed                    null.Bool    `boil:"DeliveryLotSizeIsFixed" json:"DeliveryLotSizeIsFixed,omitempty" toml:"DeliveryLotSizeIsFixed" yaml:"DeliveryLotSizeIsFixed,omitempty"`
	StandardDeliveryDurationInDays            null.Int     `boil:"StandardDeliveryDurationInDays" json:"StandardDeliveryDurationInDays,omitempty" toml:"StandardDeliveryDurationInDays" yaml:"StandardDeliveryDurationInDays,omitempty"`
	IsMarkedForDeletion                       null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductMasterMRPAreaDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductMasterMRPAreaDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductMasterMRPAreaDatumColumns = struct {
	Product                                   string
	BusinessPartner                           string
	Plant                                     string
	MRPArea                                   string
	StorageLocationForMRP                     string
	MRPType                                   string
	MRPController                             string
	ReorderThresholdQuantity                  string
	PlanningTimeFence                         string
	MRPPlanningCalendar                       string
	SafetyStockQuantityInBaseUnit             string
	SafetyDuration                            string
	MaximumStockQuantityInBaseUnit            string
	MinumumDeliveryQuantityInBaseUnit         string
	MinumumDeliveryLotSizeQuantityInBaseUnit  string
	StandardDeliveryLotSizeQuantityInBaseUnit string
	DeliveryLotSizeRoundingQuantityInBaseUnit string
	MaximumDeliveryLotSizeQuantityInBaseUnit  string
	MaximumDeliveryQuantityInBaseUnit         string
	DeliveryLotSizeIsFixed                    string
	StandardDeliveryDurationInDays            string
	IsMarkedForDeletion                       string
}{
	Product:                                  "Product",
	BusinessPartner:                          "BusinessPartner",
	Plant:                                    "Plant",
	MRPArea:                                  "MRPArea",
	StorageLocationForMRP:                    "StorageLocationForMRP",
	MRPType:                                  "MRPType",
	MRPController:                            "MRPController",
	ReorderThresholdQuantity:                 "ReorderThresholdQuantity",
	PlanningTimeFence:                        "PlanningTimeFence",
	MRPPlanningCalendar:                      "MRPPlanningCalendar",
	SafetyStockQuantityInBaseUnit:            "SafetyStockQuantityInBaseUnit",
	SafetyDuration:                           "SafetyDuration",
	MaximumStockQuantityInBaseUnit:           "MaximumStockQuantityInBaseUnit",
	MinumumDeliveryQuantityInBaseUnit:        "MinumumDeliveryQuantityInBaseUnit",
	MinumumDeliveryLotSizeQuantityInBaseUnit: "MinumumDeliveryLotSizeQuantityInBaseUnit",
	StandardDeliveryLotSizeQuantityInBaseUnit: "StandardDeliveryLotSizeQuantityInBaseUnit",
	DeliveryLotSizeRoundingQuantityInBaseUnit: "DeliveryLotSizeRoundingQuantityInBaseUnit",
	MaximumDeliveryLotSizeQuantityInBaseUnit:  "MaximumDeliveryLotSizeQuantityInBaseUnit",
	MaximumDeliveryQuantityInBaseUnit:         "MaximumDeliveryQuantityInBaseUnit",
	DeliveryLotSizeIsFixed:                    "DeliveryLotSizeIsFixed",
	StandardDeliveryDurationInDays:            "StandardDeliveryDurationInDays",
	IsMarkedForDeletion:                       "IsMarkedForDeletion",
}

var DataPlatformProductMasterMRPAreaDatumTableColumns = struct {
	Product                                   string
	BusinessPartner                           string
	Plant                                     string
	MRPArea                                   string
	StorageLocationForMRP                     string
	MRPType                                   string
	MRPController                             string
	ReorderThresholdQuantity                  string
	PlanningTimeFence                         string
	MRPPlanningCalendar                       string
	SafetyStockQuantityInBaseUnit             string
	SafetyDuration                            string
	MaximumStockQuantityInBaseUnit            string
	MinumumDeliveryQuantityInBaseUnit         string
	MinumumDeliveryLotSizeQuantityInBaseUnit  string
	StandardDeliveryLotSizeQuantityInBaseUnit string
	DeliveryLotSizeRoundingQuantityInBaseUnit string
	MaximumDeliveryLotSizeQuantityInBaseUnit  string
	MaximumDeliveryQuantityInBaseUnit         string
	DeliveryLotSizeIsFixed                    string
	StandardDeliveryDurationInDays            string
	IsMarkedForDeletion                       string
}{
	Product:                                  "data_platform_product_master_mrp_area_data.Product",
	BusinessPartner:                          "data_platform_product_master_mrp_area_data.BusinessPartner",
	Plant:                                    "data_platform_product_master_mrp_area_data.Plant",
	MRPArea:                                  "data_platform_product_master_mrp_area_data.MRPArea",
	StorageLocationForMRP:                    "data_platform_product_master_mrp_area_data.StorageLocationForMRP",
	MRPType:                                  "data_platform_product_master_mrp_area_data.MRPType",
	MRPController:                            "data_platform_product_master_mrp_area_data.MRPController",
	ReorderThresholdQuantity:                 "data_platform_product_master_mrp_area_data.ReorderThresholdQuantity",
	PlanningTimeFence:                        "data_platform_product_master_mrp_area_data.PlanningTimeFence",
	MRPPlanningCalendar:                      "data_platform_product_master_mrp_area_data.MRPPlanningCalendar",
	SafetyStockQuantityInBaseUnit:            "data_platform_product_master_mrp_area_data.SafetyStockQuantityInBaseUnit",
	SafetyDuration:                           "data_platform_product_master_mrp_area_data.SafetyDuration",
	MaximumStockQuantityInBaseUnit:           "data_platform_product_master_mrp_area_data.MaximumStockQuantityInBaseUnit",
	MinumumDeliveryQuantityInBaseUnit:        "data_platform_product_master_mrp_area_data.MinumumDeliveryQuantityInBaseUnit",
	MinumumDeliveryLotSizeQuantityInBaseUnit: "data_platform_product_master_mrp_area_data.MinumumDeliveryLotSizeQuantityInBaseUnit",
	StandardDeliveryLotSizeQuantityInBaseUnit: "data_platform_product_master_mrp_area_data.StandardDeliveryLotSizeQuantityInBaseUnit",
	DeliveryLotSizeRoundingQuantityInBaseUnit: "data_platform_product_master_mrp_area_data.DeliveryLotSizeRoundingQuantityInBaseUnit",
	MaximumDeliveryLotSizeQuantityInBaseUnit:  "data_platform_product_master_mrp_area_data.MaximumDeliveryLotSizeQuantityInBaseUnit",
	MaximumDeliveryQuantityInBaseUnit:         "data_platform_product_master_mrp_area_data.MaximumDeliveryQuantityInBaseUnit",
	DeliveryLotSizeIsFixed:                    "data_platform_product_master_mrp_area_data.DeliveryLotSizeIsFixed",
	StandardDeliveryDurationInDays:            "data_platform_product_master_mrp_area_data.StandardDeliveryDurationInDays",
	IsMarkedForDeletion:                       "data_platform_product_master_mrp_area_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductMasterMRPAreaDatumWhere = struct {
	Product                                   whereHelperstring
	BusinessPartner                           whereHelperint
	Plant                                     whereHelperstring
	MRPArea                                   whereHelperstring
	StorageLocationForMRP                     whereHelperstring
	MRPType                                   whereHelperstring
	MRPController                             whereHelperstring
	ReorderThresholdQuantity                  whereHelpernull_Float32
	PlanningTimeFence                         whereHelpernull_Int
	MRPPlanningCalendar                       whereHelpernull_String
	SafetyStockQuantityInBaseUnit             whereHelpernull_Float32
	SafetyDuration                            whereHelpernull_Int
	MaximumStockQuantityInBaseUnit            whereHelpernull_Float32
	MinumumDeliveryQuantityInBaseUnit         whereHelpernull_Float32
	MinumumDeliveryLotSizeQuantityInBaseUnit  whereHelpernull_Float32
	StandardDeliveryLotSizeQuantityInBaseUnit whereHelpernull_Float32
	DeliveryLotSizeRoundingQuantityInBaseUnit whereHelpernull_Float32
	MaximumDeliveryLotSizeQuantityInBaseUnit  whereHelpernull_Float32
	MaximumDeliveryQuantityInBaseUnit         whereHelpernull_Float32
	DeliveryLotSizeIsFixed                    whereHelpernull_Bool
	StandardDeliveryDurationInDays            whereHelpernull_Int
	IsMarkedForDeletion                       whereHelpernull_Bool
}{
	Product:                                  whereHelperstring{field: "`data_platform_product_master_mrp_area_data`.`Product`"},
	BusinessPartner:                          whereHelperint{field: "`data_platform_product_master_mrp_area_data`.`BusinessPartner`"},
	Plant:                                    whereHelperstring{field: "`data_platform_product_master_mrp_area_data`.`Plant`"},
	MRPArea:                                  whereHelperstring{field: "`data_platform_product_master_mrp_area_data`.`MRPArea`"},
	StorageLocationForMRP:                    whereHelperstring{field: "`data_platform_product_master_mrp_area_data`.`StorageLocationForMRP`"},
	MRPType:                                  whereHelperstring{field: "`data_platform_product_master_mrp_area_data`.`MRPType`"},
	MRPController:                            whereHelperstring{field: "`data_platform_product_master_mrp_area_data`.`MRPController`"},
	ReorderThresholdQuantity:                 whereHelpernull_Float32{field: "`data_platform_product_master_mrp_area_data`.`ReorderThresholdQuantity`"},
	PlanningTimeFence:                        whereHelpernull_Int{field: "`data_platform_product_master_mrp_area_data`.`PlanningTimeFence`"},
	MRPPlanningCalendar:                      whereHelpernull_String{field: "`data_platform_product_master_mrp_area_data`.`MRPPlanningCalendar`"},
	SafetyStockQuantityInBaseUnit:            whereHelpernull_Float32{field: "`data_platform_product_master_mrp_area_data`.`SafetyStockQuantityInBaseUnit`"},
	SafetyDuration:                           whereHelpernull_Int{field: "`data_platform_product_master_mrp_area_data`.`SafetyDuration`"},
	MaximumStockQuantityInBaseUnit:           whereHelpernull_Float32{field: "`data_platform_product_master_mrp_area_data`.`MaximumStockQuantityInBaseUnit`"},
	MinumumDeliveryQuantityInBaseUnit:        whereHelpernull_Float32{field: "`data_platform_product_master_mrp_area_data`.`MinumumDeliveryQuantityInBaseUnit`"},
	MinumumDeliveryLotSizeQuantityInBaseUnit: whereHelpernull_Float32{field: "`data_platform_product_master_mrp_area_data`.`MinumumDeliveryLotSizeQuantityInBaseUnit`"},
	StandardDeliveryLotSizeQuantityInBaseUnit: whereHelpernull_Float32{field: "`data_platform_product_master_mrp_area_data`.`StandardDeliveryLotSizeQuantityInBaseUnit`"},
	DeliveryLotSizeRoundingQuantityInBaseUnit: whereHelpernull_Float32{field: "`data_platform_product_master_mrp_area_data`.`DeliveryLotSizeRoundingQuantityInBaseUnit`"},
	MaximumDeliveryLotSizeQuantityInBaseUnit:  whereHelpernull_Float32{field: "`data_platform_product_master_mrp_area_data`.`MaximumDeliveryLotSizeQuantityInBaseUnit`"},
	MaximumDeliveryQuantityInBaseUnit:         whereHelpernull_Float32{field: "`data_platform_product_master_mrp_area_data`.`MaximumDeliveryQuantityInBaseUnit`"},
	DeliveryLotSizeIsFixed:                    whereHelpernull_Bool{field: "`data_platform_product_master_mrp_area_data`.`DeliveryLotSizeIsFixed`"},
	StandardDeliveryDurationInDays:            whereHelpernull_Int{field: "`data_platform_product_master_mrp_area_data`.`StandardDeliveryDurationInDays`"},
	IsMarkedForDeletion:                       whereHelpernull_Bool{field: "`data_platform_product_master_mrp_area_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductMasterMRPAreaDatumRels is where relationship names are stored.
var DataPlatformProductMasterMRPAreaDatumRels = struct {
}{}

// dataPlatformProductMasterMRPAreaDatumR is where relationships are stored.
type dataPlatformProductMasterMRPAreaDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductMasterMRPAreaDatumR) NewStruct() *dataPlatformProductMasterMRPAreaDatumR {
	return &dataPlatformProductMasterMRPAreaDatumR{}
}

// dataPlatformProductMasterMRPAreaDatumL is where Load methods for each relationship are stored.
type dataPlatformProductMasterMRPAreaDatumL struct{}

var (
	dataPlatformProductMasterMRPAreaDatumAllColumns            = []string{"Product", "BusinessPartner", "Plant", "MRPArea", "StorageLocationForMRP", "MRPType", "MRPController", "ReorderThresholdQuantity", "PlanningTimeFence", "MRPPlanningCalendar", "SafetyStockQuantityInBaseUnit", "SafetyDuration", "MaximumStockQuantityInBaseUnit", "MinumumDeliveryQuantityInBaseUnit", "MinumumDeliveryLotSizeQuantityInBaseUnit", "StandardDeliveryLotSizeQuantityInBaseUnit", "DeliveryLotSizeRoundingQuantityInBaseUnit", "MaximumDeliveryLotSizeQuantityInBaseUnit", "MaximumDeliveryQuantityInBaseUnit", "DeliveryLotSizeIsFixed", "StandardDeliveryDurationInDays", "IsMarkedForDeletion"}
	dataPlatformProductMasterMRPAreaDatumColumnsWithoutDefault = []string{"Product", "BusinessPartner", "Plant", "MRPArea", "StorageLocationForMRP", "MRPType", "MRPController", "ReorderThresholdQuantity", "PlanningTimeFence", "MRPPlanningCalendar", "SafetyStockQuantityInBaseUnit", "SafetyDuration", "MaximumStockQuantityInBaseUnit", "MinumumDeliveryQuantityInBaseUnit", "MinumumDeliveryLotSizeQuantityInBaseUnit", "StandardDeliveryLotSizeQuantityInBaseUnit", "DeliveryLotSizeRoundingQuantityInBaseUnit", "MaximumDeliveryLotSizeQuantityInBaseUnit", "MaximumDeliveryQuantityInBaseUnit", "DeliveryLotSizeIsFixed", "StandardDeliveryDurationInDays", "IsMarkedForDeletion"}
	dataPlatformProductMasterMRPAreaDatumColumnsWithDefault    = []string{}
	dataPlatformProductMasterMRPAreaDatumPrimaryKeyColumns     = []string{"Product", "BusinessPartner", "Plant", "MRPArea"}
	dataPlatformProductMasterMRPAreaDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductMasterMRPAreaDatumSlice is an alias for a slice of pointers to DataPlatformProductMasterMRPAreaDatum.
	// This should almost always be used instead of []DataPlatformProductMasterMRPAreaDatum.
	DataPlatformProductMasterMRPAreaDatumSlice []*DataPlatformProductMasterMRPAreaDatum

	dataPlatformProductMasterMRPAreaDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductMasterMRPAreaDatumType                 = reflect.TypeOf(&DataPlatformProductMasterMRPAreaDatum{})
	dataPlatformProductMasterMRPAreaDatumMapping              = queries.MakeStructMapping(dataPlatformProductMasterMRPAreaDatumType)
	dataPlatformProductMasterMRPAreaDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductMasterMRPAreaDatumType, dataPlatformProductMasterMRPAreaDatumMapping, dataPlatformProductMasterMRPAreaDatumPrimaryKeyColumns)
	dataPlatformProductMasterMRPAreaDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductMasterMRPAreaDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductMasterMRPAreaDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductMasterMRPAreaDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductMasterMRPAreaDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductMasterMRPAreaDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductMasterMRPAreaDatum record from the query.
func (q dataPlatformProductMasterMRPAreaDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductMasterMRPAreaDatum, error) {
	o := &DataPlatformProductMasterMRPAreaDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_master_mrp_area_data")
	}

	return o, nil
}

// All returns all DataPlatformProductMasterMRPAreaDatum records from the query.
func (q dataPlatformProductMasterMRPAreaDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductMasterMRPAreaDatumSlice, error) {
	var o []*DataPlatformProductMasterMRPAreaDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductMasterMRPAreaDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductMasterMRPAreaDatum records in the query.
func (q dataPlatformProductMasterMRPAreaDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_master_mrp_area_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductMasterMRPAreaDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_master_mrp_area_data exists")
	}

	return count > 0, nil
}

// DataPlatformProductMasterMRPAreaData retrieves all the records using an executor.
func DataPlatformProductMasterMRPAreaData(mods ...qm.QueryMod) dataPlatformProductMasterMRPAreaDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_master_mrp_area_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_master_mrp_area_data`.*"})
	}

	return dataPlatformProductMasterMRPAreaDatumQuery{q}
}

// FindDataPlatformProductMasterMRPAreaDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductMasterMRPAreaDatum(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, mRPArea string, selectCols ...string) (*DataPlatformProductMasterMRPAreaDatum, error) {
	dataPlatformProductMasterMRPAreaDatumObj := &DataPlatformProductMasterMRPAreaDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_master_mrp_area_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `MRPArea`=?", sel,
	)

	q := queries.Raw(query, product, businessPartner, plant, mRPArea)

	err := q.Bind(ctx, exec, dataPlatformProductMasterMRPAreaDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_master_mrp_area_data")
	}

	return dataPlatformProductMasterMRPAreaDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductMasterMRPAreaDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_mrp_area_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterMRPAreaDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductMasterMRPAreaDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterMRPAreaDatumInsertCache[key]
	dataPlatformProductMasterMRPAreaDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductMasterMRPAreaDatumAllColumns,
			dataPlatformProductMasterMRPAreaDatumColumnsWithDefault,
			dataPlatformProductMasterMRPAreaDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterMRPAreaDatumType, dataPlatformProductMasterMRPAreaDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterMRPAreaDatumType, dataPlatformProductMasterMRPAreaDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_master_mrp_area_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_master_mrp_area_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_master_mrp_area_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterMRPAreaDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_master_mrp_area_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.BusinessPartner,
		o.Plant,
		o.MRPArea,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_mrp_area_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterMRPAreaDatumInsertCacheMut.Lock()
		dataPlatformProductMasterMRPAreaDatumInsertCache[key] = cache
		dataPlatformProductMasterMRPAreaDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductMasterMRPAreaDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductMasterMRPAreaDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductMasterMRPAreaDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductMasterMRPAreaDatumUpdateCache[key]
	dataPlatformProductMasterMRPAreaDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductMasterMRPAreaDatumAllColumns,
			dataPlatformProductMasterMRPAreaDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_master_mrp_area_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_master_mrp_area_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterMRPAreaDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterMRPAreaDatumType, dataPlatformProductMasterMRPAreaDatumMapping, append(wl, dataPlatformProductMasterMRPAreaDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_master_mrp_area_data row")
	}

	if !cached {
		dataPlatformProductMasterMRPAreaDatumUpdateCacheMut.Lock()
		dataPlatformProductMasterMRPAreaDatumUpdateCache[key] = cache
		dataPlatformProductMasterMRPAreaDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductMasterMRPAreaDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_master_mrp_area_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductMasterMRPAreaDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterMRPAreaDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_master_mrp_area_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterMRPAreaDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductMasterMRPAreaDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductMasterMRPAreaDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductMasterMRPAreaDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_mrp_area_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterMRPAreaDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductMasterMRPAreaDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductMasterMRPAreaDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterMRPAreaDatumUpsertCache[key]
	dataPlatformProductMasterMRPAreaDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductMasterMRPAreaDatumAllColumns,
			dataPlatformProductMasterMRPAreaDatumColumnsWithDefault,
			dataPlatformProductMasterMRPAreaDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductMasterMRPAreaDatumAllColumns,
			dataPlatformProductMasterMRPAreaDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_master_mrp_area_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_master_mrp_area_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_master_mrp_area_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterMRPAreaDatumType, dataPlatformProductMasterMRPAreaDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterMRPAreaDatumType, dataPlatformProductMasterMRPAreaDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_master_mrp_area_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductMasterMRPAreaDatumType, dataPlatformProductMasterMRPAreaDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_master_mrp_area_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_mrp_area_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterMRPAreaDatumUpsertCacheMut.Lock()
		dataPlatformProductMasterMRPAreaDatumUpsertCache[key] = cache
		dataPlatformProductMasterMRPAreaDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductMasterMRPAreaDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductMasterMRPAreaDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductMasterMRPAreaDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductMasterMRPAreaDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_master_mrp_area_data` WHERE `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `MRPArea`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_master_mrp_area_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductMasterMRPAreaDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductMasterMRPAreaDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_master_mrp_area_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductMasterMRPAreaDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterMRPAreaDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_master_mrp_area_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterMRPAreaDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductMasterMRPAreaDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductMasterMRPAreaDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductMasterMRPAreaDatum(ctx, exec, o.Product, o.BusinessPartner, o.Plant, o.MRPArea)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductMasterMRPAreaDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductMasterMRPAreaDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterMRPAreaDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_master_mrp_area_data`.* FROM `data_platform_product_master_mrp_area_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterMRPAreaDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductMasterMRPAreaDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductMasterMRPAreaDatumExists checks if the DataPlatformProductMasterMRPAreaDatum row exists.
func DataPlatformProductMasterMRPAreaDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, mRPArea string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_master_mrp_area_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? AND `MRPArea`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, businessPartner, plant, mRPArea)
	}
	row := exec.QueryRowContext(ctx, sql, product, businessPartner, plant, mRPArea)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_master_mrp_area_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductMasterMRPAreaDatum row exists.
func (o *DataPlatformProductMasterMRPAreaDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductMasterMRPAreaDatumExists(ctx, exec, o.Product, o.BusinessPartner, o.Plant, o.MRPArea)
}
