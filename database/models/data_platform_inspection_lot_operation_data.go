// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInspectionLotOperationDatum is an object representing the database table.
type DataPlatformInspectionLotOperationDatum struct {
	InspectionLot                            int          `boil:"InspectionLot" json:"InspectionLot" toml:"InspectionLot" yaml:"InspectionLot"`
	Operations                               int          `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	OperationsItem                           int          `boil:"OperationsItem" json:"OperationsItem" toml:"OperationsItem" yaml:"OperationsItem"`
	OperationID                              int          `boil:"OperationID" json:"OperationID" toml:"OperationID" yaml:"OperationID"`
	Inspection                               int          `boil:"Inspection" json:"Inspection" toml:"Inspection" yaml:"Inspection"`
	OperationType                            string       `boil:"OperationType" json:"OperationType" toml:"OperationType" yaml:"OperationType"`
	SupplyChainRelationshipID                int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID        int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID   int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipProductionPlantID int          `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID"`
	Product                                  string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Buyer                                    int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                   int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                           int          `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverToPlant                           string       `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	DeliverFromParty                         int          `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverFromPlant                         string       `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	InspectionPlantBusinessPartner           int          `boil:"InspectionPlantBusinessPartner" json:"InspectionPlantBusinessPartner" toml:"InspectionPlantBusinessPartner" yaml:"InspectionPlantBusinessPartner"`
	InspectionPlant                          string       `boil:"InspectionPlant" json:"InspectionPlant" toml:"InspectionPlant" yaml:"InspectionPlant"`
	Sequence                                 int          `boil:"Sequence" json:"Sequence" toml:"Sequence" yaml:"Sequence"`
	SequenceText                             null.String  `boil:"SequenceText" json:"SequenceText,omitempty" toml:"SequenceText" yaml:"SequenceText,omitempty"`
	OperationText                            string       `boil:"OperationText" json:"OperationText" toml:"OperationText" yaml:"OperationText"`
	OperationStatus                          null.String  `boil:"OperationStatus" json:"OperationStatus,omitempty" toml:"OperationStatus" yaml:"OperationStatus,omitempty"`
	ResponsiblePlannerGroup                  null.String  `boil:"ResponsiblePlannerGroup" json:"ResponsiblePlannerGroup,omitempty" toml:"ResponsiblePlannerGroup" yaml:"ResponsiblePlannerGroup,omitempty"`
	OperationUnit                            string       `boil:"OperationUnit" json:"OperationUnit" toml:"OperationUnit" yaml:"OperationUnit"`
	StandardLotSizeQuantity                  null.Float32 `boil:"StandardLotSizeQuantity" json:"StandardLotSizeQuantity,omitempty" toml:"StandardLotSizeQuantity" yaml:"StandardLotSizeQuantity,omitempty"`
	MinimumLotSizeQuantity                   null.Float32 `boil:"MinimumLotSizeQuantity" json:"MinimumLotSizeQuantity,omitempty" toml:"MinimumLotSizeQuantity" yaml:"MinimumLotSizeQuantity,omitempty"`
	MaximumLotSizeQuantity                   null.Float32 `boil:"MaximumLotSizeQuantity" json:"MaximumLotSizeQuantity,omitempty" toml:"MaximumLotSizeQuantity" yaml:"MaximumLotSizeQuantity,omitempty"`
	PlainLongText                            null.String  `boil:"PlainLongText" json:"PlainLongText,omitempty" toml:"PlainLongText" yaml:"PlainLongText,omitempty"`
	WorkCenter                               null.Int     `boil:"WorkCenter" json:"WorkCenter,omitempty" toml:"WorkCenter" yaml:"WorkCenter,omitempty"`
	CapacityCategoryCode                     null.String  `boil:"CapacityCategoryCode" json:"CapacityCategoryCode,omitempty" toml:"CapacityCategoryCode" yaml:"CapacityCategoryCode,omitempty"`
	OperationCostingRelevancyType            null.String  `boil:"OperationCostingRelevancyType" json:"OperationCostingRelevancyType,omitempty" toml:"OperationCostingRelevancyType" yaml:"OperationCostingRelevancyType,omitempty"`
	OperationSetupType                       null.String  `boil:"OperationSetupType" json:"OperationSetupType,omitempty" toml:"OperationSetupType" yaml:"OperationSetupType,omitempty"`
	OperationSetupGroupCategory              null.String  `boil:"OperationSetupGroupCategory" json:"OperationSetupGroupCategory,omitempty" toml:"OperationSetupGroupCategory" yaml:"OperationSetupGroupCategory,omitempty"`
	OperationSetupGroup                      null.String  `boil:"OperationSetupGroup" json:"OperationSetupGroup,omitempty" toml:"OperationSetupGroup" yaml:"OperationSetupGroup,omitempty"`
	OperationReferenceQuantity               null.Float32 `boil:"OperationReferenceQuantity" json:"OperationReferenceQuantity,omitempty" toml:"OperationReferenceQuantity" yaml:"OperationReferenceQuantity,omitempty"`
	MaximumWaitDuration                      null.Float32 `boil:"MaximumWaitDuration" json:"MaximumWaitDuration,omitempty" toml:"MaximumWaitDuration" yaml:"MaximumWaitDuration,omitempty"`
	StandardWaitDuration                     null.Float32 `boil:"StandardWaitDuration" json:"StandardWaitDuration,omitempty" toml:"StandardWaitDuration" yaml:"StandardWaitDuration,omitempty"`
	MinimumWaitDuration                      null.Float32 `boil:"MinimumWaitDuration" json:"MinimumWaitDuration,omitempty" toml:"MinimumWaitDuration" yaml:"MinimumWaitDuration,omitempty"`
	WaitDurationUnit                         null.String  `boil:"WaitDurationUnit" json:"WaitDurationUnit,omitempty" toml:"WaitDurationUnit" yaml:"WaitDurationUnit,omitempty"`
	MaximumQueueDuration                     null.Float32 `boil:"MaximumQueueDuration" json:"MaximumQueueDuration,omitempty" toml:"MaximumQueueDuration" yaml:"MaximumQueueDuration,omitempty"`
	StandardQueueDuration                    null.Float32 `boil:"StandardQueueDuration" json:"StandardQueueDuration,omitempty" toml:"StandardQueueDuration" yaml:"StandardQueueDuration,omitempty"`
	MinimumQueueDuration                     null.Float32 `boil:"MinimumQueueDuration" json:"MinimumQueueDuration,omitempty" toml:"MinimumQueueDuration" yaml:"MinimumQueueDuration,omitempty"`
	QueueDurationUnit                        null.String  `boil:"QueueDurationUnit" json:"QueueDurationUnit,omitempty" toml:"QueueDurationUnit" yaml:"QueueDurationUnit,omitempty"`
	MaximumMoveDuration                      null.Float32 `boil:"MaximumMoveDuration" json:"MaximumMoveDuration,omitempty" toml:"MaximumMoveDuration" yaml:"MaximumMoveDuration,omitempty"`
	StandardMoveDuration                     null.Float32 `boil:"StandardMoveDuration" json:"StandardMoveDuration,omitempty" toml:"StandardMoveDuration" yaml:"StandardMoveDuration,omitempty"`
	MinimumMoveDuration                      null.Float32 `boil:"MinimumMoveDuration" json:"MinimumMoveDuration,omitempty" toml:"MinimumMoveDuration" yaml:"MinimumMoveDuration,omitempty"`
	MoveDurationUnit                         null.String  `boil:"MoveDurationUnit" json:"MoveDurationUnit,omitempty" toml:"MoveDurationUnit" yaml:"MoveDurationUnit,omitempty"`
	StandardDeliveryDuration                 null.Float32 `boil:"StandardDeliveryDuration" json:"StandardDeliveryDuration,omitempty" toml:"StandardDeliveryDuration" yaml:"StandardDeliveryDuration,omitempty"`
	StandardDeliveryDurationUnit             null.String  `boil:"StandardDeliveryDurationUnit" json:"StandardDeliveryDurationUnit,omitempty" toml:"StandardDeliveryDurationUnit" yaml:"StandardDeliveryDurationUnit,omitempty"`
	StandardOperationScrapPercent            null.Float32 `boil:"StandardOperationScrapPercent" json:"StandardOperationScrapPercent,omitempty" toml:"StandardOperationScrapPercent" yaml:"StandardOperationScrapPercent,omitempty"`
	CostElement                              null.String  `boil:"CostElement" json:"CostElement,omitempty" toml:"CostElement" yaml:"CostElement,omitempty"`
	ValidityStartDate                        null.String  `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate                          null.String  `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	CreationDate                             string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                           string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsCancelled                              null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion                      null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformInspectionLotOperationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInspectionLotOperationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInspectionLotOperationDatumColumns = struct {
	InspectionLot                            string
	Operations                               string
	OperationsItem                           string
	OperationID                              string
	Inspection                               string
	OperationType                            string
	SupplyChainRelationshipID                string
	SupplyChainRelationshipDeliveryID        string
	SupplyChainRelationshipDeliveryPlantID   string
	SupplyChainRelationshipProductionPlantID string
	Product                                  string
	Buyer                                    string
	Seller                                   string
	DeliverToParty                           string
	DeliverToPlant                           string
	DeliverFromParty                         string
	DeliverFromPlant                         string
	InspectionPlantBusinessPartner           string
	InspectionPlant                          string
	Sequence                                 string
	SequenceText                             string
	OperationText                            string
	OperationStatus                          string
	ResponsiblePlannerGroup                  string
	OperationUnit                            string
	StandardLotSizeQuantity                  string
	MinimumLotSizeQuantity                   string
	MaximumLotSizeQuantity                   string
	PlainLongText                            string
	WorkCenter                               string
	CapacityCategoryCode                     string
	OperationCostingRelevancyType            string
	OperationSetupType                       string
	OperationSetupGroupCategory              string
	OperationSetupGroup                      string
	OperationReferenceQuantity               string
	MaximumWaitDuration                      string
	StandardWaitDuration                     string
	MinimumWaitDuration                      string
	WaitDurationUnit                         string
	MaximumQueueDuration                     string
	StandardQueueDuration                    string
	MinimumQueueDuration                     string
	QueueDurationUnit                        string
	MaximumMoveDuration                      string
	StandardMoveDuration                     string
	MinimumMoveDuration                      string
	MoveDurationUnit                         string
	StandardDeliveryDuration                 string
	StandardDeliveryDurationUnit             string
	StandardOperationScrapPercent            string
	CostElement                              string
	ValidityStartDate                        string
	ValidityEndDate                          string
	CreationDate                             string
	LastChangeDate                           string
	IsCancelled                              string
	IsMarkedForDeletion                      string
}{
	InspectionLot:                            "InspectionLot",
	Operations:                               "Operations",
	OperationsItem:                           "OperationsItem",
	OperationID:                              "OperationID",
	Inspection:                               "Inspection",
	OperationType:                            "OperationType",
	SupplyChainRelationshipID:                "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:        "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:   "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID: "SupplyChainRelationshipProductionPlantID",
	Product:                                  "Product",
	Buyer:                                    "Buyer",
	Seller:                                   "Seller",
	DeliverToParty:                           "DeliverToParty",
	DeliverToPlant:                           "DeliverToPlant",
	DeliverFromParty:                         "DeliverFromParty",
	DeliverFromPlant:                         "DeliverFromPlant",
	InspectionPlantBusinessPartner:           "InspectionPlantBusinessPartner",
	InspectionPlant:                          "InspectionPlant",
	Sequence:                                 "Sequence",
	SequenceText:                             "SequenceText",
	OperationText:                            "OperationText",
	OperationStatus:                          "OperationStatus",
	ResponsiblePlannerGroup:                  "ResponsiblePlannerGroup",
	OperationUnit:                            "OperationUnit",
	StandardLotSizeQuantity:                  "StandardLotSizeQuantity",
	MinimumLotSizeQuantity:                   "MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:                   "MaximumLotSizeQuantity",
	PlainLongText:                            "PlainLongText",
	WorkCenter:                               "WorkCenter",
	CapacityCategoryCode:                     "CapacityCategoryCode",
	OperationCostingRelevancyType:            "OperationCostingRelevancyType",
	OperationSetupType:                       "OperationSetupType",
	OperationSetupGroupCategory:              "OperationSetupGroupCategory",
	OperationSetupGroup:                      "OperationSetupGroup",
	OperationReferenceQuantity:               "OperationReferenceQuantity",
	MaximumWaitDuration:                      "MaximumWaitDuration",
	StandardWaitDuration:                     "StandardWaitDuration",
	MinimumWaitDuration:                      "MinimumWaitDuration",
	WaitDurationUnit:                         "WaitDurationUnit",
	MaximumQueueDuration:                     "MaximumQueueDuration",
	StandardQueueDuration:                    "StandardQueueDuration",
	MinimumQueueDuration:                     "MinimumQueueDuration",
	QueueDurationUnit:                        "QueueDurationUnit",
	MaximumMoveDuration:                      "MaximumMoveDuration",
	StandardMoveDuration:                     "StandardMoveDuration",
	MinimumMoveDuration:                      "MinimumMoveDuration",
	MoveDurationUnit:                         "MoveDurationUnit",
	StandardDeliveryDuration:                 "StandardDeliveryDuration",
	StandardDeliveryDurationUnit:             "StandardDeliveryDurationUnit",
	StandardOperationScrapPercent:            "StandardOperationScrapPercent",
	CostElement:                              "CostElement",
	ValidityStartDate:                        "ValidityStartDate",
	ValidityEndDate:                          "ValidityEndDate",
	CreationDate:                             "CreationDate",
	LastChangeDate:                           "LastChangeDate",
	IsCancelled:                              "IsCancelled",
	IsMarkedForDeletion:                      "IsMarkedForDeletion",
}

var DataPlatformInspectionLotOperationDatumTableColumns = struct {
	InspectionLot                            string
	Operations                               string
	OperationsItem                           string
	OperationID                              string
	Inspection                               string
	OperationType                            string
	SupplyChainRelationshipID                string
	SupplyChainRelationshipDeliveryID        string
	SupplyChainRelationshipDeliveryPlantID   string
	SupplyChainRelationshipProductionPlantID string
	Product                                  string
	Buyer                                    string
	Seller                                   string
	DeliverToParty                           string
	DeliverToPlant                           string
	DeliverFromParty                         string
	DeliverFromPlant                         string
	InspectionPlantBusinessPartner           string
	InspectionPlant                          string
	Sequence                                 string
	SequenceText                             string
	OperationText                            string
	OperationStatus                          string
	ResponsiblePlannerGroup                  string
	OperationUnit                            string
	StandardLotSizeQuantity                  string
	MinimumLotSizeQuantity                   string
	MaximumLotSizeQuantity                   string
	PlainLongText                            string
	WorkCenter                               string
	CapacityCategoryCode                     string
	OperationCostingRelevancyType            string
	OperationSetupType                       string
	OperationSetupGroupCategory              string
	OperationSetupGroup                      string
	OperationReferenceQuantity               string
	MaximumWaitDuration                      string
	StandardWaitDuration                     string
	MinimumWaitDuration                      string
	WaitDurationUnit                         string
	MaximumQueueDuration                     string
	StandardQueueDuration                    string
	MinimumQueueDuration                     string
	QueueDurationUnit                        string
	MaximumMoveDuration                      string
	StandardMoveDuration                     string
	MinimumMoveDuration                      string
	MoveDurationUnit                         string
	StandardDeliveryDuration                 string
	StandardDeliveryDurationUnit             string
	StandardOperationScrapPercent            string
	CostElement                              string
	ValidityStartDate                        string
	ValidityEndDate                          string
	CreationDate                             string
	LastChangeDate                           string
	IsCancelled                              string
	IsMarkedForDeletion                      string
}{
	InspectionLot:                            "data_platform_inspection_lot_operation_data.InspectionLot",
	Operations:                               "data_platform_inspection_lot_operation_data.Operations",
	OperationsItem:                           "data_platform_inspection_lot_operation_data.OperationsItem",
	OperationID:                              "data_platform_inspection_lot_operation_data.OperationID",
	Inspection:                               "data_platform_inspection_lot_operation_data.Inspection",
	OperationType:                            "data_platform_inspection_lot_operation_data.OperationType",
	SupplyChainRelationshipID:                "data_platform_inspection_lot_operation_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:        "data_platform_inspection_lot_operation_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:   "data_platform_inspection_lot_operation_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID: "data_platform_inspection_lot_operation_data.SupplyChainRelationshipProductionPlantID",
	Product:                                  "data_platform_inspection_lot_operation_data.Product",
	Buyer:                                    "data_platform_inspection_lot_operation_data.Buyer",
	Seller:                                   "data_platform_inspection_lot_operation_data.Seller",
	DeliverToParty:                           "data_platform_inspection_lot_operation_data.DeliverToParty",
	DeliverToPlant:                           "data_platform_inspection_lot_operation_data.DeliverToPlant",
	DeliverFromParty:                         "data_platform_inspection_lot_operation_data.DeliverFromParty",
	DeliverFromPlant:                         "data_platform_inspection_lot_operation_data.DeliverFromPlant",
	InspectionPlantBusinessPartner:           "data_platform_inspection_lot_operation_data.InspectionPlantBusinessPartner",
	InspectionPlant:                          "data_platform_inspection_lot_operation_data.InspectionPlant",
	Sequence:                                 "data_platform_inspection_lot_operation_data.Sequence",
	SequenceText:                             "data_platform_inspection_lot_operation_data.SequenceText",
	OperationText:                            "data_platform_inspection_lot_operation_data.OperationText",
	OperationStatus:                          "data_platform_inspection_lot_operation_data.OperationStatus",
	ResponsiblePlannerGroup:                  "data_platform_inspection_lot_operation_data.ResponsiblePlannerGroup",
	OperationUnit:                            "data_platform_inspection_lot_operation_data.OperationUnit",
	StandardLotSizeQuantity:                  "data_platform_inspection_lot_operation_data.StandardLotSizeQuantity",
	MinimumLotSizeQuantity:                   "data_platform_inspection_lot_operation_data.MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:                   "data_platform_inspection_lot_operation_data.MaximumLotSizeQuantity",
	PlainLongText:                            "data_platform_inspection_lot_operation_data.PlainLongText",
	WorkCenter:                               "data_platform_inspection_lot_operation_data.WorkCenter",
	CapacityCategoryCode:                     "data_platform_inspection_lot_operation_data.CapacityCategoryCode",
	OperationCostingRelevancyType:            "data_platform_inspection_lot_operation_data.OperationCostingRelevancyType",
	OperationSetupType:                       "data_platform_inspection_lot_operation_data.OperationSetupType",
	OperationSetupGroupCategory:              "data_platform_inspection_lot_operation_data.OperationSetupGroupCategory",
	OperationSetupGroup:                      "data_platform_inspection_lot_operation_data.OperationSetupGroup",
	OperationReferenceQuantity:               "data_platform_inspection_lot_operation_data.OperationReferenceQuantity",
	MaximumWaitDuration:                      "data_platform_inspection_lot_operation_data.MaximumWaitDuration",
	StandardWaitDuration:                     "data_platform_inspection_lot_operation_data.StandardWaitDuration",
	MinimumWaitDuration:                      "data_platform_inspection_lot_operation_data.MinimumWaitDuration",
	WaitDurationUnit:                         "data_platform_inspection_lot_operation_data.WaitDurationUnit",
	MaximumQueueDuration:                     "data_platform_inspection_lot_operation_data.MaximumQueueDuration",
	StandardQueueDuration:                    "data_platform_inspection_lot_operation_data.StandardQueueDuration",
	MinimumQueueDuration:                     "data_platform_inspection_lot_operation_data.MinimumQueueDuration",
	QueueDurationUnit:                        "data_platform_inspection_lot_operation_data.QueueDurationUnit",
	MaximumMoveDuration:                      "data_platform_inspection_lot_operation_data.MaximumMoveDuration",
	StandardMoveDuration:                     "data_platform_inspection_lot_operation_data.StandardMoveDuration",
	MinimumMoveDuration:                      "data_platform_inspection_lot_operation_data.MinimumMoveDuration",
	MoveDurationUnit:                         "data_platform_inspection_lot_operation_data.MoveDurationUnit",
	StandardDeliveryDuration:                 "data_platform_inspection_lot_operation_data.StandardDeliveryDuration",
	StandardDeliveryDurationUnit:             "data_platform_inspection_lot_operation_data.StandardDeliveryDurationUnit",
	StandardOperationScrapPercent:            "data_platform_inspection_lot_operation_data.StandardOperationScrapPercent",
	CostElement:                              "data_platform_inspection_lot_operation_data.CostElement",
	ValidityStartDate:                        "data_platform_inspection_lot_operation_data.ValidityStartDate",
	ValidityEndDate:                          "data_platform_inspection_lot_operation_data.ValidityEndDate",
	CreationDate:                             "data_platform_inspection_lot_operation_data.CreationDate",
	LastChangeDate:                           "data_platform_inspection_lot_operation_data.LastChangeDate",
	IsCancelled:                              "data_platform_inspection_lot_operation_data.IsCancelled",
	IsMarkedForDeletion:                      "data_platform_inspection_lot_operation_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformInspectionLotOperationDatumWhere = struct {
	InspectionLot                            whereHelperint
	Operations                               whereHelperint
	OperationsItem                           whereHelperint
	OperationID                              whereHelperint
	Inspection                               whereHelperint
	OperationType                            whereHelperstring
	SupplyChainRelationshipID                whereHelperint
	SupplyChainRelationshipDeliveryID        whereHelperint
	SupplyChainRelationshipDeliveryPlantID   whereHelperint
	SupplyChainRelationshipProductionPlantID whereHelperint
	Product                                  whereHelperstring
	Buyer                                    whereHelperint
	Seller                                   whereHelperint
	DeliverToParty                           whereHelperint
	DeliverToPlant                           whereHelperstring
	DeliverFromParty                         whereHelperint
	DeliverFromPlant                         whereHelperstring
	InspectionPlantBusinessPartner           whereHelperint
	InspectionPlant                          whereHelperstring
	Sequence                                 whereHelperint
	SequenceText                             whereHelpernull_String
	OperationText                            whereHelperstring
	OperationStatus                          whereHelpernull_String
	ResponsiblePlannerGroup                  whereHelpernull_String
	OperationUnit                            whereHelperstring
	StandardLotSizeQuantity                  whereHelpernull_Float32
	MinimumLotSizeQuantity                   whereHelpernull_Float32
	MaximumLotSizeQuantity                   whereHelpernull_Float32
	PlainLongText                            whereHelpernull_String
	WorkCenter                               whereHelpernull_Int
	CapacityCategoryCode                     whereHelpernull_String
	OperationCostingRelevancyType            whereHelpernull_String
	OperationSetupType                       whereHelpernull_String
	OperationSetupGroupCategory              whereHelpernull_String
	OperationSetupGroup                      whereHelpernull_String
	OperationReferenceQuantity               whereHelpernull_Float32
	MaximumWaitDuration                      whereHelpernull_Float32
	StandardWaitDuration                     whereHelpernull_Float32
	MinimumWaitDuration                      whereHelpernull_Float32
	WaitDurationUnit                         whereHelpernull_String
	MaximumQueueDuration                     whereHelpernull_Float32
	StandardQueueDuration                    whereHelpernull_Float32
	MinimumQueueDuration                     whereHelpernull_Float32
	QueueDurationUnit                        whereHelpernull_String
	MaximumMoveDuration                      whereHelpernull_Float32
	StandardMoveDuration                     whereHelpernull_Float32
	MinimumMoveDuration                      whereHelpernull_Float32
	MoveDurationUnit                         whereHelpernull_String
	StandardDeliveryDuration                 whereHelpernull_Float32
	StandardDeliveryDurationUnit             whereHelpernull_String
	StandardOperationScrapPercent            whereHelpernull_Float32
	CostElement                              whereHelpernull_String
	ValidityStartDate                        whereHelpernull_String
	ValidityEndDate                          whereHelpernull_String
	CreationDate                             whereHelperstring
	LastChangeDate                           whereHelperstring
	IsCancelled                              whereHelpernull_Bool
	IsMarkedForDeletion                      whereHelpernull_Bool
}{
	InspectionLot:                            whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`InspectionLot`"},
	Operations:                               whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`Operations`"},
	OperationsItem:                           whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`OperationsItem`"},
	OperationID:                              whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`OperationID`"},
	Inspection:                               whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`Inspection`"},
	OperationType:                            whereHelperstring{field: "`data_platform_inspection_lot_operation_data`.`OperationType`"},
	SupplyChainRelationshipID:                whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:        whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:   whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipProductionPlantID: whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`SupplyChainRelationshipProductionPlantID`"},
	Product:                                  whereHelperstring{field: "`data_platform_inspection_lot_operation_data`.`Product`"},
	Buyer:                                    whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`Buyer`"},
	Seller:                                   whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`Seller`"},
	DeliverToParty:                           whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`DeliverToParty`"},
	DeliverToPlant:                           whereHelperstring{field: "`data_platform_inspection_lot_operation_data`.`DeliverToPlant`"},
	DeliverFromParty:                         whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`DeliverFromParty`"},
	DeliverFromPlant:                         whereHelperstring{field: "`data_platform_inspection_lot_operation_data`.`DeliverFromPlant`"},
	InspectionPlantBusinessPartner:           whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`InspectionPlantBusinessPartner`"},
	InspectionPlant:                          whereHelperstring{field: "`data_platform_inspection_lot_operation_data`.`InspectionPlant`"},
	Sequence:                                 whereHelperint{field: "`data_platform_inspection_lot_operation_data`.`Sequence`"},
	SequenceText:                             whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`SequenceText`"},
	OperationText:                            whereHelperstring{field: "`data_platform_inspection_lot_operation_data`.`OperationText`"},
	OperationStatus:                          whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`OperationStatus`"},
	ResponsiblePlannerGroup:                  whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`ResponsiblePlannerGroup`"},
	OperationUnit:                            whereHelperstring{field: "`data_platform_inspection_lot_operation_data`.`OperationUnit`"},
	StandardLotSizeQuantity:                  whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`StandardLotSizeQuantity`"},
	MinimumLotSizeQuantity:                   whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`MinimumLotSizeQuantity`"},
	MaximumLotSizeQuantity:                   whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`MaximumLotSizeQuantity`"},
	PlainLongText:                            whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`PlainLongText`"},
	WorkCenter:                               whereHelpernull_Int{field: "`data_platform_inspection_lot_operation_data`.`WorkCenter`"},
	CapacityCategoryCode:                     whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`CapacityCategoryCode`"},
	OperationCostingRelevancyType:            whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`OperationCostingRelevancyType`"},
	OperationSetupType:                       whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`OperationSetupType`"},
	OperationSetupGroupCategory:              whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`OperationSetupGroupCategory`"},
	OperationSetupGroup:                      whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`OperationSetupGroup`"},
	OperationReferenceQuantity:               whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`OperationReferenceQuantity`"},
	MaximumWaitDuration:                      whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`MaximumWaitDuration`"},
	StandardWaitDuration:                     whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`StandardWaitDuration`"},
	MinimumWaitDuration:                      whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`MinimumWaitDuration`"},
	WaitDurationUnit:                         whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`WaitDurationUnit`"},
	MaximumQueueDuration:                     whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`MaximumQueueDuration`"},
	StandardQueueDuration:                    whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`StandardQueueDuration`"},
	MinimumQueueDuration:                     whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`MinimumQueueDuration`"},
	QueueDurationUnit:                        whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`QueueDurationUnit`"},
	MaximumMoveDuration:                      whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`MaximumMoveDuration`"},
	StandardMoveDuration:                     whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`StandardMoveDuration`"},
	MinimumMoveDuration:                      whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`MinimumMoveDuration`"},
	MoveDurationUnit:                         whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`MoveDurationUnit`"},
	StandardDeliveryDuration:                 whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`StandardDeliveryDuration`"},
	StandardDeliveryDurationUnit:             whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`StandardDeliveryDurationUnit`"},
	StandardOperationScrapPercent:            whereHelpernull_Float32{field: "`data_platform_inspection_lot_operation_data`.`StandardOperationScrapPercent`"},
	CostElement:                              whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`CostElement`"},
	ValidityStartDate:                        whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`ValidityStartDate`"},
	ValidityEndDate:                          whereHelpernull_String{field: "`data_platform_inspection_lot_operation_data`.`ValidityEndDate`"},
	CreationDate:                             whereHelperstring{field: "`data_platform_inspection_lot_operation_data`.`CreationDate`"},
	LastChangeDate:                           whereHelperstring{field: "`data_platform_inspection_lot_operation_data`.`LastChangeDate`"},
	IsCancelled:                              whereHelpernull_Bool{field: "`data_platform_inspection_lot_operation_data`.`IsCancelled`"},
	IsMarkedForDeletion:                      whereHelpernull_Bool{field: "`data_platform_inspection_lot_operation_data`.`IsMarkedForDeletion`"},
}

// DataPlatformInspectionLotOperationDatumRels is where relationship names are stored.
var DataPlatformInspectionLotOperationDatumRels = struct {
	MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum             string
	OperationUnitDataPlatformQuantityUnitQuantityUnitDatum                string
	OperationIDDataPlatformOperationsItemOperationDatum                   string
	QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum            string
	BuyerDataPlatformSCRDeliveryRelationDatum                             string
	BuyerDataPlatformSCRGeneralDatum                                      string
	StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum string
	WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum             string
	WorkCenterDataPlatformWorkCenterGeneralDatum                          string
	InspectionLotDataPlatformInspectionLotConfirmationHeaderData          string
}{
	MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:             "MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	OperationUnitDataPlatformQuantityUnitQuantityUnitDatum:                "OperationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	OperationIDDataPlatformOperationsItemOperationDatum:                   "OperationIDDataPlatformOperationsItemOperationDatum",
	QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:            "QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:                             "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:                                      "BuyerDataPlatformSCRGeneralDatum",
	StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: "StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:             "WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	WorkCenterDataPlatformWorkCenterGeneralDatum:                          "WorkCenterDataPlatformWorkCenterGeneralDatum",
	InspectionLotDataPlatformInspectionLotConfirmationHeaderData:          "InspectionLotDataPlatformInspectionLotConfirmationHeaderData",
}

// dataPlatformInspectionLotOperationDatumR is where relationships are stored.
type dataPlatformInspectionLotOperationDatumR struct {
	MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum             *DataPlatformQuantityUnitQuantityUnitDatum            `boil:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	OperationUnitDataPlatformQuantityUnitQuantityUnitDatum                *DataPlatformQuantityUnitQuantityUnitDatum            `boil:"OperationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"OperationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"OperationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"OperationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	OperationIDDataPlatformOperationsItemOperationDatum                   *DataPlatformOperationsItemOperationDatum             `boil:"OperationIDDataPlatformOperationsItemOperationDatum" json:"OperationIDDataPlatformOperationsItemOperationDatum" toml:"OperationIDDataPlatformOperationsItemOperationDatum" yaml:"OperationIDDataPlatformOperationsItemOperationDatum"`
	QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum            *DataPlatformQuantityUnitQuantityUnitDatum            `boil:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum                             *DataPlatformSCRDeliveryRelationDatum                 `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum                                      *DataPlatformSCRGeneralDatum                          `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum            `boil:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum             *DataPlatformQuantityUnitQuantityUnitDatum            `boil:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	WorkCenterDataPlatformWorkCenterGeneralDatum                          *DataPlatformWorkCenterGeneralDatum                   `boil:"WorkCenterDataPlatformWorkCenterGeneralDatum" json:"WorkCenterDataPlatformWorkCenterGeneralDatum" toml:"WorkCenterDataPlatformWorkCenterGeneralDatum" yaml:"WorkCenterDataPlatformWorkCenterGeneralDatum"`
	InspectionLotDataPlatformInspectionLotConfirmationHeaderData          DataPlatformInspectionLotConfirmationHeaderDatumSlice `boil:"InspectionLotDataPlatformInspectionLotConfirmationHeaderData" json:"InspectionLotDataPlatformInspectionLotConfirmationHeaderData" toml:"InspectionLotDataPlatformInspectionLotConfirmationHeaderData" yaml:"InspectionLotDataPlatformInspectionLotConfirmationHeaderData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInspectionLotOperationDatumR) NewStruct() *dataPlatformInspectionLotOperationDatumR {
	return &dataPlatformInspectionLotOperationDatumR{}
}

func (r *dataPlatformInspectionLotOperationDatumR) GetMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionLotOperationDatumR) GetOperationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.OperationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionLotOperationDatumR) GetOperationIDDataPlatformOperationsItemOperationDatum() *DataPlatformOperationsItemOperationDatum {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformOperationsItemOperationDatum
}

func (r *dataPlatformInspectionLotOperationDatumR) GetQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionLotOperationDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformInspectionLotOperationDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformInspectionLotOperationDatumR) GetStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionLotOperationDatumR) GetWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformInspectionLotOperationDatumR) GetWorkCenterDataPlatformWorkCenterGeneralDatum() *DataPlatformWorkCenterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.WorkCenterDataPlatformWorkCenterGeneralDatum
}

func (r *dataPlatformInspectionLotOperationDatumR) GetInspectionLotDataPlatformInspectionLotConfirmationHeaderData() DataPlatformInspectionLotConfirmationHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformInspectionLotConfirmationHeaderData
}

// dataPlatformInspectionLotOperationDatumL is where Load methods for each relationship are stored.
type dataPlatformInspectionLotOperationDatumL struct{}

var (
	dataPlatformInspectionLotOperationDatumAllColumns            = []string{"InspectionLot", "Operations", "OperationsItem", "OperationID", "Inspection", "OperationType", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "Product", "Buyer", "Seller", "DeliverToParty", "DeliverToPlant", "DeliverFromParty", "DeliverFromPlant", "InspectionPlantBusinessPartner", "InspectionPlant", "Sequence", "SequenceText", "OperationText", "OperationStatus", "ResponsiblePlannerGroup", "OperationUnit", "StandardLotSizeQuantity", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "PlainLongText", "WorkCenter", "CapacityCategoryCode", "OperationCostingRelevancyType", "OperationSetupType", "OperationSetupGroupCategory", "OperationSetupGroup", "OperationReferenceQuantity", "MaximumWaitDuration", "StandardWaitDuration", "MinimumWaitDuration", "WaitDurationUnit", "MaximumQueueDuration", "StandardQueueDuration", "MinimumQueueDuration", "QueueDurationUnit", "MaximumMoveDuration", "StandardMoveDuration", "MinimumMoveDuration", "MoveDurationUnit", "StandardDeliveryDuration", "StandardDeliveryDurationUnit", "StandardOperationScrapPercent", "CostElement", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformInspectionLotOperationDatumColumnsWithoutDefault = []string{"InspectionLot", "Operations", "OperationsItem", "OperationID", "Inspection", "OperationType", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "Product", "Buyer", "Seller", "DeliverToParty", "DeliverToPlant", "DeliverFromParty", "DeliverFromPlant", "InspectionPlantBusinessPartner", "InspectionPlant", "Sequence", "SequenceText", "OperationText", "OperationStatus", "ResponsiblePlannerGroup", "OperationUnit", "StandardLotSizeQuantity", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "PlainLongText", "WorkCenter", "CapacityCategoryCode", "OperationCostingRelevancyType", "OperationSetupType", "OperationSetupGroupCategory", "OperationSetupGroup", "OperationReferenceQuantity", "MaximumWaitDuration", "StandardWaitDuration", "MinimumWaitDuration", "WaitDurationUnit", "MaximumQueueDuration", "StandardQueueDuration", "MinimumQueueDuration", "QueueDurationUnit", "MaximumMoveDuration", "StandardMoveDuration", "MinimumMoveDuration", "MoveDurationUnit", "StandardDeliveryDuration", "StandardDeliveryDurationUnit", "StandardOperationScrapPercent", "CostElement", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformInspectionLotOperationDatumColumnsWithDefault    = []string{}
	dataPlatformInspectionLotOperationDatumPrimaryKeyColumns     = []string{"InspectionLot", "Operations", "OperationsItem", "OperationID"}
	dataPlatformInspectionLotOperationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInspectionLotOperationDatumSlice is an alias for a slice of pointers to DataPlatformInspectionLotOperationDatum.
	// This should almost always be used instead of []DataPlatformInspectionLotOperationDatum.
	DataPlatformInspectionLotOperationDatumSlice []*DataPlatformInspectionLotOperationDatum

	dataPlatformInspectionLotOperationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInspectionLotOperationDatumType                 = reflect.TypeOf(&DataPlatformInspectionLotOperationDatum{})
	dataPlatformInspectionLotOperationDatumMapping              = queries.MakeStructMapping(dataPlatformInspectionLotOperationDatumType)
	dataPlatformInspectionLotOperationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInspectionLotOperationDatumType, dataPlatformInspectionLotOperationDatumMapping, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns)
	dataPlatformInspectionLotOperationDatumInsertCacheMut       sync.RWMutex
	dataPlatformInspectionLotOperationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInspectionLotOperationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInspectionLotOperationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInspectionLotOperationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInspectionLotOperationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInspectionLotOperationDatum record from the query.
func (q dataPlatformInspectionLotOperationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInspectionLotOperationDatum, error) {
	o := &DataPlatformInspectionLotOperationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_inspection_lot_operation_data")
	}

	return o, nil
}

// All returns all DataPlatformInspectionLotOperationDatum records from the query.
func (q dataPlatformInspectionLotOperationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInspectionLotOperationDatumSlice, error) {
	var o []*DataPlatformInspectionLotOperationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInspectionLotOperationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInspectionLotOperationDatum records in the query.
func (q dataPlatformInspectionLotOperationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_inspection_lot_operation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInspectionLotOperationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_inspection_lot_operation_data exists")
	}

	return count > 0, nil
}

// MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotOperationDatum) MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.MoveDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// OperationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotOperationDatum) OperationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.OperationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// OperationIDDataPlatformOperationsItemOperationDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotOperationDatum) OperationIDDataPlatformOperationsItemOperationDatum(mods ...qm.QueryMod) dataPlatformOperationsItemOperationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OperationID` = ?", o.OperationID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOperationsItemOperationData(queryMods...)
}

// QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotOperationDatum) QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.QueueDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotOperationDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotOperationDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotOperationDatum) StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.StandardDeliveryDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotOperationDatum) WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.WaitDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// WorkCenterDataPlatformWorkCenterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotOperationDatum) WorkCenterDataPlatformWorkCenterGeneralDatum(mods ...qm.QueryMod) dataPlatformWorkCenterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`WorkCenter` = ?", o.WorkCenter),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformWorkCenterGeneralData(queryMods...)
}

// InspectionLotDataPlatformInspectionLotConfirmationHeaderData retrieves all the data_platform_inspection_lot_confirmation_header_datum's DataPlatformInspectionLotConfirmationHeaderData with an executor via InspectionLot column.
func (o *DataPlatformInspectionLotOperationDatum) InspectionLotDataPlatformInspectionLotConfirmationHeaderData(mods ...qm.QueryMod) dataPlatformInspectionLotConfirmationHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_lot_confirmation_header_data`.`InspectionLot`=?", o.InspectionLot),
	)

	return DataPlatformInspectionLotConfirmationHeaderData(queryMods...)
}

// LoadMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotOperationDatumL) LoadMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotOperationDatum
	var object *DataPlatformInspectionLotOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotOperationDatum.(*DataPlatformInspectionLotOperationDatum)
		if !ok {
			object = new(DataPlatformInspectionLotOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotOperationDatum.(*[]*DataPlatformInspectionLotOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotOperationDatumR{}
		}
		if !queries.IsNil(object.MoveDurationUnit) {
			args = append(args, object.MoveDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MoveDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MoveDurationUnit) {
				args = append(args, obj.MoveDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MoveDurationUnit, foreign.QuantityUnit) {
				local.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotOperationDatumL) LoadOperationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotOperationDatum
	var object *DataPlatformInspectionLotOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotOperationDatum.(*DataPlatformInspectionLotOperationDatum)
		if !ok {
			object = new(DataPlatformInspectionLotOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotOperationDatum.(*[]*DataPlatformInspectionLotOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotOperationDatumR{}
		}
		args = append(args, object.OperationUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.OperationUnit {
					continue Outer
				}
			}

			args = append(args, obj.OperationUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OperationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OperationUnit == foreign.QuantityUnit {
				local.R.OperationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformOperationsItemOperationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotOperationDatumL) LoadOperationIDDataPlatformOperationsItemOperationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotOperationDatum
	var object *DataPlatformInspectionLotOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotOperationDatum.(*DataPlatformInspectionLotOperationDatum)
		if !ok {
			object = new(DataPlatformInspectionLotOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotOperationDatum.(*[]*DataPlatformInspectionLotOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotOperationDatumR{}
		}
		args = append(args, object.OperationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.OperationID {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_operation_data`),
		qm.WhereIn(`data_platform_operations_item_operation_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOperationsItemOperationDatum")
	}

	var resultSlice []*DataPlatformOperationsItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOperationsItemOperationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_operations_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_operation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OperationIDDataPlatformOperationsItemOperationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OperationID == foreign.OperationID {
				local.R.OperationIDDataPlatformOperationsItemOperationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotOperationDatumL) LoadQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotOperationDatum
	var object *DataPlatformInspectionLotOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotOperationDatum.(*DataPlatformInspectionLotOperationDatum)
		if !ok {
			object = new(DataPlatformInspectionLotOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotOperationDatum.(*[]*DataPlatformInspectionLotOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotOperationDatumR{}
		}
		if !queries.IsNil(object.QueueDurationUnit) {
			args = append(args, object.QueueDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QueueDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.QueueDurationUnit) {
				args = append(args, obj.QueueDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.QueueDurationUnit, foreign.QuantityUnit) {
				local.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotOperationDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotOperationDatum
	var object *DataPlatformInspectionLotOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotOperationDatum.(*DataPlatformInspectionLotOperationDatum)
		if !ok {
			object = new(DataPlatformInspectionLotOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotOperationDatum.(*[]*DataPlatformInspectionLotOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotOperationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotOperationDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotOperationDatum
	var object *DataPlatformInspectionLotOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotOperationDatum.(*DataPlatformInspectionLotOperationDatum)
		if !ok {
			object = new(DataPlatformInspectionLotOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotOperationDatum.(*[]*DataPlatformInspectionLotOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotOperationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotOperationDatumL) LoadStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotOperationDatum
	var object *DataPlatformInspectionLotOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotOperationDatum.(*DataPlatformInspectionLotOperationDatum)
		if !ok {
			object = new(DataPlatformInspectionLotOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotOperationDatum.(*[]*DataPlatformInspectionLotOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotOperationDatumR{}
		}
		if !queries.IsNil(object.StandardDeliveryDurationUnit) {
			args = append(args, object.StandardDeliveryDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StandardDeliveryDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.StandardDeliveryDurationUnit) {
				args = append(args, obj.StandardDeliveryDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StandardDeliveryDurationUnit, foreign.QuantityUnit) {
				local.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotOperationDatumL) LoadWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotOperationDatum
	var object *DataPlatformInspectionLotOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotOperationDatum.(*DataPlatformInspectionLotOperationDatum)
		if !ok {
			object = new(DataPlatformInspectionLotOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotOperationDatum.(*[]*DataPlatformInspectionLotOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotOperationDatumR{}
		}
		if !queries.IsNil(object.WaitDurationUnit) {
			args = append(args, object.WaitDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WaitDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.WaitDurationUnit) {
				args = append(args, obj.WaitDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WaitDurationUnit, foreign.QuantityUnit) {
				local.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadWorkCenterDataPlatformWorkCenterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotOperationDatumL) LoadWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotOperationDatum
	var object *DataPlatformInspectionLotOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotOperationDatum.(*DataPlatformInspectionLotOperationDatum)
		if !ok {
			object = new(DataPlatformInspectionLotOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotOperationDatum.(*[]*DataPlatformInspectionLotOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotOperationDatumR{}
		}
		if !queries.IsNil(object.WorkCenter) {
			args = append(args, object.WorkCenter)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WorkCenter) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.WorkCenter) {
				args = append(args, obj.WorkCenter)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_work_center_general_data`),
		qm.WhereIn(`data_platform_work_center_general_data.WorkCenter in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformWorkCenterGeneralDatum")
	}

	var resultSlice []*DataPlatformWorkCenterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformWorkCenterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_work_center_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_work_center_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WorkCenterDataPlatformWorkCenterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WorkCenter, foreign.WorkCenter) {
				local.R.WorkCenterDataPlatformWorkCenterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionLotDataPlatformInspectionLotConfirmationHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionLotOperationDatumL) LoadInspectionLotDataPlatformInspectionLotConfirmationHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotOperationDatum
	var object *DataPlatformInspectionLotOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotOperationDatum.(*DataPlatformInspectionLotOperationDatum)
		if !ok {
			object = new(DataPlatformInspectionLotOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotOperationDatum.(*[]*DataPlatformInspectionLotOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotOperationDatumR{}
		}
		args = append(args, object.InspectionLot)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionLot {
					continue Outer
				}
			}

			args = append(args, obj.InspectionLot)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_confirmation_header_data`),
		qm.WhereIn(`data_platform_inspection_lot_confirmation_header_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_lot_confirmation_header_data")
	}

	var resultSlice []*DataPlatformInspectionLotConfirmationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_lot_confirmation_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_lot_confirmation_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_confirmation_header_data")
	}

	if singular {
		object.R.InspectionLotDataPlatformInspectionLotConfirmationHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InspectionLot == foreign.InspectionLot {
				local.R.InspectionLotDataPlatformInspectionLotConfirmationHeaderData = append(local.R.InspectionLotDataPlatformInspectionLotConfirmationHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// SetMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionLotOperationDatum to the related item.
// Sets o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionLotOperationDatum) SetMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"MoveDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MoveDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformInspectionLotOperationDatumR{
			MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformInspectionLotOperationDatum) RemoveMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.MoveDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("MoveDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOperationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionLotOperationDatum to the related item.
// Sets o.R.OperationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionLotOperationDatum) SetOperationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OperationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OperationUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformInspectionLotOperationDatumR{
			OperationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.OperationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetOperationIDDataPlatformOperationsItemOperationDatum of the dataPlatformInspectionLotOperationDatum to the related item.
// Sets o.R.OperationIDDataPlatformOperationsItemOperationDatum to related.
func (o *DataPlatformInspectionLotOperationDatum) SetOperationIDDataPlatformOperationsItemOperationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOperationsItemOperationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OperationID, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OperationID = related.OperationID
	if o.R == nil {
		o.R = &dataPlatformInspectionLotOperationDatumR{
			OperationIDDataPlatformOperationsItemOperationDatum: related,
		}
	} else {
		o.R.OperationIDDataPlatformOperationsItemOperationDatum = related
	}

	return nil
}

// SetQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionLotOperationDatum to the related item.
// Sets o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionLotOperationDatum) SetQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"QueueDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.QueueDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformInspectionLotOperationDatumR{
			QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformInspectionLotOperationDatum) RemoveQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.QueueDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("QueueDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformInspectionLotOperationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformInspectionLotOperationDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformInspectionLotOperationDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformInspectionLotOperationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformInspectionLotOperationDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformInspectionLotOperationDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// SetStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionLotOperationDatum to the related item.
// Sets o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionLotOperationDatum) SetStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"StandardDeliveryDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StandardDeliveryDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformInspectionLotOperationDatumR{
			StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformInspectionLotOperationDatum) RemoveStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.StandardDeliveryDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("StandardDeliveryDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformInspectionLotOperationDatum to the related item.
// Sets o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformInspectionLotOperationDatum) SetWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"WaitDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WaitDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformInspectionLotOperationDatumR{
			WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformInspectionLotOperationDatum) RemoveWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.WaitDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("WaitDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetWorkCenterDataPlatformWorkCenterGeneralDatum of the dataPlatformInspectionLotOperationDatum to the related item.
// Sets o.R.WorkCenterDataPlatformWorkCenterGeneralDatum to related.
func (o *DataPlatformInspectionLotOperationDatum) SetWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformWorkCenterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"WorkCenter"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.WorkCenter, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WorkCenter, related.WorkCenter)
	if o.R == nil {
		o.R = &dataPlatformInspectionLotOperationDatumR{
			WorkCenterDataPlatformWorkCenterGeneralDatum: related,
		}
	} else {
		o.R.WorkCenterDataPlatformWorkCenterGeneralDatum = related
	}

	return nil
}

// RemoveWorkCenterDataPlatformWorkCenterGeneralDatum relationship.
// Sets o.R.WorkCenterDataPlatformWorkCenterGeneralDatum to nil.
func (o *DataPlatformInspectionLotOperationDatum) RemoveWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformWorkCenterGeneralDatum) error {
	var err error

	queries.SetScanner(&o.WorkCenter, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("WorkCenter")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.WorkCenterDataPlatformWorkCenterGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// AddInspectionLotDataPlatformInspectionLotConfirmationHeaderData adds the given related objects to the existing relationships
// of the data_platform_inspection_lot_operation_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionLotDataPlatformInspectionLotConfirmationHeaderData.
func (o *DataPlatformInspectionLotOperationDatum) AddInspectionLotDataPlatformInspectionLotConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotConfirmationHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionLot = o.InspectionLot
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_lot_confirmation_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotConfirmationHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InspectionLot, rel.InspectionLot, rel.Operations, rel.OperationsItem, rel.OperationID, rel.ConfirmationCountingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionLot = o.InspectionLot
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionLotOperationDatumR{
			InspectionLotDataPlatformInspectionLotConfirmationHeaderData: related,
		}
	} else {
		o.R.InspectionLotDataPlatformInspectionLotConfirmationHeaderData = append(o.R.InspectionLotDataPlatformInspectionLotConfirmationHeaderData, related...)
	}

	return nil
}

// DataPlatformInspectionLotOperationData retrieves all the records using an executor.
func DataPlatformInspectionLotOperationData(mods ...qm.QueryMod) dataPlatformInspectionLotOperationDatumQuery {
	mods = append(mods, qm.From("`data_platform_inspection_lot_operation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_inspection_lot_operation_data`.*"})
	}

	return dataPlatformInspectionLotOperationDatumQuery{q}
}

// FindDataPlatformInspectionLotOperationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInspectionLotOperationDatum(ctx context.Context, exec boil.ContextExecutor, inspectionLot int, operations int, operationsItem int, operationID int, selectCols ...string) (*DataPlatformInspectionLotOperationDatum, error) {
	dataPlatformInspectionLotOperationDatumObj := &DataPlatformInspectionLotOperationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_inspection_lot_operation_data` where `InspectionLot`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=?", sel,
	)

	q := queries.Raw(query, inspectionLot, operations, operationsItem, operationID)

	err := q.Bind(ctx, exec, dataPlatformInspectionLotOperationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_inspection_lot_operation_data")
	}

	return dataPlatformInspectionLotOperationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInspectionLotOperationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_lot_operation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionLotOperationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInspectionLotOperationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotOperationDatumInsertCache[key]
	dataPlatformInspectionLotOperationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInspectionLotOperationDatumAllColumns,
			dataPlatformInspectionLotOperationDatumColumnsWithDefault,
			dataPlatformInspectionLotOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotOperationDatumType, dataPlatformInspectionLotOperationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInspectionLotOperationDatumType, dataPlatformInspectionLotOperationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_inspection_lot_operation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_inspection_lot_operation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_inspection_lot_operation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_inspection_lot_operation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InspectionLot,
		o.Operations,
		o.OperationsItem,
		o.OperationID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_lot_operation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionLotOperationDatumInsertCacheMut.Lock()
		dataPlatformInspectionLotOperationDatumInsertCache[key] = cache
		dataPlatformInspectionLotOperationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInspectionLotOperationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInspectionLotOperationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInspectionLotOperationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotOperationDatumUpdateCache[key]
	dataPlatformInspectionLotOperationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInspectionLotOperationDatumAllColumns,
			dataPlatformInspectionLotOperationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_inspection_lot_operation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_inspection_lot_operation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotOperationDatumType, dataPlatformInspectionLotOperationDatumMapping, append(wl, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_inspection_lot_operation_data row")
	}

	if !cached {
		dataPlatformInspectionLotOperationDatumUpdateCacheMut.Lock()
		dataPlatformInspectionLotOperationDatumUpdateCache[key] = cache
		dataPlatformInspectionLotOperationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInspectionLotOperationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_inspection_lot_operation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInspectionLotOperationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_inspection_lot_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInspectionLotOperationDatum slice")
	}

	return nil
}

var mySQLDataPlatformInspectionLotOperationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInspectionLotOperationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_lot_operation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionLotOperationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInspectionLotOperationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInspectionLotOperationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotOperationDatumUpsertCache[key]
	dataPlatformInspectionLotOperationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInspectionLotOperationDatumAllColumns,
			dataPlatformInspectionLotOperationDatumColumnsWithDefault,
			dataPlatformInspectionLotOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInspectionLotOperationDatumAllColumns,
			dataPlatformInspectionLotOperationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_inspection_lot_operation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_inspection_lot_operation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_inspection_lot_operation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotOperationDatumType, dataPlatformInspectionLotOperationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInspectionLotOperationDatumType, dataPlatformInspectionLotOperationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_inspection_lot_operation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInspectionLotOperationDatumType, dataPlatformInspectionLotOperationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_inspection_lot_operation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_lot_operation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionLotOperationDatumUpsertCacheMut.Lock()
		dataPlatformInspectionLotOperationDatumUpsertCache[key] = cache
		dataPlatformInspectionLotOperationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInspectionLotOperationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInspectionLotOperationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInspectionLotOperationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInspectionLotOperationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_inspection_lot_operation_data` WHERE `InspectionLot`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_inspection_lot_operation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInspectionLotOperationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInspectionLotOperationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_inspection_lot_operation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInspectionLotOperationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_inspection_lot_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInspectionLotOperationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInspectionLotOperationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInspectionLotOperationDatum(ctx, exec, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInspectionLotOperationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInspectionLotOperationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_inspection_lot_operation_data`.* FROM `data_platform_inspection_lot_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotOperationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInspectionLotOperationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInspectionLotOperationDatumExists checks if the DataPlatformInspectionLotOperationDatum row exists.
func DataPlatformInspectionLotOperationDatumExists(ctx context.Context, exec boil.ContextExecutor, inspectionLot int, operations int, operationsItem int, operationID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_inspection_lot_operation_data` where `InspectionLot`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inspectionLot, operations, operationsItem, operationID)
	}
	row := exec.QueryRowContext(ctx, sql, inspectionLot, operations, operationsItem, operationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_inspection_lot_operation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInspectionLotOperationDatum row exists.
func (o *DataPlatformInspectionLotOperationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInspectionLotOperationDatumExists(ctx, exec, o.InspectionLot, o.Operations, o.OperationsItem, o.OperationID)
}
