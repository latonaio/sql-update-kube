// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformTaxCodeTaxRateDatum is an object representing the database table.
type DataPlatformTaxCodeTaxRateDatum struct {
	Country           string       `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	TaxCode           string       `boil:"TaxCode" json:"TaxCode" toml:"TaxCode" yaml:"TaxCode"`
	ValidityEndDate   string       `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	ValidityStartDate string       `boil:"ValidityStartDate" json:"ValidityStartDate" toml:"ValidityStartDate" yaml:"ValidityStartDate"`
	TaxRate           null.Float32 `boil:"TaxRate" json:"TaxRate,omitempty" toml:"TaxRate" yaml:"TaxRate,omitempty"`

	R *dataPlatformTaxCodeTaxRateDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformTaxCodeTaxRateDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformTaxCodeTaxRateDatumColumns = struct {
	Country           string
	TaxCode           string
	ValidityEndDate   string
	ValidityStartDate string
	TaxRate           string
}{
	Country:           "Country",
	TaxCode:           "TaxCode",
	ValidityEndDate:   "ValidityEndDate",
	ValidityStartDate: "ValidityStartDate",
	TaxRate:           "TaxRate",
}

var DataPlatformTaxCodeTaxRateDatumTableColumns = struct {
	Country           string
	TaxCode           string
	ValidityEndDate   string
	ValidityStartDate string
	TaxRate           string
}{
	Country:           "data_platform_tax_code_tax_rate_data.Country",
	TaxCode:           "data_platform_tax_code_tax_rate_data.TaxCode",
	ValidityEndDate:   "data_platform_tax_code_tax_rate_data.ValidityEndDate",
	ValidityStartDate: "data_platform_tax_code_tax_rate_data.ValidityStartDate",
	TaxRate:           "data_platform_tax_code_tax_rate_data.TaxRate",
}

// Generated where

var DataPlatformTaxCodeTaxRateDatumWhere = struct {
	Country           whereHelperstring
	TaxCode           whereHelperstring
	ValidityEndDate   whereHelperstring
	ValidityStartDate whereHelperstring
	TaxRate           whereHelpernull_Float32
}{
	Country:           whereHelperstring{field: "`data_platform_tax_code_tax_rate_data`.`Country`"},
	TaxCode:           whereHelperstring{field: "`data_platform_tax_code_tax_rate_data`.`TaxCode`"},
	ValidityEndDate:   whereHelperstring{field: "`data_platform_tax_code_tax_rate_data`.`ValidityEndDate`"},
	ValidityStartDate: whereHelperstring{field: "`data_platform_tax_code_tax_rate_data`.`ValidityStartDate`"},
	TaxRate:           whereHelpernull_Float32{field: "`data_platform_tax_code_tax_rate_data`.`TaxRate`"},
}

// DataPlatformTaxCodeTaxRateDatumRels is where relationship names are stored.
var DataPlatformTaxCodeTaxRateDatumRels = struct {
	CountryDataPlatformTaxCodeTaxCodeDatum string
}{
	CountryDataPlatformTaxCodeTaxCodeDatum: "CountryDataPlatformTaxCodeTaxCodeDatum",
}

// dataPlatformTaxCodeTaxRateDatumR is where relationships are stored.
type dataPlatformTaxCodeTaxRateDatumR struct {
	CountryDataPlatformTaxCodeTaxCodeDatum *DataPlatformTaxCodeTaxCodeDatum `boil:"CountryDataPlatformTaxCodeTaxCodeDatum" json:"CountryDataPlatformTaxCodeTaxCodeDatum" toml:"CountryDataPlatformTaxCodeTaxCodeDatum" yaml:"CountryDataPlatformTaxCodeTaxCodeDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformTaxCodeTaxRateDatumR) NewStruct() *dataPlatformTaxCodeTaxRateDatumR {
	return &dataPlatformTaxCodeTaxRateDatumR{}
}

func (r *dataPlatformTaxCodeTaxRateDatumR) GetCountryDataPlatformTaxCodeTaxCodeDatum() *DataPlatformTaxCodeTaxCodeDatum {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformTaxCodeTaxCodeDatum
}

// dataPlatformTaxCodeTaxRateDatumL is where Load methods for each relationship are stored.
type dataPlatformTaxCodeTaxRateDatumL struct{}

var (
	dataPlatformTaxCodeTaxRateDatumAllColumns            = []string{"Country", "TaxCode", "ValidityEndDate", "ValidityStartDate", "TaxRate"}
	dataPlatformTaxCodeTaxRateDatumColumnsWithoutDefault = []string{"Country", "TaxCode", "ValidityEndDate", "ValidityStartDate", "TaxRate"}
	dataPlatformTaxCodeTaxRateDatumColumnsWithDefault    = []string{}
	dataPlatformTaxCodeTaxRateDatumPrimaryKeyColumns     = []string{"Country", "TaxCode", "ValidityEndDate", "ValidityStartDate"}
	dataPlatformTaxCodeTaxRateDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformTaxCodeTaxRateDatumSlice is an alias for a slice of pointers to DataPlatformTaxCodeTaxRateDatum.
	// This should almost always be used instead of []DataPlatformTaxCodeTaxRateDatum.
	DataPlatformTaxCodeTaxRateDatumSlice []*DataPlatformTaxCodeTaxRateDatum

	dataPlatformTaxCodeTaxRateDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformTaxCodeTaxRateDatumType                 = reflect.TypeOf(&DataPlatformTaxCodeTaxRateDatum{})
	dataPlatformTaxCodeTaxRateDatumMapping              = queries.MakeStructMapping(dataPlatformTaxCodeTaxRateDatumType)
	dataPlatformTaxCodeTaxRateDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformTaxCodeTaxRateDatumType, dataPlatformTaxCodeTaxRateDatumMapping, dataPlatformTaxCodeTaxRateDatumPrimaryKeyColumns)
	dataPlatformTaxCodeTaxRateDatumInsertCacheMut       sync.RWMutex
	dataPlatformTaxCodeTaxRateDatumInsertCache          = make(map[string]insertCache)
	dataPlatformTaxCodeTaxRateDatumUpdateCacheMut       sync.RWMutex
	dataPlatformTaxCodeTaxRateDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformTaxCodeTaxRateDatumUpsertCacheMut       sync.RWMutex
	dataPlatformTaxCodeTaxRateDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformTaxCodeTaxRateDatum record from the query.
func (q dataPlatformTaxCodeTaxRateDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformTaxCodeTaxRateDatum, error) {
	o := &DataPlatformTaxCodeTaxRateDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_tax_code_tax_rate_data")
	}

	return o, nil
}

// All returns all DataPlatformTaxCodeTaxRateDatum records from the query.
func (q dataPlatformTaxCodeTaxRateDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformTaxCodeTaxRateDatumSlice, error) {
	var o []*DataPlatformTaxCodeTaxRateDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformTaxCodeTaxRateDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformTaxCodeTaxRateDatum records in the query.
func (q dataPlatformTaxCodeTaxRateDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_tax_code_tax_rate_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformTaxCodeTaxRateDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_tax_code_tax_rate_data exists")
	}

	return count > 0, nil
}

// CountryDataPlatformTaxCodeTaxCodeDatum pointed to by the foreign key.
func (o *DataPlatformTaxCodeTaxRateDatum) CountryDataPlatformTaxCodeTaxCodeDatum(mods ...qm.QueryMod) dataPlatformTaxCodeTaxCodeDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.Country),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformTaxCodeTaxCodeData(queryMods...)
}

// LoadCountryDataPlatformTaxCodeTaxCodeDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformTaxCodeTaxRateDatumL) LoadCountryDataPlatformTaxCodeTaxCodeDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformTaxCodeTaxRateDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformTaxCodeTaxRateDatum
	var object *DataPlatformTaxCodeTaxRateDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformTaxCodeTaxRateDatum.(*DataPlatformTaxCodeTaxRateDatum)
		if !ok {
			object = new(DataPlatformTaxCodeTaxRateDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformTaxCodeTaxRateDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformTaxCodeTaxRateDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformTaxCodeTaxRateDatum.(*[]*DataPlatformTaxCodeTaxRateDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformTaxCodeTaxRateDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformTaxCodeTaxRateDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformTaxCodeTaxRateDatumR{}
		}
		args = append(args, object.Country)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformTaxCodeTaxRateDatumR{}
			}

			for _, a := range args {
				if a == obj.Country {
					continue Outer
				}
			}

			args = append(args, obj.Country)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_tax_code_tax_code_data`),
		qm.WhereIn(`data_platform_tax_code_tax_code_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformTaxCodeTaxCodeDatum")
	}

	var resultSlice []*DataPlatformTaxCodeTaxCodeDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformTaxCodeTaxCodeDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_tax_code_tax_code_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_tax_code_tax_code_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryDataPlatformTaxCodeTaxCodeDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Country == foreign.Country {
				local.R.CountryDataPlatformTaxCodeTaxCodeDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetCountryDataPlatformTaxCodeTaxCodeDatum of the dataPlatformTaxCodeTaxRateDatum to the related item.
// Sets o.R.CountryDataPlatformTaxCodeTaxCodeDatum to related.
func (o *DataPlatformTaxCodeTaxRateDatum) SetCountryDataPlatformTaxCodeTaxCodeDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformTaxCodeTaxCodeDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_tax_code_tax_rate_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformTaxCodeTaxRateDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.Country, o.TaxCode, o.ValidityEndDate, o.ValidityStartDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Country = related.Country
	if o.R == nil {
		o.R = &dataPlatformTaxCodeTaxRateDatumR{
			CountryDataPlatformTaxCodeTaxCodeDatum: related,
		}
	} else {
		o.R.CountryDataPlatformTaxCodeTaxCodeDatum = related
	}

	return nil
}

// DataPlatformTaxCodeTaxRateData retrieves all the records using an executor.
func DataPlatformTaxCodeTaxRateData(mods ...qm.QueryMod) dataPlatformTaxCodeTaxRateDatumQuery {
	mods = append(mods, qm.From("`data_platform_tax_code_tax_rate_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_tax_code_tax_rate_data`.*"})
	}

	return dataPlatformTaxCodeTaxRateDatumQuery{q}
}

// FindDataPlatformTaxCodeTaxRateDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformTaxCodeTaxRateDatum(ctx context.Context, exec boil.ContextExecutor, country string, taxCode string, validityEndDate string, validityStartDate string, selectCols ...string) (*DataPlatformTaxCodeTaxRateDatum, error) {
	dataPlatformTaxCodeTaxRateDatumObj := &DataPlatformTaxCodeTaxRateDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_tax_code_tax_rate_data` where `Country`=? AND `TaxCode`=? AND `ValidityEndDate`=? AND `ValidityStartDate`=?", sel,
	)

	q := queries.Raw(query, country, taxCode, validityEndDate, validityStartDate)

	err := q.Bind(ctx, exec, dataPlatformTaxCodeTaxRateDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_tax_code_tax_rate_data")
	}

	return dataPlatformTaxCodeTaxRateDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformTaxCodeTaxRateDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_tax_code_tax_rate_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformTaxCodeTaxRateDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformTaxCodeTaxRateDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformTaxCodeTaxRateDatumInsertCache[key]
	dataPlatformTaxCodeTaxRateDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformTaxCodeTaxRateDatumAllColumns,
			dataPlatformTaxCodeTaxRateDatumColumnsWithDefault,
			dataPlatformTaxCodeTaxRateDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformTaxCodeTaxRateDatumType, dataPlatformTaxCodeTaxRateDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformTaxCodeTaxRateDatumType, dataPlatformTaxCodeTaxRateDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_tax_code_tax_rate_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_tax_code_tax_rate_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_tax_code_tax_rate_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformTaxCodeTaxRateDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_tax_code_tax_rate_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Country,
		o.TaxCode,
		o.ValidityEndDate,
		o.ValidityStartDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_tax_code_tax_rate_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformTaxCodeTaxRateDatumInsertCacheMut.Lock()
		dataPlatformTaxCodeTaxRateDatumInsertCache[key] = cache
		dataPlatformTaxCodeTaxRateDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformTaxCodeTaxRateDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformTaxCodeTaxRateDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformTaxCodeTaxRateDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformTaxCodeTaxRateDatumUpdateCache[key]
	dataPlatformTaxCodeTaxRateDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformTaxCodeTaxRateDatumAllColumns,
			dataPlatformTaxCodeTaxRateDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_tax_code_tax_rate_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_tax_code_tax_rate_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformTaxCodeTaxRateDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformTaxCodeTaxRateDatumType, dataPlatformTaxCodeTaxRateDatumMapping, append(wl, dataPlatformTaxCodeTaxRateDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_tax_code_tax_rate_data row")
	}

	if !cached {
		dataPlatformTaxCodeTaxRateDatumUpdateCacheMut.Lock()
		dataPlatformTaxCodeTaxRateDatumUpdateCache[key] = cache
		dataPlatformTaxCodeTaxRateDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformTaxCodeTaxRateDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_tax_code_tax_rate_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformTaxCodeTaxRateDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformTaxCodeTaxRateDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_tax_code_tax_rate_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformTaxCodeTaxRateDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformTaxCodeTaxRateDatum slice")
	}

	return nil
}

var mySQLDataPlatformTaxCodeTaxRateDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformTaxCodeTaxRateDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_tax_code_tax_rate_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformTaxCodeTaxRateDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformTaxCodeTaxRateDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformTaxCodeTaxRateDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformTaxCodeTaxRateDatumUpsertCache[key]
	dataPlatformTaxCodeTaxRateDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformTaxCodeTaxRateDatumAllColumns,
			dataPlatformTaxCodeTaxRateDatumColumnsWithDefault,
			dataPlatformTaxCodeTaxRateDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformTaxCodeTaxRateDatumAllColumns,
			dataPlatformTaxCodeTaxRateDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_tax_code_tax_rate_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_tax_code_tax_rate_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_tax_code_tax_rate_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformTaxCodeTaxRateDatumType, dataPlatformTaxCodeTaxRateDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformTaxCodeTaxRateDatumType, dataPlatformTaxCodeTaxRateDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_tax_code_tax_rate_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformTaxCodeTaxRateDatumType, dataPlatformTaxCodeTaxRateDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_tax_code_tax_rate_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_tax_code_tax_rate_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformTaxCodeTaxRateDatumUpsertCacheMut.Lock()
		dataPlatformTaxCodeTaxRateDatumUpsertCache[key] = cache
		dataPlatformTaxCodeTaxRateDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformTaxCodeTaxRateDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformTaxCodeTaxRateDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformTaxCodeTaxRateDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformTaxCodeTaxRateDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_tax_code_tax_rate_data` WHERE `Country`=? AND `TaxCode`=? AND `ValidityEndDate`=? AND `ValidityStartDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_tax_code_tax_rate_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformTaxCodeTaxRateDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformTaxCodeTaxRateDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_tax_code_tax_rate_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformTaxCodeTaxRateDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformTaxCodeTaxRateDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_tax_code_tax_rate_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformTaxCodeTaxRateDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformTaxCodeTaxRateDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformTaxCodeTaxRateDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformTaxCodeTaxRateDatum(ctx, exec, o.Country, o.TaxCode, o.ValidityEndDate, o.ValidityStartDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformTaxCodeTaxRateDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformTaxCodeTaxRateDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformTaxCodeTaxRateDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_tax_code_tax_rate_data`.* FROM `data_platform_tax_code_tax_rate_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformTaxCodeTaxRateDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformTaxCodeTaxRateDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformTaxCodeTaxRateDatumExists checks if the DataPlatformTaxCodeTaxRateDatum row exists.
func DataPlatformTaxCodeTaxRateDatumExists(ctx context.Context, exec boil.ContextExecutor, country string, taxCode string, validityEndDate string, validityStartDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_tax_code_tax_rate_data` where `Country`=? AND `TaxCode`=? AND `ValidityEndDate`=? AND `ValidityStartDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, country, taxCode, validityEndDate, validityStartDate)
	}
	row := exec.QueryRowContext(ctx, sql, country, taxCode, validityEndDate, validityStartDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_tax_code_tax_rate_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformTaxCodeTaxRateDatum row exists.
func (o *DataPlatformTaxCodeTaxRateDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformTaxCodeTaxRateDatumExists(ctx, exec, o.Country, o.TaxCode, o.ValidityEndDate, o.ValidityStartDate)
}
