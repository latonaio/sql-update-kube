// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductMasterProductDescByBPDatum is an object representing the database table.
type DataPlatformProductMasterProductDescByBPDatum struct {
	Product             string    `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner     int       `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Language            string    `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	ProductDescription  string    `boil:"ProductDescription" json:"ProductDescription" toml:"ProductDescription" yaml:"ProductDescription"`
	CreationDate        string    `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate      string    `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion null.Bool `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductMasterProductDescByBPDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductMasterProductDescByBPDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductMasterProductDescByBPDatumColumns = struct {
	Product             string
	BusinessPartner     string
	Language            string
	ProductDescription  string
	CreationDate        string
	LastChangeDate      string
	IsMarkedForDeletion string
}{
	Product:             "Product",
	BusinessPartner:     "BusinessPartner",
	Language:            "Language",
	ProductDescription:  "ProductDescription",
	CreationDate:        "CreationDate",
	LastChangeDate:      "LastChangeDate",
	IsMarkedForDeletion: "IsMarkedForDeletion",
}

var DataPlatformProductMasterProductDescByBPDatumTableColumns = struct {
	Product             string
	BusinessPartner     string
	Language            string
	ProductDescription  string
	CreationDate        string
	LastChangeDate      string
	IsMarkedForDeletion string
}{
	Product:             "data_platform_product_master_product_desc_by_bp_data.Product",
	BusinessPartner:     "data_platform_product_master_product_desc_by_bp_data.BusinessPartner",
	Language:            "data_platform_product_master_product_desc_by_bp_data.Language",
	ProductDescription:  "data_platform_product_master_product_desc_by_bp_data.ProductDescription",
	CreationDate:        "data_platform_product_master_product_desc_by_bp_data.CreationDate",
	LastChangeDate:      "data_platform_product_master_product_desc_by_bp_data.LastChangeDate",
	IsMarkedForDeletion: "data_platform_product_master_product_desc_by_bp_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductMasterProductDescByBPDatumWhere = struct {
	Product             whereHelperstring
	BusinessPartner     whereHelperint
	Language            whereHelperstring
	ProductDescription  whereHelperstring
	CreationDate        whereHelperstring
	LastChangeDate      whereHelperstring
	IsMarkedForDeletion whereHelpernull_Bool
}{
	Product:             whereHelperstring{field: "`data_platform_product_master_product_desc_by_bp_data`.`Product`"},
	BusinessPartner:     whereHelperint{field: "`data_platform_product_master_product_desc_by_bp_data`.`BusinessPartner`"},
	Language:            whereHelperstring{field: "`data_platform_product_master_product_desc_by_bp_data`.`Language`"},
	ProductDescription:  whereHelperstring{field: "`data_platform_product_master_product_desc_by_bp_data`.`ProductDescription`"},
	CreationDate:        whereHelperstring{field: "`data_platform_product_master_product_desc_by_bp_data`.`CreationDate`"},
	LastChangeDate:      whereHelperstring{field: "`data_platform_product_master_product_desc_by_bp_data`.`LastChangeDate`"},
	IsMarkedForDeletion: whereHelpernull_Bool{field: "`data_platform_product_master_product_desc_by_bp_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductMasterProductDescByBPDatumRels is where relationship names are stored.
var DataPlatformProductMasterProductDescByBPDatumRels = struct {
	LanguageDataPlatformProductMasterProductDescriptionDatum     string
	BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum string
}{
	LanguageDataPlatformProductMasterProductDescriptionDatum:     "LanguageDataPlatformProductMasterProductDescriptionDatum",
	BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum: "BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum",
}

// dataPlatformProductMasterProductDescByBPDatumR is where relationships are stored.
type dataPlatformProductMasterProductDescByBPDatumR struct {
	LanguageDataPlatformProductMasterProductDescriptionDatum     *DataPlatformProductMasterProductDescriptionDatum `boil:"LanguageDataPlatformProductMasterProductDescriptionDatum" json:"LanguageDataPlatformProductMasterProductDescriptionDatum" toml:"LanguageDataPlatformProductMasterProductDescriptionDatum" yaml:"LanguageDataPlatformProductMasterProductDescriptionDatum"`
	BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum *DataPlatformProductMasterBusinessPartnerDatum    `boil:"BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum" json:"BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum" toml:"BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum" yaml:"BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductMasterProductDescByBPDatumR) NewStruct() *dataPlatformProductMasterProductDescByBPDatumR {
	return &dataPlatformProductMasterProductDescByBPDatumR{}
}

func (r *dataPlatformProductMasterProductDescByBPDatumR) GetLanguageDataPlatformProductMasterProductDescriptionDatum() *DataPlatformProductMasterProductDescriptionDatum {
	if r == nil {
		return nil
	}
	return r.LanguageDataPlatformProductMasterProductDescriptionDatum
}

func (r *dataPlatformProductMasterProductDescByBPDatumR) GetBusinessPartnerDataPlatformProductMasterBusinessPartnerDatum() *DataPlatformProductMasterBusinessPartnerDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum
}

// dataPlatformProductMasterProductDescByBPDatumL is where Load methods for each relationship are stored.
type dataPlatformProductMasterProductDescByBPDatumL struct{}

var (
	dataPlatformProductMasterProductDescByBPDatumAllColumns            = []string{"Product", "BusinessPartner", "Language", "ProductDescription", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformProductMasterProductDescByBPDatumColumnsWithoutDefault = []string{"Product", "BusinessPartner", "Language", "ProductDescription", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformProductMasterProductDescByBPDatumColumnsWithDefault    = []string{}
	dataPlatformProductMasterProductDescByBPDatumPrimaryKeyColumns     = []string{"Product", "BusinessPartner", "Language"}
	dataPlatformProductMasterProductDescByBPDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductMasterProductDescByBPDatumSlice is an alias for a slice of pointers to DataPlatformProductMasterProductDescByBPDatum.
	// This should almost always be used instead of []DataPlatformProductMasterProductDescByBPDatum.
	DataPlatformProductMasterProductDescByBPDatumSlice []*DataPlatformProductMasterProductDescByBPDatum

	dataPlatformProductMasterProductDescByBPDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductMasterProductDescByBPDatumType                 = reflect.TypeOf(&DataPlatformProductMasterProductDescByBPDatum{})
	dataPlatformProductMasterProductDescByBPDatumMapping              = queries.MakeStructMapping(dataPlatformProductMasterProductDescByBPDatumType)
	dataPlatformProductMasterProductDescByBPDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductMasterProductDescByBPDatumType, dataPlatformProductMasterProductDescByBPDatumMapping, dataPlatformProductMasterProductDescByBPDatumPrimaryKeyColumns)
	dataPlatformProductMasterProductDescByBPDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductMasterProductDescByBPDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductMasterProductDescByBPDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductMasterProductDescByBPDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductMasterProductDescByBPDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductMasterProductDescByBPDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductMasterProductDescByBPDatum record from the query.
func (q dataPlatformProductMasterProductDescByBPDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductMasterProductDescByBPDatum, error) {
	o := &DataPlatformProductMasterProductDescByBPDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_master_product_desc_by_bp_data")
	}

	return o, nil
}

// All returns all DataPlatformProductMasterProductDescByBPDatum records from the query.
func (q dataPlatformProductMasterProductDescByBPDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductMasterProductDescByBPDatumSlice, error) {
	var o []*DataPlatformProductMasterProductDescByBPDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductMasterProductDescByBPDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductMasterProductDescByBPDatum records in the query.
func (q dataPlatformProductMasterProductDescByBPDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_master_product_desc_by_bp_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductMasterProductDescByBPDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_master_product_desc_by_bp_data exists")
	}

	return count > 0, nil
}

// LanguageDataPlatformProductMasterProductDescriptionDatum pointed to by the foreign key.
func (o *DataPlatformProductMasterProductDescByBPDatum) LanguageDataPlatformProductMasterProductDescriptionDatum(mods ...qm.QueryMod) dataPlatformProductMasterProductDescriptionDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.Language),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterProductDescriptionData(queryMods...)
}

// BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum pointed to by the foreign key.
func (o *DataPlatformProductMasterProductDescByBPDatum) BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum(mods ...qm.QueryMod) dataPlatformProductMasterBusinessPartnerDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterBusinessPartnerData(queryMods...)
}

// LoadLanguageDataPlatformProductMasterProductDescriptionDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductMasterProductDescByBPDatumL) LoadLanguageDataPlatformProductMasterProductDescriptionDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterProductDescByBPDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterProductDescByBPDatum
	var object *DataPlatformProductMasterProductDescByBPDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterProductDescByBPDatum.(*DataPlatformProductMasterProductDescByBPDatum)
		if !ok {
			object = new(DataPlatformProductMasterProductDescByBPDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterProductDescByBPDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterProductDescByBPDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterProductDescByBPDatum.(*[]*DataPlatformProductMasterProductDescByBPDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterProductDescByBPDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterProductDescByBPDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterProductDescByBPDatumR{}
		}
		args = append(args, object.Language)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterProductDescByBPDatumR{}
			}

			for _, a := range args {
				if a == obj.Language {
					continue Outer
				}
			}

			args = append(args, obj.Language)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_product_description_data`),
		qm.WhereIn(`data_platform_product_master_product_description_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterProductDescriptionDatum")
	}

	var resultSlice []*DataPlatformProductMasterProductDescriptionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterProductDescriptionDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_product_description_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_product_description_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LanguageDataPlatformProductMasterProductDescriptionDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Language == foreign.Language {
				local.R.LanguageDataPlatformProductMasterProductDescriptionDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductMasterBusinessPartnerDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductMasterProductDescByBPDatumL) LoadBusinessPartnerDataPlatformProductMasterBusinessPartnerDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterProductDescByBPDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterProductDescByBPDatum
	var object *DataPlatformProductMasterProductDescByBPDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterProductDescByBPDatum.(*DataPlatformProductMasterProductDescByBPDatum)
		if !ok {
			object = new(DataPlatformProductMasterProductDescByBPDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterProductDescByBPDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterProductDescByBPDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterProductDescByBPDatum.(*[]*DataPlatformProductMasterProductDescByBPDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterProductDescByBPDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterProductDescByBPDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterProductDescByBPDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterProductDescByBPDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_business_partner_data`),
		qm.WhereIn(`data_platform_product_master_business_partner_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterBusinessPartnerDatum")
	}

	var resultSlice []*DataPlatformProductMasterBusinessPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterBusinessPartnerDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_business_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_business_partner_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetLanguageDataPlatformProductMasterProductDescriptionDatum of the dataPlatformProductMasterProductDescByBPDatum to the related item.
// Sets o.R.LanguageDataPlatformProductMasterProductDescriptionDatum to related.
func (o *DataPlatformProductMasterProductDescByBPDatum) SetLanguageDataPlatformProductMasterProductDescriptionDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterProductDescriptionDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_master_product_desc_by_bp_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Language"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductDescByBPDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.Product, o.BusinessPartner, o.Language}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Language = related.Language
	if o.R == nil {
		o.R = &dataPlatformProductMasterProductDescByBPDatumR{
			LanguageDataPlatformProductMasterProductDescriptionDatum: related,
		}
	} else {
		o.R.LanguageDataPlatformProductMasterProductDescriptionDatum = related
	}

	return nil
}

// SetBusinessPartnerDataPlatformProductMasterBusinessPartnerDatum of the dataPlatformProductMasterProductDescByBPDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum to related.
func (o *DataPlatformProductMasterProductDescByBPDatum) SetBusinessPartnerDataPlatformProductMasterBusinessPartnerDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterBusinessPartnerDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_master_product_desc_by_bp_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductDescByBPDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Product, o.BusinessPartner, o.Language}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProductMasterProductDescByBPDatumR{
			BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterBusinessPartnerDatum = related
	}

	return nil
}

// DataPlatformProductMasterProductDescByBPData retrieves all the records using an executor.
func DataPlatformProductMasterProductDescByBPData(mods ...qm.QueryMod) dataPlatformProductMasterProductDescByBPDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_master_product_desc_by_bp_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_master_product_desc_by_bp_data`.*"})
	}

	return dataPlatformProductMasterProductDescByBPDatumQuery{q}
}

// FindDataPlatformProductMasterProductDescByBPDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductMasterProductDescByBPDatum(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, language string, selectCols ...string) (*DataPlatformProductMasterProductDescByBPDatum, error) {
	dataPlatformProductMasterProductDescByBPDatumObj := &DataPlatformProductMasterProductDescByBPDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_master_product_desc_by_bp_data` where `Product`=? AND `BusinessPartner`=? AND `Language`=?", sel,
	)

	q := queries.Raw(query, product, businessPartner, language)

	err := q.Bind(ctx, exec, dataPlatformProductMasterProductDescByBPDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_master_product_desc_by_bp_data")
	}

	return dataPlatformProductMasterProductDescByBPDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductMasterProductDescByBPDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_product_desc_by_bp_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterProductDescByBPDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductMasterProductDescByBPDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterProductDescByBPDatumInsertCache[key]
	dataPlatformProductMasterProductDescByBPDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductMasterProductDescByBPDatumAllColumns,
			dataPlatformProductMasterProductDescByBPDatumColumnsWithDefault,
			dataPlatformProductMasterProductDescByBPDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterProductDescByBPDatumType, dataPlatformProductMasterProductDescByBPDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterProductDescByBPDatumType, dataPlatformProductMasterProductDescByBPDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_master_product_desc_by_bp_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_master_product_desc_by_bp_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_master_product_desc_by_bp_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductDescByBPDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_master_product_desc_by_bp_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.BusinessPartner,
		o.Language,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_product_desc_by_bp_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterProductDescByBPDatumInsertCacheMut.Lock()
		dataPlatformProductMasterProductDescByBPDatumInsertCache[key] = cache
		dataPlatformProductMasterProductDescByBPDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductMasterProductDescByBPDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductMasterProductDescByBPDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductMasterProductDescByBPDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductMasterProductDescByBPDatumUpdateCache[key]
	dataPlatformProductMasterProductDescByBPDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductMasterProductDescByBPDatumAllColumns,
			dataPlatformProductMasterProductDescByBPDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_master_product_desc_by_bp_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_master_product_desc_by_bp_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductDescByBPDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterProductDescByBPDatumType, dataPlatformProductMasterProductDescByBPDatumMapping, append(wl, dataPlatformProductMasterProductDescByBPDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_master_product_desc_by_bp_data row")
	}

	if !cached {
		dataPlatformProductMasterProductDescByBPDatumUpdateCacheMut.Lock()
		dataPlatformProductMasterProductDescByBPDatumUpdateCache[key] = cache
		dataPlatformProductMasterProductDescByBPDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductMasterProductDescByBPDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_master_product_desc_by_bp_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductMasterProductDescByBPDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterProductDescByBPDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_master_product_desc_by_bp_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterProductDescByBPDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductMasterProductDescByBPDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductMasterProductDescByBPDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductMasterProductDescByBPDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_product_desc_by_bp_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterProductDescByBPDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductMasterProductDescByBPDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductMasterProductDescByBPDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterProductDescByBPDatumUpsertCache[key]
	dataPlatformProductMasterProductDescByBPDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductMasterProductDescByBPDatumAllColumns,
			dataPlatformProductMasterProductDescByBPDatumColumnsWithDefault,
			dataPlatformProductMasterProductDescByBPDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductMasterProductDescByBPDatumAllColumns,
			dataPlatformProductMasterProductDescByBPDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_master_product_desc_by_bp_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_master_product_desc_by_bp_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_master_product_desc_by_bp_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterProductDescByBPDatumType, dataPlatformProductMasterProductDescByBPDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterProductDescByBPDatumType, dataPlatformProductMasterProductDescByBPDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_master_product_desc_by_bp_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductMasterProductDescByBPDatumType, dataPlatformProductMasterProductDescByBPDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_master_product_desc_by_bp_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_product_desc_by_bp_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterProductDescByBPDatumUpsertCacheMut.Lock()
		dataPlatformProductMasterProductDescByBPDatumUpsertCache[key] = cache
		dataPlatformProductMasterProductDescByBPDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductMasterProductDescByBPDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductMasterProductDescByBPDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductMasterProductDescByBPDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductMasterProductDescByBPDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_master_product_desc_by_bp_data` WHERE `Product`=? AND `BusinessPartner`=? AND `Language`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_master_product_desc_by_bp_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductMasterProductDescByBPDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductMasterProductDescByBPDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_master_product_desc_by_bp_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductMasterProductDescByBPDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterProductDescByBPDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_master_product_desc_by_bp_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterProductDescByBPDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductMasterProductDescByBPDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductMasterProductDescByBPDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductMasterProductDescByBPDatum(ctx, exec, o.Product, o.BusinessPartner, o.Language)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductMasterProductDescByBPDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductMasterProductDescByBPDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterProductDescByBPDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_master_product_desc_by_bp_data`.* FROM `data_platform_product_master_product_desc_by_bp_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterProductDescByBPDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductMasterProductDescByBPDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductMasterProductDescByBPDatumExists checks if the DataPlatformProductMasterProductDescByBPDatum row exists.
func DataPlatformProductMasterProductDescByBPDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, language string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_master_product_desc_by_bp_data` where `Product`=? AND `BusinessPartner`=? AND `Language`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, businessPartner, language)
	}
	row := exec.QueryRowContext(ctx, sql, product, businessPartner, language)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_master_product_desc_by_bp_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductMasterProductDescByBPDatum row exists.
func (o *DataPlatformProductMasterProductDescByBPDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductMasterProductDescByBPDatumExists(ctx, exec, o.Product, o.BusinessPartner, o.Language)
}
