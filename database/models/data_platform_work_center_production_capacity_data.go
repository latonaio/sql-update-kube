// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformWorkCenterProductionCapacityDatum is an object representing the database table.
type DataPlatformWorkCenterProductionCapacityDatum struct {
	WorkCenter                                 int       `boil:"WorkCenter" json:"WorkCenter" toml:"WorkCenter" yaml:"WorkCenter"`
	WorkCenterProductionCapacityID             int       `boil:"WorkCenterProductionCapacityID" json:"WorkCenterProductionCapacityID" toml:"WorkCenterProductionCapacityID" yaml:"WorkCenterProductionCapacityID"`
	BusinessPartner                            int       `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                                      string    `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	Product                                    string    `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	CapacityFormula                            string    `boil:"CapacityFormula" json:"CapacityFormula" toml:"CapacityFormula" yaml:"CapacityFormula"`
	CalculatedCapacityQuantityInProductionUnit float32   `boil:"CalculatedCapacityQuantityInProductionUnit" json:"CalculatedCapacityQuantityInProductionUnit" toml:"CalculatedCapacityQuantityInProductionUnit" yaml:"CalculatedCapacityQuantityInProductionUnit"`
	CreationDate                               string    `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                             string    `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                        null.Bool `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformWorkCenterProductionCapacityDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformWorkCenterProductionCapacityDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformWorkCenterProductionCapacityDatumColumns = struct {
	WorkCenter                                 string
	WorkCenterProductionCapacityID             string
	BusinessPartner                            string
	Plant                                      string
	Product                                    string
	CapacityFormula                            string
	CalculatedCapacityQuantityInProductionUnit string
	CreationDate                               string
	LastChangeDate                             string
	IsMarkedForDeletion                        string
}{
	WorkCenter:                     "WorkCenter",
	WorkCenterProductionCapacityID: "WorkCenterProductionCapacityID",
	BusinessPartner:                "BusinessPartner",
	Plant:                          "Plant",
	Product:                        "Product",
	CapacityFormula:                "CapacityFormula",
	CalculatedCapacityQuantityInProductionUnit: "CalculatedCapacityQuantityInProductionUnit",
	CreationDate:        "CreationDate",
	LastChangeDate:      "LastChangeDate",
	IsMarkedForDeletion: "IsMarkedForDeletion",
}

var DataPlatformWorkCenterProductionCapacityDatumTableColumns = struct {
	WorkCenter                                 string
	WorkCenterProductionCapacityID             string
	BusinessPartner                            string
	Plant                                      string
	Product                                    string
	CapacityFormula                            string
	CalculatedCapacityQuantityInProductionUnit string
	CreationDate                               string
	LastChangeDate                             string
	IsMarkedForDeletion                        string
}{
	WorkCenter:                     "data_platform_work_center_production_capacity_data.WorkCenter",
	WorkCenterProductionCapacityID: "data_platform_work_center_production_capacity_data.WorkCenterProductionCapacityID",
	BusinessPartner:                "data_platform_work_center_production_capacity_data.BusinessPartner",
	Plant:                          "data_platform_work_center_production_capacity_data.Plant",
	Product:                        "data_platform_work_center_production_capacity_data.Product",
	CapacityFormula:                "data_platform_work_center_production_capacity_data.CapacityFormula",
	CalculatedCapacityQuantityInProductionUnit: "data_platform_work_center_production_capacity_data.CalculatedCapacityQuantityInProductionUnit",
	CreationDate:        "data_platform_work_center_production_capacity_data.CreationDate",
	LastChangeDate:      "data_platform_work_center_production_capacity_data.LastChangeDate",
	IsMarkedForDeletion: "data_platform_work_center_production_capacity_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformWorkCenterProductionCapacityDatumWhere = struct {
	WorkCenter                                 whereHelperint
	WorkCenterProductionCapacityID             whereHelperint
	BusinessPartner                            whereHelperint
	Plant                                      whereHelperstring
	Product                                    whereHelperstring
	CapacityFormula                            whereHelperstring
	CalculatedCapacityQuantityInProductionUnit whereHelperfloat32
	CreationDate                               whereHelperstring
	LastChangeDate                             whereHelperstring
	IsMarkedForDeletion                        whereHelpernull_Bool
}{
	WorkCenter:                     whereHelperint{field: "`data_platform_work_center_production_capacity_data`.`WorkCenter`"},
	WorkCenterProductionCapacityID: whereHelperint{field: "`data_platform_work_center_production_capacity_data`.`WorkCenterProductionCapacityID`"},
	BusinessPartner:                whereHelperint{field: "`data_platform_work_center_production_capacity_data`.`BusinessPartner`"},
	Plant:                          whereHelperstring{field: "`data_platform_work_center_production_capacity_data`.`Plant`"},
	Product:                        whereHelperstring{field: "`data_platform_work_center_production_capacity_data`.`Product`"},
	CapacityFormula:                whereHelperstring{field: "`data_platform_work_center_production_capacity_data`.`CapacityFormula`"},
	CalculatedCapacityQuantityInProductionUnit: whereHelperfloat32{field: "`data_platform_work_center_production_capacity_data`.`CalculatedCapacityQuantityInProductionUnit`"},
	CreationDate:        whereHelperstring{field: "`data_platform_work_center_production_capacity_data`.`CreationDate`"},
	LastChangeDate:      whereHelperstring{field: "`data_platform_work_center_production_capacity_data`.`LastChangeDate`"},
	IsMarkedForDeletion: whereHelpernull_Bool{field: "`data_platform_work_center_production_capacity_data`.`IsMarkedForDeletion`"},
}

// DataPlatformWorkCenterProductionCapacityDatumRels is where relationship names are stored.
var DataPlatformWorkCenterProductionCapacityDatumRels = struct {
	WorkCenterDataPlatformWorkCenterGeneralDatum string
}{
	WorkCenterDataPlatformWorkCenterGeneralDatum: "WorkCenterDataPlatformWorkCenterGeneralDatum",
}

// dataPlatformWorkCenterProductionCapacityDatumR is where relationships are stored.
type dataPlatformWorkCenterProductionCapacityDatumR struct {
	WorkCenterDataPlatformWorkCenterGeneralDatum *DataPlatformWorkCenterGeneralDatum `boil:"WorkCenterDataPlatformWorkCenterGeneralDatum" json:"WorkCenterDataPlatformWorkCenterGeneralDatum" toml:"WorkCenterDataPlatformWorkCenterGeneralDatum" yaml:"WorkCenterDataPlatformWorkCenterGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformWorkCenterProductionCapacityDatumR) NewStruct() *dataPlatformWorkCenterProductionCapacityDatumR {
	return &dataPlatformWorkCenterProductionCapacityDatumR{}
}

func (r *dataPlatformWorkCenterProductionCapacityDatumR) GetWorkCenterDataPlatformWorkCenterGeneralDatum() *DataPlatformWorkCenterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.WorkCenterDataPlatformWorkCenterGeneralDatum
}

// dataPlatformWorkCenterProductionCapacityDatumL is where Load methods for each relationship are stored.
type dataPlatformWorkCenterProductionCapacityDatumL struct{}

var (
	dataPlatformWorkCenterProductionCapacityDatumAllColumns            = []string{"WorkCenter", "WorkCenterProductionCapacityID", "BusinessPartner", "Plant", "Product", "CapacityFormula", "CalculatedCapacityQuantityInProductionUnit", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformWorkCenterProductionCapacityDatumColumnsWithoutDefault = []string{"WorkCenter", "WorkCenterProductionCapacityID", "BusinessPartner", "Plant", "Product", "CapacityFormula", "CalculatedCapacityQuantityInProductionUnit", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformWorkCenterProductionCapacityDatumColumnsWithDefault    = []string{}
	dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyColumns     = []string{"WorkCenter", "WorkCenterProductionCapacityID", "BusinessPartner", "Plant", "Product"}
	dataPlatformWorkCenterProductionCapacityDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformWorkCenterProductionCapacityDatumSlice is an alias for a slice of pointers to DataPlatformWorkCenterProductionCapacityDatum.
	// This should almost always be used instead of []DataPlatformWorkCenterProductionCapacityDatum.
	DataPlatformWorkCenterProductionCapacityDatumSlice []*DataPlatformWorkCenterProductionCapacityDatum

	dataPlatformWorkCenterProductionCapacityDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformWorkCenterProductionCapacityDatumType                 = reflect.TypeOf(&DataPlatformWorkCenterProductionCapacityDatum{})
	dataPlatformWorkCenterProductionCapacityDatumMapping              = queries.MakeStructMapping(dataPlatformWorkCenterProductionCapacityDatumType)
	dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformWorkCenterProductionCapacityDatumType, dataPlatformWorkCenterProductionCapacityDatumMapping, dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyColumns)
	dataPlatformWorkCenterProductionCapacityDatumInsertCacheMut       sync.RWMutex
	dataPlatformWorkCenterProductionCapacityDatumInsertCache          = make(map[string]insertCache)
	dataPlatformWorkCenterProductionCapacityDatumUpdateCacheMut       sync.RWMutex
	dataPlatformWorkCenterProductionCapacityDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformWorkCenterProductionCapacityDatumUpsertCacheMut       sync.RWMutex
	dataPlatformWorkCenterProductionCapacityDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformWorkCenterProductionCapacityDatum record from the query.
func (q dataPlatformWorkCenterProductionCapacityDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformWorkCenterProductionCapacityDatum, error) {
	o := &DataPlatformWorkCenterProductionCapacityDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_work_center_production_capacity_data")
	}

	return o, nil
}

// All returns all DataPlatformWorkCenterProductionCapacityDatum records from the query.
func (q dataPlatformWorkCenterProductionCapacityDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformWorkCenterProductionCapacityDatumSlice, error) {
	var o []*DataPlatformWorkCenterProductionCapacityDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformWorkCenterProductionCapacityDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformWorkCenterProductionCapacityDatum records in the query.
func (q dataPlatformWorkCenterProductionCapacityDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_work_center_production_capacity_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformWorkCenterProductionCapacityDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_work_center_production_capacity_data exists")
	}

	return count > 0, nil
}

// WorkCenterDataPlatformWorkCenterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformWorkCenterProductionCapacityDatum) WorkCenterDataPlatformWorkCenterGeneralDatum(mods ...qm.QueryMod) dataPlatformWorkCenterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`WorkCenter` = ?", o.WorkCenter),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformWorkCenterGeneralData(queryMods...)
}

// LoadWorkCenterDataPlatformWorkCenterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformWorkCenterProductionCapacityDatumL) LoadWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformWorkCenterProductionCapacityDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformWorkCenterProductionCapacityDatum
	var object *DataPlatformWorkCenterProductionCapacityDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformWorkCenterProductionCapacityDatum.(*DataPlatformWorkCenterProductionCapacityDatum)
		if !ok {
			object = new(DataPlatformWorkCenterProductionCapacityDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformWorkCenterProductionCapacityDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformWorkCenterProductionCapacityDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformWorkCenterProductionCapacityDatum.(*[]*DataPlatformWorkCenterProductionCapacityDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformWorkCenterProductionCapacityDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformWorkCenterProductionCapacityDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformWorkCenterProductionCapacityDatumR{}
		}
		args = append(args, object.WorkCenter)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformWorkCenterProductionCapacityDatumR{}
			}

			for _, a := range args {
				if a == obj.WorkCenter {
					continue Outer
				}
			}

			args = append(args, obj.WorkCenter)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_work_center_general_data`),
		qm.WhereIn(`data_platform_work_center_general_data.WorkCenter in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformWorkCenterGeneralDatum")
	}

	var resultSlice []*DataPlatformWorkCenterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformWorkCenterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_work_center_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_work_center_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WorkCenterDataPlatformWorkCenterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WorkCenter == foreign.WorkCenter {
				local.R.WorkCenterDataPlatformWorkCenterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetWorkCenterDataPlatformWorkCenterGeneralDatum of the dataPlatformWorkCenterProductionCapacityDatum to the related item.
// Sets o.R.WorkCenterDataPlatformWorkCenterGeneralDatum to related.
func (o *DataPlatformWorkCenterProductionCapacityDatum) SetWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformWorkCenterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_work_center_production_capacity_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"WorkCenter"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.WorkCenter, o.WorkCenter, o.WorkCenterProductionCapacityID, o.BusinessPartner, o.Plant, o.Product}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WorkCenter = related.WorkCenter
	if o.R == nil {
		o.R = &dataPlatformWorkCenterProductionCapacityDatumR{
			WorkCenterDataPlatformWorkCenterGeneralDatum: related,
		}
	} else {
		o.R.WorkCenterDataPlatformWorkCenterGeneralDatum = related
	}

	return nil
}

// DataPlatformWorkCenterProductionCapacityData retrieves all the records using an executor.
func DataPlatformWorkCenterProductionCapacityData(mods ...qm.QueryMod) dataPlatformWorkCenterProductionCapacityDatumQuery {
	mods = append(mods, qm.From("`data_platform_work_center_production_capacity_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_work_center_production_capacity_data`.*"})
	}

	return dataPlatformWorkCenterProductionCapacityDatumQuery{q}
}

// FindDataPlatformWorkCenterProductionCapacityDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformWorkCenterProductionCapacityDatum(ctx context.Context, exec boil.ContextExecutor, workCenter int, workCenterProductionCapacityID int, businessPartner int, plant string, product string, selectCols ...string) (*DataPlatformWorkCenterProductionCapacityDatum, error) {
	dataPlatformWorkCenterProductionCapacityDatumObj := &DataPlatformWorkCenterProductionCapacityDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_work_center_production_capacity_data` where `WorkCenter`=? AND `WorkCenterProductionCapacityID`=? AND `BusinessPartner`=? AND `Plant`=? AND `Product`=?", sel,
	)

	q := queries.Raw(query, workCenter, workCenterProductionCapacityID, businessPartner, plant, product)

	err := q.Bind(ctx, exec, dataPlatformWorkCenterProductionCapacityDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_work_center_production_capacity_data")
	}

	return dataPlatformWorkCenterProductionCapacityDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformWorkCenterProductionCapacityDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_work_center_production_capacity_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformWorkCenterProductionCapacityDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformWorkCenterProductionCapacityDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformWorkCenterProductionCapacityDatumInsertCache[key]
	dataPlatformWorkCenterProductionCapacityDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformWorkCenterProductionCapacityDatumAllColumns,
			dataPlatformWorkCenterProductionCapacityDatumColumnsWithDefault,
			dataPlatformWorkCenterProductionCapacityDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformWorkCenterProductionCapacityDatumType, dataPlatformWorkCenterProductionCapacityDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformWorkCenterProductionCapacityDatumType, dataPlatformWorkCenterProductionCapacityDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_work_center_production_capacity_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_work_center_production_capacity_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_work_center_production_capacity_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_work_center_production_capacity_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.WorkCenter,
		o.WorkCenterProductionCapacityID,
		o.BusinessPartner,
		o.Plant,
		o.Product,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_work_center_production_capacity_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformWorkCenterProductionCapacityDatumInsertCacheMut.Lock()
		dataPlatformWorkCenterProductionCapacityDatumInsertCache[key] = cache
		dataPlatformWorkCenterProductionCapacityDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformWorkCenterProductionCapacityDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformWorkCenterProductionCapacityDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformWorkCenterProductionCapacityDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformWorkCenterProductionCapacityDatumUpdateCache[key]
	dataPlatformWorkCenterProductionCapacityDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformWorkCenterProductionCapacityDatumAllColumns,
			dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_work_center_production_capacity_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_work_center_production_capacity_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformWorkCenterProductionCapacityDatumType, dataPlatformWorkCenterProductionCapacityDatumMapping, append(wl, dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_work_center_production_capacity_data row")
	}

	if !cached {
		dataPlatformWorkCenterProductionCapacityDatumUpdateCacheMut.Lock()
		dataPlatformWorkCenterProductionCapacityDatumUpdateCache[key] = cache
		dataPlatformWorkCenterProductionCapacityDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformWorkCenterProductionCapacityDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_work_center_production_capacity_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformWorkCenterProductionCapacityDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_work_center_production_capacity_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformWorkCenterProductionCapacityDatum slice")
	}

	return nil
}

var mySQLDataPlatformWorkCenterProductionCapacityDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformWorkCenterProductionCapacityDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_work_center_production_capacity_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformWorkCenterProductionCapacityDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformWorkCenterProductionCapacityDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformWorkCenterProductionCapacityDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformWorkCenterProductionCapacityDatumUpsertCache[key]
	dataPlatformWorkCenterProductionCapacityDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformWorkCenterProductionCapacityDatumAllColumns,
			dataPlatformWorkCenterProductionCapacityDatumColumnsWithDefault,
			dataPlatformWorkCenterProductionCapacityDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformWorkCenterProductionCapacityDatumAllColumns,
			dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_work_center_production_capacity_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_work_center_production_capacity_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_work_center_production_capacity_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformWorkCenterProductionCapacityDatumType, dataPlatformWorkCenterProductionCapacityDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformWorkCenterProductionCapacityDatumType, dataPlatformWorkCenterProductionCapacityDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_work_center_production_capacity_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformWorkCenterProductionCapacityDatumType, dataPlatformWorkCenterProductionCapacityDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_work_center_production_capacity_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_work_center_production_capacity_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformWorkCenterProductionCapacityDatumUpsertCacheMut.Lock()
		dataPlatformWorkCenterProductionCapacityDatumUpsertCache[key] = cache
		dataPlatformWorkCenterProductionCapacityDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformWorkCenterProductionCapacityDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformWorkCenterProductionCapacityDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformWorkCenterProductionCapacityDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_work_center_production_capacity_data` WHERE `WorkCenter`=? AND `WorkCenterProductionCapacityID`=? AND `BusinessPartner`=? AND `Plant`=? AND `Product`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_work_center_production_capacity_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformWorkCenterProductionCapacityDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformWorkCenterProductionCapacityDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_work_center_production_capacity_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformWorkCenterProductionCapacityDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_work_center_production_capacity_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformWorkCenterProductionCapacityDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformWorkCenterProductionCapacityDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformWorkCenterProductionCapacityDatum(ctx, exec, o.WorkCenter, o.WorkCenterProductionCapacityID, o.BusinessPartner, o.Plant, o.Product)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformWorkCenterProductionCapacityDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformWorkCenterProductionCapacityDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_work_center_production_capacity_data`.* FROM `data_platform_work_center_production_capacity_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformWorkCenterProductionCapacityDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformWorkCenterProductionCapacityDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformWorkCenterProductionCapacityDatumExists checks if the DataPlatformWorkCenterProductionCapacityDatum row exists.
func DataPlatformWorkCenterProductionCapacityDatumExists(ctx context.Context, exec boil.ContextExecutor, workCenter int, workCenterProductionCapacityID int, businessPartner int, plant string, product string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_work_center_production_capacity_data` where `WorkCenter`=? AND `WorkCenterProductionCapacityID`=? AND `BusinessPartner`=? AND `Plant`=? AND `Product`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, workCenter, workCenterProductionCapacityID, businessPartner, plant, product)
	}
	row := exec.QueryRowContext(ctx, sql, workCenter, workCenterProductionCapacityID, businessPartner, plant, product)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_work_center_production_capacity_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformWorkCenterProductionCapacityDatum row exists.
func (o *DataPlatformWorkCenterProductionCapacityDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformWorkCenterProductionCapacityDatumExists(ctx, exec, o.WorkCenter, o.WorkCenterProductionCapacityID, o.BusinessPartner, o.Plant, o.Product)
}
