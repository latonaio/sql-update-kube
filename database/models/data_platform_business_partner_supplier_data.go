// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerSupplierDatum is an object representing the database table.
type DataPlatformBusinessPartnerSupplierDatum struct {
	BusinessPartner               int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Supplier                      int         `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
	Currency                      null.String `boil:"Currency" json:"Currency,omitempty" toml:"Currency" yaml:"Currency,omitempty"`
	PaymentTerms                  null.String `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	PaymentMethod                 null.String `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	Incoterms                     null.String `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	BPAccountAssignmentGroup      null.String `boil:"BPAccountAssignmentGroup" json:"BPAccountAssignmentGroup,omitempty" toml:"BPAccountAssignmentGroup" yaml:"BPAccountAssignmentGroup,omitempty"`
	InvoiceIsGoodsReceiptBased    null.Bool   `boil:"InvoiceIsGoodsReceiptBased" json:"InvoiceIsGoodsReceiptBased,omitempty" toml:"InvoiceIsGoodsReceiptBased" yaml:"InvoiceIsGoodsReceiptBased,omitempty"`
	PurOrdAutoGenerationIsAllowed null.Bool   `boil:"PurOrdAutoGenerationIsAllowed" json:"PurOrdAutoGenerationIsAllowed,omitempty" toml:"PurOrdAutoGenerationIsAllowed" yaml:"PurOrdAutoGenerationIsAllowed,omitempty"`
	CreationDate                  null.Time   `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	QuotationIsBlockedForSupplier null.Bool   `boil:"QuotationIsBlockedForSupplier" json:"QuotationIsBlockedForSupplier,omitempty" toml:"QuotationIsBlockedForSupplier" yaml:"QuotationIsBlockedForSupplier,omitempty"`
	OrderIsBlockedForSupplier     null.Bool   `boil:"OrderIsBlockedForSupplier" json:"OrderIsBlockedForSupplier,omitempty" toml:"OrderIsBlockedForSupplier" yaml:"OrderIsBlockedForSupplier,omitempty"`
	DeliveryIsBlockedForSupplier  null.Bool   `boil:"DeliveryIsBlockedForSupplier" json:"DeliveryIsBlockedForSupplier,omitempty" toml:"DeliveryIsBlockedForSupplier" yaml:"DeliveryIsBlockedForSupplier,omitempty"`
	BillingIsBlockedForSupplier   null.Bool   `boil:"BillingIsBlockedForSupplier" json:"BillingIsBlockedForSupplier,omitempty" toml:"BillingIsBlockedForSupplier" yaml:"BillingIsBlockedForSupplier,omitempty"`
	PostingIsBlockedForSupplier   null.Bool   `boil:"PostingIsBlockedForSupplier" json:"PostingIsBlockedForSupplier,omitempty" toml:"PostingIsBlockedForSupplier" yaml:"PostingIsBlockedForSupplier,omitempty"`
	PaymentIsBlockedForSupplier   null.Bool   `boil:"PaymentIsBlockedForSupplier" json:"PaymentIsBlockedForSupplier,omitempty" toml:"PaymentIsBlockedForSupplier" yaml:"PaymentIsBlockedForSupplier,omitempty"`
	IsMarkedForDeletion           null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBusinessPartnerSupplierDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerSupplierDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerSupplierDatumColumns = struct {
	BusinessPartner               string
	Supplier                      string
	Currency                      string
	PaymentTerms                  string
	PaymentMethod                 string
	Incoterms                     string
	BPAccountAssignmentGroup      string
	InvoiceIsGoodsReceiptBased    string
	PurOrdAutoGenerationIsAllowed string
	CreationDate                  string
	QuotationIsBlockedForSupplier string
	OrderIsBlockedForSupplier     string
	DeliveryIsBlockedForSupplier  string
	BillingIsBlockedForSupplier   string
	PostingIsBlockedForSupplier   string
	PaymentIsBlockedForSupplier   string
	IsMarkedForDeletion           string
}{
	BusinessPartner:               "BusinessPartner",
	Supplier:                      "Supplier",
	Currency:                      "Currency",
	PaymentTerms:                  "PaymentTerms",
	PaymentMethod:                 "PaymentMethod",
	Incoterms:                     "Incoterms",
	BPAccountAssignmentGroup:      "BPAccountAssignmentGroup",
	InvoiceIsGoodsReceiptBased:    "InvoiceIsGoodsReceiptBased",
	PurOrdAutoGenerationIsAllowed: "PurOrdAutoGenerationIsAllowed",
	CreationDate:                  "CreationDate",
	QuotationIsBlockedForSupplier: "QuotationIsBlockedForSupplier",
	OrderIsBlockedForSupplier:     "OrderIsBlockedForSupplier",
	DeliveryIsBlockedForSupplier:  "DeliveryIsBlockedForSupplier",
	BillingIsBlockedForSupplier:   "BillingIsBlockedForSupplier",
	PostingIsBlockedForSupplier:   "PostingIsBlockedForSupplier",
	PaymentIsBlockedForSupplier:   "PaymentIsBlockedForSupplier",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
}

var DataPlatformBusinessPartnerSupplierDatumTableColumns = struct {
	BusinessPartner               string
	Supplier                      string
	Currency                      string
	PaymentTerms                  string
	PaymentMethod                 string
	Incoterms                     string
	BPAccountAssignmentGroup      string
	InvoiceIsGoodsReceiptBased    string
	PurOrdAutoGenerationIsAllowed string
	CreationDate                  string
	QuotationIsBlockedForSupplier string
	OrderIsBlockedForSupplier     string
	DeliveryIsBlockedForSupplier  string
	BillingIsBlockedForSupplier   string
	PostingIsBlockedForSupplier   string
	PaymentIsBlockedForSupplier   string
	IsMarkedForDeletion           string
}{
	BusinessPartner:               "data_platform_business_partner_supplier_data.BusinessPartner",
	Supplier:                      "data_platform_business_partner_supplier_data.Supplier",
	Currency:                      "data_platform_business_partner_supplier_data.Currency",
	PaymentTerms:                  "data_platform_business_partner_supplier_data.PaymentTerms",
	PaymentMethod:                 "data_platform_business_partner_supplier_data.PaymentMethod",
	Incoterms:                     "data_platform_business_partner_supplier_data.Incoterms",
	BPAccountAssignmentGroup:      "data_platform_business_partner_supplier_data.BPAccountAssignmentGroup",
	InvoiceIsGoodsReceiptBased:    "data_platform_business_partner_supplier_data.InvoiceIsGoodsReceiptBased",
	PurOrdAutoGenerationIsAllowed: "data_platform_business_partner_supplier_data.PurOrdAutoGenerationIsAllowed",
	CreationDate:                  "data_platform_business_partner_supplier_data.CreationDate",
	QuotationIsBlockedForSupplier: "data_platform_business_partner_supplier_data.QuotationIsBlockedForSupplier",
	OrderIsBlockedForSupplier:     "data_platform_business_partner_supplier_data.OrderIsBlockedForSupplier",
	DeliveryIsBlockedForSupplier:  "data_platform_business_partner_supplier_data.DeliveryIsBlockedForSupplier",
	BillingIsBlockedForSupplier:   "data_platform_business_partner_supplier_data.BillingIsBlockedForSupplier",
	PostingIsBlockedForSupplier:   "data_platform_business_partner_supplier_data.PostingIsBlockedForSupplier",
	PaymentIsBlockedForSupplier:   "data_platform_business_partner_supplier_data.PaymentIsBlockedForSupplier",
	IsMarkedForDeletion:           "data_platform_business_partner_supplier_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformBusinessPartnerSupplierDatumWhere = struct {
	BusinessPartner               whereHelperint
	Supplier                      whereHelperint
	Currency                      whereHelpernull_String
	PaymentTerms                  whereHelpernull_String
	PaymentMethod                 whereHelpernull_String
	Incoterms                     whereHelpernull_String
	BPAccountAssignmentGroup      whereHelpernull_String
	InvoiceIsGoodsReceiptBased    whereHelpernull_Bool
	PurOrdAutoGenerationIsAllowed whereHelpernull_Bool
	CreationDate                  whereHelpernull_Time
	QuotationIsBlockedForSupplier whereHelpernull_Bool
	OrderIsBlockedForSupplier     whereHelpernull_Bool
	DeliveryIsBlockedForSupplier  whereHelpernull_Bool
	BillingIsBlockedForSupplier   whereHelpernull_Bool
	PostingIsBlockedForSupplier   whereHelpernull_Bool
	PaymentIsBlockedForSupplier   whereHelpernull_Bool
	IsMarkedForDeletion           whereHelpernull_Bool
}{
	BusinessPartner:               whereHelperint{field: "`data_platform_business_partner_supplier_data`.`BusinessPartner`"},
	Supplier:                      whereHelperint{field: "`data_platform_business_partner_supplier_data`.`Supplier`"},
	Currency:                      whereHelpernull_String{field: "`data_platform_business_partner_supplier_data`.`Currency`"},
	PaymentTerms:                  whereHelpernull_String{field: "`data_platform_business_partner_supplier_data`.`PaymentTerms`"},
	PaymentMethod:                 whereHelpernull_String{field: "`data_platform_business_partner_supplier_data`.`PaymentMethod`"},
	Incoterms:                     whereHelpernull_String{field: "`data_platform_business_partner_supplier_data`.`Incoterms`"},
	BPAccountAssignmentGroup:      whereHelpernull_String{field: "`data_platform_business_partner_supplier_data`.`BPAccountAssignmentGroup`"},
	InvoiceIsGoodsReceiptBased:    whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_data`.`InvoiceIsGoodsReceiptBased`"},
	PurOrdAutoGenerationIsAllowed: whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_data`.`PurOrdAutoGenerationIsAllowed`"},
	CreationDate:                  whereHelpernull_Time{field: "`data_platform_business_partner_supplier_data`.`CreationDate`"},
	QuotationIsBlockedForSupplier: whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_data`.`QuotationIsBlockedForSupplier`"},
	OrderIsBlockedForSupplier:     whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_data`.`OrderIsBlockedForSupplier`"},
	DeliveryIsBlockedForSupplier:  whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_data`.`DeliveryIsBlockedForSupplier`"},
	BillingIsBlockedForSupplier:   whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_data`.`BillingIsBlockedForSupplier`"},
	PostingIsBlockedForSupplier:   whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_data`.`PostingIsBlockedForSupplier`"},
	PaymentIsBlockedForSupplier:   whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_data`.`PaymentIsBlockedForSupplier`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBusinessPartnerSupplierDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerSupplierDatumRels = struct {
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum                string
	BusinessPartnerDataPlatformBusinessPartnerSupplierContactData         string
	BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData string
	BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData             string
}{
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum:                "BusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	BusinessPartnerDataPlatformBusinessPartnerSupplierContactData:         "BusinessPartnerDataPlatformBusinessPartnerSupplierContactData",
	BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData: "BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData",
	BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData:             "BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData",
}

// dataPlatformBusinessPartnerSupplierDatumR is where relationships are stored.
type dataPlatformBusinessPartnerSupplierDatumR struct {
	BusinessPartnerDataPlatformBusinessPartnerGeneralDatum                *DataPlatformBusinessPartnerGeneralDatum                     `boil:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	BusinessPartnerDataPlatformBusinessPartnerSupplierContactData         DataPlatformBusinessPartnerSupplierContactDatumSlice         `boil:"BusinessPartnerDataPlatformBusinessPartnerSupplierContactData" json:"BusinessPartnerDataPlatformBusinessPartnerSupplierContactData" toml:"BusinessPartnerDataPlatformBusinessPartnerSupplierContactData" yaml:"BusinessPartnerDataPlatformBusinessPartnerSupplierContactData"`
	BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice `boil:"BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData" json:"BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData" toml:"BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData" yaml:"BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData"`
	BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData             DataPlatformBusinessPartnerSupplierTaxDatumSlice             `boil:"BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData" json:"BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData" toml:"BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData" yaml:"BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerSupplierDatumR) NewStruct() *dataPlatformBusinessPartnerSupplierDatumR {
	return &dataPlatformBusinessPartnerSupplierDatumR{}
}

func (r *dataPlatformBusinessPartnerSupplierDatumR) GetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformBusinessPartnerSupplierDatumR) GetBusinessPartnerDataPlatformBusinessPartnerSupplierContactData() DataPlatformBusinessPartnerSupplierContactDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerSupplierContactData
}

func (r *dataPlatformBusinessPartnerSupplierDatumR) GetBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData() DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData
}

func (r *dataPlatformBusinessPartnerSupplierDatumR) GetBusinessPartnerDataPlatformBusinessPartnerSupplierTaxData() DataPlatformBusinessPartnerSupplierTaxDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData
}

// dataPlatformBusinessPartnerSupplierDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerSupplierDatumL struct{}

var (
	dataPlatformBusinessPartnerSupplierDatumAllColumns            = []string{"BusinessPartner", "Supplier", "Currency", "PaymentTerms", "PaymentMethod", "Incoterms", "BPAccountAssignmentGroup", "InvoiceIsGoodsReceiptBased", "PurOrdAutoGenerationIsAllowed", "CreationDate", "QuotationIsBlockedForSupplier", "OrderIsBlockedForSupplier", "DeliveryIsBlockedForSupplier", "BillingIsBlockedForSupplier", "PostingIsBlockedForSupplier", "PaymentIsBlockedForSupplier", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerSupplierDatumColumnsWithoutDefault = []string{"BusinessPartner", "Supplier", "Currency", "PaymentTerms", "PaymentMethod", "Incoterms", "BPAccountAssignmentGroup", "InvoiceIsGoodsReceiptBased", "PurOrdAutoGenerationIsAllowed", "CreationDate", "QuotationIsBlockedForSupplier", "OrderIsBlockedForSupplier", "DeliveryIsBlockedForSupplier", "BillingIsBlockedForSupplier", "PostingIsBlockedForSupplier", "PaymentIsBlockedForSupplier", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerSupplierDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerSupplierDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Supplier"}
	dataPlatformBusinessPartnerSupplierDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerSupplierDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerSupplierDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerSupplierDatum.
	DataPlatformBusinessPartnerSupplierDatumSlice []*DataPlatformBusinessPartnerSupplierDatum
	// DataPlatformBusinessPartnerSupplierDatumHook is the signature for custom DataPlatformBusinessPartnerSupplierDatum hook methods
	DataPlatformBusinessPartnerSupplierDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformBusinessPartnerSupplierDatum) error

	dataPlatformBusinessPartnerSupplierDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerSupplierDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerSupplierDatum{})
	dataPlatformBusinessPartnerSupplierDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerSupplierDatumType)
	dataPlatformBusinessPartnerSupplierDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerSupplierDatumType, dataPlatformBusinessPartnerSupplierDatumMapping, dataPlatformBusinessPartnerSupplierDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerSupplierDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerSupplierDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerSupplierDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerSupplierDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerSupplierDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerSupplierDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformBusinessPartnerSupplierDatumAfterSelectHooks []DataPlatformBusinessPartnerSupplierDatumHook

var dataPlatformBusinessPartnerSupplierDatumBeforeInsertHooks []DataPlatformBusinessPartnerSupplierDatumHook
var dataPlatformBusinessPartnerSupplierDatumAfterInsertHooks []DataPlatformBusinessPartnerSupplierDatumHook

var dataPlatformBusinessPartnerSupplierDatumBeforeUpdateHooks []DataPlatformBusinessPartnerSupplierDatumHook
var dataPlatformBusinessPartnerSupplierDatumAfterUpdateHooks []DataPlatformBusinessPartnerSupplierDatumHook

var dataPlatformBusinessPartnerSupplierDatumBeforeDeleteHooks []DataPlatformBusinessPartnerSupplierDatumHook
var dataPlatformBusinessPartnerSupplierDatumAfterDeleteHooks []DataPlatformBusinessPartnerSupplierDatumHook

var dataPlatformBusinessPartnerSupplierDatumBeforeUpsertHooks []DataPlatformBusinessPartnerSupplierDatumHook
var dataPlatformBusinessPartnerSupplierDatumAfterUpsertHooks []DataPlatformBusinessPartnerSupplierDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformBusinessPartnerSupplierDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformBusinessPartnerSupplierDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformBusinessPartnerSupplierDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformBusinessPartnerSupplierDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformBusinessPartnerSupplierDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformBusinessPartnerSupplierDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformBusinessPartnerSupplierDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformBusinessPartnerSupplierDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformBusinessPartnerSupplierDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformBusinessPartnerSupplierDatumHook registers your hook function for all future operations.
func AddDataPlatformBusinessPartnerSupplierDatumHook(hookPoint boil.HookPoint, dataPlatformBusinessPartnerSupplierDatumHook DataPlatformBusinessPartnerSupplierDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformBusinessPartnerSupplierDatumAfterSelectHooks = append(dataPlatformBusinessPartnerSupplierDatumAfterSelectHooks, dataPlatformBusinessPartnerSupplierDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformBusinessPartnerSupplierDatumBeforeInsertHooks = append(dataPlatformBusinessPartnerSupplierDatumBeforeInsertHooks, dataPlatformBusinessPartnerSupplierDatumHook)
	case boil.AfterInsertHook:
		dataPlatformBusinessPartnerSupplierDatumAfterInsertHooks = append(dataPlatformBusinessPartnerSupplierDatumAfterInsertHooks, dataPlatformBusinessPartnerSupplierDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformBusinessPartnerSupplierDatumBeforeUpdateHooks = append(dataPlatformBusinessPartnerSupplierDatumBeforeUpdateHooks, dataPlatformBusinessPartnerSupplierDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformBusinessPartnerSupplierDatumAfterUpdateHooks = append(dataPlatformBusinessPartnerSupplierDatumAfterUpdateHooks, dataPlatformBusinessPartnerSupplierDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformBusinessPartnerSupplierDatumBeforeDeleteHooks = append(dataPlatformBusinessPartnerSupplierDatumBeforeDeleteHooks, dataPlatformBusinessPartnerSupplierDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformBusinessPartnerSupplierDatumAfterDeleteHooks = append(dataPlatformBusinessPartnerSupplierDatumAfterDeleteHooks, dataPlatformBusinessPartnerSupplierDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformBusinessPartnerSupplierDatumBeforeUpsertHooks = append(dataPlatformBusinessPartnerSupplierDatumBeforeUpsertHooks, dataPlatformBusinessPartnerSupplierDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformBusinessPartnerSupplierDatumAfterUpsertHooks = append(dataPlatformBusinessPartnerSupplierDatumAfterUpsertHooks, dataPlatformBusinessPartnerSupplierDatumHook)
	}
}

// One returns a single dataPlatformBusinessPartnerSupplierDatum record from the query.
func (q dataPlatformBusinessPartnerSupplierDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerSupplierDatum, error) {
	o := &DataPlatformBusinessPartnerSupplierDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_supplier_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerSupplierDatum records from the query.
func (q dataPlatformBusinessPartnerSupplierDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerSupplierDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerSupplierDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerSupplierDatum slice")
	}

	if len(dataPlatformBusinessPartnerSupplierDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerSupplierDatum records in the query.
func (q dataPlatformBusinessPartnerSupplierDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_supplier_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerSupplierDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_supplier_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerSupplierDatum) BusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerSupplierContactData retrieves all the data_platform_business_partner_supplier_contact_datum's DataPlatformBusinessPartnerSupplierContactData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerSupplierDatum) BusinessPartnerDataPlatformBusinessPartnerSupplierContactData(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierContactDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_supplier_contact_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerSupplierContactData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData retrieves all the data_platform_business_partner_supplier_partner_function_datum's DataPlatformBusinessPartnerSupplierPartnerFunctionData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerSupplierDatum) BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_supplier_partner_function_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerSupplierPartnerFunctionData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData retrieves all the data_platform_business_partner_supplier_tax_datum's DataPlatformBusinessPartnerSupplierTaxData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerSupplierDatum) BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierTaxDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_supplier_tax_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerSupplierTaxData(queryMods...)
}

// LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerSupplierDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerSupplierDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerSupplierDatum
	var object *DataPlatformBusinessPartnerSupplierDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerSupplierDatum.(*DataPlatformBusinessPartnerSupplierDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerSupplierDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerSupplierDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerSupplierDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerSupplierDatum.(*[]*DataPlatformBusinessPartnerSupplierDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerSupplierDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerSupplierDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerSupplierDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerSupplierDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerSupplierContactData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerSupplierDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerSupplierContactData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerSupplierDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerSupplierDatum
	var object *DataPlatformBusinessPartnerSupplierDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerSupplierDatum.(*DataPlatformBusinessPartnerSupplierDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerSupplierDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerSupplierDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerSupplierDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerSupplierDatum.(*[]*DataPlatformBusinessPartnerSupplierDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerSupplierDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerSupplierDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerSupplierDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerSupplierDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_supplier_contact_data`),
		qm.WhereIn(`data_platform_business_partner_supplier_contact_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_supplier_contact_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerSupplierContactDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_supplier_contact_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_supplier_contact_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_supplier_contact_data")
	}

	if len(dataPlatformBusinessPartnerSupplierContactDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformBusinessPartnerSupplierContactData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerSupplierContactDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierContactData = append(local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierContactData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerSupplierContactDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerSupplierDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerSupplierDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerSupplierDatum
	var object *DataPlatformBusinessPartnerSupplierDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerSupplierDatum.(*DataPlatformBusinessPartnerSupplierDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerSupplierDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerSupplierDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerSupplierDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerSupplierDatum.(*[]*DataPlatformBusinessPartnerSupplierDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerSupplierDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerSupplierDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerSupplierDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerSupplierDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_supplier_partner_function_data`),
		qm.WhereIn(`data_platform_business_partner_supplier_partner_function_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_supplier_partner_function_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_supplier_partner_function_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_supplier_partner_function_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_supplier_partner_function_data")
	}

	if len(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = local
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerSupplierTaxData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerSupplierDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerSupplierTaxData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerSupplierDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerSupplierDatum
	var object *DataPlatformBusinessPartnerSupplierDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerSupplierDatum.(*DataPlatformBusinessPartnerSupplierDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerSupplierDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerSupplierDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerSupplierDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerSupplierDatum.(*[]*DataPlatformBusinessPartnerSupplierDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerSupplierDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerSupplierDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerSupplierDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerSupplierDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_supplier_tax_data`),
		qm.WhereIn(`data_platform_business_partner_supplier_tax_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_supplier_tax_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerSupplierTaxDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_supplier_tax_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_supplier_tax_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_supplier_tax_data")
	}

	if len(dataPlatformBusinessPartnerSupplierTaxDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerSupplierTaxDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData = append(local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerSupplierTaxDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = local
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformBusinessPartnerSupplierDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData.
func (o *DataPlatformBusinessPartnerSupplierDatum) SetBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_supplier_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Supplier}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerSupplierDatumR{
			BusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerGeneralDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierData: DataPlatformBusinessPartnerSupplierDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData = append(related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierData, o)
	}

	return nil
}

// AddBusinessPartnerDataPlatformBusinessPartnerSupplierContactData adds the given related objects to the existing relationships
// of the data_platform_business_partner_supplier_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierContactData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum appropriately.
func (o *DataPlatformBusinessPartnerSupplierDatum) AddBusinessPartnerDataPlatformBusinessPartnerSupplierContactData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerSupplierContactDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_supplier_contact_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierContactDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Supplier, rel.ContactID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerSupplierDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierContactData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierContactData = append(o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierContactData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerSupplierContactDatumR{
				BusinessPartnerDataPlatformBusinessPartnerSupplierDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData adds the given related objects to the existing relationships
// of the data_platform_business_partner_supplier_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum appropriately.
func (o *DataPlatformBusinessPartnerSupplierDatum) AddBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_supplier_partner_function_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Supplier, rel.PartnerCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerSupplierDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{
				BusinessPartnerDataPlatformBusinessPartnerSupplierDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = o
		}
	}
	return nil
}

// AddBusinessPartnerDataPlatformBusinessPartnerSupplierTaxData adds the given related objects to the existing relationships
// of the data_platform_business_partner_supplier_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum appropriately.
func (o *DataPlatformBusinessPartnerSupplierDatum) AddBusinessPartnerDataPlatformBusinessPartnerSupplierTaxData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerSupplierTaxDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_supplier_tax_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Supplier, rel.DepartureCountry}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerSupplierDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData = append(o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerSupplierTaxDatumR{
				BusinessPartnerDataPlatformBusinessPartnerSupplierDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = o
		}
	}
	return nil
}

// DataPlatformBusinessPartnerSupplierData retrieves all the records using an executor.
func DataPlatformBusinessPartnerSupplierData(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_supplier_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_supplier_data`.*"})
	}

	return dataPlatformBusinessPartnerSupplierDatumQuery{q}
}

// FindDataPlatformBusinessPartnerSupplierDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerSupplierDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, supplier int, selectCols ...string) (*DataPlatformBusinessPartnerSupplierDatum, error) {
	dataPlatformBusinessPartnerSupplierDatumObj := &DataPlatformBusinessPartnerSupplierDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_supplier_data` where `BusinessPartner`=? AND `Supplier`=?", sel,
	)

	q := queries.Raw(query, businessPartner, supplier)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerSupplierDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_supplier_data")
	}

	if err = dataPlatformBusinessPartnerSupplierDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformBusinessPartnerSupplierDatumObj, err
	}

	return dataPlatformBusinessPartnerSupplierDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerSupplierDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_supplier_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerSupplierDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerSupplierDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerSupplierDatumInsertCache[key]
	dataPlatformBusinessPartnerSupplierDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerSupplierDatumAllColumns,
			dataPlatformBusinessPartnerSupplierDatumColumnsWithDefault,
			dataPlatformBusinessPartnerSupplierDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierDatumType, dataPlatformBusinessPartnerSupplierDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierDatumType, dataPlatformBusinessPartnerSupplierDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_supplier_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_supplier_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_supplier_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_supplier_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Supplier,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_supplier_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerSupplierDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerSupplierDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerSupplierDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformBusinessPartnerSupplierDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerSupplierDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerSupplierDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerSupplierDatumUpdateCache[key]
	dataPlatformBusinessPartnerSupplierDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerSupplierDatumAllColumns,
			dataPlatformBusinessPartnerSupplierDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_business_partner_supplier_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_supplier_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierDatumType, dataPlatformBusinessPartnerSupplierDatumMapping, append(wl, dataPlatformBusinessPartnerSupplierDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_business_partner_supplier_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_business_partner_supplier_data")
	}

	if !cached {
		dataPlatformBusinessPartnerSupplierDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerSupplierDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerSupplierDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerSupplierDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_business_partner_supplier_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_business_partner_supplier_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerSupplierDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerSupplierDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_supplier_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerSupplierDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerSupplierDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformBusinessPartnerSupplierDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformBusinessPartnerSupplierDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerSupplierDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_supplier_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerSupplierDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerSupplierDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerSupplierDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerSupplierDatumUpsertCache[key]
	dataPlatformBusinessPartnerSupplierDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerSupplierDatumAllColumns,
			dataPlatformBusinessPartnerSupplierDatumColumnsWithDefault,
			dataPlatformBusinessPartnerSupplierDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerSupplierDatumAllColumns,
			dataPlatformBusinessPartnerSupplierDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_supplier_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_supplier_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_supplier_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierDatumType, dataPlatformBusinessPartnerSupplierDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierDatumType, dataPlatformBusinessPartnerSupplierDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_supplier_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierDatumType, dataPlatformBusinessPartnerSupplierDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_supplier_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_supplier_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerSupplierDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerSupplierDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerSupplierDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformBusinessPartnerSupplierDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerSupplierDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformBusinessPartnerSupplierDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerSupplierDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_supplier_data` WHERE `BusinessPartner`=? AND `Supplier`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_business_partner_supplier_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_business_partner_supplier_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerSupplierDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformBusinessPartnerSupplierDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_supplier_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_supplier_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerSupplierDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformBusinessPartnerSupplierDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerSupplierDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_supplier_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerSupplierDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerSupplierDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_supplier_data")
	}

	if len(dataPlatformBusinessPartnerSupplierDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerSupplierDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerSupplierDatum(ctx, exec, o.BusinessPartner, o.Supplier)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerSupplierDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerSupplierDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerSupplierDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_supplier_data`.* FROM `data_platform_business_partner_supplier_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerSupplierDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerSupplierDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerSupplierDatumExists checks if the DataPlatformBusinessPartnerSupplierDatum row exists.
func DataPlatformBusinessPartnerSupplierDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, supplier int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_supplier_data` where `BusinessPartner`=? AND `Supplier`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, supplier)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, supplier)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_supplier_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerSupplierDatum row exists.
func (o *DataPlatformBusinessPartnerSupplierDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerSupplierDatumExists(ctx, exec, o.BusinessPartner, o.Supplier)
}
