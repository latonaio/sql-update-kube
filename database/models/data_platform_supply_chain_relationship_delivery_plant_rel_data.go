// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum is an object representing the database table.
type DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum struct {
	SupplyChainRelationshipID              int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID      int         `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID int         `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	Buyer                                  int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                 int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                         int         `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverFromParty                       int         `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverToPlant                         string      `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	DeliverFromPlant                       string      `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	DefaultRelation                        null.Bool   `boil:"DefaultRelation" json:"DefaultRelation,omitempty" toml:"DefaultRelation" yaml:"DefaultRelation,omitempty"`
	MRPType                                null.String `boil:"MRPType" json:"MRPType,omitempty" toml:"MRPType" yaml:"MRPType,omitempty"`
	MRPController                          null.String `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	CreationDate                           null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                         null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	IsMarkedForDeletion                    null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumColumns = struct {
	SupplyChainRelationshipID              string
	SupplyChainRelationshipDeliveryID      string
	SupplyChainRelationshipDeliveryPlantID string
	Buyer                                  string
	Seller                                 string
	DeliverToParty                         string
	DeliverFromParty                       string
	DeliverToPlant                         string
	DeliverFromPlant                       string
	DefaultRelation                        string
	MRPType                                string
	MRPController                          string
	CreationDate                           string
	LastChangeDate                         string
	IsMarkedForDeletion                    string
}{
	SupplyChainRelationshipID:              "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:      "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID: "SupplyChainRelationshipDeliveryPlantID",
	Buyer:                                  "Buyer",
	Seller:                                 "Seller",
	DeliverToParty:                         "DeliverToParty",
	DeliverFromParty:                       "DeliverFromParty",
	DeliverToPlant:                         "DeliverToPlant",
	DeliverFromPlant:                       "DeliverFromPlant",
	DefaultRelation:                        "DefaultRelation",
	MRPType:                                "MRPType",
	MRPController:                          "MRPController",
	CreationDate:                           "CreationDate",
	LastChangeDate:                         "LastChangeDate",
	IsMarkedForDeletion:                    "IsMarkedForDeletion",
}

var DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumTableColumns = struct {
	SupplyChainRelationshipID              string
	SupplyChainRelationshipDeliveryID      string
	SupplyChainRelationshipDeliveryPlantID string
	Buyer                                  string
	Seller                                 string
	DeliverToParty                         string
	DeliverFromParty                       string
	DeliverToPlant                         string
	DeliverFromPlant                       string
	DefaultRelation                        string
	MRPType                                string
	MRPController                          string
	CreationDate                           string
	LastChangeDate                         string
	IsMarkedForDeletion                    string
}{
	SupplyChainRelationshipID:              "data_platform_supply_chain_relationship_delivery_plant_rel_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:      "data_platform_supply_chain_relationship_delivery_plant_rel_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID: "data_platform_supply_chain_relationship_delivery_plant_rel_data.SupplyChainRelationshipDeliveryPlantID",
	Buyer:                                  "data_platform_supply_chain_relationship_delivery_plant_rel_data.Buyer",
	Seller:                                 "data_platform_supply_chain_relationship_delivery_plant_rel_data.Seller",
	DeliverToParty:                         "data_platform_supply_chain_relationship_delivery_plant_rel_data.DeliverToParty",
	DeliverFromParty:                       "data_platform_supply_chain_relationship_delivery_plant_rel_data.DeliverFromParty",
	DeliverToPlant:                         "data_platform_supply_chain_relationship_delivery_plant_rel_data.DeliverToPlant",
	DeliverFromPlant:                       "data_platform_supply_chain_relationship_delivery_plant_rel_data.DeliverFromPlant",
	DefaultRelation:                        "data_platform_supply_chain_relationship_delivery_plant_rel_data.DefaultRelation",
	MRPType:                                "data_platform_supply_chain_relationship_delivery_plant_rel_data.MRPType",
	MRPController:                          "data_platform_supply_chain_relationship_delivery_plant_rel_data.MRPController",
	CreationDate:                           "data_platform_supply_chain_relationship_delivery_plant_rel_data.CreationDate",
	LastChangeDate:                         "data_platform_supply_chain_relationship_delivery_plant_rel_data.LastChangeDate",
	IsMarkedForDeletion:                    "data_platform_supply_chain_relationship_delivery_plant_rel_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumWhere = struct {
	SupplyChainRelationshipID              whereHelperint
	SupplyChainRelationshipDeliveryID      whereHelperint
	SupplyChainRelationshipDeliveryPlantID whereHelperint
	Buyer                                  whereHelperint
	Seller                                 whereHelperint
	DeliverToParty                         whereHelperint
	DeliverFromParty                       whereHelperint
	DeliverToPlant                         whereHelperstring
	DeliverFromPlant                       whereHelperstring
	DefaultRelation                        whereHelpernull_Bool
	MRPType                                whereHelpernull_String
	MRPController                          whereHelpernull_String
	CreationDate                           whereHelpernull_String
	LastChangeDate                         whereHelpernull_String
	IsMarkedForDeletion                    whereHelpernull_Bool
}{
	SupplyChainRelationshipID:              whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:      whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID: whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	Buyer:                                  whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`Buyer`"},
	Seller:                                 whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`Seller`"},
	DeliverToParty:                         whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`DeliverToParty`"},
	DeliverFromParty:                       whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`DeliverFromParty`"},
	DeliverToPlant:                         whereHelperstring{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`DeliverToPlant`"},
	DeliverFromPlant:                       whereHelperstring{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`DeliverFromPlant`"},
	DefaultRelation:                        whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`DefaultRelation`"},
	MRPType:                                whereHelpernull_String{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`MRPType`"},
	MRPController:                          whereHelpernull_String{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`MRPController`"},
	CreationDate:                           whereHelpernull_String{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`CreationDate`"},
	LastChangeDate:                         whereHelpernull_String{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                    whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumRels is where relationship names are stored.
var DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumRels = struct {
	BuyerDataPlatformDeliveryDocumentHeaderData string
}{
	BuyerDataPlatformDeliveryDocumentHeaderData: "BuyerDataPlatformDeliveryDocumentHeaderData",
}

// dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumR is where relationships are stored.
type dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumR struct {
	BuyerDataPlatformDeliveryDocumentHeaderData DataPlatformDeliveryDocumentHeaderDatumSlice `boil:"BuyerDataPlatformDeliveryDocumentHeaderData" json:"BuyerDataPlatformDeliveryDocumentHeaderData" toml:"BuyerDataPlatformDeliveryDocumentHeaderData" yaml:"BuyerDataPlatformDeliveryDocumentHeaderData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumR) NewStruct() *dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumR {
	return &dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumR{}
}

func (r *dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumR) GetBuyerDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformDeliveryDocumentHeaderData
}

// dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumL is where Load methods for each relationship are stored.
type dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumL struct{}

var (
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumAllColumns            = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "DefaultRelation", "MRPType", "MRPController", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "DefaultRelation", "MRPType", "MRPController", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumColumnsWithDefault    = []string{}
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant"}
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumSlice is an alias for a slice of pointers to DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum.
	// This should almost always be used instead of []DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum.
	DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumSlice []*DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum

	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumType                 = reflect.TypeOf(&DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum{})
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumMapping              = queries.MakeStructMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumType)
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumType, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumMapping, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyColumns)
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumInsertCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSupplyChainRelationshipDeliveryPlantRelDatum record from the query.
func (q dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum, error) {
	o := &DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_supply_chain_relationship_delivery_plant_rel_data")
	}

	return o, nil
}

// All returns all DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum records from the query.
func (q dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumSlice, error) {
	var o []*DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum records in the query.
func (q dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_supply_chain_relationship_delivery_plant_rel_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_supply_chain_relationship_delivery_plant_rel_data exists")
	}

	return count > 0, nil
}

// BuyerDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via Buyer column.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum) BuyerDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`Buyer`=?", o.Buyer),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// LoadBuyerDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumL) LoadBuyerDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipDeliveryPlantRelDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum
	var object *DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipDeliveryPlantRelDatum.(*DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipDeliveryPlantRelDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipDeliveryPlantRelDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipDeliveryPlantRelDatum.(*[]*DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipDeliveryPlantRelDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipDeliveryPlantRelDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumR{}
		}
		args = append(args, object.Buyer)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.BuyerDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformDeliveryDocumentHeaderData = append(local.R.BuyerDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// AddBuyerDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_supply_chain_relationship_delivery_plant_rel_datum, optionally inserting them as new records.
// Appends related to o.R.BuyerDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum) AddBuyerDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Buyer = o.Buyer
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Buyer, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Buyer = o.Buyer
		}
	}

	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumR{
			BuyerDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.BuyerDataPlatformDeliveryDocumentHeaderData = append(o.R.BuyerDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// DataPlatformSupplyChainRelationshipDeliveryPlantRelData retrieves all the records using an executor.
func DataPlatformSupplyChainRelationshipDeliveryPlantRelData(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumQuery {
	mods = append(mods, qm.From("`data_platform_supply_chain_relationship_delivery_plant_rel_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_supply_chain_relationship_delivery_plant_rel_data`.*"})
	}

	return dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumQuery{q}
}

// FindDataPlatformSupplyChainRelationshipDeliveryPlantRelDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSupplyChainRelationshipDeliveryPlantRelDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, supplyChainRelationshipDeliveryPlantID int, buyer int, seller int, deliverToParty int, deliverFromParty int, deliverToPlant string, deliverFromPlant string, selectCols ...string) (*DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum, error) {
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumObj := &DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_supply_chain_relationship_delivery_plant_rel_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant)

	err := q.Bind(ctx, exec, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_supply_chain_relationship_delivery_plant_rel_data")
	}

	return dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_supply_chain_relationship_delivery_plant_rel_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumInsertCache[key]
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumAllColumns,
			dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumColumnsWithDefault,
			dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumType, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumType, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_supply_chain_relationship_delivery_plant_rel_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_supply_chain_relationship_delivery_plant_rel_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_supply_chain_relationship_delivery_plant_rel_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_supply_chain_relationship_delivery_plant_rel_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipDeliveryID,
		o.SupplyChainRelationshipDeliveryPlantID,
		o.Buyer,
		o.Seller,
		o.DeliverToParty,
		o.DeliverFromParty,
		o.DeliverToPlant,
		o.DeliverFromPlant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_supply_chain_relationship_delivery_plant_rel_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumInsertCacheMut.Lock()
		dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumInsertCache[key] = cache
		dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpdateCache[key]
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumAllColumns,
			dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_supply_chain_relationship_delivery_plant_rel_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_supply_chain_relationship_delivery_plant_rel_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumType, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumMapping, append(wl, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_supply_chain_relationship_delivery_plant_rel_data row")
	}

	if !cached {
		dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpdateCacheMut.Lock()
		dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpdateCache[key] = cache
		dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_supply_chain_relationship_delivery_plant_rel_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_supply_chain_relationship_delivery_plant_rel_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSupplyChainRelationshipDeliveryPlantRelDatum slice")
	}

	return nil
}

var mySQLDataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_supply_chain_relationship_delivery_plant_rel_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpsertCache[key]
	dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumAllColumns,
			dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumColumnsWithDefault,
			dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumAllColumns,
			dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_supply_chain_relationship_delivery_plant_rel_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_supply_chain_relationship_delivery_plant_rel_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_supply_chain_relationship_delivery_plant_rel_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumType, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumType, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_supply_chain_relationship_delivery_plant_rel_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumType, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_supply_chain_relationship_delivery_plant_rel_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_supply_chain_relationship_delivery_plant_rel_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpsertCacheMut.Lock()
		dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpsertCache[key] = cache
		dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_supply_chain_relationship_delivery_plant_rel_data` WHERE `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_supply_chain_relationship_delivery_plant_rel_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_supply_chain_relationship_delivery_plant_rel_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_supply_chain_relationship_delivery_plant_rel_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSupplyChainRelationshipDeliveryPlantRelDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSupplyChainRelationshipDeliveryPlantRelDatum(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_supply_chain_relationship_delivery_plant_rel_data`.* FROM `data_platform_supply_chain_relationship_delivery_plant_rel_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipDeliveryPlantRelDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumExists checks if the DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum row exists.
func DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, supplyChainRelationshipDeliveryPlantID int, buyer int, seller int, deliverToParty int, deliverFromParty int, deliverToPlant string, deliverFromPlant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_supply_chain_relationship_delivery_plant_rel_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_supply_chain_relationship_delivery_plant_rel_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum row exists.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSupplyChainRelationshipDeliveryPlantRelDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant)
}
