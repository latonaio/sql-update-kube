// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductMasterAccountingDatum is an object representing the database table.
type DataPlatformProductMasterAccountingDatum struct {
	Product             string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner     int          `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant               string       `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	ValuationClass      null.String  `boil:"ValuationClass" json:"ValuationClass,omitempty" toml:"ValuationClass" yaml:"ValuationClass,omitempty"`
	CostingPolicy       null.String  `boil:"CostingPolicy" json:"CostingPolicy,omitempty" toml:"CostingPolicy" yaml:"CostingPolicy,omitempty"`
	PriceUnitQty        null.String  `boil:"PriceUnitQty" json:"PriceUnitQty,omitempty" toml:"PriceUnitQty" yaml:"PriceUnitQty,omitempty"`
	StandardPrice       null.Float32 `boil:"StandardPrice" json:"StandardPrice,omitempty" toml:"StandardPrice" yaml:"StandardPrice,omitempty"`
	MovingAveragePrice  null.Float32 `boil:"MovingAveragePrice" json:"MovingAveragePrice,omitempty" toml:"MovingAveragePrice" yaml:"MovingAveragePrice,omitempty"`
	PriceLastChangeDate null.String  `boil:"PriceLastChangeDate" json:"PriceLastChangeDate,omitempty" toml:"PriceLastChangeDate" yaml:"PriceLastChangeDate,omitempty"`
	IsMarkedForDeletion null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductMasterAccountingDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductMasterAccountingDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductMasterAccountingDatumColumns = struct {
	Product             string
	BusinessPartner     string
	Plant               string
	ValuationClass      string
	CostingPolicy       string
	PriceUnitQty        string
	StandardPrice       string
	MovingAveragePrice  string
	PriceLastChangeDate string
	IsMarkedForDeletion string
}{
	Product:             "Product",
	BusinessPartner:     "BusinessPartner",
	Plant:               "Plant",
	ValuationClass:      "ValuationClass",
	CostingPolicy:       "CostingPolicy",
	PriceUnitQty:        "PriceUnitQty",
	StandardPrice:       "StandardPrice",
	MovingAveragePrice:  "MovingAveragePrice",
	PriceLastChangeDate: "PriceLastChangeDate",
	IsMarkedForDeletion: "IsMarkedForDeletion",
}

var DataPlatformProductMasterAccountingDatumTableColumns = struct {
	Product             string
	BusinessPartner     string
	Plant               string
	ValuationClass      string
	CostingPolicy       string
	PriceUnitQty        string
	StandardPrice       string
	MovingAveragePrice  string
	PriceLastChangeDate string
	IsMarkedForDeletion string
}{
	Product:             "data_platform_product_master_accounting_data.Product",
	BusinessPartner:     "data_platform_product_master_accounting_data.BusinessPartner",
	Plant:               "data_platform_product_master_accounting_data.Plant",
	ValuationClass:      "data_platform_product_master_accounting_data.ValuationClass",
	CostingPolicy:       "data_platform_product_master_accounting_data.CostingPolicy",
	PriceUnitQty:        "data_platform_product_master_accounting_data.PriceUnitQty",
	StandardPrice:       "data_platform_product_master_accounting_data.StandardPrice",
	MovingAveragePrice:  "data_platform_product_master_accounting_data.MovingAveragePrice",
	PriceLastChangeDate: "data_platform_product_master_accounting_data.PriceLastChangeDate",
	IsMarkedForDeletion: "data_platform_product_master_accounting_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductMasterAccountingDatumWhere = struct {
	Product             whereHelperstring
	BusinessPartner     whereHelperint
	Plant               whereHelperstring
	ValuationClass      whereHelpernull_String
	CostingPolicy       whereHelpernull_String
	PriceUnitQty        whereHelpernull_String
	StandardPrice       whereHelpernull_Float32
	MovingAveragePrice  whereHelpernull_Float32
	PriceLastChangeDate whereHelpernull_String
	IsMarkedForDeletion whereHelpernull_Bool
}{
	Product:             whereHelperstring{field: "`data_platform_product_master_accounting_data`.`Product`"},
	BusinessPartner:     whereHelperint{field: "`data_platform_product_master_accounting_data`.`BusinessPartner`"},
	Plant:               whereHelperstring{field: "`data_platform_product_master_accounting_data`.`Plant`"},
	ValuationClass:      whereHelpernull_String{field: "`data_platform_product_master_accounting_data`.`ValuationClass`"},
	CostingPolicy:       whereHelpernull_String{field: "`data_platform_product_master_accounting_data`.`CostingPolicy`"},
	PriceUnitQty:        whereHelpernull_String{field: "`data_platform_product_master_accounting_data`.`PriceUnitQty`"},
	StandardPrice:       whereHelpernull_Float32{field: "`data_platform_product_master_accounting_data`.`StandardPrice`"},
	MovingAveragePrice:  whereHelpernull_Float32{field: "`data_platform_product_master_accounting_data`.`MovingAveragePrice`"},
	PriceLastChangeDate: whereHelpernull_String{field: "`data_platform_product_master_accounting_data`.`PriceLastChangeDate`"},
	IsMarkedForDeletion: whereHelpernull_Bool{field: "`data_platform_product_master_accounting_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductMasterAccountingDatumRels is where relationship names are stored.
var DataPlatformProductMasterAccountingDatumRels = struct {
}{}

// dataPlatformProductMasterAccountingDatumR is where relationships are stored.
type dataPlatformProductMasterAccountingDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductMasterAccountingDatumR) NewStruct() *dataPlatformProductMasterAccountingDatumR {
	return &dataPlatformProductMasterAccountingDatumR{}
}

// dataPlatformProductMasterAccountingDatumL is where Load methods for each relationship are stored.
type dataPlatformProductMasterAccountingDatumL struct{}

var (
	dataPlatformProductMasterAccountingDatumAllColumns            = []string{"Product", "BusinessPartner", "Plant", "ValuationClass", "CostingPolicy", "PriceUnitQty", "StandardPrice", "MovingAveragePrice", "PriceLastChangeDate", "IsMarkedForDeletion"}
	dataPlatformProductMasterAccountingDatumColumnsWithoutDefault = []string{"Product", "BusinessPartner", "Plant", "ValuationClass", "CostingPolicy", "PriceUnitQty", "StandardPrice", "MovingAveragePrice", "PriceLastChangeDate", "IsMarkedForDeletion"}
	dataPlatformProductMasterAccountingDatumColumnsWithDefault    = []string{}
	dataPlatformProductMasterAccountingDatumPrimaryKeyColumns     = []string{"Product", "BusinessPartner", "Plant"}
	dataPlatformProductMasterAccountingDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductMasterAccountingDatumSlice is an alias for a slice of pointers to DataPlatformProductMasterAccountingDatum.
	// This should almost always be used instead of []DataPlatformProductMasterAccountingDatum.
	DataPlatformProductMasterAccountingDatumSlice []*DataPlatformProductMasterAccountingDatum

	dataPlatformProductMasterAccountingDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductMasterAccountingDatumType                 = reflect.TypeOf(&DataPlatformProductMasterAccountingDatum{})
	dataPlatformProductMasterAccountingDatumMapping              = queries.MakeStructMapping(dataPlatformProductMasterAccountingDatumType)
	dataPlatformProductMasterAccountingDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductMasterAccountingDatumType, dataPlatformProductMasterAccountingDatumMapping, dataPlatformProductMasterAccountingDatumPrimaryKeyColumns)
	dataPlatformProductMasterAccountingDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductMasterAccountingDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductMasterAccountingDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductMasterAccountingDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductMasterAccountingDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductMasterAccountingDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductMasterAccountingDatum record from the query.
func (q dataPlatformProductMasterAccountingDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductMasterAccountingDatum, error) {
	o := &DataPlatformProductMasterAccountingDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_master_accounting_data")
	}

	return o, nil
}

// All returns all DataPlatformProductMasterAccountingDatum records from the query.
func (q dataPlatformProductMasterAccountingDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductMasterAccountingDatumSlice, error) {
	var o []*DataPlatformProductMasterAccountingDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductMasterAccountingDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductMasterAccountingDatum records in the query.
func (q dataPlatformProductMasterAccountingDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_master_accounting_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductMasterAccountingDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_master_accounting_data exists")
	}

	return count > 0, nil
}

// DataPlatformProductMasterAccountingData retrieves all the records using an executor.
func DataPlatformProductMasterAccountingData(mods ...qm.QueryMod) dataPlatformProductMasterAccountingDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_master_accounting_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_master_accounting_data`.*"})
	}

	return dataPlatformProductMasterAccountingDatumQuery{q}
}

// FindDataPlatformProductMasterAccountingDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductMasterAccountingDatum(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, selectCols ...string) (*DataPlatformProductMasterAccountingDatum, error) {
	dataPlatformProductMasterAccountingDatumObj := &DataPlatformProductMasterAccountingDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_master_accounting_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=?", sel,
	)

	q := queries.Raw(query, product, businessPartner, plant)

	err := q.Bind(ctx, exec, dataPlatformProductMasterAccountingDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_master_accounting_data")
	}

	return dataPlatformProductMasterAccountingDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductMasterAccountingDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_accounting_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterAccountingDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductMasterAccountingDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterAccountingDatumInsertCache[key]
	dataPlatformProductMasterAccountingDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductMasterAccountingDatumAllColumns,
			dataPlatformProductMasterAccountingDatumColumnsWithDefault,
			dataPlatformProductMasterAccountingDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterAccountingDatumType, dataPlatformProductMasterAccountingDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterAccountingDatumType, dataPlatformProductMasterAccountingDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_master_accounting_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_master_accounting_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_master_accounting_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterAccountingDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_master_accounting_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.BusinessPartner,
		o.Plant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_accounting_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterAccountingDatumInsertCacheMut.Lock()
		dataPlatformProductMasterAccountingDatumInsertCache[key] = cache
		dataPlatformProductMasterAccountingDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductMasterAccountingDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductMasterAccountingDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductMasterAccountingDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductMasterAccountingDatumUpdateCache[key]
	dataPlatformProductMasterAccountingDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductMasterAccountingDatumAllColumns,
			dataPlatformProductMasterAccountingDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_master_accounting_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_master_accounting_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterAccountingDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterAccountingDatumType, dataPlatformProductMasterAccountingDatumMapping, append(wl, dataPlatformProductMasterAccountingDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_master_accounting_data row")
	}

	if !cached {
		dataPlatformProductMasterAccountingDatumUpdateCacheMut.Lock()
		dataPlatformProductMasterAccountingDatumUpdateCache[key] = cache
		dataPlatformProductMasterAccountingDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductMasterAccountingDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_master_accounting_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductMasterAccountingDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterAccountingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_master_accounting_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterAccountingDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductMasterAccountingDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductMasterAccountingDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductMasterAccountingDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_accounting_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterAccountingDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductMasterAccountingDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductMasterAccountingDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterAccountingDatumUpsertCache[key]
	dataPlatformProductMasterAccountingDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductMasterAccountingDatumAllColumns,
			dataPlatformProductMasterAccountingDatumColumnsWithDefault,
			dataPlatformProductMasterAccountingDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductMasterAccountingDatumAllColumns,
			dataPlatformProductMasterAccountingDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_master_accounting_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_master_accounting_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_master_accounting_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterAccountingDatumType, dataPlatformProductMasterAccountingDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterAccountingDatumType, dataPlatformProductMasterAccountingDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_master_accounting_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductMasterAccountingDatumType, dataPlatformProductMasterAccountingDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_master_accounting_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_accounting_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterAccountingDatumUpsertCacheMut.Lock()
		dataPlatformProductMasterAccountingDatumUpsertCache[key] = cache
		dataPlatformProductMasterAccountingDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductMasterAccountingDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductMasterAccountingDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductMasterAccountingDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductMasterAccountingDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_master_accounting_data` WHERE `Product`=? AND `BusinessPartner`=? AND `Plant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_master_accounting_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductMasterAccountingDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductMasterAccountingDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_master_accounting_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductMasterAccountingDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterAccountingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_master_accounting_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterAccountingDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductMasterAccountingDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductMasterAccountingDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductMasterAccountingDatum(ctx, exec, o.Product, o.BusinessPartner, o.Plant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductMasterAccountingDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductMasterAccountingDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterAccountingDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_master_accounting_data`.* FROM `data_platform_product_master_accounting_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterAccountingDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductMasterAccountingDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductMasterAccountingDatumExists checks if the DataPlatformProductMasterAccountingDatum row exists.
func DataPlatformProductMasterAccountingDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_master_accounting_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, businessPartner, plant)
	}
	row := exec.QueryRowContext(ctx, sql, product, businessPartner, plant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_master_accounting_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductMasterAccountingDatum row exists.
func (o *DataPlatformProductMasterAccountingDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductMasterAccountingDatumExists(ctx, exec, o.Product, o.BusinessPartner, o.Plant)
}
