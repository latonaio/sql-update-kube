// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformQuotationsItemPricingElementDatum is an object representing the database table.
type DataPlatformQuotationsItemPricingElementDatum struct {
	BusinessPartner                int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Quotation                      int         `boil:"Quotation" json:"Quotation" toml:"Quotation" yaml:"Quotation"`
	QuotationItem                  int         `boil:"QuotationItem" json:"QuotationItem" toml:"QuotationItem" yaml:"QuotationItem"`
	PricingProcedureStep           int         `boil:"PricingProcedureStep" json:"PricingProcedureStep" toml:"PricingProcedureStep" yaml:"PricingProcedureStep"`
	PricingProcedureCounter        int         `boil:"PricingProcedureCounter" json:"PricingProcedureCounter" toml:"PricingProcedureCounter" yaml:"PricingProcedureCounter"`
	ConditionType                  null.String `boil:"ConditionType" json:"ConditionType,omitempty" toml:"ConditionType" yaml:"ConditionType,omitempty"`
	PriceConditionDeterminationDte null.String `boil:"PriceConditionDeterminationDte" json:"PriceConditionDeterminationDte,omitempty" toml:"PriceConditionDeterminationDte" yaml:"PriceConditionDeterminationDte,omitempty"`
	ConditionRateValue             null.String `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionCurrency              null.String `boil:"ConditionCurrency" json:"ConditionCurrency,omitempty" toml:"ConditionCurrency" yaml:"ConditionCurrency,omitempty"`
	ConditionRecord                null.Int    `boil:"ConditionRecord" json:"ConditionRecord,omitempty" toml:"ConditionRecord" yaml:"ConditionRecord,omitempty"`
	ConditionSequentialNumber      null.Int    `boil:"ConditionSequentialNumber" json:"ConditionSequentialNumber,omitempty" toml:"ConditionSequentialNumber" yaml:"ConditionSequentialNumber,omitempty"`
	TaxCode                        null.String `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	TransactionCurrency            null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	ConditionIsManuallyChanged     null.Bool   `boil:"ConditionIsManuallyChanged" json:"ConditionIsManuallyChanged,omitempty" toml:"ConditionIsManuallyChanged" yaml:"ConditionIsManuallyChanged,omitempty"`

	R *dataPlatformQuotationsItemPricingElementDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformQuotationsItemPricingElementDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformQuotationsItemPricingElementDatumColumns = struct {
	BusinessPartner                string
	Quotation                      string
	QuotationItem                  string
	PricingProcedureStep           string
	PricingProcedureCounter        string
	ConditionType                  string
	PriceConditionDeterminationDte string
	ConditionRateValue             string
	ConditionCurrency              string
	ConditionRecord                string
	ConditionSequentialNumber      string
	TaxCode                        string
	TransactionCurrency            string
	ConditionIsManuallyChanged     string
}{
	BusinessPartner:                "BusinessPartner",
	Quotation:                      "Quotation",
	QuotationItem:                  "QuotationItem",
	PricingProcedureStep:           "PricingProcedureStep",
	PricingProcedureCounter:        "PricingProcedureCounter",
	ConditionType:                  "ConditionType",
	PriceConditionDeterminationDte: "PriceConditionDeterminationDte",
	ConditionRateValue:             "ConditionRateValue",
	ConditionCurrency:              "ConditionCurrency",
	ConditionRecord:                "ConditionRecord",
	ConditionSequentialNumber:      "ConditionSequentialNumber",
	TaxCode:                        "TaxCode",
	TransactionCurrency:            "TransactionCurrency",
	ConditionIsManuallyChanged:     "ConditionIsManuallyChanged",
}

var DataPlatformQuotationsItemPricingElementDatumTableColumns = struct {
	BusinessPartner                string
	Quotation                      string
	QuotationItem                  string
	PricingProcedureStep           string
	PricingProcedureCounter        string
	ConditionType                  string
	PriceConditionDeterminationDte string
	ConditionRateValue             string
	ConditionCurrency              string
	ConditionRecord                string
	ConditionSequentialNumber      string
	TaxCode                        string
	TransactionCurrency            string
	ConditionIsManuallyChanged     string
}{
	BusinessPartner:                "data_platform_quotations_item_pricing_element_data.BusinessPartner",
	Quotation:                      "data_platform_quotations_item_pricing_element_data.Quotation",
	QuotationItem:                  "data_platform_quotations_item_pricing_element_data.QuotationItem",
	PricingProcedureStep:           "data_platform_quotations_item_pricing_element_data.PricingProcedureStep",
	PricingProcedureCounter:        "data_platform_quotations_item_pricing_element_data.PricingProcedureCounter",
	ConditionType:                  "data_platform_quotations_item_pricing_element_data.ConditionType",
	PriceConditionDeterminationDte: "data_platform_quotations_item_pricing_element_data.PriceConditionDeterminationDte",
	ConditionRateValue:             "data_platform_quotations_item_pricing_element_data.ConditionRateValue",
	ConditionCurrency:              "data_platform_quotations_item_pricing_element_data.ConditionCurrency",
	ConditionRecord:                "data_platform_quotations_item_pricing_element_data.ConditionRecord",
	ConditionSequentialNumber:      "data_platform_quotations_item_pricing_element_data.ConditionSequentialNumber",
	TaxCode:                        "data_platform_quotations_item_pricing_element_data.TaxCode",
	TransactionCurrency:            "data_platform_quotations_item_pricing_element_data.TransactionCurrency",
	ConditionIsManuallyChanged:     "data_platform_quotations_item_pricing_element_data.ConditionIsManuallyChanged",
}

// Generated where

var DataPlatformQuotationsItemPricingElementDatumWhere = struct {
	BusinessPartner                whereHelperint
	Quotation                      whereHelperint
	QuotationItem                  whereHelperint
	PricingProcedureStep           whereHelperint
	PricingProcedureCounter        whereHelperint
	ConditionType                  whereHelpernull_String
	PriceConditionDeterminationDte whereHelpernull_String
	ConditionRateValue             whereHelpernull_String
	ConditionCurrency              whereHelpernull_String
	ConditionRecord                whereHelpernull_Int
	ConditionSequentialNumber      whereHelpernull_Int
	TaxCode                        whereHelpernull_String
	TransactionCurrency            whereHelpernull_String
	ConditionIsManuallyChanged     whereHelpernull_Bool
}{
	BusinessPartner:                whereHelperint{field: "`data_platform_quotations_item_pricing_element_data`.`BusinessPartner`"},
	Quotation:                      whereHelperint{field: "`data_platform_quotations_item_pricing_element_data`.`Quotation`"},
	QuotationItem:                  whereHelperint{field: "`data_platform_quotations_item_pricing_element_data`.`QuotationItem`"},
	PricingProcedureStep:           whereHelperint{field: "`data_platform_quotations_item_pricing_element_data`.`PricingProcedureStep`"},
	PricingProcedureCounter:        whereHelperint{field: "`data_platform_quotations_item_pricing_element_data`.`PricingProcedureCounter`"},
	ConditionType:                  whereHelpernull_String{field: "`data_platform_quotations_item_pricing_element_data`.`ConditionType`"},
	PriceConditionDeterminationDte: whereHelpernull_String{field: "`data_platform_quotations_item_pricing_element_data`.`PriceConditionDeterminationDte`"},
	ConditionRateValue:             whereHelpernull_String{field: "`data_platform_quotations_item_pricing_element_data`.`ConditionRateValue`"},
	ConditionCurrency:              whereHelpernull_String{field: "`data_platform_quotations_item_pricing_element_data`.`ConditionCurrency`"},
	ConditionRecord:                whereHelpernull_Int{field: "`data_platform_quotations_item_pricing_element_data`.`ConditionRecord`"},
	ConditionSequentialNumber:      whereHelpernull_Int{field: "`data_platform_quotations_item_pricing_element_data`.`ConditionSequentialNumber`"},
	TaxCode:                        whereHelpernull_String{field: "`data_platform_quotations_item_pricing_element_data`.`TaxCode`"},
	TransactionCurrency:            whereHelpernull_String{field: "`data_platform_quotations_item_pricing_element_data`.`TransactionCurrency`"},
	ConditionIsManuallyChanged:     whereHelpernull_Bool{field: "`data_platform_quotations_item_pricing_element_data`.`ConditionIsManuallyChanged`"},
}

// DataPlatformQuotationsItemPricingElementDatumRels is where relationship names are stored.
var DataPlatformQuotationsItemPricingElementDatumRels = struct {
	QuotationDataPlatformQuotationsItemDatum string
}{
	QuotationDataPlatformQuotationsItemDatum: "QuotationDataPlatformQuotationsItemDatum",
}

// dataPlatformQuotationsItemPricingElementDatumR is where relationships are stored.
type dataPlatformQuotationsItemPricingElementDatumR struct {
	QuotationDataPlatformQuotationsItemDatum *DataPlatformQuotationsItemDatum `boil:"QuotationDataPlatformQuotationsItemDatum" json:"QuotationDataPlatformQuotationsItemDatum" toml:"QuotationDataPlatformQuotationsItemDatum" yaml:"QuotationDataPlatformQuotationsItemDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformQuotationsItemPricingElementDatumR) NewStruct() *dataPlatformQuotationsItemPricingElementDatumR {
	return &dataPlatformQuotationsItemPricingElementDatumR{}
}

func (r *dataPlatformQuotationsItemPricingElementDatumR) GetQuotationDataPlatformQuotationsItemDatum() *DataPlatformQuotationsItemDatum {
	if r == nil {
		return nil
	}
	return r.QuotationDataPlatformQuotationsItemDatum
}

// dataPlatformQuotationsItemPricingElementDatumL is where Load methods for each relationship are stored.
type dataPlatformQuotationsItemPricingElementDatumL struct{}

var (
	dataPlatformQuotationsItemPricingElementDatumAllColumns            = []string{"BusinessPartner", "Quotation", "QuotationItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionType", "PriceConditionDeterminationDte", "ConditionRateValue", "ConditionCurrency", "ConditionRecord", "ConditionSequentialNumber", "TaxCode", "TransactionCurrency", "ConditionIsManuallyChanged"}
	dataPlatformQuotationsItemPricingElementDatumColumnsWithoutDefault = []string{"BusinessPartner", "Quotation", "QuotationItem", "PricingProcedureStep", "PricingProcedureCounter", "ConditionType", "PriceConditionDeterminationDte", "ConditionRateValue", "ConditionCurrency", "ConditionRecord", "ConditionSequentialNumber", "TaxCode", "TransactionCurrency", "ConditionIsManuallyChanged"}
	dataPlatformQuotationsItemPricingElementDatumColumnsWithDefault    = []string{}
	dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns     = []string{"Quotation", "QuotationItem", "PricingProcedureStep", "PricingProcedureCounter"}
	dataPlatformQuotationsItemPricingElementDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformQuotationsItemPricingElementDatumSlice is an alias for a slice of pointers to DataPlatformQuotationsItemPricingElementDatum.
	// This should almost always be used instead of []DataPlatformQuotationsItemPricingElementDatum.
	DataPlatformQuotationsItemPricingElementDatumSlice []*DataPlatformQuotationsItemPricingElementDatum

	dataPlatformQuotationsItemPricingElementDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformQuotationsItemPricingElementDatumType                 = reflect.TypeOf(&DataPlatformQuotationsItemPricingElementDatum{})
	dataPlatformQuotationsItemPricingElementDatumMapping              = queries.MakeStructMapping(dataPlatformQuotationsItemPricingElementDatumType)
	dataPlatformQuotationsItemPricingElementDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformQuotationsItemPricingElementDatumType, dataPlatformQuotationsItemPricingElementDatumMapping, dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns)
	dataPlatformQuotationsItemPricingElementDatumInsertCacheMut       sync.RWMutex
	dataPlatformQuotationsItemPricingElementDatumInsertCache          = make(map[string]insertCache)
	dataPlatformQuotationsItemPricingElementDatumUpdateCacheMut       sync.RWMutex
	dataPlatformQuotationsItemPricingElementDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformQuotationsItemPricingElementDatumUpsertCacheMut       sync.RWMutex
	dataPlatformQuotationsItemPricingElementDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformQuotationsItemPricingElementDatum record from the query.
func (q dataPlatformQuotationsItemPricingElementDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformQuotationsItemPricingElementDatum, error) {
	o := &DataPlatformQuotationsItemPricingElementDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_quotations_item_pricing_element_data")
	}

	return o, nil
}

// All returns all DataPlatformQuotationsItemPricingElementDatum records from the query.
func (q dataPlatformQuotationsItemPricingElementDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformQuotationsItemPricingElementDatumSlice, error) {
	var o []*DataPlatformQuotationsItemPricingElementDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformQuotationsItemPricingElementDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformQuotationsItemPricingElementDatum records in the query.
func (q dataPlatformQuotationsItemPricingElementDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_quotations_item_pricing_element_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformQuotationsItemPricingElementDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_quotations_item_pricing_element_data exists")
	}

	return count > 0, nil
}

// QuotationDataPlatformQuotationsItemDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemPricingElementDatum) QuotationDataPlatformQuotationsItemDatum(mods ...qm.QueryMod) dataPlatformQuotationsItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Quotation` = ?", o.Quotation),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuotationsItemData(queryMods...)
}

// LoadQuotationDataPlatformQuotationsItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemPricingElementDatumL) LoadQuotationDataPlatformQuotationsItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemPricingElementDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemPricingElementDatum
	var object *DataPlatformQuotationsItemPricingElementDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemPricingElementDatum.(*DataPlatformQuotationsItemPricingElementDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemPricingElementDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemPricingElementDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemPricingElementDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemPricingElementDatum.(*[]*DataPlatformQuotationsItemPricingElementDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemPricingElementDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemPricingElementDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemPricingElementDatumR{}
		}
		args = append(args, object.Quotation)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemPricingElementDatumR{}
			}

			for _, a := range args {
				if a == obj.Quotation {
					continue Outer
				}
			}

			args = append(args, obj.Quotation)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_item_data`),
		qm.WhereIn(`data_platform_quotations_item_data.Quotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuotationsItemDatum")
	}

	var resultSlice []*DataPlatformQuotationsItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuotationsItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quotations_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QuotationDataPlatformQuotationsItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Quotation == foreign.Quotation {
				local.R.QuotationDataPlatformQuotationsItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetQuotationDataPlatformQuotationsItemDatum of the dataPlatformQuotationsItemPricingElementDatum to the related item.
// Sets o.R.QuotationDataPlatformQuotationsItemDatum to related.
func (o *DataPlatformQuotationsItemPricingElementDatum) SetQuotationDataPlatformQuotationsItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuotationsItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Quotation"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Quotation, o.Quotation, o.QuotationItem, o.PricingProcedureStep, o.PricingProcedureCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Quotation = related.Quotation
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemPricingElementDatumR{
			QuotationDataPlatformQuotationsItemDatum: related,
		}
	} else {
		o.R.QuotationDataPlatformQuotationsItemDatum = related
	}

	return nil
}

// DataPlatformQuotationsItemPricingElementData retrieves all the records using an executor.
func DataPlatformQuotationsItemPricingElementData(mods ...qm.QueryMod) dataPlatformQuotationsItemPricingElementDatumQuery {
	mods = append(mods, qm.From("`data_platform_quotations_item_pricing_element_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_quotations_item_pricing_element_data`.*"})
	}

	return dataPlatformQuotationsItemPricingElementDatumQuery{q}
}

// FindDataPlatformQuotationsItemPricingElementDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformQuotationsItemPricingElementDatum(ctx context.Context, exec boil.ContextExecutor, quotation int, quotationItem int, pricingProcedureStep int, pricingProcedureCounter int, selectCols ...string) (*DataPlatformQuotationsItemPricingElementDatum, error) {
	dataPlatformQuotationsItemPricingElementDatumObj := &DataPlatformQuotationsItemPricingElementDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_quotations_item_pricing_element_data` where `Quotation`=? AND `QuotationItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?", sel,
	)

	q := queries.Raw(query, quotation, quotationItem, pricingProcedureStep, pricingProcedureCounter)

	err := q.Bind(ctx, exec, dataPlatformQuotationsItemPricingElementDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_quotations_item_pricing_element_data")
	}

	return dataPlatformQuotationsItemPricingElementDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformQuotationsItemPricingElementDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_item_pricing_element_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsItemPricingElementDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformQuotationsItemPricingElementDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsItemPricingElementDatumInsertCache[key]
	dataPlatformQuotationsItemPricingElementDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformQuotationsItemPricingElementDatumAllColumns,
			dataPlatformQuotationsItemPricingElementDatumColumnsWithDefault,
			dataPlatformQuotationsItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsItemPricingElementDatumType, dataPlatformQuotationsItemPricingElementDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsItemPricingElementDatumType, dataPlatformQuotationsItemPricingElementDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_quotations_item_pricing_element_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_quotations_item_pricing_element_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_quotations_item_pricing_element_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_quotations_item_pricing_element_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Quotation,
		o.QuotationItem,
		o.PricingProcedureStep,
		o.PricingProcedureCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsItemPricingElementDatumInsertCacheMut.Lock()
		dataPlatformQuotationsItemPricingElementDatumInsertCache[key] = cache
		dataPlatformQuotationsItemPricingElementDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformQuotationsItemPricingElementDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformQuotationsItemPricingElementDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformQuotationsItemPricingElementDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformQuotationsItemPricingElementDatumUpdateCache[key]
	dataPlatformQuotationsItemPricingElementDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformQuotationsItemPricingElementDatumAllColumns,
			dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_quotations_item_pricing_element_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_quotations_item_pricing_element_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsItemPricingElementDatumType, dataPlatformQuotationsItemPricingElementDatumMapping, append(wl, dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_quotations_item_pricing_element_data row")
	}

	if !cached {
		dataPlatformQuotationsItemPricingElementDatumUpdateCacheMut.Lock()
		dataPlatformQuotationsItemPricingElementDatumUpdateCache[key] = cache
		dataPlatformQuotationsItemPricingElementDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformQuotationsItemPricingElementDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_quotations_item_pricing_element_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformQuotationsItemPricingElementDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_quotations_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformQuotationsItemPricingElementDatum slice")
	}

	return nil
}

var mySQLDataPlatformQuotationsItemPricingElementDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformQuotationsItemPricingElementDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_item_pricing_element_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsItemPricingElementDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformQuotationsItemPricingElementDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformQuotationsItemPricingElementDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsItemPricingElementDatumUpsertCache[key]
	dataPlatformQuotationsItemPricingElementDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformQuotationsItemPricingElementDatumAllColumns,
			dataPlatformQuotationsItemPricingElementDatumColumnsWithDefault,
			dataPlatformQuotationsItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformQuotationsItemPricingElementDatumAllColumns,
			dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_quotations_item_pricing_element_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_quotations_item_pricing_element_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_quotations_item_pricing_element_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsItemPricingElementDatumType, dataPlatformQuotationsItemPricingElementDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsItemPricingElementDatumType, dataPlatformQuotationsItemPricingElementDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_quotations_item_pricing_element_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformQuotationsItemPricingElementDatumType, dataPlatformQuotationsItemPricingElementDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_quotations_item_pricing_element_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsItemPricingElementDatumUpsertCacheMut.Lock()
		dataPlatformQuotationsItemPricingElementDatumUpsertCache[key] = cache
		dataPlatformQuotationsItemPricingElementDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformQuotationsItemPricingElementDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformQuotationsItemPricingElementDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformQuotationsItemPricingElementDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformQuotationsItemPricingElementDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_quotations_item_pricing_element_data` WHERE `Quotation`=? AND `QuotationItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_quotations_item_pricing_element_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformQuotationsItemPricingElementDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformQuotationsItemPricingElementDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_quotations_item_pricing_element_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformQuotationsItemPricingElementDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_quotations_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformQuotationsItemPricingElementDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformQuotationsItemPricingElementDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformQuotationsItemPricingElementDatum(ctx, exec, o.Quotation, o.QuotationItem, o.PricingProcedureStep, o.PricingProcedureCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformQuotationsItemPricingElementDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformQuotationsItemPricingElementDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_quotations_item_pricing_element_data`.* FROM `data_platform_quotations_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsItemPricingElementDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformQuotationsItemPricingElementDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformQuotationsItemPricingElementDatumExists checks if the DataPlatformQuotationsItemPricingElementDatum row exists.
func DataPlatformQuotationsItemPricingElementDatumExists(ctx context.Context, exec boil.ContextExecutor, quotation int, quotationItem int, pricingProcedureStep int, pricingProcedureCounter int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_quotations_item_pricing_element_data` where `Quotation`=? AND `QuotationItem`=? AND `PricingProcedureStep`=? AND `PricingProcedureCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, quotation, quotationItem, pricingProcedureStep, pricingProcedureCounter)
	}
	row := exec.QueryRowContext(ctx, sql, quotation, quotationItem, pricingProcedureStep, pricingProcedureCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_quotations_item_pricing_element_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformQuotationsItemPricingElementDatum row exists.
func (o *DataPlatformQuotationsItemPricingElementDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformQuotationsItemPricingElementDatumExists(ctx, exec, o.Quotation, o.QuotationItem, o.PricingProcedureStep, o.PricingProcedureCounter)
}
