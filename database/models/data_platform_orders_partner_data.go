// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformOrdersPartnerDatum is an object representing the database table.
type DataPlatformOrdersPartnerDatum struct {
	OrderID                 int         `boil:"OrderID" json:"OrderID" toml:"OrderID" yaml:"OrderID"`
	PartnerFunction         string      `boil:"PartnerFunction" json:"PartnerFunction" toml:"PartnerFunction" yaml:"PartnerFunction"`
	BusinessPartner         int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	BusinessPartnerFullName null.String `boil:"BusinessPartnerFullName" json:"BusinessPartnerFullName,omitempty" toml:"BusinessPartnerFullName" yaml:"BusinessPartnerFullName,omitempty"`
	BusinessPartnerName     null.String `boil:"BusinessPartnerName" json:"BusinessPartnerName,omitempty" toml:"BusinessPartnerName" yaml:"BusinessPartnerName,omitempty"`
	Organization            null.String `boil:"Organization" json:"Organization,omitempty" toml:"Organization" yaml:"Organization,omitempty"`
	Country                 null.String `boil:"Country" json:"Country,omitempty" toml:"Country" yaml:"Country,omitempty"`
	Language                null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	Currency                null.String `boil:"Currency" json:"Currency,omitempty" toml:"Currency" yaml:"Currency,omitempty"`
	ExternalDocumentID      null.String `boil:"ExternalDocumentID" json:"ExternalDocumentID,omitempty" toml:"ExternalDocumentID" yaml:"ExternalDocumentID,omitempty"`
	AddressID               null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`

	R *dataPlatformOrdersPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformOrdersPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformOrdersPartnerDatumColumns = struct {
	OrderID                 string
	PartnerFunction         string
	BusinessPartner         string
	BusinessPartnerFullName string
	BusinessPartnerName     string
	Organization            string
	Country                 string
	Language                string
	Currency                string
	ExternalDocumentID      string
	AddressID               string
}{
	OrderID:                 "OrderID",
	PartnerFunction:         "PartnerFunction",
	BusinessPartner:         "BusinessPartner",
	BusinessPartnerFullName: "BusinessPartnerFullName",
	BusinessPartnerName:     "BusinessPartnerName",
	Organization:            "Organization",
	Country:                 "Country",
	Language:                "Language",
	Currency:                "Currency",
	ExternalDocumentID:      "ExternalDocumentID",
	AddressID:               "AddressID",
}

var DataPlatformOrdersPartnerDatumTableColumns = struct {
	OrderID                 string
	PartnerFunction         string
	BusinessPartner         string
	BusinessPartnerFullName string
	BusinessPartnerName     string
	Organization            string
	Country                 string
	Language                string
	Currency                string
	ExternalDocumentID      string
	AddressID               string
}{
	OrderID:                 "data_platform_orders_partner_data.OrderID",
	PartnerFunction:         "data_platform_orders_partner_data.PartnerFunction",
	BusinessPartner:         "data_platform_orders_partner_data.BusinessPartner",
	BusinessPartnerFullName: "data_platform_orders_partner_data.BusinessPartnerFullName",
	BusinessPartnerName:     "data_platform_orders_partner_data.BusinessPartnerName",
	Organization:            "data_platform_orders_partner_data.Organization",
	Country:                 "data_platform_orders_partner_data.Country",
	Language:                "data_platform_orders_partner_data.Language",
	Currency:                "data_platform_orders_partner_data.Currency",
	ExternalDocumentID:      "data_platform_orders_partner_data.ExternalDocumentID",
	AddressID:               "data_platform_orders_partner_data.AddressID",
}

// Generated where

var DataPlatformOrdersPartnerDatumWhere = struct {
	OrderID                 whereHelperint
	PartnerFunction         whereHelperstring
	BusinessPartner         whereHelperint
	BusinessPartnerFullName whereHelpernull_String
	BusinessPartnerName     whereHelpernull_String
	Organization            whereHelpernull_String
	Country                 whereHelpernull_String
	Language                whereHelpernull_String
	Currency                whereHelpernull_String
	ExternalDocumentID      whereHelpernull_String
	AddressID               whereHelpernull_Int
}{
	OrderID:                 whereHelperint{field: "`data_platform_orders_partner_data`.`OrderID`"},
	PartnerFunction:         whereHelperstring{field: "`data_platform_orders_partner_data`.`PartnerFunction`"},
	BusinessPartner:         whereHelperint{field: "`data_platform_orders_partner_data`.`BusinessPartner`"},
	BusinessPartnerFullName: whereHelpernull_String{field: "`data_platform_orders_partner_data`.`BusinessPartnerFullName`"},
	BusinessPartnerName:     whereHelpernull_String{field: "`data_platform_orders_partner_data`.`BusinessPartnerName`"},
	Organization:            whereHelpernull_String{field: "`data_platform_orders_partner_data`.`Organization`"},
	Country:                 whereHelpernull_String{field: "`data_platform_orders_partner_data`.`Country`"},
	Language:                whereHelpernull_String{field: "`data_platform_orders_partner_data`.`Language`"},
	Currency:                whereHelpernull_String{field: "`data_platform_orders_partner_data`.`Currency`"},
	ExternalDocumentID:      whereHelpernull_String{field: "`data_platform_orders_partner_data`.`ExternalDocumentID`"},
	AddressID:               whereHelpernull_Int{field: "`data_platform_orders_partner_data`.`AddressID`"},
}

// DataPlatformOrdersPartnerDatumRels is where relationship names are stored.
var DataPlatformOrdersPartnerDatumRels = struct {
}{}

// dataPlatformOrdersPartnerDatumR is where relationships are stored.
type dataPlatformOrdersPartnerDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformOrdersPartnerDatumR) NewStruct() *dataPlatformOrdersPartnerDatumR {
	return &dataPlatformOrdersPartnerDatumR{}
}

// dataPlatformOrdersPartnerDatumL is where Load methods for each relationship are stored.
type dataPlatformOrdersPartnerDatumL struct{}

var (
	dataPlatformOrdersPartnerDatumAllColumns            = []string{"OrderID", "PartnerFunction", "BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "Organization", "Country", "Language", "Currency", "ExternalDocumentID", "AddressID"}
	dataPlatformOrdersPartnerDatumColumnsWithoutDefault = []string{"OrderID", "PartnerFunction", "BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "Organization", "Country", "Language", "Currency", "ExternalDocumentID", "AddressID"}
	dataPlatformOrdersPartnerDatumColumnsWithDefault    = []string{}
	dataPlatformOrdersPartnerDatumPrimaryKeyColumns     = []string{"OrderID", "PartnerFunction", "BusinessPartner"}
	dataPlatformOrdersPartnerDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformOrdersPartnerDatumSlice is an alias for a slice of pointers to DataPlatformOrdersPartnerDatum.
	// This should almost always be used instead of []DataPlatformOrdersPartnerDatum.
	DataPlatformOrdersPartnerDatumSlice []*DataPlatformOrdersPartnerDatum

	dataPlatformOrdersPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformOrdersPartnerDatumType                 = reflect.TypeOf(&DataPlatformOrdersPartnerDatum{})
	dataPlatformOrdersPartnerDatumMapping              = queries.MakeStructMapping(dataPlatformOrdersPartnerDatumType)
	dataPlatformOrdersPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformOrdersPartnerDatumType, dataPlatformOrdersPartnerDatumMapping, dataPlatformOrdersPartnerDatumPrimaryKeyColumns)
	dataPlatformOrdersPartnerDatumInsertCacheMut       sync.RWMutex
	dataPlatformOrdersPartnerDatumInsertCache          = make(map[string]insertCache)
	dataPlatformOrdersPartnerDatumUpdateCacheMut       sync.RWMutex
	dataPlatformOrdersPartnerDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformOrdersPartnerDatumUpsertCacheMut       sync.RWMutex
	dataPlatformOrdersPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformOrdersPartnerDatum record from the query.
func (q dataPlatformOrdersPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformOrdersPartnerDatum, error) {
	o := &DataPlatformOrdersPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_orders_partner_data")
	}

	return o, nil
}

// All returns all DataPlatformOrdersPartnerDatum records from the query.
func (q dataPlatformOrdersPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformOrdersPartnerDatumSlice, error) {
	var o []*DataPlatformOrdersPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformOrdersPartnerDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformOrdersPartnerDatum records in the query.
func (q dataPlatformOrdersPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_orders_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformOrdersPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_orders_partner_data exists")
	}

	return count > 0, nil
}

// DataPlatformOrdersPartnerData retrieves all the records using an executor.
func DataPlatformOrdersPartnerData(mods ...qm.QueryMod) dataPlatformOrdersPartnerDatumQuery {
	mods = append(mods, qm.From("`data_platform_orders_partner_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_orders_partner_data`.*"})
	}

	return dataPlatformOrdersPartnerDatumQuery{q}
}

// FindDataPlatformOrdersPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformOrdersPartnerDatum(ctx context.Context, exec boil.ContextExecutor, orderID int, partnerFunction string, businessPartner int, selectCols ...string) (*DataPlatformOrdersPartnerDatum, error) {
	dataPlatformOrdersPartnerDatumObj := &DataPlatformOrdersPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_orders_partner_data` where `OrderID`=? AND `PartnerFunction`=? AND `BusinessPartner`=?", sel,
	)

	q := queries.Raw(query, orderID, partnerFunction, businessPartner)

	err := q.Bind(ctx, exec, dataPlatformOrdersPartnerDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_orders_partner_data")
	}

	return dataPlatformOrdersPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformOrdersPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_partner_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformOrdersPartnerDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersPartnerDatumInsertCache[key]
	dataPlatformOrdersPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformOrdersPartnerDatumAllColumns,
			dataPlatformOrdersPartnerDatumColumnsWithDefault,
			dataPlatformOrdersPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersPartnerDatumType, dataPlatformOrdersPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformOrdersPartnerDatumType, dataPlatformOrdersPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_orders_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_orders_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_orders_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformOrdersPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_orders_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrderID,
		o.PartnerFunction,
		o.BusinessPartner,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersPartnerDatumInsertCacheMut.Lock()
		dataPlatformOrdersPartnerDatumInsertCache[key] = cache
		dataPlatformOrdersPartnerDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformOrdersPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformOrdersPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformOrdersPartnerDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformOrdersPartnerDatumUpdateCache[key]
	dataPlatformOrdersPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformOrdersPartnerDatumAllColumns,
			dataPlatformOrdersPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_orders_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_orders_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformOrdersPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersPartnerDatumType, dataPlatformOrdersPartnerDatumMapping, append(wl, dataPlatformOrdersPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_orders_partner_data row")
	}

	if !cached {
		dataPlatformOrdersPartnerDatumUpdateCacheMut.Lock()
		dataPlatformOrdersPartnerDatumUpdateCache[key] = cache
		dataPlatformOrdersPartnerDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformOrdersPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_orders_partner_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformOrdersPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_orders_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformOrdersPartnerDatum slice")
	}

	return nil
}

var mySQLDataPlatformOrdersPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformOrdersPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_partner_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformOrdersPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformOrdersPartnerDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersPartnerDatumUpsertCache[key]
	dataPlatformOrdersPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformOrdersPartnerDatumAllColumns,
			dataPlatformOrdersPartnerDatumColumnsWithDefault,
			dataPlatformOrdersPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformOrdersPartnerDatumAllColumns,
			dataPlatformOrdersPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_orders_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_orders_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_orders_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersPartnerDatumType, dataPlatformOrdersPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformOrdersPartnerDatumType, dataPlatformOrdersPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_orders_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformOrdersPartnerDatumType, dataPlatformOrdersPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_orders_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersPartnerDatumUpsertCacheMut.Lock()
		dataPlatformOrdersPartnerDatumUpsertCache[key] = cache
		dataPlatformOrdersPartnerDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformOrdersPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformOrdersPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformOrdersPartnerDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformOrdersPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_orders_partner_data` WHERE `OrderID`=? AND `PartnerFunction`=? AND `BusinessPartner`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_orders_partner_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformOrdersPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformOrdersPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_orders_partner_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformOrdersPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_orders_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformOrdersPartnerDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformOrdersPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformOrdersPartnerDatum(ctx, exec, o.OrderID, o.PartnerFunction, o.BusinessPartner)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformOrdersPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformOrdersPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_orders_partner_data`.* FROM `data_platform_orders_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformOrdersPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformOrdersPartnerDatumExists checks if the DataPlatformOrdersPartnerDatum row exists.
func DataPlatformOrdersPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, orderID int, partnerFunction string, businessPartner int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_orders_partner_data` where `OrderID`=? AND `PartnerFunction`=? AND `BusinessPartner`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID, partnerFunction, businessPartner)
	}
	row := exec.QueryRowContext(ctx, sql, orderID, partnerFunction, businessPartner)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_orders_partner_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformOrdersPartnerDatum row exists.
func (o *DataPlatformOrdersPartnerDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformOrdersPartnerDatumExists(ctx, exec, o.OrderID, o.PartnerFunction, o.BusinessPartner)
}
