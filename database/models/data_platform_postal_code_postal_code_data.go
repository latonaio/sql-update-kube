// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPostalCodePostalCodeDatum is an object representing the database table.
type DataPlatformPostalCodePostalCodeDatum struct {
	PostalCode     string `boil:"PostalCode" json:"PostalCode" toml:"PostalCode" yaml:"PostalCode"`
	Country        string `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`
	LocalSubRegion string `boil:"LocalSubRegion" json:"LocalSubRegion" toml:"LocalSubRegion" yaml:"LocalSubRegion"`
	LocalRegion    string `boil:"LocalRegion" json:"LocalRegion" toml:"LocalRegion" yaml:"LocalRegion"`
	GlobalRegion   string `boil:"GlobalRegion" json:"GlobalRegion" toml:"GlobalRegion" yaml:"GlobalRegion"`

	R *dataPlatformPostalCodePostalCodeDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPostalCodePostalCodeDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPostalCodePostalCodeDatumColumns = struct {
	PostalCode     string
	Country        string
	LocalSubRegion string
	LocalRegion    string
	GlobalRegion   string
}{
	PostalCode:     "PostalCode",
	Country:        "Country",
	LocalSubRegion: "LocalSubRegion",
	LocalRegion:    "LocalRegion",
	GlobalRegion:   "GlobalRegion",
}

var DataPlatformPostalCodePostalCodeDatumTableColumns = struct {
	PostalCode     string
	Country        string
	LocalSubRegion string
	LocalRegion    string
	GlobalRegion   string
}{
	PostalCode:     "data_platform_postal_code_postal_code_data.PostalCode",
	Country:        "data_platform_postal_code_postal_code_data.Country",
	LocalSubRegion: "data_platform_postal_code_postal_code_data.LocalSubRegion",
	LocalRegion:    "data_platform_postal_code_postal_code_data.LocalRegion",
	GlobalRegion:   "data_platform_postal_code_postal_code_data.GlobalRegion",
}

// Generated where

var DataPlatformPostalCodePostalCodeDatumWhere = struct {
	PostalCode     whereHelperstring
	Country        whereHelperstring
	LocalSubRegion whereHelperstring
	LocalRegion    whereHelperstring
	GlobalRegion   whereHelperstring
}{
	PostalCode:     whereHelperstring{field: "`data_platform_postal_code_postal_code_data`.`PostalCode`"},
	Country:        whereHelperstring{field: "`data_platform_postal_code_postal_code_data`.`Country`"},
	LocalSubRegion: whereHelperstring{field: "`data_platform_postal_code_postal_code_data`.`LocalSubRegion`"},
	LocalRegion:    whereHelperstring{field: "`data_platform_postal_code_postal_code_data`.`LocalRegion`"},
	GlobalRegion:   whereHelperstring{field: "`data_platform_postal_code_postal_code_data`.`GlobalRegion`"},
}

// DataPlatformPostalCodePostalCodeDatumRels is where relationship names are stored.
var DataPlatformPostalCodePostalCodeDatumRels = struct {
	CountryDataPlatformUsageControlChainUsageControlChainData string
}{
	CountryDataPlatformUsageControlChainUsageControlChainData: "CountryDataPlatformUsageControlChainUsageControlChainData",
}

// dataPlatformPostalCodePostalCodeDatumR is where relationships are stored.
type dataPlatformPostalCodePostalCodeDatumR struct {
	CountryDataPlatformUsageControlChainUsageControlChainData DataPlatformUsageControlChainUsageControlChainDatumSlice `boil:"CountryDataPlatformUsageControlChainUsageControlChainData" json:"CountryDataPlatformUsageControlChainUsageControlChainData" toml:"CountryDataPlatformUsageControlChainUsageControlChainData" yaml:"CountryDataPlatformUsageControlChainUsageControlChainData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPostalCodePostalCodeDatumR) NewStruct() *dataPlatformPostalCodePostalCodeDatumR {
	return &dataPlatformPostalCodePostalCodeDatumR{}
}

func (r *dataPlatformPostalCodePostalCodeDatumR) GetCountryDataPlatformUsageControlChainUsageControlChainData() DataPlatformUsageControlChainUsageControlChainDatumSlice {
	if r == nil {
		return nil
	}
	return r.CountryDataPlatformUsageControlChainUsageControlChainData
}

// dataPlatformPostalCodePostalCodeDatumL is where Load methods for each relationship are stored.
type dataPlatformPostalCodePostalCodeDatumL struct{}

var (
	dataPlatformPostalCodePostalCodeDatumAllColumns            = []string{"PostalCode", "Country", "LocalSubRegion", "LocalRegion", "GlobalRegion"}
	dataPlatformPostalCodePostalCodeDatumColumnsWithoutDefault = []string{"PostalCode", "Country", "LocalSubRegion", "LocalRegion", "GlobalRegion"}
	dataPlatformPostalCodePostalCodeDatumColumnsWithDefault    = []string{}
	dataPlatformPostalCodePostalCodeDatumPrimaryKeyColumns     = []string{"PostalCode", "Country"}
	dataPlatformPostalCodePostalCodeDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPostalCodePostalCodeDatumSlice is an alias for a slice of pointers to DataPlatformPostalCodePostalCodeDatum.
	// This should almost always be used instead of []DataPlatformPostalCodePostalCodeDatum.
	DataPlatformPostalCodePostalCodeDatumSlice []*DataPlatformPostalCodePostalCodeDatum

	dataPlatformPostalCodePostalCodeDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPostalCodePostalCodeDatumType                 = reflect.TypeOf(&DataPlatformPostalCodePostalCodeDatum{})
	dataPlatformPostalCodePostalCodeDatumMapping              = queries.MakeStructMapping(dataPlatformPostalCodePostalCodeDatumType)
	dataPlatformPostalCodePostalCodeDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPostalCodePostalCodeDatumType, dataPlatformPostalCodePostalCodeDatumMapping, dataPlatformPostalCodePostalCodeDatumPrimaryKeyColumns)
	dataPlatformPostalCodePostalCodeDatumInsertCacheMut       sync.RWMutex
	dataPlatformPostalCodePostalCodeDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPostalCodePostalCodeDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPostalCodePostalCodeDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPostalCodePostalCodeDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPostalCodePostalCodeDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPostalCodePostalCodeDatum record from the query.
func (q dataPlatformPostalCodePostalCodeDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPostalCodePostalCodeDatum, error) {
	o := &DataPlatformPostalCodePostalCodeDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_postal_code_postal_code_data")
	}

	return o, nil
}

// All returns all DataPlatformPostalCodePostalCodeDatum records from the query.
func (q dataPlatformPostalCodePostalCodeDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPostalCodePostalCodeDatumSlice, error) {
	var o []*DataPlatformPostalCodePostalCodeDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPostalCodePostalCodeDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPostalCodePostalCodeDatum records in the query.
func (q dataPlatformPostalCodePostalCodeDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_postal_code_postal_code_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPostalCodePostalCodeDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_postal_code_postal_code_data exists")
	}

	return count > 0, nil
}

// CountryDataPlatformUsageControlChainUsageControlChainData retrieves all the data_platform_usage_control_chain_usage_control_chain_datum's DataPlatformUsageControlChainUsageControlChainData with an executor via Country column.
func (o *DataPlatformPostalCodePostalCodeDatum) CountryDataPlatformUsageControlChainUsageControlChainData(mods ...qm.QueryMod) dataPlatformUsageControlChainUsageControlChainDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_usage_control_chain_usage_control_chain_data`.`Country`=?", o.Country),
	)

	return DataPlatformUsageControlChainUsageControlChainData(queryMods...)
}

// LoadCountryDataPlatformUsageControlChainUsageControlChainData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPostalCodePostalCodeDatumL) LoadCountryDataPlatformUsageControlChainUsageControlChainData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPostalCodePostalCodeDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPostalCodePostalCodeDatum
	var object *DataPlatformPostalCodePostalCodeDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPostalCodePostalCodeDatum.(*DataPlatformPostalCodePostalCodeDatum)
		if !ok {
			object = new(DataPlatformPostalCodePostalCodeDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPostalCodePostalCodeDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPostalCodePostalCodeDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPostalCodePostalCodeDatum.(*[]*DataPlatformPostalCodePostalCodeDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPostalCodePostalCodeDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPostalCodePostalCodeDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPostalCodePostalCodeDatumR{}
		}
		args = append(args, object.Country)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPostalCodePostalCodeDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Country) {
					continue Outer
				}
			}

			args = append(args, obj.Country)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_usage_control_chain_usage_control_chain_data`),
		qm.WhereIn(`data_platform_usage_control_chain_usage_control_chain_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_usage_control_chain_usage_control_chain_data")
	}

	var resultSlice []*DataPlatformUsageControlChainUsageControlChainDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_usage_control_chain_usage_control_chain_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_usage_control_chain_usage_control_chain_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_usage_control_chain_usage_control_chain_data")
	}

	if singular {
		object.R.CountryDataPlatformUsageControlChainUsageControlChainData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Country, foreign.Country) {
				local.R.CountryDataPlatformUsageControlChainUsageControlChainData = append(local.R.CountryDataPlatformUsageControlChainUsageControlChainData, foreign)
				break
			}
		}
	}

	return nil
}

// AddCountryDataPlatformUsageControlChainUsageControlChainData adds the given related objects to the existing relationships
// of the data_platform_postal_code_postal_code_datum, optionally inserting them as new records.
// Appends related to o.R.CountryDataPlatformUsageControlChainUsageControlChainData.
func (o *DataPlatformPostalCodePostalCodeDatum) AddCountryDataPlatformUsageControlChainUsageControlChainData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformUsageControlChainUsageControlChainDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Country, o.Country)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_usage_control_chain_usage_control_chain_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Country"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformUsageControlChainUsageControlChainDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Country, rel.UsageControlChain}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Country, o.Country)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPostalCodePostalCodeDatumR{
			CountryDataPlatformUsageControlChainUsageControlChainData: related,
		}
	} else {
		o.R.CountryDataPlatformUsageControlChainUsageControlChainData = append(o.R.CountryDataPlatformUsageControlChainUsageControlChainData, related...)
	}

	return nil
}

// SetCountryDataPlatformUsageControlChainUsageControlChainData removes all previously related items of the
// data_platform_postal_code_postal_code_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CountryDataPlatformPostalCodePostalCodeDatum's CountryDataPlatformUsageControlChainUsageControlChainData accordingly.
// Replaces o.R.CountryDataPlatformUsageControlChainUsageControlChainData with related.
func (o *DataPlatformPostalCodePostalCodeDatum) SetCountryDataPlatformUsageControlChainUsageControlChainData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformUsageControlChainUsageControlChainDatum) error {
	query := "update `data_platform_usage_control_chain_usage_control_chain_data` set `Country` = null where `Country` = ?"
	values := []interface{}{o.Country}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.CountryDataPlatformUsageControlChainUsageControlChainData = nil
	}

	return o.AddCountryDataPlatformUsageControlChainUsageControlChainData(ctx, exec, insert, related...)
}

// RemoveCountryDataPlatformUsageControlChainUsageControlChainData relationships from objects passed in.
// Removes related items from R.CountryDataPlatformUsageControlChainUsageControlChainData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPostalCodePostalCodeDatum) RemoveCountryDataPlatformUsageControlChainUsageControlChainData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformUsageControlChainUsageControlChainDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Country, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Country")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CountryDataPlatformUsageControlChainUsageControlChainData {
			if rel != ri {
				continue
			}

			ln := len(o.R.CountryDataPlatformUsageControlChainUsageControlChainData)
			if ln > 1 && i < ln-1 {
				o.R.CountryDataPlatformUsageControlChainUsageControlChainData[i] = o.R.CountryDataPlatformUsageControlChainUsageControlChainData[ln-1]
			}
			o.R.CountryDataPlatformUsageControlChainUsageControlChainData = o.R.CountryDataPlatformUsageControlChainUsageControlChainData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformPostalCodePostalCodeData retrieves all the records using an executor.
func DataPlatformPostalCodePostalCodeData(mods ...qm.QueryMod) dataPlatformPostalCodePostalCodeDatumQuery {
	mods = append(mods, qm.From("`data_platform_postal_code_postal_code_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_postal_code_postal_code_data`.*"})
	}

	return dataPlatformPostalCodePostalCodeDatumQuery{q}
}

// FindDataPlatformPostalCodePostalCodeDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPostalCodePostalCodeDatum(ctx context.Context, exec boil.ContextExecutor, postalCode string, country string, selectCols ...string) (*DataPlatformPostalCodePostalCodeDatum, error) {
	dataPlatformPostalCodePostalCodeDatumObj := &DataPlatformPostalCodePostalCodeDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_postal_code_postal_code_data` where `PostalCode`=? AND `Country`=?", sel,
	)

	q := queries.Raw(query, postalCode, country)

	err := q.Bind(ctx, exec, dataPlatformPostalCodePostalCodeDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_postal_code_postal_code_data")
	}

	return dataPlatformPostalCodePostalCodeDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPostalCodePostalCodeDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_postal_code_postal_code_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPostalCodePostalCodeDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPostalCodePostalCodeDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPostalCodePostalCodeDatumInsertCache[key]
	dataPlatformPostalCodePostalCodeDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPostalCodePostalCodeDatumAllColumns,
			dataPlatformPostalCodePostalCodeDatumColumnsWithDefault,
			dataPlatformPostalCodePostalCodeDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPostalCodePostalCodeDatumType, dataPlatformPostalCodePostalCodeDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPostalCodePostalCodeDatumType, dataPlatformPostalCodePostalCodeDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_postal_code_postal_code_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_postal_code_postal_code_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_postal_code_postal_code_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPostalCodePostalCodeDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_postal_code_postal_code_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PostalCode,
		o.Country,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_postal_code_postal_code_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPostalCodePostalCodeDatumInsertCacheMut.Lock()
		dataPlatformPostalCodePostalCodeDatumInsertCache[key] = cache
		dataPlatformPostalCodePostalCodeDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPostalCodePostalCodeDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPostalCodePostalCodeDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPostalCodePostalCodeDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPostalCodePostalCodeDatumUpdateCache[key]
	dataPlatformPostalCodePostalCodeDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPostalCodePostalCodeDatumAllColumns,
			dataPlatformPostalCodePostalCodeDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_postal_code_postal_code_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_postal_code_postal_code_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPostalCodePostalCodeDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPostalCodePostalCodeDatumType, dataPlatformPostalCodePostalCodeDatumMapping, append(wl, dataPlatformPostalCodePostalCodeDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_postal_code_postal_code_data row")
	}

	if !cached {
		dataPlatformPostalCodePostalCodeDatumUpdateCacheMut.Lock()
		dataPlatformPostalCodePostalCodeDatumUpdateCache[key] = cache
		dataPlatformPostalCodePostalCodeDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPostalCodePostalCodeDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_postal_code_postal_code_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPostalCodePostalCodeDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPostalCodePostalCodeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_postal_code_postal_code_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPostalCodePostalCodeDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPostalCodePostalCodeDatum slice")
	}

	return nil
}

var mySQLDataPlatformPostalCodePostalCodeDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPostalCodePostalCodeDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_postal_code_postal_code_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPostalCodePostalCodeDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPostalCodePostalCodeDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPostalCodePostalCodeDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPostalCodePostalCodeDatumUpsertCache[key]
	dataPlatformPostalCodePostalCodeDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPostalCodePostalCodeDatumAllColumns,
			dataPlatformPostalCodePostalCodeDatumColumnsWithDefault,
			dataPlatformPostalCodePostalCodeDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPostalCodePostalCodeDatumAllColumns,
			dataPlatformPostalCodePostalCodeDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_postal_code_postal_code_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_postal_code_postal_code_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_postal_code_postal_code_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPostalCodePostalCodeDatumType, dataPlatformPostalCodePostalCodeDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPostalCodePostalCodeDatumType, dataPlatformPostalCodePostalCodeDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_postal_code_postal_code_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPostalCodePostalCodeDatumType, dataPlatformPostalCodePostalCodeDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_postal_code_postal_code_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_postal_code_postal_code_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPostalCodePostalCodeDatumUpsertCacheMut.Lock()
		dataPlatformPostalCodePostalCodeDatumUpsertCache[key] = cache
		dataPlatformPostalCodePostalCodeDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPostalCodePostalCodeDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPostalCodePostalCodeDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPostalCodePostalCodeDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPostalCodePostalCodeDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_postal_code_postal_code_data` WHERE `PostalCode`=? AND `Country`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_postal_code_postal_code_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPostalCodePostalCodeDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPostalCodePostalCodeDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_postal_code_postal_code_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPostalCodePostalCodeDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPostalCodePostalCodeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_postal_code_postal_code_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPostalCodePostalCodeDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPostalCodePostalCodeDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPostalCodePostalCodeDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPostalCodePostalCodeDatum(ctx, exec, o.PostalCode, o.Country)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPostalCodePostalCodeDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPostalCodePostalCodeDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPostalCodePostalCodeDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_postal_code_postal_code_data`.* FROM `data_platform_postal_code_postal_code_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPostalCodePostalCodeDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPostalCodePostalCodeDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPostalCodePostalCodeDatumExists checks if the DataPlatformPostalCodePostalCodeDatum row exists.
func DataPlatformPostalCodePostalCodeDatumExists(ctx context.Context, exec boil.ContextExecutor, postalCode string, country string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_postal_code_postal_code_data` where `PostalCode`=? AND `Country`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, postalCode, country)
	}
	row := exec.QueryRowContext(ctx, sql, postalCode, country)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_postal_code_postal_code_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPostalCodePostalCodeDatum row exists.
func (o *DataPlatformPostalCodePostalCodeDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPostalCodePostalCodeDatumExists(ctx, exec, o.PostalCode, o.Country)
}
