// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformDistrictDistrictDatum is an object representing the database table.
type DataPlatformDistrictDistrictDatum struct {
	District string `boil:"District" json:"District" toml:"District" yaml:"District"`
	Country  string `boil:"Country" json:"Country" toml:"Country" yaml:"Country"`

	R *dataPlatformDistrictDistrictDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformDistrictDistrictDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformDistrictDistrictDatumColumns = struct {
	District string
	Country  string
}{
	District: "District",
	Country:  "Country",
}

var DataPlatformDistrictDistrictDatumTableColumns = struct {
	District string
	Country  string
}{
	District: "data_platform_district_district_data.District",
	Country:  "data_platform_district_district_data.Country",
}

// Generated where

var DataPlatformDistrictDistrictDatumWhere = struct {
	District whereHelperstring
	Country  whereHelperstring
}{
	District: whereHelperstring{field: "`data_platform_district_district_data`.`District`"},
	Country:  whereHelperstring{field: "`data_platform_district_district_data`.`Country`"},
}

// DataPlatformDistrictDistrictDatumRels is where relationship names are stored.
var DataPlatformDistrictDistrictDatumRels = struct {
}{}

// dataPlatformDistrictDistrictDatumR is where relationships are stored.
type dataPlatformDistrictDistrictDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformDistrictDistrictDatumR) NewStruct() *dataPlatformDistrictDistrictDatumR {
	return &dataPlatformDistrictDistrictDatumR{}
}

// dataPlatformDistrictDistrictDatumL is where Load methods for each relationship are stored.
type dataPlatformDistrictDistrictDatumL struct{}

var (
	dataPlatformDistrictDistrictDatumAllColumns            = []string{"District", "Country"}
	dataPlatformDistrictDistrictDatumColumnsWithoutDefault = []string{"District", "Country"}
	dataPlatformDistrictDistrictDatumColumnsWithDefault    = []string{}
	dataPlatformDistrictDistrictDatumPrimaryKeyColumns     = []string{"District", "Country"}
	dataPlatformDistrictDistrictDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformDistrictDistrictDatumSlice is an alias for a slice of pointers to DataPlatformDistrictDistrictDatum.
	// This should almost always be used instead of []DataPlatformDistrictDistrictDatum.
	DataPlatformDistrictDistrictDatumSlice []*DataPlatformDistrictDistrictDatum
	// DataPlatformDistrictDistrictDatumHook is the signature for custom DataPlatformDistrictDistrictDatum hook methods
	DataPlatformDistrictDistrictDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformDistrictDistrictDatum) error

	dataPlatformDistrictDistrictDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformDistrictDistrictDatumType                 = reflect.TypeOf(&DataPlatformDistrictDistrictDatum{})
	dataPlatformDistrictDistrictDatumMapping              = queries.MakeStructMapping(dataPlatformDistrictDistrictDatumType)
	dataPlatformDistrictDistrictDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformDistrictDistrictDatumType, dataPlatformDistrictDistrictDatumMapping, dataPlatformDistrictDistrictDatumPrimaryKeyColumns)
	dataPlatformDistrictDistrictDatumInsertCacheMut       sync.RWMutex
	dataPlatformDistrictDistrictDatumInsertCache          = make(map[string]insertCache)
	dataPlatformDistrictDistrictDatumUpdateCacheMut       sync.RWMutex
	dataPlatformDistrictDistrictDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformDistrictDistrictDatumUpsertCacheMut       sync.RWMutex
	dataPlatformDistrictDistrictDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformDistrictDistrictDatumAfterSelectHooks []DataPlatformDistrictDistrictDatumHook

var dataPlatformDistrictDistrictDatumBeforeInsertHooks []DataPlatformDistrictDistrictDatumHook
var dataPlatformDistrictDistrictDatumAfterInsertHooks []DataPlatformDistrictDistrictDatumHook

var dataPlatformDistrictDistrictDatumBeforeUpdateHooks []DataPlatformDistrictDistrictDatumHook
var dataPlatformDistrictDistrictDatumAfterUpdateHooks []DataPlatformDistrictDistrictDatumHook

var dataPlatformDistrictDistrictDatumBeforeDeleteHooks []DataPlatformDistrictDistrictDatumHook
var dataPlatformDistrictDistrictDatumAfterDeleteHooks []DataPlatformDistrictDistrictDatumHook

var dataPlatformDistrictDistrictDatumBeforeUpsertHooks []DataPlatformDistrictDistrictDatumHook
var dataPlatformDistrictDistrictDatumAfterUpsertHooks []DataPlatformDistrictDistrictDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformDistrictDistrictDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistrictDistrictDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformDistrictDistrictDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistrictDistrictDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformDistrictDistrictDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistrictDistrictDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformDistrictDistrictDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistrictDistrictDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformDistrictDistrictDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistrictDistrictDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformDistrictDistrictDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistrictDistrictDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformDistrictDistrictDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistrictDistrictDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformDistrictDistrictDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistrictDistrictDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformDistrictDistrictDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistrictDistrictDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformDistrictDistrictDatumHook registers your hook function for all future operations.
func AddDataPlatformDistrictDistrictDatumHook(hookPoint boil.HookPoint, dataPlatformDistrictDistrictDatumHook DataPlatformDistrictDistrictDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformDistrictDistrictDatumAfterSelectHooks = append(dataPlatformDistrictDistrictDatumAfterSelectHooks, dataPlatformDistrictDistrictDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformDistrictDistrictDatumBeforeInsertHooks = append(dataPlatformDistrictDistrictDatumBeforeInsertHooks, dataPlatformDistrictDistrictDatumHook)
	case boil.AfterInsertHook:
		dataPlatformDistrictDistrictDatumAfterInsertHooks = append(dataPlatformDistrictDistrictDatumAfterInsertHooks, dataPlatformDistrictDistrictDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformDistrictDistrictDatumBeforeUpdateHooks = append(dataPlatformDistrictDistrictDatumBeforeUpdateHooks, dataPlatformDistrictDistrictDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformDistrictDistrictDatumAfterUpdateHooks = append(dataPlatformDistrictDistrictDatumAfterUpdateHooks, dataPlatformDistrictDistrictDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformDistrictDistrictDatumBeforeDeleteHooks = append(dataPlatformDistrictDistrictDatumBeforeDeleteHooks, dataPlatformDistrictDistrictDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformDistrictDistrictDatumAfterDeleteHooks = append(dataPlatformDistrictDistrictDatumAfterDeleteHooks, dataPlatformDistrictDistrictDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformDistrictDistrictDatumBeforeUpsertHooks = append(dataPlatformDistrictDistrictDatumBeforeUpsertHooks, dataPlatformDistrictDistrictDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformDistrictDistrictDatumAfterUpsertHooks = append(dataPlatformDistrictDistrictDatumAfterUpsertHooks, dataPlatformDistrictDistrictDatumHook)
	}
}

// One returns a single dataPlatformDistrictDistrictDatum record from the query.
func (q dataPlatformDistrictDistrictDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformDistrictDistrictDatum, error) {
	o := &DataPlatformDistrictDistrictDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_district_district_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformDistrictDistrictDatum records from the query.
func (q dataPlatformDistrictDistrictDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformDistrictDistrictDatumSlice, error) {
	var o []*DataPlatformDistrictDistrictDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformDistrictDistrictDatum slice")
	}

	if len(dataPlatformDistrictDistrictDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformDistrictDistrictDatum records in the query.
func (q dataPlatformDistrictDistrictDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_district_district_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformDistrictDistrictDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_district_district_data exists")
	}

	return count > 0, nil
}

// DataPlatformDistrictDistrictData retrieves all the records using an executor.
func DataPlatformDistrictDistrictData(mods ...qm.QueryMod) dataPlatformDistrictDistrictDatumQuery {
	mods = append(mods, qm.From("`data_platform_district_district_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_district_district_data`.*"})
	}

	return dataPlatformDistrictDistrictDatumQuery{q}
}

// FindDataPlatformDistrictDistrictDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformDistrictDistrictDatum(ctx context.Context, exec boil.ContextExecutor, district string, country string, selectCols ...string) (*DataPlatformDistrictDistrictDatum, error) {
	dataPlatformDistrictDistrictDatumObj := &DataPlatformDistrictDistrictDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_district_district_data` where `District`=? AND `Country`=?", sel,
	)

	q := queries.Raw(query, district, country)

	err := q.Bind(ctx, exec, dataPlatformDistrictDistrictDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_district_district_data")
	}

	if err = dataPlatformDistrictDistrictDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformDistrictDistrictDatumObj, err
	}

	return dataPlatformDistrictDistrictDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformDistrictDistrictDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_district_district_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDistrictDistrictDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformDistrictDistrictDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformDistrictDistrictDatumInsertCache[key]
	dataPlatformDistrictDistrictDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformDistrictDistrictDatumAllColumns,
			dataPlatformDistrictDistrictDatumColumnsWithDefault,
			dataPlatformDistrictDistrictDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDistrictDistrictDatumType, dataPlatformDistrictDistrictDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformDistrictDistrictDatumType, dataPlatformDistrictDistrictDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_district_district_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_district_district_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_district_district_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformDistrictDistrictDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_district_district_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.District,
		o.Country,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_district_district_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDistrictDistrictDatumInsertCacheMut.Lock()
		dataPlatformDistrictDistrictDatumInsertCache[key] = cache
		dataPlatformDistrictDistrictDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformDistrictDistrictDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformDistrictDistrictDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformDistrictDistrictDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformDistrictDistrictDatumUpdateCache[key]
	dataPlatformDistrictDistrictDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformDistrictDistrictDatumAllColumns,
			dataPlatformDistrictDistrictDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_district_district_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_district_district_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformDistrictDistrictDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformDistrictDistrictDatumType, dataPlatformDistrictDistrictDatumMapping, append(wl, dataPlatformDistrictDistrictDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_district_district_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_district_district_data")
	}

	if !cached {
		dataPlatformDistrictDistrictDatumUpdateCacheMut.Lock()
		dataPlatformDistrictDistrictDatumUpdateCache[key] = cache
		dataPlatformDistrictDistrictDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformDistrictDistrictDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_district_district_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_district_district_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformDistrictDistrictDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDistrictDistrictDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_district_district_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDistrictDistrictDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformDistrictDistrictDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformDistrictDistrictDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformDistrictDistrictDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformDistrictDistrictDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_district_district_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDistrictDistrictDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformDistrictDistrictDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformDistrictDistrictDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformDistrictDistrictDatumUpsertCache[key]
	dataPlatformDistrictDistrictDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformDistrictDistrictDatumAllColumns,
			dataPlatformDistrictDistrictDatumColumnsWithDefault,
			dataPlatformDistrictDistrictDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformDistrictDistrictDatumAllColumns,
			dataPlatformDistrictDistrictDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_district_district_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_district_district_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_district_district_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDistrictDistrictDatumType, dataPlatformDistrictDistrictDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformDistrictDistrictDatumType, dataPlatformDistrictDistrictDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_district_district_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformDistrictDistrictDatumType, dataPlatformDistrictDistrictDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_district_district_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_district_district_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDistrictDistrictDatumUpsertCacheMut.Lock()
		dataPlatformDistrictDistrictDatumUpsertCache[key] = cache
		dataPlatformDistrictDistrictDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformDistrictDistrictDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformDistrictDistrictDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformDistrictDistrictDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformDistrictDistrictDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_district_district_data` WHERE `District`=? AND `Country`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_district_district_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_district_district_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformDistrictDistrictDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformDistrictDistrictDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_district_district_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_district_district_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformDistrictDistrictDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformDistrictDistrictDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDistrictDistrictDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_district_district_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDistrictDistrictDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformDistrictDistrictDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_district_district_data")
	}

	if len(dataPlatformDistrictDistrictDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformDistrictDistrictDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformDistrictDistrictDatum(ctx, exec, o.District, o.Country)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformDistrictDistrictDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformDistrictDistrictDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDistrictDistrictDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_district_district_data`.* FROM `data_platform_district_district_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDistrictDistrictDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformDistrictDistrictDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformDistrictDistrictDatumExists checks if the DataPlatformDistrictDistrictDatum row exists.
func DataPlatformDistrictDistrictDatumExists(ctx context.Context, exec boil.ContextExecutor, district string, country string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_district_district_data` where `District`=? AND `Country`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, district, country)
	}
	row := exec.QueryRowContext(ctx, sql, district, country)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_district_district_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformDistrictDistrictDatum row exists.
func (o *DataPlatformDistrictDistrictDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformDistrictDistrictDatumExists(ctx, exec, o.District, o.Country)
}
