// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSupplyChainRelationshipTransactionDatum is an object representing the database table.
type DataPlatformSupplyChainRelationshipTransactionDatum struct {
	SupplyChainRelationshipID int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	Buyer                     int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                    int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	TransactionCurrency       null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	PaymentTerms              null.String `boil:"PaymentTerms" json:"PaymentTerms,omitempty" toml:"PaymentTerms" yaml:"PaymentTerms,omitempty"`
	PaymentMethod             null.String `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	Incoterms                 null.String `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	AccountAssignmentGroup    null.String `boil:"AccountAssignmentGroup" json:"AccountAssignmentGroup,omitempty" toml:"AccountAssignmentGroup" yaml:"AccountAssignmentGroup,omitempty"`
	CreationDate              null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate            null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	QuotationIsBlocked        null.Bool   `boil:"QuotationIsBlocked" json:"QuotationIsBlocked,omitempty" toml:"QuotationIsBlocked" yaml:"QuotationIsBlocked,omitempty"`
	OrderIsBlocked            null.Bool   `boil:"OrderIsBlocked" json:"OrderIsBlocked,omitempty" toml:"OrderIsBlocked" yaml:"OrderIsBlocked,omitempty"`
	DeliveryIsBlocked         null.Bool   `boil:"DeliveryIsBlocked" json:"DeliveryIsBlocked,omitempty" toml:"DeliveryIsBlocked" yaml:"DeliveryIsBlocked,omitempty"`
	BillingIsBlocked          null.Bool   `boil:"BillingIsBlocked" json:"BillingIsBlocked,omitempty" toml:"BillingIsBlocked" yaml:"BillingIsBlocked,omitempty"`
	IsMarkedForDeletion       null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSupplyChainRelationshipTransactionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSupplyChainRelationshipTransactionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSupplyChainRelationshipTransactionDatumColumns = struct {
	SupplyChainRelationshipID string
	Buyer                     string
	Seller                    string
	TransactionCurrency       string
	PaymentTerms              string
	PaymentMethod             string
	Incoterms                 string
	AccountAssignmentGroup    string
	CreationDate              string
	LastChangeDate            string
	QuotationIsBlocked        string
	OrderIsBlocked            string
	DeliveryIsBlocked         string
	BillingIsBlocked          string
	IsMarkedForDeletion       string
}{
	SupplyChainRelationshipID: "SupplyChainRelationshipID",
	Buyer:                     "Buyer",
	Seller:                    "Seller",
	TransactionCurrency:       "TransactionCurrency",
	PaymentTerms:              "PaymentTerms",
	PaymentMethod:             "PaymentMethod",
	Incoterms:                 "Incoterms",
	AccountAssignmentGroup:    "AccountAssignmentGroup",
	CreationDate:              "CreationDate",
	LastChangeDate:            "LastChangeDate",
	QuotationIsBlocked:        "QuotationIsBlocked",
	OrderIsBlocked:            "OrderIsBlocked",
	DeliveryIsBlocked:         "DeliveryIsBlocked",
	BillingIsBlocked:          "BillingIsBlocked",
	IsMarkedForDeletion:       "IsMarkedForDeletion",
}

var DataPlatformSupplyChainRelationshipTransactionDatumTableColumns = struct {
	SupplyChainRelationshipID string
	Buyer                     string
	Seller                    string
	TransactionCurrency       string
	PaymentTerms              string
	PaymentMethod             string
	Incoterms                 string
	AccountAssignmentGroup    string
	CreationDate              string
	LastChangeDate            string
	QuotationIsBlocked        string
	OrderIsBlocked            string
	DeliveryIsBlocked         string
	BillingIsBlocked          string
	IsMarkedForDeletion       string
}{
	SupplyChainRelationshipID: "data_platform_supply_chain_relationship_transaction_data.SupplyChainRelationshipID",
	Buyer:                     "data_platform_supply_chain_relationship_transaction_data.Buyer",
	Seller:                    "data_platform_supply_chain_relationship_transaction_data.Seller",
	TransactionCurrency:       "data_platform_supply_chain_relationship_transaction_data.TransactionCurrency",
	PaymentTerms:              "data_platform_supply_chain_relationship_transaction_data.PaymentTerms",
	PaymentMethod:             "data_platform_supply_chain_relationship_transaction_data.PaymentMethod",
	Incoterms:                 "data_platform_supply_chain_relationship_transaction_data.Incoterms",
	AccountAssignmentGroup:    "data_platform_supply_chain_relationship_transaction_data.AccountAssignmentGroup",
	CreationDate:              "data_platform_supply_chain_relationship_transaction_data.CreationDate",
	LastChangeDate:            "data_platform_supply_chain_relationship_transaction_data.LastChangeDate",
	QuotationIsBlocked:        "data_platform_supply_chain_relationship_transaction_data.QuotationIsBlocked",
	OrderIsBlocked:            "data_platform_supply_chain_relationship_transaction_data.OrderIsBlocked",
	DeliveryIsBlocked:         "data_platform_supply_chain_relationship_transaction_data.DeliveryIsBlocked",
	BillingIsBlocked:          "data_platform_supply_chain_relationship_transaction_data.BillingIsBlocked",
	IsMarkedForDeletion:       "data_platform_supply_chain_relationship_transaction_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSupplyChainRelationshipTransactionDatumWhere = struct {
	SupplyChainRelationshipID whereHelperint
	Buyer                     whereHelperint
	Seller                    whereHelperint
	TransactionCurrency       whereHelpernull_String
	PaymentTerms              whereHelpernull_String
	PaymentMethod             whereHelpernull_String
	Incoterms                 whereHelpernull_String
	AccountAssignmentGroup    whereHelpernull_String
	CreationDate              whereHelpernull_String
	LastChangeDate            whereHelpernull_String
	QuotationIsBlocked        whereHelpernull_Bool
	OrderIsBlocked            whereHelpernull_Bool
	DeliveryIsBlocked         whereHelpernull_Bool
	BillingIsBlocked          whereHelpernull_Bool
	IsMarkedForDeletion       whereHelpernull_Bool
}{
	SupplyChainRelationshipID: whereHelperint{field: "`data_platform_supply_chain_relationship_transaction_data`.`SupplyChainRelationshipID`"},
	Buyer:                     whereHelperint{field: "`data_platform_supply_chain_relationship_transaction_data`.`Buyer`"},
	Seller:                    whereHelperint{field: "`data_platform_supply_chain_relationship_transaction_data`.`Seller`"},
	TransactionCurrency:       whereHelpernull_String{field: "`data_platform_supply_chain_relationship_transaction_data`.`TransactionCurrency`"},
	PaymentTerms:              whereHelpernull_String{field: "`data_platform_supply_chain_relationship_transaction_data`.`PaymentTerms`"},
	PaymentMethod:             whereHelpernull_String{field: "`data_platform_supply_chain_relationship_transaction_data`.`PaymentMethod`"},
	Incoterms:                 whereHelpernull_String{field: "`data_platform_supply_chain_relationship_transaction_data`.`Incoterms`"},
	AccountAssignmentGroup:    whereHelpernull_String{field: "`data_platform_supply_chain_relationship_transaction_data`.`AccountAssignmentGroup`"},
	CreationDate:              whereHelpernull_String{field: "`data_platform_supply_chain_relationship_transaction_data`.`CreationDate`"},
	LastChangeDate:            whereHelpernull_String{field: "`data_platform_supply_chain_relationship_transaction_data`.`LastChangeDate`"},
	QuotationIsBlocked:        whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_transaction_data`.`QuotationIsBlocked`"},
	OrderIsBlocked:            whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_transaction_data`.`OrderIsBlocked`"},
	DeliveryIsBlocked:         whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_transaction_data`.`DeliveryIsBlocked`"},
	BillingIsBlocked:          whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_transaction_data`.`BillingIsBlocked`"},
	IsMarkedForDeletion:       whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_transaction_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSupplyChainRelationshipTransactionDatumRels is where relationship names are stored.
var DataPlatformSupplyChainRelationshipTransactionDatumRels = struct {
	BuyerDataPlatformSupplyChainRelationshipGeneralDatum     string
	Incoterm                                                 string
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum     string
	PaymentTerm                                              string
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum string
}{
	BuyerDataPlatformSupplyChainRelationshipGeneralDatum: "BuyerDataPlatformSupplyChainRelationshipGeneralDatum",
	Incoterm: "Incoterm",
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum: "TransactionCurrencyDataPlatformCurrencyCurrencyDatum",
	PaymentTerm: "PaymentTerm",
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: "PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum",
}

// dataPlatformSupplyChainRelationshipTransactionDatumR is where relationships are stored.
type dataPlatformSupplyChainRelationshipTransactionDatumR struct {
	BuyerDataPlatformSupplyChainRelationshipGeneralDatum     *DataPlatformSupplyChainRelationshipGeneralDatum `boil:"BuyerDataPlatformSupplyChainRelationshipGeneralDatum" json:"BuyerDataPlatformSupplyChainRelationshipGeneralDatum" toml:"BuyerDataPlatformSupplyChainRelationshipGeneralDatum" yaml:"BuyerDataPlatformSupplyChainRelationshipGeneralDatum"`
	Incoterm                                                 *DataPlatformIncotermsIncotermsDatum             `boil:"Incoterm" json:"Incoterm" toml:"Incoterm" yaml:"Incoterm"`
	TransactionCurrencyDataPlatformCurrencyCurrencyDatum     *DataPlatformCurrencyCurrencyDatum               `boil:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" json:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" toml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum" yaml:"TransactionCurrencyDataPlatformCurrencyCurrencyDatum"`
	PaymentTerm                                              *DataPlatformPaymentTermsPaymentTermsDatum       `boil:"PaymentTerm" json:"PaymentTerm" toml:"PaymentTerm" yaml:"PaymentTerm"`
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum *DataPlatformPaymentMethodPaymentMethodDatum     `boil:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" json:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" toml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" yaml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSupplyChainRelationshipTransactionDatumR) NewStruct() *dataPlatformSupplyChainRelationshipTransactionDatumR {
	return &dataPlatformSupplyChainRelationshipTransactionDatumR{}
}

func (r *dataPlatformSupplyChainRelationshipTransactionDatumR) GetBuyerDataPlatformSupplyChainRelationshipGeneralDatum() *DataPlatformSupplyChainRelationshipGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSupplyChainRelationshipGeneralDatum
}

func (r *dataPlatformSupplyChainRelationshipTransactionDatumR) GetIncoterm() *DataPlatformIncotermsIncotermsDatum {
	if r == nil {
		return nil
	}
	return r.Incoterm
}

func (r *dataPlatformSupplyChainRelationshipTransactionDatumR) GetTransactionCurrencyDataPlatformCurrencyCurrencyDatum() *DataPlatformCurrencyCurrencyDatum {
	if r == nil {
		return nil
	}
	return r.TransactionCurrencyDataPlatformCurrencyCurrencyDatum
}

func (r *dataPlatformSupplyChainRelationshipTransactionDatumR) GetPaymentTerm() *DataPlatformPaymentTermsPaymentTermsDatum {
	if r == nil {
		return nil
	}
	return r.PaymentTerm
}

func (r *dataPlatformSupplyChainRelationshipTransactionDatumR) GetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum() *DataPlatformPaymentMethodPaymentMethodDatum {
	if r == nil {
		return nil
	}
	return r.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum
}

// dataPlatformSupplyChainRelationshipTransactionDatumL is where Load methods for each relationship are stored.
type dataPlatformSupplyChainRelationshipTransactionDatumL struct{}

var (
	dataPlatformSupplyChainRelationshipTransactionDatumAllColumns            = []string{"SupplyChainRelationshipID", "Buyer", "Seller", "TransactionCurrency", "PaymentTerms", "PaymentMethod", "Incoterms", "AccountAssignmentGroup", "CreationDate", "LastChangeDate", "QuotationIsBlocked", "OrderIsBlocked", "DeliveryIsBlocked", "BillingIsBlocked", "IsMarkedForDeletion"}
	dataPlatformSupplyChainRelationshipTransactionDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "Buyer", "Seller", "TransactionCurrency", "PaymentTerms", "PaymentMethod", "Incoterms", "AccountAssignmentGroup", "CreationDate", "LastChangeDate", "QuotationIsBlocked", "OrderIsBlocked", "DeliveryIsBlocked", "BillingIsBlocked", "IsMarkedForDeletion"}
	dataPlatformSupplyChainRelationshipTransactionDatumColumnsWithDefault    = []string{}
	dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "Buyer", "Seller"}
	dataPlatformSupplyChainRelationshipTransactionDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSupplyChainRelationshipTransactionDatumSlice is an alias for a slice of pointers to DataPlatformSupplyChainRelationshipTransactionDatum.
	// This should almost always be used instead of []DataPlatformSupplyChainRelationshipTransactionDatum.
	DataPlatformSupplyChainRelationshipTransactionDatumSlice []*DataPlatformSupplyChainRelationshipTransactionDatum

	dataPlatformSupplyChainRelationshipTransactionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSupplyChainRelationshipTransactionDatumType                 = reflect.TypeOf(&DataPlatformSupplyChainRelationshipTransactionDatum{})
	dataPlatformSupplyChainRelationshipTransactionDatumMapping              = queries.MakeStructMapping(dataPlatformSupplyChainRelationshipTransactionDatumType)
	dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSupplyChainRelationshipTransactionDatumType, dataPlatformSupplyChainRelationshipTransactionDatumMapping, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns)
	dataPlatformSupplyChainRelationshipTransactionDatumInsertCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipTransactionDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSupplyChainRelationshipTransactionDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipTransactionDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSupplyChainRelationshipTransactionDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipTransactionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSupplyChainRelationshipTransactionDatum record from the query.
func (q dataPlatformSupplyChainRelationshipTransactionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSupplyChainRelationshipTransactionDatum, error) {
	o := &DataPlatformSupplyChainRelationshipTransactionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_supply_chain_relationship_transaction_data")
	}

	return o, nil
}

// All returns all DataPlatformSupplyChainRelationshipTransactionDatum records from the query.
func (q dataPlatformSupplyChainRelationshipTransactionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSupplyChainRelationshipTransactionDatumSlice, error) {
	var o []*DataPlatformSupplyChainRelationshipTransactionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSupplyChainRelationshipTransactionDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSupplyChainRelationshipTransactionDatum records in the query.
func (q dataPlatformSupplyChainRelationshipTransactionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_supply_chain_relationship_transaction_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSupplyChainRelationshipTransactionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_supply_chain_relationship_transaction_data exists")
	}

	return count > 0, nil
}

// BuyerDataPlatformSupplyChainRelationshipGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) BuyerDataPlatformSupplyChainRelationshipGeneralDatum(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSupplyChainRelationshipGeneralData(queryMods...)
}

// Incoterm pointed to by the foreign key.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) Incoterm(mods ...qm.QueryMod) dataPlatformIncotermsIncotermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Incoterms` = ?", o.Incoterms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformIncotermsIncotermsData(queryMods...)
}

// TransactionCurrencyDataPlatformCurrencyCurrencyDatum pointed to by the foreign key.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) TransactionCurrencyDataPlatformCurrencyCurrencyDatum(mods ...qm.QueryMod) dataPlatformCurrencyCurrencyDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Currency` = ?", o.TransactionCurrency),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCurrencyCurrencyData(queryMods...)
}

// PaymentTerm pointed to by the foreign key.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) PaymentTerm(mods ...qm.QueryMod) dataPlatformPaymentTermsPaymentTermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentTerms` = ?", o.PaymentTerms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentTermsPaymentTermsData(queryMods...)
}

// PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum pointed to by the foreign key.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(mods ...qm.QueryMod) dataPlatformPaymentMethodPaymentMethodDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentMethod` = ?", o.PaymentMethod),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentMethodPaymentMethodData(queryMods...)
}

// LoadBuyerDataPlatformSupplyChainRelationshipGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSupplyChainRelationshipTransactionDatumL) LoadBuyerDataPlatformSupplyChainRelationshipGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipTransactionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipTransactionDatum
	var object *DataPlatformSupplyChainRelationshipTransactionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipTransactionDatum.(*DataPlatformSupplyChainRelationshipTransactionDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipTransactionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipTransactionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipTransactionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipTransactionDatum.(*[]*DataPlatformSupplyChainRelationshipTransactionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipTransactionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipTransactionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_supply_chain_relationship_general_data`),
		qm.WhereIn(`data_platform_supply_chain_relationship_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSupplyChainRelationshipGeneralDatum")
	}

	var resultSlice []*DataPlatformSupplyChainRelationshipGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSupplyChainRelationshipGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_supply_chain_relationship_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_supply_chain_relationship_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSupplyChainRelationshipGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSupplyChainRelationshipGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadIncoterm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSupplyChainRelationshipTransactionDatumL) LoadIncoterm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipTransactionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipTransactionDatum
	var object *DataPlatformSupplyChainRelationshipTransactionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipTransactionDatum.(*DataPlatformSupplyChainRelationshipTransactionDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipTransactionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipTransactionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipTransactionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipTransactionDatum.(*[]*DataPlatformSupplyChainRelationshipTransactionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipTransactionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipTransactionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{}
		}
		if !queries.IsNil(object.Incoterms) {
			args = append(args, object.Incoterms)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Incoterms) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Incoterms) {
				args = append(args, obj.Incoterms)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_incoterms_incoterms_data`),
		qm.WhereIn(`data_platform_incoterms_incoterms_data.Incoterms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformIncotermsIncotermsDatum")
	}

	var resultSlice []*DataPlatformIncotermsIncotermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformIncotermsIncotermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_incoterms_incoterms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_incoterms_incoterms_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Incoterm = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Incoterms, foreign.Incoterms) {
				local.R.Incoterm = foreign
				break
			}
		}
	}

	return nil
}

// LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSupplyChainRelationshipTransactionDatumL) LoadTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipTransactionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipTransactionDatum
	var object *DataPlatformSupplyChainRelationshipTransactionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipTransactionDatum.(*DataPlatformSupplyChainRelationshipTransactionDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipTransactionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipTransactionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipTransactionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipTransactionDatum.(*[]*DataPlatformSupplyChainRelationshipTransactionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipTransactionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipTransactionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{}
		}
		if !queries.IsNil(object.TransactionCurrency) {
			args = append(args, object.TransactionCurrency)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TransactionCurrency) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TransactionCurrency) {
				args = append(args, obj.TransactionCurrency)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_currency_currency_data`),
		qm.WhereIn(`data_platform_currency_currency_data.Currency in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCurrencyCurrencyDatum")
	}

	var resultSlice []*DataPlatformCurrencyCurrencyDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCurrencyCurrencyDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_currency_currency_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_currency_currency_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TransactionCurrency, foreign.Currency) {
				local.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentTerm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSupplyChainRelationshipTransactionDatumL) LoadPaymentTerm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipTransactionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipTransactionDatum
	var object *DataPlatformSupplyChainRelationshipTransactionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipTransactionDatum.(*DataPlatformSupplyChainRelationshipTransactionDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipTransactionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipTransactionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipTransactionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipTransactionDatum.(*[]*DataPlatformSupplyChainRelationshipTransactionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipTransactionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipTransactionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{}
		}
		if !queries.IsNil(object.PaymentTerms) {
			args = append(args, object.PaymentTerms)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PaymentTerms) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PaymentTerms) {
				args = append(args, obj.PaymentTerms)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_terms_payment_terms_data`),
		qm.WhereIn(`data_platform_payment_terms_payment_terms_data.PaymentTerms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentTermsPaymentTermsDatum")
	}

	var resultSlice []*DataPlatformPaymentTermsPaymentTermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentTermsPaymentTermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_terms_payment_terms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_terms_payment_terms_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentTerm = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentTerms, foreign.PaymentTerms) {
				local.R.PaymentTerm = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSupplyChainRelationshipTransactionDatumL) LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSupplyChainRelationshipTransactionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSupplyChainRelationshipTransactionDatum
	var object *DataPlatformSupplyChainRelationshipTransactionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSupplyChainRelationshipTransactionDatum.(*DataPlatformSupplyChainRelationshipTransactionDatum)
		if !ok {
			object = new(DataPlatformSupplyChainRelationshipTransactionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSupplyChainRelationshipTransactionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSupplyChainRelationshipTransactionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSupplyChainRelationshipTransactionDatum.(*[]*DataPlatformSupplyChainRelationshipTransactionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSupplyChainRelationshipTransactionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSupplyChainRelationshipTransactionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{}
		}
		if !queries.IsNil(object.PaymentMethod) {
			args = append(args, object.PaymentMethod)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PaymentMethod) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PaymentMethod) {
				args = append(args, obj.PaymentMethod)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_method_payment_method_data`),
		qm.WhereIn(`data_platform_payment_method_payment_method_data.PaymentMethod in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentMethodPaymentMethodDatum")
	}

	var resultSlice []*DataPlatformPaymentMethodPaymentMethodDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentMethodPaymentMethodDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_method_payment_method_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_method_payment_method_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PaymentMethod, foreign.PaymentMethod) {
				local.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetBuyerDataPlatformSupplyChainRelationshipGeneralDatum of the dataPlatformSupplyChainRelationshipTransactionDatum to the related item.
// Sets o.R.BuyerDataPlatformSupplyChainRelationshipGeneralDatum to related.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) SetBuyerDataPlatformSupplyChainRelationshipGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSupplyChainRelationshipGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_supply_chain_relationship_transaction_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.SupplyChainRelationshipID, o.Buyer, o.Seller}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{
			BuyerDataPlatformSupplyChainRelationshipGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSupplyChainRelationshipGeneralDatum = related
	}

	return nil
}

// SetIncoterm of the dataPlatformSupplyChainRelationshipTransactionDatum to the related item.
// Sets o.R.Incoterm to related.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) SetIncoterm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformIncotermsIncotermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_supply_chain_relationship_transaction_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Incoterms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Incoterms, o.SupplyChainRelationshipID, o.Buyer, o.Seller}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Incoterms, related.Incoterms)
	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{
			Incoterm: related,
		}
	} else {
		o.R.Incoterm = related
	}

	return nil
}

// RemoveIncoterm relationship.
// Sets o.R.Incoterm to nil.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) RemoveIncoterm(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformIncotermsIncotermsDatum) error {
	var err error

	queries.SetScanner(&o.Incoterms, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Incoterms")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Incoterm = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum of the dataPlatformSupplyChainRelationshipTransactionDatum to the related item.
// Sets o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum to related.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) SetTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_supply_chain_relationship_transaction_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"TransactionCurrency"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Currency, o.SupplyChainRelationshipID, o.Buyer, o.Seller}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TransactionCurrency, related.Currency)
	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{
			TransactionCurrencyDataPlatformCurrencyCurrencyDatum: related,
		}
	} else {
		o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = related
	}

	return nil
}

// RemoveTransactionCurrencyDataPlatformCurrencyCurrencyDatum relationship.
// Sets o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum to nil.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) RemoveTransactionCurrencyDataPlatformCurrencyCurrencyDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCurrencyCurrencyDatum) error {
	var err error

	queries.SetScanner(&o.TransactionCurrency, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("TransactionCurrency")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TransactionCurrencyDataPlatformCurrencyCurrencyDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPaymentTerm of the dataPlatformSupplyChainRelationshipTransactionDatum to the related item.
// Sets o.R.PaymentTerm to related.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) SetPaymentTerm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentTermsPaymentTermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_supply_chain_relationship_transaction_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentTerms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentTerms, o.SupplyChainRelationshipID, o.Buyer, o.Seller}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentTerms, related.PaymentTerms)
	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{
			PaymentTerm: related,
		}
	} else {
		o.R.PaymentTerm = related
	}

	return nil
}

// RemovePaymentTerm relationship.
// Sets o.R.PaymentTerm to nil.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) RemovePaymentTerm(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPaymentTermsPaymentTermsDatum) error {
	var err error

	queries.SetScanner(&o.PaymentTerms, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PaymentTerms")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PaymentTerm = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum of the dataPlatformSupplyChainRelationshipTransactionDatum to the related item.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to related.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_supply_chain_relationship_transaction_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentMethod"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentMethod, o.SupplyChainRelationshipID, o.Buyer, o.Seller}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PaymentMethod, related.PaymentMethod)
	if o.R == nil {
		o.R = &dataPlatformSupplyChainRelationshipTransactionDatumR{
			PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: related,
		}
	} else {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = related
	}

	return nil
}

// RemovePaymentMethodDataPlatformPaymentMethodPaymentMethodDatum relationship.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to nil.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) RemovePaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error

	queries.SetScanner(&o.PaymentMethod, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PaymentMethod")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// DataPlatformSupplyChainRelationshipTransactionData retrieves all the records using an executor.
func DataPlatformSupplyChainRelationshipTransactionData(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipTransactionDatumQuery {
	mods = append(mods, qm.From("`data_platform_supply_chain_relationship_transaction_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_supply_chain_relationship_transaction_data`.*"})
	}

	return dataPlatformSupplyChainRelationshipTransactionDatumQuery{q}
}

// FindDataPlatformSupplyChainRelationshipTransactionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSupplyChainRelationshipTransactionDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, buyer int, seller int, selectCols ...string) (*DataPlatformSupplyChainRelationshipTransactionDatum, error) {
	dataPlatformSupplyChainRelationshipTransactionDatumObj := &DataPlatformSupplyChainRelationshipTransactionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_supply_chain_relationship_transaction_data` where `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, buyer, seller)

	err := q.Bind(ctx, exec, dataPlatformSupplyChainRelationshipTransactionDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_supply_chain_relationship_transaction_data")
	}

	return dataPlatformSupplyChainRelationshipTransactionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_supply_chain_relationship_transaction_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSupplyChainRelationshipTransactionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSupplyChainRelationshipTransactionDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipTransactionDatumInsertCache[key]
	dataPlatformSupplyChainRelationshipTransactionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSupplyChainRelationshipTransactionDatumAllColumns,
			dataPlatformSupplyChainRelationshipTransactionDatumColumnsWithDefault,
			dataPlatformSupplyChainRelationshipTransactionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipTransactionDatumType, dataPlatformSupplyChainRelationshipTransactionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipTransactionDatumType, dataPlatformSupplyChainRelationshipTransactionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_supply_chain_relationship_transaction_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_supply_chain_relationship_transaction_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_supply_chain_relationship_transaction_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_supply_chain_relationship_transaction_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.Buyer,
		o.Seller,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_supply_chain_relationship_transaction_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSupplyChainRelationshipTransactionDatumInsertCacheMut.Lock()
		dataPlatformSupplyChainRelationshipTransactionDatumInsertCache[key] = cache
		dataPlatformSupplyChainRelationshipTransactionDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSupplyChainRelationshipTransactionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSupplyChainRelationshipTransactionDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipTransactionDatumUpdateCache[key]
	dataPlatformSupplyChainRelationshipTransactionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSupplyChainRelationshipTransactionDatumAllColumns,
			dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_supply_chain_relationship_transaction_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_supply_chain_relationship_transaction_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipTransactionDatumType, dataPlatformSupplyChainRelationshipTransactionDatumMapping, append(wl, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_supply_chain_relationship_transaction_data row")
	}

	if !cached {
		dataPlatformSupplyChainRelationshipTransactionDatumUpdateCacheMut.Lock()
		dataPlatformSupplyChainRelationshipTransactionDatumUpdateCache[key] = cache
		dataPlatformSupplyChainRelationshipTransactionDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSupplyChainRelationshipTransactionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_supply_chain_relationship_transaction_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSupplyChainRelationshipTransactionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_supply_chain_relationship_transaction_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSupplyChainRelationshipTransactionDatum slice")
	}

	return nil
}

var mySQLDataPlatformSupplyChainRelationshipTransactionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_supply_chain_relationship_transaction_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSupplyChainRelationshipTransactionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSupplyChainRelationshipTransactionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSupplyChainRelationshipTransactionDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipTransactionDatumUpsertCache[key]
	dataPlatformSupplyChainRelationshipTransactionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSupplyChainRelationshipTransactionDatumAllColumns,
			dataPlatformSupplyChainRelationshipTransactionDatumColumnsWithDefault,
			dataPlatformSupplyChainRelationshipTransactionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSupplyChainRelationshipTransactionDatumAllColumns,
			dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_supply_chain_relationship_transaction_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_supply_chain_relationship_transaction_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_supply_chain_relationship_transaction_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipTransactionDatumType, dataPlatformSupplyChainRelationshipTransactionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipTransactionDatumType, dataPlatformSupplyChainRelationshipTransactionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_supply_chain_relationship_transaction_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSupplyChainRelationshipTransactionDatumType, dataPlatformSupplyChainRelationshipTransactionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_supply_chain_relationship_transaction_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_supply_chain_relationship_transaction_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSupplyChainRelationshipTransactionDatumUpsertCacheMut.Lock()
		dataPlatformSupplyChainRelationshipTransactionDatumUpsertCache[key] = cache
		dataPlatformSupplyChainRelationshipTransactionDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSupplyChainRelationshipTransactionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSupplyChainRelationshipTransactionDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_supply_chain_relationship_transaction_data` WHERE `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_supply_chain_relationship_transaction_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSupplyChainRelationshipTransactionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSupplyChainRelationshipTransactionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_supply_chain_relationship_transaction_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSupplyChainRelationshipTransactionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_supply_chain_relationship_transaction_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSupplyChainRelationshipTransactionDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSupplyChainRelationshipTransactionDatum(ctx, exec, o.SupplyChainRelationshipID, o.Buyer, o.Seller)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSupplyChainRelationshipTransactionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSupplyChainRelationshipTransactionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_supply_chain_relationship_transaction_data`.* FROM `data_platform_supply_chain_relationship_transaction_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipTransactionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSupplyChainRelationshipTransactionDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSupplyChainRelationshipTransactionDatumExists checks if the DataPlatformSupplyChainRelationshipTransactionDatum row exists.
func DataPlatformSupplyChainRelationshipTransactionDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, buyer int, seller int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_supply_chain_relationship_transaction_data` where `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, buyer, seller)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, buyer, seller)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_supply_chain_relationship_transaction_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSupplyChainRelationshipTransactionDatum row exists.
func (o *DataPlatformSupplyChainRelationshipTransactionDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSupplyChainRelationshipTransactionDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.Buyer, o.Seller)
}
