// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSCRDeliveryPlantRelationProductDatum is an object representing the database table.
type DataPlatformSCRDeliveryPlantRelationProductDatum struct {
	SupplyChainRelationshipID                 int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID         int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID    int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	Buyer                                     int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                    int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                            int          `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverFromParty                          int          `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverToPlant                            string       `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	DeliverFromPlant                          string       `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	Product                                   string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	DeliverToPlantStorageLocation             string       `boil:"DeliverToPlantStorageLocation" json:"DeliverToPlantStorageLocation" toml:"DeliverToPlantStorageLocation" yaml:"DeliverToPlantStorageLocation"`
	DeliverFromPlantStorageLocation           string       `boil:"DeliverFromPlantStorageLocation" json:"DeliverFromPlantStorageLocation" toml:"DeliverFromPlantStorageLocation" yaml:"DeliverFromPlantStorageLocation"`
	DeliveryUnit                              string       `boil:"DeliveryUnit" json:"DeliveryUnit" toml:"DeliveryUnit" yaml:"DeliveryUnit"`
	QuantityPerPackage                        null.Float32 `boil:"QuantityPerPackage" json:"QuantityPerPackage,omitempty" toml:"QuantityPerPackage" yaml:"QuantityPerPackage,omitempty"`
	MRPType                                   string       `boil:"MRPType" json:"MRPType" toml:"MRPType" yaml:"MRPType"`
	MRPController                             null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ReorderThresholdQuantityInBaseUnit        null.Float32 `boil:"ReorderThresholdQuantityInBaseUnit" json:"ReorderThresholdQuantityInBaseUnit,omitempty" toml:"ReorderThresholdQuantityInBaseUnit" yaml:"ReorderThresholdQuantityInBaseUnit,omitempty"`
	PlanningTimeFenceInDays                   null.Int     `boil:"PlanningTimeFenceInDays" json:"PlanningTimeFenceInDays,omitempty" toml:"PlanningTimeFenceInDays" yaml:"PlanningTimeFenceInDays,omitempty"`
	MRPPlanningCalendar                       null.String  `boil:"MRPPlanningCalendar" json:"MRPPlanningCalendar,omitempty" toml:"MRPPlanningCalendar" yaml:"MRPPlanningCalendar,omitempty"`
	SafetyStockQuantityInBaseUnit             null.Float32 `boil:"SafetyStockQuantityInBaseUnit" json:"SafetyStockQuantityInBaseUnit,omitempty" toml:"SafetyStockQuantityInBaseUnit" yaml:"SafetyStockQuantityInBaseUnit,omitempty"`
	SafetyDuration                            null.Float32 `boil:"SafetyDuration" json:"SafetyDuration,omitempty" toml:"SafetyDuration" yaml:"SafetyDuration,omitempty"`
	SafetyDurationUnit                        null.String  `boil:"SafetyDurationUnit" json:"SafetyDurationUnit,omitempty" toml:"SafetyDurationUnit" yaml:"SafetyDurationUnit,omitempty"`
	MaximumStockQuantityInBaseUnit            null.Float32 `boil:"MaximumStockQuantityInBaseUnit" json:"MaximumStockQuantityInBaseUnit,omitempty" toml:"MaximumStockQuantityInBaseUnit" yaml:"MaximumStockQuantityInBaseUnit,omitempty"`
	MinimumDeliveryQuantityInBaseUnit         float32      `boil:"MinimumDeliveryQuantityInBaseUnit" json:"MinimumDeliveryQuantityInBaseUnit" toml:"MinimumDeliveryQuantityInBaseUnit" yaml:"MinimumDeliveryQuantityInBaseUnit"`
	MinimumDeliveryLotSizeQuantityInBaseUnit  float32      `boil:"MinimumDeliveryLotSizeQuantityInBaseUnit" json:"MinimumDeliveryLotSizeQuantityInBaseUnit" toml:"MinimumDeliveryLotSizeQuantityInBaseUnit" yaml:"MinimumDeliveryLotSizeQuantityInBaseUnit"`
	StandardDeliveryQuantityInBaseUnit        float32      `boil:"StandardDeliveryQuantityInBaseUnit" json:"StandardDeliveryQuantityInBaseUnit" toml:"StandardDeliveryQuantityInBaseUnit" yaml:"StandardDeliveryQuantityInBaseUnit"`
	StandardDeliveryLotSizeQuantityInBaseUnit float32      `boil:"StandardDeliveryLotSizeQuantityInBaseUnit" json:"StandardDeliveryLotSizeQuantityInBaseUnit" toml:"StandardDeliveryLotSizeQuantityInBaseUnit" yaml:"StandardDeliveryLotSizeQuantityInBaseUnit"`
	MaximumDeliveryQuantityInBaseUnit         float32      `boil:"MaximumDeliveryQuantityInBaseUnit" json:"MaximumDeliveryQuantityInBaseUnit" toml:"MaximumDeliveryQuantityInBaseUnit" yaml:"MaximumDeliveryQuantityInBaseUnit"`
	MaximumDeliveryLotSizeQuantityInBaseUnit  float32      `boil:"MaximumDeliveryLotSizeQuantityInBaseUnit" json:"MaximumDeliveryLotSizeQuantityInBaseUnit" toml:"MaximumDeliveryLotSizeQuantityInBaseUnit" yaml:"MaximumDeliveryLotSizeQuantityInBaseUnit"`
	DeliveryLotSizeRoundingQuantityInBaseUnit null.Float32 `boil:"DeliveryLotSizeRoundingQuantityInBaseUnit" json:"DeliveryLotSizeRoundingQuantityInBaseUnit,omitempty" toml:"DeliveryLotSizeRoundingQuantityInBaseUnit" yaml:"DeliveryLotSizeRoundingQuantityInBaseUnit,omitempty"`
	DeliveryLotSizeIsFixed                    null.Bool    `boil:"DeliveryLotSizeIsFixed" json:"DeliveryLotSizeIsFixed,omitempty" toml:"DeliveryLotSizeIsFixed" yaml:"DeliveryLotSizeIsFixed,omitempty"`
	StandardDeliveryDuration                  float32      `boil:"StandardDeliveryDuration" json:"StandardDeliveryDuration" toml:"StandardDeliveryDuration" yaml:"StandardDeliveryDuration"`
	StandardDeliveryDurationUnit              string       `boil:"StandardDeliveryDurationUnit" json:"StandardDeliveryDurationUnit" toml:"StandardDeliveryDurationUnit" yaml:"StandardDeliveryDurationUnit"`
	CreationDate                              string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                            string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                       null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSCRDeliveryPlantRelationProductDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSCRDeliveryPlantRelationProductDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSCRDeliveryPlantRelationProductDatumColumns = struct {
	SupplyChainRelationshipID                 string
	SupplyChainRelationshipDeliveryID         string
	SupplyChainRelationshipDeliveryPlantID    string
	Buyer                                     string
	Seller                                    string
	DeliverToParty                            string
	DeliverFromParty                          string
	DeliverToPlant                            string
	DeliverFromPlant                          string
	Product                                   string
	DeliverToPlantStorageLocation             string
	DeliverFromPlantStorageLocation           string
	DeliveryUnit                              string
	QuantityPerPackage                        string
	MRPType                                   string
	MRPController                             string
	ReorderThresholdQuantityInBaseUnit        string
	PlanningTimeFenceInDays                   string
	MRPPlanningCalendar                       string
	SafetyStockQuantityInBaseUnit             string
	SafetyDuration                            string
	SafetyDurationUnit                        string
	MaximumStockQuantityInBaseUnit            string
	MinimumDeliveryQuantityInBaseUnit         string
	MinimumDeliveryLotSizeQuantityInBaseUnit  string
	StandardDeliveryQuantityInBaseUnit        string
	StandardDeliveryLotSizeQuantityInBaseUnit string
	MaximumDeliveryQuantityInBaseUnit         string
	MaximumDeliveryLotSizeQuantityInBaseUnit  string
	DeliveryLotSizeRoundingQuantityInBaseUnit string
	DeliveryLotSizeIsFixed                    string
	StandardDeliveryDuration                  string
	StandardDeliveryDurationUnit              string
	CreationDate                              string
	LastChangeDate                            string
	IsMarkedForDeletion                       string
}{
	SupplyChainRelationshipID:                 "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:         "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:    "SupplyChainRelationshipDeliveryPlantID",
	Buyer:                                     "Buyer",
	Seller:                                    "Seller",
	DeliverToParty:                            "DeliverToParty",
	DeliverFromParty:                          "DeliverFromParty",
	DeliverToPlant:                            "DeliverToPlant",
	DeliverFromPlant:                          "DeliverFromPlant",
	Product:                                   "Product",
	DeliverToPlantStorageLocation:             "DeliverToPlantStorageLocation",
	DeliverFromPlantStorageLocation:           "DeliverFromPlantStorageLocation",
	DeliveryUnit:                              "DeliveryUnit",
	QuantityPerPackage:                        "QuantityPerPackage",
	MRPType:                                   "MRPType",
	MRPController:                             "MRPController",
	ReorderThresholdQuantityInBaseUnit:        "ReorderThresholdQuantityInBaseUnit",
	PlanningTimeFenceInDays:                   "PlanningTimeFenceInDays",
	MRPPlanningCalendar:                       "MRPPlanningCalendar",
	SafetyStockQuantityInBaseUnit:             "SafetyStockQuantityInBaseUnit",
	SafetyDuration:                            "SafetyDuration",
	SafetyDurationUnit:                        "SafetyDurationUnit",
	MaximumStockQuantityInBaseUnit:            "MaximumStockQuantityInBaseUnit",
	MinimumDeliveryQuantityInBaseUnit:         "MinimumDeliveryQuantityInBaseUnit",
	MinimumDeliveryLotSizeQuantityInBaseUnit:  "MinimumDeliveryLotSizeQuantityInBaseUnit",
	StandardDeliveryQuantityInBaseUnit:        "StandardDeliveryQuantityInBaseUnit",
	StandardDeliveryLotSizeQuantityInBaseUnit: "StandardDeliveryLotSizeQuantityInBaseUnit",
	MaximumDeliveryQuantityInBaseUnit:         "MaximumDeliveryQuantityInBaseUnit",
	MaximumDeliveryLotSizeQuantityInBaseUnit:  "MaximumDeliveryLotSizeQuantityInBaseUnit",
	DeliveryLotSizeRoundingQuantityInBaseUnit: "DeliveryLotSizeRoundingQuantityInBaseUnit",
	DeliveryLotSizeIsFixed:                    "DeliveryLotSizeIsFixed",
	StandardDeliveryDuration:                  "StandardDeliveryDuration",
	StandardDeliveryDurationUnit:              "StandardDeliveryDurationUnit",
	CreationDate:                              "CreationDate",
	LastChangeDate:                            "LastChangeDate",
	IsMarkedForDeletion:                       "IsMarkedForDeletion",
}

var DataPlatformSCRDeliveryPlantRelationProductDatumTableColumns = struct {
	SupplyChainRelationshipID                 string
	SupplyChainRelationshipDeliveryID         string
	SupplyChainRelationshipDeliveryPlantID    string
	Buyer                                     string
	Seller                                    string
	DeliverToParty                            string
	DeliverFromParty                          string
	DeliverToPlant                            string
	DeliverFromPlant                          string
	Product                                   string
	DeliverToPlantStorageLocation             string
	DeliverFromPlantStorageLocation           string
	DeliveryUnit                              string
	QuantityPerPackage                        string
	MRPType                                   string
	MRPController                             string
	ReorderThresholdQuantityInBaseUnit        string
	PlanningTimeFenceInDays                   string
	MRPPlanningCalendar                       string
	SafetyStockQuantityInBaseUnit             string
	SafetyDuration                            string
	SafetyDurationUnit                        string
	MaximumStockQuantityInBaseUnit            string
	MinimumDeliveryQuantityInBaseUnit         string
	MinimumDeliveryLotSizeQuantityInBaseUnit  string
	StandardDeliveryQuantityInBaseUnit        string
	StandardDeliveryLotSizeQuantityInBaseUnit string
	MaximumDeliveryQuantityInBaseUnit         string
	MaximumDeliveryLotSizeQuantityInBaseUnit  string
	DeliveryLotSizeRoundingQuantityInBaseUnit string
	DeliveryLotSizeIsFixed                    string
	StandardDeliveryDuration                  string
	StandardDeliveryDurationUnit              string
	CreationDate                              string
	LastChangeDate                            string
	IsMarkedForDeletion                       string
}{
	SupplyChainRelationshipID:                 "data_platform_scr_delivery_plant_relation_product_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:         "data_platform_scr_delivery_plant_relation_product_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:    "data_platform_scr_delivery_plant_relation_product_data.SupplyChainRelationshipDeliveryPlantID",
	Buyer:                                     "data_platform_scr_delivery_plant_relation_product_data.Buyer",
	Seller:                                    "data_platform_scr_delivery_plant_relation_product_data.Seller",
	DeliverToParty:                            "data_platform_scr_delivery_plant_relation_product_data.DeliverToParty",
	DeliverFromParty:                          "data_platform_scr_delivery_plant_relation_product_data.DeliverFromParty",
	DeliverToPlant:                            "data_platform_scr_delivery_plant_relation_product_data.DeliverToPlant",
	DeliverFromPlant:                          "data_platform_scr_delivery_plant_relation_product_data.DeliverFromPlant",
	Product:                                   "data_platform_scr_delivery_plant_relation_product_data.Product",
	DeliverToPlantStorageLocation:             "data_platform_scr_delivery_plant_relation_product_data.DeliverToPlantStorageLocation",
	DeliverFromPlantStorageLocation:           "data_platform_scr_delivery_plant_relation_product_data.DeliverFromPlantStorageLocation",
	DeliveryUnit:                              "data_platform_scr_delivery_plant_relation_product_data.DeliveryUnit",
	QuantityPerPackage:                        "data_platform_scr_delivery_plant_relation_product_data.QuantityPerPackage",
	MRPType:                                   "data_platform_scr_delivery_plant_relation_product_data.MRPType",
	MRPController:                             "data_platform_scr_delivery_plant_relation_product_data.MRPController",
	ReorderThresholdQuantityInBaseUnit:        "data_platform_scr_delivery_plant_relation_product_data.ReorderThresholdQuantityInBaseUnit",
	PlanningTimeFenceInDays:                   "data_platform_scr_delivery_plant_relation_product_data.PlanningTimeFenceInDays",
	MRPPlanningCalendar:                       "data_platform_scr_delivery_plant_relation_product_data.MRPPlanningCalendar",
	SafetyStockQuantityInBaseUnit:             "data_platform_scr_delivery_plant_relation_product_data.SafetyStockQuantityInBaseUnit",
	SafetyDuration:                            "data_platform_scr_delivery_plant_relation_product_data.SafetyDuration",
	SafetyDurationUnit:                        "data_platform_scr_delivery_plant_relation_product_data.SafetyDurationUnit",
	MaximumStockQuantityInBaseUnit:            "data_platform_scr_delivery_plant_relation_product_data.MaximumStockQuantityInBaseUnit",
	MinimumDeliveryQuantityInBaseUnit:         "data_platform_scr_delivery_plant_relation_product_data.MinimumDeliveryQuantityInBaseUnit",
	MinimumDeliveryLotSizeQuantityInBaseUnit:  "data_platform_scr_delivery_plant_relation_product_data.MinimumDeliveryLotSizeQuantityInBaseUnit",
	StandardDeliveryQuantityInBaseUnit:        "data_platform_scr_delivery_plant_relation_product_data.StandardDeliveryQuantityInBaseUnit",
	StandardDeliveryLotSizeQuantityInBaseUnit: "data_platform_scr_delivery_plant_relation_product_data.StandardDeliveryLotSizeQuantityInBaseUnit",
	MaximumDeliveryQuantityInBaseUnit:         "data_platform_scr_delivery_plant_relation_product_data.MaximumDeliveryQuantityInBaseUnit",
	MaximumDeliveryLotSizeQuantityInBaseUnit:  "data_platform_scr_delivery_plant_relation_product_data.MaximumDeliveryLotSizeQuantityInBaseUnit",
	DeliveryLotSizeRoundingQuantityInBaseUnit: "data_platform_scr_delivery_plant_relation_product_data.DeliveryLotSizeRoundingQuantityInBaseUnit",
	DeliveryLotSizeIsFixed:                    "data_platform_scr_delivery_plant_relation_product_data.DeliveryLotSizeIsFixed",
	StandardDeliveryDuration:                  "data_platform_scr_delivery_plant_relation_product_data.StandardDeliveryDuration",
	StandardDeliveryDurationUnit:              "data_platform_scr_delivery_plant_relation_product_data.StandardDeliveryDurationUnit",
	CreationDate:                              "data_platform_scr_delivery_plant_relation_product_data.CreationDate",
	LastChangeDate:                            "data_platform_scr_delivery_plant_relation_product_data.LastChangeDate",
	IsMarkedForDeletion:                       "data_platform_scr_delivery_plant_relation_product_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSCRDeliveryPlantRelationProductDatumWhere = struct {
	SupplyChainRelationshipID                 whereHelperint
	SupplyChainRelationshipDeliveryID         whereHelperint
	SupplyChainRelationshipDeliveryPlantID    whereHelperint
	Buyer                                     whereHelperint
	Seller                                    whereHelperint
	DeliverToParty                            whereHelperint
	DeliverFromParty                          whereHelperint
	DeliverToPlant                            whereHelperstring
	DeliverFromPlant                          whereHelperstring
	Product                                   whereHelperstring
	DeliverToPlantStorageLocation             whereHelperstring
	DeliverFromPlantStorageLocation           whereHelperstring
	DeliveryUnit                              whereHelperstring
	QuantityPerPackage                        whereHelpernull_Float32
	MRPType                                   whereHelperstring
	MRPController                             whereHelpernull_String
	ReorderThresholdQuantityInBaseUnit        whereHelpernull_Float32
	PlanningTimeFenceInDays                   whereHelpernull_Int
	MRPPlanningCalendar                       whereHelpernull_String
	SafetyStockQuantityInBaseUnit             whereHelpernull_Float32
	SafetyDuration                            whereHelpernull_Float32
	SafetyDurationUnit                        whereHelpernull_String
	MaximumStockQuantityInBaseUnit            whereHelpernull_Float32
	MinimumDeliveryQuantityInBaseUnit         whereHelperfloat32
	MinimumDeliveryLotSizeQuantityInBaseUnit  whereHelperfloat32
	StandardDeliveryQuantityInBaseUnit        whereHelperfloat32
	StandardDeliveryLotSizeQuantityInBaseUnit whereHelperfloat32
	MaximumDeliveryQuantityInBaseUnit         whereHelperfloat32
	MaximumDeliveryLotSizeQuantityInBaseUnit  whereHelperfloat32
	DeliveryLotSizeRoundingQuantityInBaseUnit whereHelpernull_Float32
	DeliveryLotSizeIsFixed                    whereHelpernull_Bool
	StandardDeliveryDuration                  whereHelperfloat32
	StandardDeliveryDurationUnit              whereHelperstring
	CreationDate                              whereHelperstring
	LastChangeDate                            whereHelperstring
	IsMarkedForDeletion                       whereHelpernull_Bool
}{
	SupplyChainRelationshipID:                 whereHelperint{field: "`data_platform_scr_delivery_plant_relation_product_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:         whereHelperint{field: "`data_platform_scr_delivery_plant_relation_product_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:    whereHelperint{field: "`data_platform_scr_delivery_plant_relation_product_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	Buyer:                                     whereHelperint{field: "`data_platform_scr_delivery_plant_relation_product_data`.`Buyer`"},
	Seller:                                    whereHelperint{field: "`data_platform_scr_delivery_plant_relation_product_data`.`Seller`"},
	DeliverToParty:                            whereHelperint{field: "`data_platform_scr_delivery_plant_relation_product_data`.`DeliverToParty`"},
	DeliverFromParty:                          whereHelperint{field: "`data_platform_scr_delivery_plant_relation_product_data`.`DeliverFromParty`"},
	DeliverToPlant:                            whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_product_data`.`DeliverToPlant`"},
	DeliverFromPlant:                          whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_product_data`.`DeliverFromPlant`"},
	Product:                                   whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_product_data`.`Product`"},
	DeliverToPlantStorageLocation:             whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_product_data`.`DeliverToPlantStorageLocation`"},
	DeliverFromPlantStorageLocation:           whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_product_data`.`DeliverFromPlantStorageLocation`"},
	DeliveryUnit:                              whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_product_data`.`DeliveryUnit`"},
	QuantityPerPackage:                        whereHelpernull_Float32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`QuantityPerPackage`"},
	MRPType:                                   whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_product_data`.`MRPType`"},
	MRPController:                             whereHelpernull_String{field: "`data_platform_scr_delivery_plant_relation_product_data`.`MRPController`"},
	ReorderThresholdQuantityInBaseUnit:        whereHelpernull_Float32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`ReorderThresholdQuantityInBaseUnit`"},
	PlanningTimeFenceInDays:                   whereHelpernull_Int{field: "`data_platform_scr_delivery_plant_relation_product_data`.`PlanningTimeFenceInDays`"},
	MRPPlanningCalendar:                       whereHelpernull_String{field: "`data_platform_scr_delivery_plant_relation_product_data`.`MRPPlanningCalendar`"},
	SafetyStockQuantityInBaseUnit:             whereHelpernull_Float32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`SafetyStockQuantityInBaseUnit`"},
	SafetyDuration:                            whereHelpernull_Float32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`SafetyDuration`"},
	SafetyDurationUnit:                        whereHelpernull_String{field: "`data_platform_scr_delivery_plant_relation_product_data`.`SafetyDurationUnit`"},
	MaximumStockQuantityInBaseUnit:            whereHelpernull_Float32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`MaximumStockQuantityInBaseUnit`"},
	MinimumDeliveryQuantityInBaseUnit:         whereHelperfloat32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`MinimumDeliveryQuantityInBaseUnit`"},
	MinimumDeliveryLotSizeQuantityInBaseUnit:  whereHelperfloat32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`MinimumDeliveryLotSizeQuantityInBaseUnit`"},
	StandardDeliveryQuantityInBaseUnit:        whereHelperfloat32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`StandardDeliveryQuantityInBaseUnit`"},
	StandardDeliveryLotSizeQuantityInBaseUnit: whereHelperfloat32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`StandardDeliveryLotSizeQuantityInBaseUnit`"},
	MaximumDeliveryQuantityInBaseUnit:         whereHelperfloat32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`MaximumDeliveryQuantityInBaseUnit`"},
	MaximumDeliveryLotSizeQuantityInBaseUnit:  whereHelperfloat32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`MaximumDeliveryLotSizeQuantityInBaseUnit`"},
	DeliveryLotSizeRoundingQuantityInBaseUnit: whereHelpernull_Float32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`DeliveryLotSizeRoundingQuantityInBaseUnit`"},
	DeliveryLotSizeIsFixed:                    whereHelpernull_Bool{field: "`data_platform_scr_delivery_plant_relation_product_data`.`DeliveryLotSizeIsFixed`"},
	StandardDeliveryDuration:                  whereHelperfloat32{field: "`data_platform_scr_delivery_plant_relation_product_data`.`StandardDeliveryDuration`"},
	StandardDeliveryDurationUnit:              whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_product_data`.`StandardDeliveryDurationUnit`"},
	CreationDate:                              whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_product_data`.`CreationDate`"},
	LastChangeDate:                            whereHelperstring{field: "`data_platform_scr_delivery_plant_relation_product_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                       whereHelpernull_Bool{field: "`data_platform_scr_delivery_plant_relation_product_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSCRDeliveryPlantRelationProductDatumRels is where relationship names are stored.
var DataPlatformSCRDeliveryPlantRelationProductDatumRels = struct {
	DeliverToPartyDataPlatformProductMasterBPPlantDatum         string
	DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum       string
	SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum string
	BuyerDataPlatformSCRDeliveryPlantRelationDatum              string
}{
	DeliverToPartyDataPlatformProductMasterBPPlantDatum:         "DeliverToPartyDataPlatformProductMasterBPPlantDatum",
	DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum:       "DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: "SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	BuyerDataPlatformSCRDeliveryPlantRelationDatum:              "BuyerDataPlatformSCRDeliveryPlantRelationDatum",
}

// dataPlatformSCRDeliveryPlantRelationProductDatumR is where relationships are stored.
type dataPlatformSCRDeliveryPlantRelationProductDatumR struct {
	DeliverToPartyDataPlatformProductMasterBPPlantDatum         *DataPlatformProductMasterBPPlantDatum     `boil:"DeliverToPartyDataPlatformProductMasterBPPlantDatum" json:"DeliverToPartyDataPlatformProductMasterBPPlantDatum" toml:"DeliverToPartyDataPlatformProductMasterBPPlantDatum" yaml:"DeliverToPartyDataPlatformProductMasterBPPlantDatum"`
	DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum       *DataPlatformQuantityUnitQuantityUnitDatum `boil:"DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum `boil:"SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	BuyerDataPlatformSCRDeliveryPlantRelationDatum              *DataPlatformSCRDeliveryPlantRelationDatum `boil:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" json:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" toml:"BuyerDataPlatformSCRDeliveryPlantRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryPlantRelationDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSCRDeliveryPlantRelationProductDatumR) NewStruct() *dataPlatformSCRDeliveryPlantRelationProductDatumR {
	return &dataPlatformSCRDeliveryPlantRelationProductDatumR{}
}

func (r *dataPlatformSCRDeliveryPlantRelationProductDatumR) GetDeliverToPartyDataPlatformProductMasterBPPlantDatum() *DataPlatformProductMasterBPPlantDatum {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformProductMasterBPPlantDatum
}

func (r *dataPlatformSCRDeliveryPlantRelationProductDatumR) GetDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformSCRDeliveryPlantRelationProductDatumR) GetSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformSCRDeliveryPlantRelationProductDatumR) GetBuyerDataPlatformSCRDeliveryPlantRelationDatum() *DataPlatformSCRDeliveryPlantRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryPlantRelationDatum
}

// dataPlatformSCRDeliveryPlantRelationProductDatumL is where Load methods for each relationship are stored.
type dataPlatformSCRDeliveryPlantRelationProductDatumL struct{}

var (
	dataPlatformSCRDeliveryPlantRelationProductDatumAllColumns            = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "Product", "DeliverToPlantStorageLocation", "DeliverFromPlantStorageLocation", "DeliveryUnit", "QuantityPerPackage", "MRPType", "MRPController", "ReorderThresholdQuantityInBaseUnit", "PlanningTimeFenceInDays", "MRPPlanningCalendar", "SafetyStockQuantityInBaseUnit", "SafetyDuration", "SafetyDurationUnit", "MaximumStockQuantityInBaseUnit", "MinimumDeliveryQuantityInBaseUnit", "MinimumDeliveryLotSizeQuantityInBaseUnit", "StandardDeliveryQuantityInBaseUnit", "StandardDeliveryLotSizeQuantityInBaseUnit", "MaximumDeliveryQuantityInBaseUnit", "MaximumDeliveryLotSizeQuantityInBaseUnit", "DeliveryLotSizeRoundingQuantityInBaseUnit", "DeliveryLotSizeIsFixed", "StandardDeliveryDuration", "StandardDeliveryDurationUnit", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRDeliveryPlantRelationProductDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "Product", "DeliverToPlantStorageLocation", "DeliverFromPlantStorageLocation", "DeliveryUnit", "QuantityPerPackage", "MRPType", "MRPController", "ReorderThresholdQuantityInBaseUnit", "PlanningTimeFenceInDays", "MRPPlanningCalendar", "SafetyStockQuantityInBaseUnit", "SafetyDuration", "SafetyDurationUnit", "MaximumStockQuantityInBaseUnit", "MinimumDeliveryQuantityInBaseUnit", "MinimumDeliveryLotSizeQuantityInBaseUnit", "StandardDeliveryQuantityInBaseUnit", "StandardDeliveryLotSizeQuantityInBaseUnit", "MaximumDeliveryQuantityInBaseUnit", "MaximumDeliveryLotSizeQuantityInBaseUnit", "DeliveryLotSizeRoundingQuantityInBaseUnit", "DeliveryLotSizeIsFixed", "StandardDeliveryDuration", "StandardDeliveryDurationUnit", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRDeliveryPlantRelationProductDatumColumnsWithDefault    = []string{}
	dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "Product"}
	dataPlatformSCRDeliveryPlantRelationProductDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSCRDeliveryPlantRelationProductDatumSlice is an alias for a slice of pointers to DataPlatformSCRDeliveryPlantRelationProductDatum.
	// This should almost always be used instead of []DataPlatformSCRDeliveryPlantRelationProductDatum.
	DataPlatformSCRDeliveryPlantRelationProductDatumSlice []*DataPlatformSCRDeliveryPlantRelationProductDatum

	dataPlatformSCRDeliveryPlantRelationProductDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSCRDeliveryPlantRelationProductDatumType                 = reflect.TypeOf(&DataPlatformSCRDeliveryPlantRelationProductDatum{})
	dataPlatformSCRDeliveryPlantRelationProductDatumMapping              = queries.MakeStructMapping(dataPlatformSCRDeliveryPlantRelationProductDatumType)
	dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationProductDatumType, dataPlatformSCRDeliveryPlantRelationProductDatumMapping, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns)
	dataPlatformSCRDeliveryPlantRelationProductDatumInsertCacheMut       sync.RWMutex
	dataPlatformSCRDeliveryPlantRelationProductDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSCRDeliveryPlantRelationProductDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSCRDeliveryPlantRelationProductDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSCRDeliveryPlantRelationProductDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSCRDeliveryPlantRelationProductDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSCRDeliveryPlantRelationProductDatum record from the query.
func (q dataPlatformSCRDeliveryPlantRelationProductDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSCRDeliveryPlantRelationProductDatum, error) {
	o := &DataPlatformSCRDeliveryPlantRelationProductDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_scr_delivery_plant_relation_product_data")
	}

	return o, nil
}

// All returns all DataPlatformSCRDeliveryPlantRelationProductDatum records from the query.
func (q dataPlatformSCRDeliveryPlantRelationProductDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSCRDeliveryPlantRelationProductDatumSlice, error) {
	var o []*DataPlatformSCRDeliveryPlantRelationProductDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSCRDeliveryPlantRelationProductDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSCRDeliveryPlantRelationProductDatum records in the query.
func (q dataPlatformSCRDeliveryPlantRelationProductDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_scr_delivery_plant_relation_product_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSCRDeliveryPlantRelationProductDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_scr_delivery_plant_relation_product_data exists")
	}

	return count > 0, nil
}

// DeliverToPartyDataPlatformProductMasterBPPlantDatum pointed to by the foreign key.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) DeliverToPartyDataPlatformProductMasterBPPlantDatum(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DeliverToParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.DeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.SafetyDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryPlantRelationDatum pointed to by the foreign key.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) BuyerDataPlatformSCRDeliveryPlantRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryPlantRelationData(queryMods...)
}

// LoadDeliverToPartyDataPlatformProductMasterBPPlantDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRDeliveryPlantRelationProductDatumL) LoadDeliverToPartyDataPlatformProductMasterBPPlantDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryPlantRelationProductDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryPlantRelationProductDatum
	var object *DataPlatformSCRDeliveryPlantRelationProductDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryPlantRelationProductDatum.(*DataPlatformSCRDeliveryPlantRelationProductDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryPlantRelationProductDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryPlantRelationProductDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryPlantRelationProductDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryPlantRelationProductDatum.(*[]*DataPlatformSCRDeliveryPlantRelationProductDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryPlantRelationProductDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryPlantRelationProductDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryPlantRelationProductDatumR{}
		}
		args = append(args, object.DeliverToParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryPlantRelationProductDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliverToParty {
					continue Outer
				}
			}

			args = append(args, obj.DeliverToParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterBPPlantDatum")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterBPPlantDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliverToPartyDataPlatformProductMasterBPPlantDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliverToParty == foreign.BusinessPartner {
				local.R.DeliverToPartyDataPlatformProductMasterBPPlantDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRDeliveryPlantRelationProductDatumL) LoadDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryPlantRelationProductDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryPlantRelationProductDatum
	var object *DataPlatformSCRDeliveryPlantRelationProductDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryPlantRelationProductDatum.(*DataPlatformSCRDeliveryPlantRelationProductDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryPlantRelationProductDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryPlantRelationProductDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryPlantRelationProductDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryPlantRelationProductDatum.(*[]*DataPlatformSCRDeliveryPlantRelationProductDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryPlantRelationProductDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryPlantRelationProductDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryPlantRelationProductDatumR{}
		}
		args = append(args, object.DeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryPlantRelationProductDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.DeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliveryUnit == foreign.QuantityUnit {
				local.R.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRDeliveryPlantRelationProductDatumL) LoadSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryPlantRelationProductDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryPlantRelationProductDatum
	var object *DataPlatformSCRDeliveryPlantRelationProductDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryPlantRelationProductDatum.(*DataPlatformSCRDeliveryPlantRelationProductDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryPlantRelationProductDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryPlantRelationProductDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryPlantRelationProductDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryPlantRelationProductDatum.(*[]*DataPlatformSCRDeliveryPlantRelationProductDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryPlantRelationProductDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryPlantRelationProductDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryPlantRelationProductDatumR{}
		}
		if !queries.IsNil(object.SafetyDurationUnit) {
			args = append(args, object.SafetyDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryPlantRelationProductDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SafetyDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SafetyDurationUnit) {
				args = append(args, obj.SafetyDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SafetyDurationUnit, foreign.QuantityUnit) {
				local.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryPlantRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRDeliveryPlantRelationProductDatumL) LoadBuyerDataPlatformSCRDeliveryPlantRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRDeliveryPlantRelationProductDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRDeliveryPlantRelationProductDatum
	var object *DataPlatformSCRDeliveryPlantRelationProductDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRDeliveryPlantRelationProductDatum.(*DataPlatformSCRDeliveryPlantRelationProductDatum)
		if !ok {
			object = new(DataPlatformSCRDeliveryPlantRelationProductDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRDeliveryPlantRelationProductDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRDeliveryPlantRelationProductDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRDeliveryPlantRelationProductDatum.(*[]*DataPlatformSCRDeliveryPlantRelationProductDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRDeliveryPlantRelationProductDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRDeliveryPlantRelationProductDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRDeliveryPlantRelationProductDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRDeliveryPlantRelationProductDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_plant_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_plant_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryPlantRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryPlantRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryPlantRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_plant_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_plant_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetDeliverToPartyDataPlatformProductMasterBPPlantDatum of the dataPlatformSCRDeliveryPlantRelationProductDatum to the related item.
// Sets o.R.DeliverToPartyDataPlatformProductMasterBPPlantDatum to related.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) SetDeliverToPartyDataPlatformProductMasterBPPlantDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterBPPlantDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_delivery_plant_relation_product_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.Product}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliverToParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryPlantRelationProductDatumR{
			DeliverToPartyDataPlatformProductMasterBPPlantDatum: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformProductMasterBPPlantDatum = related
	}

	return nil
}

// SetDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformSCRDeliveryPlantRelationProductDatum to the related item.
// Sets o.R.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) SetDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_delivery_plant_relation_product_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.Product}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryPlantRelationProductDatumR{
			DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformSCRDeliveryPlantRelationProductDatum to the related item.
// Sets o.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) SetSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_delivery_plant_relation_product_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SafetyDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.Product}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SafetyDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryPlantRelationProductDatumR{
			SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) RemoveSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.SafetyDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("SafetyDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryPlantRelationDatum of the dataPlatformSCRDeliveryPlantRelationProductDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum to related.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) SetBuyerDataPlatformSCRDeliveryPlantRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryPlantRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_delivery_plant_relation_product_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.Product}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformSCRDeliveryPlantRelationProductDatumR{
			BuyerDataPlatformSCRDeliveryPlantRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryPlantRelationDatum = related
	}

	return nil
}

// DataPlatformSCRDeliveryPlantRelationProductData retrieves all the records using an executor.
func DataPlatformSCRDeliveryPlantRelationProductData(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationProductDatumQuery {
	mods = append(mods, qm.From("`data_platform_scr_delivery_plant_relation_product_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_scr_delivery_plant_relation_product_data`.*"})
	}

	return dataPlatformSCRDeliveryPlantRelationProductDatumQuery{q}
}

// FindDataPlatformSCRDeliveryPlantRelationProductDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSCRDeliveryPlantRelationProductDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, supplyChainRelationshipDeliveryPlantID int, buyer int, seller int, deliverToParty int, deliverFromParty int, deliverToPlant string, deliverFromPlant string, product string, selectCols ...string) (*DataPlatformSCRDeliveryPlantRelationProductDatum, error) {
	dataPlatformSCRDeliveryPlantRelationProductDatumObj := &DataPlatformSCRDeliveryPlantRelationProductDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_scr_delivery_plant_relation_product_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? AND `Product`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant, product)

	err := q.Bind(ctx, exec, dataPlatformSCRDeliveryPlantRelationProductDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_scr_delivery_plant_relation_product_data")
	}

	return dataPlatformSCRDeliveryPlantRelationProductDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_delivery_plant_relation_product_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRDeliveryPlantRelationProductDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSCRDeliveryPlantRelationProductDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSCRDeliveryPlantRelationProductDatumInsertCache[key]
	dataPlatformSCRDeliveryPlantRelationProductDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSCRDeliveryPlantRelationProductDatumAllColumns,
			dataPlatformSCRDeliveryPlantRelationProductDatumColumnsWithDefault,
			dataPlatformSCRDeliveryPlantRelationProductDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationProductDatumType, dataPlatformSCRDeliveryPlantRelationProductDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationProductDatumType, dataPlatformSCRDeliveryPlantRelationProductDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_scr_delivery_plant_relation_product_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_scr_delivery_plant_relation_product_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_scr_delivery_plant_relation_product_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_scr_delivery_plant_relation_product_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipDeliveryID,
		o.SupplyChainRelationshipDeliveryPlantID,
		o.Buyer,
		o.Seller,
		o.DeliverToParty,
		o.DeliverFromParty,
		o.DeliverToPlant,
		o.DeliverFromPlant,
		o.Product,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_delivery_plant_relation_product_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRDeliveryPlantRelationProductDatumInsertCacheMut.Lock()
		dataPlatformSCRDeliveryPlantRelationProductDatumInsertCache[key] = cache
		dataPlatformSCRDeliveryPlantRelationProductDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSCRDeliveryPlantRelationProductDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSCRDeliveryPlantRelationProductDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSCRDeliveryPlantRelationProductDatumUpdateCache[key]
	dataPlatformSCRDeliveryPlantRelationProductDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSCRDeliveryPlantRelationProductDatumAllColumns,
			dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_scr_delivery_plant_relation_product_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_scr_delivery_plant_relation_product_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationProductDatumType, dataPlatformSCRDeliveryPlantRelationProductDatumMapping, append(wl, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_scr_delivery_plant_relation_product_data row")
	}

	if !cached {
		dataPlatformSCRDeliveryPlantRelationProductDatumUpdateCacheMut.Lock()
		dataPlatformSCRDeliveryPlantRelationProductDatumUpdateCache[key] = cache
		dataPlatformSCRDeliveryPlantRelationProductDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSCRDeliveryPlantRelationProductDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_scr_delivery_plant_relation_product_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSCRDeliveryPlantRelationProductDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_scr_delivery_plant_relation_product_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSCRDeliveryPlantRelationProductDatum slice")
	}

	return nil
}

var mySQLDataPlatformSCRDeliveryPlantRelationProductDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_delivery_plant_relation_product_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRDeliveryPlantRelationProductDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSCRDeliveryPlantRelationProductDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSCRDeliveryPlantRelationProductDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSCRDeliveryPlantRelationProductDatumUpsertCache[key]
	dataPlatformSCRDeliveryPlantRelationProductDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSCRDeliveryPlantRelationProductDatumAllColumns,
			dataPlatformSCRDeliveryPlantRelationProductDatumColumnsWithDefault,
			dataPlatformSCRDeliveryPlantRelationProductDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSCRDeliveryPlantRelationProductDatumAllColumns,
			dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_scr_delivery_plant_relation_product_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_scr_delivery_plant_relation_product_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_scr_delivery_plant_relation_product_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationProductDatumType, dataPlatformSCRDeliveryPlantRelationProductDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationProductDatumType, dataPlatformSCRDeliveryPlantRelationProductDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_scr_delivery_plant_relation_product_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSCRDeliveryPlantRelationProductDatumType, dataPlatformSCRDeliveryPlantRelationProductDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_scr_delivery_plant_relation_product_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_delivery_plant_relation_product_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRDeliveryPlantRelationProductDatumUpsertCacheMut.Lock()
		dataPlatformSCRDeliveryPlantRelationProductDatumUpsertCache[key] = cache
		dataPlatformSCRDeliveryPlantRelationProductDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSCRDeliveryPlantRelationProductDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSCRDeliveryPlantRelationProductDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_scr_delivery_plant_relation_product_data` WHERE `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? AND `Product`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_scr_delivery_plant_relation_product_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSCRDeliveryPlantRelationProductDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSCRDeliveryPlantRelationProductDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_scr_delivery_plant_relation_product_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSCRDeliveryPlantRelationProductDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_scr_delivery_plant_relation_product_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSCRDeliveryPlantRelationProductDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSCRDeliveryPlantRelationProductDatum(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.Product)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSCRDeliveryPlantRelationProductDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_scr_delivery_plant_relation_product_data`.* FROM `data_platform_scr_delivery_plant_relation_product_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSCRDeliveryPlantRelationProductDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSCRDeliveryPlantRelationProductDatumExists checks if the DataPlatformSCRDeliveryPlantRelationProductDatum row exists.
func DataPlatformSCRDeliveryPlantRelationProductDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, supplyChainRelationshipDeliveryPlantID int, buyer int, seller int, deliverToParty int, deliverFromParty int, deliverToPlant string, deliverFromPlant string, product string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_scr_delivery_plant_relation_product_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? AND `Product`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant, product)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant, product)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_scr_delivery_plant_relation_product_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSCRDeliveryPlantRelationProductDatum row exists.
func (o *DataPlatformSCRDeliveryPlantRelationProductDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSCRDeliveryPlantRelationProductDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.Product)
}
