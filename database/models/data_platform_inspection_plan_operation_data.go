// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInspectionPlanOperationDatum is an object representing the database table.
type DataPlatformInspectionPlanOperationDatum struct {
	InspectionPlantBusinessPartner  int         `boil:"InspectionPlantBusinessPartner" json:"InspectionPlantBusinessPartner" toml:"InspectionPlantBusinessPartner" yaml:"InspectionPlantBusinessPartner"`
	InspectionPlant                 string      `boil:"InspectionPlant" json:"InspectionPlant" toml:"InspectionPlant" yaml:"InspectionPlant"`
	InspectionPlan                  int         `boil:"InspectionPlan" json:"InspectionPlan" toml:"InspectionPlan" yaml:"InspectionPlan"`
	InspectionPlanGroup             int         `boil:"InspectionPlanGroup" json:"InspectionPlanGroup" toml:"InspectionPlanGroup" yaml:"InspectionPlanGroup"`
	InspectionPlanInternalVersion   int         `boil:"InspectionPlanInternalVersion" json:"InspectionPlanInternalVersion" toml:"InspectionPlanInternalVersion" yaml:"InspectionPlanInternalVersion"`
	InspectionPlanOperationGroup    int         `boil:"InspectionPlanOperationGroup" json:"InspectionPlanOperationGroup" toml:"InspectionPlanOperationGroup" yaml:"InspectionPlanOperationGroup"`
	InspectionPlanOperation         int         `boil:"InspectionPlanOperation" json:"InspectionPlanOperation" toml:"InspectionPlanOperation" yaml:"InspectionPlanOperation"`
	InspectionPlanOperationSequence int         `boil:"InspectionPlanOperationSequence" json:"InspectionPlanOperationSequence" toml:"InspectionPlanOperationSequence" yaml:"InspectionPlanOperationSequence"`
	ValidityStartDate               string      `boil:"ValidityStartDate" json:"ValidityStartDate" toml:"ValidityStartDate" yaml:"ValidityStartDate"`
	ValidityEndDate                 string      `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	OperationControlProfile         null.String `boil:"OperationControlProfile" json:"OperationControlProfile,omitempty" toml:"OperationControlProfile" yaml:"OperationControlProfile,omitempty"`
	OperationStandardTextCode       null.String `boil:"OperationStandardTextCode" json:"OperationStandardTextCode,omitempty" toml:"OperationStandardTextCode" yaml:"OperationStandardTextCode,omitempty"`
	CapacityCategoryCode            null.String `boil:"CapacityCategoryCode" json:"CapacityCategoryCode,omitempty" toml:"CapacityCategoryCode" yaml:"CapacityCategoryCode,omitempty"`
	OperationCostingRelevancyType   null.String `boil:"OperationCostingRelevancyType" json:"OperationCostingRelevancyType,omitempty" toml:"OperationCostingRelevancyType" yaml:"OperationCostingRelevancyType,omitempty"`
	NumberOfTimeTickets             null.String `boil:"NumberOfTimeTickets" json:"NumberOfTimeTickets,omitempty" toml:"NumberOfTimeTickets" yaml:"NumberOfTimeTickets,omitempty"`
	NumberOfConfirmationSlips       null.String `boil:"NumberOfConfirmationSlips" json:"NumberOfConfirmationSlips,omitempty" toml:"NumberOfConfirmationSlips" yaml:"NumberOfConfirmationSlips,omitempty"`
	OperationSetupType              null.String `boil:"OperationSetupType" json:"OperationSetupType,omitempty" toml:"OperationSetupType" yaml:"OperationSetupType,omitempty"`
	OperationSetupGroupCategory     null.String `boil:"OperationSetupGroupCategory" json:"OperationSetupGroupCategory,omitempty" toml:"OperationSetupGroupCategory" yaml:"OperationSetupGroupCategory,omitempty"`
	OperationSetupGroup             null.String `boil:"OperationSetupGroup" json:"OperationSetupGroup,omitempty" toml:"OperationSetupGroup" yaml:"OperationSetupGroup,omitempty"`
	OperationReferenceQuantity      null.String `boil:"OperationReferenceQuantity" json:"OperationReferenceQuantity,omitempty" toml:"OperationReferenceQuantity" yaml:"OperationReferenceQuantity,omitempty"`
	OperationUnit                   null.String `boil:"OperationUnit" json:"OperationUnit,omitempty" toml:"OperationUnit" yaml:"OperationUnit,omitempty"`
	OpQtyToBaseQtyNmrtr             null.String `boil:"OpQtyToBaseQtyNmrtr" json:"OpQtyToBaseQtyNmrtr,omitempty" toml:"OpQtyToBaseQtyNmrtr" yaml:"OpQtyToBaseQtyNmrtr,omitempty"`
	OpQtyToBaseQtyDnmntr            null.String `boil:"OpQtyToBaseQtyDnmntr" json:"OpQtyToBaseQtyDnmntr,omitempty" toml:"OpQtyToBaseQtyDnmntr" yaml:"OpQtyToBaseQtyDnmntr,omitempty"`
	MaximumWaitDuration             null.String `boil:"MaximumWaitDuration" json:"MaximumWaitDuration,omitempty" toml:"MaximumWaitDuration" yaml:"MaximumWaitDuration,omitempty"`
	MaximumWaitDurationUnit         null.String `boil:"MaximumWaitDurationUnit" json:"MaximumWaitDurationUnit,omitempty" toml:"MaximumWaitDurationUnit" yaml:"MaximumWaitDurationUnit,omitempty"`
	MinimumWaitDuration             null.String `boil:"MinimumWaitDuration" json:"MinimumWaitDuration,omitempty" toml:"MinimumWaitDuration" yaml:"MinimumWaitDuration,omitempty"`
	MinimumWaitDurationUnit         null.String `boil:"MinimumWaitDurationUnit" json:"MinimumWaitDurationUnit,omitempty" toml:"MinimumWaitDurationUnit" yaml:"MinimumWaitDurationUnit,omitempty"`
	StandardQueueDuration           null.String `boil:"StandardQueueDuration" json:"StandardQueueDuration,omitempty" toml:"StandardQueueDuration" yaml:"StandardQueueDuration,omitempty"`
	StandardQueueDurationUnit       null.String `boil:"StandardQueueDurationUnit" json:"StandardQueueDurationUnit,omitempty" toml:"StandardQueueDurationUnit" yaml:"StandardQueueDurationUnit,omitempty"`
	MinimumQueueDuration            null.String `boil:"MinimumQueueDuration" json:"MinimumQueueDuration,omitempty" toml:"MinimumQueueDuration" yaml:"MinimumQueueDuration,omitempty"`
	MinimumQueueDurationUnit        null.String `boil:"MinimumQueueDurationUnit" json:"MinimumQueueDurationUnit,omitempty" toml:"MinimumQueueDurationUnit" yaml:"MinimumQueueDurationUnit,omitempty"`
	StandardMoveDuration            null.String `boil:"StandardMoveDuration" json:"StandardMoveDuration,omitempty" toml:"StandardMoveDuration" yaml:"StandardMoveDuration,omitempty"`
	StandardMoveDurationUnit        null.String `boil:"StandardMoveDurationUnit" json:"StandardMoveDurationUnit,omitempty" toml:"StandardMoveDurationUnit" yaml:"StandardMoveDurationUnit,omitempty"`
	MinimumMoveDuration             null.String `boil:"MinimumMoveDuration" json:"MinimumMoveDuration,omitempty" toml:"MinimumMoveDuration" yaml:"MinimumMoveDuration,omitempty"`
	MinimumMoveDurationUnit         null.String `boil:"MinimumMoveDurationUnit" json:"MinimumMoveDurationUnit,omitempty" toml:"MinimumMoveDurationUnit" yaml:"MinimumMoveDurationUnit,omitempty"`
	NumberOfOperationPriceUnits     null.String `boil:"NumberOfOperationPriceUnits" json:"NumberOfOperationPriceUnits,omitempty" toml:"NumberOfOperationPriceUnits" yaml:"NumberOfOperationPriceUnits,omitempty"`
	OperationScrapPercent           null.String `boil:"OperationScrapPercent" json:"OperationScrapPercent,omitempty" toml:"OperationScrapPercent" yaml:"OperationScrapPercent,omitempty"`
	OperationText                   null.String `boil:"OperationText" json:"OperationText,omitempty" toml:"OperationText" yaml:"OperationText,omitempty"`
	PlainLongText                   null.String `boil:"PlainLongText" json:"PlainLongText,omitempty" toml:"PlainLongText" yaml:"PlainLongText,omitempty"`
	CreationDate                    null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	CreationTime                    null.String `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	LastChangeDate                  null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeTime                  null.String `boil:"LastChangeTime" json:"LastChangeTime,omitempty" toml:"LastChangeTime" yaml:"LastChangeTime,omitempty"`

	R *dataPlatformInspectionPlanOperationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInspectionPlanOperationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInspectionPlanOperationDatumColumns = struct {
	InspectionPlantBusinessPartner  string
	InspectionPlant                 string
	InspectionPlan                  string
	InspectionPlanGroup             string
	InspectionPlanInternalVersion   string
	InspectionPlanOperationGroup    string
	InspectionPlanOperation         string
	InspectionPlanOperationSequence string
	ValidityStartDate               string
	ValidityEndDate                 string
	OperationControlProfile         string
	OperationStandardTextCode       string
	CapacityCategoryCode            string
	OperationCostingRelevancyType   string
	NumberOfTimeTickets             string
	NumberOfConfirmationSlips       string
	OperationSetupType              string
	OperationSetupGroupCategory     string
	OperationSetupGroup             string
	OperationReferenceQuantity      string
	OperationUnit                   string
	OpQtyToBaseQtyNmrtr             string
	OpQtyToBaseQtyDnmntr            string
	MaximumWaitDuration             string
	MaximumWaitDurationUnit         string
	MinimumWaitDuration             string
	MinimumWaitDurationUnit         string
	StandardQueueDuration           string
	StandardQueueDurationUnit       string
	MinimumQueueDuration            string
	MinimumQueueDurationUnit        string
	StandardMoveDuration            string
	StandardMoveDurationUnit        string
	MinimumMoveDuration             string
	MinimumMoveDurationUnit         string
	NumberOfOperationPriceUnits     string
	OperationScrapPercent           string
	OperationText                   string
	PlainLongText                   string
	CreationDate                    string
	CreationTime                    string
	LastChangeDate                  string
	LastChangeTime                  string
}{
	InspectionPlantBusinessPartner:  "InspectionPlantBusinessPartner",
	InspectionPlant:                 "InspectionPlant",
	InspectionPlan:                  "InspectionPlan",
	InspectionPlanGroup:             "InspectionPlanGroup",
	InspectionPlanInternalVersion:   "InspectionPlanInternalVersion",
	InspectionPlanOperationGroup:    "InspectionPlanOperationGroup",
	InspectionPlanOperation:         "InspectionPlanOperation",
	InspectionPlanOperationSequence: "InspectionPlanOperationSequence",
	ValidityStartDate:               "ValidityStartDate",
	ValidityEndDate:                 "ValidityEndDate",
	OperationControlProfile:         "OperationControlProfile",
	OperationStandardTextCode:       "OperationStandardTextCode",
	CapacityCategoryCode:            "CapacityCategoryCode",
	OperationCostingRelevancyType:   "OperationCostingRelevancyType",
	NumberOfTimeTickets:             "NumberOfTimeTickets",
	NumberOfConfirmationSlips:       "NumberOfConfirmationSlips",
	OperationSetupType:              "OperationSetupType",
	OperationSetupGroupCategory:     "OperationSetupGroupCategory",
	OperationSetupGroup:             "OperationSetupGroup",
	OperationReferenceQuantity:      "OperationReferenceQuantity",
	OperationUnit:                   "OperationUnit",
	OpQtyToBaseQtyNmrtr:             "OpQtyToBaseQtyNmrtr",
	OpQtyToBaseQtyDnmntr:            "OpQtyToBaseQtyDnmntr",
	MaximumWaitDuration:             "MaximumWaitDuration",
	MaximumWaitDurationUnit:         "MaximumWaitDurationUnit",
	MinimumWaitDuration:             "MinimumWaitDuration",
	MinimumWaitDurationUnit:         "MinimumWaitDurationUnit",
	StandardQueueDuration:           "StandardQueueDuration",
	StandardQueueDurationUnit:       "StandardQueueDurationUnit",
	MinimumQueueDuration:            "MinimumQueueDuration",
	MinimumQueueDurationUnit:        "MinimumQueueDurationUnit",
	StandardMoveDuration:            "StandardMoveDuration",
	StandardMoveDurationUnit:        "StandardMoveDurationUnit",
	MinimumMoveDuration:             "MinimumMoveDuration",
	MinimumMoveDurationUnit:         "MinimumMoveDurationUnit",
	NumberOfOperationPriceUnits:     "NumberOfOperationPriceUnits",
	OperationScrapPercent:           "OperationScrapPercent",
	OperationText:                   "OperationText",
	PlainLongText:                   "PlainLongText",
	CreationDate:                    "CreationDate",
	CreationTime:                    "CreationTime",
	LastChangeDate:                  "LastChangeDate",
	LastChangeTime:                  "LastChangeTime",
}

var DataPlatformInspectionPlanOperationDatumTableColumns = struct {
	InspectionPlantBusinessPartner  string
	InspectionPlant                 string
	InspectionPlan                  string
	InspectionPlanGroup             string
	InspectionPlanInternalVersion   string
	InspectionPlanOperationGroup    string
	InspectionPlanOperation         string
	InspectionPlanOperationSequence string
	ValidityStartDate               string
	ValidityEndDate                 string
	OperationControlProfile         string
	OperationStandardTextCode       string
	CapacityCategoryCode            string
	OperationCostingRelevancyType   string
	NumberOfTimeTickets             string
	NumberOfConfirmationSlips       string
	OperationSetupType              string
	OperationSetupGroupCategory     string
	OperationSetupGroup             string
	OperationReferenceQuantity      string
	OperationUnit                   string
	OpQtyToBaseQtyNmrtr             string
	OpQtyToBaseQtyDnmntr            string
	MaximumWaitDuration             string
	MaximumWaitDurationUnit         string
	MinimumWaitDuration             string
	MinimumWaitDurationUnit         string
	StandardQueueDuration           string
	StandardQueueDurationUnit       string
	MinimumQueueDuration            string
	MinimumQueueDurationUnit        string
	StandardMoveDuration            string
	StandardMoveDurationUnit        string
	MinimumMoveDuration             string
	MinimumMoveDurationUnit         string
	NumberOfOperationPriceUnits     string
	OperationScrapPercent           string
	OperationText                   string
	PlainLongText                   string
	CreationDate                    string
	CreationTime                    string
	LastChangeDate                  string
	LastChangeTime                  string
}{
	InspectionPlantBusinessPartner:  "data_platform_inspection_plan_operation_data.InspectionPlantBusinessPartner",
	InspectionPlant:                 "data_platform_inspection_plan_operation_data.InspectionPlant",
	InspectionPlan:                  "data_platform_inspection_plan_operation_data.InspectionPlan",
	InspectionPlanGroup:             "data_platform_inspection_plan_operation_data.InspectionPlanGroup",
	InspectionPlanInternalVersion:   "data_platform_inspection_plan_operation_data.InspectionPlanInternalVersion",
	InspectionPlanOperationGroup:    "data_platform_inspection_plan_operation_data.InspectionPlanOperationGroup",
	InspectionPlanOperation:         "data_platform_inspection_plan_operation_data.InspectionPlanOperation",
	InspectionPlanOperationSequence: "data_platform_inspection_plan_operation_data.InspectionPlanOperationSequence",
	ValidityStartDate:               "data_platform_inspection_plan_operation_data.ValidityStartDate",
	ValidityEndDate:                 "data_platform_inspection_plan_operation_data.ValidityEndDate",
	OperationControlProfile:         "data_platform_inspection_plan_operation_data.OperationControlProfile",
	OperationStandardTextCode:       "data_platform_inspection_plan_operation_data.OperationStandardTextCode",
	CapacityCategoryCode:            "data_platform_inspection_plan_operation_data.CapacityCategoryCode",
	OperationCostingRelevancyType:   "data_platform_inspection_plan_operation_data.OperationCostingRelevancyType",
	NumberOfTimeTickets:             "data_platform_inspection_plan_operation_data.NumberOfTimeTickets",
	NumberOfConfirmationSlips:       "data_platform_inspection_plan_operation_data.NumberOfConfirmationSlips",
	OperationSetupType:              "data_platform_inspection_plan_operation_data.OperationSetupType",
	OperationSetupGroupCategory:     "data_platform_inspection_plan_operation_data.OperationSetupGroupCategory",
	OperationSetupGroup:             "data_platform_inspection_plan_operation_data.OperationSetupGroup",
	OperationReferenceQuantity:      "data_platform_inspection_plan_operation_data.OperationReferenceQuantity",
	OperationUnit:                   "data_platform_inspection_plan_operation_data.OperationUnit",
	OpQtyToBaseQtyNmrtr:             "data_platform_inspection_plan_operation_data.OpQtyToBaseQtyNmrtr",
	OpQtyToBaseQtyDnmntr:            "data_platform_inspection_plan_operation_data.OpQtyToBaseQtyDnmntr",
	MaximumWaitDuration:             "data_platform_inspection_plan_operation_data.MaximumWaitDuration",
	MaximumWaitDurationUnit:         "data_platform_inspection_plan_operation_data.MaximumWaitDurationUnit",
	MinimumWaitDuration:             "data_platform_inspection_plan_operation_data.MinimumWaitDuration",
	MinimumWaitDurationUnit:         "data_platform_inspection_plan_operation_data.MinimumWaitDurationUnit",
	StandardQueueDuration:           "data_platform_inspection_plan_operation_data.StandardQueueDuration",
	StandardQueueDurationUnit:       "data_platform_inspection_plan_operation_data.StandardQueueDurationUnit",
	MinimumQueueDuration:            "data_platform_inspection_plan_operation_data.MinimumQueueDuration",
	MinimumQueueDurationUnit:        "data_platform_inspection_plan_operation_data.MinimumQueueDurationUnit",
	StandardMoveDuration:            "data_platform_inspection_plan_operation_data.StandardMoveDuration",
	StandardMoveDurationUnit:        "data_platform_inspection_plan_operation_data.StandardMoveDurationUnit",
	MinimumMoveDuration:             "data_platform_inspection_plan_operation_data.MinimumMoveDuration",
	MinimumMoveDurationUnit:         "data_platform_inspection_plan_operation_data.MinimumMoveDurationUnit",
	NumberOfOperationPriceUnits:     "data_platform_inspection_plan_operation_data.NumberOfOperationPriceUnits",
	OperationScrapPercent:           "data_platform_inspection_plan_operation_data.OperationScrapPercent",
	OperationText:                   "data_platform_inspection_plan_operation_data.OperationText",
	PlainLongText:                   "data_platform_inspection_plan_operation_data.PlainLongText",
	CreationDate:                    "data_platform_inspection_plan_operation_data.CreationDate",
	CreationTime:                    "data_platform_inspection_plan_operation_data.CreationTime",
	LastChangeDate:                  "data_platform_inspection_plan_operation_data.LastChangeDate",
	LastChangeTime:                  "data_platform_inspection_plan_operation_data.LastChangeTime",
}

// Generated where

var DataPlatformInspectionPlanOperationDatumWhere = struct {
	InspectionPlantBusinessPartner  whereHelperint
	InspectionPlant                 whereHelperstring
	InspectionPlan                  whereHelperint
	InspectionPlanGroup             whereHelperint
	InspectionPlanInternalVersion   whereHelperint
	InspectionPlanOperationGroup    whereHelperint
	InspectionPlanOperation         whereHelperint
	InspectionPlanOperationSequence whereHelperint
	ValidityStartDate               whereHelperstring
	ValidityEndDate                 whereHelperstring
	OperationControlProfile         whereHelpernull_String
	OperationStandardTextCode       whereHelpernull_String
	CapacityCategoryCode            whereHelpernull_String
	OperationCostingRelevancyType   whereHelpernull_String
	NumberOfTimeTickets             whereHelpernull_String
	NumberOfConfirmationSlips       whereHelpernull_String
	OperationSetupType              whereHelpernull_String
	OperationSetupGroupCategory     whereHelpernull_String
	OperationSetupGroup             whereHelpernull_String
	OperationReferenceQuantity      whereHelpernull_String
	OperationUnit                   whereHelpernull_String
	OpQtyToBaseQtyNmrtr             whereHelpernull_String
	OpQtyToBaseQtyDnmntr            whereHelpernull_String
	MaximumWaitDuration             whereHelpernull_String
	MaximumWaitDurationUnit         whereHelpernull_String
	MinimumWaitDuration             whereHelpernull_String
	MinimumWaitDurationUnit         whereHelpernull_String
	StandardQueueDuration           whereHelpernull_String
	StandardQueueDurationUnit       whereHelpernull_String
	MinimumQueueDuration            whereHelpernull_String
	MinimumQueueDurationUnit        whereHelpernull_String
	StandardMoveDuration            whereHelpernull_String
	StandardMoveDurationUnit        whereHelpernull_String
	MinimumMoveDuration             whereHelpernull_String
	MinimumMoveDurationUnit         whereHelpernull_String
	NumberOfOperationPriceUnits     whereHelpernull_String
	OperationScrapPercent           whereHelpernull_String
	OperationText                   whereHelpernull_String
	PlainLongText                   whereHelpernull_String
	CreationDate                    whereHelpernull_String
	CreationTime                    whereHelpernull_String
	LastChangeDate                  whereHelpernull_String
	LastChangeTime                  whereHelpernull_String
}{
	InspectionPlantBusinessPartner:  whereHelperint{field: "`data_platform_inspection_plan_operation_data`.`InspectionPlantBusinessPartner`"},
	InspectionPlant:                 whereHelperstring{field: "`data_platform_inspection_plan_operation_data`.`InspectionPlant`"},
	InspectionPlan:                  whereHelperint{field: "`data_platform_inspection_plan_operation_data`.`InspectionPlan`"},
	InspectionPlanGroup:             whereHelperint{field: "`data_platform_inspection_plan_operation_data`.`InspectionPlanGroup`"},
	InspectionPlanInternalVersion:   whereHelperint{field: "`data_platform_inspection_plan_operation_data`.`InspectionPlanInternalVersion`"},
	InspectionPlanOperationGroup:    whereHelperint{field: "`data_platform_inspection_plan_operation_data`.`InspectionPlanOperationGroup`"},
	InspectionPlanOperation:         whereHelperint{field: "`data_platform_inspection_plan_operation_data`.`InspectionPlanOperation`"},
	InspectionPlanOperationSequence: whereHelperint{field: "`data_platform_inspection_plan_operation_data`.`InspectionPlanOperationSequence`"},
	ValidityStartDate:               whereHelperstring{field: "`data_platform_inspection_plan_operation_data`.`ValidityStartDate`"},
	ValidityEndDate:                 whereHelperstring{field: "`data_platform_inspection_plan_operation_data`.`ValidityEndDate`"},
	OperationControlProfile:         whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`OperationControlProfile`"},
	OperationStandardTextCode:       whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`OperationStandardTextCode`"},
	CapacityCategoryCode:            whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`CapacityCategoryCode`"},
	OperationCostingRelevancyType:   whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`OperationCostingRelevancyType`"},
	NumberOfTimeTickets:             whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`NumberOfTimeTickets`"},
	NumberOfConfirmationSlips:       whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`NumberOfConfirmationSlips`"},
	OperationSetupType:              whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`OperationSetupType`"},
	OperationSetupGroupCategory:     whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`OperationSetupGroupCategory`"},
	OperationSetupGroup:             whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`OperationSetupGroup`"},
	OperationReferenceQuantity:      whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`OperationReferenceQuantity`"},
	OperationUnit:                   whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`OperationUnit`"},
	OpQtyToBaseQtyNmrtr:             whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`OpQtyToBaseQtyNmrtr`"},
	OpQtyToBaseQtyDnmntr:            whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`OpQtyToBaseQtyDnmntr`"},
	MaximumWaitDuration:             whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`MaximumWaitDuration`"},
	MaximumWaitDurationUnit:         whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`MaximumWaitDurationUnit`"},
	MinimumWaitDuration:             whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`MinimumWaitDuration`"},
	MinimumWaitDurationUnit:         whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`MinimumWaitDurationUnit`"},
	StandardQueueDuration:           whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`StandardQueueDuration`"},
	StandardQueueDurationUnit:       whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`StandardQueueDurationUnit`"},
	MinimumQueueDuration:            whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`MinimumQueueDuration`"},
	MinimumQueueDurationUnit:        whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`MinimumQueueDurationUnit`"},
	StandardMoveDuration:            whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`StandardMoveDuration`"},
	StandardMoveDurationUnit:        whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`StandardMoveDurationUnit`"},
	MinimumMoveDuration:             whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`MinimumMoveDuration`"},
	MinimumMoveDurationUnit:         whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`MinimumMoveDurationUnit`"},
	NumberOfOperationPriceUnits:     whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`NumberOfOperationPriceUnits`"},
	OperationScrapPercent:           whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`OperationScrapPercent`"},
	OperationText:                   whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`OperationText`"},
	PlainLongText:                   whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`PlainLongText`"},
	CreationDate:                    whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`CreationDate`"},
	CreationTime:                    whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`CreationTime`"},
	LastChangeDate:                  whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`LastChangeDate`"},
	LastChangeTime:                  whereHelpernull_String{field: "`data_platform_inspection_plan_operation_data`.`LastChangeTime`"},
}

// DataPlatformInspectionPlanOperationDatumRels is where relationship names are stored.
var DataPlatformInspectionPlanOperationDatumRels = struct {
	InspectionPlanDataPlatformInspectionPlanHeaderDatum string
}{
	InspectionPlanDataPlatformInspectionPlanHeaderDatum: "InspectionPlanDataPlatformInspectionPlanHeaderDatum",
}

// dataPlatformInspectionPlanOperationDatumR is where relationships are stored.
type dataPlatformInspectionPlanOperationDatumR struct {
	InspectionPlanDataPlatformInspectionPlanHeaderDatum *DataPlatformInspectionPlanHeaderDatum `boil:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" json:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" toml:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" yaml:"InspectionPlanDataPlatformInspectionPlanHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInspectionPlanOperationDatumR) NewStruct() *dataPlatformInspectionPlanOperationDatumR {
	return &dataPlatformInspectionPlanOperationDatumR{}
}

func (r *dataPlatformInspectionPlanOperationDatumR) GetInspectionPlanDataPlatformInspectionPlanHeaderDatum() *DataPlatformInspectionPlanHeaderDatum {
	if r == nil {
		return nil
	}
	return r.InspectionPlanDataPlatformInspectionPlanHeaderDatum
}

// dataPlatformInspectionPlanOperationDatumL is where Load methods for each relationship are stored.
type dataPlatformInspectionPlanOperationDatumL struct{}

var (
	dataPlatformInspectionPlanOperationDatumAllColumns            = []string{"InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionPlanGroup", "InspectionPlanInternalVersion", "InspectionPlanOperationGroup", "InspectionPlanOperation", "InspectionPlanOperationSequence", "ValidityStartDate", "ValidityEndDate", "OperationControlProfile", "OperationStandardTextCode", "CapacityCategoryCode", "OperationCostingRelevancyType", "NumberOfTimeTickets", "NumberOfConfirmationSlips", "OperationSetupType", "OperationSetupGroupCategory", "OperationSetupGroup", "OperationReferenceQuantity", "OperationUnit", "OpQtyToBaseQtyNmrtr", "OpQtyToBaseQtyDnmntr", "MaximumWaitDuration", "MaximumWaitDurationUnit", "MinimumWaitDuration", "MinimumWaitDurationUnit", "StandardQueueDuration", "StandardQueueDurationUnit", "MinimumQueueDuration", "MinimumQueueDurationUnit", "StandardMoveDuration", "StandardMoveDurationUnit", "MinimumMoveDuration", "MinimumMoveDurationUnit", "NumberOfOperationPriceUnits", "OperationScrapPercent", "OperationText", "PlainLongText", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime"}
	dataPlatformInspectionPlanOperationDatumColumnsWithoutDefault = []string{"InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionPlanGroup", "InspectionPlanInternalVersion", "InspectionPlanOperationGroup", "InspectionPlanOperation", "InspectionPlanOperationSequence", "ValidityStartDate", "ValidityEndDate", "OperationControlProfile", "OperationStandardTextCode", "CapacityCategoryCode", "OperationCostingRelevancyType", "NumberOfTimeTickets", "NumberOfConfirmationSlips", "OperationSetupType", "OperationSetupGroupCategory", "OperationSetupGroup", "OperationReferenceQuantity", "OperationUnit", "OpQtyToBaseQtyNmrtr", "OpQtyToBaseQtyDnmntr", "MaximumWaitDuration", "MaximumWaitDurationUnit", "MinimumWaitDuration", "MinimumWaitDurationUnit", "StandardQueueDuration", "StandardQueueDurationUnit", "MinimumQueueDuration", "MinimumQueueDurationUnit", "StandardMoveDuration", "StandardMoveDurationUnit", "MinimumMoveDuration", "MinimumMoveDurationUnit", "NumberOfOperationPriceUnits", "OperationScrapPercent", "OperationText", "PlainLongText", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime"}
	dataPlatformInspectionPlanOperationDatumColumnsWithDefault    = []string{}
	dataPlatformInspectionPlanOperationDatumPrimaryKeyColumns     = []string{"InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionPlanOperationGroup", "InspectionPlanInternalVersion", "InspectionPlanOperation", "InspectionPlanOperationSequence"}
	dataPlatformInspectionPlanOperationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInspectionPlanOperationDatumSlice is an alias for a slice of pointers to DataPlatformInspectionPlanOperationDatum.
	// This should almost always be used instead of []DataPlatformInspectionPlanOperationDatum.
	DataPlatformInspectionPlanOperationDatumSlice []*DataPlatformInspectionPlanOperationDatum

	dataPlatformInspectionPlanOperationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInspectionPlanOperationDatumType                 = reflect.TypeOf(&DataPlatformInspectionPlanOperationDatum{})
	dataPlatformInspectionPlanOperationDatumMapping              = queries.MakeStructMapping(dataPlatformInspectionPlanOperationDatumType)
	dataPlatformInspectionPlanOperationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInspectionPlanOperationDatumType, dataPlatformInspectionPlanOperationDatumMapping, dataPlatformInspectionPlanOperationDatumPrimaryKeyColumns)
	dataPlatformInspectionPlanOperationDatumInsertCacheMut       sync.RWMutex
	dataPlatformInspectionPlanOperationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInspectionPlanOperationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInspectionPlanOperationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInspectionPlanOperationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInspectionPlanOperationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInspectionPlanOperationDatum record from the query.
func (q dataPlatformInspectionPlanOperationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInspectionPlanOperationDatum, error) {
	o := &DataPlatformInspectionPlanOperationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_inspection_plan_operation_data")
	}

	return o, nil
}

// All returns all DataPlatformInspectionPlanOperationDatum records from the query.
func (q dataPlatformInspectionPlanOperationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInspectionPlanOperationDatumSlice, error) {
	var o []*DataPlatformInspectionPlanOperationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInspectionPlanOperationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInspectionPlanOperationDatum records in the query.
func (q dataPlatformInspectionPlanOperationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_inspection_plan_operation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInspectionPlanOperationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_inspection_plan_operation_data exists")
	}

	return count > 0, nil
}

// InspectionPlanDataPlatformInspectionPlanHeaderDatum pointed to by the foreign key.
func (o *DataPlatformInspectionPlanOperationDatum) InspectionPlanDataPlatformInspectionPlanHeaderDatum(mods ...qm.QueryMod) dataPlatformInspectionPlanHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InspectionPlan` = ?", o.InspectionPlan),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInspectionPlanHeaderData(queryMods...)
}

// LoadInspectionPlanDataPlatformInspectionPlanHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionPlanOperationDatumL) LoadInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionPlanOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionPlanOperationDatum
	var object *DataPlatformInspectionPlanOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionPlanOperationDatum.(*DataPlatformInspectionPlanOperationDatum)
		if !ok {
			object = new(DataPlatformInspectionPlanOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionPlanOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionPlanOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionPlanOperationDatum.(*[]*DataPlatformInspectionPlanOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionPlanOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionPlanOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionPlanOperationDatumR{}
		}
		args = append(args, object.InspectionPlan)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionPlanOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionPlan {
					continue Outer
				}
			}

			args = append(args, obj.InspectionPlan)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_header_data`),
		qm.WhereIn(`data_platform_inspection_plan_header_data.InspectionPlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInspectionPlanHeaderDatum")
	}

	var resultSlice []*DataPlatformInspectionPlanHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInspectionPlanHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_inspection_plan_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InspectionPlan == foreign.InspectionPlan {
				local.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetInspectionPlanDataPlatformInspectionPlanHeaderDatum of the dataPlatformInspectionPlanOperationDatum to the related item.
// Sets o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum to related.
func (o *DataPlatformInspectionPlanOperationDatum) SetInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInspectionPlanHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_plan_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlan"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.InspectionPlan, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanOperationGroup, o.InspectionPlanInternalVersion, o.InspectionPlanOperation, o.InspectionPlanOperationSequence}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InspectionPlan = related.InspectionPlan
	if o.R == nil {
		o.R = &dataPlatformInspectionPlanOperationDatumR{
			InspectionPlanDataPlatformInspectionPlanHeaderDatum: related,
		}
	} else {
		o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = related
	}

	return nil
}

// DataPlatformInspectionPlanOperationData retrieves all the records using an executor.
func DataPlatformInspectionPlanOperationData(mods ...qm.QueryMod) dataPlatformInspectionPlanOperationDatumQuery {
	mods = append(mods, qm.From("`data_platform_inspection_plan_operation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_inspection_plan_operation_data`.*"})
	}

	return dataPlatformInspectionPlanOperationDatumQuery{q}
}

// FindDataPlatformInspectionPlanOperationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInspectionPlanOperationDatum(ctx context.Context, exec boil.ContextExecutor, inspectionPlantBusinessPartner int, inspectionPlant string, inspectionPlan int, inspectionPlanOperationGroup int, inspectionPlanInternalVersion int, inspectionPlanOperation int, inspectionPlanOperationSequence int, selectCols ...string) (*DataPlatformInspectionPlanOperationDatum, error) {
	dataPlatformInspectionPlanOperationDatumObj := &DataPlatformInspectionPlanOperationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_inspection_plan_operation_data` where `InspectionPlantBusinessPartner`=? AND `InspectionPlant`=? AND `InspectionPlan`=? AND `InspectionPlanOperationGroup`=? AND `InspectionPlanInternalVersion`=? AND `InspectionPlanOperation`=? AND `InspectionPlanOperationSequence`=?", sel,
	)

	q := queries.Raw(query, inspectionPlantBusinessPartner, inspectionPlant, inspectionPlan, inspectionPlanOperationGroup, inspectionPlanInternalVersion, inspectionPlanOperation, inspectionPlanOperationSequence)

	err := q.Bind(ctx, exec, dataPlatformInspectionPlanOperationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_inspection_plan_operation_data")
	}

	return dataPlatformInspectionPlanOperationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInspectionPlanOperationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_plan_operation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionPlanOperationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInspectionPlanOperationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanOperationDatumInsertCache[key]
	dataPlatformInspectionPlanOperationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInspectionPlanOperationDatumAllColumns,
			dataPlatformInspectionPlanOperationDatumColumnsWithDefault,
			dataPlatformInspectionPlanOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanOperationDatumType, dataPlatformInspectionPlanOperationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInspectionPlanOperationDatumType, dataPlatformInspectionPlanOperationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_inspection_plan_operation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_inspection_plan_operation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_inspection_plan_operation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanOperationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_inspection_plan_operation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InspectionPlantBusinessPartner,
		o.InspectionPlant,
		o.InspectionPlan,
		o.InspectionPlanOperationGroup,
		o.InspectionPlanInternalVersion,
		o.InspectionPlanOperation,
		o.InspectionPlanOperationSequence,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_plan_operation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionPlanOperationDatumInsertCacheMut.Lock()
		dataPlatformInspectionPlanOperationDatumInsertCache[key] = cache
		dataPlatformInspectionPlanOperationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInspectionPlanOperationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInspectionPlanOperationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInspectionPlanOperationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanOperationDatumUpdateCache[key]
	dataPlatformInspectionPlanOperationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInspectionPlanOperationDatumAllColumns,
			dataPlatformInspectionPlanOperationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_inspection_plan_operation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_inspection_plan_operation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanOperationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanOperationDatumType, dataPlatformInspectionPlanOperationDatumMapping, append(wl, dataPlatformInspectionPlanOperationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_inspection_plan_operation_data row")
	}

	if !cached {
		dataPlatformInspectionPlanOperationDatumUpdateCacheMut.Lock()
		dataPlatformInspectionPlanOperationDatumUpdateCache[key] = cache
		dataPlatformInspectionPlanOperationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInspectionPlanOperationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_inspection_plan_operation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInspectionPlanOperationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_inspection_plan_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanOperationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInspectionPlanOperationDatum slice")
	}

	return nil
}

var mySQLDataPlatformInspectionPlanOperationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInspectionPlanOperationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_plan_operation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionPlanOperationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInspectionPlanOperationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInspectionPlanOperationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanOperationDatumUpsertCache[key]
	dataPlatformInspectionPlanOperationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInspectionPlanOperationDatumAllColumns,
			dataPlatformInspectionPlanOperationDatumColumnsWithDefault,
			dataPlatformInspectionPlanOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInspectionPlanOperationDatumAllColumns,
			dataPlatformInspectionPlanOperationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_inspection_plan_operation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_inspection_plan_operation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_inspection_plan_operation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanOperationDatumType, dataPlatformInspectionPlanOperationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInspectionPlanOperationDatumType, dataPlatformInspectionPlanOperationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_inspection_plan_operation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInspectionPlanOperationDatumType, dataPlatformInspectionPlanOperationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_inspection_plan_operation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_plan_operation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionPlanOperationDatumUpsertCacheMut.Lock()
		dataPlatformInspectionPlanOperationDatumUpsertCache[key] = cache
		dataPlatformInspectionPlanOperationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInspectionPlanOperationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInspectionPlanOperationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInspectionPlanOperationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInspectionPlanOperationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_inspection_plan_operation_data` WHERE `InspectionPlantBusinessPartner`=? AND `InspectionPlant`=? AND `InspectionPlan`=? AND `InspectionPlanOperationGroup`=? AND `InspectionPlanInternalVersion`=? AND `InspectionPlanOperation`=? AND `InspectionPlanOperationSequence`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_inspection_plan_operation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInspectionPlanOperationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInspectionPlanOperationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_inspection_plan_operation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInspectionPlanOperationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_inspection_plan_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanOperationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInspectionPlanOperationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInspectionPlanOperationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInspectionPlanOperationDatum(ctx, exec, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanOperationGroup, o.InspectionPlanInternalVersion, o.InspectionPlanOperation, o.InspectionPlanOperationSequence)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInspectionPlanOperationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInspectionPlanOperationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_inspection_plan_operation_data`.* FROM `data_platform_inspection_plan_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanOperationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInspectionPlanOperationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInspectionPlanOperationDatumExists checks if the DataPlatformInspectionPlanOperationDatum row exists.
func DataPlatformInspectionPlanOperationDatumExists(ctx context.Context, exec boil.ContextExecutor, inspectionPlantBusinessPartner int, inspectionPlant string, inspectionPlan int, inspectionPlanOperationGroup int, inspectionPlanInternalVersion int, inspectionPlanOperation int, inspectionPlanOperationSequence int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_inspection_plan_operation_data` where `InspectionPlantBusinessPartner`=? AND `InspectionPlant`=? AND `InspectionPlan`=? AND `InspectionPlanOperationGroup`=? AND `InspectionPlanInternalVersion`=? AND `InspectionPlanOperation`=? AND `InspectionPlanOperationSequence`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inspectionPlantBusinessPartner, inspectionPlant, inspectionPlan, inspectionPlanOperationGroup, inspectionPlanInternalVersion, inspectionPlanOperation, inspectionPlanOperationSequence)
	}
	row := exec.QueryRowContext(ctx, sql, inspectionPlantBusinessPartner, inspectionPlant, inspectionPlan, inspectionPlanOperationGroup, inspectionPlanInternalVersion, inspectionPlanOperation, inspectionPlanOperationSequence)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_inspection_plan_operation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInspectionPlanOperationDatum row exists.
func (o *DataPlatformInspectionPlanOperationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInspectionPlanOperationDatumExists(ctx, exec, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanOperationGroup, o.InspectionPlanInternalVersion, o.InspectionPlanOperation, o.InspectionPlanOperationSequence)
}
