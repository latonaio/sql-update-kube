// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSupplyChainRelationshipDeliveryPlantRelProd is an object representing the database table.
type DataPlatformSupplyChainRelationshipDeliveryPlantRelProd struct {
	SupplyChainRelationshipID                 int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID         int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID    int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	Buyer                                     int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                    int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                            int          `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverFromParty                          int          `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverToPlant                            string       `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	DeliverFromPlant                          string       `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	Product                                   string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	DeliverToPlantStorageLocation             string       `boil:"DeliverToPlantStorageLocation" json:"DeliverToPlantStorageLocation" toml:"DeliverToPlantStorageLocation" yaml:"DeliverToPlantStorageLocation"`
	DeliverFromPlantStorageLocation           string       `boil:"DeliverFromPlantStorageLocation" json:"DeliverFromPlantStorageLocation" toml:"DeliverFromPlantStorageLocation" yaml:"DeliverFromPlantStorageLocation"`
	DeliveryUnit                              string       `boil:"DeliveryUnit" json:"DeliveryUnit" toml:"DeliveryUnit" yaml:"DeliveryUnit"`
	QuantityPerPackage                        null.Float32 `boil:"QuantityPerPackage" json:"QuantityPerPackage,omitempty" toml:"QuantityPerPackage" yaml:"QuantityPerPackage,omitempty"`
	MRPType                                   null.String  `boil:"MRPType" json:"MRPType,omitempty" toml:"MRPType" yaml:"MRPType,omitempty"`
	MRPController                             null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ReorderThresholdQuantity                  null.Float32 `boil:"ReorderThresholdQuantity" json:"ReorderThresholdQuantity,omitempty" toml:"ReorderThresholdQuantity" yaml:"ReorderThresholdQuantity,omitempty"`
	PlanningTimeFence                         null.Int     `boil:"PlanningTimeFence" json:"PlanningTimeFence,omitempty" toml:"PlanningTimeFence" yaml:"PlanningTimeFence,omitempty"`
	MRPPlanningCalendar                       null.String  `boil:"MRPPlanningCalendar" json:"MRPPlanningCalendar,omitempty" toml:"MRPPlanningCalendar" yaml:"MRPPlanningCalendar,omitempty"`
	SafetyStockQuantityInBaseUnit             null.Float32 `boil:"SafetyStockQuantityInBaseUnit" json:"SafetyStockQuantityInBaseUnit,omitempty" toml:"SafetyStockQuantityInBaseUnit" yaml:"SafetyStockQuantityInBaseUnit,omitempty"`
	SafetyDuration                            null.Int     `boil:"SafetyDuration" json:"SafetyDuration,omitempty" toml:"SafetyDuration" yaml:"SafetyDuration,omitempty"`
	MaximumStockQuantityInBaseUnit            null.Float32 `boil:"MaximumStockQuantityInBaseUnit" json:"MaximumStockQuantityInBaseUnit,omitempty" toml:"MaximumStockQuantityInBaseUnit" yaml:"MaximumStockQuantityInBaseUnit,omitempty"`
	MinumumDeliveryQuantityInBaseUnit         null.Float32 `boil:"MinumumDeliveryQuantityInBaseUnit" json:"MinumumDeliveryQuantityInBaseUnit,omitempty" toml:"MinumumDeliveryQuantityInBaseUnit" yaml:"MinumumDeliveryQuantityInBaseUnit,omitempty"`
	MinumumDeliveryLotSizeQuantityInBaseUnit  null.Float32 `boil:"MinumumDeliveryLotSizeQuantityInBaseUnit" json:"MinumumDeliveryLotSizeQuantityInBaseUnit,omitempty" toml:"MinumumDeliveryLotSizeQuantityInBaseUnit" yaml:"MinumumDeliveryLotSizeQuantityInBaseUnit,omitempty"`
	StandardDeliveryLotSizeQuantityInBaseUnit null.Float32 `boil:"StandardDeliveryLotSizeQuantityInBaseUnit" json:"StandardDeliveryLotSizeQuantityInBaseUnit,omitempty" toml:"StandardDeliveryLotSizeQuantityInBaseUnit" yaml:"StandardDeliveryLotSizeQuantityInBaseUnit,omitempty"`
	DeliveryLotSizeRoundingQuantityInBaseUnit null.Float32 `boil:"DeliveryLotSizeRoundingQuantityInBaseUnit" json:"DeliveryLotSizeRoundingQuantityInBaseUnit,omitempty" toml:"DeliveryLotSizeRoundingQuantityInBaseUnit" yaml:"DeliveryLotSizeRoundingQuantityInBaseUnit,omitempty"`
	MaximumDeliveryLotSizeQuantityInBaseUnit  null.Float32 `boil:"MaximumDeliveryLotSizeQuantityInBaseUnit" json:"MaximumDeliveryLotSizeQuantityInBaseUnit,omitempty" toml:"MaximumDeliveryLotSizeQuantityInBaseUnit" yaml:"MaximumDeliveryLotSizeQuantityInBaseUnit,omitempty"`
	MaximumDeliveryQuantityInBaseUnit         null.Float32 `boil:"MaximumDeliveryQuantityInBaseUnit" json:"MaximumDeliveryQuantityInBaseUnit,omitempty" toml:"MaximumDeliveryQuantityInBaseUnit" yaml:"MaximumDeliveryQuantityInBaseUnit,omitempty"`
	DeliveryLotSizeIsFixed                    null.Bool    `boil:"DeliveryLotSizeIsFixed" json:"DeliveryLotSizeIsFixed,omitempty" toml:"DeliveryLotSizeIsFixed" yaml:"DeliveryLotSizeIsFixed,omitempty"`
	StandardDeliveryDurationInDays            null.Int     `boil:"StandardDeliveryDurationInDays" json:"StandardDeliveryDurationInDays,omitempty" toml:"StandardDeliveryDurationInDays" yaml:"StandardDeliveryDurationInDays,omitempty"`
	IsAutoOrderCreationAllowed                null.Bool    `boil:"IsAutoOrderCreationAllowed" json:"IsAutoOrderCreationAllowed,omitempty" toml:"IsAutoOrderCreationAllowed" yaml:"IsAutoOrderCreationAllowed,omitempty"`
	IsOrderAcknowledgementRequired            null.Bool    `boil:"IsOrderAcknowledgementRequired" json:"IsOrderAcknowledgementRequired,omitempty" toml:"IsOrderAcknowledgementRequired" yaml:"IsOrderAcknowledgementRequired,omitempty"`
	CreationDate                              null.String  `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                            null.String  `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	IsMarkedForDeletion                       null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSupplyChainRelationshipDeliveryPlantRelProdR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSupplyChainRelationshipDeliveryPlantRelProdL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSupplyChainRelationshipDeliveryPlantRelProdColumns = struct {
	SupplyChainRelationshipID                 string
	SupplyChainRelationshipDeliveryID         string
	SupplyChainRelationshipDeliveryPlantID    string
	Buyer                                     string
	Seller                                    string
	DeliverToParty                            string
	DeliverFromParty                          string
	DeliverToPlant                            string
	DeliverFromPlant                          string
	Product                                   string
	DeliverToPlantStorageLocation             string
	DeliverFromPlantStorageLocation           string
	DeliveryUnit                              string
	QuantityPerPackage                        string
	MRPType                                   string
	MRPController                             string
	ReorderThresholdQuantity                  string
	PlanningTimeFence                         string
	MRPPlanningCalendar                       string
	SafetyStockQuantityInBaseUnit             string
	SafetyDuration                            string
	MaximumStockQuantityInBaseUnit            string
	MinumumDeliveryQuantityInBaseUnit         string
	MinumumDeliveryLotSizeQuantityInBaseUnit  string
	StandardDeliveryLotSizeQuantityInBaseUnit string
	DeliveryLotSizeRoundingQuantityInBaseUnit string
	MaximumDeliveryLotSizeQuantityInBaseUnit  string
	MaximumDeliveryQuantityInBaseUnit         string
	DeliveryLotSizeIsFixed                    string
	StandardDeliveryDurationInDays            string
	IsAutoOrderCreationAllowed                string
	IsOrderAcknowledgementRequired            string
	CreationDate                              string
	LastChangeDate                            string
	IsMarkedForDeletion                       string
}{
	SupplyChainRelationshipID:                 "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:         "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:    "SupplyChainRelationshipDeliveryPlantID",
	Buyer:                                     "Buyer",
	Seller:                                    "Seller",
	DeliverToParty:                            "DeliverToParty",
	DeliverFromParty:                          "DeliverFromParty",
	DeliverToPlant:                            "DeliverToPlant",
	DeliverFromPlant:                          "DeliverFromPlant",
	Product:                                   "Product",
	DeliverToPlantStorageLocation:             "DeliverToPlantStorageLocation",
	DeliverFromPlantStorageLocation:           "DeliverFromPlantStorageLocation",
	DeliveryUnit:                              "DeliveryUnit",
	QuantityPerPackage:                        "QuantityPerPackage",
	MRPType:                                   "MRPType",
	MRPController:                             "MRPController",
	ReorderThresholdQuantity:                  "ReorderThresholdQuantity",
	PlanningTimeFence:                         "PlanningTimeFence",
	MRPPlanningCalendar:                       "MRPPlanningCalendar",
	SafetyStockQuantityInBaseUnit:             "SafetyStockQuantityInBaseUnit",
	SafetyDuration:                            "SafetyDuration",
	MaximumStockQuantityInBaseUnit:            "MaximumStockQuantityInBaseUnit",
	MinumumDeliveryQuantityInBaseUnit:         "MinumumDeliveryQuantityInBaseUnit",
	MinumumDeliveryLotSizeQuantityInBaseUnit:  "MinumumDeliveryLotSizeQuantityInBaseUnit",
	StandardDeliveryLotSizeQuantityInBaseUnit: "StandardDeliveryLotSizeQuantityInBaseUnit",
	DeliveryLotSizeRoundingQuantityInBaseUnit: "DeliveryLotSizeRoundingQuantityInBaseUnit",
	MaximumDeliveryLotSizeQuantityInBaseUnit:  "MaximumDeliveryLotSizeQuantityInBaseUnit",
	MaximumDeliveryQuantityInBaseUnit:         "MaximumDeliveryQuantityInBaseUnit",
	DeliveryLotSizeIsFixed:                    "DeliveryLotSizeIsFixed",
	StandardDeliveryDurationInDays:            "StandardDeliveryDurationInDays",
	IsAutoOrderCreationAllowed:                "IsAutoOrderCreationAllowed",
	IsOrderAcknowledgementRequired:            "IsOrderAcknowledgementRequired",
	CreationDate:                              "CreationDate",
	LastChangeDate:                            "LastChangeDate",
	IsMarkedForDeletion:                       "IsMarkedForDeletion",
}

var DataPlatformSupplyChainRelationshipDeliveryPlantRelProdTableColumns = struct {
	SupplyChainRelationshipID                 string
	SupplyChainRelationshipDeliveryID         string
	SupplyChainRelationshipDeliveryPlantID    string
	Buyer                                     string
	Seller                                    string
	DeliverToParty                            string
	DeliverFromParty                          string
	DeliverToPlant                            string
	DeliverFromPlant                          string
	Product                                   string
	DeliverToPlantStorageLocation             string
	DeliverFromPlantStorageLocation           string
	DeliveryUnit                              string
	QuantityPerPackage                        string
	MRPType                                   string
	MRPController                             string
	ReorderThresholdQuantity                  string
	PlanningTimeFence                         string
	MRPPlanningCalendar                       string
	SafetyStockQuantityInBaseUnit             string
	SafetyDuration                            string
	MaximumStockQuantityInBaseUnit            string
	MinumumDeliveryQuantityInBaseUnit         string
	MinumumDeliveryLotSizeQuantityInBaseUnit  string
	StandardDeliveryLotSizeQuantityInBaseUnit string
	DeliveryLotSizeRoundingQuantityInBaseUnit string
	MaximumDeliveryLotSizeQuantityInBaseUnit  string
	MaximumDeliveryQuantityInBaseUnit         string
	DeliveryLotSizeIsFixed                    string
	StandardDeliveryDurationInDays            string
	IsAutoOrderCreationAllowed                string
	IsOrderAcknowledgementRequired            string
	CreationDate                              string
	LastChangeDate                            string
	IsMarkedForDeletion                       string
}{
	SupplyChainRelationshipID:                 "data_platform_supply_chain_relationship_delivery_plant_rel_prod.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:         "data_platform_supply_chain_relationship_delivery_plant_rel_prod.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:    "data_platform_supply_chain_relationship_delivery_plant_rel_prod.SupplyChainRelationshipDeliveryPlantID",
	Buyer:                                     "data_platform_supply_chain_relationship_delivery_plant_rel_prod.Buyer",
	Seller:                                    "data_platform_supply_chain_relationship_delivery_plant_rel_prod.Seller",
	DeliverToParty:                            "data_platform_supply_chain_relationship_delivery_plant_rel_prod.DeliverToParty",
	DeliverFromParty:                          "data_platform_supply_chain_relationship_delivery_plant_rel_prod.DeliverFromParty",
	DeliverToPlant:                            "data_platform_supply_chain_relationship_delivery_plant_rel_prod.DeliverToPlant",
	DeliverFromPlant:                          "data_platform_supply_chain_relationship_delivery_plant_rel_prod.DeliverFromPlant",
	Product:                                   "data_platform_supply_chain_relationship_delivery_plant_rel_prod.Product",
	DeliverToPlantStorageLocation:             "data_platform_supply_chain_relationship_delivery_plant_rel_prod.DeliverToPlantStorageLocation",
	DeliverFromPlantStorageLocation:           "data_platform_supply_chain_relationship_delivery_plant_rel_prod.DeliverFromPlantStorageLocation",
	DeliveryUnit:                              "data_platform_supply_chain_relationship_delivery_plant_rel_prod.DeliveryUnit",
	QuantityPerPackage:                        "data_platform_supply_chain_relationship_delivery_plant_rel_prod.QuantityPerPackage",
	MRPType:                                   "data_platform_supply_chain_relationship_delivery_plant_rel_prod.MRPType",
	MRPController:                             "data_platform_supply_chain_relationship_delivery_plant_rel_prod.MRPController",
	ReorderThresholdQuantity:                  "data_platform_supply_chain_relationship_delivery_plant_rel_prod.ReorderThresholdQuantity",
	PlanningTimeFence:                         "data_platform_supply_chain_relationship_delivery_plant_rel_prod.PlanningTimeFence",
	MRPPlanningCalendar:                       "data_platform_supply_chain_relationship_delivery_plant_rel_prod.MRPPlanningCalendar",
	SafetyStockQuantityInBaseUnit:             "data_platform_supply_chain_relationship_delivery_plant_rel_prod.SafetyStockQuantityInBaseUnit",
	SafetyDuration:                            "data_platform_supply_chain_relationship_delivery_plant_rel_prod.SafetyDuration",
	MaximumStockQuantityInBaseUnit:            "data_platform_supply_chain_relationship_delivery_plant_rel_prod.MaximumStockQuantityInBaseUnit",
	MinumumDeliveryQuantityInBaseUnit:         "data_platform_supply_chain_relationship_delivery_plant_rel_prod.MinumumDeliveryQuantityInBaseUnit",
	MinumumDeliveryLotSizeQuantityInBaseUnit:  "data_platform_supply_chain_relationship_delivery_plant_rel_prod.MinumumDeliveryLotSizeQuantityInBaseUnit",
	StandardDeliveryLotSizeQuantityInBaseUnit: "data_platform_supply_chain_relationship_delivery_plant_rel_prod.StandardDeliveryLotSizeQuantityInBaseUnit",
	DeliveryLotSizeRoundingQuantityInBaseUnit: "data_platform_supply_chain_relationship_delivery_plant_rel_prod.DeliveryLotSizeRoundingQuantityInBaseUnit",
	MaximumDeliveryLotSizeQuantityInBaseUnit:  "data_platform_supply_chain_relationship_delivery_plant_rel_prod.MaximumDeliveryLotSizeQuantityInBaseUnit",
	MaximumDeliveryQuantityInBaseUnit:         "data_platform_supply_chain_relationship_delivery_plant_rel_prod.MaximumDeliveryQuantityInBaseUnit",
	DeliveryLotSizeIsFixed:                    "data_platform_supply_chain_relationship_delivery_plant_rel_prod.DeliveryLotSizeIsFixed",
	StandardDeliveryDurationInDays:            "data_platform_supply_chain_relationship_delivery_plant_rel_prod.StandardDeliveryDurationInDays",
	IsAutoOrderCreationAllowed:                "data_platform_supply_chain_relationship_delivery_plant_rel_prod.IsAutoOrderCreationAllowed",
	IsOrderAcknowledgementRequired:            "data_platform_supply_chain_relationship_delivery_plant_rel_prod.IsOrderAcknowledgementRequired",
	CreationDate:                              "data_platform_supply_chain_relationship_delivery_plant_rel_prod.CreationDate",
	LastChangeDate:                            "data_platform_supply_chain_relationship_delivery_plant_rel_prod.LastChangeDate",
	IsMarkedForDeletion:                       "data_platform_supply_chain_relationship_delivery_plant_rel_prod.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSupplyChainRelationshipDeliveryPlantRelProdWhere = struct {
	SupplyChainRelationshipID                 whereHelperint
	SupplyChainRelationshipDeliveryID         whereHelperint
	SupplyChainRelationshipDeliveryPlantID    whereHelperint
	Buyer                                     whereHelperint
	Seller                                    whereHelperint
	DeliverToParty                            whereHelperint
	DeliverFromParty                          whereHelperint
	DeliverToPlant                            whereHelperstring
	DeliverFromPlant                          whereHelperstring
	Product                                   whereHelperstring
	DeliverToPlantStorageLocation             whereHelperstring
	DeliverFromPlantStorageLocation           whereHelperstring
	DeliveryUnit                              whereHelperstring
	QuantityPerPackage                        whereHelpernull_Float32
	MRPType                                   whereHelpernull_String
	MRPController                             whereHelpernull_String
	ReorderThresholdQuantity                  whereHelpernull_Float32
	PlanningTimeFence                         whereHelpernull_Int
	MRPPlanningCalendar                       whereHelpernull_String
	SafetyStockQuantityInBaseUnit             whereHelpernull_Float32
	SafetyDuration                            whereHelpernull_Int
	MaximumStockQuantityInBaseUnit            whereHelpernull_Float32
	MinumumDeliveryQuantityInBaseUnit         whereHelpernull_Float32
	MinumumDeliveryLotSizeQuantityInBaseUnit  whereHelpernull_Float32
	StandardDeliveryLotSizeQuantityInBaseUnit whereHelpernull_Float32
	DeliveryLotSizeRoundingQuantityInBaseUnit whereHelpernull_Float32
	MaximumDeliveryLotSizeQuantityInBaseUnit  whereHelpernull_Float32
	MaximumDeliveryQuantityInBaseUnit         whereHelpernull_Float32
	DeliveryLotSizeIsFixed                    whereHelpernull_Bool
	StandardDeliveryDurationInDays            whereHelpernull_Int
	IsAutoOrderCreationAllowed                whereHelpernull_Bool
	IsOrderAcknowledgementRequired            whereHelpernull_Bool
	CreationDate                              whereHelpernull_String
	LastChangeDate                            whereHelpernull_String
	IsMarkedForDeletion                       whereHelpernull_Bool
}{
	SupplyChainRelationshipID:                 whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:         whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:    whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`SupplyChainRelationshipDeliveryPlantID`"},
	Buyer:                                     whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`Buyer`"},
	Seller:                                    whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`Seller`"},
	DeliverToParty:                            whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`DeliverToParty`"},
	DeliverFromParty:                          whereHelperint{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`DeliverFromParty`"},
	DeliverToPlant:                            whereHelperstring{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`DeliverToPlant`"},
	DeliverFromPlant:                          whereHelperstring{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`DeliverFromPlant`"},
	Product:                                   whereHelperstring{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`Product`"},
	DeliverToPlantStorageLocation:             whereHelperstring{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`DeliverToPlantStorageLocation`"},
	DeliverFromPlantStorageLocation:           whereHelperstring{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`DeliverFromPlantStorageLocation`"},
	DeliveryUnit:                              whereHelperstring{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`DeliveryUnit`"},
	QuantityPerPackage:                        whereHelpernull_Float32{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`QuantityPerPackage`"},
	MRPType:                                   whereHelpernull_String{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`MRPType`"},
	MRPController:                             whereHelpernull_String{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`MRPController`"},
	ReorderThresholdQuantity:                  whereHelpernull_Float32{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`ReorderThresholdQuantity`"},
	PlanningTimeFence:                         whereHelpernull_Int{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`PlanningTimeFence`"},
	MRPPlanningCalendar:                       whereHelpernull_String{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`MRPPlanningCalendar`"},
	SafetyStockQuantityInBaseUnit:             whereHelpernull_Float32{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`SafetyStockQuantityInBaseUnit`"},
	SafetyDuration:                            whereHelpernull_Int{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`SafetyDuration`"},
	MaximumStockQuantityInBaseUnit:            whereHelpernull_Float32{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`MaximumStockQuantityInBaseUnit`"},
	MinumumDeliveryQuantityInBaseUnit:         whereHelpernull_Float32{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`MinumumDeliveryQuantityInBaseUnit`"},
	MinumumDeliveryLotSizeQuantityInBaseUnit:  whereHelpernull_Float32{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`MinumumDeliveryLotSizeQuantityInBaseUnit`"},
	StandardDeliveryLotSizeQuantityInBaseUnit: whereHelpernull_Float32{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`StandardDeliveryLotSizeQuantityInBaseUnit`"},
	DeliveryLotSizeRoundingQuantityInBaseUnit: whereHelpernull_Float32{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`DeliveryLotSizeRoundingQuantityInBaseUnit`"},
	MaximumDeliveryLotSizeQuantityInBaseUnit:  whereHelpernull_Float32{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`MaximumDeliveryLotSizeQuantityInBaseUnit`"},
	MaximumDeliveryQuantityInBaseUnit:         whereHelpernull_Float32{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`MaximumDeliveryQuantityInBaseUnit`"},
	DeliveryLotSizeIsFixed:                    whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`DeliveryLotSizeIsFixed`"},
	StandardDeliveryDurationInDays:            whereHelpernull_Int{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`StandardDeliveryDurationInDays`"},
	IsAutoOrderCreationAllowed:                whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`IsAutoOrderCreationAllowed`"},
	IsOrderAcknowledgementRequired:            whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`IsOrderAcknowledgementRequired`"},
	CreationDate:                              whereHelpernull_String{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`CreationDate`"},
	LastChangeDate:                            whereHelpernull_String{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`LastChangeDate`"},
	IsMarkedForDeletion:                       whereHelpernull_Bool{field: "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.`IsMarkedForDeletion`"},
}

// DataPlatformSupplyChainRelationshipDeliveryPlantRelProdRels is where relationship names are stored.
var DataPlatformSupplyChainRelationshipDeliveryPlantRelProdRels = struct {
}{}

// dataPlatformSupplyChainRelationshipDeliveryPlantRelProdR is where relationships are stored.
type dataPlatformSupplyChainRelationshipDeliveryPlantRelProdR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformSupplyChainRelationshipDeliveryPlantRelProdR) NewStruct() *dataPlatformSupplyChainRelationshipDeliveryPlantRelProdR {
	return &dataPlatformSupplyChainRelationshipDeliveryPlantRelProdR{}
}

// dataPlatformSupplyChainRelationshipDeliveryPlantRelProdL is where Load methods for each relationship are stored.
type dataPlatformSupplyChainRelationshipDeliveryPlantRelProdL struct{}

var (
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdAllColumns            = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "Product", "DeliverToPlantStorageLocation", "DeliverFromPlantStorageLocation", "DeliveryUnit", "QuantityPerPackage", "MRPType", "MRPController", "ReorderThresholdQuantity", "PlanningTimeFence", "MRPPlanningCalendar", "SafetyStockQuantityInBaseUnit", "SafetyDuration", "MaximumStockQuantityInBaseUnit", "MinumumDeliveryQuantityInBaseUnit", "MinumumDeliveryLotSizeQuantityInBaseUnit", "StandardDeliveryLotSizeQuantityInBaseUnit", "DeliveryLotSizeRoundingQuantityInBaseUnit", "MaximumDeliveryLotSizeQuantityInBaseUnit", "MaximumDeliveryQuantityInBaseUnit", "DeliveryLotSizeIsFixed", "StandardDeliveryDurationInDays", "IsAutoOrderCreationAllowed", "IsOrderAcknowledgementRequired", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "Product", "DeliverToPlantStorageLocation", "DeliverFromPlantStorageLocation", "DeliveryUnit", "QuantityPerPackage", "MRPType", "MRPController", "ReorderThresholdQuantity", "PlanningTimeFence", "MRPPlanningCalendar", "SafetyStockQuantityInBaseUnit", "SafetyDuration", "MaximumStockQuantityInBaseUnit", "MinumumDeliveryQuantityInBaseUnit", "MinumumDeliveryLotSizeQuantityInBaseUnit", "StandardDeliveryLotSizeQuantityInBaseUnit", "DeliveryLotSizeRoundingQuantityInBaseUnit", "MaximumDeliveryLotSizeQuantityInBaseUnit", "MaximumDeliveryQuantityInBaseUnit", "DeliveryLotSizeIsFixed", "StandardDeliveryDurationInDays", "IsAutoOrderCreationAllowed", "IsOrderAcknowledgementRequired", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdColumnsWithDefault    = []string{}
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "Buyer", "Seller", "DeliverToParty", "DeliverFromParty", "DeliverToPlant", "DeliverFromPlant", "Product"}
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdGeneratedColumns      = []string{}
)

type (
	// DataPlatformSupplyChainRelationshipDeliveryPlantRelProdSlice is an alias for a slice of pointers to DataPlatformSupplyChainRelationshipDeliveryPlantRelProd.
	// This should almost always be used instead of []DataPlatformSupplyChainRelationshipDeliveryPlantRelProd.
	DataPlatformSupplyChainRelationshipDeliveryPlantRelProdSlice []*DataPlatformSupplyChainRelationshipDeliveryPlantRelProd

	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdType                 = reflect.TypeOf(&DataPlatformSupplyChainRelationshipDeliveryPlantRelProd{})
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdMapping              = queries.MakeStructMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelProdType)
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelProdType, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdMapping, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyColumns)
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdInsertCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdInsertCache          = make(map[string]insertCache)
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpdateCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpdateCache          = make(map[string]updateCache)
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpsertCacheMut       sync.RWMutex
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSupplyChainRelationshipDeliveryPlantRelProd record from the query.
func (q dataPlatformSupplyChainRelationshipDeliveryPlantRelProdQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSupplyChainRelationshipDeliveryPlantRelProd, error) {
	o := &DataPlatformSupplyChainRelationshipDeliveryPlantRelProd{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_supply_chain_relationship_delivery_plant_rel_prod")
	}

	return o, nil
}

// All returns all DataPlatformSupplyChainRelationshipDeliveryPlantRelProd records from the query.
func (q dataPlatformSupplyChainRelationshipDeliveryPlantRelProdQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSupplyChainRelationshipDeliveryPlantRelProdSlice, error) {
	var o []*DataPlatformSupplyChainRelationshipDeliveryPlantRelProd

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSupplyChainRelationshipDeliveryPlantRelProd slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSupplyChainRelationshipDeliveryPlantRelProd records in the query.
func (q dataPlatformSupplyChainRelationshipDeliveryPlantRelProdQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_supply_chain_relationship_delivery_plant_rel_prod rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSupplyChainRelationshipDeliveryPlantRelProdQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_supply_chain_relationship_delivery_plant_rel_prod exists")
	}

	return count > 0, nil
}

// DataPlatformSupplyChainRelationshipDeliveryPlantRelProds retrieves all the records using an executor.
func DataPlatformSupplyChainRelationshipDeliveryPlantRelProds(mods ...qm.QueryMod) dataPlatformSupplyChainRelationshipDeliveryPlantRelProdQuery {
	mods = append(mods, qm.From("`data_platform_supply_chain_relationship_delivery_plant_rel_prod`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_supply_chain_relationship_delivery_plant_rel_prod`.*"})
	}

	return dataPlatformSupplyChainRelationshipDeliveryPlantRelProdQuery{q}
}

// FindDataPlatformSupplyChainRelationshipDeliveryPlantRelProd retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSupplyChainRelationshipDeliveryPlantRelProd(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, supplyChainRelationshipDeliveryPlantID int, buyer int, seller int, deliverToParty int, deliverFromParty int, deliverToPlant string, deliverFromPlant string, product string, selectCols ...string) (*DataPlatformSupplyChainRelationshipDeliveryPlantRelProd, error) {
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdObj := &DataPlatformSupplyChainRelationshipDeliveryPlantRelProd{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_supply_chain_relationship_delivery_plant_rel_prod` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? AND `Product`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant, product)

	err := q.Bind(ctx, exec, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_supply_chain_relationship_delivery_plant_rel_prod")
	}

	return dataPlatformSupplyChainRelationshipDeliveryPlantRelProdObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelProd) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_supply_chain_relationship_delivery_plant_rel_prod provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSupplyChainRelationshipDeliveryPlantRelProdColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdInsertCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipDeliveryPlantRelProdInsertCache[key]
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSupplyChainRelationshipDeliveryPlantRelProdAllColumns,
			dataPlatformSupplyChainRelationshipDeliveryPlantRelProdColumnsWithDefault,
			dataPlatformSupplyChainRelationshipDeliveryPlantRelProdColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelProdType, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelProdType, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_supply_chain_relationship_delivery_plant_rel_prod` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_supply_chain_relationship_delivery_plant_rel_prod` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_supply_chain_relationship_delivery_plant_rel_prod` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_supply_chain_relationship_delivery_plant_rel_prod")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipDeliveryID,
		o.SupplyChainRelationshipDeliveryPlantID,
		o.Buyer,
		o.Seller,
		o.DeliverToParty,
		o.DeliverFromParty,
		o.DeliverToPlant,
		o.DeliverFromPlant,
		o.Product,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_supply_chain_relationship_delivery_plant_rel_prod")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSupplyChainRelationshipDeliveryPlantRelProdInsertCacheMut.Lock()
		dataPlatformSupplyChainRelationshipDeliveryPlantRelProdInsertCache[key] = cache
		dataPlatformSupplyChainRelationshipDeliveryPlantRelProdInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSupplyChainRelationshipDeliveryPlantRelProd.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelProd) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpdateCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpdateCache[key]
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSupplyChainRelationshipDeliveryPlantRelProdAllColumns,
			dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_supply_chain_relationship_delivery_plant_rel_prod, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_supply_chain_relationship_delivery_plant_rel_prod` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelProdType, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdMapping, append(wl, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_supply_chain_relationship_delivery_plant_rel_prod row")
	}

	if !cached {
		dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpdateCacheMut.Lock()
		dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpdateCache[key] = cache
		dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSupplyChainRelationshipDeliveryPlantRelProdQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_supply_chain_relationship_delivery_plant_rel_prod")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSupplyChainRelationshipDeliveryPlantRelProdSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_supply_chain_relationship_delivery_plant_rel_prod` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSupplyChainRelationshipDeliveryPlantRelProd slice")
	}

	return nil
}

var mySQLDataPlatformSupplyChainRelationshipDeliveryPlantRelProdUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelProd) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_supply_chain_relationship_delivery_plant_rel_prod provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSupplyChainRelationshipDeliveryPlantRelProdColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSupplyChainRelationshipDeliveryPlantRelProdUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpsertCacheMut.RLock()
	cache, cached := dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpsertCache[key]
	dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSupplyChainRelationshipDeliveryPlantRelProdAllColumns,
			dataPlatformSupplyChainRelationshipDeliveryPlantRelProdColumnsWithDefault,
			dataPlatformSupplyChainRelationshipDeliveryPlantRelProdColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSupplyChainRelationshipDeliveryPlantRelProdAllColumns,
			dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_supply_chain_relationship_delivery_plant_rel_prod, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_supply_chain_relationship_delivery_plant_rel_prod`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_supply_chain_relationship_delivery_plant_rel_prod` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelProdType, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelProdType, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_supply_chain_relationship_delivery_plant_rel_prod")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSupplyChainRelationshipDeliveryPlantRelProdType, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_supply_chain_relationship_delivery_plant_rel_prod")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_supply_chain_relationship_delivery_plant_rel_prod")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpsertCacheMut.Lock()
		dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpsertCache[key] = cache
		dataPlatformSupplyChainRelationshipDeliveryPlantRelProdUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSupplyChainRelationshipDeliveryPlantRelProd record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelProd) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSupplyChainRelationshipDeliveryPlantRelProd provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_supply_chain_relationship_delivery_plant_rel_prod` WHERE `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? AND `Product`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_supply_chain_relationship_delivery_plant_rel_prod")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSupplyChainRelationshipDeliveryPlantRelProdQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSupplyChainRelationshipDeliveryPlantRelProdQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_supply_chain_relationship_delivery_plant_rel_prod")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSupplyChainRelationshipDeliveryPlantRelProdSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_supply_chain_relationship_delivery_plant_rel_prod` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSupplyChainRelationshipDeliveryPlantRelProd slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelProd) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSupplyChainRelationshipDeliveryPlantRelProd(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.Product)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelProdSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSupplyChainRelationshipDeliveryPlantRelProdSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_supply_chain_relationship_delivery_plant_rel_prod`.* FROM `data_platform_supply_chain_relationship_delivery_plant_rel_prod` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSupplyChainRelationshipDeliveryPlantRelProdPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSupplyChainRelationshipDeliveryPlantRelProdSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSupplyChainRelationshipDeliveryPlantRelProdExists checks if the DataPlatformSupplyChainRelationshipDeliveryPlantRelProd row exists.
func DataPlatformSupplyChainRelationshipDeliveryPlantRelProdExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipDeliveryID int, supplyChainRelationshipDeliveryPlantID int, buyer int, seller int, deliverToParty int, deliverFromParty int, deliverToPlant string, deliverFromPlant string, product string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_supply_chain_relationship_delivery_plant_rel_prod` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipDeliveryID`=? AND `SupplyChainRelationshipDeliveryPlantID`=? AND `Buyer`=? AND `Seller`=? AND `DeliverToParty`=? AND `DeliverFromParty`=? AND `DeliverToPlant`=? AND `DeliverFromPlant`=? AND `Product`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant, product)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, supplyChainRelationshipDeliveryID, supplyChainRelationshipDeliveryPlantID, buyer, seller, deliverToParty, deliverFromParty, deliverToPlant, deliverFromPlant, product)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_supply_chain_relationship_delivery_plant_rel_prod exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSupplyChainRelationshipDeliveryPlantRelProd row exists.
func (o *DataPlatformSupplyChainRelationshipDeliveryPlantRelProd) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSupplyChainRelationshipDeliveryPlantRelProdExists(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipDeliveryID, o.SupplyChainRelationshipDeliveryPlantID, o.Buyer, o.Seller, o.DeliverToParty, o.DeliverFromParty, o.DeliverToPlant, o.DeliverFromPlant, o.Product)
}
