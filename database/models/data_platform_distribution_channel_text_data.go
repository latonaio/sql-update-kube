// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformDistributionChannelTextDatum is an object representing the database table.
type DataPlatformDistributionChannelTextDatum struct {
	DistributionChannel     string      `boil:"DistributionChannel" json:"DistributionChannel" toml:"DistributionChannel" yaml:"DistributionChannel"`
	Language                string      `boil:"Language" json:"Language" toml:"Language" yaml:"Language"`
	DistributionChannelName null.String `boil:"DistributionChannelName" json:"DistributionChannelName,omitempty" toml:"DistributionChannelName" yaml:"DistributionChannelName,omitempty"`

	R *dataPlatformDistributionChannelTextDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformDistributionChannelTextDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformDistributionChannelTextDatumColumns = struct {
	DistributionChannel     string
	Language                string
	DistributionChannelName string
}{
	DistributionChannel:     "DistributionChannel",
	Language:                "Language",
	DistributionChannelName: "DistributionChannelName",
}

var DataPlatformDistributionChannelTextDatumTableColumns = struct {
	DistributionChannel     string
	Language                string
	DistributionChannelName string
}{
	DistributionChannel:     "data_platform_distribution_channel_text_data.DistributionChannel",
	Language:                "data_platform_distribution_channel_text_data.Language",
	DistributionChannelName: "data_platform_distribution_channel_text_data.DistributionChannelName",
}

// Generated where

var DataPlatformDistributionChannelTextDatumWhere = struct {
	DistributionChannel     whereHelperstring
	Language                whereHelperstring
	DistributionChannelName whereHelpernull_String
}{
	DistributionChannel:     whereHelperstring{field: "`data_platform_distribution_channel_text_data`.`DistributionChannel`"},
	Language:                whereHelperstring{field: "`data_platform_distribution_channel_text_data`.`Language`"},
	DistributionChannelName: whereHelpernull_String{field: "`data_platform_distribution_channel_text_data`.`DistributionChannelName`"},
}

// DataPlatformDistributionChannelTextDatumRels is where relationship names are stored.
var DataPlatformDistributionChannelTextDatumRels = struct {
	DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum string
}{
	DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum: "DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum",
}

// dataPlatformDistributionChannelTextDatumR is where relationships are stored.
type dataPlatformDistributionChannelTextDatumR struct {
	DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum *DataPlatformDistributionChannelDistributionChannelDatum `boil:"DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum" json:"DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum" toml:"DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum" yaml:"DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformDistributionChannelTextDatumR) NewStruct() *dataPlatformDistributionChannelTextDatumR {
	return &dataPlatformDistributionChannelTextDatumR{}
}

func (r *dataPlatformDistributionChannelTextDatumR) GetDistributionChannelDataPlatformDistributionChannelDistributionChannelDatum() *DataPlatformDistributionChannelDistributionChannelDatum {
	if r == nil {
		return nil
	}
	return r.DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum
}

// dataPlatformDistributionChannelTextDatumL is where Load methods for each relationship are stored.
type dataPlatformDistributionChannelTextDatumL struct{}

var (
	dataPlatformDistributionChannelTextDatumAllColumns            = []string{"DistributionChannel", "Language", "DistributionChannelName"}
	dataPlatformDistributionChannelTextDatumColumnsWithoutDefault = []string{"DistributionChannel", "Language", "DistributionChannelName"}
	dataPlatformDistributionChannelTextDatumColumnsWithDefault    = []string{}
	dataPlatformDistributionChannelTextDatumPrimaryKeyColumns     = []string{"DistributionChannel", "Language"}
	dataPlatformDistributionChannelTextDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformDistributionChannelTextDatumSlice is an alias for a slice of pointers to DataPlatformDistributionChannelTextDatum.
	// This should almost always be used instead of []DataPlatformDistributionChannelTextDatum.
	DataPlatformDistributionChannelTextDatumSlice []*DataPlatformDistributionChannelTextDatum
	// DataPlatformDistributionChannelTextDatumHook is the signature for custom DataPlatformDistributionChannelTextDatum hook methods
	DataPlatformDistributionChannelTextDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformDistributionChannelTextDatum) error

	dataPlatformDistributionChannelTextDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformDistributionChannelTextDatumType                 = reflect.TypeOf(&DataPlatformDistributionChannelTextDatum{})
	dataPlatformDistributionChannelTextDatumMapping              = queries.MakeStructMapping(dataPlatformDistributionChannelTextDatumType)
	dataPlatformDistributionChannelTextDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformDistributionChannelTextDatumType, dataPlatformDistributionChannelTextDatumMapping, dataPlatformDistributionChannelTextDatumPrimaryKeyColumns)
	dataPlatformDistributionChannelTextDatumInsertCacheMut       sync.RWMutex
	dataPlatformDistributionChannelTextDatumInsertCache          = make(map[string]insertCache)
	dataPlatformDistributionChannelTextDatumUpdateCacheMut       sync.RWMutex
	dataPlatformDistributionChannelTextDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformDistributionChannelTextDatumUpsertCacheMut       sync.RWMutex
	dataPlatformDistributionChannelTextDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformDistributionChannelTextDatumAfterSelectHooks []DataPlatformDistributionChannelTextDatumHook

var dataPlatformDistributionChannelTextDatumBeforeInsertHooks []DataPlatformDistributionChannelTextDatumHook
var dataPlatformDistributionChannelTextDatumAfterInsertHooks []DataPlatformDistributionChannelTextDatumHook

var dataPlatformDistributionChannelTextDatumBeforeUpdateHooks []DataPlatformDistributionChannelTextDatumHook
var dataPlatformDistributionChannelTextDatumAfterUpdateHooks []DataPlatformDistributionChannelTextDatumHook

var dataPlatformDistributionChannelTextDatumBeforeDeleteHooks []DataPlatformDistributionChannelTextDatumHook
var dataPlatformDistributionChannelTextDatumAfterDeleteHooks []DataPlatformDistributionChannelTextDatumHook

var dataPlatformDistributionChannelTextDatumBeforeUpsertHooks []DataPlatformDistributionChannelTextDatumHook
var dataPlatformDistributionChannelTextDatumAfterUpsertHooks []DataPlatformDistributionChannelTextDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformDistributionChannelTextDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistributionChannelTextDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformDistributionChannelTextDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistributionChannelTextDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformDistributionChannelTextDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistributionChannelTextDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformDistributionChannelTextDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistributionChannelTextDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformDistributionChannelTextDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistributionChannelTextDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformDistributionChannelTextDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistributionChannelTextDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformDistributionChannelTextDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistributionChannelTextDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformDistributionChannelTextDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistributionChannelTextDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformDistributionChannelTextDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformDistributionChannelTextDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformDistributionChannelTextDatumHook registers your hook function for all future operations.
func AddDataPlatformDistributionChannelTextDatumHook(hookPoint boil.HookPoint, dataPlatformDistributionChannelTextDatumHook DataPlatformDistributionChannelTextDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformDistributionChannelTextDatumAfterSelectHooks = append(dataPlatformDistributionChannelTextDatumAfterSelectHooks, dataPlatformDistributionChannelTextDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformDistributionChannelTextDatumBeforeInsertHooks = append(dataPlatformDistributionChannelTextDatumBeforeInsertHooks, dataPlatformDistributionChannelTextDatumHook)
	case boil.AfterInsertHook:
		dataPlatformDistributionChannelTextDatumAfterInsertHooks = append(dataPlatformDistributionChannelTextDatumAfterInsertHooks, dataPlatformDistributionChannelTextDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformDistributionChannelTextDatumBeforeUpdateHooks = append(dataPlatformDistributionChannelTextDatumBeforeUpdateHooks, dataPlatformDistributionChannelTextDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformDistributionChannelTextDatumAfterUpdateHooks = append(dataPlatformDistributionChannelTextDatumAfterUpdateHooks, dataPlatformDistributionChannelTextDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformDistributionChannelTextDatumBeforeDeleteHooks = append(dataPlatformDistributionChannelTextDatumBeforeDeleteHooks, dataPlatformDistributionChannelTextDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformDistributionChannelTextDatumAfterDeleteHooks = append(dataPlatformDistributionChannelTextDatumAfterDeleteHooks, dataPlatformDistributionChannelTextDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformDistributionChannelTextDatumBeforeUpsertHooks = append(dataPlatformDistributionChannelTextDatumBeforeUpsertHooks, dataPlatformDistributionChannelTextDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformDistributionChannelTextDatumAfterUpsertHooks = append(dataPlatformDistributionChannelTextDatumAfterUpsertHooks, dataPlatformDistributionChannelTextDatumHook)
	}
}

// One returns a single dataPlatformDistributionChannelTextDatum record from the query.
func (q dataPlatformDistributionChannelTextDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformDistributionChannelTextDatum, error) {
	o := &DataPlatformDistributionChannelTextDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_distribution_channel_text_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformDistributionChannelTextDatum records from the query.
func (q dataPlatformDistributionChannelTextDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformDistributionChannelTextDatumSlice, error) {
	var o []*DataPlatformDistributionChannelTextDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformDistributionChannelTextDatum slice")
	}

	if len(dataPlatformDistributionChannelTextDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformDistributionChannelTextDatum records in the query.
func (q dataPlatformDistributionChannelTextDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_distribution_channel_text_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformDistributionChannelTextDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_distribution_channel_text_data exists")
	}

	return count > 0, nil
}

// DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum pointed to by the foreign key.
func (o *DataPlatformDistributionChannelTextDatum) DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum(mods ...qm.QueryMod) dataPlatformDistributionChannelDistributionChannelDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`DistributionChannel` = ?", o.DistributionChannel),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformDistributionChannelDistributionChannelData(queryMods...)
}

// LoadDistributionChannelDataPlatformDistributionChannelDistributionChannelDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformDistributionChannelTextDatumL) LoadDistributionChannelDataPlatformDistributionChannelDistributionChannelDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDistributionChannelTextDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDistributionChannelTextDatum
	var object *DataPlatformDistributionChannelTextDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDistributionChannelTextDatum.(*DataPlatformDistributionChannelTextDatum)
		if !ok {
			object = new(DataPlatformDistributionChannelTextDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDistributionChannelTextDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDistributionChannelTextDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDistributionChannelTextDatum.(*[]*DataPlatformDistributionChannelTextDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDistributionChannelTextDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDistributionChannelTextDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDistributionChannelTextDatumR{}
		}
		args = append(args, object.DistributionChannel)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDistributionChannelTextDatumR{}
			}

			for _, a := range args {
				if a == obj.DistributionChannel {
					continue Outer
				}
			}

			args = append(args, obj.DistributionChannel)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_distribution_channel_distribution_channel_data`),
		qm.WhereIn(`data_platform_distribution_channel_distribution_channel_data.DistributionChannel in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformDistributionChannelDistributionChannelDatum")
	}

	var resultSlice []*DataPlatformDistributionChannelDistributionChannelDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformDistributionChannelDistributionChannelDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_distribution_channel_distribution_channel_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_distribution_channel_distribution_channel_data")
	}

	if len(dataPlatformDistributionChannelDistributionChannelDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformDistributionChannelDistributionChannelDatumR{}
		}
		foreign.R.DistributionChannelDataPlatformDistributionChannelTextData = append(foreign.R.DistributionChannelDataPlatformDistributionChannelTextData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DistributionChannel == foreign.DistributionChannel {
				local.R.DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformDistributionChannelDistributionChannelDatumR{}
				}
				foreign.R.DistributionChannelDataPlatformDistributionChannelTextData = append(foreign.R.DistributionChannelDataPlatformDistributionChannelTextData, local)
				break
			}
		}
	}

	return nil
}

// SetDistributionChannelDataPlatformDistributionChannelDistributionChannelDatum of the dataPlatformDistributionChannelTextDatum to the related item.
// Sets o.R.DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum to related.
// Adds o to related.R.DistributionChannelDataPlatformDistributionChannelTextData.
func (o *DataPlatformDistributionChannelTextDatum) SetDistributionChannelDataPlatformDistributionChannelDistributionChannelDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformDistributionChannelDistributionChannelDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_distribution_channel_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DistributionChannel"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformDistributionChannelTextDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.DistributionChannel, o.DistributionChannel, o.Language}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DistributionChannel = related.DistributionChannel
	if o.R == nil {
		o.R = &dataPlatformDistributionChannelTextDatumR{
			DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum: related,
		}
	} else {
		o.R.DistributionChannelDataPlatformDistributionChannelDistributionChannelDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformDistributionChannelDistributionChannelDatumR{
			DistributionChannelDataPlatformDistributionChannelTextData: DataPlatformDistributionChannelTextDatumSlice{o},
		}
	} else {
		related.R.DistributionChannelDataPlatformDistributionChannelTextData = append(related.R.DistributionChannelDataPlatformDistributionChannelTextData, o)
	}

	return nil
}

// DataPlatformDistributionChannelTextData retrieves all the records using an executor.
func DataPlatformDistributionChannelTextData(mods ...qm.QueryMod) dataPlatformDistributionChannelTextDatumQuery {
	mods = append(mods, qm.From("`data_platform_distribution_channel_text_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_distribution_channel_text_data`.*"})
	}

	return dataPlatformDistributionChannelTextDatumQuery{q}
}

// FindDataPlatformDistributionChannelTextDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformDistributionChannelTextDatum(ctx context.Context, exec boil.ContextExecutor, distributionChannel string, language string, selectCols ...string) (*DataPlatformDistributionChannelTextDatum, error) {
	dataPlatformDistributionChannelTextDatumObj := &DataPlatformDistributionChannelTextDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_distribution_channel_text_data` where `DistributionChannel`=? AND `Language`=?", sel,
	)

	q := queries.Raw(query, distributionChannel, language)

	err := q.Bind(ctx, exec, dataPlatformDistributionChannelTextDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_distribution_channel_text_data")
	}

	if err = dataPlatformDistributionChannelTextDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformDistributionChannelTextDatumObj, err
	}

	return dataPlatformDistributionChannelTextDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformDistributionChannelTextDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_distribution_channel_text_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDistributionChannelTextDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformDistributionChannelTextDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformDistributionChannelTextDatumInsertCache[key]
	dataPlatformDistributionChannelTextDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformDistributionChannelTextDatumAllColumns,
			dataPlatformDistributionChannelTextDatumColumnsWithDefault,
			dataPlatformDistributionChannelTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDistributionChannelTextDatumType, dataPlatformDistributionChannelTextDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformDistributionChannelTextDatumType, dataPlatformDistributionChannelTextDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_distribution_channel_text_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_distribution_channel_text_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_distribution_channel_text_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformDistributionChannelTextDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_distribution_channel_text_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DistributionChannel,
		o.Language,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_distribution_channel_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDistributionChannelTextDatumInsertCacheMut.Lock()
		dataPlatformDistributionChannelTextDatumInsertCache[key] = cache
		dataPlatformDistributionChannelTextDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformDistributionChannelTextDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformDistributionChannelTextDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformDistributionChannelTextDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformDistributionChannelTextDatumUpdateCache[key]
	dataPlatformDistributionChannelTextDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformDistributionChannelTextDatumAllColumns,
			dataPlatformDistributionChannelTextDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_distribution_channel_text_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_distribution_channel_text_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformDistributionChannelTextDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformDistributionChannelTextDatumType, dataPlatformDistributionChannelTextDatumMapping, append(wl, dataPlatformDistributionChannelTextDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_distribution_channel_text_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_distribution_channel_text_data")
	}

	if !cached {
		dataPlatformDistributionChannelTextDatumUpdateCacheMut.Lock()
		dataPlatformDistributionChannelTextDatumUpdateCache[key] = cache
		dataPlatformDistributionChannelTextDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformDistributionChannelTextDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_distribution_channel_text_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_distribution_channel_text_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformDistributionChannelTextDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDistributionChannelTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_distribution_channel_text_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDistributionChannelTextDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformDistributionChannelTextDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformDistributionChannelTextDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformDistributionChannelTextDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformDistributionChannelTextDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_distribution_channel_text_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDistributionChannelTextDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformDistributionChannelTextDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformDistributionChannelTextDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformDistributionChannelTextDatumUpsertCache[key]
	dataPlatformDistributionChannelTextDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformDistributionChannelTextDatumAllColumns,
			dataPlatformDistributionChannelTextDatumColumnsWithDefault,
			dataPlatformDistributionChannelTextDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformDistributionChannelTextDatumAllColumns,
			dataPlatformDistributionChannelTextDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_distribution_channel_text_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_distribution_channel_text_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_distribution_channel_text_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDistributionChannelTextDatumType, dataPlatformDistributionChannelTextDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformDistributionChannelTextDatumType, dataPlatformDistributionChannelTextDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_distribution_channel_text_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformDistributionChannelTextDatumType, dataPlatformDistributionChannelTextDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_distribution_channel_text_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_distribution_channel_text_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDistributionChannelTextDatumUpsertCacheMut.Lock()
		dataPlatformDistributionChannelTextDatumUpsertCache[key] = cache
		dataPlatformDistributionChannelTextDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformDistributionChannelTextDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformDistributionChannelTextDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformDistributionChannelTextDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformDistributionChannelTextDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_distribution_channel_text_data` WHERE `DistributionChannel`=? AND `Language`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_distribution_channel_text_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_distribution_channel_text_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformDistributionChannelTextDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformDistributionChannelTextDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_distribution_channel_text_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_distribution_channel_text_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformDistributionChannelTextDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformDistributionChannelTextDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDistributionChannelTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_distribution_channel_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDistributionChannelTextDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformDistributionChannelTextDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_distribution_channel_text_data")
	}

	if len(dataPlatformDistributionChannelTextDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformDistributionChannelTextDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformDistributionChannelTextDatum(ctx, exec, o.DistributionChannel, o.Language)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformDistributionChannelTextDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformDistributionChannelTextDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDistributionChannelTextDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_distribution_channel_text_data`.* FROM `data_platform_distribution_channel_text_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDistributionChannelTextDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformDistributionChannelTextDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformDistributionChannelTextDatumExists checks if the DataPlatformDistributionChannelTextDatum row exists.
func DataPlatformDistributionChannelTextDatumExists(ctx context.Context, exec boil.ContextExecutor, distributionChannel string, language string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_distribution_channel_text_data` where `DistributionChannel`=? AND `Language`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, distributionChannel, language)
	}
	row := exec.QueryRowContext(ctx, sql, distributionChannel, language)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_distribution_channel_text_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformDistributionChannelTextDatum row exists.
func (o *DataPlatformDistributionChannelTextDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformDistributionChannelTextDatumExists(ctx, exec, o.DistributionChannel, o.Language)
}
