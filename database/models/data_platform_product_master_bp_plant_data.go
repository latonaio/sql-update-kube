// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductMasterBPPlantDatum is an object representing the database table.
type DataPlatformProductMasterBPPlantDatum struct {
	Product                                   string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner                           int          `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                                     string       `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	MRPType                                   string       `boil:"MRPType" json:"MRPType" toml:"MRPType" yaml:"MRPType"`
	MRPController                             null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ReorderThresholdQuantityInBaseUnit        null.Float32 `boil:"ReorderThresholdQuantityInBaseUnit" json:"ReorderThresholdQuantityInBaseUnit,omitempty" toml:"ReorderThresholdQuantityInBaseUnit" yaml:"ReorderThresholdQuantityInBaseUnit,omitempty"`
	PlanningTimeFenceInDays                   null.Int     `boil:"PlanningTimeFenceInDays" json:"PlanningTimeFenceInDays,omitempty" toml:"PlanningTimeFenceInDays" yaml:"PlanningTimeFenceInDays,omitempty"`
	MRPPlanningCalendar                       null.String  `boil:"MRPPlanningCalendar" json:"MRPPlanningCalendar,omitempty" toml:"MRPPlanningCalendar" yaml:"MRPPlanningCalendar,omitempty"`
	SafetyStockQuantityInBaseUnit             null.Float32 `boil:"SafetyStockQuantityInBaseUnit" json:"SafetyStockQuantityInBaseUnit,omitempty" toml:"SafetyStockQuantityInBaseUnit" yaml:"SafetyStockQuantityInBaseUnit,omitempty"`
	SafetyDuration                            null.Float32 `boil:"SafetyDuration" json:"SafetyDuration,omitempty" toml:"SafetyDuration" yaml:"SafetyDuration,omitempty"`
	SafetyDurationUnit                        null.String  `boil:"SafetyDurationUnit" json:"SafetyDurationUnit,omitempty" toml:"SafetyDurationUnit" yaml:"SafetyDurationUnit,omitempty"`
	MaximumStockQuantityInBaseUnit            null.Float32 `boil:"MaximumStockQuantityInBaseUnit" json:"MaximumStockQuantityInBaseUnit,omitempty" toml:"MaximumStockQuantityInBaseUnit" yaml:"MaximumStockQuantityInBaseUnit,omitempty"`
	MinimumDeliveryQuantityInBaseUnit         null.Float32 `boil:"MinimumDeliveryQuantityInBaseUnit" json:"MinimumDeliveryQuantityInBaseUnit,omitempty" toml:"MinimumDeliveryQuantityInBaseUnit" yaml:"MinimumDeliveryQuantityInBaseUnit,omitempty"`
	MinimumDeliveryLotSizeQuantityInBaseUnit  null.Float32 `boil:"MinimumDeliveryLotSizeQuantityInBaseUnit" json:"MinimumDeliveryLotSizeQuantityInBaseUnit,omitempty" toml:"MinimumDeliveryLotSizeQuantityInBaseUnit" yaml:"MinimumDeliveryLotSizeQuantityInBaseUnit,omitempty"`
	StandardDeliveryQuantityInBaseUnit        null.Float32 `boil:"StandardDeliveryQuantityInBaseUnit" json:"StandardDeliveryQuantityInBaseUnit,omitempty" toml:"StandardDeliveryQuantityInBaseUnit" yaml:"StandardDeliveryQuantityInBaseUnit,omitempty"`
	StandardDeliveryLotSizeQuantityInBaseUnit null.Float32 `boil:"StandardDeliveryLotSizeQuantityInBaseUnit" json:"StandardDeliveryLotSizeQuantityInBaseUnit,omitempty" toml:"StandardDeliveryLotSizeQuantityInBaseUnit" yaml:"StandardDeliveryLotSizeQuantityInBaseUnit,omitempty"`
	MaximumDeliveryQuantityInBaseUnit         null.Float32 `boil:"MaximumDeliveryQuantityInBaseUnit" json:"MaximumDeliveryQuantityInBaseUnit,omitempty" toml:"MaximumDeliveryQuantityInBaseUnit" yaml:"MaximumDeliveryQuantityInBaseUnit,omitempty"`
	MaximumDeliveryLotSizeQuantityInBaseUnit  null.Float32 `boil:"MaximumDeliveryLotSizeQuantityInBaseUnit" json:"MaximumDeliveryLotSizeQuantityInBaseUnit,omitempty" toml:"MaximumDeliveryLotSizeQuantityInBaseUnit" yaml:"MaximumDeliveryLotSizeQuantityInBaseUnit,omitempty"`
	DeliveryLotSizeRoundingQuantityInBaseUnit null.Float32 `boil:"DeliveryLotSizeRoundingQuantityInBaseUnit" json:"DeliveryLotSizeRoundingQuantityInBaseUnit,omitempty" toml:"DeliveryLotSizeRoundingQuantityInBaseUnit" yaml:"DeliveryLotSizeRoundingQuantityInBaseUnit,omitempty"`
	DeliveryLotSizeIsFixed                    null.Bool    `boil:"DeliveryLotSizeIsFixed" json:"DeliveryLotSizeIsFixed,omitempty" toml:"DeliveryLotSizeIsFixed" yaml:"DeliveryLotSizeIsFixed,omitempty"`
	StandardDeliveryDuration                  null.Float32 `boil:"StandardDeliveryDuration" json:"StandardDeliveryDuration,omitempty" toml:"StandardDeliveryDuration" yaml:"StandardDeliveryDuration,omitempty"`
	StandardDeliveryDurationUnit              null.String  `boil:"StandardDeliveryDurationUnit" json:"StandardDeliveryDurationUnit,omitempty" toml:"StandardDeliveryDurationUnit" yaml:"StandardDeliveryDurationUnit,omitempty"`
	IsBatchManagementRequired                 null.Bool    `boil:"IsBatchManagementRequired" json:"IsBatchManagementRequired,omitempty" toml:"IsBatchManagementRequired" yaml:"IsBatchManagementRequired,omitempty"`
	BatchManagementPolicy                     null.String  `boil:"BatchManagementPolicy" json:"BatchManagementPolicy,omitempty" toml:"BatchManagementPolicy" yaml:"BatchManagementPolicy,omitempty"`
	ProfitCenter                              null.String  `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	CreationDate                              string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                            string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                       null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductMasterBPPlantDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductMasterBPPlantDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductMasterBPPlantDatumColumns = struct {
	Product                                   string
	BusinessPartner                           string
	Plant                                     string
	MRPType                                   string
	MRPController                             string
	ReorderThresholdQuantityInBaseUnit        string
	PlanningTimeFenceInDays                   string
	MRPPlanningCalendar                       string
	SafetyStockQuantityInBaseUnit             string
	SafetyDuration                            string
	SafetyDurationUnit                        string
	MaximumStockQuantityInBaseUnit            string
	MinimumDeliveryQuantityInBaseUnit         string
	MinimumDeliveryLotSizeQuantityInBaseUnit  string
	StandardDeliveryQuantityInBaseUnit        string
	StandardDeliveryLotSizeQuantityInBaseUnit string
	MaximumDeliveryQuantityInBaseUnit         string
	MaximumDeliveryLotSizeQuantityInBaseUnit  string
	DeliveryLotSizeRoundingQuantityInBaseUnit string
	DeliveryLotSizeIsFixed                    string
	StandardDeliveryDuration                  string
	StandardDeliveryDurationUnit              string
	IsBatchManagementRequired                 string
	BatchManagementPolicy                     string
	ProfitCenter                              string
	CreationDate                              string
	LastChangeDate                            string
	IsMarkedForDeletion                       string
}{
	Product:                                   "Product",
	BusinessPartner:                           "BusinessPartner",
	Plant:                                     "Plant",
	MRPType:                                   "MRPType",
	MRPController:                             "MRPController",
	ReorderThresholdQuantityInBaseUnit:        "ReorderThresholdQuantityInBaseUnit",
	PlanningTimeFenceInDays:                   "PlanningTimeFenceInDays",
	MRPPlanningCalendar:                       "MRPPlanningCalendar",
	SafetyStockQuantityInBaseUnit:             "SafetyStockQuantityInBaseUnit",
	SafetyDuration:                            "SafetyDuration",
	SafetyDurationUnit:                        "SafetyDurationUnit",
	MaximumStockQuantityInBaseUnit:            "MaximumStockQuantityInBaseUnit",
	MinimumDeliveryQuantityInBaseUnit:         "MinimumDeliveryQuantityInBaseUnit",
	MinimumDeliveryLotSizeQuantityInBaseUnit:  "MinimumDeliveryLotSizeQuantityInBaseUnit",
	StandardDeliveryQuantityInBaseUnit:        "StandardDeliveryQuantityInBaseUnit",
	StandardDeliveryLotSizeQuantityInBaseUnit: "StandardDeliveryLotSizeQuantityInBaseUnit",
	MaximumDeliveryQuantityInBaseUnit:         "MaximumDeliveryQuantityInBaseUnit",
	MaximumDeliveryLotSizeQuantityInBaseUnit:  "MaximumDeliveryLotSizeQuantityInBaseUnit",
	DeliveryLotSizeRoundingQuantityInBaseUnit: "DeliveryLotSizeRoundingQuantityInBaseUnit",
	DeliveryLotSizeIsFixed:                    "DeliveryLotSizeIsFixed",
	StandardDeliveryDuration:                  "StandardDeliveryDuration",
	StandardDeliveryDurationUnit:              "StandardDeliveryDurationUnit",
	IsBatchManagementRequired:                 "IsBatchManagementRequired",
	BatchManagementPolicy:                     "BatchManagementPolicy",
	ProfitCenter:                              "ProfitCenter",
	CreationDate:                              "CreationDate",
	LastChangeDate:                            "LastChangeDate",
	IsMarkedForDeletion:                       "IsMarkedForDeletion",
}

var DataPlatformProductMasterBPPlantDatumTableColumns = struct {
	Product                                   string
	BusinessPartner                           string
	Plant                                     string
	MRPType                                   string
	MRPController                             string
	ReorderThresholdQuantityInBaseUnit        string
	PlanningTimeFenceInDays                   string
	MRPPlanningCalendar                       string
	SafetyStockQuantityInBaseUnit             string
	SafetyDuration                            string
	SafetyDurationUnit                        string
	MaximumStockQuantityInBaseUnit            string
	MinimumDeliveryQuantityInBaseUnit         string
	MinimumDeliveryLotSizeQuantityInBaseUnit  string
	StandardDeliveryQuantityInBaseUnit        string
	StandardDeliveryLotSizeQuantityInBaseUnit string
	MaximumDeliveryQuantityInBaseUnit         string
	MaximumDeliveryLotSizeQuantityInBaseUnit  string
	DeliveryLotSizeRoundingQuantityInBaseUnit string
	DeliveryLotSizeIsFixed                    string
	StandardDeliveryDuration                  string
	StandardDeliveryDurationUnit              string
	IsBatchManagementRequired                 string
	BatchManagementPolicy                     string
	ProfitCenter                              string
	CreationDate                              string
	LastChangeDate                            string
	IsMarkedForDeletion                       string
}{
	Product:                                   "data_platform_product_master_bp_plant_data.Product",
	BusinessPartner:                           "data_platform_product_master_bp_plant_data.BusinessPartner",
	Plant:                                     "data_platform_product_master_bp_plant_data.Plant",
	MRPType:                                   "data_platform_product_master_bp_plant_data.MRPType",
	MRPController:                             "data_platform_product_master_bp_plant_data.MRPController",
	ReorderThresholdQuantityInBaseUnit:        "data_platform_product_master_bp_plant_data.ReorderThresholdQuantityInBaseUnit",
	PlanningTimeFenceInDays:                   "data_platform_product_master_bp_plant_data.PlanningTimeFenceInDays",
	MRPPlanningCalendar:                       "data_platform_product_master_bp_plant_data.MRPPlanningCalendar",
	SafetyStockQuantityInBaseUnit:             "data_platform_product_master_bp_plant_data.SafetyStockQuantityInBaseUnit",
	SafetyDuration:                            "data_platform_product_master_bp_plant_data.SafetyDuration",
	SafetyDurationUnit:                        "data_platform_product_master_bp_plant_data.SafetyDurationUnit",
	MaximumStockQuantityInBaseUnit:            "data_platform_product_master_bp_plant_data.MaximumStockQuantityInBaseUnit",
	MinimumDeliveryQuantityInBaseUnit:         "data_platform_product_master_bp_plant_data.MinimumDeliveryQuantityInBaseUnit",
	MinimumDeliveryLotSizeQuantityInBaseUnit:  "data_platform_product_master_bp_plant_data.MinimumDeliveryLotSizeQuantityInBaseUnit",
	StandardDeliveryQuantityInBaseUnit:        "data_platform_product_master_bp_plant_data.StandardDeliveryQuantityInBaseUnit",
	StandardDeliveryLotSizeQuantityInBaseUnit: "data_platform_product_master_bp_plant_data.StandardDeliveryLotSizeQuantityInBaseUnit",
	MaximumDeliveryQuantityInBaseUnit:         "data_platform_product_master_bp_plant_data.MaximumDeliveryQuantityInBaseUnit",
	MaximumDeliveryLotSizeQuantityInBaseUnit:  "data_platform_product_master_bp_plant_data.MaximumDeliveryLotSizeQuantityInBaseUnit",
	DeliveryLotSizeRoundingQuantityInBaseUnit: "data_platform_product_master_bp_plant_data.DeliveryLotSizeRoundingQuantityInBaseUnit",
	DeliveryLotSizeIsFixed:                    "data_platform_product_master_bp_plant_data.DeliveryLotSizeIsFixed",
	StandardDeliveryDuration:                  "data_platform_product_master_bp_plant_data.StandardDeliveryDuration",
	StandardDeliveryDurationUnit:              "data_platform_product_master_bp_plant_data.StandardDeliveryDurationUnit",
	IsBatchManagementRequired:                 "data_platform_product_master_bp_plant_data.IsBatchManagementRequired",
	BatchManagementPolicy:                     "data_platform_product_master_bp_plant_data.BatchManagementPolicy",
	ProfitCenter:                              "data_platform_product_master_bp_plant_data.ProfitCenter",
	CreationDate:                              "data_platform_product_master_bp_plant_data.CreationDate",
	LastChangeDate:                            "data_platform_product_master_bp_plant_data.LastChangeDate",
	IsMarkedForDeletion:                       "data_platform_product_master_bp_plant_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductMasterBPPlantDatumWhere = struct {
	Product                                   whereHelperstring
	BusinessPartner                           whereHelperint
	Plant                                     whereHelperstring
	MRPType                                   whereHelperstring
	MRPController                             whereHelpernull_String
	ReorderThresholdQuantityInBaseUnit        whereHelpernull_Float32
	PlanningTimeFenceInDays                   whereHelpernull_Int
	MRPPlanningCalendar                       whereHelpernull_String
	SafetyStockQuantityInBaseUnit             whereHelpernull_Float32
	SafetyDuration                            whereHelpernull_Float32
	SafetyDurationUnit                        whereHelpernull_String
	MaximumStockQuantityInBaseUnit            whereHelpernull_Float32
	MinimumDeliveryQuantityInBaseUnit         whereHelpernull_Float32
	MinimumDeliveryLotSizeQuantityInBaseUnit  whereHelpernull_Float32
	StandardDeliveryQuantityInBaseUnit        whereHelpernull_Float32
	StandardDeliveryLotSizeQuantityInBaseUnit whereHelpernull_Float32
	MaximumDeliveryQuantityInBaseUnit         whereHelpernull_Float32
	MaximumDeliveryLotSizeQuantityInBaseUnit  whereHelpernull_Float32
	DeliveryLotSizeRoundingQuantityInBaseUnit whereHelpernull_Float32
	DeliveryLotSizeIsFixed                    whereHelpernull_Bool
	StandardDeliveryDuration                  whereHelpernull_Float32
	StandardDeliveryDurationUnit              whereHelpernull_String
	IsBatchManagementRequired                 whereHelpernull_Bool
	BatchManagementPolicy                     whereHelpernull_String
	ProfitCenter                              whereHelpernull_String
	CreationDate                              whereHelperstring
	LastChangeDate                            whereHelperstring
	IsMarkedForDeletion                       whereHelpernull_Bool
}{
	Product:                                   whereHelperstring{field: "`data_platform_product_master_bp_plant_data`.`Product`"},
	BusinessPartner:                           whereHelperint{field: "`data_platform_product_master_bp_plant_data`.`BusinessPartner`"},
	Plant:                                     whereHelperstring{field: "`data_platform_product_master_bp_plant_data`.`Plant`"},
	MRPType:                                   whereHelperstring{field: "`data_platform_product_master_bp_plant_data`.`MRPType`"},
	MRPController:                             whereHelpernull_String{field: "`data_platform_product_master_bp_plant_data`.`MRPController`"},
	ReorderThresholdQuantityInBaseUnit:        whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`ReorderThresholdQuantityInBaseUnit`"},
	PlanningTimeFenceInDays:                   whereHelpernull_Int{field: "`data_platform_product_master_bp_plant_data`.`PlanningTimeFenceInDays`"},
	MRPPlanningCalendar:                       whereHelpernull_String{field: "`data_platform_product_master_bp_plant_data`.`MRPPlanningCalendar`"},
	SafetyStockQuantityInBaseUnit:             whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`SafetyStockQuantityInBaseUnit`"},
	SafetyDuration:                            whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`SafetyDuration`"},
	SafetyDurationUnit:                        whereHelpernull_String{field: "`data_platform_product_master_bp_plant_data`.`SafetyDurationUnit`"},
	MaximumStockQuantityInBaseUnit:            whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`MaximumStockQuantityInBaseUnit`"},
	MinimumDeliveryQuantityInBaseUnit:         whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`MinimumDeliveryQuantityInBaseUnit`"},
	MinimumDeliveryLotSizeQuantityInBaseUnit:  whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`MinimumDeliveryLotSizeQuantityInBaseUnit`"},
	StandardDeliveryQuantityInBaseUnit:        whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`StandardDeliveryQuantityInBaseUnit`"},
	StandardDeliveryLotSizeQuantityInBaseUnit: whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`StandardDeliveryLotSizeQuantityInBaseUnit`"},
	MaximumDeliveryQuantityInBaseUnit:         whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`MaximumDeliveryQuantityInBaseUnit`"},
	MaximumDeliveryLotSizeQuantityInBaseUnit:  whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`MaximumDeliveryLotSizeQuantityInBaseUnit`"},
	DeliveryLotSizeRoundingQuantityInBaseUnit: whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`DeliveryLotSizeRoundingQuantityInBaseUnit`"},
	DeliveryLotSizeIsFixed:                    whereHelpernull_Bool{field: "`data_platform_product_master_bp_plant_data`.`DeliveryLotSizeIsFixed`"},
	StandardDeliveryDuration:                  whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`StandardDeliveryDuration`"},
	StandardDeliveryDurationUnit:              whereHelpernull_String{field: "`data_platform_product_master_bp_plant_data`.`StandardDeliveryDurationUnit`"},
	IsBatchManagementRequired:                 whereHelpernull_Bool{field: "`data_platform_product_master_bp_plant_data`.`IsBatchManagementRequired`"},
	BatchManagementPolicy:                     whereHelpernull_String{field: "`data_platform_product_master_bp_plant_data`.`BatchManagementPolicy`"},
	ProfitCenter:                              whereHelpernull_String{field: "`data_platform_product_master_bp_plant_data`.`ProfitCenter`"},
	CreationDate:                              whereHelperstring{field: "`data_platform_product_master_bp_plant_data`.`CreationDate`"},
	LastChangeDate:                            whereHelperstring{field: "`data_platform_product_master_bp_plant_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                       whereHelpernull_Bool{field: "`data_platform_product_master_bp_plant_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductMasterBPPlantDatumRels is where relationship names are stored.
var DataPlatformProductMasterBPPlantDatumRels = struct {
	BusinessPartnerDataPlatformPlantGeneralDatum                          string
	ProductDataPlatformProductMasterGeneralDatum                          string
	SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum           string
	StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum string
	BusinessPartnerDataPlatformBatchMasterRecordBatchData                 string
	BusinessPartnerDataPlatformProductMasterBPPlantDocData                string
	BusinessPartnerDataPlatformProductMasterProductionData                string
	BusinessPartnerDataPlatformProductStockProductStockAvailabilityData   string
	BusinessPartnerDataPlatformProductStockProductStockByStorageBinData   string
	BusinessPartnerDataPlatformProductStockProductStockData               string
	BusinessPartnerDataPlatformProductStockProductStockDocData            string
	ComponentProductDataPlatformProductionOrderItemComponentData          string
	OwnerBusinessPartnerDataPlatformProductionVersionHeaderData           string
	DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData         string
}{
	BusinessPartnerDataPlatformPlantGeneralDatum:                          "BusinessPartnerDataPlatformPlantGeneralDatum",
	ProductDataPlatformProductMasterGeneralDatum:                          "ProductDataPlatformProductMasterGeneralDatum",
	SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:           "SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: "StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	BusinessPartnerDataPlatformBatchMasterRecordBatchData:                 "BusinessPartnerDataPlatformBatchMasterRecordBatchData",
	BusinessPartnerDataPlatformProductMasterBPPlantDocData:                "BusinessPartnerDataPlatformProductMasterBPPlantDocData",
	BusinessPartnerDataPlatformProductMasterProductionData:                "BusinessPartnerDataPlatformProductMasterProductionData",
	BusinessPartnerDataPlatformProductStockProductStockAvailabilityData:   "BusinessPartnerDataPlatformProductStockProductStockAvailabilityData",
	BusinessPartnerDataPlatformProductStockProductStockByStorageBinData:   "BusinessPartnerDataPlatformProductStockProductStockByStorageBinData",
	BusinessPartnerDataPlatformProductStockProductStockData:               "BusinessPartnerDataPlatformProductStockProductStockData",
	BusinessPartnerDataPlatformProductStockProductStockDocData:            "BusinessPartnerDataPlatformProductStockProductStockDocData",
	ComponentProductDataPlatformProductionOrderItemComponentData:          "ComponentProductDataPlatformProductionOrderItemComponentData",
	OwnerBusinessPartnerDataPlatformProductionVersionHeaderData:           "OwnerBusinessPartnerDataPlatformProductionVersionHeaderData",
	DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData:         "DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData",
}

// dataPlatformProductMasterBPPlantDatumR is where relationships are stored.
type dataPlatformProductMasterBPPlantDatumR struct {
	BusinessPartnerDataPlatformPlantGeneralDatum                          *DataPlatformPlantGeneralDatum                             `boil:"BusinessPartnerDataPlatformPlantGeneralDatum" json:"BusinessPartnerDataPlatformPlantGeneralDatum" toml:"BusinessPartnerDataPlatformPlantGeneralDatum" yaml:"BusinessPartnerDataPlatformPlantGeneralDatum"`
	ProductDataPlatformProductMasterGeneralDatum                          *DataPlatformProductMasterGeneralDatum                     `boil:"ProductDataPlatformProductMasterGeneralDatum" json:"ProductDataPlatformProductMasterGeneralDatum" toml:"ProductDataPlatformProductMasterGeneralDatum" yaml:"ProductDataPlatformProductMasterGeneralDatum"`
	SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum           *DataPlatformQuantityUnitQuantityUnitDatum                 `boil:"SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum                 `boil:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	BusinessPartnerDataPlatformBatchMasterRecordBatchData                 DataPlatformBatchMasterRecordBatchDatumSlice               `boil:"BusinessPartnerDataPlatformBatchMasterRecordBatchData" json:"BusinessPartnerDataPlatformBatchMasterRecordBatchData" toml:"BusinessPartnerDataPlatformBatchMasterRecordBatchData" yaml:"BusinessPartnerDataPlatformBatchMasterRecordBatchData"`
	BusinessPartnerDataPlatformProductMasterBPPlantDocData                DataPlatformProductMasterBPPlantDocDatumSlice              `boil:"BusinessPartnerDataPlatformProductMasterBPPlantDocData" json:"BusinessPartnerDataPlatformProductMasterBPPlantDocData" toml:"BusinessPartnerDataPlatformProductMasterBPPlantDocData" yaml:"BusinessPartnerDataPlatformProductMasterBPPlantDocData"`
	BusinessPartnerDataPlatformProductMasterProductionData                DataPlatformProductMasterProductionDatumSlice              `boil:"BusinessPartnerDataPlatformProductMasterProductionData" json:"BusinessPartnerDataPlatformProductMasterProductionData" toml:"BusinessPartnerDataPlatformProductMasterProductionData" yaml:"BusinessPartnerDataPlatformProductMasterProductionData"`
	BusinessPartnerDataPlatformProductStockProductStockAvailabilityData   DataPlatformProductStockProductStockAvailabilityDatumSlice `boil:"BusinessPartnerDataPlatformProductStockProductStockAvailabilityData" json:"BusinessPartnerDataPlatformProductStockProductStockAvailabilityData" toml:"BusinessPartnerDataPlatformProductStockProductStockAvailabilityData" yaml:"BusinessPartnerDataPlatformProductStockProductStockAvailabilityData"`
	BusinessPartnerDataPlatformProductStockProductStockByStorageBinData   DataPlatformProductStockProductStockByStorageBinDatumSlice `boil:"BusinessPartnerDataPlatformProductStockProductStockByStorageBinData" json:"BusinessPartnerDataPlatformProductStockProductStockByStorageBinData" toml:"BusinessPartnerDataPlatformProductStockProductStockByStorageBinData" yaml:"BusinessPartnerDataPlatformProductStockProductStockByStorageBinData"`
	BusinessPartnerDataPlatformProductStockProductStockData               DataPlatformProductStockProductStockDatumSlice             `boil:"BusinessPartnerDataPlatformProductStockProductStockData" json:"BusinessPartnerDataPlatformProductStockProductStockData" toml:"BusinessPartnerDataPlatformProductStockProductStockData" yaml:"BusinessPartnerDataPlatformProductStockProductStockData"`
	BusinessPartnerDataPlatformProductStockProductStockDocData            DataPlatformProductStockProductStockDocDatumSlice          `boil:"BusinessPartnerDataPlatformProductStockProductStockDocData" json:"BusinessPartnerDataPlatformProductStockProductStockDocData" toml:"BusinessPartnerDataPlatformProductStockProductStockDocData" yaml:"BusinessPartnerDataPlatformProductStockProductStockDocData"`
	ComponentProductDataPlatformProductionOrderItemComponentData          DataPlatformProductionOrderItemComponentDatumSlice         `boil:"ComponentProductDataPlatformProductionOrderItemComponentData" json:"ComponentProductDataPlatformProductionOrderItemComponentData" toml:"ComponentProductDataPlatformProductionOrderItemComponentData" yaml:"ComponentProductDataPlatformProductionOrderItemComponentData"`
	OwnerBusinessPartnerDataPlatformProductionVersionHeaderData           DataPlatformProductionVersionHeaderDatumSlice              `boil:"OwnerBusinessPartnerDataPlatformProductionVersionHeaderData" json:"OwnerBusinessPartnerDataPlatformProductionVersionHeaderData" toml:"OwnerBusinessPartnerDataPlatformProductionVersionHeaderData" yaml:"OwnerBusinessPartnerDataPlatformProductionVersionHeaderData"`
	DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData         DataPlatformSCRDeliveryPlantRelationProductDatumSlice      `boil:"DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData" json:"DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData" toml:"DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData" yaml:"DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductMasterBPPlantDatumR) NewStruct() *dataPlatformProductMasterBPPlantDatumR {
	return &dataPlatformProductMasterBPPlantDatumR{}
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetBusinessPartnerDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformPlantGeneralDatum
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetProductDataPlatformProductMasterGeneralDatum() *DataPlatformProductMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformProductMasterGeneralDatum
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetBusinessPartnerDataPlatformBatchMasterRecordBatchData() DataPlatformBatchMasterRecordBatchDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBatchMasterRecordBatchData
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetBusinessPartnerDataPlatformProductMasterBPPlantDocData() DataPlatformProductMasterBPPlantDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterBPPlantDocData
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetBusinessPartnerDataPlatformProductMasterProductionData() DataPlatformProductMasterProductionDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterProductionData
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetBusinessPartnerDataPlatformProductStockProductStockAvailabilityData() DataPlatformProductStockProductStockAvailabilityDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductStockProductStockAvailabilityData
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetBusinessPartnerDataPlatformProductStockProductStockByStorageBinData() DataPlatformProductStockProductStockByStorageBinDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductStockProductStockByStorageBinData
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetBusinessPartnerDataPlatformProductStockProductStockData() DataPlatformProductStockProductStockDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductStockProductStockData
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetBusinessPartnerDataPlatformProductStockProductStockDocData() DataPlatformProductStockProductStockDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductStockProductStockDocData
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetComponentProductDataPlatformProductionOrderItemComponentData() DataPlatformProductionOrderItemComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductDataPlatformProductionOrderItemComponentData
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetOwnerBusinessPartnerDataPlatformProductionVersionHeaderData() DataPlatformProductionVersionHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.OwnerBusinessPartnerDataPlatformProductionVersionHeaderData
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetDeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData() DataPlatformSCRDeliveryPlantRelationProductDatumSlice {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData
}

// dataPlatformProductMasterBPPlantDatumL is where Load methods for each relationship are stored.
type dataPlatformProductMasterBPPlantDatumL struct{}

var (
	dataPlatformProductMasterBPPlantDatumAllColumns            = []string{"Product", "BusinessPartner", "Plant", "MRPType", "MRPController", "ReorderThresholdQuantityInBaseUnit", "PlanningTimeFenceInDays", "MRPPlanningCalendar", "SafetyStockQuantityInBaseUnit", "SafetyDuration", "SafetyDurationUnit", "MaximumStockQuantityInBaseUnit", "MinimumDeliveryQuantityInBaseUnit", "MinimumDeliveryLotSizeQuantityInBaseUnit", "StandardDeliveryQuantityInBaseUnit", "StandardDeliveryLotSizeQuantityInBaseUnit", "MaximumDeliveryQuantityInBaseUnit", "MaximumDeliveryLotSizeQuantityInBaseUnit", "DeliveryLotSizeRoundingQuantityInBaseUnit", "DeliveryLotSizeIsFixed", "StandardDeliveryDuration", "StandardDeliveryDurationUnit", "IsBatchManagementRequired", "BatchManagementPolicy", "ProfitCenter", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformProductMasterBPPlantDatumColumnsWithoutDefault = []string{"Product", "BusinessPartner", "Plant", "MRPType", "MRPController", "ReorderThresholdQuantityInBaseUnit", "PlanningTimeFenceInDays", "MRPPlanningCalendar", "SafetyStockQuantityInBaseUnit", "SafetyDuration", "SafetyDurationUnit", "MaximumStockQuantityInBaseUnit", "MinimumDeliveryQuantityInBaseUnit", "MinimumDeliveryLotSizeQuantityInBaseUnit", "StandardDeliveryQuantityInBaseUnit", "StandardDeliveryLotSizeQuantityInBaseUnit", "MaximumDeliveryQuantityInBaseUnit", "MaximumDeliveryLotSizeQuantityInBaseUnit", "DeliveryLotSizeRoundingQuantityInBaseUnit", "DeliveryLotSizeIsFixed", "StandardDeliveryDuration", "StandardDeliveryDurationUnit", "IsBatchManagementRequired", "BatchManagementPolicy", "ProfitCenter", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformProductMasterBPPlantDatumColumnsWithDefault    = []string{}
	dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns     = []string{"Product", "BusinessPartner", "Plant"}
	dataPlatformProductMasterBPPlantDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductMasterBPPlantDatumSlice is an alias for a slice of pointers to DataPlatformProductMasterBPPlantDatum.
	// This should almost always be used instead of []DataPlatformProductMasterBPPlantDatum.
	DataPlatformProductMasterBPPlantDatumSlice []*DataPlatformProductMasterBPPlantDatum

	dataPlatformProductMasterBPPlantDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductMasterBPPlantDatumType                 = reflect.TypeOf(&DataPlatformProductMasterBPPlantDatum{})
	dataPlatformProductMasterBPPlantDatumMapping              = queries.MakeStructMapping(dataPlatformProductMasterBPPlantDatumType)
	dataPlatformProductMasterBPPlantDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns)
	dataPlatformProductMasterBPPlantDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductMasterBPPlantDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductMasterBPPlantDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductMasterBPPlantDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductMasterBPPlantDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductMasterBPPlantDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductMasterBPPlantDatum record from the query.
func (q dataPlatformProductMasterBPPlantDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductMasterBPPlantDatum, error) {
	o := &DataPlatformProductMasterBPPlantDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_master_bp_plant_data")
	}

	return o, nil
}

// All returns all DataPlatformProductMasterBPPlantDatum records from the query.
func (q dataPlatformProductMasterBPPlantDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductMasterBPPlantDatumSlice, error) {
	var o []*DataPlatformProductMasterBPPlantDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductMasterBPPlantDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductMasterBPPlantDatum records in the query.
func (q dataPlatformProductMasterBPPlantDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_master_bp_plant_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductMasterBPPlantDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_master_bp_plant_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProductMasterBPPlantDatum) BusinessPartnerDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// ProductDataPlatformProductMasterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProductMasterBPPlantDatum) ProductDataPlatformProductMasterGeneralDatum(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductMasterBPPlantDatum) SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.SafetyDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductMasterBPPlantDatum) StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.StandardDeliveryDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// BusinessPartnerDataPlatformBatchMasterRecordBatchData retrieves all the data_platform_batch_master_record_batch_datum's DataPlatformBatchMasterRecordBatchData with an executor via BusinessPartner column.
func (o *DataPlatformProductMasterBPPlantDatum) BusinessPartnerDataPlatformBatchMasterRecordBatchData(mods ...qm.QueryMod) dataPlatformBatchMasterRecordBatchDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_batch_master_record_batch_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBatchMasterRecordBatchData(queryMods...)
}

// BusinessPartnerDataPlatformProductMasterBPPlantDocData retrieves all the data_platform_product_master_bp_plant_doc_datum's DataPlatformProductMasterBPPlantDocData with an executor via BusinessPartner column.
func (o *DataPlatformProductMasterBPPlantDatum) BusinessPartnerDataPlatformProductMasterBPPlantDocData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_bp_plant_doc_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductMasterBPPlantDocData(queryMods...)
}

// BusinessPartnerDataPlatformProductMasterProductionData retrieves all the data_platform_product_master_production_datum's DataPlatformProductMasterProductionData with an executor via BusinessPartner column.
func (o *DataPlatformProductMasterBPPlantDatum) BusinessPartnerDataPlatformProductMasterProductionData(mods ...qm.QueryMod) dataPlatformProductMasterProductionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_production_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductMasterProductionData(queryMods...)
}

// BusinessPartnerDataPlatformProductStockProductStockAvailabilityData retrieves all the data_platform_product_stock_product_stock_availability_datum's DataPlatformProductStockProductStockAvailabilityData with an executor via BusinessPartner column.
func (o *DataPlatformProductMasterBPPlantDatum) BusinessPartnerDataPlatformProductStockProductStockAvailabilityData(mods ...qm.QueryMod) dataPlatformProductStockProductStockAvailabilityDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_availability_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockAvailabilityData(queryMods...)
}

// BusinessPartnerDataPlatformProductStockProductStockByStorageBinData retrieves all the data_platform_product_stock_product_stock_by_storage_bin_datum's DataPlatformProductStockProductStockByStorageBinData with an executor via BusinessPartner column.
func (o *DataPlatformProductMasterBPPlantDatum) BusinessPartnerDataPlatformProductStockProductStockByStorageBinData(mods ...qm.QueryMod) dataPlatformProductStockProductStockByStorageBinDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_by_storage_bin_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockByStorageBinData(queryMods...)
}

// BusinessPartnerDataPlatformProductStockProductStockData retrieves all the data_platform_product_stock_product_stock_datum's DataPlatformProductStockProductStockData with an executor via BusinessPartner column.
func (o *DataPlatformProductMasterBPPlantDatum) BusinessPartnerDataPlatformProductStockProductStockData(mods ...qm.QueryMod) dataPlatformProductStockProductStockDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockData(queryMods...)
}

// BusinessPartnerDataPlatformProductStockProductStockDocData retrieves all the data_platform_product_stock_product_stock_doc_datum's DataPlatformProductStockProductStockDocData with an executor via BusinessPartner column.
func (o *DataPlatformProductMasterBPPlantDatum) BusinessPartnerDataPlatformProductStockProductStockDocData(mods ...qm.QueryMod) dataPlatformProductStockProductStockDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_doc_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockDocData(queryMods...)
}

// ComponentProductDataPlatformProductionOrderItemComponentData retrieves all the data_platform_production_order_item_component_datum's DataPlatformProductionOrderItemComponentData with an executor via ComponentProduct column.
func (o *DataPlatformProductMasterBPPlantDatum) ComponentProductDataPlatformProductionOrderItemComponentData(mods ...qm.QueryMod) dataPlatformProductionOrderItemComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_component_data`.`ComponentProduct`=?", o.Product),
	)

	return DataPlatformProductionOrderItemComponentData(queryMods...)
}

// OwnerBusinessPartnerDataPlatformProductionVersionHeaderData retrieves all the data_platform_production_version_header_datum's DataPlatformProductionVersionHeaderData with an executor via OwnerBusinessPartner column.
func (o *DataPlatformProductMasterBPPlantDatum) OwnerBusinessPartnerDataPlatformProductionVersionHeaderData(mods ...qm.QueryMod) dataPlatformProductionVersionHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_version_header_data`.`OwnerBusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductionVersionHeaderData(queryMods...)
}

// DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData retrieves all the data_platform_scr_delivery_plant_relation_product_datum's DataPlatformSCRDeliveryPlantRelationProductData with an executor via DeliverToParty column.
func (o *DataPlatformProductMasterBPPlantDatum) DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData(mods ...qm.QueryMod) dataPlatformSCRDeliveryPlantRelationProductDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_delivery_plant_relation_product_data`.`DeliverToParty`=?", o.BusinessPartner),
	)

	return DataPlatformSCRDeliveryPlantRelationProductData(queryMods...)
}

// LoadBusinessPartnerDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadBusinessPartnerDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductDataPlatformProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadProductDataPlatformProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.Product)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterGeneralDatum")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDataPlatformProductMasterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Product == foreign.Product {
				local.R.ProductDataPlatformProductMasterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		if !queries.IsNil(object.SafetyDurationUnit) {
			args = append(args, object.SafetyDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SafetyDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SafetyDurationUnit) {
				args = append(args, obj.SafetyDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SafetyDurationUnit, foreign.QuantityUnit) {
				local.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		if !queries.IsNil(object.StandardDeliveryDurationUnit) {
			args = append(args, object.StandardDeliveryDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StandardDeliveryDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.StandardDeliveryDurationUnit) {
				args = append(args, obj.StandardDeliveryDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StandardDeliveryDurationUnit, foreign.QuantityUnit) {
				local.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBatchMasterRecordBatchData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadBusinessPartnerDataPlatformBatchMasterRecordBatchData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_batch_master_record_batch_data`),
		qm.WhereIn(`data_platform_batch_master_record_batch_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_batch_master_record_batch_data")
	}

	var resultSlice []*DataPlatformBatchMasterRecordBatchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_batch_master_record_batch_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_batch_master_record_batch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_batch_master_record_batch_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformBatchMasterRecordBatchData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBatchMasterRecordBatchData = append(local.R.BusinessPartnerDataPlatformBatchMasterRecordBatchData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductMasterBPPlantDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadBusinessPartnerDataPlatformProductMasterBPPlantDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_doc_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_doc_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_bp_plant_doc_data")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_bp_plant_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_bp_plant_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_doc_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductMasterBPPlantDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterBPPlantDocData = append(local.R.BusinessPartnerDataPlatformProductMasterBPPlantDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductMasterProductionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadBusinessPartnerDataPlatformProductMasterProductionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_production_data`),
		qm.WhereIn(`data_platform_product_master_production_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_production_data")
	}

	var resultSlice []*DataPlatformProductMasterProductionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_production_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_production_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_production_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductMasterProductionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterProductionData = append(local.R.BusinessPartnerDataPlatformProductMasterProductionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductStockProductStockAvailabilityData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadBusinessPartnerDataPlatformProductStockProductStockAvailabilityData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_availability_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_availability_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_availability_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockAvailabilityDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_availability_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_availability_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_availability_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductStockProductStockAvailabilityData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductStockProductStockAvailabilityData = append(local.R.BusinessPartnerDataPlatformProductStockProductStockAvailabilityData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductStockProductStockByStorageBinData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadBusinessPartnerDataPlatformProductStockProductStockByStorageBinData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_by_storage_bin_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_by_storage_bin_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockByStorageBinDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_by_storage_bin_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_by_storage_bin_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductStockProductStockByStorageBinData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductStockProductStockByStorageBinData = append(local.R.BusinessPartnerDataPlatformProductStockProductStockByStorageBinData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductStockProductStockData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadBusinessPartnerDataPlatformProductStockProductStockData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductStockProductStockData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductStockProductStockData = append(local.R.BusinessPartnerDataPlatformProductStockProductStockData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductStockProductStockDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadBusinessPartnerDataPlatformProductStockProductStockDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_doc_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_doc_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_doc_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_doc_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductStockProductStockDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductStockProductStockDocData = append(local.R.BusinessPartnerDataPlatformProductStockProductStockDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductDataPlatformProductionOrderItemComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadComponentProductDataPlatformProductionOrderItemComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.Product)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_component_data`),
		qm.WhereIn(`data_platform_production_order_item_component_data.ComponentProduct in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_component_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_component_data")
	}

	if singular {
		object.R.ComponentProductDataPlatformProductionOrderItemComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Product == foreign.ComponentProduct {
				local.R.ComponentProductDataPlatformProductionOrderItemComponentData = append(local.R.ComponentProductDataPlatformProductionOrderItemComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOwnerBusinessPartnerDataPlatformProductionVersionHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadOwnerBusinessPartnerDataPlatformProductionVersionHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_version_header_data`),
		qm.WhereIn(`data_platform_production_version_header_data.OwnerBusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_version_header_data")
	}

	var resultSlice []*DataPlatformProductionVersionHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_version_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_version_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_version_header_data")
	}

	if singular {
		object.R.OwnerBusinessPartnerDataPlatformProductionVersionHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.OwnerBusinessPartner {
				local.R.OwnerBusinessPartnerDataPlatformProductionVersionHeaderData = append(local.R.OwnerBusinessPartnerDataPlatformProductionVersionHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadDeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_plant_relation_product_data`),
		qm.WhereIn(`data_platform_scr_delivery_plant_relation_product_data.DeliverToParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_delivery_plant_relation_product_data")
	}

	var resultSlice []*DataPlatformSCRDeliveryPlantRelationProductDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_delivery_plant_relation_product_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_delivery_plant_relation_product_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_plant_relation_product_data")
	}

	if singular {
		object.R.DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.DeliverToParty {
				local.R.DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData = append(local.R.DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformPlantGeneralDatum of the dataPlatformProductMasterBPPlantDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformProductMasterBPPlantDatum) SetBusinessPartnerDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Product, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			BusinessPartnerDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// SetProductDataPlatformProductMasterGeneralDatum of the dataPlatformProductMasterBPPlantDatum to the related item.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum to related.
func (o *DataPlatformProductMasterBPPlantDatum) SetProductDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.Product, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Product = related.Product
	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			ProductDataPlatformProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductDataPlatformProductMasterGeneralDatum = related
	}

	return nil
}

// SetSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductMasterBPPlantDatum to the related item.
// Sets o.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductMasterBPPlantDatum) SetSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"SafetyDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.Product, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SafetyDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformProductMasterBPPlantDatum) RemoveSafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.SafetyDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("SafetyDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SafetyDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductMasterBPPlantDatum to the related item.
// Sets o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductMasterBPPlantDatum) SetStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"StandardDeliveryDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.Product, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StandardDeliveryDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformProductMasterBPPlantDatum) RemoveStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.StandardDeliveryDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("StandardDeliveryDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// AddBusinessPartnerDataPlatformBatchMasterRecordBatchData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBatchMasterRecordBatchData.
func (o *DataPlatformProductMasterBPPlantDatum) AddBusinessPartnerDataPlatformBatchMasterRecordBatchData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBatchMasterRecordBatchDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_batch_master_record_batch_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBatchMasterRecordBatchDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant, rel.Batch}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			BusinessPartnerDataPlatformBatchMasterRecordBatchData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBatchMasterRecordBatchData = append(o.R.BusinessPartnerDataPlatformBatchMasterRecordBatchData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductMasterBPPlantDocData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductMasterBPPlantDocData.
func (o *DataPlatformProductMasterBPPlantDatum) AddBusinessPartnerDataPlatformProductMasterBPPlantDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_bp_plant_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			BusinessPartnerDataPlatformProductMasterBPPlantDocData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterBPPlantDocData = append(o.R.BusinessPartnerDataPlatformProductMasterBPPlantDocData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductMasterProductionData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductMasterProductionData.
func (o *DataPlatformProductMasterBPPlantDatum) AddBusinessPartnerDataPlatformProductMasterProductionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterProductionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_production_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			BusinessPartnerDataPlatformProductMasterProductionData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterProductionData = append(o.R.BusinessPartnerDataPlatformProductMasterProductionData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductStockProductStockAvailabilityData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductStockProductStockAvailabilityData.
func (o *DataPlatformProductMasterBPPlantDatum) AddBusinessPartnerDataPlatformProductStockProductStockAvailabilityData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockAvailabilityDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_availability_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockAvailabilityDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.ProductStockAvailabilityDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			BusinessPartnerDataPlatformProductStockProductStockAvailabilityData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductStockProductStockAvailabilityData = append(o.R.BusinessPartnerDataPlatformProductStockProductStockAvailabilityData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductStockProductStockByStorageBinData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductStockProductStockByStorageBinData.
func (o *DataPlatformProductMasterBPPlantDatum) AddBusinessPartnerDataPlatformProductStockProductStockByStorageBinData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockByStorageBinDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_by_storage_bin_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockByStorageBinDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant, rel.StorageLocation, rel.StorageBin, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			BusinessPartnerDataPlatformProductStockProductStockByStorageBinData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductStockProductStockByStorageBinData = append(o.R.BusinessPartnerDataPlatformProductStockProductStockByStorageBinData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductStockProductStockData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductStockProductStockData.
func (o *DataPlatformProductMasterBPPlantDatum) AddBusinessPartnerDataPlatformProductStockProductStockData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.InventoryStockType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			BusinessPartnerDataPlatformProductStockProductStockData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductStockProductStockData = append(o.R.BusinessPartnerDataPlatformProductStockProductStockData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductStockProductStockDocData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductStockProductStockDocData.
func (o *DataPlatformProductMasterBPPlantDatum) AddBusinessPartnerDataPlatformProductStockProductStockDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			BusinessPartnerDataPlatformProductStockProductStockDocData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductStockProductStockDocData = append(o.R.BusinessPartnerDataPlatformProductStockProductStockDocData, related...)
	}

	return nil
}

// AddComponentProductDataPlatformProductionOrderItemComponentData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductDataPlatformProductionOrderItemComponentData.
func (o *DataPlatformProductMasterBPPlantDatum) AddComponentProductDataPlatformProductionOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProduct = o.Product
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProduct"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Product, rel.ProductionOrder, rel.ProductionOrderItem, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProduct = o.Product
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			ComponentProductDataPlatformProductionOrderItemComponentData: related,
		}
	} else {
		o.R.ComponentProductDataPlatformProductionOrderItemComponentData = append(o.R.ComponentProductDataPlatformProductionOrderItemComponentData, related...)
	}

	return nil
}

// AddOwnerBusinessPartnerDataPlatformProductionVersionHeaderData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.OwnerBusinessPartnerDataPlatformProductionVersionHeaderData.
func (o *DataPlatformProductMasterBPPlantDatum) AddOwnerBusinessPartnerDataPlatformProductionVersionHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionVersionHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OwnerBusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_version_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OwnerBusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionVersionHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.ProductionVersion}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OwnerBusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			OwnerBusinessPartnerDataPlatformProductionVersionHeaderData: related,
		}
	} else {
		o.R.OwnerBusinessPartnerDataPlatformProductionVersionHeaderData = append(o.R.OwnerBusinessPartnerDataPlatformProductionVersionHeaderData, related...)
	}

	return nil
}

// AddDeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData.
func (o *DataPlatformProductMasterBPPlantDatum) AddDeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRDeliveryPlantRelationProductDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeliverToParty = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_delivery_plant_relation_product_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRDeliveryPlantRelationProductDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.SupplyChainRelationshipID, rel.SupplyChainRelationshipDeliveryID, rel.SupplyChainRelationshipDeliveryPlantID, rel.Buyer, rel.Seller, rel.DeliverToParty, rel.DeliverFromParty, rel.DeliverToPlant, rel.DeliverFromPlant, rel.Product}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeliverToParty = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData = append(o.R.DeliverToPartyDataPlatformSCRDeliveryPlantRelationProductData, related...)
	}

	return nil
}

// DataPlatformProductMasterBPPlantData retrieves all the records using an executor.
func DataPlatformProductMasterBPPlantData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_master_bp_plant_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_master_bp_plant_data`.*"})
	}

	return dataPlatformProductMasterBPPlantDatumQuery{q}
}

// FindDataPlatformProductMasterBPPlantDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductMasterBPPlantDatum(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, selectCols ...string) (*DataPlatformProductMasterBPPlantDatum, error) {
	dataPlatformProductMasterBPPlantDatumObj := &DataPlatformProductMasterBPPlantDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_master_bp_plant_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=?", sel,
	)

	q := queries.Raw(query, product, businessPartner, plant)

	err := q.Bind(ctx, exec, dataPlatformProductMasterBPPlantDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_master_bp_plant_data")
	}

	return dataPlatformProductMasterBPPlantDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductMasterBPPlantDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_bp_plant_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterBPPlantDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductMasterBPPlantDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterBPPlantDatumInsertCache[key]
	dataPlatformProductMasterBPPlantDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductMasterBPPlantDatumAllColumns,
			dataPlatformProductMasterBPPlantDatumColumnsWithDefault,
			dataPlatformProductMasterBPPlantDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_master_bp_plant_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_master_bp_plant_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_master_bp_plant_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_master_bp_plant_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.BusinessPartner,
		o.Plant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_bp_plant_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterBPPlantDatumInsertCacheMut.Lock()
		dataPlatformProductMasterBPPlantDatumInsertCache[key] = cache
		dataPlatformProductMasterBPPlantDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductMasterBPPlantDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductMasterBPPlantDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductMasterBPPlantDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductMasterBPPlantDatumUpdateCache[key]
	dataPlatformProductMasterBPPlantDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductMasterBPPlantDatumAllColumns,
			dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_master_bp_plant_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, append(wl, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_master_bp_plant_data row")
	}

	if !cached {
		dataPlatformProductMasterBPPlantDatumUpdateCacheMut.Lock()
		dataPlatformProductMasterBPPlantDatumUpdateCache[key] = cache
		dataPlatformProductMasterBPPlantDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductMasterBPPlantDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_master_bp_plant_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductMasterBPPlantDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterBPPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductMasterBPPlantDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductMasterBPPlantDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductMasterBPPlantDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_bp_plant_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterBPPlantDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductMasterBPPlantDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductMasterBPPlantDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterBPPlantDatumUpsertCache[key]
	dataPlatformProductMasterBPPlantDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductMasterBPPlantDatumAllColumns,
			dataPlatformProductMasterBPPlantDatumColumnsWithDefault,
			dataPlatformProductMasterBPPlantDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductMasterBPPlantDatumAllColumns,
			dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_master_bp_plant_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_master_bp_plant_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_master_bp_plant_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_master_bp_plant_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_master_bp_plant_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_bp_plant_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterBPPlantDatumUpsertCacheMut.Lock()
		dataPlatformProductMasterBPPlantDatumUpsertCache[key] = cache
		dataPlatformProductMasterBPPlantDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductMasterBPPlantDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductMasterBPPlantDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductMasterBPPlantDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductMasterBPPlantDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_master_bp_plant_data` WHERE `Product`=? AND `BusinessPartner`=? AND `Plant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_master_bp_plant_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductMasterBPPlantDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductMasterBPPlantDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_master_bp_plant_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductMasterBPPlantDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterBPPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_master_bp_plant_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductMasterBPPlantDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductMasterBPPlantDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductMasterBPPlantDatum(ctx, exec, o.Product, o.BusinessPartner, o.Plant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductMasterBPPlantDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductMasterBPPlantDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterBPPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_master_bp_plant_data`.* FROM `data_platform_product_master_bp_plant_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductMasterBPPlantDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductMasterBPPlantDatumExists checks if the DataPlatformProductMasterBPPlantDatum row exists.
func DataPlatformProductMasterBPPlantDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_master_bp_plant_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, businessPartner, plant)
	}
	row := exec.QueryRowContext(ctx, sql, product, businessPartner, plant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_master_bp_plant_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductMasterBPPlantDatum row exists.
func (o *DataPlatformProductMasterBPPlantDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductMasterBPPlantDatumExists(ctx, exec, o.Product, o.BusinessPartner, o.Plant)
}
