// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductMasterBPPlantDatum is an object representing the database table.
type DataPlatformProductMasterBPPlantDatum struct {
	Product                                   string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner                           int          `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                                     string       `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	AvailabilityCheckType                     string       `boil:"AvailabilityCheckType" json:"AvailabilityCheckType" toml:"AvailabilityCheckType" yaml:"AvailabilityCheckType"`
	MRPType                                   string       `boil:"MRPType" json:"MRPType" toml:"MRPType" yaml:"MRPType"`
	MRPController                             string       `boil:"MRPController" json:"MRPController" toml:"MRPController" yaml:"MRPController"`
	ReorderThresholdQuantity                  null.Float32 `boil:"ReorderThresholdQuantity" json:"ReorderThresholdQuantity,omitempty" toml:"ReorderThresholdQuantity" yaml:"ReorderThresholdQuantity,omitempty"`
	PlanningTimeFence                         null.Int     `boil:"PlanningTimeFence" json:"PlanningTimeFence,omitempty" toml:"PlanningTimeFence" yaml:"PlanningTimeFence,omitempty"`
	MRPPlanningCalendar                       null.String  `boil:"MRPPlanningCalendar" json:"MRPPlanningCalendar,omitempty" toml:"MRPPlanningCalendar" yaml:"MRPPlanningCalendar,omitempty"`
	SafetyStockQuantityInBaseUnit             null.Float32 `boil:"SafetyStockQuantityInBaseUnit" json:"SafetyStockQuantityInBaseUnit,omitempty" toml:"SafetyStockQuantityInBaseUnit" yaml:"SafetyStockQuantityInBaseUnit,omitempty"`
	SafetyDuration                            null.Int     `boil:"SafetyDuration" json:"SafetyDuration,omitempty" toml:"SafetyDuration" yaml:"SafetyDuration,omitempty"`
	MaximumStockQuantityInBaseUnit            null.Float32 `boil:"MaximumStockQuantityInBaseUnit" json:"MaximumStockQuantityInBaseUnit,omitempty" toml:"MaximumStockQuantityInBaseUnit" yaml:"MaximumStockQuantityInBaseUnit,omitempty"`
	MinumumDeliveryQuantityInBaseUnit         null.Float32 `boil:"MinumumDeliveryQuantityInBaseUnit" json:"MinumumDeliveryQuantityInBaseUnit,omitempty" toml:"MinumumDeliveryQuantityInBaseUnit" yaml:"MinumumDeliveryQuantityInBaseUnit,omitempty"`
	MinumumDeliveryLotSizeQuantityInBaseUnit  null.Float32 `boil:"MinumumDeliveryLotSizeQuantityInBaseUnit" json:"MinumumDeliveryLotSizeQuantityInBaseUnit,omitempty" toml:"MinumumDeliveryLotSizeQuantityInBaseUnit" yaml:"MinumumDeliveryLotSizeQuantityInBaseUnit,omitempty"`
	StandardDeliveryLotSizeQuantityInBaseUnit null.Float32 `boil:"StandardDeliveryLotSizeQuantityInBaseUnit" json:"StandardDeliveryLotSizeQuantityInBaseUnit,omitempty" toml:"StandardDeliveryLotSizeQuantityInBaseUnit" yaml:"StandardDeliveryLotSizeQuantityInBaseUnit,omitempty"`
	DeliveryLotSizeRoundingQuantityInBaseUnit null.Float32 `boil:"DeliveryLotSizeRoundingQuantityInBaseUnit" json:"DeliveryLotSizeRoundingQuantityInBaseUnit,omitempty" toml:"DeliveryLotSizeRoundingQuantityInBaseUnit" yaml:"DeliveryLotSizeRoundingQuantityInBaseUnit,omitempty"`
	MaximumDeliveryLotSizeQuantityInBaseUnit  null.Float32 `boil:"MaximumDeliveryLotSizeQuantityInBaseUnit" json:"MaximumDeliveryLotSizeQuantityInBaseUnit,omitempty" toml:"MaximumDeliveryLotSizeQuantityInBaseUnit" yaml:"MaximumDeliveryLotSizeQuantityInBaseUnit,omitempty"`
	MaximumDeliveryQuantityInBaseUnit         null.Float32 `boil:"MaximumDeliveryQuantityInBaseUnit" json:"MaximumDeliveryQuantityInBaseUnit,omitempty" toml:"MaximumDeliveryQuantityInBaseUnit" yaml:"MaximumDeliveryQuantityInBaseUnit,omitempty"`
	DeliveryLotSizeIsFixed                    null.Bool    `boil:"DeliveryLotSizeIsFixed" json:"DeliveryLotSizeIsFixed,omitempty" toml:"DeliveryLotSizeIsFixed" yaml:"DeliveryLotSizeIsFixed,omitempty"`
	StandardDeliveryDurationInDays            null.Int     `boil:"StandardDeliveryDurationInDays" json:"StandardDeliveryDurationInDays,omitempty" toml:"StandardDeliveryDurationInDays" yaml:"StandardDeliveryDurationInDays,omitempty"`
	IsBatchManagementRequired                 null.Bool    `boil:"IsBatchManagementRequired" json:"IsBatchManagementRequired,omitempty" toml:"IsBatchManagementRequired" yaml:"IsBatchManagementRequired,omitempty"`
	BatchManagementPolicy                     null.String  `boil:"BatchManagementPolicy" json:"BatchManagementPolicy,omitempty" toml:"BatchManagementPolicy" yaml:"BatchManagementPolicy,omitempty"`
	InventoryUnit                             null.String  `boil:"InventoryUnit" json:"InventoryUnit,omitempty" toml:"InventoryUnit" yaml:"InventoryUnit,omitempty"`
	ProfitCenter                              null.String  `boil:"ProfitCenter" json:"ProfitCenter,omitempty" toml:"ProfitCenter" yaml:"ProfitCenter,omitempty"`
	IsMarkedForDeletion                       null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductMasterBPPlantDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductMasterBPPlantDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductMasterBPPlantDatumColumns = struct {
	Product                                   string
	BusinessPartner                           string
	Plant                                     string
	AvailabilityCheckType                     string
	MRPType                                   string
	MRPController                             string
	ReorderThresholdQuantity                  string
	PlanningTimeFence                         string
	MRPPlanningCalendar                       string
	SafetyStockQuantityInBaseUnit             string
	SafetyDuration                            string
	MaximumStockQuantityInBaseUnit            string
	MinumumDeliveryQuantityInBaseUnit         string
	MinumumDeliveryLotSizeQuantityInBaseUnit  string
	StandardDeliveryLotSizeQuantityInBaseUnit string
	DeliveryLotSizeRoundingQuantityInBaseUnit string
	MaximumDeliveryLotSizeQuantityInBaseUnit  string
	MaximumDeliveryQuantityInBaseUnit         string
	DeliveryLotSizeIsFixed                    string
	StandardDeliveryDurationInDays            string
	IsBatchManagementRequired                 string
	BatchManagementPolicy                     string
	InventoryUnit                             string
	ProfitCenter                              string
	IsMarkedForDeletion                       string
}{
	Product:                                   "Product",
	BusinessPartner:                           "BusinessPartner",
	Plant:                                     "Plant",
	AvailabilityCheckType:                     "AvailabilityCheckType",
	MRPType:                                   "MRPType",
	MRPController:                             "MRPController",
	ReorderThresholdQuantity:                  "ReorderThresholdQuantity",
	PlanningTimeFence:                         "PlanningTimeFence",
	MRPPlanningCalendar:                       "MRPPlanningCalendar",
	SafetyStockQuantityInBaseUnit:             "SafetyStockQuantityInBaseUnit",
	SafetyDuration:                            "SafetyDuration",
	MaximumStockQuantityInBaseUnit:            "MaximumStockQuantityInBaseUnit",
	MinumumDeliveryQuantityInBaseUnit:         "MinumumDeliveryQuantityInBaseUnit",
	MinumumDeliveryLotSizeQuantityInBaseUnit:  "MinumumDeliveryLotSizeQuantityInBaseUnit",
	StandardDeliveryLotSizeQuantityInBaseUnit: "StandardDeliveryLotSizeQuantityInBaseUnit",
	DeliveryLotSizeRoundingQuantityInBaseUnit: "DeliveryLotSizeRoundingQuantityInBaseUnit",
	MaximumDeliveryLotSizeQuantityInBaseUnit:  "MaximumDeliveryLotSizeQuantityInBaseUnit",
	MaximumDeliveryQuantityInBaseUnit:         "MaximumDeliveryQuantityInBaseUnit",
	DeliveryLotSizeIsFixed:                    "DeliveryLotSizeIsFixed",
	StandardDeliveryDurationInDays:            "StandardDeliveryDurationInDays",
	IsBatchManagementRequired:                 "IsBatchManagementRequired",
	BatchManagementPolicy:                     "BatchManagementPolicy",
	InventoryUnit:                             "InventoryUnit",
	ProfitCenter:                              "ProfitCenter",
	IsMarkedForDeletion:                       "IsMarkedForDeletion",
}

var DataPlatformProductMasterBPPlantDatumTableColumns = struct {
	Product                                   string
	BusinessPartner                           string
	Plant                                     string
	AvailabilityCheckType                     string
	MRPType                                   string
	MRPController                             string
	ReorderThresholdQuantity                  string
	PlanningTimeFence                         string
	MRPPlanningCalendar                       string
	SafetyStockQuantityInBaseUnit             string
	SafetyDuration                            string
	MaximumStockQuantityInBaseUnit            string
	MinumumDeliveryQuantityInBaseUnit         string
	MinumumDeliveryLotSizeQuantityInBaseUnit  string
	StandardDeliveryLotSizeQuantityInBaseUnit string
	DeliveryLotSizeRoundingQuantityInBaseUnit string
	MaximumDeliveryLotSizeQuantityInBaseUnit  string
	MaximumDeliveryQuantityInBaseUnit         string
	DeliveryLotSizeIsFixed                    string
	StandardDeliveryDurationInDays            string
	IsBatchManagementRequired                 string
	BatchManagementPolicy                     string
	InventoryUnit                             string
	ProfitCenter                              string
	IsMarkedForDeletion                       string
}{
	Product:                                   "data_platform_product_master_bp_plant_data.Product",
	BusinessPartner:                           "data_platform_product_master_bp_plant_data.BusinessPartner",
	Plant:                                     "data_platform_product_master_bp_plant_data.Plant",
	AvailabilityCheckType:                     "data_platform_product_master_bp_plant_data.AvailabilityCheckType",
	MRPType:                                   "data_platform_product_master_bp_plant_data.MRPType",
	MRPController:                             "data_platform_product_master_bp_plant_data.MRPController",
	ReorderThresholdQuantity:                  "data_platform_product_master_bp_plant_data.ReorderThresholdQuantity",
	PlanningTimeFence:                         "data_platform_product_master_bp_plant_data.PlanningTimeFence",
	MRPPlanningCalendar:                       "data_platform_product_master_bp_plant_data.MRPPlanningCalendar",
	SafetyStockQuantityInBaseUnit:             "data_platform_product_master_bp_plant_data.SafetyStockQuantityInBaseUnit",
	SafetyDuration:                            "data_platform_product_master_bp_plant_data.SafetyDuration",
	MaximumStockQuantityInBaseUnit:            "data_platform_product_master_bp_plant_data.MaximumStockQuantityInBaseUnit",
	MinumumDeliveryQuantityInBaseUnit:         "data_platform_product_master_bp_plant_data.MinumumDeliveryQuantityInBaseUnit",
	MinumumDeliveryLotSizeQuantityInBaseUnit:  "data_platform_product_master_bp_plant_data.MinumumDeliveryLotSizeQuantityInBaseUnit",
	StandardDeliveryLotSizeQuantityInBaseUnit: "data_platform_product_master_bp_plant_data.StandardDeliveryLotSizeQuantityInBaseUnit",
	DeliveryLotSizeRoundingQuantityInBaseUnit: "data_platform_product_master_bp_plant_data.DeliveryLotSizeRoundingQuantityInBaseUnit",
	MaximumDeliveryLotSizeQuantityInBaseUnit:  "data_platform_product_master_bp_plant_data.MaximumDeliveryLotSizeQuantityInBaseUnit",
	MaximumDeliveryQuantityInBaseUnit:         "data_platform_product_master_bp_plant_data.MaximumDeliveryQuantityInBaseUnit",
	DeliveryLotSizeIsFixed:                    "data_platform_product_master_bp_plant_data.DeliveryLotSizeIsFixed",
	StandardDeliveryDurationInDays:            "data_platform_product_master_bp_plant_data.StandardDeliveryDurationInDays",
	IsBatchManagementRequired:                 "data_platform_product_master_bp_plant_data.IsBatchManagementRequired",
	BatchManagementPolicy:                     "data_platform_product_master_bp_plant_data.BatchManagementPolicy",
	InventoryUnit:                             "data_platform_product_master_bp_plant_data.InventoryUnit",
	ProfitCenter:                              "data_platform_product_master_bp_plant_data.ProfitCenter",
	IsMarkedForDeletion:                       "data_platform_product_master_bp_plant_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductMasterBPPlantDatumWhere = struct {
	Product                                   whereHelperstring
	BusinessPartner                           whereHelperint
	Plant                                     whereHelperstring
	AvailabilityCheckType                     whereHelperstring
	MRPType                                   whereHelperstring
	MRPController                             whereHelperstring
	ReorderThresholdQuantity                  whereHelpernull_Float32
	PlanningTimeFence                         whereHelpernull_Int
	MRPPlanningCalendar                       whereHelpernull_String
	SafetyStockQuantityInBaseUnit             whereHelpernull_Float32
	SafetyDuration                            whereHelpernull_Int
	MaximumStockQuantityInBaseUnit            whereHelpernull_Float32
	MinumumDeliveryQuantityInBaseUnit         whereHelpernull_Float32
	MinumumDeliveryLotSizeQuantityInBaseUnit  whereHelpernull_Float32
	StandardDeliveryLotSizeQuantityInBaseUnit whereHelpernull_Float32
	DeliveryLotSizeRoundingQuantityInBaseUnit whereHelpernull_Float32
	MaximumDeliveryLotSizeQuantityInBaseUnit  whereHelpernull_Float32
	MaximumDeliveryQuantityInBaseUnit         whereHelpernull_Float32
	DeliveryLotSizeIsFixed                    whereHelpernull_Bool
	StandardDeliveryDurationInDays            whereHelpernull_Int
	IsBatchManagementRequired                 whereHelpernull_Bool
	BatchManagementPolicy                     whereHelpernull_String
	InventoryUnit                             whereHelpernull_String
	ProfitCenter                              whereHelpernull_String
	IsMarkedForDeletion                       whereHelpernull_Bool
}{
	Product:                                   whereHelperstring{field: "`data_platform_product_master_bp_plant_data`.`Product`"},
	BusinessPartner:                           whereHelperint{field: "`data_platform_product_master_bp_plant_data`.`BusinessPartner`"},
	Plant:                                     whereHelperstring{field: "`data_platform_product_master_bp_plant_data`.`Plant`"},
	AvailabilityCheckType:                     whereHelperstring{field: "`data_platform_product_master_bp_plant_data`.`AvailabilityCheckType`"},
	MRPType:                                   whereHelperstring{field: "`data_platform_product_master_bp_plant_data`.`MRPType`"},
	MRPController:                             whereHelperstring{field: "`data_platform_product_master_bp_plant_data`.`MRPController`"},
	ReorderThresholdQuantity:                  whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`ReorderThresholdQuantity`"},
	PlanningTimeFence:                         whereHelpernull_Int{field: "`data_platform_product_master_bp_plant_data`.`PlanningTimeFence`"},
	MRPPlanningCalendar:                       whereHelpernull_String{field: "`data_platform_product_master_bp_plant_data`.`MRPPlanningCalendar`"},
	SafetyStockQuantityInBaseUnit:             whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`SafetyStockQuantityInBaseUnit`"},
	SafetyDuration:                            whereHelpernull_Int{field: "`data_platform_product_master_bp_plant_data`.`SafetyDuration`"},
	MaximumStockQuantityInBaseUnit:            whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`MaximumStockQuantityInBaseUnit`"},
	MinumumDeliveryQuantityInBaseUnit:         whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`MinumumDeliveryQuantityInBaseUnit`"},
	MinumumDeliveryLotSizeQuantityInBaseUnit:  whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`MinumumDeliveryLotSizeQuantityInBaseUnit`"},
	StandardDeliveryLotSizeQuantityInBaseUnit: whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`StandardDeliveryLotSizeQuantityInBaseUnit`"},
	DeliveryLotSizeRoundingQuantityInBaseUnit: whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`DeliveryLotSizeRoundingQuantityInBaseUnit`"},
	MaximumDeliveryLotSizeQuantityInBaseUnit:  whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`MaximumDeliveryLotSizeQuantityInBaseUnit`"},
	MaximumDeliveryQuantityInBaseUnit:         whereHelpernull_Float32{field: "`data_platform_product_master_bp_plant_data`.`MaximumDeliveryQuantityInBaseUnit`"},
	DeliveryLotSizeIsFixed:                    whereHelpernull_Bool{field: "`data_platform_product_master_bp_plant_data`.`DeliveryLotSizeIsFixed`"},
	StandardDeliveryDurationInDays:            whereHelpernull_Int{field: "`data_platform_product_master_bp_plant_data`.`StandardDeliveryDurationInDays`"},
	IsBatchManagementRequired:                 whereHelpernull_Bool{field: "`data_platform_product_master_bp_plant_data`.`IsBatchManagementRequired`"},
	BatchManagementPolicy:                     whereHelpernull_String{field: "`data_platform_product_master_bp_plant_data`.`BatchManagementPolicy`"},
	InventoryUnit:                             whereHelpernull_String{field: "`data_platform_product_master_bp_plant_data`.`InventoryUnit`"},
	ProfitCenter:                              whereHelpernull_String{field: "`data_platform_product_master_bp_plant_data`.`ProfitCenter`"},
	IsMarkedForDeletion:                       whereHelpernull_Bool{field: "`data_platform_product_master_bp_plant_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductMasterBPPlantDatumRels is where relationship names are stored.
var DataPlatformProductMasterBPPlantDatumRels = struct {
	BusinessPartnerDataPlatformBatchMasterRecordBatchData        string
	BusinessPartnerDataPlatformProductStockProductStockData      string
	ComponentProductDataPlatformProductionOrderItemComponentData string
}{
	BusinessPartnerDataPlatformBatchMasterRecordBatchData:        "BusinessPartnerDataPlatformBatchMasterRecordBatchData",
	BusinessPartnerDataPlatformProductStockProductStockData:      "BusinessPartnerDataPlatformProductStockProductStockData",
	ComponentProductDataPlatformProductionOrderItemComponentData: "ComponentProductDataPlatformProductionOrderItemComponentData",
}

// dataPlatformProductMasterBPPlantDatumR is where relationships are stored.
type dataPlatformProductMasterBPPlantDatumR struct {
	BusinessPartnerDataPlatformBatchMasterRecordBatchData        DataPlatformBatchMasterRecordBatchDatumSlice       `boil:"BusinessPartnerDataPlatformBatchMasterRecordBatchData" json:"BusinessPartnerDataPlatformBatchMasterRecordBatchData" toml:"BusinessPartnerDataPlatformBatchMasterRecordBatchData" yaml:"BusinessPartnerDataPlatformBatchMasterRecordBatchData"`
	BusinessPartnerDataPlatformProductStockProductStockData      DataPlatformProductStockProductStockDatumSlice     `boil:"BusinessPartnerDataPlatformProductStockProductStockData" json:"BusinessPartnerDataPlatformProductStockProductStockData" toml:"BusinessPartnerDataPlatformProductStockProductStockData" yaml:"BusinessPartnerDataPlatformProductStockProductStockData"`
	ComponentProductDataPlatformProductionOrderItemComponentData DataPlatformProductionOrderItemComponentDatumSlice `boil:"ComponentProductDataPlatformProductionOrderItemComponentData" json:"ComponentProductDataPlatformProductionOrderItemComponentData" toml:"ComponentProductDataPlatformProductionOrderItemComponentData" yaml:"ComponentProductDataPlatformProductionOrderItemComponentData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductMasterBPPlantDatumR) NewStruct() *dataPlatformProductMasterBPPlantDatumR {
	return &dataPlatformProductMasterBPPlantDatumR{}
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetBusinessPartnerDataPlatformBatchMasterRecordBatchData() DataPlatformBatchMasterRecordBatchDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBatchMasterRecordBatchData
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetBusinessPartnerDataPlatformProductStockProductStockData() DataPlatformProductStockProductStockDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductStockProductStockData
}

func (r *dataPlatformProductMasterBPPlantDatumR) GetComponentProductDataPlatformProductionOrderItemComponentData() DataPlatformProductionOrderItemComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ComponentProductDataPlatformProductionOrderItemComponentData
}

// dataPlatformProductMasterBPPlantDatumL is where Load methods for each relationship are stored.
type dataPlatformProductMasterBPPlantDatumL struct{}

var (
	dataPlatformProductMasterBPPlantDatumAllColumns            = []string{"Product", "BusinessPartner", "Plant", "AvailabilityCheckType", "MRPType", "MRPController", "ReorderThresholdQuantity", "PlanningTimeFence", "MRPPlanningCalendar", "SafetyStockQuantityInBaseUnit", "SafetyDuration", "MaximumStockQuantityInBaseUnit", "MinumumDeliveryQuantityInBaseUnit", "MinumumDeliveryLotSizeQuantityInBaseUnit", "StandardDeliveryLotSizeQuantityInBaseUnit", "DeliveryLotSizeRoundingQuantityInBaseUnit", "MaximumDeliveryLotSizeQuantityInBaseUnit", "MaximumDeliveryQuantityInBaseUnit", "DeliveryLotSizeIsFixed", "StandardDeliveryDurationInDays", "IsBatchManagementRequired", "BatchManagementPolicy", "InventoryUnit", "ProfitCenter", "IsMarkedForDeletion"}
	dataPlatformProductMasterBPPlantDatumColumnsWithoutDefault = []string{"Product", "BusinessPartner", "Plant", "AvailabilityCheckType", "MRPType", "MRPController", "ReorderThresholdQuantity", "PlanningTimeFence", "MRPPlanningCalendar", "SafetyStockQuantityInBaseUnit", "SafetyDuration", "MaximumStockQuantityInBaseUnit", "MinumumDeliveryQuantityInBaseUnit", "MinumumDeliveryLotSizeQuantityInBaseUnit", "StandardDeliveryLotSizeQuantityInBaseUnit", "DeliveryLotSizeRoundingQuantityInBaseUnit", "MaximumDeliveryLotSizeQuantityInBaseUnit", "MaximumDeliveryQuantityInBaseUnit", "DeliveryLotSizeIsFixed", "StandardDeliveryDurationInDays", "IsBatchManagementRequired", "BatchManagementPolicy", "InventoryUnit", "ProfitCenter", "IsMarkedForDeletion"}
	dataPlatformProductMasterBPPlantDatumColumnsWithDefault    = []string{}
	dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns     = []string{"Product", "BusinessPartner", "Plant"}
	dataPlatformProductMasterBPPlantDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductMasterBPPlantDatumSlice is an alias for a slice of pointers to DataPlatformProductMasterBPPlantDatum.
	// This should almost always be used instead of []DataPlatformProductMasterBPPlantDatum.
	DataPlatformProductMasterBPPlantDatumSlice []*DataPlatformProductMasterBPPlantDatum

	dataPlatformProductMasterBPPlantDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductMasterBPPlantDatumType                 = reflect.TypeOf(&DataPlatformProductMasterBPPlantDatum{})
	dataPlatformProductMasterBPPlantDatumMapping              = queries.MakeStructMapping(dataPlatformProductMasterBPPlantDatumType)
	dataPlatformProductMasterBPPlantDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns)
	dataPlatformProductMasterBPPlantDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductMasterBPPlantDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductMasterBPPlantDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductMasterBPPlantDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductMasterBPPlantDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductMasterBPPlantDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductMasterBPPlantDatum record from the query.
func (q dataPlatformProductMasterBPPlantDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductMasterBPPlantDatum, error) {
	o := &DataPlatformProductMasterBPPlantDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_master_bp_plant_data")
	}

	return o, nil
}

// All returns all DataPlatformProductMasterBPPlantDatum records from the query.
func (q dataPlatformProductMasterBPPlantDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductMasterBPPlantDatumSlice, error) {
	var o []*DataPlatformProductMasterBPPlantDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductMasterBPPlantDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductMasterBPPlantDatum records in the query.
func (q dataPlatformProductMasterBPPlantDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_master_bp_plant_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductMasterBPPlantDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_master_bp_plant_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformBatchMasterRecordBatchData retrieves all the data_platform_batch_master_record_batch_datum's DataPlatformBatchMasterRecordBatchData with an executor via BusinessPartner column.
func (o *DataPlatformProductMasterBPPlantDatum) BusinessPartnerDataPlatformBatchMasterRecordBatchData(mods ...qm.QueryMod) dataPlatformBatchMasterRecordBatchDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_batch_master_record_batch_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBatchMasterRecordBatchData(queryMods...)
}

// BusinessPartnerDataPlatformProductStockProductStockData retrieves all the data_platform_product_stock_product_stock_datum's DataPlatformProductStockProductStockData with an executor via BusinessPartner column.
func (o *DataPlatformProductMasterBPPlantDatum) BusinessPartnerDataPlatformProductStockProductStockData(mods ...qm.QueryMod) dataPlatformProductStockProductStockDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformProductStockProductStockData(queryMods...)
}

// ComponentProductDataPlatformProductionOrderItemComponentData retrieves all the data_platform_production_order_item_component_datum's DataPlatformProductionOrderItemComponentData with an executor via ComponentProduct column.
func (o *DataPlatformProductMasterBPPlantDatum) ComponentProductDataPlatformProductionOrderItemComponentData(mods ...qm.QueryMod) dataPlatformProductionOrderItemComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_component_data`.`ComponentProduct`=?", o.Product),
	)

	return DataPlatformProductionOrderItemComponentData(queryMods...)
}

// LoadBusinessPartnerDataPlatformBatchMasterRecordBatchData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadBusinessPartnerDataPlatformBatchMasterRecordBatchData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_batch_master_record_batch_data`),
		qm.WhereIn(`data_platform_batch_master_record_batch_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_batch_master_record_batch_data")
	}

	var resultSlice []*DataPlatformBatchMasterRecordBatchDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_batch_master_record_batch_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_batch_master_record_batch_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_batch_master_record_batch_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformBatchMasterRecordBatchData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBatchMasterRecordBatchData = append(local.R.BusinessPartnerDataPlatformBatchMasterRecordBatchData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformProductStockProductStockData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadBusinessPartnerDataPlatformProductStockProductStockData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_data`),
		qm.WhereIn(`data_platform_product_stock_product_stock_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_data")
	}

	var resultSlice []*DataPlatformProductStockProductStockDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_data")
	}

	if singular {
		object.R.BusinessPartnerDataPlatformProductStockProductStockData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductStockProductStockData = append(local.R.BusinessPartnerDataPlatformProductStockProductStockData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadComponentProductDataPlatformProductionOrderItemComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterBPPlantDatumL) LoadComponentProductDataPlatformProductionOrderItemComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterBPPlantDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterBPPlantDatum
	var object *DataPlatformProductMasterBPPlantDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterBPPlantDatum.(*DataPlatformProductMasterBPPlantDatum)
		if !ok {
			object = new(DataPlatformProductMasterBPPlantDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterBPPlantDatum.(*[]*DataPlatformProductMasterBPPlantDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterBPPlantDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterBPPlantDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterBPPlantDatumR{}
		}
		args = append(args, object.Product)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterBPPlantDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_component_data`),
		qm.WhereIn(`data_platform_production_order_item_component_data.ComponentProduct in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_component_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_component_data")
	}

	if singular {
		object.R.ComponentProductDataPlatformProductionOrderItemComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Product == foreign.ComponentProduct {
				local.R.ComponentProductDataPlatformProductionOrderItemComponentData = append(local.R.ComponentProductDataPlatformProductionOrderItemComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// AddBusinessPartnerDataPlatformBatchMasterRecordBatchData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBatchMasterRecordBatchData.
func (o *DataPlatformProductMasterBPPlantDatum) AddBusinessPartnerDataPlatformBatchMasterRecordBatchData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBatchMasterRecordBatchDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_batch_master_record_batch_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBatchMasterRecordBatchDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant, rel.Batch}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			BusinessPartnerDataPlatformBatchMasterRecordBatchData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBatchMasterRecordBatchData = append(o.R.BusinessPartnerDataPlatformBatchMasterRecordBatchData, related...)
	}

	return nil
}

// AddBusinessPartnerDataPlatformProductStockProductStockData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformProductStockProductStockData.
func (o *DataPlatformProductMasterBPPlantDatum) AddBusinessPartnerDataPlatformProductStockProductStockData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			BusinessPartnerDataPlatformProductStockProductStockData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductStockProductStockData = append(o.R.BusinessPartnerDataPlatformProductStockProductStockData, related...)
	}

	return nil
}

// AddComponentProductDataPlatformProductionOrderItemComponentData adds the given related objects to the existing relationships
// of the data_platform_product_master_bp_plant_datum, optionally inserting them as new records.
// Appends related to o.R.ComponentProductDataPlatformProductionOrderItemComponentData.
func (o *DataPlatformProductMasterBPPlantDatum) AddComponentProductDataPlatformProductionOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ComponentProduct = o.Product
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ComponentProduct"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Product, rel.ProductionOrder, rel.ProductionOrderItem, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ComponentProduct = o.Product
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterBPPlantDatumR{
			ComponentProductDataPlatformProductionOrderItemComponentData: related,
		}
	} else {
		o.R.ComponentProductDataPlatformProductionOrderItemComponentData = append(o.R.ComponentProductDataPlatformProductionOrderItemComponentData, related...)
	}

	return nil
}

// DataPlatformProductMasterBPPlantData retrieves all the records using an executor.
func DataPlatformProductMasterBPPlantData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_master_bp_plant_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_master_bp_plant_data`.*"})
	}

	return dataPlatformProductMasterBPPlantDatumQuery{q}
}

// FindDataPlatformProductMasterBPPlantDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductMasterBPPlantDatum(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, selectCols ...string) (*DataPlatformProductMasterBPPlantDatum, error) {
	dataPlatformProductMasterBPPlantDatumObj := &DataPlatformProductMasterBPPlantDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_master_bp_plant_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=?", sel,
	)

	q := queries.Raw(query, product, businessPartner, plant)

	err := q.Bind(ctx, exec, dataPlatformProductMasterBPPlantDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_master_bp_plant_data")
	}

	return dataPlatformProductMasterBPPlantDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductMasterBPPlantDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_bp_plant_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterBPPlantDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductMasterBPPlantDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterBPPlantDatumInsertCache[key]
	dataPlatformProductMasterBPPlantDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductMasterBPPlantDatumAllColumns,
			dataPlatformProductMasterBPPlantDatumColumnsWithDefault,
			dataPlatformProductMasterBPPlantDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_master_bp_plant_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_master_bp_plant_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_master_bp_plant_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_master_bp_plant_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.BusinessPartner,
		o.Plant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_bp_plant_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterBPPlantDatumInsertCacheMut.Lock()
		dataPlatformProductMasterBPPlantDatumInsertCache[key] = cache
		dataPlatformProductMasterBPPlantDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductMasterBPPlantDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductMasterBPPlantDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductMasterBPPlantDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductMasterBPPlantDatumUpdateCache[key]
	dataPlatformProductMasterBPPlantDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductMasterBPPlantDatumAllColumns,
			dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_master_bp_plant_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, append(wl, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_master_bp_plant_data row")
	}

	if !cached {
		dataPlatformProductMasterBPPlantDatumUpdateCacheMut.Lock()
		dataPlatformProductMasterBPPlantDatumUpdateCache[key] = cache
		dataPlatformProductMasterBPPlantDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductMasterBPPlantDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_master_bp_plant_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductMasterBPPlantDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterBPPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductMasterBPPlantDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductMasterBPPlantDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductMasterBPPlantDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_bp_plant_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterBPPlantDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductMasterBPPlantDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductMasterBPPlantDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterBPPlantDatumUpsertCache[key]
	dataPlatformProductMasterBPPlantDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductMasterBPPlantDatumAllColumns,
			dataPlatformProductMasterBPPlantDatumColumnsWithDefault,
			dataPlatformProductMasterBPPlantDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductMasterBPPlantDatumAllColumns,
			dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_master_bp_plant_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_master_bp_plant_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_master_bp_plant_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_master_bp_plant_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductMasterBPPlantDatumType, dataPlatformProductMasterBPPlantDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_master_bp_plant_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_bp_plant_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterBPPlantDatumUpsertCacheMut.Lock()
		dataPlatformProductMasterBPPlantDatumUpsertCache[key] = cache
		dataPlatformProductMasterBPPlantDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductMasterBPPlantDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductMasterBPPlantDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductMasterBPPlantDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductMasterBPPlantDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_master_bp_plant_data` WHERE `Product`=? AND `BusinessPartner`=? AND `Plant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_master_bp_plant_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductMasterBPPlantDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductMasterBPPlantDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_master_bp_plant_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductMasterBPPlantDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterBPPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_master_bp_plant_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductMasterBPPlantDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductMasterBPPlantDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductMasterBPPlantDatum(ctx, exec, o.Product, o.BusinessPartner, o.Plant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductMasterBPPlantDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductMasterBPPlantDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterBPPlantDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_master_bp_plant_data`.* FROM `data_platform_product_master_bp_plant_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductMasterBPPlantDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductMasterBPPlantDatumExists checks if the DataPlatformProductMasterBPPlantDatum row exists.
func DataPlatformProductMasterBPPlantDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_master_bp_plant_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, businessPartner, plant)
	}
	row := exec.QueryRowContext(ctx, sql, product, businessPartner, plant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_master_bp_plant_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductMasterBPPlantDatum row exists.
func (o *DataPlatformProductMasterBPPlantDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductMasterBPPlantDatumExists(ctx, exec, o.Product, o.BusinessPartner, o.Plant)
}
