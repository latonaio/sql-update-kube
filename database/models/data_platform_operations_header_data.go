// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformOperationsHeaderDatum is an object representing the database table.
type DataPlatformOperationsHeaderDatum struct {
	Operations                               int         `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	SupplyChainRelationshipID                int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID        int         `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID   int         `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipProductionPlantID int         `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID"`
	Product                                  string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Buyer                                    int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                   int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DepartureDeliverFromParty                int         `boil:"DepartureDeliverFromParty" json:"DepartureDeliverFromParty" toml:"DepartureDeliverFromParty" yaml:"DepartureDeliverFromParty"`
	DepartureDeliverFromPlant                string      `boil:"DepartureDeliverFromPlant" json:"DepartureDeliverFromPlant" toml:"DepartureDeliverFromPlant" yaml:"DepartureDeliverFromPlant"`
	DestinationDeliverToParty                int         `boil:"DestinationDeliverToParty" json:"DestinationDeliverToParty" toml:"DestinationDeliverToParty" yaml:"DestinationDeliverToParty"`
	DestinationDeliverToPlant                string      `boil:"DestinationDeliverToPlant" json:"DestinationDeliverToPlant" toml:"DestinationDeliverToPlant" yaml:"DestinationDeliverToPlant"`
	OwnerProductionPlantBusinessPartner      int         `boil:"OwnerProductionPlantBusinessPartner" json:"OwnerProductionPlantBusinessPartner" toml:"OwnerProductionPlantBusinessPartner" yaml:"OwnerProductionPlantBusinessPartner"`
	OwnerProductionPlant                     string      `boil:"OwnerProductionPlant" json:"OwnerProductionPlant" toml:"OwnerProductionPlant" yaml:"OwnerProductionPlant"`
	ProductBaseUnit                          string      `boil:"ProductBaseUnit" json:"ProductBaseUnit" toml:"ProductBaseUnit" yaml:"ProductBaseUnit"`
	ProductDeliveryUnit                      string      `boil:"ProductDeliveryUnit" json:"ProductDeliveryUnit" toml:"ProductDeliveryUnit" yaml:"ProductDeliveryUnit"`
	ProductProductionUnit                    string      `boil:"ProductProductionUnit" json:"ProductProductionUnit" toml:"ProductProductionUnit" yaml:"ProductProductionUnit"`
	OperationsText                           string      `boil:"OperationsText" json:"OperationsText" toml:"OperationsText" yaml:"OperationsText"`
	OperationsStatus                         null.String `boil:"OperationsStatus" json:"OperationsStatus,omitempty" toml:"OperationsStatus" yaml:"OperationsStatus,omitempty"`
	ResponsiblePlannerGroup                  null.String `boil:"ResponsiblePlannerGroup" json:"ResponsiblePlannerGroup,omitempty" toml:"ResponsiblePlannerGroup" yaml:"ResponsiblePlannerGroup,omitempty"`
	PlainLongText                            null.String `boil:"PlainLongText" json:"PlainLongText,omitempty" toml:"PlainLongText" yaml:"PlainLongText,omitempty"`
	ValidityStartDate                        null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate                          null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	CreationDate                             string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                           string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                      null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformOperationsHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformOperationsHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformOperationsHeaderDatumColumns = struct {
	Operations                               string
	SupplyChainRelationshipID                string
	SupplyChainRelationshipDeliveryID        string
	SupplyChainRelationshipDeliveryPlantID   string
	SupplyChainRelationshipProductionPlantID string
	Product                                  string
	Buyer                                    string
	Seller                                   string
	DepartureDeliverFromParty                string
	DepartureDeliverFromPlant                string
	DestinationDeliverToParty                string
	DestinationDeliverToPlant                string
	OwnerProductionPlantBusinessPartner      string
	OwnerProductionPlant                     string
	ProductBaseUnit                          string
	ProductDeliveryUnit                      string
	ProductProductionUnit                    string
	OperationsText                           string
	OperationsStatus                         string
	ResponsiblePlannerGroup                  string
	PlainLongText                            string
	ValidityStartDate                        string
	ValidityEndDate                          string
	CreationDate                             string
	LastChangeDate                           string
	IsMarkedForDeletion                      string
}{
	Operations:                               "Operations",
	SupplyChainRelationshipID:                "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:        "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:   "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID: "SupplyChainRelationshipProductionPlantID",
	Product:                                  "Product",
	Buyer:                                    "Buyer",
	Seller:                                   "Seller",
	DepartureDeliverFromParty:                "DepartureDeliverFromParty",
	DepartureDeliverFromPlant:                "DepartureDeliverFromPlant",
	DestinationDeliverToParty:                "DestinationDeliverToParty",
	DestinationDeliverToPlant:                "DestinationDeliverToPlant",
	OwnerProductionPlantBusinessPartner:      "OwnerProductionPlantBusinessPartner",
	OwnerProductionPlant:                     "OwnerProductionPlant",
	ProductBaseUnit:                          "ProductBaseUnit",
	ProductDeliveryUnit:                      "ProductDeliveryUnit",
	ProductProductionUnit:                    "ProductProductionUnit",
	OperationsText:                           "OperationsText",
	OperationsStatus:                         "OperationsStatus",
	ResponsiblePlannerGroup:                  "ResponsiblePlannerGroup",
	PlainLongText:                            "PlainLongText",
	ValidityStartDate:                        "ValidityStartDate",
	ValidityEndDate:                          "ValidityEndDate",
	CreationDate:                             "CreationDate",
	LastChangeDate:                           "LastChangeDate",
	IsMarkedForDeletion:                      "IsMarkedForDeletion",
}

var DataPlatformOperationsHeaderDatumTableColumns = struct {
	Operations                               string
	SupplyChainRelationshipID                string
	SupplyChainRelationshipDeliveryID        string
	SupplyChainRelationshipDeliveryPlantID   string
	SupplyChainRelationshipProductionPlantID string
	Product                                  string
	Buyer                                    string
	Seller                                   string
	DepartureDeliverFromParty                string
	DepartureDeliverFromPlant                string
	DestinationDeliverToParty                string
	DestinationDeliverToPlant                string
	OwnerProductionPlantBusinessPartner      string
	OwnerProductionPlant                     string
	ProductBaseUnit                          string
	ProductDeliveryUnit                      string
	ProductProductionUnit                    string
	OperationsText                           string
	OperationsStatus                         string
	ResponsiblePlannerGroup                  string
	PlainLongText                            string
	ValidityStartDate                        string
	ValidityEndDate                          string
	CreationDate                             string
	LastChangeDate                           string
	IsMarkedForDeletion                      string
}{
	Operations:                               "data_platform_operations_header_data.Operations",
	SupplyChainRelationshipID:                "data_platform_operations_header_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:        "data_platform_operations_header_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:   "data_platform_operations_header_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID: "data_platform_operations_header_data.SupplyChainRelationshipProductionPlantID",
	Product:                                  "data_platform_operations_header_data.Product",
	Buyer:                                    "data_platform_operations_header_data.Buyer",
	Seller:                                   "data_platform_operations_header_data.Seller",
	DepartureDeliverFromParty:                "data_platform_operations_header_data.DepartureDeliverFromParty",
	DepartureDeliverFromPlant:                "data_platform_operations_header_data.DepartureDeliverFromPlant",
	DestinationDeliverToParty:                "data_platform_operations_header_data.DestinationDeliverToParty",
	DestinationDeliverToPlant:                "data_platform_operations_header_data.DestinationDeliverToPlant",
	OwnerProductionPlantBusinessPartner:      "data_platform_operations_header_data.OwnerProductionPlantBusinessPartner",
	OwnerProductionPlant:                     "data_platform_operations_header_data.OwnerProductionPlant",
	ProductBaseUnit:                          "data_platform_operations_header_data.ProductBaseUnit",
	ProductDeliveryUnit:                      "data_platform_operations_header_data.ProductDeliveryUnit",
	ProductProductionUnit:                    "data_platform_operations_header_data.ProductProductionUnit",
	OperationsText:                           "data_platform_operations_header_data.OperationsText",
	OperationsStatus:                         "data_platform_operations_header_data.OperationsStatus",
	ResponsiblePlannerGroup:                  "data_platform_operations_header_data.ResponsiblePlannerGroup",
	PlainLongText:                            "data_platform_operations_header_data.PlainLongText",
	ValidityStartDate:                        "data_platform_operations_header_data.ValidityStartDate",
	ValidityEndDate:                          "data_platform_operations_header_data.ValidityEndDate",
	CreationDate:                             "data_platform_operations_header_data.CreationDate",
	LastChangeDate:                           "data_platform_operations_header_data.LastChangeDate",
	IsMarkedForDeletion:                      "data_platform_operations_header_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformOperationsHeaderDatumWhere = struct {
	Operations                               whereHelperint
	SupplyChainRelationshipID                whereHelperint
	SupplyChainRelationshipDeliveryID        whereHelperint
	SupplyChainRelationshipDeliveryPlantID   whereHelperint
	SupplyChainRelationshipProductionPlantID whereHelperint
	Product                                  whereHelperstring
	Buyer                                    whereHelperint
	Seller                                   whereHelperint
	DepartureDeliverFromParty                whereHelperint
	DepartureDeliverFromPlant                whereHelperstring
	DestinationDeliverToParty                whereHelperint
	DestinationDeliverToPlant                whereHelperstring
	OwnerProductionPlantBusinessPartner      whereHelperint
	OwnerProductionPlant                     whereHelperstring
	ProductBaseUnit                          whereHelperstring
	ProductDeliveryUnit                      whereHelperstring
	ProductProductionUnit                    whereHelperstring
	OperationsText                           whereHelperstring
	OperationsStatus                         whereHelpernull_String
	ResponsiblePlannerGroup                  whereHelpernull_String
	PlainLongText                            whereHelpernull_String
	ValidityStartDate                        whereHelpernull_String
	ValidityEndDate                          whereHelpernull_String
	CreationDate                             whereHelperstring
	LastChangeDate                           whereHelperstring
	IsMarkedForDeletion                      whereHelpernull_Bool
}{
	Operations:                               whereHelperint{field: "`data_platform_operations_header_data`.`Operations`"},
	SupplyChainRelationshipID:                whereHelperint{field: "`data_platform_operations_header_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:        whereHelperint{field: "`data_platform_operations_header_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:   whereHelperint{field: "`data_platform_operations_header_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipProductionPlantID: whereHelperint{field: "`data_platform_operations_header_data`.`SupplyChainRelationshipProductionPlantID`"},
	Product:                                  whereHelperstring{field: "`data_platform_operations_header_data`.`Product`"},
	Buyer:                                    whereHelperint{field: "`data_platform_operations_header_data`.`Buyer`"},
	Seller:                                   whereHelperint{field: "`data_platform_operations_header_data`.`Seller`"},
	DepartureDeliverFromParty:                whereHelperint{field: "`data_platform_operations_header_data`.`DepartureDeliverFromParty`"},
	DepartureDeliverFromPlant:                whereHelperstring{field: "`data_platform_operations_header_data`.`DepartureDeliverFromPlant`"},
	DestinationDeliverToParty:                whereHelperint{field: "`data_platform_operations_header_data`.`DestinationDeliverToParty`"},
	DestinationDeliverToPlant:                whereHelperstring{field: "`data_platform_operations_header_data`.`DestinationDeliverToPlant`"},
	OwnerProductionPlantBusinessPartner:      whereHelperint{field: "`data_platform_operations_header_data`.`OwnerProductionPlantBusinessPartner`"},
	OwnerProductionPlant:                     whereHelperstring{field: "`data_platform_operations_header_data`.`OwnerProductionPlant`"},
	ProductBaseUnit:                          whereHelperstring{field: "`data_platform_operations_header_data`.`ProductBaseUnit`"},
	ProductDeliveryUnit:                      whereHelperstring{field: "`data_platform_operations_header_data`.`ProductDeliveryUnit`"},
	ProductProductionUnit:                    whereHelperstring{field: "`data_platform_operations_header_data`.`ProductProductionUnit`"},
	OperationsText:                           whereHelperstring{field: "`data_platform_operations_header_data`.`OperationsText`"},
	OperationsStatus:                         whereHelpernull_String{field: "`data_platform_operations_header_data`.`OperationsStatus`"},
	ResponsiblePlannerGroup:                  whereHelpernull_String{field: "`data_platform_operations_header_data`.`ResponsiblePlannerGroup`"},
	PlainLongText:                            whereHelpernull_String{field: "`data_platform_operations_header_data`.`PlainLongText`"},
	ValidityStartDate:                        whereHelpernull_String{field: "`data_platform_operations_header_data`.`ValidityStartDate`"},
	ValidityEndDate:                          whereHelpernull_String{field: "`data_platform_operations_header_data`.`ValidityEndDate`"},
	CreationDate:                             whereHelperstring{field: "`data_platform_operations_header_data`.`CreationDate`"},
	LastChangeDate:                           whereHelperstring{field: "`data_platform_operations_header_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                      whereHelpernull_Bool{field: "`data_platform_operations_header_data`.`IsMarkedForDeletion`"},
}

// DataPlatformOperationsHeaderDatumRels is where relationship names are stored.
var DataPlatformOperationsHeaderDatumRels = struct {
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum       string
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum   string
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum string
	BuyerDataPlatformSCRDeliveryRelationDatum                      string
	BuyerDataPlatformSCRGeneralDatum                               string
	OperationDataPlatformOperationsItemData                        string
	OperationDataPlatformProductionOrderHeaderData                 string
	OperationDataPlatformProductionOrderItemData                   string
}{
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum:       "ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum:   "ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: "ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:                      "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:                               "BuyerDataPlatformSCRGeneralDatum",
	OperationDataPlatformOperationsItemData:                        "OperationDataPlatformOperationsItemData",
	OperationDataPlatformProductionOrderHeaderData:                 "OperationDataPlatformProductionOrderHeaderData",
	OperationDataPlatformProductionOrderItemData:                   "OperationDataPlatformProductionOrderItemData",
}

// dataPlatformOperationsHeaderDatumR is where relationships are stored.
type dataPlatformOperationsHeaderDatumR struct {
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum       *DataPlatformQuantityUnitQuantityUnitDatum  `boil:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum   *DataPlatformQuantityUnitQuantityUnitDatum  `boil:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum  `boil:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum                      *DataPlatformSCRDeliveryRelationDatum       `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum                               *DataPlatformSCRGeneralDatum                `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	OperationDataPlatformOperationsItemData                        DataPlatformOperationsItemDatumSlice        `boil:"OperationDataPlatformOperationsItemData" json:"OperationDataPlatformOperationsItemData" toml:"OperationDataPlatformOperationsItemData" yaml:"OperationDataPlatformOperationsItemData"`
	OperationDataPlatformProductionOrderHeaderData                 DataPlatformProductionOrderHeaderDatumSlice `boil:"OperationDataPlatformProductionOrderHeaderData" json:"OperationDataPlatformProductionOrderHeaderData" toml:"OperationDataPlatformProductionOrderHeaderData" yaml:"OperationDataPlatformProductionOrderHeaderData"`
	OperationDataPlatformProductionOrderItemData                   DataPlatformProductionOrderItemDatumSlice   `boil:"OperationDataPlatformProductionOrderItemData" json:"OperationDataPlatformProductionOrderItemData" toml:"OperationDataPlatformProductionOrderItemData" yaml:"OperationDataPlatformProductionOrderItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformOperationsHeaderDatumR) NewStruct() *dataPlatformOperationsHeaderDatumR {
	return &dataPlatformOperationsHeaderDatumR{}
}

func (r *dataPlatformOperationsHeaderDatumR) GetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformOperationsHeaderDatumR) GetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformOperationsHeaderDatumR) GetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformOperationsHeaderDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformOperationsHeaderDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformOperationsHeaderDatumR) GetOperationDataPlatformOperationsItemData() DataPlatformOperationsItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationDataPlatformOperationsItemData
}

func (r *dataPlatformOperationsHeaderDatumR) GetOperationDataPlatformProductionOrderHeaderData() DataPlatformProductionOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationDataPlatformProductionOrderHeaderData
}

func (r *dataPlatformOperationsHeaderDatumR) GetOperationDataPlatformProductionOrderItemData() DataPlatformProductionOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationDataPlatformProductionOrderItemData
}

// dataPlatformOperationsHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformOperationsHeaderDatumL struct{}

var (
	dataPlatformOperationsHeaderDatumAllColumns            = []string{"Operations", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "Product", "Buyer", "Seller", "DepartureDeliverFromParty", "DepartureDeliverFromPlant", "DestinationDeliverToParty", "DestinationDeliverToPlant", "OwnerProductionPlantBusinessPartner", "OwnerProductionPlant", "ProductBaseUnit", "ProductDeliveryUnit", "ProductProductionUnit", "OperationsText", "OperationsStatus", "ResponsiblePlannerGroup", "PlainLongText", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformOperationsHeaderDatumColumnsWithoutDefault = []string{"Operations", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "Product", "Buyer", "Seller", "DepartureDeliverFromParty", "DepartureDeliverFromPlant", "DestinationDeliverToParty", "DestinationDeliverToPlant", "OwnerProductionPlantBusinessPartner", "OwnerProductionPlant", "ProductBaseUnit", "ProductDeliveryUnit", "ProductProductionUnit", "OperationsText", "OperationsStatus", "ResponsiblePlannerGroup", "PlainLongText", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformOperationsHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformOperationsHeaderDatumPrimaryKeyColumns     = []string{"Operations"}
	dataPlatformOperationsHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformOperationsHeaderDatumSlice is an alias for a slice of pointers to DataPlatformOperationsHeaderDatum.
	// This should almost always be used instead of []DataPlatformOperationsHeaderDatum.
	DataPlatformOperationsHeaderDatumSlice []*DataPlatformOperationsHeaderDatum

	dataPlatformOperationsHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformOperationsHeaderDatumType                 = reflect.TypeOf(&DataPlatformOperationsHeaderDatum{})
	dataPlatformOperationsHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformOperationsHeaderDatumType)
	dataPlatformOperationsHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformOperationsHeaderDatumType, dataPlatformOperationsHeaderDatumMapping, dataPlatformOperationsHeaderDatumPrimaryKeyColumns)
	dataPlatformOperationsHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformOperationsHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformOperationsHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformOperationsHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformOperationsHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformOperationsHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformOperationsHeaderDatum record from the query.
func (q dataPlatformOperationsHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformOperationsHeaderDatum, error) {
	o := &DataPlatformOperationsHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_operations_header_data")
	}

	return o, nil
}

// All returns all DataPlatformOperationsHeaderDatum records from the query.
func (q dataPlatformOperationsHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformOperationsHeaderDatumSlice, error) {
	var o []*DataPlatformOperationsHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformOperationsHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformOperationsHeaderDatum records in the query.
func (q dataPlatformOperationsHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_operations_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformOperationsHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_operations_header_data exists")
	}

	return count > 0, nil
}

// ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformOperationsHeaderDatum) ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductBaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformOperationsHeaderDatum) ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductDeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformOperationsHeaderDatum) ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductProductionUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformOperationsHeaderDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformOperationsHeaderDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// OperationDataPlatformOperationsItemData retrieves all the data_platform_operations_item_datum's DataPlatformOperationsItemData with an executor via Operations column.
func (o *DataPlatformOperationsHeaderDatum) OperationDataPlatformOperationsItemData(mods ...qm.QueryMod) dataPlatformOperationsItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_data`.`Operations`=?", o.Operations),
	)

	return DataPlatformOperationsItemData(queryMods...)
}

// OperationDataPlatformProductionOrderHeaderData retrieves all the data_platform_production_order_header_datum's DataPlatformProductionOrderHeaderData with an executor via Operations column.
func (o *DataPlatformOperationsHeaderDatum) OperationDataPlatformProductionOrderHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_header_data`.`Operations`=?", o.Operations),
	)

	return DataPlatformProductionOrderHeaderData(queryMods...)
}

// OperationDataPlatformProductionOrderItemData retrieves all the data_platform_production_order_item_datum's DataPlatformProductionOrderItemData with an executor via Operations column.
func (o *DataPlatformOperationsHeaderDatum) OperationDataPlatformProductionOrderItemData(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_data`.`Operations`=?", o.Operations),
	)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsHeaderDatumL) LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsHeaderDatum
	var object *DataPlatformOperationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsHeaderDatum.(*DataPlatformOperationsHeaderDatum)
		if !ok {
			object = new(DataPlatformOperationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsHeaderDatum.(*[]*DataPlatformOperationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsHeaderDatumR{}
		}
		args = append(args, object.ProductBaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductBaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductBaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductBaseUnit == foreign.QuantityUnit {
				local.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsHeaderDatumL) LoadProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsHeaderDatum
	var object *DataPlatformOperationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsHeaderDatum.(*DataPlatformOperationsHeaderDatum)
		if !ok {
			object = new(DataPlatformOperationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsHeaderDatum.(*[]*DataPlatformOperationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsHeaderDatumR{}
		}
		args = append(args, object.ProductDeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductDeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductDeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductDeliveryUnit == foreign.QuantityUnit {
				local.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsHeaderDatumL) LoadProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsHeaderDatum
	var object *DataPlatformOperationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsHeaderDatum.(*DataPlatformOperationsHeaderDatum)
		if !ok {
			object = new(DataPlatformOperationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsHeaderDatum.(*[]*DataPlatformOperationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsHeaderDatumR{}
		}
		args = append(args, object.ProductProductionUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductProductionUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductProductionUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductProductionUnit == foreign.QuantityUnit {
				local.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsHeaderDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsHeaderDatum
	var object *DataPlatformOperationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsHeaderDatum.(*DataPlatformOperationsHeaderDatum)
		if !ok {
			object = new(DataPlatformOperationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsHeaderDatum.(*[]*DataPlatformOperationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOperationsHeaderDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsHeaderDatum
	var object *DataPlatformOperationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsHeaderDatum.(*DataPlatformOperationsHeaderDatum)
		if !ok {
			object = new(DataPlatformOperationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsHeaderDatum.(*[]*DataPlatformOperationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperationDataPlatformOperationsItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformOperationsHeaderDatumL) LoadOperationDataPlatformOperationsItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsHeaderDatum
	var object *DataPlatformOperationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsHeaderDatum.(*DataPlatformOperationsHeaderDatum)
		if !ok {
			object = new(DataPlatformOperationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsHeaderDatum.(*[]*DataPlatformOperationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsHeaderDatumR{}
		}
		args = append(args, object.Operations)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Operations {
					continue Outer
				}
			}

			args = append(args, obj.Operations)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_data`),
		qm.WhereIn(`data_platform_operations_item_data.Operations in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_data")
	}

	var resultSlice []*DataPlatformOperationsItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_data")
	}

	if singular {
		object.R.OperationDataPlatformOperationsItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Operations == foreign.Operations {
				local.R.OperationDataPlatformOperationsItemData = append(local.R.OperationDataPlatformOperationsItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOperationDataPlatformProductionOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformOperationsHeaderDatumL) LoadOperationDataPlatformProductionOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsHeaderDatum
	var object *DataPlatformOperationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsHeaderDatum.(*DataPlatformOperationsHeaderDatum)
		if !ok {
			object = new(DataPlatformOperationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsHeaderDatum.(*[]*DataPlatformOperationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsHeaderDatumR{}
		}
		args = append(args, object.Operations)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Operations {
					continue Outer
				}
			}

			args = append(args, obj.Operations)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_header_data`),
		qm.WhereIn(`data_platform_production_order_header_data.Operations in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_header_data")
	}

	if singular {
		object.R.OperationDataPlatformProductionOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Operations == foreign.Operations {
				local.R.OperationDataPlatformProductionOrderHeaderData = append(local.R.OperationDataPlatformProductionOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOperationDataPlatformProductionOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformOperationsHeaderDatumL) LoadOperationDataPlatformProductionOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOperationsHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOperationsHeaderDatum
	var object *DataPlatformOperationsHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOperationsHeaderDatum.(*DataPlatformOperationsHeaderDatum)
		if !ok {
			object = new(DataPlatformOperationsHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOperationsHeaderDatum.(*[]*DataPlatformOperationsHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOperationsHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOperationsHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOperationsHeaderDatumR{}
		}
		args = append(args, object.Operations)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOperationsHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Operations {
					continue Outer
				}
			}

			args = append(args, obj.Operations)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.Operations in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if singular {
		object.R.OperationDataPlatformProductionOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Operations == foreign.Operations {
				local.R.OperationDataPlatformProductionOrderItemData = append(local.R.OperationDataPlatformProductionOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformOperationsHeaderDatum to the related item.
// Sets o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformOperationsHeaderDatum) SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.Operations}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductBaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformOperationsHeaderDatumR{
			ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformOperationsHeaderDatum to the related item.
// Sets o.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformOperationsHeaderDatum) SetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.Operations}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductDeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformOperationsHeaderDatumR{
			ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformOperationsHeaderDatum to the related item.
// Sets o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformOperationsHeaderDatum) SetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.Operations}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductProductionUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformOperationsHeaderDatumR{
			ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformOperationsHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformOperationsHeaderDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Operations}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformOperationsHeaderDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformOperationsHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformOperationsHeaderDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Operations}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformOperationsHeaderDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// AddOperationDataPlatformOperationsItemData adds the given related objects to the existing relationships
// of the data_platform_operations_header_datum, optionally inserting them as new records.
// Appends related to o.R.OperationDataPlatformOperationsItemData.
func (o *DataPlatformOperationsHeaderDatum) AddOperationDataPlatformOperationsItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Operations = o.Operations
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Operations"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Operations, rel.Operations, rel.OperationsItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Operations = o.Operations
		}
	}

	if o.R == nil {
		o.R = &dataPlatformOperationsHeaderDatumR{
			OperationDataPlatformOperationsItemData: related,
		}
	} else {
		o.R.OperationDataPlatformOperationsItemData = append(o.R.OperationDataPlatformOperationsItemData, related...)
	}

	return nil
}

// AddOperationDataPlatformProductionOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_operations_header_datum, optionally inserting them as new records.
// Appends related to o.R.OperationDataPlatformProductionOrderHeaderData.
func (o *DataPlatformOperationsHeaderDatum) AddOperationDataPlatformProductionOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Operations = o.Operations
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Operations"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Operations, rel.ProductionOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Operations = o.Operations
		}
	}

	if o.R == nil {
		o.R = &dataPlatformOperationsHeaderDatumR{
			OperationDataPlatformProductionOrderHeaderData: related,
		}
	} else {
		o.R.OperationDataPlatformProductionOrderHeaderData = append(o.R.OperationDataPlatformProductionOrderHeaderData, related...)
	}

	return nil
}

// AddOperationDataPlatformProductionOrderItemData adds the given related objects to the existing relationships
// of the data_platform_operations_header_datum, optionally inserting them as new records.
// Appends related to o.R.OperationDataPlatformProductionOrderItemData.
func (o *DataPlatformOperationsHeaderDatum) AddOperationDataPlatformProductionOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Operations = o.Operations
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Operations"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Operations, rel.ProductionOrder, rel.ProductionOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Operations = o.Operations
		}
	}

	if o.R == nil {
		o.R = &dataPlatformOperationsHeaderDatumR{
			OperationDataPlatformProductionOrderItemData: related,
		}
	} else {
		o.R.OperationDataPlatformProductionOrderItemData = append(o.R.OperationDataPlatformProductionOrderItemData, related...)
	}

	return nil
}

// DataPlatformOperationsHeaderData retrieves all the records using an executor.
func DataPlatformOperationsHeaderData(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_operations_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_operations_header_data`.*"})
	}

	return dataPlatformOperationsHeaderDatumQuery{q}
}

// FindDataPlatformOperationsHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformOperationsHeaderDatum(ctx context.Context, exec boil.ContextExecutor, operations int, selectCols ...string) (*DataPlatformOperationsHeaderDatum, error) {
	dataPlatformOperationsHeaderDatumObj := &DataPlatformOperationsHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_operations_header_data` where `Operations`=?", sel,
	)

	q := queries.Raw(query, operations)

	err := q.Bind(ctx, exec, dataPlatformOperationsHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_operations_header_data")
	}

	return dataPlatformOperationsHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformOperationsHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_operations_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOperationsHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformOperationsHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformOperationsHeaderDatumInsertCache[key]
	dataPlatformOperationsHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformOperationsHeaderDatumAllColumns,
			dataPlatformOperationsHeaderDatumColumnsWithDefault,
			dataPlatformOperationsHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOperationsHeaderDatumType, dataPlatformOperationsHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformOperationsHeaderDatumType, dataPlatformOperationsHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_operations_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_operations_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_operations_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_operations_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Operations,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_operations_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOperationsHeaderDatumInsertCacheMut.Lock()
		dataPlatformOperationsHeaderDatumInsertCache[key] = cache
		dataPlatformOperationsHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformOperationsHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformOperationsHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformOperationsHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformOperationsHeaderDatumUpdateCache[key]
	dataPlatformOperationsHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformOperationsHeaderDatumAllColumns,
			dataPlatformOperationsHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_operations_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformOperationsHeaderDatumType, dataPlatformOperationsHeaderDatumMapping, append(wl, dataPlatformOperationsHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_operations_header_data row")
	}

	if !cached {
		dataPlatformOperationsHeaderDatumUpdateCacheMut.Lock()
		dataPlatformOperationsHeaderDatumUpdateCache[key] = cache
		dataPlatformOperationsHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformOperationsHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_operations_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformOperationsHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOperationsHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_operations_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformOperationsHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformOperationsHeaderDatumUniqueColumns = []string{
	"Operations",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformOperationsHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_operations_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOperationsHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformOperationsHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformOperationsHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformOperationsHeaderDatumUpsertCache[key]
	dataPlatformOperationsHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformOperationsHeaderDatumAllColumns,
			dataPlatformOperationsHeaderDatumColumnsWithDefault,
			dataPlatformOperationsHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformOperationsHeaderDatumAllColumns,
			dataPlatformOperationsHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_operations_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_operations_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_operations_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOperationsHeaderDatumType, dataPlatformOperationsHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformOperationsHeaderDatumType, dataPlatformOperationsHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_operations_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformOperationsHeaderDatumType, dataPlatformOperationsHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_operations_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_operations_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOperationsHeaderDatumUpsertCacheMut.Lock()
		dataPlatformOperationsHeaderDatumUpsertCache[key] = cache
		dataPlatformOperationsHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformOperationsHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformOperationsHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformOperationsHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformOperationsHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_operations_header_data` WHERE `Operations`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_operations_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformOperationsHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformOperationsHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_operations_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformOperationsHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOperationsHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_operations_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformOperationsHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformOperationsHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformOperationsHeaderDatum(ctx, exec, o.Operations)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformOperationsHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformOperationsHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOperationsHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_operations_header_data`.* FROM `data_platform_operations_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOperationsHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformOperationsHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformOperationsHeaderDatumExists checks if the DataPlatformOperationsHeaderDatum row exists.
func DataPlatformOperationsHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, operations int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_operations_header_data` where `Operations`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, operations)
	}
	row := exec.QueryRowContext(ctx, sql, operations)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_operations_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformOperationsHeaderDatum row exists.
func (o *DataPlatformOperationsHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformOperationsHeaderDatumExists(ctx, exec, o.Operations)
}
