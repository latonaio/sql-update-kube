// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformWorkCenterGeneralDatum is an object representing the database table.
type DataPlatformWorkCenterGeneralDatum struct {
	WorkCenter                   int         `boil:"WorkCenter" json:"WorkCenter" toml:"WorkCenter" yaml:"WorkCenter"`
	WorkCenterType               string      `boil:"WorkCenterType" json:"WorkCenterType" toml:"WorkCenterType" yaml:"WorkCenterType"`
	WorkCenterName               string      `boil:"WorkCenterName" json:"WorkCenterName" toml:"WorkCenterName" yaml:"WorkCenterName"`
	BusinessPartner              int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                        string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	WorkCenterCategory           null.String `boil:"WorkCenterCategory" json:"WorkCenterCategory,omitempty" toml:"WorkCenterCategory" yaml:"WorkCenterCategory,omitempty"`
	WorkCenterResponsible        null.String `boil:"WorkCenterResponsible" json:"WorkCenterResponsible,omitempty" toml:"WorkCenterResponsible" yaml:"WorkCenterResponsible,omitempty"`
	SupplyArea                   null.String `boil:"SupplyArea" json:"SupplyArea,omitempty" toml:"SupplyArea" yaml:"SupplyArea,omitempty"`
	WorkCenterUsage              null.String `boil:"WorkCenterUsage" json:"WorkCenterUsage,omitempty" toml:"WorkCenterUsage" yaml:"WorkCenterUsage,omitempty"`
	MatlCompIsMarkedForBackflush null.Bool   `boil:"MatlCompIsMarkedForBackflush" json:"MatlCompIsMarkedForBackflush,omitempty" toml:"MatlCompIsMarkedForBackflush" yaml:"MatlCompIsMarkedForBackflush,omitempty"`
	WorkCenterLocation           null.String `boil:"WorkCenterLocation" json:"WorkCenterLocation,omitempty" toml:"WorkCenterLocation" yaml:"WorkCenterLocation,omitempty"`
	CapacityInternalID           null.String `boil:"CapacityInternalID" json:"CapacityInternalID,omitempty" toml:"CapacityInternalID" yaml:"CapacityInternalID,omitempty"`
	CapacityCategoryCode         null.String `boil:"CapacityCategoryCode" json:"CapacityCategoryCode,omitempty" toml:"CapacityCategoryCode" yaml:"CapacityCategoryCode,omitempty"`
	ValidityStartDate            null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate              null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	IsMarkedForDeletion          null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformWorkCenterGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformWorkCenterGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformWorkCenterGeneralDatumColumns = struct {
	WorkCenter                   string
	WorkCenterType               string
	WorkCenterName               string
	BusinessPartner              string
	Plant                        string
	WorkCenterCategory           string
	WorkCenterResponsible        string
	SupplyArea                   string
	WorkCenterUsage              string
	MatlCompIsMarkedForBackflush string
	WorkCenterLocation           string
	CapacityInternalID           string
	CapacityCategoryCode         string
	ValidityStartDate            string
	ValidityEndDate              string
	IsMarkedForDeletion          string
}{
	WorkCenter:                   "WorkCenter",
	WorkCenterType:               "WorkCenterType",
	WorkCenterName:               "WorkCenterName",
	BusinessPartner:              "BusinessPartner",
	Plant:                        "Plant",
	WorkCenterCategory:           "WorkCenterCategory",
	WorkCenterResponsible:        "WorkCenterResponsible",
	SupplyArea:                   "SupplyArea",
	WorkCenterUsage:              "WorkCenterUsage",
	MatlCompIsMarkedForBackflush: "MatlCompIsMarkedForBackflush",
	WorkCenterLocation:           "WorkCenterLocation",
	CapacityInternalID:           "CapacityInternalID",
	CapacityCategoryCode:         "CapacityCategoryCode",
	ValidityStartDate:            "ValidityStartDate",
	ValidityEndDate:              "ValidityEndDate",
	IsMarkedForDeletion:          "IsMarkedForDeletion",
}

var DataPlatformWorkCenterGeneralDatumTableColumns = struct {
	WorkCenter                   string
	WorkCenterType               string
	WorkCenterName               string
	BusinessPartner              string
	Plant                        string
	WorkCenterCategory           string
	WorkCenterResponsible        string
	SupplyArea                   string
	WorkCenterUsage              string
	MatlCompIsMarkedForBackflush string
	WorkCenterLocation           string
	CapacityInternalID           string
	CapacityCategoryCode         string
	ValidityStartDate            string
	ValidityEndDate              string
	IsMarkedForDeletion          string
}{
	WorkCenter:                   "data_platform_work_center_general_data.WorkCenter",
	WorkCenterType:               "data_platform_work_center_general_data.WorkCenterType",
	WorkCenterName:               "data_platform_work_center_general_data.WorkCenterName",
	BusinessPartner:              "data_platform_work_center_general_data.BusinessPartner",
	Plant:                        "data_platform_work_center_general_data.Plant",
	WorkCenterCategory:           "data_platform_work_center_general_data.WorkCenterCategory",
	WorkCenterResponsible:        "data_platform_work_center_general_data.WorkCenterResponsible",
	SupplyArea:                   "data_platform_work_center_general_data.SupplyArea",
	WorkCenterUsage:              "data_platform_work_center_general_data.WorkCenterUsage",
	MatlCompIsMarkedForBackflush: "data_platform_work_center_general_data.MatlCompIsMarkedForBackflush",
	WorkCenterLocation:           "data_platform_work_center_general_data.WorkCenterLocation",
	CapacityInternalID:           "data_platform_work_center_general_data.CapacityInternalID",
	CapacityCategoryCode:         "data_platform_work_center_general_data.CapacityCategoryCode",
	ValidityStartDate:            "data_platform_work_center_general_data.ValidityStartDate",
	ValidityEndDate:              "data_platform_work_center_general_data.ValidityEndDate",
	IsMarkedForDeletion:          "data_platform_work_center_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformWorkCenterGeneralDatumWhere = struct {
	WorkCenter                   whereHelperint
	WorkCenterType               whereHelperstring
	WorkCenterName               whereHelperstring
	BusinessPartner              whereHelperint
	Plant                        whereHelperstring
	WorkCenterCategory           whereHelpernull_String
	WorkCenterResponsible        whereHelpernull_String
	SupplyArea                   whereHelpernull_String
	WorkCenterUsage              whereHelpernull_String
	MatlCompIsMarkedForBackflush whereHelpernull_Bool
	WorkCenterLocation           whereHelpernull_String
	CapacityInternalID           whereHelpernull_String
	CapacityCategoryCode         whereHelpernull_String
	ValidityStartDate            whereHelpernull_String
	ValidityEndDate              whereHelpernull_String
	IsMarkedForDeletion          whereHelpernull_Bool
}{
	WorkCenter:                   whereHelperint{field: "`data_platform_work_center_general_data`.`WorkCenter`"},
	WorkCenterType:               whereHelperstring{field: "`data_platform_work_center_general_data`.`WorkCenterType`"},
	WorkCenterName:               whereHelperstring{field: "`data_platform_work_center_general_data`.`WorkCenterName`"},
	BusinessPartner:              whereHelperint{field: "`data_platform_work_center_general_data`.`BusinessPartner`"},
	Plant:                        whereHelperstring{field: "`data_platform_work_center_general_data`.`Plant`"},
	WorkCenterCategory:           whereHelpernull_String{field: "`data_platform_work_center_general_data`.`WorkCenterCategory`"},
	WorkCenterResponsible:        whereHelpernull_String{field: "`data_platform_work_center_general_data`.`WorkCenterResponsible`"},
	SupplyArea:                   whereHelpernull_String{field: "`data_platform_work_center_general_data`.`SupplyArea`"},
	WorkCenterUsage:              whereHelpernull_String{field: "`data_platform_work_center_general_data`.`WorkCenterUsage`"},
	MatlCompIsMarkedForBackflush: whereHelpernull_Bool{field: "`data_platform_work_center_general_data`.`MatlCompIsMarkedForBackflush`"},
	WorkCenterLocation:           whereHelpernull_String{field: "`data_platform_work_center_general_data`.`WorkCenterLocation`"},
	CapacityInternalID:           whereHelpernull_String{field: "`data_platform_work_center_general_data`.`CapacityInternalID`"},
	CapacityCategoryCode:         whereHelpernull_String{field: "`data_platform_work_center_general_data`.`CapacityCategoryCode`"},
	ValidityStartDate:            whereHelpernull_String{field: "`data_platform_work_center_general_data`.`ValidityStartDate`"},
	ValidityEndDate:              whereHelpernull_String{field: "`data_platform_work_center_general_data`.`ValidityEndDate`"},
	IsMarkedForDeletion:          whereHelpernull_Bool{field: "`data_platform_work_center_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformWorkCenterGeneralDatumRels is where relationship names are stored.
var DataPlatformWorkCenterGeneralDatumRels = struct {
	BusinessPartnerDataPlatformPlantGeneralDatum                string
	WorkCenterDataPlatformOperationsItemData                    string
	WorkCenterDataPlatformProductionOrderConfirmationHeaderData string
	WorkCenterDataPlatformProductionOrderItemOperationData      string
}{
	BusinessPartnerDataPlatformPlantGeneralDatum:                "BusinessPartnerDataPlatformPlantGeneralDatum",
	WorkCenterDataPlatformOperationsItemData:                    "WorkCenterDataPlatformOperationsItemData",
	WorkCenterDataPlatformProductionOrderConfirmationHeaderData: "WorkCenterDataPlatformProductionOrderConfirmationHeaderData",
	WorkCenterDataPlatformProductionOrderItemOperationData:      "WorkCenterDataPlatformProductionOrderItemOperationData",
}

// dataPlatformWorkCenterGeneralDatumR is where relationships are stored.
type dataPlatformWorkCenterGeneralDatumR struct {
	BusinessPartnerDataPlatformPlantGeneralDatum                *DataPlatformPlantGeneralDatum                          `boil:"BusinessPartnerDataPlatformPlantGeneralDatum" json:"BusinessPartnerDataPlatformPlantGeneralDatum" toml:"BusinessPartnerDataPlatformPlantGeneralDatum" yaml:"BusinessPartnerDataPlatformPlantGeneralDatum"`
	WorkCenterDataPlatformOperationsItemData                    DataPlatformOperationsItemDatumSlice                    `boil:"WorkCenterDataPlatformOperationsItemData" json:"WorkCenterDataPlatformOperationsItemData" toml:"WorkCenterDataPlatformOperationsItemData" yaml:"WorkCenterDataPlatformOperationsItemData"`
	WorkCenterDataPlatformProductionOrderConfirmationHeaderData DataPlatformProductionOrderConfirmationHeaderDatumSlice `boil:"WorkCenterDataPlatformProductionOrderConfirmationHeaderData" json:"WorkCenterDataPlatformProductionOrderConfirmationHeaderData" toml:"WorkCenterDataPlatformProductionOrderConfirmationHeaderData" yaml:"WorkCenterDataPlatformProductionOrderConfirmationHeaderData"`
	WorkCenterDataPlatformProductionOrderItemOperationData      DataPlatformProductionOrderItemOperationDatumSlice      `boil:"WorkCenterDataPlatformProductionOrderItemOperationData" json:"WorkCenterDataPlatformProductionOrderItemOperationData" toml:"WorkCenterDataPlatformProductionOrderItemOperationData" yaml:"WorkCenterDataPlatformProductionOrderItemOperationData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformWorkCenterGeneralDatumR) NewStruct() *dataPlatformWorkCenterGeneralDatumR {
	return &dataPlatformWorkCenterGeneralDatumR{}
}

func (r *dataPlatformWorkCenterGeneralDatumR) GetBusinessPartnerDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformPlantGeneralDatum
}

func (r *dataPlatformWorkCenterGeneralDatumR) GetWorkCenterDataPlatformOperationsItemData() DataPlatformOperationsItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.WorkCenterDataPlatformOperationsItemData
}

func (r *dataPlatformWorkCenterGeneralDatumR) GetWorkCenterDataPlatformProductionOrderConfirmationHeaderData() DataPlatformProductionOrderConfirmationHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.WorkCenterDataPlatformProductionOrderConfirmationHeaderData
}

func (r *dataPlatformWorkCenterGeneralDatumR) GetWorkCenterDataPlatformProductionOrderItemOperationData() DataPlatformProductionOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.WorkCenterDataPlatformProductionOrderItemOperationData
}

// dataPlatformWorkCenterGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformWorkCenterGeneralDatumL struct{}

var (
	dataPlatformWorkCenterGeneralDatumAllColumns            = []string{"WorkCenter", "WorkCenterType", "WorkCenterName", "BusinessPartner", "Plant", "WorkCenterCategory", "WorkCenterResponsible", "SupplyArea", "WorkCenterUsage", "MatlCompIsMarkedForBackflush", "WorkCenterLocation", "CapacityInternalID", "CapacityCategoryCode", "ValidityStartDate", "ValidityEndDate", "IsMarkedForDeletion"}
	dataPlatformWorkCenterGeneralDatumColumnsWithoutDefault = []string{"WorkCenter", "WorkCenterType", "WorkCenterName", "BusinessPartner", "Plant", "WorkCenterCategory", "WorkCenterResponsible", "SupplyArea", "WorkCenterUsage", "MatlCompIsMarkedForBackflush", "WorkCenterLocation", "CapacityInternalID", "CapacityCategoryCode", "ValidityStartDate", "ValidityEndDate", "IsMarkedForDeletion"}
	dataPlatformWorkCenterGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns     = []string{"WorkCenter"}
	dataPlatformWorkCenterGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformWorkCenterGeneralDatumSlice is an alias for a slice of pointers to DataPlatformWorkCenterGeneralDatum.
	// This should almost always be used instead of []DataPlatformWorkCenterGeneralDatum.
	DataPlatformWorkCenterGeneralDatumSlice []*DataPlatformWorkCenterGeneralDatum

	dataPlatformWorkCenterGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformWorkCenterGeneralDatumType                 = reflect.TypeOf(&DataPlatformWorkCenterGeneralDatum{})
	dataPlatformWorkCenterGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformWorkCenterGeneralDatumType)
	dataPlatformWorkCenterGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformWorkCenterGeneralDatumType, dataPlatformWorkCenterGeneralDatumMapping, dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns)
	dataPlatformWorkCenterGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformWorkCenterGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformWorkCenterGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformWorkCenterGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformWorkCenterGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformWorkCenterGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformWorkCenterGeneralDatum record from the query.
func (q dataPlatformWorkCenterGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformWorkCenterGeneralDatum, error) {
	o := &DataPlatformWorkCenterGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_work_center_general_data")
	}

	return o, nil
}

// All returns all DataPlatformWorkCenterGeneralDatum records from the query.
func (q dataPlatformWorkCenterGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformWorkCenterGeneralDatumSlice, error) {
	var o []*DataPlatformWorkCenterGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformWorkCenterGeneralDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformWorkCenterGeneralDatum records in the query.
func (q dataPlatformWorkCenterGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_work_center_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformWorkCenterGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_work_center_general_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformWorkCenterGeneralDatum) BusinessPartnerDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// WorkCenterDataPlatformOperationsItemData retrieves all the data_platform_operations_item_datum's DataPlatformOperationsItemData with an executor via WorkCenter column.
func (o *DataPlatformWorkCenterGeneralDatum) WorkCenterDataPlatformOperationsItemData(mods ...qm.QueryMod) dataPlatformOperationsItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_operations_item_data`.`WorkCenter`=?", o.WorkCenter),
	)

	return DataPlatformOperationsItemData(queryMods...)
}

// WorkCenterDataPlatformProductionOrderConfirmationHeaderData retrieves all the data_platform_production_order_confirmation_header_datum's DataPlatformProductionOrderConfirmationHeaderData with an executor via WorkCenter column.
func (o *DataPlatformWorkCenterGeneralDatum) WorkCenterDataPlatformProductionOrderConfirmationHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderConfirmationHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_confirmation_header_data`.`WorkCenter`=?", o.WorkCenter),
	)

	return DataPlatformProductionOrderConfirmationHeaderData(queryMods...)
}

// WorkCenterDataPlatformProductionOrderItemOperationData retrieves all the data_platform_production_order_item_operation_datum's DataPlatformProductionOrderItemOperationData with an executor via WorkCenter column.
func (o *DataPlatformWorkCenterGeneralDatum) WorkCenterDataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_data`.`WorkCenter`=?", o.WorkCenter),
	)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// LoadBusinessPartnerDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformWorkCenterGeneralDatumL) LoadBusinessPartnerDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformWorkCenterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformWorkCenterGeneralDatum
	var object *DataPlatformWorkCenterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformWorkCenterGeneralDatum.(*DataPlatformWorkCenterGeneralDatum)
		if !ok {
			object = new(DataPlatformWorkCenterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformWorkCenterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformWorkCenterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformWorkCenterGeneralDatum.(*[]*DataPlatformWorkCenterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformWorkCenterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformWorkCenterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformWorkCenterGeneralDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformWorkCenterGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadWorkCenterDataPlatformOperationsItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformWorkCenterGeneralDatumL) LoadWorkCenterDataPlatformOperationsItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformWorkCenterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformWorkCenterGeneralDatum
	var object *DataPlatformWorkCenterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformWorkCenterGeneralDatum.(*DataPlatformWorkCenterGeneralDatum)
		if !ok {
			object = new(DataPlatformWorkCenterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformWorkCenterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformWorkCenterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformWorkCenterGeneralDatum.(*[]*DataPlatformWorkCenterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformWorkCenterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformWorkCenterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformWorkCenterGeneralDatumR{}
		}
		args = append(args, object.WorkCenter)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformWorkCenterGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WorkCenter) {
					continue Outer
				}
			}

			args = append(args, obj.WorkCenter)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_data`),
		qm.WhereIn(`data_platform_operations_item_data.WorkCenter in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_operations_item_data")
	}

	var resultSlice []*DataPlatformOperationsItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_operations_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_operations_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_data")
	}

	if singular {
		object.R.WorkCenterDataPlatformOperationsItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.WorkCenter, foreign.WorkCenter) {
				local.R.WorkCenterDataPlatformOperationsItemData = append(local.R.WorkCenterDataPlatformOperationsItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadWorkCenterDataPlatformProductionOrderConfirmationHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformWorkCenterGeneralDatumL) LoadWorkCenterDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformWorkCenterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformWorkCenterGeneralDatum
	var object *DataPlatformWorkCenterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformWorkCenterGeneralDatum.(*DataPlatformWorkCenterGeneralDatum)
		if !ok {
			object = new(DataPlatformWorkCenterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformWorkCenterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformWorkCenterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformWorkCenterGeneralDatum.(*[]*DataPlatformWorkCenterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformWorkCenterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformWorkCenterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformWorkCenterGeneralDatumR{}
		}
		args = append(args, object.WorkCenter)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformWorkCenterGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.WorkCenter {
					continue Outer
				}
			}

			args = append(args, obj.WorkCenter)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_confirmation_header_data`),
		qm.WhereIn(`data_platform_production_order_confirmation_header_data.WorkCenter in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_confirmation_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderConfirmationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_confirmation_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_confirmation_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_confirmation_header_data")
	}

	if singular {
		object.R.WorkCenterDataPlatformProductionOrderConfirmationHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.WorkCenter == foreign.WorkCenter {
				local.R.WorkCenterDataPlatformProductionOrderConfirmationHeaderData = append(local.R.WorkCenterDataPlatformProductionOrderConfirmationHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadWorkCenterDataPlatformProductionOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformWorkCenterGeneralDatumL) LoadWorkCenterDataPlatformProductionOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformWorkCenterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformWorkCenterGeneralDatum
	var object *DataPlatformWorkCenterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformWorkCenterGeneralDatum.(*DataPlatformWorkCenterGeneralDatum)
		if !ok {
			object = new(DataPlatformWorkCenterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformWorkCenterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformWorkCenterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformWorkCenterGeneralDatum.(*[]*DataPlatformWorkCenterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformWorkCenterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformWorkCenterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformWorkCenterGeneralDatumR{}
		}
		args = append(args, object.WorkCenter)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformWorkCenterGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.WorkCenter {
					continue Outer
				}
			}

			args = append(args, obj.WorkCenter)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.WorkCenter in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if singular {
		object.R.WorkCenterDataPlatformProductionOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.WorkCenter == foreign.WorkCenter {
				local.R.WorkCenterDataPlatformProductionOrderItemOperationData = append(local.R.WorkCenterDataPlatformProductionOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformPlantGeneralDatum of the dataPlatformWorkCenterGeneralDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformWorkCenterGeneralDatum) SetBusinessPartnerDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_work_center_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.WorkCenter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformWorkCenterGeneralDatumR{
			BusinessPartnerDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// AddWorkCenterDataPlatformOperationsItemData adds the given related objects to the existing relationships
// of the data_platform_work_center_general_datum, optionally inserting them as new records.
// Appends related to o.R.WorkCenterDataPlatformOperationsItemData.
func (o *DataPlatformWorkCenterGeneralDatum) AddWorkCenterDataPlatformOperationsItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.WorkCenter, o.WorkCenter)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_operations_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"WorkCenter"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOperationsItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.WorkCenter, rel.Operations, rel.OperationsItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.WorkCenter, o.WorkCenter)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformWorkCenterGeneralDatumR{
			WorkCenterDataPlatformOperationsItemData: related,
		}
	} else {
		o.R.WorkCenterDataPlatformOperationsItemData = append(o.R.WorkCenterDataPlatformOperationsItemData, related...)
	}

	return nil
}

// SetWorkCenterDataPlatformOperationsItemData removes all previously related items of the
// data_platform_work_center_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WorkCenterDataPlatformWorkCenterGeneralDatum's WorkCenterDataPlatformOperationsItemData accordingly.
// Replaces o.R.WorkCenterDataPlatformOperationsItemData with related.
func (o *DataPlatformWorkCenterGeneralDatum) SetWorkCenterDataPlatformOperationsItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOperationsItemDatum) error {
	query := "update `data_platform_operations_item_data` set `WorkCenter` = null where `WorkCenter` = ?"
	values := []interface{}{o.WorkCenter}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.WorkCenterDataPlatformOperationsItemData = nil
	}

	return o.AddWorkCenterDataPlatformOperationsItemData(ctx, exec, insert, related...)
}

// RemoveWorkCenterDataPlatformOperationsItemData relationships from objects passed in.
// Removes related items from R.WorkCenterDataPlatformOperationsItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformWorkCenterGeneralDatum) RemoveWorkCenterDataPlatformOperationsItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOperationsItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.WorkCenter, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("WorkCenter")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WorkCenterDataPlatformOperationsItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.WorkCenterDataPlatformOperationsItemData)
			if ln > 1 && i < ln-1 {
				o.R.WorkCenterDataPlatformOperationsItemData[i] = o.R.WorkCenterDataPlatformOperationsItemData[ln-1]
			}
			o.R.WorkCenterDataPlatformOperationsItemData = o.R.WorkCenterDataPlatformOperationsItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddWorkCenterDataPlatformProductionOrderConfirmationHeaderData adds the given related objects to the existing relationships
// of the data_platform_work_center_general_datum, optionally inserting them as new records.
// Appends related to o.R.WorkCenterDataPlatformProductionOrderConfirmationHeaderData.
func (o *DataPlatformWorkCenterGeneralDatum) AddWorkCenterDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WorkCenter = o.WorkCenter
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_confirmation_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"WorkCenter"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderConfirmationHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.WorkCenter, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.ConfirmationCountingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WorkCenter = o.WorkCenter
		}
	}

	if o.R == nil {
		o.R = &dataPlatformWorkCenterGeneralDatumR{
			WorkCenterDataPlatformProductionOrderConfirmationHeaderData: related,
		}
	} else {
		o.R.WorkCenterDataPlatformProductionOrderConfirmationHeaderData = append(o.R.WorkCenterDataPlatformProductionOrderConfirmationHeaderData, related...)
	}

	return nil
}

// AddWorkCenterDataPlatformProductionOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_work_center_general_datum, optionally inserting them as new records.
// Appends related to o.R.WorkCenterDataPlatformProductionOrderItemOperationData.
func (o *DataPlatformWorkCenterGeneralDatum) AddWorkCenterDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WorkCenter = o.WorkCenter
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"WorkCenter"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.WorkCenter, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WorkCenter = o.WorkCenter
		}
	}

	if o.R == nil {
		o.R = &dataPlatformWorkCenterGeneralDatumR{
			WorkCenterDataPlatformProductionOrderItemOperationData: related,
		}
	} else {
		o.R.WorkCenterDataPlatformProductionOrderItemOperationData = append(o.R.WorkCenterDataPlatformProductionOrderItemOperationData, related...)
	}

	return nil
}

// DataPlatformWorkCenterGeneralData retrieves all the records using an executor.
func DataPlatformWorkCenterGeneralData(mods ...qm.QueryMod) dataPlatformWorkCenterGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_work_center_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_work_center_general_data`.*"})
	}

	return dataPlatformWorkCenterGeneralDatumQuery{q}
}

// FindDataPlatformWorkCenterGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformWorkCenterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, workCenter int, selectCols ...string) (*DataPlatformWorkCenterGeneralDatum, error) {
	dataPlatformWorkCenterGeneralDatumObj := &DataPlatformWorkCenterGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_work_center_general_data` where `WorkCenter`=?", sel,
	)

	q := queries.Raw(query, workCenter)

	err := q.Bind(ctx, exec, dataPlatformWorkCenterGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_work_center_general_data")
	}

	return dataPlatformWorkCenterGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformWorkCenterGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_work_center_general_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformWorkCenterGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformWorkCenterGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformWorkCenterGeneralDatumInsertCache[key]
	dataPlatformWorkCenterGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformWorkCenterGeneralDatumAllColumns,
			dataPlatformWorkCenterGeneralDatumColumnsWithDefault,
			dataPlatformWorkCenterGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformWorkCenterGeneralDatumType, dataPlatformWorkCenterGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformWorkCenterGeneralDatumType, dataPlatformWorkCenterGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_work_center_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_work_center_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_work_center_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_work_center_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.WorkCenter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_work_center_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformWorkCenterGeneralDatumInsertCacheMut.Lock()
		dataPlatformWorkCenterGeneralDatumInsertCache[key] = cache
		dataPlatformWorkCenterGeneralDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformWorkCenterGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformWorkCenterGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformWorkCenterGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformWorkCenterGeneralDatumUpdateCache[key]
	dataPlatformWorkCenterGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformWorkCenterGeneralDatumAllColumns,
			dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_work_center_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_work_center_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformWorkCenterGeneralDatumType, dataPlatformWorkCenterGeneralDatumMapping, append(wl, dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_work_center_general_data row")
	}

	if !cached {
		dataPlatformWorkCenterGeneralDatumUpdateCacheMut.Lock()
		dataPlatformWorkCenterGeneralDatumUpdateCache[key] = cache
		dataPlatformWorkCenterGeneralDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformWorkCenterGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_work_center_general_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformWorkCenterGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformWorkCenterGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_work_center_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformWorkCenterGeneralDatum slice")
	}

	return nil
}

var mySQLDataPlatformWorkCenterGeneralDatumUniqueColumns = []string{
	"WorkCenter",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformWorkCenterGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_work_center_general_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformWorkCenterGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformWorkCenterGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformWorkCenterGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformWorkCenterGeneralDatumUpsertCache[key]
	dataPlatformWorkCenterGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformWorkCenterGeneralDatumAllColumns,
			dataPlatformWorkCenterGeneralDatumColumnsWithDefault,
			dataPlatformWorkCenterGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformWorkCenterGeneralDatumAllColumns,
			dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_work_center_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_work_center_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_work_center_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformWorkCenterGeneralDatumType, dataPlatformWorkCenterGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformWorkCenterGeneralDatumType, dataPlatformWorkCenterGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_work_center_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformWorkCenterGeneralDatumType, dataPlatformWorkCenterGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_work_center_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_work_center_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformWorkCenterGeneralDatumUpsertCacheMut.Lock()
		dataPlatformWorkCenterGeneralDatumUpsertCache[key] = cache
		dataPlatformWorkCenterGeneralDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformWorkCenterGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformWorkCenterGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformWorkCenterGeneralDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformWorkCenterGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_work_center_general_data` WHERE `WorkCenter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_work_center_general_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformWorkCenterGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformWorkCenterGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_work_center_general_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformWorkCenterGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformWorkCenterGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_work_center_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformWorkCenterGeneralDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformWorkCenterGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformWorkCenterGeneralDatum(ctx, exec, o.WorkCenter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformWorkCenterGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformWorkCenterGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformWorkCenterGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_work_center_general_data`.* FROM `data_platform_work_center_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformWorkCenterGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformWorkCenterGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformWorkCenterGeneralDatumExists checks if the DataPlatformWorkCenterGeneralDatum row exists.
func DataPlatformWorkCenterGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, workCenter int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_work_center_general_data` where `WorkCenter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, workCenter)
	}
	row := exec.QueryRowContext(ctx, sql, workCenter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_work_center_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformWorkCenterGeneralDatum row exists.
func (o *DataPlatformWorkCenterGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformWorkCenterGeneralDatumExists(ctx, exec, o.WorkCenter)
}
