// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInspectionLotHeaderDatum is an object representing the database table.
type DataPlatformInspectionLotHeaderDatum struct {
	InspectionLot                  int         `boil:"InspectionLot" json:"InspectionLot" toml:"InspectionLot" yaml:"InspectionLot"`
	InspectionLotDate              string      `boil:"InspectionLotDate" json:"InspectionLotDate" toml:"InspectionLotDate" yaml:"InspectionLotDate"`
	InspectionPlan                 int         `boil:"InspectionPlan" json:"InspectionPlan" toml:"InspectionPlan" yaml:"InspectionPlan"`
	InspectionPlantBusinessPartner int         `boil:"InspectionPlantBusinessPartner" json:"InspectionPlantBusinessPartner" toml:"InspectionPlantBusinessPartner" yaml:"InspectionPlantBusinessPartner"`
	InspectionPlant                string      `boil:"InspectionPlant" json:"InspectionPlant" toml:"InspectionPlant" yaml:"InspectionPlant"`
	Product                        string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ProductSpecification           null.String `boil:"ProductSpecification" json:"ProductSpecification,omitempty" toml:"ProductSpecification" yaml:"ProductSpecification,omitempty"`
	InspectionSpecification        null.String `boil:"InspectionSpecification" json:"InspectionSpecification,omitempty" toml:"InspectionSpecification" yaml:"InspectionSpecification,omitempty"`
	ProductionOrder                null.Int    `boil:"ProductionOrder" json:"ProductionOrder,omitempty" toml:"ProductionOrder" yaml:"ProductionOrder,omitempty"`
	ProductionOrderItem            null.Int    `boil:"ProductionOrderItem" json:"ProductionOrderItem,omitempty" toml:"ProductionOrderItem" yaml:"ProductionOrderItem,omitempty"`
	InspectionLotHeaderText        null.String `boil:"InspectionLotHeaderText" json:"InspectionLotHeaderText,omitempty" toml:"InspectionLotHeaderText" yaml:"InspectionLotHeaderText,omitempty"`
	ExternalReferenceDocument      null.String `boil:"ExternalReferenceDocument" json:"ExternalReferenceDocument,omitempty" toml:"ExternalReferenceDocument" yaml:"ExternalReferenceDocument,omitempty"`
	CertificateAuthorityChain      null.String `boil:"CertificateAuthorityChain" json:"CertificateAuthorityChain,omitempty" toml:"CertificateAuthorityChain" yaml:"CertificateAuthorityChain,omitempty"`
	UsageControlChain              null.String `boil:"UsageControlChain" json:"UsageControlChain,omitempty" toml:"UsageControlChain" yaml:"UsageControlChain,omitempty"`
	CreationDate                   string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                   string      `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                 string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                 string      `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsReleased                     null.Bool   `boil:"IsReleased" json:"IsReleased,omitempty" toml:"IsReleased" yaml:"IsReleased,omitempty"`
	IsPartiallyConfirmed           null.Bool   `boil:"IsPartiallyConfirmed" json:"IsPartiallyConfirmed,omitempty" toml:"IsPartiallyConfirmed" yaml:"IsPartiallyConfirmed,omitempty"`
	IsConfirmed                    null.Bool   `boil:"IsConfirmed" json:"IsConfirmed,omitempty" toml:"IsConfirmed" yaml:"IsConfirmed,omitempty"`
	IsLocked                       null.Bool   `boil:"IsLocked" json:"IsLocked,omitempty" toml:"IsLocked" yaml:"IsLocked,omitempty"`
	IsCancelled                    null.Bool   `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion            null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformInspectionLotHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInspectionLotHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInspectionLotHeaderDatumColumns = struct {
	InspectionLot                  string
	InspectionLotDate              string
	InspectionPlan                 string
	InspectionPlantBusinessPartner string
	InspectionPlant                string
	Product                        string
	ProductSpecification           string
	InspectionSpecification        string
	ProductionOrder                string
	ProductionOrderItem            string
	InspectionLotHeaderText        string
	ExternalReferenceDocument      string
	CertificateAuthorityChain      string
	UsageControlChain              string
	CreationDate                   string
	CreationTime                   string
	LastChangeDate                 string
	LastChangeTime                 string
	IsReleased                     string
	IsPartiallyConfirmed           string
	IsConfirmed                    string
	IsLocked                       string
	IsCancelled                    string
	IsMarkedForDeletion            string
}{
	InspectionLot:                  "InspectionLot",
	InspectionLotDate:              "InspectionLotDate",
	InspectionPlan:                 "InspectionPlan",
	InspectionPlantBusinessPartner: "InspectionPlantBusinessPartner",
	InspectionPlant:                "InspectionPlant",
	Product:                        "Product",
	ProductSpecification:           "ProductSpecification",
	InspectionSpecification:        "InspectionSpecification",
	ProductionOrder:                "ProductionOrder",
	ProductionOrderItem:            "ProductionOrderItem",
	InspectionLotHeaderText:        "InspectionLotHeaderText",
	ExternalReferenceDocument:      "ExternalReferenceDocument",
	CertificateAuthorityChain:      "CertificateAuthorityChain",
	UsageControlChain:              "UsageControlChain",
	CreationDate:                   "CreationDate",
	CreationTime:                   "CreationTime",
	LastChangeDate:                 "LastChangeDate",
	LastChangeTime:                 "LastChangeTime",
	IsReleased:                     "IsReleased",
	IsPartiallyConfirmed:           "IsPartiallyConfirmed",
	IsConfirmed:                    "IsConfirmed",
	IsLocked:                       "IsLocked",
	IsCancelled:                    "IsCancelled",
	IsMarkedForDeletion:            "IsMarkedForDeletion",
}

var DataPlatformInspectionLotHeaderDatumTableColumns = struct {
	InspectionLot                  string
	InspectionLotDate              string
	InspectionPlan                 string
	InspectionPlantBusinessPartner string
	InspectionPlant                string
	Product                        string
	ProductSpecification           string
	InspectionSpecification        string
	ProductionOrder                string
	ProductionOrderItem            string
	InspectionLotHeaderText        string
	ExternalReferenceDocument      string
	CertificateAuthorityChain      string
	UsageControlChain              string
	CreationDate                   string
	CreationTime                   string
	LastChangeDate                 string
	LastChangeTime                 string
	IsReleased                     string
	IsPartiallyConfirmed           string
	IsConfirmed                    string
	IsLocked                       string
	IsCancelled                    string
	IsMarkedForDeletion            string
}{
	InspectionLot:                  "data_platform_inspection_lot_header_data.InspectionLot",
	InspectionLotDate:              "data_platform_inspection_lot_header_data.InspectionLotDate",
	InspectionPlan:                 "data_platform_inspection_lot_header_data.InspectionPlan",
	InspectionPlantBusinessPartner: "data_platform_inspection_lot_header_data.InspectionPlantBusinessPartner",
	InspectionPlant:                "data_platform_inspection_lot_header_data.InspectionPlant",
	Product:                        "data_platform_inspection_lot_header_data.Product",
	ProductSpecification:           "data_platform_inspection_lot_header_data.ProductSpecification",
	InspectionSpecification:        "data_platform_inspection_lot_header_data.InspectionSpecification",
	ProductionOrder:                "data_platform_inspection_lot_header_data.ProductionOrder",
	ProductionOrderItem:            "data_platform_inspection_lot_header_data.ProductionOrderItem",
	InspectionLotHeaderText:        "data_platform_inspection_lot_header_data.InspectionLotHeaderText",
	ExternalReferenceDocument:      "data_platform_inspection_lot_header_data.ExternalReferenceDocument",
	CertificateAuthorityChain:      "data_platform_inspection_lot_header_data.CertificateAuthorityChain",
	UsageControlChain:              "data_platform_inspection_lot_header_data.UsageControlChain",
	CreationDate:                   "data_platform_inspection_lot_header_data.CreationDate",
	CreationTime:                   "data_platform_inspection_lot_header_data.CreationTime",
	LastChangeDate:                 "data_platform_inspection_lot_header_data.LastChangeDate",
	LastChangeTime:                 "data_platform_inspection_lot_header_data.LastChangeTime",
	IsReleased:                     "data_platform_inspection_lot_header_data.IsReleased",
	IsPartiallyConfirmed:           "data_platform_inspection_lot_header_data.IsPartiallyConfirmed",
	IsConfirmed:                    "data_platform_inspection_lot_header_data.IsConfirmed",
	IsLocked:                       "data_platform_inspection_lot_header_data.IsLocked",
	IsCancelled:                    "data_platform_inspection_lot_header_data.IsCancelled",
	IsMarkedForDeletion:            "data_platform_inspection_lot_header_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformInspectionLotHeaderDatumWhere = struct {
	InspectionLot                  whereHelperint
	InspectionLotDate              whereHelperstring
	InspectionPlan                 whereHelperint
	InspectionPlantBusinessPartner whereHelperint
	InspectionPlant                whereHelperstring
	Product                        whereHelperstring
	ProductSpecification           whereHelpernull_String
	InspectionSpecification        whereHelpernull_String
	ProductionOrder                whereHelpernull_Int
	ProductionOrderItem            whereHelpernull_Int
	InspectionLotHeaderText        whereHelpernull_String
	ExternalReferenceDocument      whereHelpernull_String
	CertificateAuthorityChain      whereHelpernull_String
	UsageControlChain              whereHelpernull_String
	CreationDate                   whereHelperstring
	CreationTime                   whereHelperstring
	LastChangeDate                 whereHelperstring
	LastChangeTime                 whereHelperstring
	IsReleased                     whereHelpernull_Bool
	IsPartiallyConfirmed           whereHelpernull_Bool
	IsConfirmed                    whereHelpernull_Bool
	IsLocked                       whereHelpernull_Bool
	IsCancelled                    whereHelpernull_Bool
	IsMarkedForDeletion            whereHelpernull_Bool
}{
	InspectionLot:                  whereHelperint{field: "`data_platform_inspection_lot_header_data`.`InspectionLot`"},
	InspectionLotDate:              whereHelperstring{field: "`data_platform_inspection_lot_header_data`.`InspectionLotDate`"},
	InspectionPlan:                 whereHelperint{field: "`data_platform_inspection_lot_header_data`.`InspectionPlan`"},
	InspectionPlantBusinessPartner: whereHelperint{field: "`data_platform_inspection_lot_header_data`.`InspectionPlantBusinessPartner`"},
	InspectionPlant:                whereHelperstring{field: "`data_platform_inspection_lot_header_data`.`InspectionPlant`"},
	Product:                        whereHelperstring{field: "`data_platform_inspection_lot_header_data`.`Product`"},
	ProductSpecification:           whereHelpernull_String{field: "`data_platform_inspection_lot_header_data`.`ProductSpecification`"},
	InspectionSpecification:        whereHelpernull_String{field: "`data_platform_inspection_lot_header_data`.`InspectionSpecification`"},
	ProductionOrder:                whereHelpernull_Int{field: "`data_platform_inspection_lot_header_data`.`ProductionOrder`"},
	ProductionOrderItem:            whereHelpernull_Int{field: "`data_platform_inspection_lot_header_data`.`ProductionOrderItem`"},
	InspectionLotHeaderText:        whereHelpernull_String{field: "`data_platform_inspection_lot_header_data`.`InspectionLotHeaderText`"},
	ExternalReferenceDocument:      whereHelpernull_String{field: "`data_platform_inspection_lot_header_data`.`ExternalReferenceDocument`"},
	CertificateAuthorityChain:      whereHelpernull_String{field: "`data_platform_inspection_lot_header_data`.`CertificateAuthorityChain`"},
	UsageControlChain:              whereHelpernull_String{field: "`data_platform_inspection_lot_header_data`.`UsageControlChain`"},
	CreationDate:                   whereHelperstring{field: "`data_platform_inspection_lot_header_data`.`CreationDate`"},
	CreationTime:                   whereHelperstring{field: "`data_platform_inspection_lot_header_data`.`CreationTime`"},
	LastChangeDate:                 whereHelperstring{field: "`data_platform_inspection_lot_header_data`.`LastChangeDate`"},
	LastChangeTime:                 whereHelperstring{field: "`data_platform_inspection_lot_header_data`.`LastChangeTime`"},
	IsReleased:                     whereHelpernull_Bool{field: "`data_platform_inspection_lot_header_data`.`IsReleased`"},
	IsPartiallyConfirmed:           whereHelpernull_Bool{field: "`data_platform_inspection_lot_header_data`.`IsPartiallyConfirmed`"},
	IsConfirmed:                    whereHelpernull_Bool{field: "`data_platform_inspection_lot_header_data`.`IsConfirmed`"},
	IsLocked:                       whereHelpernull_Bool{field: "`data_platform_inspection_lot_header_data`.`IsLocked`"},
	IsCancelled:                    whereHelpernull_Bool{field: "`data_platform_inspection_lot_header_data`.`IsCancelled`"},
	IsMarkedForDeletion:            whereHelpernull_Bool{field: "`data_platform_inspection_lot_header_data`.`IsMarkedForDeletion`"},
}

// DataPlatformInspectionLotHeaderDatumRels is where relationship names are stored.
var DataPlatformInspectionLotHeaderDatumRels = struct {
	InspectionPlantDataPlatformPlantGeneralDatum                   string
	InspectionPlanDataPlatformInspectionPlanHeaderDatum            string
	InspectionPlantDataPlatformProductMasterQualityDatum           string
	InspectionLotDataPlatformInspectionLotSpecGeneralDatum         string
	InspectionLotDataPlatformDeliveryDocumentItemData              string
	InspectionLotDataPlatformInspectionLotComponentCompositionData string
	InspectionLotDataPlatformInspectionLotHeaderDocData            string
	InspectionLotDataPlatformInspectionLotInspectionData           string
	InspectionLotDataPlatformInspectionLotPartnerData              string
	InspectionLotDataPlatformInspectionLotSpecDetailData           string
	InspectionLotDataPlatformOrdersItemData                        string
}{
	InspectionPlantDataPlatformPlantGeneralDatum:                   "InspectionPlantDataPlatformPlantGeneralDatum",
	InspectionPlanDataPlatformInspectionPlanHeaderDatum:            "InspectionPlanDataPlatformInspectionPlanHeaderDatum",
	InspectionPlantDataPlatformProductMasterQualityDatum:           "InspectionPlantDataPlatformProductMasterQualityDatum",
	InspectionLotDataPlatformInspectionLotSpecGeneralDatum:         "InspectionLotDataPlatformInspectionLotSpecGeneralDatum",
	InspectionLotDataPlatformDeliveryDocumentItemData:              "InspectionLotDataPlatformDeliveryDocumentItemData",
	InspectionLotDataPlatformInspectionLotComponentCompositionData: "InspectionLotDataPlatformInspectionLotComponentCompositionData",
	InspectionLotDataPlatformInspectionLotHeaderDocData:            "InspectionLotDataPlatformInspectionLotHeaderDocData",
	InspectionLotDataPlatformInspectionLotInspectionData:           "InspectionLotDataPlatformInspectionLotInspectionData",
	InspectionLotDataPlatformInspectionLotPartnerData:              "InspectionLotDataPlatformInspectionLotPartnerData",
	InspectionLotDataPlatformInspectionLotSpecDetailData:           "InspectionLotDataPlatformInspectionLotSpecDetailData",
	InspectionLotDataPlatformOrdersItemData:                        "InspectionLotDataPlatformOrdersItemData",
}

// dataPlatformInspectionLotHeaderDatumR is where relationships are stored.
type dataPlatformInspectionLotHeaderDatumR struct {
	InspectionPlantDataPlatformPlantGeneralDatum                   *DataPlatformPlantGeneralDatum                          `boil:"InspectionPlantDataPlatformPlantGeneralDatum" json:"InspectionPlantDataPlatformPlantGeneralDatum" toml:"InspectionPlantDataPlatformPlantGeneralDatum" yaml:"InspectionPlantDataPlatformPlantGeneralDatum"`
	InspectionPlanDataPlatformInspectionPlanHeaderDatum            *DataPlatformInspectionPlanHeaderDatum                  `boil:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" json:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" toml:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" yaml:"InspectionPlanDataPlatformInspectionPlanHeaderDatum"`
	InspectionPlantDataPlatformProductMasterQualityDatum           *DataPlatformProductMasterQualityDatum                  `boil:"InspectionPlantDataPlatformProductMasterQualityDatum" json:"InspectionPlantDataPlatformProductMasterQualityDatum" toml:"InspectionPlantDataPlatformProductMasterQualityDatum" yaml:"InspectionPlantDataPlatformProductMasterQualityDatum"`
	InspectionLotDataPlatformInspectionLotSpecGeneralDatum         *DataPlatformInspectionLotSpecGeneralDatum              `boil:"InspectionLotDataPlatformInspectionLotSpecGeneralDatum" json:"InspectionLotDataPlatformInspectionLotSpecGeneralDatum" toml:"InspectionLotDataPlatformInspectionLotSpecGeneralDatum" yaml:"InspectionLotDataPlatformInspectionLotSpecGeneralDatum"`
	InspectionLotDataPlatformDeliveryDocumentItemData              DataPlatformDeliveryDocumentItemDatumSlice              `boil:"InspectionLotDataPlatformDeliveryDocumentItemData" json:"InspectionLotDataPlatformDeliveryDocumentItemData" toml:"InspectionLotDataPlatformDeliveryDocumentItemData" yaml:"InspectionLotDataPlatformDeliveryDocumentItemData"`
	InspectionLotDataPlatformInspectionLotComponentCompositionData DataPlatformInspectionLotComponentCompositionDatumSlice `boil:"InspectionLotDataPlatformInspectionLotComponentCompositionData" json:"InspectionLotDataPlatformInspectionLotComponentCompositionData" toml:"InspectionLotDataPlatformInspectionLotComponentCompositionData" yaml:"InspectionLotDataPlatformInspectionLotComponentCompositionData"`
	InspectionLotDataPlatformInspectionLotHeaderDocData            DataPlatformInspectionLotHeaderDocDatumSlice            `boil:"InspectionLotDataPlatformInspectionLotHeaderDocData" json:"InspectionLotDataPlatformInspectionLotHeaderDocData" toml:"InspectionLotDataPlatformInspectionLotHeaderDocData" yaml:"InspectionLotDataPlatformInspectionLotHeaderDocData"`
	InspectionLotDataPlatformInspectionLotInspectionData           DataPlatformInspectionLotInspectionDatumSlice           `boil:"InspectionLotDataPlatformInspectionLotInspectionData" json:"InspectionLotDataPlatformInspectionLotInspectionData" toml:"InspectionLotDataPlatformInspectionLotInspectionData" yaml:"InspectionLotDataPlatformInspectionLotInspectionData"`
	InspectionLotDataPlatformInspectionLotPartnerData              DataPlatformInspectionLotPartnerDatumSlice              `boil:"InspectionLotDataPlatformInspectionLotPartnerData" json:"InspectionLotDataPlatformInspectionLotPartnerData" toml:"InspectionLotDataPlatformInspectionLotPartnerData" yaml:"InspectionLotDataPlatformInspectionLotPartnerData"`
	InspectionLotDataPlatformInspectionLotSpecDetailData           DataPlatformInspectionLotSpecDetailDatumSlice           `boil:"InspectionLotDataPlatformInspectionLotSpecDetailData" json:"InspectionLotDataPlatformInspectionLotSpecDetailData" toml:"InspectionLotDataPlatformInspectionLotSpecDetailData" yaml:"InspectionLotDataPlatformInspectionLotSpecDetailData"`
	InspectionLotDataPlatformOrdersItemData                        DataPlatformOrdersItemDatumSlice                        `boil:"InspectionLotDataPlatformOrdersItemData" json:"InspectionLotDataPlatformOrdersItemData" toml:"InspectionLotDataPlatformOrdersItemData" yaml:"InspectionLotDataPlatformOrdersItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInspectionLotHeaderDatumR) NewStruct() *dataPlatformInspectionLotHeaderDatumR {
	return &dataPlatformInspectionLotHeaderDatumR{}
}

func (r *dataPlatformInspectionLotHeaderDatumR) GetInspectionPlantDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.InspectionPlantDataPlatformPlantGeneralDatum
}

func (r *dataPlatformInspectionLotHeaderDatumR) GetInspectionPlanDataPlatformInspectionPlanHeaderDatum() *DataPlatformInspectionPlanHeaderDatum {
	if r == nil {
		return nil
	}
	return r.InspectionPlanDataPlatformInspectionPlanHeaderDatum
}

func (r *dataPlatformInspectionLotHeaderDatumR) GetInspectionPlantDataPlatformProductMasterQualityDatum() *DataPlatformProductMasterQualityDatum {
	if r == nil {
		return nil
	}
	return r.InspectionPlantDataPlatformProductMasterQualityDatum
}

func (r *dataPlatformInspectionLotHeaderDatumR) GetInspectionLotDataPlatformInspectionLotSpecGeneralDatum() *DataPlatformInspectionLotSpecGeneralDatum {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformInspectionLotSpecGeneralDatum
}

func (r *dataPlatformInspectionLotHeaderDatumR) GetInspectionLotDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformInspectionLotHeaderDatumR) GetInspectionLotDataPlatformInspectionLotComponentCompositionData() DataPlatformInspectionLotComponentCompositionDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformInspectionLotComponentCompositionData
}

func (r *dataPlatformInspectionLotHeaderDatumR) GetInspectionLotDataPlatformInspectionLotHeaderDocData() DataPlatformInspectionLotHeaderDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformInspectionLotHeaderDocData
}

func (r *dataPlatformInspectionLotHeaderDatumR) GetInspectionLotDataPlatformInspectionLotInspectionData() DataPlatformInspectionLotInspectionDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformInspectionLotInspectionData
}

func (r *dataPlatformInspectionLotHeaderDatumR) GetInspectionLotDataPlatformInspectionLotPartnerData() DataPlatformInspectionLotPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformInspectionLotPartnerData
}

func (r *dataPlatformInspectionLotHeaderDatumR) GetInspectionLotDataPlatformInspectionLotSpecDetailData() DataPlatformInspectionLotSpecDetailDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformInspectionLotSpecDetailData
}

func (r *dataPlatformInspectionLotHeaderDatumR) GetInspectionLotDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformOrdersItemData
}

// dataPlatformInspectionLotHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformInspectionLotHeaderDatumL struct{}

var (
	dataPlatformInspectionLotHeaderDatumAllColumns            = []string{"InspectionLot", "InspectionLotDate", "InspectionPlan", "InspectionPlantBusinessPartner", "InspectionPlant", "Product", "ProductSpecification", "InspectionSpecification", "ProductionOrder", "ProductionOrderItem", "InspectionLotHeaderText", "ExternalReferenceDocument", "CertificateAuthorityChain", "UsageControlChain", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsPartiallyConfirmed", "IsConfirmed", "IsLocked", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformInspectionLotHeaderDatumColumnsWithoutDefault = []string{"InspectionLot", "InspectionLotDate", "InspectionPlan", "InspectionPlantBusinessPartner", "InspectionPlant", "Product", "ProductSpecification", "InspectionSpecification", "ProductionOrder", "ProductionOrderItem", "InspectionLotHeaderText", "ExternalReferenceDocument", "CertificateAuthorityChain", "UsageControlChain", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsPartiallyConfirmed", "IsConfirmed", "IsLocked", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformInspectionLotHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns     = []string{"InspectionLot"}
	dataPlatformInspectionLotHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInspectionLotHeaderDatumSlice is an alias for a slice of pointers to DataPlatformInspectionLotHeaderDatum.
	// This should almost always be used instead of []DataPlatformInspectionLotHeaderDatum.
	DataPlatformInspectionLotHeaderDatumSlice []*DataPlatformInspectionLotHeaderDatum

	dataPlatformInspectionLotHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInspectionLotHeaderDatumType                 = reflect.TypeOf(&DataPlatformInspectionLotHeaderDatum{})
	dataPlatformInspectionLotHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformInspectionLotHeaderDatumType)
	dataPlatformInspectionLotHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInspectionLotHeaderDatumType, dataPlatformInspectionLotHeaderDatumMapping, dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns)
	dataPlatformInspectionLotHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformInspectionLotHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInspectionLotHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInspectionLotHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInspectionLotHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInspectionLotHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInspectionLotHeaderDatum record from the query.
func (q dataPlatformInspectionLotHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInspectionLotHeaderDatum, error) {
	o := &DataPlatformInspectionLotHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_inspection_lot_header_data")
	}

	return o, nil
}

// All returns all DataPlatformInspectionLotHeaderDatum records from the query.
func (q dataPlatformInspectionLotHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInspectionLotHeaderDatumSlice, error) {
	var o []*DataPlatformInspectionLotHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInspectionLotHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInspectionLotHeaderDatum records in the query.
func (q dataPlatformInspectionLotHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_inspection_lot_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInspectionLotHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_inspection_lot_header_data exists")
	}

	return count > 0, nil
}

// InspectionPlantDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotHeaderDatum) InspectionPlantDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Plant` = ?", o.InspectionPlant),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// InspectionPlanDataPlatformInspectionPlanHeaderDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotHeaderDatum) InspectionPlanDataPlatformInspectionPlanHeaderDatum(mods ...qm.QueryMod) dataPlatformInspectionPlanHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InspectionPlan` = ?", o.InspectionPlan),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInspectionPlanHeaderData(queryMods...)
}

// InspectionPlantDataPlatformProductMasterQualityDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotHeaderDatum) InspectionPlantDataPlatformProductMasterQualityDatum(mods ...qm.QueryMod) dataPlatformProductMasterQualityDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Plant` = ?", o.InspectionPlant),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterQualityData(queryMods...)
}

// InspectionLotDataPlatformInspectionLotSpecGeneralDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotHeaderDatum) InspectionLotDataPlatformInspectionLotSpecGeneralDatum(mods ...qm.QueryMod) dataPlatformInspectionLotSpecGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InspectionLot` = ?", o.InspectionLot),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInspectionLotSpecGeneralData(queryMods...)
}

// InspectionLotDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via InspectionLot column.
func (o *DataPlatformInspectionLotHeaderDatum) InspectionLotDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`InspectionLot`=?", o.InspectionLot),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// InspectionLotDataPlatformInspectionLotComponentCompositionData retrieves all the data_platform_inspection_lot_component_composition_datum's DataPlatformInspectionLotComponentCompositionData with an executor via InspectionLot column.
func (o *DataPlatformInspectionLotHeaderDatum) InspectionLotDataPlatformInspectionLotComponentCompositionData(mods ...qm.QueryMod) dataPlatformInspectionLotComponentCompositionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_lot_component_composition_data`.`InspectionLot`=?", o.InspectionLot),
	)

	return DataPlatformInspectionLotComponentCompositionData(queryMods...)
}

// InspectionLotDataPlatformInspectionLotHeaderDocData retrieves all the data_platform_inspection_lot_header_doc_datum's DataPlatformInspectionLotHeaderDocData with an executor via InspectionLot column.
func (o *DataPlatformInspectionLotHeaderDatum) InspectionLotDataPlatformInspectionLotHeaderDocData(mods ...qm.QueryMod) dataPlatformInspectionLotHeaderDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_lot_header_doc_data`.`InspectionLot`=?", o.InspectionLot),
	)

	return DataPlatformInspectionLotHeaderDocData(queryMods...)
}

// InspectionLotDataPlatformInspectionLotInspectionData retrieves all the data_platform_inspection_lot_inspection_datum's DataPlatformInspectionLotInspectionData with an executor via InspectionLot column.
func (o *DataPlatformInspectionLotHeaderDatum) InspectionLotDataPlatformInspectionLotInspectionData(mods ...qm.QueryMod) dataPlatformInspectionLotInspectionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_lot_inspection_data`.`InspectionLot`=?", o.InspectionLot),
	)

	return DataPlatformInspectionLotInspectionData(queryMods...)
}

// InspectionLotDataPlatformInspectionLotPartnerData retrieves all the data_platform_inspection_lot_partner_datum's DataPlatformInspectionLotPartnerData with an executor via InspectionLot column.
func (o *DataPlatformInspectionLotHeaderDatum) InspectionLotDataPlatformInspectionLotPartnerData(mods ...qm.QueryMod) dataPlatformInspectionLotPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_lot_partner_data`.`InspectionLot`=?", o.InspectionLot),
	)

	return DataPlatformInspectionLotPartnerData(queryMods...)
}

// InspectionLotDataPlatformInspectionLotSpecDetailData retrieves all the data_platform_inspection_lot_spec_detail_datum's DataPlatformInspectionLotSpecDetailData with an executor via InspectionLot column.
func (o *DataPlatformInspectionLotHeaderDatum) InspectionLotDataPlatformInspectionLotSpecDetailData(mods ...qm.QueryMod) dataPlatformInspectionLotSpecDetailDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_lot_spec_detail_data`.`InspectionLot`=?", o.InspectionLot),
	)

	return DataPlatformInspectionLotSpecDetailData(queryMods...)
}

// InspectionLotDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via InspectionLot column.
func (o *DataPlatformInspectionLotHeaderDatum) InspectionLotDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`InspectionLot`=?", o.InspectionLot),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// LoadInspectionPlantDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotHeaderDatumL) LoadInspectionPlantDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotHeaderDatum
	var object *DataPlatformInspectionLotHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotHeaderDatum.(*DataPlatformInspectionLotHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotHeaderDatum.(*[]*DataPlatformInspectionLotHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotHeaderDatumR{}
		}
		args = append(args, object.InspectionPlant)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionPlant {
					continue Outer
				}
			}

			args = append(args, obj.InspectionPlant)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.Plant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionPlantDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InspectionPlant == foreign.Plant {
				local.R.InspectionPlantDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlanDataPlatformInspectionPlanHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotHeaderDatumL) LoadInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotHeaderDatum
	var object *DataPlatformInspectionLotHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotHeaderDatum.(*DataPlatformInspectionLotHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotHeaderDatum.(*[]*DataPlatformInspectionLotHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotHeaderDatumR{}
		}
		args = append(args, object.InspectionPlan)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionPlan {
					continue Outer
				}
			}

			args = append(args, obj.InspectionPlan)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_header_data`),
		qm.WhereIn(`data_platform_inspection_plan_header_data.InspectionPlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInspectionPlanHeaderDatum")
	}

	var resultSlice []*DataPlatformInspectionPlanHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInspectionPlanHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_inspection_plan_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InspectionPlan == foreign.InspectionPlan {
				local.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionPlantDataPlatformProductMasterQualityDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotHeaderDatumL) LoadInspectionPlantDataPlatformProductMasterQualityDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotHeaderDatum
	var object *DataPlatformInspectionLotHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotHeaderDatum.(*DataPlatformInspectionLotHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotHeaderDatum.(*[]*DataPlatformInspectionLotHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotHeaderDatumR{}
		}
		args = append(args, object.InspectionPlant)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionPlant {
					continue Outer
				}
			}

			args = append(args, obj.InspectionPlant)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_quality_data`),
		qm.WhereIn(`data_platform_product_master_quality_data.Plant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterQualityDatum")
	}

	var resultSlice []*DataPlatformProductMasterQualityDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterQualityDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_quality_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_quality_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionPlantDataPlatformProductMasterQualityDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InspectionPlant == foreign.Plant {
				local.R.InspectionPlantDataPlatformProductMasterQualityDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionLotDataPlatformInspectionLotSpecGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (dataPlatformInspectionLotHeaderDatumL) LoadInspectionLotDataPlatformInspectionLotSpecGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotHeaderDatum
	var object *DataPlatformInspectionLotHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotHeaderDatum.(*DataPlatformInspectionLotHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotHeaderDatum.(*[]*DataPlatformInspectionLotHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotHeaderDatumR{}
		}
		args = append(args, object.InspectionLot)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionLot {
					continue Outer
				}
			}

			args = append(args, obj.InspectionLot)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_spec_general_data`),
		qm.WhereIn(`data_platform_inspection_lot_spec_general_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInspectionLotSpecGeneralDatum")
	}

	var resultSlice []*DataPlatformInspectionLotSpecGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInspectionLotSpecGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_inspection_lot_spec_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_spec_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionLotDataPlatformInspectionLotSpecGeneralDatum = foreign
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InspectionLot == foreign.InspectionLot {
				local.R.InspectionLotDataPlatformInspectionLotSpecGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadInspectionLotDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionLotHeaderDatumL) LoadInspectionLotDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotHeaderDatum
	var object *DataPlatformInspectionLotHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotHeaderDatum.(*DataPlatformInspectionLotHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotHeaderDatum.(*[]*DataPlatformInspectionLotHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotHeaderDatumR{}
		}
		args = append(args, object.InspectionLot)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.InspectionLot) {
					continue Outer
				}
			}

			args = append(args, obj.InspectionLot)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.InspectionLotDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.InspectionLot, foreign.InspectionLot) {
				local.R.InspectionLotDataPlatformDeliveryDocumentItemData = append(local.R.InspectionLotDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionLotDataPlatformInspectionLotComponentCompositionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionLotHeaderDatumL) LoadInspectionLotDataPlatformInspectionLotComponentCompositionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotHeaderDatum
	var object *DataPlatformInspectionLotHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotHeaderDatum.(*DataPlatformInspectionLotHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotHeaderDatum.(*[]*DataPlatformInspectionLotHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotHeaderDatumR{}
		}
		args = append(args, object.InspectionLot)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionLot {
					continue Outer
				}
			}

			args = append(args, obj.InspectionLot)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_component_composition_data`),
		qm.WhereIn(`data_platform_inspection_lot_component_composition_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_lot_component_composition_data")
	}

	var resultSlice []*DataPlatformInspectionLotComponentCompositionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_lot_component_composition_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_lot_component_composition_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_component_composition_data")
	}

	if singular {
		object.R.InspectionLotDataPlatformInspectionLotComponentCompositionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InspectionLot == foreign.InspectionLot {
				local.R.InspectionLotDataPlatformInspectionLotComponentCompositionData = append(local.R.InspectionLotDataPlatformInspectionLotComponentCompositionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionLotDataPlatformInspectionLotHeaderDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionLotHeaderDatumL) LoadInspectionLotDataPlatformInspectionLotHeaderDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotHeaderDatum
	var object *DataPlatformInspectionLotHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotHeaderDatum.(*DataPlatformInspectionLotHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotHeaderDatum.(*[]*DataPlatformInspectionLotHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotHeaderDatumR{}
		}
		args = append(args, object.InspectionLot)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionLot {
					continue Outer
				}
			}

			args = append(args, obj.InspectionLot)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_header_doc_data`),
		qm.WhereIn(`data_platform_inspection_lot_header_doc_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_lot_header_doc_data")
	}

	var resultSlice []*DataPlatformInspectionLotHeaderDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_lot_header_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_lot_header_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_header_doc_data")
	}

	if singular {
		object.R.InspectionLotDataPlatformInspectionLotHeaderDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InspectionLot == foreign.InspectionLot {
				local.R.InspectionLotDataPlatformInspectionLotHeaderDocData = append(local.R.InspectionLotDataPlatformInspectionLotHeaderDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionLotDataPlatformInspectionLotInspectionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionLotHeaderDatumL) LoadInspectionLotDataPlatformInspectionLotInspectionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotHeaderDatum
	var object *DataPlatformInspectionLotHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotHeaderDatum.(*DataPlatformInspectionLotHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotHeaderDatum.(*[]*DataPlatformInspectionLotHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotHeaderDatumR{}
		}
		args = append(args, object.InspectionLot)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionLot {
					continue Outer
				}
			}

			args = append(args, obj.InspectionLot)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_inspection_data`),
		qm.WhereIn(`data_platform_inspection_lot_inspection_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_lot_inspection_data")
	}

	var resultSlice []*DataPlatformInspectionLotInspectionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_lot_inspection_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_lot_inspection_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_inspection_data")
	}

	if singular {
		object.R.InspectionLotDataPlatformInspectionLotInspectionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InspectionLot == foreign.InspectionLot {
				local.R.InspectionLotDataPlatformInspectionLotInspectionData = append(local.R.InspectionLotDataPlatformInspectionLotInspectionData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionLotDataPlatformInspectionLotPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionLotHeaderDatumL) LoadInspectionLotDataPlatformInspectionLotPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotHeaderDatum
	var object *DataPlatformInspectionLotHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotHeaderDatum.(*DataPlatformInspectionLotHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotHeaderDatum.(*[]*DataPlatformInspectionLotHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotHeaderDatumR{}
		}
		args = append(args, object.InspectionLot)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionLot {
					continue Outer
				}
			}

			args = append(args, obj.InspectionLot)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_partner_data`),
		qm.WhereIn(`data_platform_inspection_lot_partner_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_lot_partner_data")
	}

	var resultSlice []*DataPlatformInspectionLotPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_lot_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_lot_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_partner_data")
	}

	if singular {
		object.R.InspectionLotDataPlatformInspectionLotPartnerData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InspectionLot == foreign.InspectionLot {
				local.R.InspectionLotDataPlatformInspectionLotPartnerData = append(local.R.InspectionLotDataPlatformInspectionLotPartnerData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionLotDataPlatformInspectionLotSpecDetailData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionLotHeaderDatumL) LoadInspectionLotDataPlatformInspectionLotSpecDetailData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotHeaderDatum
	var object *DataPlatformInspectionLotHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotHeaderDatum.(*DataPlatformInspectionLotHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotHeaderDatum.(*[]*DataPlatformInspectionLotHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotHeaderDatumR{}
		}
		args = append(args, object.InspectionLot)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionLot {
					continue Outer
				}
			}

			args = append(args, obj.InspectionLot)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_spec_detail_data`),
		qm.WhereIn(`data_platform_inspection_lot_spec_detail_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_lot_spec_detail_data")
	}

	var resultSlice []*DataPlatformInspectionLotSpecDetailDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_lot_spec_detail_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_lot_spec_detail_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_spec_detail_data")
	}

	if singular {
		object.R.InspectionLotDataPlatformInspectionLotSpecDetailData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.InspectionLot == foreign.InspectionLot {
				local.R.InspectionLotDataPlatformInspectionLotSpecDetailData = append(local.R.InspectionLotDataPlatformInspectionLotSpecDetailData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInspectionLotDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformInspectionLotHeaderDatumL) LoadInspectionLotDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotHeaderDatum
	var object *DataPlatformInspectionLotHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotHeaderDatum.(*DataPlatformInspectionLotHeaderDatum)
		if !ok {
			object = new(DataPlatformInspectionLotHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotHeaderDatum.(*[]*DataPlatformInspectionLotHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotHeaderDatumR{}
		}
		args = append(args, object.InspectionLot)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotHeaderDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.InspectionLot) {
					continue Outer
				}
			}

			args = append(args, obj.InspectionLot)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.InspectionLotDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.InspectionLot, foreign.InspectionLot) {
				local.R.InspectionLotDataPlatformOrdersItemData = append(local.R.InspectionLotDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// SetInspectionPlantDataPlatformPlantGeneralDatum of the dataPlatformInspectionLotHeaderDatum to the related item.
// Sets o.R.InspectionPlantDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformInspectionLotHeaderDatum) SetInspectionPlantDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlant"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Plant, o.InspectionLot}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InspectionPlant = related.Plant
	if o.R == nil {
		o.R = &dataPlatformInspectionLotHeaderDatumR{
			InspectionPlantDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.InspectionPlantDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// SetInspectionPlanDataPlatformInspectionPlanHeaderDatum of the dataPlatformInspectionLotHeaderDatum to the related item.
// Sets o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum to related.
func (o *DataPlatformInspectionLotHeaderDatum) SetInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInspectionPlanHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlan"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.InspectionPlan, o.InspectionLot}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InspectionPlan = related.InspectionPlan
	if o.R == nil {
		o.R = &dataPlatformInspectionLotHeaderDatumR{
			InspectionPlanDataPlatformInspectionPlanHeaderDatum: related,
		}
	} else {
		o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = related
	}

	return nil
}

// SetInspectionPlantDataPlatformProductMasterQualityDatum of the dataPlatformInspectionLotHeaderDatum to the related item.
// Sets o.R.InspectionPlantDataPlatformProductMasterQualityDatum to related.
func (o *DataPlatformInspectionLotHeaderDatum) SetInspectionPlantDataPlatformProductMasterQualityDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterQualityDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlant"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Plant, o.InspectionLot}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InspectionPlant = related.Plant
	if o.R == nil {
		o.R = &dataPlatformInspectionLotHeaderDatumR{
			InspectionPlantDataPlatformProductMasterQualityDatum: related,
		}
	} else {
		o.R.InspectionPlantDataPlatformProductMasterQualityDatum = related
	}

	return nil
}

// SetInspectionLotDataPlatformInspectionLotSpecGeneralDatum of the dataPlatformInspectionLotHeaderDatum to the related item.
// Sets o.R.InspectionLotDataPlatformInspectionLotSpecGeneralDatum to related.
func (o *DataPlatformInspectionLotHeaderDatum) SetInspectionLotDataPlatformInspectionLotSpecGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInspectionLotSpecGeneralDatum) error {
	var err error

	if insert {
		related.InspectionLot = o.InspectionLot

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `data_platform_inspection_lot_spec_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
			strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotSpecGeneralDatumPrimaryKeyColumns),
		)
		values := []interface{}{o.InspectionLot, related.InspectionLot}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.InspectionLot = o.InspectionLot
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionLotHeaderDatumR{
			InspectionLotDataPlatformInspectionLotSpecGeneralDatum: related,
		}
	} else {
		o.R.InspectionLotDataPlatformInspectionLotSpecGeneralDatum = related
	}

	return nil
}

// AddInspectionLotDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_inspection_lot_header_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionLotDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformInspectionLotHeaderDatum) AddInspectionLotDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InspectionLot, o.InspectionLot)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InspectionLot, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InspectionLot, o.InspectionLot)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionLotHeaderDatumR{
			InspectionLotDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.InspectionLotDataPlatformDeliveryDocumentItemData = append(o.R.InspectionLotDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetInspectionLotDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_inspection_lot_header_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InspectionLotDataPlatformInspectionLotHeaderDatum's InspectionLotDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.InspectionLotDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformInspectionLotHeaderDatum) SetInspectionLotDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `InspectionLot` = null where `InspectionLot` = ?"
	values := []interface{}{o.InspectionLot}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.InspectionLotDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddInspectionLotDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveInspectionLotDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.InspectionLotDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformInspectionLotHeaderDatum) RemoveInspectionLotDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InspectionLot, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("InspectionLot")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InspectionLotDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.InspectionLotDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.InspectionLotDataPlatformDeliveryDocumentItemData[i] = o.R.InspectionLotDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.InspectionLotDataPlatformDeliveryDocumentItemData = o.R.InspectionLotDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddInspectionLotDataPlatformInspectionLotComponentCompositionData adds the given related objects to the existing relationships
// of the data_platform_inspection_lot_header_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionLotDataPlatformInspectionLotComponentCompositionData.
func (o *DataPlatformInspectionLotHeaderDatum) AddInspectionLotDataPlatformInspectionLotComponentCompositionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotComponentCompositionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionLot = o.InspectionLot
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_lot_component_composition_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InspectionLot, rel.InspectionLot, rel.ComponentCompositionType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionLot = o.InspectionLot
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionLotHeaderDatumR{
			InspectionLotDataPlatformInspectionLotComponentCompositionData: related,
		}
	} else {
		o.R.InspectionLotDataPlatformInspectionLotComponentCompositionData = append(o.R.InspectionLotDataPlatformInspectionLotComponentCompositionData, related...)
	}

	return nil
}

// AddInspectionLotDataPlatformInspectionLotHeaderDocData adds the given related objects to the existing relationships
// of the data_platform_inspection_lot_header_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionLotDataPlatformInspectionLotHeaderDocData.
func (o *DataPlatformInspectionLotHeaderDatum) AddInspectionLotDataPlatformInspectionLotHeaderDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotHeaderDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionLot = o.InspectionLot
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_lot_header_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotHeaderDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InspectionLot, rel.InspectionLot, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionLot = o.InspectionLot
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionLotHeaderDatumR{
			InspectionLotDataPlatformInspectionLotHeaderDocData: related,
		}
	} else {
		o.R.InspectionLotDataPlatformInspectionLotHeaderDocData = append(o.R.InspectionLotDataPlatformInspectionLotHeaderDocData, related...)
	}

	return nil
}

// AddInspectionLotDataPlatformInspectionLotInspectionData adds the given related objects to the existing relationships
// of the data_platform_inspection_lot_header_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionLotDataPlatformInspectionLotInspectionData.
func (o *DataPlatformInspectionLotHeaderDatum) AddInspectionLotDataPlatformInspectionLotInspectionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotInspectionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionLot = o.InspectionLot
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_lot_inspection_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotInspectionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InspectionLot, rel.InspectionLot, rel.Inspection}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionLot = o.InspectionLot
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionLotHeaderDatumR{
			InspectionLotDataPlatformInspectionLotInspectionData: related,
		}
	} else {
		o.R.InspectionLotDataPlatformInspectionLotInspectionData = append(o.R.InspectionLotDataPlatformInspectionLotInspectionData, related...)
	}

	return nil
}

// AddInspectionLotDataPlatformInspectionLotPartnerData adds the given related objects to the existing relationships
// of the data_platform_inspection_lot_header_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionLotDataPlatformInspectionLotPartnerData.
func (o *DataPlatformInspectionLotHeaderDatum) AddInspectionLotDataPlatformInspectionLotPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionLot = o.InspectionLot
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_lot_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InspectionLot, rel.InspectionLot, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionLot = o.InspectionLot
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionLotHeaderDatumR{
			InspectionLotDataPlatformInspectionLotPartnerData: related,
		}
	} else {
		o.R.InspectionLotDataPlatformInspectionLotPartnerData = append(o.R.InspectionLotDataPlatformInspectionLotPartnerData, related...)
	}

	return nil
}

// AddInspectionLotDataPlatformInspectionLotSpecDetailData adds the given related objects to the existing relationships
// of the data_platform_inspection_lot_header_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionLotDataPlatformInspectionLotSpecDetailData.
func (o *DataPlatformInspectionLotHeaderDatum) AddInspectionLotDataPlatformInspectionLotSpecDetailData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionLotSpecDetailDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.InspectionLot = o.InspectionLot
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_lot_spec_detail_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotSpecDetailDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InspectionLot, rel.InspectionLot, rel.SpecType}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.InspectionLot = o.InspectionLot
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionLotHeaderDatumR{
			InspectionLotDataPlatformInspectionLotSpecDetailData: related,
		}
	} else {
		o.R.InspectionLotDataPlatformInspectionLotSpecDetailData = append(o.R.InspectionLotDataPlatformInspectionLotSpecDetailData, related...)
	}

	return nil
}

// AddInspectionLotDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_inspection_lot_header_datum, optionally inserting them as new records.
// Appends related to o.R.InspectionLotDataPlatformOrdersItemData.
func (o *DataPlatformInspectionLotHeaderDatum) AddInspectionLotDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.InspectionLot, o.InspectionLot)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.InspectionLot, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.InspectionLot, o.InspectionLot)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformInspectionLotHeaderDatumR{
			InspectionLotDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.InspectionLotDataPlatformOrdersItemData = append(o.R.InspectionLotDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetInspectionLotDataPlatformOrdersItemData removes all previously related items of the
// data_platform_inspection_lot_header_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.InspectionLotDataPlatformInspectionLotHeaderDatum's InspectionLotDataPlatformOrdersItemData accordingly.
// Replaces o.R.InspectionLotDataPlatformOrdersItemData with related.
func (o *DataPlatformInspectionLotHeaderDatum) SetInspectionLotDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `InspectionLot` = null where `InspectionLot` = ?"
	values := []interface{}{o.InspectionLot}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.InspectionLotDataPlatformOrdersItemData = nil
	}

	return o.AddInspectionLotDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveInspectionLotDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.InspectionLotDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformInspectionLotHeaderDatum) RemoveInspectionLotDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.InspectionLot, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("InspectionLot")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InspectionLotDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.InspectionLotDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.InspectionLotDataPlatformOrdersItemData[i] = o.R.InspectionLotDataPlatformOrdersItemData[ln-1]
			}
			o.R.InspectionLotDataPlatformOrdersItemData = o.R.InspectionLotDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformInspectionLotHeaderData retrieves all the records using an executor.
func DataPlatformInspectionLotHeaderData(mods ...qm.QueryMod) dataPlatformInspectionLotHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_inspection_lot_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_inspection_lot_header_data`.*"})
	}

	return dataPlatformInspectionLotHeaderDatumQuery{q}
}

// FindDataPlatformInspectionLotHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInspectionLotHeaderDatum(ctx context.Context, exec boil.ContextExecutor, inspectionLot int, selectCols ...string) (*DataPlatformInspectionLotHeaderDatum, error) {
	dataPlatformInspectionLotHeaderDatumObj := &DataPlatformInspectionLotHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_inspection_lot_header_data` where `InspectionLot`=?", sel,
	)

	q := queries.Raw(query, inspectionLot)

	err := q.Bind(ctx, exec, dataPlatformInspectionLotHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_inspection_lot_header_data")
	}

	return dataPlatformInspectionLotHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInspectionLotHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_lot_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionLotHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInspectionLotHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotHeaderDatumInsertCache[key]
	dataPlatformInspectionLotHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInspectionLotHeaderDatumAllColumns,
			dataPlatformInspectionLotHeaderDatumColumnsWithDefault,
			dataPlatformInspectionLotHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotHeaderDatumType, dataPlatformInspectionLotHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInspectionLotHeaderDatumType, dataPlatformInspectionLotHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_inspection_lot_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_inspection_lot_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_inspection_lot_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_inspection_lot_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InspectionLot,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_lot_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionLotHeaderDatumInsertCacheMut.Lock()
		dataPlatformInspectionLotHeaderDatumInsertCache[key] = cache
		dataPlatformInspectionLotHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInspectionLotHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInspectionLotHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInspectionLotHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotHeaderDatumUpdateCache[key]
	dataPlatformInspectionLotHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInspectionLotHeaderDatumAllColumns,
			dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_inspection_lot_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_inspection_lot_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotHeaderDatumType, dataPlatformInspectionLotHeaderDatumMapping, append(wl, dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_inspection_lot_header_data row")
	}

	if !cached {
		dataPlatformInspectionLotHeaderDatumUpdateCacheMut.Lock()
		dataPlatformInspectionLotHeaderDatumUpdateCache[key] = cache
		dataPlatformInspectionLotHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInspectionLotHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_inspection_lot_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInspectionLotHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_inspection_lot_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInspectionLotHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformInspectionLotHeaderDatumUniqueColumns = []string{
	"InspectionLot",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInspectionLotHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_lot_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionLotHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInspectionLotHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInspectionLotHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotHeaderDatumUpsertCache[key]
	dataPlatformInspectionLotHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInspectionLotHeaderDatumAllColumns,
			dataPlatformInspectionLotHeaderDatumColumnsWithDefault,
			dataPlatformInspectionLotHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInspectionLotHeaderDatumAllColumns,
			dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_inspection_lot_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_inspection_lot_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_inspection_lot_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotHeaderDatumType, dataPlatformInspectionLotHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInspectionLotHeaderDatumType, dataPlatformInspectionLotHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_inspection_lot_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInspectionLotHeaderDatumType, dataPlatformInspectionLotHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_inspection_lot_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_lot_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionLotHeaderDatumUpsertCacheMut.Lock()
		dataPlatformInspectionLotHeaderDatumUpsertCache[key] = cache
		dataPlatformInspectionLotHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInspectionLotHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInspectionLotHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInspectionLotHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInspectionLotHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_inspection_lot_header_data` WHERE `InspectionLot`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_inspection_lot_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInspectionLotHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInspectionLotHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_inspection_lot_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInspectionLotHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_inspection_lot_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInspectionLotHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInspectionLotHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInspectionLotHeaderDatum(ctx, exec, o.InspectionLot)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInspectionLotHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInspectionLotHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_inspection_lot_header_data`.* FROM `data_platform_inspection_lot_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInspectionLotHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInspectionLotHeaderDatumExists checks if the DataPlatformInspectionLotHeaderDatum row exists.
func DataPlatformInspectionLotHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, inspectionLot int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_inspection_lot_header_data` where `InspectionLot`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inspectionLot)
	}
	row := exec.QueryRowContext(ctx, sql, inspectionLot)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_inspection_lot_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInspectionLotHeaderDatum row exists.
func (o *DataPlatformInspectionLotHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInspectionLotHeaderDatumExists(ctx, exec, o.InspectionLot)
}
