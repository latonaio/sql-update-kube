// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductMasterProductionDatum is an object representing the database table.
type DataPlatformProductMasterProductionDatum struct {
	Product                                           string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner                                   int          `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                                             string       `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	ProductionStorageLocation                         string       `boil:"ProductionStorageLocation" json:"ProductionStorageLocation" toml:"ProductionStorageLocation" yaml:"ProductionStorageLocation"`
	ProductProcessingDuration                         float32      `boil:"ProductProcessingDuration" json:"ProductProcessingDuration" toml:"ProductProcessingDuration" yaml:"ProductProcessingDuration"`
	ProductProcessingDurationUnit                     string       `boil:"ProductProcessingDurationUnit" json:"ProductProcessingDurationUnit" toml:"ProductProcessingDurationUnit" yaml:"ProductProcessingDurationUnit"`
	ProductProductionQuantityUnit                     string       `boil:"ProductProductionQuantityUnit" json:"ProductProductionQuantityUnit" toml:"ProductProductionQuantityUnit" yaml:"ProductProductionQuantityUnit"`
	MinimumProductionQuantityInBaseUnit               float32      `boil:"MinimumProductionQuantityInBaseUnit" json:"MinimumProductionQuantityInBaseUnit" toml:"MinimumProductionQuantityInBaseUnit" yaml:"MinimumProductionQuantityInBaseUnit"`
	MinimumProductionLotSizeQuantityInBaseUnit        float32      `boil:"MinimumProductionLotSizeQuantityInBaseUnit" json:"MinimumProductionLotSizeQuantityInBaseUnit" toml:"MinimumProductionLotSizeQuantityInBaseUnit" yaml:"MinimumProductionLotSizeQuantityInBaseUnit"`
	StandardProductionQuantityInBaseUnit              float32      `boil:"StandardProductionQuantityInBaseUnit" json:"StandardProductionQuantityInBaseUnit" toml:"StandardProductionQuantityInBaseUnit" yaml:"StandardProductionQuantityInBaseUnit"`
	StandardProductionLotSizeQuantityInBaseUnit       float32      `boil:"StandardProductionLotSizeQuantityInBaseUnit" json:"StandardProductionLotSizeQuantityInBaseUnit" toml:"StandardProductionLotSizeQuantityInBaseUnit" yaml:"StandardProductionLotSizeQuantityInBaseUnit"`
	MaximumProductionQuantityInBaseUnit               float32      `boil:"MaximumProductionQuantityInBaseUnit" json:"MaximumProductionQuantityInBaseUnit" toml:"MaximumProductionQuantityInBaseUnit" yaml:"MaximumProductionQuantityInBaseUnit"`
	MaximumProductionLotSizeQuantityInBaseUnit        float32      `boil:"MaximumProductionLotSizeQuantityInBaseUnit" json:"MaximumProductionLotSizeQuantityInBaseUnit" toml:"MaximumProductionLotSizeQuantityInBaseUnit" yaml:"MaximumProductionLotSizeQuantityInBaseUnit"`
	ProductionLotSizeRoundingQuantityInBaseUnit       null.Float32 `boil:"ProductionLotSizeRoundingQuantityInBaseUnit" json:"ProductionLotSizeRoundingQuantityInBaseUnit,omitempty" toml:"ProductionLotSizeRoundingQuantityInBaseUnit" yaml:"ProductionLotSizeRoundingQuantityInBaseUnit,omitempty"`
	MinimumProductionQuantityInProductionUnit         float32      `boil:"MinimumProductionQuantityInProductionUnit" json:"MinimumProductionQuantityInProductionUnit" toml:"MinimumProductionQuantityInProductionUnit" yaml:"MinimumProductionQuantityInProductionUnit"`
	MinimumProductionLotSizeQuantityInProductionUnit  float32      `boil:"MinimumProductionLotSizeQuantityInProductionUnit" json:"MinimumProductionLotSizeQuantityInProductionUnit" toml:"MinimumProductionLotSizeQuantityInProductionUnit" yaml:"MinimumProductionLotSizeQuantityInProductionUnit"`
	StandardProductionQuantityInProductionUnit        float32      `boil:"StandardProductionQuantityInProductionUnit" json:"StandardProductionQuantityInProductionUnit" toml:"StandardProductionQuantityInProductionUnit" yaml:"StandardProductionQuantityInProductionUnit"`
	StandardProductionLotSizeQuantityInProductionUnit float32      `boil:"StandardProductionLotSizeQuantityInProductionUnit" json:"StandardProductionLotSizeQuantityInProductionUnit" toml:"StandardProductionLotSizeQuantityInProductionUnit" yaml:"StandardProductionLotSizeQuantityInProductionUnit"`
	MaximumProductionQuantityInProductionUnit         float32      `boil:"MaximumProductionQuantityInProductionUnit" json:"MaximumProductionQuantityInProductionUnit" toml:"MaximumProductionQuantityInProductionUnit" yaml:"MaximumProductionQuantityInProductionUnit"`
	MaximumProductionLotSizeQuantityInProductionUnit  float32      `boil:"MaximumProductionLotSizeQuantityInProductionUnit" json:"MaximumProductionLotSizeQuantityInProductionUnit" toml:"MaximumProductionLotSizeQuantityInProductionUnit" yaml:"MaximumProductionLotSizeQuantityInProductionUnit"`
	ProductionLotSizeRoundingQuantityInProductionUnit null.Float32 `boil:"ProductionLotSizeRoundingQuantityInProductionUnit" json:"ProductionLotSizeRoundingQuantityInProductionUnit,omitempty" toml:"ProductionLotSizeRoundingQuantityInProductionUnit" yaml:"ProductionLotSizeRoundingQuantityInProductionUnit,omitempty"`
	ProductionLotSizeIsFixed                          null.Bool    `boil:"ProductionLotSizeIsFixed" json:"ProductionLotSizeIsFixed,omitempty" toml:"ProductionLotSizeIsFixed" yaml:"ProductionLotSizeIsFixed,omitempty"`
	ProductIsBatchManagedInProductionPlant            null.Bool    `boil:"ProductIsBatchManagedInProductionPlant" json:"ProductIsBatchManagedInProductionPlant,omitempty" toml:"ProductIsBatchManagedInProductionPlant" yaml:"ProductIsBatchManagedInProductionPlant,omitempty"`
	ProductIsMarkedForBackflush                       null.Bool    `boil:"ProductIsMarkedForBackflush" json:"ProductIsMarkedForBackflush,omitempty" toml:"ProductIsMarkedForBackflush" yaml:"ProductIsMarkedForBackflush,omitempty"`
	ProductionSchedulingProfile                       null.String  `boil:"ProductionSchedulingProfile" json:"ProductionSchedulingProfile,omitempty" toml:"ProductionSchedulingProfile" yaml:"ProductionSchedulingProfile,omitempty"`
	CreationDate                                      string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                                    string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                               null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductMasterProductionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductMasterProductionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductMasterProductionDatumColumns = struct {
	Product                                           string
	BusinessPartner                                   string
	Plant                                             string
	ProductionStorageLocation                         string
	ProductProcessingDuration                         string
	ProductProcessingDurationUnit                     string
	ProductProductionQuantityUnit                     string
	MinimumProductionQuantityInBaseUnit               string
	MinimumProductionLotSizeQuantityInBaseUnit        string
	StandardProductionQuantityInBaseUnit              string
	StandardProductionLotSizeQuantityInBaseUnit       string
	MaximumProductionQuantityInBaseUnit               string
	MaximumProductionLotSizeQuantityInBaseUnit        string
	ProductionLotSizeRoundingQuantityInBaseUnit       string
	MinimumProductionQuantityInProductionUnit         string
	MinimumProductionLotSizeQuantityInProductionUnit  string
	StandardProductionQuantityInProductionUnit        string
	StandardProductionLotSizeQuantityInProductionUnit string
	MaximumProductionQuantityInProductionUnit         string
	MaximumProductionLotSizeQuantityInProductionUnit  string
	ProductionLotSizeRoundingQuantityInProductionUnit string
	ProductionLotSizeIsFixed                          string
	ProductIsBatchManagedInProductionPlant            string
	ProductIsMarkedForBackflush                       string
	ProductionSchedulingProfile                       string
	CreationDate                                      string
	LastChangeDate                                    string
	IsMarkedForDeletion                               string
}{
	Product:                                           "Product",
	BusinessPartner:                                   "BusinessPartner",
	Plant:                                             "Plant",
	ProductionStorageLocation:                         "ProductionStorageLocation",
	ProductProcessingDuration:                         "ProductProcessingDuration",
	ProductProcessingDurationUnit:                     "ProductProcessingDurationUnit",
	ProductProductionQuantityUnit:                     "ProductProductionQuantityUnit",
	MinimumProductionQuantityInBaseUnit:               "MinimumProductionQuantityInBaseUnit",
	MinimumProductionLotSizeQuantityInBaseUnit:        "MinimumProductionLotSizeQuantityInBaseUnit",
	StandardProductionQuantityInBaseUnit:              "StandardProductionQuantityInBaseUnit",
	StandardProductionLotSizeQuantityInBaseUnit:       "StandardProductionLotSizeQuantityInBaseUnit",
	MaximumProductionQuantityInBaseUnit:               "MaximumProductionQuantityInBaseUnit",
	MaximumProductionLotSizeQuantityInBaseUnit:        "MaximumProductionLotSizeQuantityInBaseUnit",
	ProductionLotSizeRoundingQuantityInBaseUnit:       "ProductionLotSizeRoundingQuantityInBaseUnit",
	MinimumProductionQuantityInProductionUnit:         "MinimumProductionQuantityInProductionUnit",
	MinimumProductionLotSizeQuantityInProductionUnit:  "MinimumProductionLotSizeQuantityInProductionUnit",
	StandardProductionQuantityInProductionUnit:        "StandardProductionQuantityInProductionUnit",
	StandardProductionLotSizeQuantityInProductionUnit: "StandardProductionLotSizeQuantityInProductionUnit",
	MaximumProductionQuantityInProductionUnit:         "MaximumProductionQuantityInProductionUnit",
	MaximumProductionLotSizeQuantityInProductionUnit:  "MaximumProductionLotSizeQuantityInProductionUnit",
	ProductionLotSizeRoundingQuantityInProductionUnit: "ProductionLotSizeRoundingQuantityInProductionUnit",
	ProductionLotSizeIsFixed:                          "ProductionLotSizeIsFixed",
	ProductIsBatchManagedInProductionPlant:            "ProductIsBatchManagedInProductionPlant",
	ProductIsMarkedForBackflush:                       "ProductIsMarkedForBackflush",
	ProductionSchedulingProfile:                       "ProductionSchedulingProfile",
	CreationDate:                                      "CreationDate",
	LastChangeDate:                                    "LastChangeDate",
	IsMarkedForDeletion:                               "IsMarkedForDeletion",
}

var DataPlatformProductMasterProductionDatumTableColumns = struct {
	Product                                           string
	BusinessPartner                                   string
	Plant                                             string
	ProductionStorageLocation                         string
	ProductProcessingDuration                         string
	ProductProcessingDurationUnit                     string
	ProductProductionQuantityUnit                     string
	MinimumProductionQuantityInBaseUnit               string
	MinimumProductionLotSizeQuantityInBaseUnit        string
	StandardProductionQuantityInBaseUnit              string
	StandardProductionLotSizeQuantityInBaseUnit       string
	MaximumProductionQuantityInBaseUnit               string
	MaximumProductionLotSizeQuantityInBaseUnit        string
	ProductionLotSizeRoundingQuantityInBaseUnit       string
	MinimumProductionQuantityInProductionUnit         string
	MinimumProductionLotSizeQuantityInProductionUnit  string
	StandardProductionQuantityInProductionUnit        string
	StandardProductionLotSizeQuantityInProductionUnit string
	MaximumProductionQuantityInProductionUnit         string
	MaximumProductionLotSizeQuantityInProductionUnit  string
	ProductionLotSizeRoundingQuantityInProductionUnit string
	ProductionLotSizeIsFixed                          string
	ProductIsBatchManagedInProductionPlant            string
	ProductIsMarkedForBackflush                       string
	ProductionSchedulingProfile                       string
	CreationDate                                      string
	LastChangeDate                                    string
	IsMarkedForDeletion                               string
}{
	Product:                                           "data_platform_product_master_production_data.Product",
	BusinessPartner:                                   "data_platform_product_master_production_data.BusinessPartner",
	Plant:                                             "data_platform_product_master_production_data.Plant",
	ProductionStorageLocation:                         "data_platform_product_master_production_data.ProductionStorageLocation",
	ProductProcessingDuration:                         "data_platform_product_master_production_data.ProductProcessingDuration",
	ProductProcessingDurationUnit:                     "data_platform_product_master_production_data.ProductProcessingDurationUnit",
	ProductProductionQuantityUnit:                     "data_platform_product_master_production_data.ProductProductionQuantityUnit",
	MinimumProductionQuantityInBaseUnit:               "data_platform_product_master_production_data.MinimumProductionQuantityInBaseUnit",
	MinimumProductionLotSizeQuantityInBaseUnit:        "data_platform_product_master_production_data.MinimumProductionLotSizeQuantityInBaseUnit",
	StandardProductionQuantityInBaseUnit:              "data_platform_product_master_production_data.StandardProductionQuantityInBaseUnit",
	StandardProductionLotSizeQuantityInBaseUnit:       "data_platform_product_master_production_data.StandardProductionLotSizeQuantityInBaseUnit",
	MaximumProductionQuantityInBaseUnit:               "data_platform_product_master_production_data.MaximumProductionQuantityInBaseUnit",
	MaximumProductionLotSizeQuantityInBaseUnit:        "data_platform_product_master_production_data.MaximumProductionLotSizeQuantityInBaseUnit",
	ProductionLotSizeRoundingQuantityInBaseUnit:       "data_platform_product_master_production_data.ProductionLotSizeRoundingQuantityInBaseUnit",
	MinimumProductionQuantityInProductionUnit:         "data_platform_product_master_production_data.MinimumProductionQuantityInProductionUnit",
	MinimumProductionLotSizeQuantityInProductionUnit:  "data_platform_product_master_production_data.MinimumProductionLotSizeQuantityInProductionUnit",
	StandardProductionQuantityInProductionUnit:        "data_platform_product_master_production_data.StandardProductionQuantityInProductionUnit",
	StandardProductionLotSizeQuantityInProductionUnit: "data_platform_product_master_production_data.StandardProductionLotSizeQuantityInProductionUnit",
	MaximumProductionQuantityInProductionUnit:         "data_platform_product_master_production_data.MaximumProductionQuantityInProductionUnit",
	MaximumProductionLotSizeQuantityInProductionUnit:  "data_platform_product_master_production_data.MaximumProductionLotSizeQuantityInProductionUnit",
	ProductionLotSizeRoundingQuantityInProductionUnit: "data_platform_product_master_production_data.ProductionLotSizeRoundingQuantityInProductionUnit",
	ProductionLotSizeIsFixed:                          "data_platform_product_master_production_data.ProductionLotSizeIsFixed",
	ProductIsBatchManagedInProductionPlant:            "data_platform_product_master_production_data.ProductIsBatchManagedInProductionPlant",
	ProductIsMarkedForBackflush:                       "data_platform_product_master_production_data.ProductIsMarkedForBackflush",
	ProductionSchedulingProfile:                       "data_platform_product_master_production_data.ProductionSchedulingProfile",
	CreationDate:                                      "data_platform_product_master_production_data.CreationDate",
	LastChangeDate:                                    "data_platform_product_master_production_data.LastChangeDate",
	IsMarkedForDeletion:                               "data_platform_product_master_production_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductMasterProductionDatumWhere = struct {
	Product                                           whereHelperstring
	BusinessPartner                                   whereHelperint
	Plant                                             whereHelperstring
	ProductionStorageLocation                         whereHelperstring
	ProductProcessingDuration                         whereHelperfloat32
	ProductProcessingDurationUnit                     whereHelperstring
	ProductProductionQuantityUnit                     whereHelperstring
	MinimumProductionQuantityInBaseUnit               whereHelperfloat32
	MinimumProductionLotSizeQuantityInBaseUnit        whereHelperfloat32
	StandardProductionQuantityInBaseUnit              whereHelperfloat32
	StandardProductionLotSizeQuantityInBaseUnit       whereHelperfloat32
	MaximumProductionQuantityInBaseUnit               whereHelperfloat32
	MaximumProductionLotSizeQuantityInBaseUnit        whereHelperfloat32
	ProductionLotSizeRoundingQuantityInBaseUnit       whereHelpernull_Float32
	MinimumProductionQuantityInProductionUnit         whereHelperfloat32
	MinimumProductionLotSizeQuantityInProductionUnit  whereHelperfloat32
	StandardProductionQuantityInProductionUnit        whereHelperfloat32
	StandardProductionLotSizeQuantityInProductionUnit whereHelperfloat32
	MaximumProductionQuantityInProductionUnit         whereHelperfloat32
	MaximumProductionLotSizeQuantityInProductionUnit  whereHelperfloat32
	ProductionLotSizeRoundingQuantityInProductionUnit whereHelpernull_Float32
	ProductionLotSizeIsFixed                          whereHelpernull_Bool
	ProductIsBatchManagedInProductionPlant            whereHelpernull_Bool
	ProductIsMarkedForBackflush                       whereHelpernull_Bool
	ProductionSchedulingProfile                       whereHelpernull_String
	CreationDate                                      whereHelperstring
	LastChangeDate                                    whereHelperstring
	IsMarkedForDeletion                               whereHelpernull_Bool
}{
	Product:                                           whereHelperstring{field: "`data_platform_product_master_production_data`.`Product`"},
	BusinessPartner:                                   whereHelperint{field: "`data_platform_product_master_production_data`.`BusinessPartner`"},
	Plant:                                             whereHelperstring{field: "`data_platform_product_master_production_data`.`Plant`"},
	ProductionStorageLocation:                         whereHelperstring{field: "`data_platform_product_master_production_data`.`ProductionStorageLocation`"},
	ProductProcessingDuration:                         whereHelperfloat32{field: "`data_platform_product_master_production_data`.`ProductProcessingDuration`"},
	ProductProcessingDurationUnit:                     whereHelperstring{field: "`data_platform_product_master_production_data`.`ProductProcessingDurationUnit`"},
	ProductProductionQuantityUnit:                     whereHelperstring{field: "`data_platform_product_master_production_data`.`ProductProductionQuantityUnit`"},
	MinimumProductionQuantityInBaseUnit:               whereHelperfloat32{field: "`data_platform_product_master_production_data`.`MinimumProductionQuantityInBaseUnit`"},
	MinimumProductionLotSizeQuantityInBaseUnit:        whereHelperfloat32{field: "`data_platform_product_master_production_data`.`MinimumProductionLotSizeQuantityInBaseUnit`"},
	StandardProductionQuantityInBaseUnit:              whereHelperfloat32{field: "`data_platform_product_master_production_data`.`StandardProductionQuantityInBaseUnit`"},
	StandardProductionLotSizeQuantityInBaseUnit:       whereHelperfloat32{field: "`data_platform_product_master_production_data`.`StandardProductionLotSizeQuantityInBaseUnit`"},
	MaximumProductionQuantityInBaseUnit:               whereHelperfloat32{field: "`data_platform_product_master_production_data`.`MaximumProductionQuantityInBaseUnit`"},
	MaximumProductionLotSizeQuantityInBaseUnit:        whereHelperfloat32{field: "`data_platform_product_master_production_data`.`MaximumProductionLotSizeQuantityInBaseUnit`"},
	ProductionLotSizeRoundingQuantityInBaseUnit:       whereHelpernull_Float32{field: "`data_platform_product_master_production_data`.`ProductionLotSizeRoundingQuantityInBaseUnit`"},
	MinimumProductionQuantityInProductionUnit:         whereHelperfloat32{field: "`data_platform_product_master_production_data`.`MinimumProductionQuantityInProductionUnit`"},
	MinimumProductionLotSizeQuantityInProductionUnit:  whereHelperfloat32{field: "`data_platform_product_master_production_data`.`MinimumProductionLotSizeQuantityInProductionUnit`"},
	StandardProductionQuantityInProductionUnit:        whereHelperfloat32{field: "`data_platform_product_master_production_data`.`StandardProductionQuantityInProductionUnit`"},
	StandardProductionLotSizeQuantityInProductionUnit: whereHelperfloat32{field: "`data_platform_product_master_production_data`.`StandardProductionLotSizeQuantityInProductionUnit`"},
	MaximumProductionQuantityInProductionUnit:         whereHelperfloat32{field: "`data_platform_product_master_production_data`.`MaximumProductionQuantityInProductionUnit`"},
	MaximumProductionLotSizeQuantityInProductionUnit:  whereHelperfloat32{field: "`data_platform_product_master_production_data`.`MaximumProductionLotSizeQuantityInProductionUnit`"},
	ProductionLotSizeRoundingQuantityInProductionUnit: whereHelpernull_Float32{field: "`data_platform_product_master_production_data`.`ProductionLotSizeRoundingQuantityInProductionUnit`"},
	ProductionLotSizeIsFixed:                          whereHelpernull_Bool{field: "`data_platform_product_master_production_data`.`ProductionLotSizeIsFixed`"},
	ProductIsBatchManagedInProductionPlant:            whereHelpernull_Bool{field: "`data_platform_product_master_production_data`.`ProductIsBatchManagedInProductionPlant`"},
	ProductIsMarkedForBackflush:                       whereHelpernull_Bool{field: "`data_platform_product_master_production_data`.`ProductIsMarkedForBackflush`"},
	ProductionSchedulingProfile:                       whereHelpernull_String{field: "`data_platform_product_master_production_data`.`ProductionSchedulingProfile`"},
	CreationDate:                                      whereHelperstring{field: "`data_platform_product_master_production_data`.`CreationDate`"},
	LastChangeDate:                                    whereHelperstring{field: "`data_platform_product_master_production_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                               whereHelpernull_Bool{field: "`data_platform_product_master_production_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductMasterProductionDatumRels is where relationship names are stored.
var DataPlatformProductMasterProductionDatumRels = struct {
	BusinessPartnerDataPlatformProductMasterBPPlantDatum                   string
	BusinessPartnerDataPlatformPlantStorageLocationDatum                   string
	ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum string
	ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum string
}{
	BusinessPartnerDataPlatformProductMasterBPPlantDatum:                   "BusinessPartnerDataPlatformProductMasterBPPlantDatum",
	BusinessPartnerDataPlatformPlantStorageLocationDatum:                   "BusinessPartnerDataPlatformPlantStorageLocationDatum",
	ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: "ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum: "ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum",
}

// dataPlatformProductMasterProductionDatumR is where relationships are stored.
type dataPlatformProductMasterProductionDatumR struct {
	BusinessPartnerDataPlatformProductMasterBPPlantDatum                   *DataPlatformProductMasterBPPlantDatum     `boil:"BusinessPartnerDataPlatformProductMasterBPPlantDatum" json:"BusinessPartnerDataPlatformProductMasterBPPlantDatum" toml:"BusinessPartnerDataPlatformProductMasterBPPlantDatum" yaml:"BusinessPartnerDataPlatformProductMasterBPPlantDatum"`
	BusinessPartnerDataPlatformPlantStorageLocationDatum                   *DataPlatformPlantStorageLocationDatum     `boil:"BusinessPartnerDataPlatformPlantStorageLocationDatum" json:"BusinessPartnerDataPlatformPlantStorageLocationDatum" toml:"BusinessPartnerDataPlatformPlantStorageLocationDatum" yaml:"BusinessPartnerDataPlatformPlantStorageLocationDatum"`
	ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum `boil:"ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum `boil:"ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductMasterProductionDatumR) NewStruct() *dataPlatformProductMasterProductionDatumR {
	return &dataPlatformProductMasterProductionDatumR{}
}

func (r *dataPlatformProductMasterProductionDatumR) GetBusinessPartnerDataPlatformProductMasterBPPlantDatum() *DataPlatformProductMasterBPPlantDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformProductMasterBPPlantDatum
}

func (r *dataPlatformProductMasterProductionDatumR) GetBusinessPartnerDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformProductMasterProductionDatumR) GetProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductMasterProductionDatumR) GetProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum
}

// dataPlatformProductMasterProductionDatumL is where Load methods for each relationship are stored.
type dataPlatformProductMasterProductionDatumL struct{}

var (
	dataPlatformProductMasterProductionDatumAllColumns            = []string{"Product", "BusinessPartner", "Plant", "ProductionStorageLocation", "ProductProcessingDuration", "ProductProcessingDurationUnit", "ProductProductionQuantityUnit", "MinimumProductionQuantityInBaseUnit", "MinimumProductionLotSizeQuantityInBaseUnit", "StandardProductionQuantityInBaseUnit", "StandardProductionLotSizeQuantityInBaseUnit", "MaximumProductionQuantityInBaseUnit", "MaximumProductionLotSizeQuantityInBaseUnit", "ProductionLotSizeRoundingQuantityInBaseUnit", "MinimumProductionQuantityInProductionUnit", "MinimumProductionLotSizeQuantityInProductionUnit", "StandardProductionQuantityInProductionUnit", "StandardProductionLotSizeQuantityInProductionUnit", "MaximumProductionQuantityInProductionUnit", "MaximumProductionLotSizeQuantityInProductionUnit", "ProductionLotSizeRoundingQuantityInProductionUnit", "ProductionLotSizeIsFixed", "ProductIsBatchManagedInProductionPlant", "ProductIsMarkedForBackflush", "ProductionSchedulingProfile", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformProductMasterProductionDatumColumnsWithoutDefault = []string{"Product", "BusinessPartner", "Plant", "ProductionStorageLocation", "ProductProcessingDuration", "ProductProcessingDurationUnit", "ProductProductionQuantityUnit", "MinimumProductionQuantityInBaseUnit", "MinimumProductionLotSizeQuantityInBaseUnit", "StandardProductionQuantityInBaseUnit", "StandardProductionLotSizeQuantityInBaseUnit", "MaximumProductionQuantityInBaseUnit", "MaximumProductionLotSizeQuantityInBaseUnit", "ProductionLotSizeRoundingQuantityInBaseUnit", "MinimumProductionQuantityInProductionUnit", "MinimumProductionLotSizeQuantityInProductionUnit", "StandardProductionQuantityInProductionUnit", "StandardProductionLotSizeQuantityInProductionUnit", "MaximumProductionQuantityInProductionUnit", "MaximumProductionLotSizeQuantityInProductionUnit", "ProductionLotSizeRoundingQuantityInProductionUnit", "ProductionLotSizeIsFixed", "ProductIsBatchManagedInProductionPlant", "ProductIsMarkedForBackflush", "ProductionSchedulingProfile", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformProductMasterProductionDatumColumnsWithDefault    = []string{}
	dataPlatformProductMasterProductionDatumPrimaryKeyColumns     = []string{"Product", "BusinessPartner", "Plant"}
	dataPlatformProductMasterProductionDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductMasterProductionDatumSlice is an alias for a slice of pointers to DataPlatformProductMasterProductionDatum.
	// This should almost always be used instead of []DataPlatformProductMasterProductionDatum.
	DataPlatformProductMasterProductionDatumSlice []*DataPlatformProductMasterProductionDatum

	dataPlatformProductMasterProductionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductMasterProductionDatumType                 = reflect.TypeOf(&DataPlatformProductMasterProductionDatum{})
	dataPlatformProductMasterProductionDatumMapping              = queries.MakeStructMapping(dataPlatformProductMasterProductionDatumType)
	dataPlatformProductMasterProductionDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductMasterProductionDatumType, dataPlatformProductMasterProductionDatumMapping, dataPlatformProductMasterProductionDatumPrimaryKeyColumns)
	dataPlatformProductMasterProductionDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductMasterProductionDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductMasterProductionDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductMasterProductionDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductMasterProductionDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductMasterProductionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductMasterProductionDatum record from the query.
func (q dataPlatformProductMasterProductionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductMasterProductionDatum, error) {
	o := &DataPlatformProductMasterProductionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_master_production_data")
	}

	return o, nil
}

// All returns all DataPlatformProductMasterProductionDatum records from the query.
func (q dataPlatformProductMasterProductionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductMasterProductionDatumSlice, error) {
	var o []*DataPlatformProductMasterProductionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductMasterProductionDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductMasterProductionDatum records in the query.
func (q dataPlatformProductMasterProductionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_master_production_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductMasterProductionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_master_production_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformProductMasterBPPlantDatum pointed to by the foreign key.
func (o *DataPlatformProductMasterProductionDatum) BusinessPartnerDataPlatformProductMasterBPPlantDatum(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// BusinessPartnerDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformProductMasterProductionDatum) BusinessPartnerDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductMasterProductionDatum) ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductProcessingDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductMasterProductionDatum) ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductProductionQuantityUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// LoadBusinessPartnerDataPlatformProductMasterBPPlantDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductMasterProductionDatumL) LoadBusinessPartnerDataPlatformProductMasterBPPlantDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterProductionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterProductionDatum
	var object *DataPlatformProductMasterProductionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterProductionDatum.(*DataPlatformProductMasterProductionDatum)
		if !ok {
			object = new(DataPlatformProductMasterProductionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterProductionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterProductionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterProductionDatum.(*[]*DataPlatformProductMasterProductionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterProductionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterProductionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterProductionDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterProductionDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterBPPlantDatum")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterBPPlantDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformProductMasterBPPlantDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformProductMasterBPPlantDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductMasterProductionDatumL) LoadBusinessPartnerDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterProductionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterProductionDatum
	var object *DataPlatformProductMasterProductionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterProductionDatum.(*DataPlatformProductMasterProductionDatum)
		if !ok {
			object = new(DataPlatformProductMasterProductionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterProductionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterProductionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterProductionDatum.(*[]*DataPlatformProductMasterProductionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterProductionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterProductionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterProductionDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterProductionDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductMasterProductionDatumL) LoadProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterProductionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterProductionDatum
	var object *DataPlatformProductMasterProductionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterProductionDatum.(*DataPlatformProductMasterProductionDatum)
		if !ok {
			object = new(DataPlatformProductMasterProductionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterProductionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterProductionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterProductionDatum.(*[]*DataPlatformProductMasterProductionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterProductionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterProductionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterProductionDatumR{}
		}
		args = append(args, object.ProductProcessingDurationUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterProductionDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductProcessingDurationUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductProcessingDurationUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductProcessingDurationUnit == foreign.QuantityUnit {
				local.R.ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductMasterProductionDatumL) LoadProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterProductionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterProductionDatum
	var object *DataPlatformProductMasterProductionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterProductionDatum.(*DataPlatformProductMasterProductionDatum)
		if !ok {
			object = new(DataPlatformProductMasterProductionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterProductionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterProductionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterProductionDatum.(*[]*DataPlatformProductMasterProductionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterProductionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterProductionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterProductionDatumR{}
		}
		args = append(args, object.ProductProductionQuantityUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterProductionDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductProductionQuantityUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductProductionQuantityUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductProductionQuantityUnit == foreign.QuantityUnit {
				local.R.ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformProductMasterBPPlantDatum of the dataPlatformProductMasterProductionDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformProductMasterBPPlantDatum to related.
func (o *DataPlatformProductMasterProductionDatum) SetBusinessPartnerDataPlatformProductMasterBPPlantDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterBPPlantDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_master_production_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Product, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProductMasterProductionDatumR{
			BusinessPartnerDataPlatformProductMasterBPPlantDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformProductMasterBPPlantDatum = related
	}

	return nil
}

// SetBusinessPartnerDataPlatformPlantStorageLocationDatum of the dataPlatformProductMasterProductionDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformProductMasterProductionDatum) SetBusinessPartnerDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_master_production_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Product, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProductMasterProductionDatumR{
			BusinessPartnerDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// SetProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductMasterProductionDatum to the related item.
// Sets o.R.ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductMasterProductionDatum) SetProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_master_production_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductProcessingDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.Product, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductProcessingDurationUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformProductMasterProductionDatumR{
			ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductProcessingDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductMasterProductionDatum to the related item.
// Sets o.R.ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductMasterProductionDatum) SetProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_product_master_production_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionQuantityUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.Product, o.BusinessPartner, o.Plant}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductProductionQuantityUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformProductMasterProductionDatumR{
			ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductProductionQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// DataPlatformProductMasterProductionData retrieves all the records using an executor.
func DataPlatformProductMasterProductionData(mods ...qm.QueryMod) dataPlatformProductMasterProductionDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_master_production_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_master_production_data`.*"})
	}

	return dataPlatformProductMasterProductionDatumQuery{q}
}

// FindDataPlatformProductMasterProductionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductMasterProductionDatum(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string, selectCols ...string) (*DataPlatformProductMasterProductionDatum, error) {
	dataPlatformProductMasterProductionDatumObj := &DataPlatformProductMasterProductionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_master_production_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=?", sel,
	)

	q := queries.Raw(query, product, businessPartner, plant)

	err := q.Bind(ctx, exec, dataPlatformProductMasterProductionDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_master_production_data")
	}

	return dataPlatformProductMasterProductionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductMasterProductionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_production_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterProductionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductMasterProductionDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterProductionDatumInsertCache[key]
	dataPlatformProductMasterProductionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductMasterProductionDatumAllColumns,
			dataPlatformProductMasterProductionDatumColumnsWithDefault,
			dataPlatformProductMasterProductionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterProductionDatumType, dataPlatformProductMasterProductionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterProductionDatumType, dataPlatformProductMasterProductionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_master_production_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_master_production_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_master_production_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_master_production_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
		o.BusinessPartner,
		o.Plant,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_production_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterProductionDatumInsertCacheMut.Lock()
		dataPlatformProductMasterProductionDatumInsertCache[key] = cache
		dataPlatformProductMasterProductionDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductMasterProductionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductMasterProductionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductMasterProductionDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductMasterProductionDatumUpdateCache[key]
	dataPlatformProductMasterProductionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductMasterProductionDatumAllColumns,
			dataPlatformProductMasterProductionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_master_production_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_master_production_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterProductionDatumType, dataPlatformProductMasterProductionDatumMapping, append(wl, dataPlatformProductMasterProductionDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_master_production_data row")
	}

	if !cached {
		dataPlatformProductMasterProductionDatumUpdateCacheMut.Lock()
		dataPlatformProductMasterProductionDatumUpdateCache[key] = cache
		dataPlatformProductMasterProductionDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductMasterProductionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_master_production_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductMasterProductionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterProductionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_master_production_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductMasterProductionDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductMasterProductionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductMasterProductionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_production_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterProductionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductMasterProductionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductMasterProductionDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterProductionDatumUpsertCache[key]
	dataPlatformProductMasterProductionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductMasterProductionDatumAllColumns,
			dataPlatformProductMasterProductionDatumColumnsWithDefault,
			dataPlatformProductMasterProductionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductMasterProductionDatumAllColumns,
			dataPlatformProductMasterProductionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_master_production_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_master_production_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_master_production_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterProductionDatumType, dataPlatformProductMasterProductionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterProductionDatumType, dataPlatformProductMasterProductionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_master_production_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductMasterProductionDatumType, dataPlatformProductMasterProductionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_master_production_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_production_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterProductionDatumUpsertCacheMut.Lock()
		dataPlatformProductMasterProductionDatumUpsertCache[key] = cache
		dataPlatformProductMasterProductionDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductMasterProductionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductMasterProductionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductMasterProductionDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductMasterProductionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_master_production_data` WHERE `Product`=? AND `BusinessPartner`=? AND `Plant`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_master_production_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductMasterProductionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductMasterProductionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_master_production_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductMasterProductionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterProductionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_master_production_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductMasterProductionDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductMasterProductionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductMasterProductionDatum(ctx, exec, o.Product, o.BusinessPartner, o.Plant)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductMasterProductionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductMasterProductionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterProductionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_master_production_data`.* FROM `data_platform_product_master_production_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterProductionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductMasterProductionDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductMasterProductionDatumExists checks if the DataPlatformProductMasterProductionDatum row exists.
func DataPlatformProductMasterProductionDatumExists(ctx context.Context, exec boil.ContextExecutor, product string, businessPartner int, plant string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_master_production_data` where `Product`=? AND `BusinessPartner`=? AND `Plant`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product, businessPartner, plant)
	}
	row := exec.QueryRowContext(ctx, sql, product, businessPartner, plant)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_master_production_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductMasterProductionDatum row exists.
func (o *DataPlatformProductMasterProductionDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductMasterProductionDatumExists(ctx, exec, o.Product, o.BusinessPartner, o.Plant)
}
