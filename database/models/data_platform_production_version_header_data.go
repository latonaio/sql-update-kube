// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionVersionHeaderDatum is an object representing the database table.
type DataPlatformProductionVersionHeaderDatum struct {
	ProductionVersion       int         `boil:"ProductionVersion" json:"ProductionVersion" toml:"ProductionVersion" yaml:"ProductionVersion"`
	Product                 string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	OwnerBusinessPartner    int         `boil:"OwnerBusinessPartner" json:"OwnerBusinessPartner" toml:"OwnerBusinessPartner" yaml:"OwnerBusinessPartner"`
	OwnerPlant              string      `boil:"OwnerPlant" json:"OwnerPlant" toml:"OwnerPlant" yaml:"OwnerPlant"`
	BillOfMaterial          int         `boil:"BillOfMaterial" json:"BillOfMaterial" toml:"BillOfMaterial" yaml:"BillOfMaterial"`
	Operations              int         `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	ProductionVersionText   null.String `boil:"ProductionVersionText" json:"ProductionVersionText,omitempty" toml:"ProductionVersionText" yaml:"ProductionVersionText,omitempty"`
	ProductionVersionStatus null.String `boil:"ProductionVersionStatus" json:"ProductionVersionStatus,omitempty" toml:"ProductionVersionStatus" yaml:"ProductionVersionStatus,omitempty"`
	ValidityStartDate       null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate         null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	CreationDate            null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate          null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	IsLocked                null.Bool   `boil:"IsLocked" json:"IsLocked,omitempty" toml:"IsLocked" yaml:"IsLocked,omitempty"`
	IsMarkedForDeletion     null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductionVersionHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionVersionHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionVersionHeaderDatumColumns = struct {
	ProductionVersion       string
	Product                 string
	OwnerBusinessPartner    string
	OwnerPlant              string
	BillOfMaterial          string
	Operations              string
	ProductionVersionText   string
	ProductionVersionStatus string
	ValidityStartDate       string
	ValidityEndDate         string
	CreationDate            string
	LastChangeDate          string
	IsLocked                string
	IsMarkedForDeletion     string
}{
	ProductionVersion:       "ProductionVersion",
	Product:                 "Product",
	OwnerBusinessPartner:    "OwnerBusinessPartner",
	OwnerPlant:              "OwnerPlant",
	BillOfMaterial:          "BillOfMaterial",
	Operations:              "Operations",
	ProductionVersionText:   "ProductionVersionText",
	ProductionVersionStatus: "ProductionVersionStatus",
	ValidityStartDate:       "ValidityStartDate",
	ValidityEndDate:         "ValidityEndDate",
	CreationDate:            "CreationDate",
	LastChangeDate:          "LastChangeDate",
	IsLocked:                "IsLocked",
	IsMarkedForDeletion:     "IsMarkedForDeletion",
}

var DataPlatformProductionVersionHeaderDatumTableColumns = struct {
	ProductionVersion       string
	Product                 string
	OwnerBusinessPartner    string
	OwnerPlant              string
	BillOfMaterial          string
	Operations              string
	ProductionVersionText   string
	ProductionVersionStatus string
	ValidityStartDate       string
	ValidityEndDate         string
	CreationDate            string
	LastChangeDate          string
	IsLocked                string
	IsMarkedForDeletion     string
}{
	ProductionVersion:       "data_platform_production_version_header_data.ProductionVersion",
	Product:                 "data_platform_production_version_header_data.Product",
	OwnerBusinessPartner:    "data_platform_production_version_header_data.OwnerBusinessPartner",
	OwnerPlant:              "data_platform_production_version_header_data.OwnerPlant",
	BillOfMaterial:          "data_platform_production_version_header_data.BillOfMaterial",
	Operations:              "data_platform_production_version_header_data.Operations",
	ProductionVersionText:   "data_platform_production_version_header_data.ProductionVersionText",
	ProductionVersionStatus: "data_platform_production_version_header_data.ProductionVersionStatus",
	ValidityStartDate:       "data_platform_production_version_header_data.ValidityStartDate",
	ValidityEndDate:         "data_platform_production_version_header_data.ValidityEndDate",
	CreationDate:            "data_platform_production_version_header_data.CreationDate",
	LastChangeDate:          "data_platform_production_version_header_data.LastChangeDate",
	IsLocked:                "data_platform_production_version_header_data.IsLocked",
	IsMarkedForDeletion:     "data_platform_production_version_header_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductionVersionHeaderDatumWhere = struct {
	ProductionVersion       whereHelperint
	Product                 whereHelperstring
	OwnerBusinessPartner    whereHelperint
	OwnerPlant              whereHelperstring
	BillOfMaterial          whereHelperint
	Operations              whereHelperint
	ProductionVersionText   whereHelpernull_String
	ProductionVersionStatus whereHelpernull_String
	ValidityStartDate       whereHelpernull_String
	ValidityEndDate         whereHelpernull_String
	CreationDate            whereHelpernull_String
	LastChangeDate          whereHelpernull_String
	IsLocked                whereHelpernull_Bool
	IsMarkedForDeletion     whereHelpernull_Bool
}{
	ProductionVersion:       whereHelperint{field: "`data_platform_production_version_header_data`.`ProductionVersion`"},
	Product:                 whereHelperstring{field: "`data_platform_production_version_header_data`.`Product`"},
	OwnerBusinessPartner:    whereHelperint{field: "`data_platform_production_version_header_data`.`OwnerBusinessPartner`"},
	OwnerPlant:              whereHelperstring{field: "`data_platform_production_version_header_data`.`OwnerPlant`"},
	BillOfMaterial:          whereHelperint{field: "`data_platform_production_version_header_data`.`BillOfMaterial`"},
	Operations:              whereHelperint{field: "`data_platform_production_version_header_data`.`Operations`"},
	ProductionVersionText:   whereHelpernull_String{field: "`data_platform_production_version_header_data`.`ProductionVersionText`"},
	ProductionVersionStatus: whereHelpernull_String{field: "`data_platform_production_version_header_data`.`ProductionVersionStatus`"},
	ValidityStartDate:       whereHelpernull_String{field: "`data_platform_production_version_header_data`.`ValidityStartDate`"},
	ValidityEndDate:         whereHelpernull_String{field: "`data_platform_production_version_header_data`.`ValidityEndDate`"},
	CreationDate:            whereHelpernull_String{field: "`data_platform_production_version_header_data`.`CreationDate`"},
	LastChangeDate:          whereHelpernull_String{field: "`data_platform_production_version_header_data`.`LastChangeDate`"},
	IsLocked:                whereHelpernull_Bool{field: "`data_platform_production_version_header_data`.`IsLocked`"},
	IsMarkedForDeletion:     whereHelpernull_Bool{field: "`data_platform_production_version_header_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductionVersionHeaderDatumRels is where relationship names are stored.
var DataPlatformProductionVersionHeaderDatumRels = struct {
	OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum string
	ProductionVersionDataPlatformProductionVersionItemData    string
}{
	OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum: "OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum",
	ProductionVersionDataPlatformProductionVersionItemData:    "ProductionVersionDataPlatformProductionVersionItemData",
}

// dataPlatformProductionVersionHeaderDatumR is where relationships are stored.
type dataPlatformProductionVersionHeaderDatumR struct {
	OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum *DataPlatformProductMasterBPPlantDatum      `boil:"OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum" json:"OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum" toml:"OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum" yaml:"OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum"`
	ProductionVersionDataPlatformProductionVersionItemData    DataPlatformProductionVersionItemDatumSlice `boil:"ProductionVersionDataPlatformProductionVersionItemData" json:"ProductionVersionDataPlatformProductionVersionItemData" toml:"ProductionVersionDataPlatformProductionVersionItemData" yaml:"ProductionVersionDataPlatformProductionVersionItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionVersionHeaderDatumR) NewStruct() *dataPlatformProductionVersionHeaderDatumR {
	return &dataPlatformProductionVersionHeaderDatumR{}
}

func (r *dataPlatformProductionVersionHeaderDatumR) GetOwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum() *DataPlatformProductMasterBPPlantDatum {
	if r == nil {
		return nil
	}
	return r.OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum
}

func (r *dataPlatformProductionVersionHeaderDatumR) GetProductionVersionDataPlatformProductionVersionItemData() DataPlatformProductionVersionItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformProductionVersionItemData
}

// dataPlatformProductionVersionHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionVersionHeaderDatumL struct{}

var (
	dataPlatformProductionVersionHeaderDatumAllColumns            = []string{"ProductionVersion", "Product", "OwnerBusinessPartner", "OwnerPlant", "BillOfMaterial", "Operations", "ProductionVersionText", "ProductionVersionStatus", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsLocked", "IsMarkedForDeletion"}
	dataPlatformProductionVersionHeaderDatumColumnsWithoutDefault = []string{"ProductionVersion", "Product", "OwnerBusinessPartner", "OwnerPlant", "BillOfMaterial", "Operations", "ProductionVersionText", "ProductionVersionStatus", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsLocked", "IsMarkedForDeletion"}
	dataPlatformProductionVersionHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformProductionVersionHeaderDatumPrimaryKeyColumns     = []string{"ProductionVersion"}
	dataPlatformProductionVersionHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionVersionHeaderDatumSlice is an alias for a slice of pointers to DataPlatformProductionVersionHeaderDatum.
	// This should almost always be used instead of []DataPlatformProductionVersionHeaderDatum.
	DataPlatformProductionVersionHeaderDatumSlice []*DataPlatformProductionVersionHeaderDatum

	dataPlatformProductionVersionHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionVersionHeaderDatumType                 = reflect.TypeOf(&DataPlatformProductionVersionHeaderDatum{})
	dataPlatformProductionVersionHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformProductionVersionHeaderDatumType)
	dataPlatformProductionVersionHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionVersionHeaderDatumType, dataPlatformProductionVersionHeaderDatumMapping, dataPlatformProductionVersionHeaderDatumPrimaryKeyColumns)
	dataPlatformProductionVersionHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionVersionHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionVersionHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionVersionHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionVersionHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionVersionHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionVersionHeaderDatum record from the query.
func (q dataPlatformProductionVersionHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionVersionHeaderDatum, error) {
	o := &DataPlatformProductionVersionHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_version_header_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionVersionHeaderDatum records from the query.
func (q dataPlatformProductionVersionHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionVersionHeaderDatumSlice, error) {
	var o []*DataPlatformProductionVersionHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionVersionHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionVersionHeaderDatum records in the query.
func (q dataPlatformProductionVersionHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_version_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionVersionHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_version_header_data exists")
	}

	return count > 0, nil
}

// OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum pointed to by the foreign key.
func (o *DataPlatformProductionVersionHeaderDatum) OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.OwnerBusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// ProductionVersionDataPlatformProductionVersionItemData retrieves all the data_platform_production_version_item_datum's DataPlatformProductionVersionItemData with an executor via ProductionVersion column.
func (o *DataPlatformProductionVersionHeaderDatum) ProductionVersionDataPlatformProductionVersionItemData(mods ...qm.QueryMod) dataPlatformProductionVersionItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_version_item_data`.`ProductionVersion`=?", o.ProductionVersion),
	)

	return DataPlatformProductionVersionItemData(queryMods...)
}

// LoadOwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionVersionHeaderDatumL) LoadOwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionVersionHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionVersionHeaderDatum
	var object *DataPlatformProductionVersionHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionVersionHeaderDatum.(*DataPlatformProductionVersionHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionVersionHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionVersionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionVersionHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionVersionHeaderDatum.(*[]*DataPlatformProductionVersionHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionVersionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionVersionHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionVersionHeaderDatumR{}
		}
		args = append(args, object.OwnerBusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionVersionHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.OwnerBusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.OwnerBusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterBPPlantDatum")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterBPPlantDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerBusinessPartner == foreign.BusinessPartner {
				local.R.OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformProductionVersionItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionVersionHeaderDatumL) LoadProductionVersionDataPlatformProductionVersionItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionVersionHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionVersionHeaderDatum
	var object *DataPlatformProductionVersionHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionVersionHeaderDatum.(*DataPlatformProductionVersionHeaderDatum)
		if !ok {
			object = new(DataPlatformProductionVersionHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionVersionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionVersionHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionVersionHeaderDatum.(*[]*DataPlatformProductionVersionHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionVersionHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionVersionHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionVersionHeaderDatumR{}
		}
		args = append(args, object.ProductionVersion)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionVersionHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductionVersion {
					continue Outer
				}
			}

			args = append(args, obj.ProductionVersion)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_version_item_data`),
		qm.WhereIn(`data_platform_production_version_item_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_version_item_data")
	}

	var resultSlice []*DataPlatformProductionVersionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_version_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_version_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_version_item_data")
	}

	if singular {
		object.R.ProductionVersionDataPlatformProductionVersionItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ProductionVersion == foreign.ProductionVersion {
				local.R.ProductionVersionDataPlatformProductionVersionItemData = append(local.R.ProductionVersionDataPlatformProductionVersionItemData, foreign)
				break
			}
		}
	}

	return nil
}

// SetOwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum of the dataPlatformProductionVersionHeaderDatum to the related item.
// Sets o.R.OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum to related.
func (o *DataPlatformProductionVersionHeaderDatum) SetOwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterBPPlantDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_version_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OwnerBusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionVersionHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.ProductionVersion}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerBusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformProductionVersionHeaderDatumR{
			OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum: related,
		}
	} else {
		o.R.OwnerBusinessPartnerDataPlatformProductMasterBPPlantDatum = related
	}

	return nil
}

// AddProductionVersionDataPlatformProductionVersionItemData adds the given related objects to the existing relationships
// of the data_platform_production_version_header_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionVersionDataPlatformProductionVersionItemData.
func (o *DataPlatformProductionVersionHeaderDatum) AddProductionVersionDataPlatformProductionVersionItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionVersionItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductionVersion = o.ProductionVersion
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_version_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionVersionItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductionVersion, rel.ProductionVersion, rel.ProductionVersionItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductionVersion = o.ProductionVersion
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionVersionHeaderDatumR{
			ProductionVersionDataPlatformProductionVersionItemData: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformProductionVersionItemData = append(o.R.ProductionVersionDataPlatformProductionVersionItemData, related...)
	}

	return nil
}

// DataPlatformProductionVersionHeaderData retrieves all the records using an executor.
func DataPlatformProductionVersionHeaderData(mods ...qm.QueryMod) dataPlatformProductionVersionHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_version_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_version_header_data`.*"})
	}

	return dataPlatformProductionVersionHeaderDatumQuery{q}
}

// FindDataPlatformProductionVersionHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionVersionHeaderDatum(ctx context.Context, exec boil.ContextExecutor, productionVersion int, selectCols ...string) (*DataPlatformProductionVersionHeaderDatum, error) {
	dataPlatformProductionVersionHeaderDatumObj := &DataPlatformProductionVersionHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_version_header_data` where `ProductionVersion`=?", sel,
	)

	q := queries.Raw(query, productionVersion)

	err := q.Bind(ctx, exec, dataPlatformProductionVersionHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_version_header_data")
	}

	return dataPlatformProductionVersionHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionVersionHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_version_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionVersionHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionVersionHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionVersionHeaderDatumInsertCache[key]
	dataPlatformProductionVersionHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionVersionHeaderDatumAllColumns,
			dataPlatformProductionVersionHeaderDatumColumnsWithDefault,
			dataPlatformProductionVersionHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionVersionHeaderDatumType, dataPlatformProductionVersionHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionVersionHeaderDatumType, dataPlatformProductionVersionHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_version_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_version_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_version_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionVersionHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_version_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionVersion,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_version_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionVersionHeaderDatumInsertCacheMut.Lock()
		dataPlatformProductionVersionHeaderDatumInsertCache[key] = cache
		dataPlatformProductionVersionHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionVersionHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionVersionHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionVersionHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionVersionHeaderDatumUpdateCache[key]
	dataPlatformProductionVersionHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionVersionHeaderDatumAllColumns,
			dataPlatformProductionVersionHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_version_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_version_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionVersionHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionVersionHeaderDatumType, dataPlatformProductionVersionHeaderDatumMapping, append(wl, dataPlatformProductionVersionHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_version_header_data row")
	}

	if !cached {
		dataPlatformProductionVersionHeaderDatumUpdateCacheMut.Lock()
		dataPlatformProductionVersionHeaderDatumUpdateCache[key] = cache
		dataPlatformProductionVersionHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionVersionHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_version_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionVersionHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionVersionHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_version_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionVersionHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionVersionHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionVersionHeaderDatumUniqueColumns = []string{
	"ProductionVersion",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionVersionHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_version_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionVersionHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionVersionHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionVersionHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionVersionHeaderDatumUpsertCache[key]
	dataPlatformProductionVersionHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionVersionHeaderDatumAllColumns,
			dataPlatformProductionVersionHeaderDatumColumnsWithDefault,
			dataPlatformProductionVersionHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionVersionHeaderDatumAllColumns,
			dataPlatformProductionVersionHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_version_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_version_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_version_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionVersionHeaderDatumType, dataPlatformProductionVersionHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionVersionHeaderDatumType, dataPlatformProductionVersionHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_version_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionVersionHeaderDatumType, dataPlatformProductionVersionHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_version_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_version_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionVersionHeaderDatumUpsertCacheMut.Lock()
		dataPlatformProductionVersionHeaderDatumUpsertCache[key] = cache
		dataPlatformProductionVersionHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionVersionHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionVersionHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionVersionHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionVersionHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_version_header_data` WHERE `ProductionVersion`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_version_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionVersionHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionVersionHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_version_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionVersionHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionVersionHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_version_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionVersionHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionVersionHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionVersionHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionVersionHeaderDatum(ctx, exec, o.ProductionVersion)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionVersionHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionVersionHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionVersionHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_version_header_data`.* FROM `data_platform_production_version_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionVersionHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionVersionHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionVersionHeaderDatumExists checks if the DataPlatformProductionVersionHeaderDatum row exists.
func DataPlatformProductionVersionHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, productionVersion int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_version_header_data` where `ProductionVersion`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionVersion)
	}
	row := exec.QueryRowContext(ctx, sql, productionVersion)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_version_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionVersionHeaderDatum row exists.
func (o *DataPlatformProductionVersionHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionVersionHeaderDatumExists(ctx, exec, o.ProductionVersion)
}
