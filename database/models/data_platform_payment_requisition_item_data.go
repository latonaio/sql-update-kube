// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPaymentRequisitionItemDatum is an object representing the database table.
type DataPlatformPaymentRequisitionItemDatum struct {
	PayerPaymentRequisitionID        int         `boil:"PayerPaymentRequisitionID" json:"PayerPaymentRequisitionID" toml:"PayerPaymentRequisitionID" yaml:"PayerPaymentRequisitionID"`
	PayerPaymentRequisitionItem      int         `boil:"PayerPaymentRequisitionItem" json:"PayerPaymentRequisitionItem" toml:"PayerPaymentRequisitionItem" yaml:"PayerPaymentRequisitionItem"`
	Payer                            int         `boil:"Payer" json:"Payer" toml:"Payer" yaml:"Payer"`
	PayerPaymentDate                 string      `boil:"PayerPaymentDate" json:"PayerPaymentDate" toml:"PayerPaymentDate" yaml:"PayerPaymentDate"`
	SupplyChainRelationshipID        int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipBillingID int         `boil:"SupplyChainRelationshipBillingID" json:"SupplyChainRelationshipBillingID" toml:"SupplyChainRelationshipBillingID" yaml:"SupplyChainRelationshipBillingID"`
	SupplyChainRelationshipPaymentID int         `boil:"SupplyChainRelationshipPaymentID" json:"SupplyChainRelationshipPaymentID" toml:"SupplyChainRelationshipPaymentID" yaml:"SupplyChainRelationshipPaymentID"`
	BillToParty                      int         `boil:"BillToParty" json:"BillToParty" toml:"BillToParty" yaml:"BillToParty"`
	BillFromParty                    int         `boil:"BillFromParty" json:"BillFromParty" toml:"BillFromParty" yaml:"BillFromParty"`
	Payee                            int         `boil:"Payee" json:"Payee" toml:"Payee" yaml:"Payee"`
	Buyer                            int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                           int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	InvoiceDocument                  null.Int    `boil:"InvoiceDocument" json:"InvoiceDocument,omitempty" toml:"InvoiceDocument" yaml:"InvoiceDocument,omitempty"`
	PayeeHouseBank                   null.String `boil:"PayeeHouseBank" json:"PayeeHouseBank,omitempty" toml:"PayeeHouseBank" yaml:"PayeeHouseBank,omitempty"`
	PayeeHouseBankAccount            null.String `boil:"PayeeHouseBankAccount" json:"PayeeHouseBankAccount,omitempty" toml:"PayeeHouseBankAccount" yaml:"PayeeHouseBankAccount,omitempty"`
	PayeeFinInstCountry              string      `boil:"PayeeFinInstCountry" json:"PayeeFinInstCountry" toml:"PayeeFinInstCountry" yaml:"PayeeFinInstCountry"`
	PayeeFinInstCode                 string      `boil:"PayeeFinInstCode" json:"PayeeFinInstCode" toml:"PayeeFinInstCode" yaml:"PayeeFinInstCode"`
	PayeeFinInstBranchCode           string      `boil:"PayeeFinInstBranchCode" json:"PayeeFinInstBranchCode" toml:"PayeeFinInstBranchCode" yaml:"PayeeFinInstBranchCode"`
	PayeeFinInstFullCode             string      `boil:"PayeeFinInstFullCode" json:"PayeeFinInstFullCode" toml:"PayeeFinInstFullCode" yaml:"PayeeFinInstFullCode"`
	PayeeFinInstSWIFTCode            null.String `boil:"PayeeFinInstSWIFTCode" json:"PayeeFinInstSWIFTCode,omitempty" toml:"PayeeFinInstSWIFTCode" yaml:"PayeeFinInstSWIFTCode,omitempty"`
	PaytReqnItemAmtInTransCrcy       float32     `boil:"PaytReqnItemAmtInTransCrcy" json:"PaytReqnItemAmtInTransCrcy" toml:"PaytReqnItemAmtInTransCrcy" yaml:"PaytReqnItemAmtInTransCrcy"`
	PayeeInternalFinInstCustomerID   int         `boil:"PayeeInternalFinInstCustomerID" json:"PayeeInternalFinInstCustomerID" toml:"PayeeInternalFinInstCustomerID" yaml:"PayeeInternalFinInstCustomerID"`
	PayeeInternalFinInstAccountID    int         `boil:"PayeeInternalFinInstAccountID" json:"PayeeInternalFinInstAccountID" toml:"PayeeInternalFinInstAccountID" yaml:"PayeeInternalFinInstAccountID"`
	PayeeFinInstControlKey           string      `boil:"PayeeFinInstControlKey" json:"PayeeFinInstControlKey" toml:"PayeeFinInstControlKey" yaml:"PayeeFinInstControlKey"`
	PayeeFinInstAccount              string      `boil:"PayeeFinInstAccount" json:"PayeeFinInstAccount" toml:"PayeeFinInstAccount" yaml:"PayeeFinInstAccount"`
	PayeeFinInstAccountName          string      `boil:"PayeeFinInstAccountName" json:"PayeeFinInstAccountName" toml:"PayeeFinInstAccountName" yaml:"PayeeFinInstAccountName"`
	PayeeFinInstName                 string      `boil:"PayeeFinInstName" json:"PayeeFinInstName" toml:"PayeeFinInstName" yaml:"PayeeFinInstName"`
	PayeeFinInstBranchName           string      `boil:"PayeeFinInstBranchName" json:"PayeeFinInstBranchName" toml:"PayeeFinInstBranchName" yaml:"PayeeFinInstBranchName"`
	PayerAccountingDocument          null.Int    `boil:"PayerAccountingDocument" json:"PayerAccountingDocument,omitempty" toml:"PayerAccountingDocument" yaml:"PayerAccountingDocument,omitempty"`
	PayerAccountingDocumentItem      null.Int    `boil:"PayerAccountingDocumentItem" json:"PayerAccountingDocumentItem,omitempty" toml:"PayerAccountingDocumentItem" yaml:"PayerAccountingDocumentItem,omitempty"`
	CreationDateTime                 null.String `boil:"CreationDateTime" json:"CreationDateTime,omitempty" toml:"CreationDateTime" yaml:"CreationDateTime,omitempty"`
	ChangedOnDateTime                null.String `boil:"ChangedOnDateTime" json:"ChangedOnDateTime,omitempty" toml:"ChangedOnDateTime" yaml:"ChangedOnDateTime,omitempty"`

	R *dataPlatformPaymentRequisitionItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPaymentRequisitionItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPaymentRequisitionItemDatumColumns = struct {
	PayerPaymentRequisitionID        string
	PayerPaymentRequisitionItem      string
	Payer                            string
	PayerPaymentDate                 string
	SupplyChainRelationshipID        string
	SupplyChainRelationshipBillingID string
	SupplyChainRelationshipPaymentID string
	BillToParty                      string
	BillFromParty                    string
	Payee                            string
	Buyer                            string
	Seller                           string
	InvoiceDocument                  string
	PayeeHouseBank                   string
	PayeeHouseBankAccount            string
	PayeeFinInstCountry              string
	PayeeFinInstCode                 string
	PayeeFinInstBranchCode           string
	PayeeFinInstFullCode             string
	PayeeFinInstSWIFTCode            string
	PaytReqnItemAmtInTransCrcy       string
	PayeeInternalFinInstCustomerID   string
	PayeeInternalFinInstAccountID    string
	PayeeFinInstControlKey           string
	PayeeFinInstAccount              string
	PayeeFinInstAccountName          string
	PayeeFinInstName                 string
	PayeeFinInstBranchName           string
	PayerAccountingDocument          string
	PayerAccountingDocumentItem      string
	CreationDateTime                 string
	ChangedOnDateTime                string
}{
	PayerPaymentRequisitionID:        "PayerPaymentRequisitionID",
	PayerPaymentRequisitionItem:      "PayerPaymentRequisitionItem",
	Payer:                            "Payer",
	PayerPaymentDate:                 "PayerPaymentDate",
	SupplyChainRelationshipID:        "SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID: "SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID: "SupplyChainRelationshipPaymentID",
	BillToParty:                      "BillToParty",
	BillFromParty:                    "BillFromParty",
	Payee:                            "Payee",
	Buyer:                            "Buyer",
	Seller:                           "Seller",
	InvoiceDocument:                  "InvoiceDocument",
	PayeeHouseBank:                   "PayeeHouseBank",
	PayeeHouseBankAccount:            "PayeeHouseBankAccount",
	PayeeFinInstCountry:              "PayeeFinInstCountry",
	PayeeFinInstCode:                 "PayeeFinInstCode",
	PayeeFinInstBranchCode:           "PayeeFinInstBranchCode",
	PayeeFinInstFullCode:             "PayeeFinInstFullCode",
	PayeeFinInstSWIFTCode:            "PayeeFinInstSWIFTCode",
	PaytReqnItemAmtInTransCrcy:       "PaytReqnItemAmtInTransCrcy",
	PayeeInternalFinInstCustomerID:   "PayeeInternalFinInstCustomerID",
	PayeeInternalFinInstAccountID:    "PayeeInternalFinInstAccountID",
	PayeeFinInstControlKey:           "PayeeFinInstControlKey",
	PayeeFinInstAccount:              "PayeeFinInstAccount",
	PayeeFinInstAccountName:          "PayeeFinInstAccountName",
	PayeeFinInstName:                 "PayeeFinInstName",
	PayeeFinInstBranchName:           "PayeeFinInstBranchName",
	PayerAccountingDocument:          "PayerAccountingDocument",
	PayerAccountingDocumentItem:      "PayerAccountingDocumentItem",
	CreationDateTime:                 "CreationDateTime",
	ChangedOnDateTime:                "ChangedOnDateTime",
}

var DataPlatformPaymentRequisitionItemDatumTableColumns = struct {
	PayerPaymentRequisitionID        string
	PayerPaymentRequisitionItem      string
	Payer                            string
	PayerPaymentDate                 string
	SupplyChainRelationshipID        string
	SupplyChainRelationshipBillingID string
	SupplyChainRelationshipPaymentID string
	BillToParty                      string
	BillFromParty                    string
	Payee                            string
	Buyer                            string
	Seller                           string
	InvoiceDocument                  string
	PayeeHouseBank                   string
	PayeeHouseBankAccount            string
	PayeeFinInstCountry              string
	PayeeFinInstCode                 string
	PayeeFinInstBranchCode           string
	PayeeFinInstFullCode             string
	PayeeFinInstSWIFTCode            string
	PaytReqnItemAmtInTransCrcy       string
	PayeeInternalFinInstCustomerID   string
	PayeeInternalFinInstAccountID    string
	PayeeFinInstControlKey           string
	PayeeFinInstAccount              string
	PayeeFinInstAccountName          string
	PayeeFinInstName                 string
	PayeeFinInstBranchName           string
	PayerAccountingDocument          string
	PayerAccountingDocumentItem      string
	CreationDateTime                 string
	ChangedOnDateTime                string
}{
	PayerPaymentRequisitionID:        "data_platform_payment_requisition_item_data.PayerPaymentRequisitionID",
	PayerPaymentRequisitionItem:      "data_platform_payment_requisition_item_data.PayerPaymentRequisitionItem",
	Payer:                            "data_platform_payment_requisition_item_data.Payer",
	PayerPaymentDate:                 "data_platform_payment_requisition_item_data.PayerPaymentDate",
	SupplyChainRelationshipID:        "data_platform_payment_requisition_item_data.SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID: "data_platform_payment_requisition_item_data.SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID: "data_platform_payment_requisition_item_data.SupplyChainRelationshipPaymentID",
	BillToParty:                      "data_platform_payment_requisition_item_data.BillToParty",
	BillFromParty:                    "data_platform_payment_requisition_item_data.BillFromParty",
	Payee:                            "data_platform_payment_requisition_item_data.Payee",
	Buyer:                            "data_platform_payment_requisition_item_data.Buyer",
	Seller:                           "data_platform_payment_requisition_item_data.Seller",
	InvoiceDocument:                  "data_platform_payment_requisition_item_data.InvoiceDocument",
	PayeeHouseBank:                   "data_platform_payment_requisition_item_data.PayeeHouseBank",
	PayeeHouseBankAccount:            "data_platform_payment_requisition_item_data.PayeeHouseBankAccount",
	PayeeFinInstCountry:              "data_platform_payment_requisition_item_data.PayeeFinInstCountry",
	PayeeFinInstCode:                 "data_platform_payment_requisition_item_data.PayeeFinInstCode",
	PayeeFinInstBranchCode:           "data_platform_payment_requisition_item_data.PayeeFinInstBranchCode",
	PayeeFinInstFullCode:             "data_platform_payment_requisition_item_data.PayeeFinInstFullCode",
	PayeeFinInstSWIFTCode:            "data_platform_payment_requisition_item_data.PayeeFinInstSWIFTCode",
	PaytReqnItemAmtInTransCrcy:       "data_platform_payment_requisition_item_data.PaytReqnItemAmtInTransCrcy",
	PayeeInternalFinInstCustomerID:   "data_platform_payment_requisition_item_data.PayeeInternalFinInstCustomerID",
	PayeeInternalFinInstAccountID:    "data_platform_payment_requisition_item_data.PayeeInternalFinInstAccountID",
	PayeeFinInstControlKey:           "data_platform_payment_requisition_item_data.PayeeFinInstControlKey",
	PayeeFinInstAccount:              "data_platform_payment_requisition_item_data.PayeeFinInstAccount",
	PayeeFinInstAccountName:          "data_platform_payment_requisition_item_data.PayeeFinInstAccountName",
	PayeeFinInstName:                 "data_platform_payment_requisition_item_data.PayeeFinInstName",
	PayeeFinInstBranchName:           "data_platform_payment_requisition_item_data.PayeeFinInstBranchName",
	PayerAccountingDocument:          "data_platform_payment_requisition_item_data.PayerAccountingDocument",
	PayerAccountingDocumentItem:      "data_platform_payment_requisition_item_data.PayerAccountingDocumentItem",
	CreationDateTime:                 "data_platform_payment_requisition_item_data.CreationDateTime",
	ChangedOnDateTime:                "data_platform_payment_requisition_item_data.ChangedOnDateTime",
}

// Generated where

var DataPlatformPaymentRequisitionItemDatumWhere = struct {
	PayerPaymentRequisitionID        whereHelperint
	PayerPaymentRequisitionItem      whereHelperint
	Payer                            whereHelperint
	PayerPaymentDate                 whereHelperstring
	SupplyChainRelationshipID        whereHelperint
	SupplyChainRelationshipBillingID whereHelperint
	SupplyChainRelationshipPaymentID whereHelperint
	BillToParty                      whereHelperint
	BillFromParty                    whereHelperint
	Payee                            whereHelperint
	Buyer                            whereHelperint
	Seller                           whereHelperint
	InvoiceDocument                  whereHelpernull_Int
	PayeeHouseBank                   whereHelpernull_String
	PayeeHouseBankAccount            whereHelpernull_String
	PayeeFinInstCountry              whereHelperstring
	PayeeFinInstCode                 whereHelperstring
	PayeeFinInstBranchCode           whereHelperstring
	PayeeFinInstFullCode             whereHelperstring
	PayeeFinInstSWIFTCode            whereHelpernull_String
	PaytReqnItemAmtInTransCrcy       whereHelperfloat32
	PayeeInternalFinInstCustomerID   whereHelperint
	PayeeInternalFinInstAccountID    whereHelperint
	PayeeFinInstControlKey           whereHelperstring
	PayeeFinInstAccount              whereHelperstring
	PayeeFinInstAccountName          whereHelperstring
	PayeeFinInstName                 whereHelperstring
	PayeeFinInstBranchName           whereHelperstring
	PayerAccountingDocument          whereHelpernull_Int
	PayerAccountingDocumentItem      whereHelpernull_Int
	CreationDateTime                 whereHelpernull_String
	ChangedOnDateTime                whereHelpernull_String
}{
	PayerPaymentRequisitionID:        whereHelperint{field: "`data_platform_payment_requisition_item_data`.`PayerPaymentRequisitionID`"},
	PayerPaymentRequisitionItem:      whereHelperint{field: "`data_platform_payment_requisition_item_data`.`PayerPaymentRequisitionItem`"},
	Payer:                            whereHelperint{field: "`data_platform_payment_requisition_item_data`.`Payer`"},
	PayerPaymentDate:                 whereHelperstring{field: "`data_platform_payment_requisition_item_data`.`PayerPaymentDate`"},
	SupplyChainRelationshipID:        whereHelperint{field: "`data_platform_payment_requisition_item_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipBillingID: whereHelperint{field: "`data_platform_payment_requisition_item_data`.`SupplyChainRelationshipBillingID`"},
	SupplyChainRelationshipPaymentID: whereHelperint{field: "`data_platform_payment_requisition_item_data`.`SupplyChainRelationshipPaymentID`"},
	BillToParty:                      whereHelperint{field: "`data_platform_payment_requisition_item_data`.`BillToParty`"},
	BillFromParty:                    whereHelperint{field: "`data_platform_payment_requisition_item_data`.`BillFromParty`"},
	Payee:                            whereHelperint{field: "`data_platform_payment_requisition_item_data`.`Payee`"},
	Buyer:                            whereHelperint{field: "`data_platform_payment_requisition_item_data`.`Buyer`"},
	Seller:                           whereHelperint{field: "`data_platform_payment_requisition_item_data`.`Seller`"},
	InvoiceDocument:                  whereHelpernull_Int{field: "`data_platform_payment_requisition_item_data`.`InvoiceDocument`"},
	PayeeHouseBank:                   whereHelpernull_String{field: "`data_platform_payment_requisition_item_data`.`PayeeHouseBank`"},
	PayeeHouseBankAccount:            whereHelpernull_String{field: "`data_platform_payment_requisition_item_data`.`PayeeHouseBankAccount`"},
	PayeeFinInstCountry:              whereHelperstring{field: "`data_platform_payment_requisition_item_data`.`PayeeFinInstCountry`"},
	PayeeFinInstCode:                 whereHelperstring{field: "`data_platform_payment_requisition_item_data`.`PayeeFinInstCode`"},
	PayeeFinInstBranchCode:           whereHelperstring{field: "`data_platform_payment_requisition_item_data`.`PayeeFinInstBranchCode`"},
	PayeeFinInstFullCode:             whereHelperstring{field: "`data_platform_payment_requisition_item_data`.`PayeeFinInstFullCode`"},
	PayeeFinInstSWIFTCode:            whereHelpernull_String{field: "`data_platform_payment_requisition_item_data`.`PayeeFinInstSWIFTCode`"},
	PaytReqnItemAmtInTransCrcy:       whereHelperfloat32{field: "`data_platform_payment_requisition_item_data`.`PaytReqnItemAmtInTransCrcy`"},
	PayeeInternalFinInstCustomerID:   whereHelperint{field: "`data_platform_payment_requisition_item_data`.`PayeeInternalFinInstCustomerID`"},
	PayeeInternalFinInstAccountID:    whereHelperint{field: "`data_platform_payment_requisition_item_data`.`PayeeInternalFinInstAccountID`"},
	PayeeFinInstControlKey:           whereHelperstring{field: "`data_platform_payment_requisition_item_data`.`PayeeFinInstControlKey`"},
	PayeeFinInstAccount:              whereHelperstring{field: "`data_platform_payment_requisition_item_data`.`PayeeFinInstAccount`"},
	PayeeFinInstAccountName:          whereHelperstring{field: "`data_platform_payment_requisition_item_data`.`PayeeFinInstAccountName`"},
	PayeeFinInstName:                 whereHelperstring{field: "`data_platform_payment_requisition_item_data`.`PayeeFinInstName`"},
	PayeeFinInstBranchName:           whereHelperstring{field: "`data_platform_payment_requisition_item_data`.`PayeeFinInstBranchName`"},
	PayerAccountingDocument:          whereHelpernull_Int{field: "`data_platform_payment_requisition_item_data`.`PayerAccountingDocument`"},
	PayerAccountingDocumentItem:      whereHelpernull_Int{field: "`data_platform_payment_requisition_item_data`.`PayerAccountingDocumentItem`"},
	CreationDateTime:                 whereHelpernull_String{field: "`data_platform_payment_requisition_item_data`.`CreationDateTime`"},
	ChangedOnDateTime:                whereHelpernull_String{field: "`data_platform_payment_requisition_item_data`.`ChangedOnDateTime`"},
}

// DataPlatformPaymentRequisitionItemDatumRels is where relationship names are stored.
var DataPlatformPaymentRequisitionItemDatumRels = struct {
}{}

// dataPlatformPaymentRequisitionItemDatumR is where relationships are stored.
type dataPlatformPaymentRequisitionItemDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformPaymentRequisitionItemDatumR) NewStruct() *dataPlatformPaymentRequisitionItemDatumR {
	return &dataPlatformPaymentRequisitionItemDatumR{}
}

// dataPlatformPaymentRequisitionItemDatumL is where Load methods for each relationship are stored.
type dataPlatformPaymentRequisitionItemDatumL struct{}

var (
	dataPlatformPaymentRequisitionItemDatumAllColumns            = []string{"PayerPaymentRequisitionID", "PayerPaymentRequisitionItem", "Payer", "PayerPaymentDate", "SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "BillToParty", "BillFromParty", "Payee", "Buyer", "Seller", "InvoiceDocument", "PayeeHouseBank", "PayeeHouseBankAccount", "PayeeFinInstCountry", "PayeeFinInstCode", "PayeeFinInstBranchCode", "PayeeFinInstFullCode", "PayeeFinInstSWIFTCode", "PaytReqnItemAmtInTransCrcy", "PayeeInternalFinInstCustomerID", "PayeeInternalFinInstAccountID", "PayeeFinInstControlKey", "PayeeFinInstAccount", "PayeeFinInstAccountName", "PayeeFinInstName", "PayeeFinInstBranchName", "PayerAccountingDocument", "PayerAccountingDocumentItem", "CreationDateTime", "ChangedOnDateTime"}
	dataPlatformPaymentRequisitionItemDatumColumnsWithoutDefault = []string{"PayerPaymentRequisitionID", "PayerPaymentRequisitionItem", "Payer", "PayerPaymentDate", "SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "BillToParty", "BillFromParty", "Payee", "Buyer", "Seller", "InvoiceDocument", "PayeeHouseBank", "PayeeHouseBankAccount", "PayeeFinInstCountry", "PayeeFinInstCode", "PayeeFinInstBranchCode", "PayeeFinInstFullCode", "PayeeFinInstSWIFTCode", "PaytReqnItemAmtInTransCrcy", "PayeeInternalFinInstCustomerID", "PayeeInternalFinInstAccountID", "PayeeFinInstControlKey", "PayeeFinInstAccount", "PayeeFinInstAccountName", "PayeeFinInstName", "PayeeFinInstBranchName", "PayerAccountingDocument", "PayerAccountingDocumentItem", "CreationDateTime", "ChangedOnDateTime"}
	dataPlatformPaymentRequisitionItemDatumColumnsWithDefault    = []string{}
	dataPlatformPaymentRequisitionItemDatumPrimaryKeyColumns     = []string{"PayerPaymentRequisitionID", "PayerPaymentRequisitionItem"}
	dataPlatformPaymentRequisitionItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPaymentRequisitionItemDatumSlice is an alias for a slice of pointers to DataPlatformPaymentRequisitionItemDatum.
	// This should almost always be used instead of []DataPlatformPaymentRequisitionItemDatum.
	DataPlatformPaymentRequisitionItemDatumSlice []*DataPlatformPaymentRequisitionItemDatum

	dataPlatformPaymentRequisitionItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPaymentRequisitionItemDatumType                 = reflect.TypeOf(&DataPlatformPaymentRequisitionItemDatum{})
	dataPlatformPaymentRequisitionItemDatumMapping              = queries.MakeStructMapping(dataPlatformPaymentRequisitionItemDatumType)
	dataPlatformPaymentRequisitionItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPaymentRequisitionItemDatumType, dataPlatformPaymentRequisitionItemDatumMapping, dataPlatformPaymentRequisitionItemDatumPrimaryKeyColumns)
	dataPlatformPaymentRequisitionItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformPaymentRequisitionItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPaymentRequisitionItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPaymentRequisitionItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPaymentRequisitionItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPaymentRequisitionItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPaymentRequisitionItemDatum record from the query.
func (q dataPlatformPaymentRequisitionItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPaymentRequisitionItemDatum, error) {
	o := &DataPlatformPaymentRequisitionItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_payment_requisition_item_data")
	}

	return o, nil
}

// All returns all DataPlatformPaymentRequisitionItemDatum records from the query.
func (q dataPlatformPaymentRequisitionItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPaymentRequisitionItemDatumSlice, error) {
	var o []*DataPlatformPaymentRequisitionItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPaymentRequisitionItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPaymentRequisitionItemDatum records in the query.
func (q dataPlatformPaymentRequisitionItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_payment_requisition_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPaymentRequisitionItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_payment_requisition_item_data exists")
	}

	return count > 0, nil
}

// DataPlatformPaymentRequisitionItemData retrieves all the records using an executor.
func DataPlatformPaymentRequisitionItemData(mods ...qm.QueryMod) dataPlatformPaymentRequisitionItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_payment_requisition_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_payment_requisition_item_data`.*"})
	}

	return dataPlatformPaymentRequisitionItemDatumQuery{q}
}

// FindDataPlatformPaymentRequisitionItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPaymentRequisitionItemDatum(ctx context.Context, exec boil.ContextExecutor, payerPaymentRequisitionID int, payerPaymentRequisitionItem int, selectCols ...string) (*DataPlatformPaymentRequisitionItemDatum, error) {
	dataPlatformPaymentRequisitionItemDatumObj := &DataPlatformPaymentRequisitionItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_payment_requisition_item_data` where `PayerPaymentRequisitionID`=? AND `PayerPaymentRequisitionItem`=?", sel,
	)

	q := queries.Raw(query, payerPaymentRequisitionID, payerPaymentRequisitionItem)

	err := q.Bind(ctx, exec, dataPlatformPaymentRequisitionItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_payment_requisition_item_data")
	}

	return dataPlatformPaymentRequisitionItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPaymentRequisitionItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_payment_requisition_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPaymentRequisitionItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPaymentRequisitionItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPaymentRequisitionItemDatumInsertCache[key]
	dataPlatformPaymentRequisitionItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPaymentRequisitionItemDatumAllColumns,
			dataPlatformPaymentRequisitionItemDatumColumnsWithDefault,
			dataPlatformPaymentRequisitionItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPaymentRequisitionItemDatumType, dataPlatformPaymentRequisitionItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPaymentRequisitionItemDatumType, dataPlatformPaymentRequisitionItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_payment_requisition_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_payment_requisition_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_payment_requisition_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPaymentRequisitionItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_payment_requisition_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PayerPaymentRequisitionID,
		o.PayerPaymentRequisitionItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_payment_requisition_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPaymentRequisitionItemDatumInsertCacheMut.Lock()
		dataPlatformPaymentRequisitionItemDatumInsertCache[key] = cache
		dataPlatformPaymentRequisitionItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPaymentRequisitionItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPaymentRequisitionItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPaymentRequisitionItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPaymentRequisitionItemDatumUpdateCache[key]
	dataPlatformPaymentRequisitionItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPaymentRequisitionItemDatumAllColumns,
			dataPlatformPaymentRequisitionItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_payment_requisition_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_payment_requisition_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPaymentRequisitionItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPaymentRequisitionItemDatumType, dataPlatformPaymentRequisitionItemDatumMapping, append(wl, dataPlatformPaymentRequisitionItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_payment_requisition_item_data row")
	}

	if !cached {
		dataPlatformPaymentRequisitionItemDatumUpdateCacheMut.Lock()
		dataPlatformPaymentRequisitionItemDatumUpdateCache[key] = cache
		dataPlatformPaymentRequisitionItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPaymentRequisitionItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_payment_requisition_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPaymentRequisitionItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPaymentRequisitionItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_payment_requisition_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPaymentRequisitionItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPaymentRequisitionItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformPaymentRequisitionItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPaymentRequisitionItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_payment_requisition_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPaymentRequisitionItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPaymentRequisitionItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPaymentRequisitionItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPaymentRequisitionItemDatumUpsertCache[key]
	dataPlatformPaymentRequisitionItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPaymentRequisitionItemDatumAllColumns,
			dataPlatformPaymentRequisitionItemDatumColumnsWithDefault,
			dataPlatformPaymentRequisitionItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPaymentRequisitionItemDatumAllColumns,
			dataPlatformPaymentRequisitionItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_payment_requisition_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_payment_requisition_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_payment_requisition_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPaymentRequisitionItemDatumType, dataPlatformPaymentRequisitionItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPaymentRequisitionItemDatumType, dataPlatformPaymentRequisitionItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_payment_requisition_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPaymentRequisitionItemDatumType, dataPlatformPaymentRequisitionItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_payment_requisition_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_payment_requisition_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPaymentRequisitionItemDatumUpsertCacheMut.Lock()
		dataPlatformPaymentRequisitionItemDatumUpsertCache[key] = cache
		dataPlatformPaymentRequisitionItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPaymentRequisitionItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPaymentRequisitionItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPaymentRequisitionItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPaymentRequisitionItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_payment_requisition_item_data` WHERE `PayerPaymentRequisitionID`=? AND `PayerPaymentRequisitionItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_payment_requisition_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPaymentRequisitionItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPaymentRequisitionItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_payment_requisition_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPaymentRequisitionItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPaymentRequisitionItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_payment_requisition_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPaymentRequisitionItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPaymentRequisitionItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPaymentRequisitionItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPaymentRequisitionItemDatum(ctx, exec, o.PayerPaymentRequisitionID, o.PayerPaymentRequisitionItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPaymentRequisitionItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPaymentRequisitionItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPaymentRequisitionItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_payment_requisition_item_data`.* FROM `data_platform_payment_requisition_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPaymentRequisitionItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPaymentRequisitionItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPaymentRequisitionItemDatumExists checks if the DataPlatformPaymentRequisitionItemDatum row exists.
func DataPlatformPaymentRequisitionItemDatumExists(ctx context.Context, exec boil.ContextExecutor, payerPaymentRequisitionID int, payerPaymentRequisitionItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_payment_requisition_item_data` where `PayerPaymentRequisitionID`=? AND `PayerPaymentRequisitionItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, payerPaymentRequisitionID, payerPaymentRequisitionItem)
	}
	row := exec.QueryRowContext(ctx, sql, payerPaymentRequisitionID, payerPaymentRequisitionItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_payment_requisition_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPaymentRequisitionItemDatum row exists.
func (o *DataPlatformPaymentRequisitionItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPaymentRequisitionItemDatumExists(ctx, exec, o.PayerPaymentRequisitionID, o.PayerPaymentRequisitionItem)
}
