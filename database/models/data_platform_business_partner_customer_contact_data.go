// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerCustomerContactDatum is an object representing the database table.
type DataPlatformBusinessPartnerCustomerContactDatum struct {
	BusinessPartner     int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Customer            int         `boil:"Customer" json:"Customer" toml:"Customer" yaml:"Customer"`
	ContactID           int         `boil:"ContactID" json:"ContactID" toml:"ContactID" yaml:"ContactID"`
	ContactPersonName   null.String `boil:"ContactPersonName" json:"ContactPersonName,omitempty" toml:"ContactPersonName" yaml:"ContactPersonName,omitempty"`
	EmailAddress        null.String `boil:"EmailAddress" json:"EmailAddress,omitempty" toml:"EmailAddress" yaml:"EmailAddress,omitempty"`
	PhoneNumber         null.String `boil:"PhoneNumber" json:"PhoneNumber,omitempty" toml:"PhoneNumber" yaml:"PhoneNumber,omitempty"`
	MobilePhoneNumber   null.String `boil:"MobilePhoneNumber" json:"MobilePhoneNumber,omitempty" toml:"MobilePhoneNumber" yaml:"MobilePhoneNumber,omitempty"`
	FaxNumber           null.String `boil:"FaxNumber" json:"FaxNumber,omitempty" toml:"FaxNumber" yaml:"FaxNumber,omitempty"`
	ContactTag1         null.String `boil:"ContactTag1" json:"ContactTag1,omitempty" toml:"ContactTag1" yaml:"ContactTag1,omitempty"`
	ContactTag2         null.String `boil:"ContactTag2" json:"ContactTag2,omitempty" toml:"ContactTag2" yaml:"ContactTag2,omitempty"`
	ContactTag3         null.String `boil:"ContactTag3" json:"ContactTag3,omitempty" toml:"ContactTag3" yaml:"ContactTag3,omitempty"`
	ContactTag4         null.String `boil:"ContactTag4" json:"ContactTag4,omitempty" toml:"ContactTag4" yaml:"ContactTag4,omitempty"`
	DefaultContact      null.Bool   `boil:"DefaultContact" json:"DefaultContact,omitempty" toml:"DefaultContact" yaml:"DefaultContact,omitempty"`
	IsMarkedForDeletion null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBusinessPartnerCustomerContactDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerCustomerContactDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerCustomerContactDatumColumns = struct {
	BusinessPartner     string
	Customer            string
	ContactID           string
	ContactPersonName   string
	EmailAddress        string
	PhoneNumber         string
	MobilePhoneNumber   string
	FaxNumber           string
	ContactTag1         string
	ContactTag2         string
	ContactTag3         string
	ContactTag4         string
	DefaultContact      string
	IsMarkedForDeletion string
}{
	BusinessPartner:     "BusinessPartner",
	Customer:            "Customer",
	ContactID:           "ContactID",
	ContactPersonName:   "ContactPersonName",
	EmailAddress:        "EmailAddress",
	PhoneNumber:         "PhoneNumber",
	MobilePhoneNumber:   "MobilePhoneNumber",
	FaxNumber:           "FaxNumber",
	ContactTag1:         "ContactTag1",
	ContactTag2:         "ContactTag2",
	ContactTag3:         "ContactTag3",
	ContactTag4:         "ContactTag4",
	DefaultContact:      "DefaultContact",
	IsMarkedForDeletion: "IsMarkedForDeletion",
}

var DataPlatformBusinessPartnerCustomerContactDatumTableColumns = struct {
	BusinessPartner     string
	Customer            string
	ContactID           string
	ContactPersonName   string
	EmailAddress        string
	PhoneNumber         string
	MobilePhoneNumber   string
	FaxNumber           string
	ContactTag1         string
	ContactTag2         string
	ContactTag3         string
	ContactTag4         string
	DefaultContact      string
	IsMarkedForDeletion string
}{
	BusinessPartner:     "data_platform_business_partner_customer_contact_data.BusinessPartner",
	Customer:            "data_platform_business_partner_customer_contact_data.Customer",
	ContactID:           "data_platform_business_partner_customer_contact_data.ContactID",
	ContactPersonName:   "data_platform_business_partner_customer_contact_data.ContactPersonName",
	EmailAddress:        "data_platform_business_partner_customer_contact_data.EmailAddress",
	PhoneNumber:         "data_platform_business_partner_customer_contact_data.PhoneNumber",
	MobilePhoneNumber:   "data_platform_business_partner_customer_contact_data.MobilePhoneNumber",
	FaxNumber:           "data_platform_business_partner_customer_contact_data.FaxNumber",
	ContactTag1:         "data_platform_business_partner_customer_contact_data.ContactTag1",
	ContactTag2:         "data_platform_business_partner_customer_contact_data.ContactTag2",
	ContactTag3:         "data_platform_business_partner_customer_contact_data.ContactTag3",
	ContactTag4:         "data_platform_business_partner_customer_contact_data.ContactTag4",
	DefaultContact:      "data_platform_business_partner_customer_contact_data.DefaultContact",
	IsMarkedForDeletion: "data_platform_business_partner_customer_contact_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformBusinessPartnerCustomerContactDatumWhere = struct {
	BusinessPartner     whereHelperint
	Customer            whereHelperint
	ContactID           whereHelperint
	ContactPersonName   whereHelpernull_String
	EmailAddress        whereHelpernull_String
	PhoneNumber         whereHelpernull_String
	MobilePhoneNumber   whereHelpernull_String
	FaxNumber           whereHelpernull_String
	ContactTag1         whereHelpernull_String
	ContactTag2         whereHelpernull_String
	ContactTag3         whereHelpernull_String
	ContactTag4         whereHelpernull_String
	DefaultContact      whereHelpernull_Bool
	IsMarkedForDeletion whereHelpernull_Bool
}{
	BusinessPartner:     whereHelperint{field: "`data_platform_business_partner_customer_contact_data`.`BusinessPartner`"},
	Customer:            whereHelperint{field: "`data_platform_business_partner_customer_contact_data`.`Customer`"},
	ContactID:           whereHelperint{field: "`data_platform_business_partner_customer_contact_data`.`ContactID`"},
	ContactPersonName:   whereHelpernull_String{field: "`data_platform_business_partner_customer_contact_data`.`ContactPersonName`"},
	EmailAddress:        whereHelpernull_String{field: "`data_platform_business_partner_customer_contact_data`.`EmailAddress`"},
	PhoneNumber:         whereHelpernull_String{field: "`data_platform_business_partner_customer_contact_data`.`PhoneNumber`"},
	MobilePhoneNumber:   whereHelpernull_String{field: "`data_platform_business_partner_customer_contact_data`.`MobilePhoneNumber`"},
	FaxNumber:           whereHelpernull_String{field: "`data_platform_business_partner_customer_contact_data`.`FaxNumber`"},
	ContactTag1:         whereHelpernull_String{field: "`data_platform_business_partner_customer_contact_data`.`ContactTag1`"},
	ContactTag2:         whereHelpernull_String{field: "`data_platform_business_partner_customer_contact_data`.`ContactTag2`"},
	ContactTag3:         whereHelpernull_String{field: "`data_platform_business_partner_customer_contact_data`.`ContactTag3`"},
	ContactTag4:         whereHelpernull_String{field: "`data_platform_business_partner_customer_contact_data`.`ContactTag4`"},
	DefaultContact:      whereHelpernull_Bool{field: "`data_platform_business_partner_customer_contact_data`.`DefaultContact`"},
	IsMarkedForDeletion: whereHelpernull_Bool{field: "`data_platform_business_partner_customer_contact_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBusinessPartnerCustomerContactDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerCustomerContactDatumRels = struct {
	BusinessPartnerDataPlatformBusinessPartnerCustomerDatum string
}{
	BusinessPartnerDataPlatformBusinessPartnerCustomerDatum: "BusinessPartnerDataPlatformBusinessPartnerCustomerDatum",
}

// dataPlatformBusinessPartnerCustomerContactDatumR is where relationships are stored.
type dataPlatformBusinessPartnerCustomerContactDatumR struct {
	BusinessPartnerDataPlatformBusinessPartnerCustomerDatum *DataPlatformBusinessPartnerCustomerDatum `boil:"BusinessPartnerDataPlatformBusinessPartnerCustomerDatum" json:"BusinessPartnerDataPlatformBusinessPartnerCustomerDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerCustomerDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerCustomerDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerCustomerContactDatumR) NewStruct() *dataPlatformBusinessPartnerCustomerContactDatumR {
	return &dataPlatformBusinessPartnerCustomerContactDatumR{}
}

func (r *dataPlatformBusinessPartnerCustomerContactDatumR) GetBusinessPartnerDataPlatformBusinessPartnerCustomerDatum() *DataPlatformBusinessPartnerCustomerDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum
}

// dataPlatformBusinessPartnerCustomerContactDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerCustomerContactDatumL struct{}

var (
	dataPlatformBusinessPartnerCustomerContactDatumAllColumns            = []string{"BusinessPartner", "Customer", "ContactID", "ContactPersonName", "EmailAddress", "PhoneNumber", "MobilePhoneNumber", "FaxNumber", "ContactTag1", "ContactTag2", "ContactTag3", "ContactTag4", "DefaultContact", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerCustomerContactDatumColumnsWithoutDefault = []string{"BusinessPartner", "Customer", "ContactID", "ContactPersonName", "EmailAddress", "PhoneNumber", "MobilePhoneNumber", "FaxNumber", "ContactTag1", "ContactTag2", "ContactTag3", "ContactTag4", "DefaultContact", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerCustomerContactDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Customer", "ContactID"}
	dataPlatformBusinessPartnerCustomerContactDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerCustomerContactDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerCustomerContactDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerCustomerContactDatum.
	DataPlatformBusinessPartnerCustomerContactDatumSlice []*DataPlatformBusinessPartnerCustomerContactDatum
	// DataPlatformBusinessPartnerCustomerContactDatumHook is the signature for custom DataPlatformBusinessPartnerCustomerContactDatum hook methods
	DataPlatformBusinessPartnerCustomerContactDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformBusinessPartnerCustomerContactDatum) error

	dataPlatformBusinessPartnerCustomerContactDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerCustomerContactDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerCustomerContactDatum{})
	dataPlatformBusinessPartnerCustomerContactDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerCustomerContactDatumType)
	dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerCustomerContactDatumType, dataPlatformBusinessPartnerCustomerContactDatumMapping, dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerCustomerContactDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerCustomerContactDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerCustomerContactDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerCustomerContactDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerCustomerContactDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerCustomerContactDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformBusinessPartnerCustomerContactDatumAfterSelectHooks []DataPlatformBusinessPartnerCustomerContactDatumHook

var dataPlatformBusinessPartnerCustomerContactDatumBeforeInsertHooks []DataPlatformBusinessPartnerCustomerContactDatumHook
var dataPlatformBusinessPartnerCustomerContactDatumAfterInsertHooks []DataPlatformBusinessPartnerCustomerContactDatumHook

var dataPlatformBusinessPartnerCustomerContactDatumBeforeUpdateHooks []DataPlatformBusinessPartnerCustomerContactDatumHook
var dataPlatformBusinessPartnerCustomerContactDatumAfterUpdateHooks []DataPlatformBusinessPartnerCustomerContactDatumHook

var dataPlatformBusinessPartnerCustomerContactDatumBeforeDeleteHooks []DataPlatformBusinessPartnerCustomerContactDatumHook
var dataPlatformBusinessPartnerCustomerContactDatumAfterDeleteHooks []DataPlatformBusinessPartnerCustomerContactDatumHook

var dataPlatformBusinessPartnerCustomerContactDatumBeforeUpsertHooks []DataPlatformBusinessPartnerCustomerContactDatumHook
var dataPlatformBusinessPartnerCustomerContactDatumAfterUpsertHooks []DataPlatformBusinessPartnerCustomerContactDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerContactDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerContactDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerContactDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerContactDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerContactDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerContactDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerContactDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerContactDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerCustomerContactDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformBusinessPartnerCustomerContactDatumHook registers your hook function for all future operations.
func AddDataPlatformBusinessPartnerCustomerContactDatumHook(hookPoint boil.HookPoint, dataPlatformBusinessPartnerCustomerContactDatumHook DataPlatformBusinessPartnerCustomerContactDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformBusinessPartnerCustomerContactDatumAfterSelectHooks = append(dataPlatformBusinessPartnerCustomerContactDatumAfterSelectHooks, dataPlatformBusinessPartnerCustomerContactDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformBusinessPartnerCustomerContactDatumBeforeInsertHooks = append(dataPlatformBusinessPartnerCustomerContactDatumBeforeInsertHooks, dataPlatformBusinessPartnerCustomerContactDatumHook)
	case boil.AfterInsertHook:
		dataPlatformBusinessPartnerCustomerContactDatumAfterInsertHooks = append(dataPlatformBusinessPartnerCustomerContactDatumAfterInsertHooks, dataPlatformBusinessPartnerCustomerContactDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformBusinessPartnerCustomerContactDatumBeforeUpdateHooks = append(dataPlatformBusinessPartnerCustomerContactDatumBeforeUpdateHooks, dataPlatformBusinessPartnerCustomerContactDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformBusinessPartnerCustomerContactDatumAfterUpdateHooks = append(dataPlatformBusinessPartnerCustomerContactDatumAfterUpdateHooks, dataPlatformBusinessPartnerCustomerContactDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformBusinessPartnerCustomerContactDatumBeforeDeleteHooks = append(dataPlatformBusinessPartnerCustomerContactDatumBeforeDeleteHooks, dataPlatformBusinessPartnerCustomerContactDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformBusinessPartnerCustomerContactDatumAfterDeleteHooks = append(dataPlatformBusinessPartnerCustomerContactDatumAfterDeleteHooks, dataPlatformBusinessPartnerCustomerContactDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformBusinessPartnerCustomerContactDatumBeforeUpsertHooks = append(dataPlatformBusinessPartnerCustomerContactDatumBeforeUpsertHooks, dataPlatformBusinessPartnerCustomerContactDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformBusinessPartnerCustomerContactDatumAfterUpsertHooks = append(dataPlatformBusinessPartnerCustomerContactDatumAfterUpsertHooks, dataPlatformBusinessPartnerCustomerContactDatumHook)
	}
}

// One returns a single dataPlatformBusinessPartnerCustomerContactDatum record from the query.
func (q dataPlatformBusinessPartnerCustomerContactDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerCustomerContactDatum, error) {
	o := &DataPlatformBusinessPartnerCustomerContactDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_customer_contact_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerCustomerContactDatum records from the query.
func (q dataPlatformBusinessPartnerCustomerContactDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerCustomerContactDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerCustomerContactDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerCustomerContactDatum slice")
	}

	if len(dataPlatformBusinessPartnerCustomerContactDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerCustomerContactDatum records in the query.
func (q dataPlatformBusinessPartnerCustomerContactDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_customer_contact_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerCustomerContactDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_customer_contact_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformBusinessPartnerCustomerDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) BusinessPartnerDataPlatformBusinessPartnerCustomerDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerCustomerDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerCustomerData(queryMods...)
}

// LoadBusinessPartnerDataPlatformBusinessPartnerCustomerDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerCustomerContactDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerCustomerDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerCustomerContactDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerCustomerContactDatum
	var object *DataPlatformBusinessPartnerCustomerContactDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerCustomerContactDatum.(*DataPlatformBusinessPartnerCustomerContactDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerCustomerContactDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerCustomerContactDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerCustomerContactDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerCustomerContactDatum.(*[]*DataPlatformBusinessPartnerCustomerContactDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerCustomerContactDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerCustomerContactDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerCustomerContactDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerCustomerContactDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_customer_data`),
		qm.WhereIn(`data_platform_business_partner_customer_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerCustomerDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerCustomerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerCustomerDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_customer_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_customer_data")
	}

	if len(dataPlatformBusinessPartnerCustomerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerCustomerDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerCustomerDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData, local)
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerCustomerDatum of the dataPlatformBusinessPartnerCustomerContactDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) SetBusinessPartnerDataPlatformBusinessPartnerCustomerDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerCustomerDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_customer_contact_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Customer, o.ContactID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerCustomerContactDatumR{
			BusinessPartnerDataPlatformBusinessPartnerCustomerDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerCustomerDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerCustomerDatumR{
			BusinessPartnerDataPlatformBusinessPartnerCustomerContactData: DataPlatformBusinessPartnerCustomerContactDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData = append(related.R.BusinessPartnerDataPlatformBusinessPartnerCustomerContactData, o)
	}

	return nil
}

// DataPlatformBusinessPartnerCustomerContactData retrieves all the records using an executor.
func DataPlatformBusinessPartnerCustomerContactData(mods ...qm.QueryMod) dataPlatformBusinessPartnerCustomerContactDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_customer_contact_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_customer_contact_data`.*"})
	}

	return dataPlatformBusinessPartnerCustomerContactDatumQuery{q}
}

// FindDataPlatformBusinessPartnerCustomerContactDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerCustomerContactDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, customer int, contactID int, selectCols ...string) (*DataPlatformBusinessPartnerCustomerContactDatum, error) {
	dataPlatformBusinessPartnerCustomerContactDatumObj := &DataPlatformBusinessPartnerCustomerContactDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_customer_contact_data` where `BusinessPartner`=? AND `Customer`=? AND `ContactID`=?", sel,
	)

	q := queries.Raw(query, businessPartner, customer, contactID)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerCustomerContactDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_customer_contact_data")
	}

	if err = dataPlatformBusinessPartnerCustomerContactDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformBusinessPartnerCustomerContactDatumObj, err
	}

	return dataPlatformBusinessPartnerCustomerContactDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_customer_contact_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerCustomerContactDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerCustomerContactDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerCustomerContactDatumInsertCache[key]
	dataPlatformBusinessPartnerCustomerContactDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerCustomerContactDatumAllColumns,
			dataPlatformBusinessPartnerCustomerContactDatumColumnsWithDefault,
			dataPlatformBusinessPartnerCustomerContactDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerContactDatumType, dataPlatformBusinessPartnerCustomerContactDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerContactDatumType, dataPlatformBusinessPartnerCustomerContactDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_customer_contact_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_customer_contact_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_customer_contact_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_customer_contact_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Customer,
		o.ContactID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_customer_contact_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerCustomerContactDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerCustomerContactDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerCustomerContactDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformBusinessPartnerCustomerContactDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerCustomerContactDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerCustomerContactDatumUpdateCache[key]
	dataPlatformBusinessPartnerCustomerContactDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerCustomerContactDatumAllColumns,
			dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_business_partner_customer_contact_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_customer_contact_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerContactDatumType, dataPlatformBusinessPartnerCustomerContactDatumMapping, append(wl, dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_business_partner_customer_contact_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_business_partner_customer_contact_data")
	}

	if !cached {
		dataPlatformBusinessPartnerCustomerContactDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerCustomerContactDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerCustomerContactDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerCustomerContactDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_business_partner_customer_contact_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_business_partner_customer_contact_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerCustomerContactDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_customer_contact_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerCustomerContactDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformBusinessPartnerCustomerContactDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformBusinessPartnerCustomerContactDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_customer_contact_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerCustomerContactDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerCustomerContactDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerCustomerContactDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerCustomerContactDatumUpsertCache[key]
	dataPlatformBusinessPartnerCustomerContactDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerCustomerContactDatumAllColumns,
			dataPlatformBusinessPartnerCustomerContactDatumColumnsWithDefault,
			dataPlatformBusinessPartnerCustomerContactDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerCustomerContactDatumAllColumns,
			dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_customer_contact_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_customer_contact_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_customer_contact_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerContactDatumType, dataPlatformBusinessPartnerCustomerContactDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerContactDatumType, dataPlatformBusinessPartnerCustomerContactDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_customer_contact_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerCustomerContactDatumType, dataPlatformBusinessPartnerCustomerContactDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_customer_contact_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_customer_contact_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerCustomerContactDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerCustomerContactDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerCustomerContactDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformBusinessPartnerCustomerContactDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformBusinessPartnerCustomerContactDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_customer_contact_data` WHERE `BusinessPartner`=? AND `Customer`=? AND `ContactID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_business_partner_customer_contact_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_business_partner_customer_contact_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerCustomerContactDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformBusinessPartnerCustomerContactDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_customer_contact_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_customer_contact_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerCustomerContactDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformBusinessPartnerCustomerContactDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_customer_contact_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerCustomerContactDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_customer_contact_data")
	}

	if len(dataPlatformBusinessPartnerCustomerContactDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerCustomerContactDatum(ctx, exec, o.BusinessPartner, o.Customer, o.ContactID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerCustomerContactDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerCustomerContactDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_customer_contact_data`.* FROM `data_platform_business_partner_customer_contact_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerCustomerContactDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerCustomerContactDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerCustomerContactDatumExists checks if the DataPlatformBusinessPartnerCustomerContactDatum row exists.
func DataPlatformBusinessPartnerCustomerContactDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, customer int, contactID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_customer_contact_data` where `BusinessPartner`=? AND `Customer`=? AND `ContactID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, customer, contactID)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, customer, contactID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_customer_contact_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerCustomerContactDatum row exists.
func (o *DataPlatformBusinessPartnerCustomerContactDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerCustomerContactDatumExists(ctx, exec, o.BusinessPartner, o.Customer, o.ContactID)
}
