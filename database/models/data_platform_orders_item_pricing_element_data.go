// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformOrdersItemPricingElementDatum is an object representing the database table.
type DataPlatformOrdersItemPricingElementDatum struct {
	OrderID                    int         `boil:"OrderID" json:"OrderID" toml:"OrderID" yaml:"OrderID"`
	OrderItem                  int         `boil:"OrderItem" json:"OrderItem" toml:"OrderItem" yaml:"OrderItem"`
	PricingProcedureCounter    int         `boil:"PricingProcedureCounter" json:"PricingProcedureCounter" toml:"PricingProcedureCounter" yaml:"PricingProcedureCounter"`
	SupplyChainRelationshipID  int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	Buyer                      int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                     int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	ConditionRecord            int         `boil:"ConditionRecord" json:"ConditionRecord" toml:"ConditionRecord" yaml:"ConditionRecord"`
	ConditionSequentialNumber  int         `boil:"ConditionSequentialNumber" json:"ConditionSequentialNumber" toml:"ConditionSequentialNumber" yaml:"ConditionSequentialNumber"`
	ConditionType              string      `boil:"ConditionType" json:"ConditionType" toml:"ConditionType" yaml:"ConditionType"`
	PricingDate                string      `boil:"PricingDate" json:"PricingDate" toml:"PricingDate" yaml:"PricingDate"`
	ConditionRateValue         float32     `boil:"ConditionRateValue" json:"ConditionRateValue" toml:"ConditionRateValue" yaml:"ConditionRateValue"`
	ConditionRateValueUnit     int         `boil:"ConditionRateValueUnit" json:"ConditionRateValueUnit" toml:"ConditionRateValueUnit" yaml:"ConditionRateValueUnit"`
	ConditionScaleQuantity     int         `boil:"ConditionScaleQuantity" json:"ConditionScaleQuantity" toml:"ConditionScaleQuantity" yaml:"ConditionScaleQuantity"`
	ConditionCurrency          string      `boil:"ConditionCurrency" json:"ConditionCurrency" toml:"ConditionCurrency" yaml:"ConditionCurrency"`
	ConditionQuantity          float32     `boil:"ConditionQuantity" json:"ConditionQuantity" toml:"ConditionQuantity" yaml:"ConditionQuantity"`
	TaxCode                    null.String `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	ConditionAmount            float32     `boil:"ConditionAmount" json:"ConditionAmount" toml:"ConditionAmount" yaml:"ConditionAmount"`
	TransactionCurrency        string      `boil:"TransactionCurrency" json:"TransactionCurrency" toml:"TransactionCurrency" yaml:"TransactionCurrency"`
	ConditionIsManuallyChanged null.Bool   `boil:"ConditionIsManuallyChanged" json:"ConditionIsManuallyChanged,omitempty" toml:"ConditionIsManuallyChanged" yaml:"ConditionIsManuallyChanged,omitempty"`
	CreationDate               string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime               string      `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate             string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime             string      `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsCancelled                null.Bool   `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion        null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformOrdersItemPricingElementDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformOrdersItemPricingElementDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformOrdersItemPricingElementDatumColumns = struct {
	OrderID                    string
	OrderItem                  string
	PricingProcedureCounter    string
	SupplyChainRelationshipID  string
	Buyer                      string
	Seller                     string
	ConditionRecord            string
	ConditionSequentialNumber  string
	ConditionType              string
	PricingDate                string
	ConditionRateValue         string
	ConditionRateValueUnit     string
	ConditionScaleQuantity     string
	ConditionCurrency          string
	ConditionQuantity          string
	TaxCode                    string
	ConditionAmount            string
	TransactionCurrency        string
	ConditionIsManuallyChanged string
	CreationDate               string
	CreationTime               string
	LastChangeDate             string
	LastChangeTime             string
	IsCancelled                string
	IsMarkedForDeletion        string
}{
	OrderID:                    "OrderID",
	OrderItem:                  "OrderItem",
	PricingProcedureCounter:    "PricingProcedureCounter",
	SupplyChainRelationshipID:  "SupplyChainRelationshipID",
	Buyer:                      "Buyer",
	Seller:                     "Seller",
	ConditionRecord:            "ConditionRecord",
	ConditionSequentialNumber:  "ConditionSequentialNumber",
	ConditionType:              "ConditionType",
	PricingDate:                "PricingDate",
	ConditionRateValue:         "ConditionRateValue",
	ConditionRateValueUnit:     "ConditionRateValueUnit",
	ConditionScaleQuantity:     "ConditionScaleQuantity",
	ConditionCurrency:          "ConditionCurrency",
	ConditionQuantity:          "ConditionQuantity",
	TaxCode:                    "TaxCode",
	ConditionAmount:            "ConditionAmount",
	TransactionCurrency:        "TransactionCurrency",
	ConditionIsManuallyChanged: "ConditionIsManuallyChanged",
	CreationDate:               "CreationDate",
	CreationTime:               "CreationTime",
	LastChangeDate:             "LastChangeDate",
	LastChangeTime:             "LastChangeTime",
	IsCancelled:                "IsCancelled",
	IsMarkedForDeletion:        "IsMarkedForDeletion",
}

var DataPlatformOrdersItemPricingElementDatumTableColumns = struct {
	OrderID                    string
	OrderItem                  string
	PricingProcedureCounter    string
	SupplyChainRelationshipID  string
	Buyer                      string
	Seller                     string
	ConditionRecord            string
	ConditionSequentialNumber  string
	ConditionType              string
	PricingDate                string
	ConditionRateValue         string
	ConditionRateValueUnit     string
	ConditionScaleQuantity     string
	ConditionCurrency          string
	ConditionQuantity          string
	TaxCode                    string
	ConditionAmount            string
	TransactionCurrency        string
	ConditionIsManuallyChanged string
	CreationDate               string
	CreationTime               string
	LastChangeDate             string
	LastChangeTime             string
	IsCancelled                string
	IsMarkedForDeletion        string
}{
	OrderID:                    "data_platform_orders_item_pricing_element_data.OrderID",
	OrderItem:                  "data_platform_orders_item_pricing_element_data.OrderItem",
	PricingProcedureCounter:    "data_platform_orders_item_pricing_element_data.PricingProcedureCounter",
	SupplyChainRelationshipID:  "data_platform_orders_item_pricing_element_data.SupplyChainRelationshipID",
	Buyer:                      "data_platform_orders_item_pricing_element_data.Buyer",
	Seller:                     "data_platform_orders_item_pricing_element_data.Seller",
	ConditionRecord:            "data_platform_orders_item_pricing_element_data.ConditionRecord",
	ConditionSequentialNumber:  "data_platform_orders_item_pricing_element_data.ConditionSequentialNumber",
	ConditionType:              "data_platform_orders_item_pricing_element_data.ConditionType",
	PricingDate:                "data_platform_orders_item_pricing_element_data.PricingDate",
	ConditionRateValue:         "data_platform_orders_item_pricing_element_data.ConditionRateValue",
	ConditionRateValueUnit:     "data_platform_orders_item_pricing_element_data.ConditionRateValueUnit",
	ConditionScaleQuantity:     "data_platform_orders_item_pricing_element_data.ConditionScaleQuantity",
	ConditionCurrency:          "data_platform_orders_item_pricing_element_data.ConditionCurrency",
	ConditionQuantity:          "data_platform_orders_item_pricing_element_data.ConditionQuantity",
	TaxCode:                    "data_platform_orders_item_pricing_element_data.TaxCode",
	ConditionAmount:            "data_platform_orders_item_pricing_element_data.ConditionAmount",
	TransactionCurrency:        "data_platform_orders_item_pricing_element_data.TransactionCurrency",
	ConditionIsManuallyChanged: "data_platform_orders_item_pricing_element_data.ConditionIsManuallyChanged",
	CreationDate:               "data_platform_orders_item_pricing_element_data.CreationDate",
	CreationTime:               "data_platform_orders_item_pricing_element_data.CreationTime",
	LastChangeDate:             "data_platform_orders_item_pricing_element_data.LastChangeDate",
	LastChangeTime:             "data_platform_orders_item_pricing_element_data.LastChangeTime",
	IsCancelled:                "data_platform_orders_item_pricing_element_data.IsCancelled",
	IsMarkedForDeletion:        "data_platform_orders_item_pricing_element_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformOrdersItemPricingElementDatumWhere = struct {
	OrderID                    whereHelperint
	OrderItem                  whereHelperint
	PricingProcedureCounter    whereHelperint
	SupplyChainRelationshipID  whereHelperint
	Buyer                      whereHelperint
	Seller                     whereHelperint
	ConditionRecord            whereHelperint
	ConditionSequentialNumber  whereHelperint
	ConditionType              whereHelperstring
	PricingDate                whereHelperstring
	ConditionRateValue         whereHelperfloat32
	ConditionRateValueUnit     whereHelperint
	ConditionScaleQuantity     whereHelperint
	ConditionCurrency          whereHelperstring
	ConditionQuantity          whereHelperfloat32
	TaxCode                    whereHelpernull_String
	ConditionAmount            whereHelperfloat32
	TransactionCurrency        whereHelperstring
	ConditionIsManuallyChanged whereHelpernull_Bool
	CreationDate               whereHelperstring
	CreationTime               whereHelperstring
	LastChangeDate             whereHelperstring
	LastChangeTime             whereHelperstring
	IsCancelled                whereHelpernull_Bool
	IsMarkedForDeletion        whereHelpernull_Bool
}{
	OrderID:                    whereHelperint{field: "`data_platform_orders_item_pricing_element_data`.`OrderID`"},
	OrderItem:                  whereHelperint{field: "`data_platform_orders_item_pricing_element_data`.`OrderItem`"},
	PricingProcedureCounter:    whereHelperint{field: "`data_platform_orders_item_pricing_element_data`.`PricingProcedureCounter`"},
	SupplyChainRelationshipID:  whereHelperint{field: "`data_platform_orders_item_pricing_element_data`.`SupplyChainRelationshipID`"},
	Buyer:                      whereHelperint{field: "`data_platform_orders_item_pricing_element_data`.`Buyer`"},
	Seller:                     whereHelperint{field: "`data_platform_orders_item_pricing_element_data`.`Seller`"},
	ConditionRecord:            whereHelperint{field: "`data_platform_orders_item_pricing_element_data`.`ConditionRecord`"},
	ConditionSequentialNumber:  whereHelperint{field: "`data_platform_orders_item_pricing_element_data`.`ConditionSequentialNumber`"},
	ConditionType:              whereHelperstring{field: "`data_platform_orders_item_pricing_element_data`.`ConditionType`"},
	PricingDate:                whereHelperstring{field: "`data_platform_orders_item_pricing_element_data`.`PricingDate`"},
	ConditionRateValue:         whereHelperfloat32{field: "`data_platform_orders_item_pricing_element_data`.`ConditionRateValue`"},
	ConditionRateValueUnit:     whereHelperint{field: "`data_platform_orders_item_pricing_element_data`.`ConditionRateValueUnit`"},
	ConditionScaleQuantity:     whereHelperint{field: "`data_platform_orders_item_pricing_element_data`.`ConditionScaleQuantity`"},
	ConditionCurrency:          whereHelperstring{field: "`data_platform_orders_item_pricing_element_data`.`ConditionCurrency`"},
	ConditionQuantity:          whereHelperfloat32{field: "`data_platform_orders_item_pricing_element_data`.`ConditionQuantity`"},
	TaxCode:                    whereHelpernull_String{field: "`data_platform_orders_item_pricing_element_data`.`TaxCode`"},
	ConditionAmount:            whereHelperfloat32{field: "`data_platform_orders_item_pricing_element_data`.`ConditionAmount`"},
	TransactionCurrency:        whereHelperstring{field: "`data_platform_orders_item_pricing_element_data`.`TransactionCurrency`"},
	ConditionIsManuallyChanged: whereHelpernull_Bool{field: "`data_platform_orders_item_pricing_element_data`.`ConditionIsManuallyChanged`"},
	CreationDate:               whereHelperstring{field: "`data_platform_orders_item_pricing_element_data`.`CreationDate`"},
	CreationTime:               whereHelperstring{field: "`data_platform_orders_item_pricing_element_data`.`CreationTime`"},
	LastChangeDate:             whereHelperstring{field: "`data_platform_orders_item_pricing_element_data`.`LastChangeDate`"},
	LastChangeTime:             whereHelperstring{field: "`data_platform_orders_item_pricing_element_data`.`LastChangeTime`"},
	IsCancelled:                whereHelpernull_Bool{field: "`data_platform_orders_item_pricing_element_data`.`IsCancelled`"},
	IsMarkedForDeletion:        whereHelpernull_Bool{field: "`data_platform_orders_item_pricing_element_data`.`IsMarkedForDeletion`"},
}

// DataPlatformOrdersItemPricingElementDatumRels is where relationship names are stored.
var DataPlatformOrdersItemPricingElementDatumRels = struct {
	BuyerDataPlatformSCRGeneralDatum   string
	OrderIDDataPlatformOrdersItemDatum string
}{
	BuyerDataPlatformSCRGeneralDatum:   "BuyerDataPlatformSCRGeneralDatum",
	OrderIDDataPlatformOrdersItemDatum: "OrderIDDataPlatformOrdersItemDatum",
}

// dataPlatformOrdersItemPricingElementDatumR is where relationships are stored.
type dataPlatformOrdersItemPricingElementDatumR struct {
	BuyerDataPlatformSCRGeneralDatum   *DataPlatformSCRGeneralDatum `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	OrderIDDataPlatformOrdersItemDatum *DataPlatformOrdersItemDatum `boil:"OrderIDDataPlatformOrdersItemDatum" json:"OrderIDDataPlatformOrdersItemDatum" toml:"OrderIDDataPlatformOrdersItemDatum" yaml:"OrderIDDataPlatformOrdersItemDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformOrdersItemPricingElementDatumR) NewStruct() *dataPlatformOrdersItemPricingElementDatumR {
	return &dataPlatformOrdersItemPricingElementDatumR{}
}

func (r *dataPlatformOrdersItemPricingElementDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformOrdersItemPricingElementDatumR) GetOrderIDDataPlatformOrdersItemDatum() *DataPlatformOrdersItemDatum {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersItemDatum
}

// dataPlatformOrdersItemPricingElementDatumL is where Load methods for each relationship are stored.
type dataPlatformOrdersItemPricingElementDatumL struct{}

var (
	dataPlatformOrdersItemPricingElementDatumAllColumns            = []string{"OrderID", "OrderItem", "PricingProcedureCounter", "SupplyChainRelationshipID", "Buyer", "Seller", "ConditionRecord", "ConditionSequentialNumber", "ConditionType", "PricingDate", "ConditionRateValue", "ConditionRateValueUnit", "ConditionScaleQuantity", "ConditionCurrency", "ConditionQuantity", "TaxCode", "ConditionAmount", "TransactionCurrency", "ConditionIsManuallyChanged", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformOrdersItemPricingElementDatumColumnsWithoutDefault = []string{"OrderID", "OrderItem", "PricingProcedureCounter", "SupplyChainRelationshipID", "Buyer", "Seller", "ConditionRecord", "ConditionSequentialNumber", "ConditionType", "PricingDate", "ConditionRateValue", "ConditionRateValueUnit", "ConditionScaleQuantity", "ConditionCurrency", "ConditionQuantity", "TaxCode", "ConditionAmount", "TransactionCurrency", "ConditionIsManuallyChanged", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformOrdersItemPricingElementDatumColumnsWithDefault    = []string{}
	dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns     = []string{"OrderID", "OrderItem", "PricingProcedureCounter"}
	dataPlatformOrdersItemPricingElementDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformOrdersItemPricingElementDatumSlice is an alias for a slice of pointers to DataPlatformOrdersItemPricingElementDatum.
	// This should almost always be used instead of []DataPlatformOrdersItemPricingElementDatum.
	DataPlatformOrdersItemPricingElementDatumSlice []*DataPlatformOrdersItemPricingElementDatum

	dataPlatformOrdersItemPricingElementDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformOrdersItemPricingElementDatumType                 = reflect.TypeOf(&DataPlatformOrdersItemPricingElementDatum{})
	dataPlatformOrdersItemPricingElementDatumMapping              = queries.MakeStructMapping(dataPlatformOrdersItemPricingElementDatumType)
	dataPlatformOrdersItemPricingElementDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformOrdersItemPricingElementDatumType, dataPlatformOrdersItemPricingElementDatumMapping, dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns)
	dataPlatformOrdersItemPricingElementDatumInsertCacheMut       sync.RWMutex
	dataPlatformOrdersItemPricingElementDatumInsertCache          = make(map[string]insertCache)
	dataPlatformOrdersItemPricingElementDatumUpdateCacheMut       sync.RWMutex
	dataPlatformOrdersItemPricingElementDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformOrdersItemPricingElementDatumUpsertCacheMut       sync.RWMutex
	dataPlatformOrdersItemPricingElementDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformOrdersItemPricingElementDatum record from the query.
func (q dataPlatformOrdersItemPricingElementDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformOrdersItemPricingElementDatum, error) {
	o := &DataPlatformOrdersItemPricingElementDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_orders_item_pricing_element_data")
	}

	return o, nil
}

// All returns all DataPlatformOrdersItemPricingElementDatum records from the query.
func (q dataPlatformOrdersItemPricingElementDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformOrdersItemPricingElementDatumSlice, error) {
	var o []*DataPlatformOrdersItemPricingElementDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformOrdersItemPricingElementDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformOrdersItemPricingElementDatum records in the query.
func (q dataPlatformOrdersItemPricingElementDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_orders_item_pricing_element_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformOrdersItemPricingElementDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_orders_item_pricing_element_data exists")
	}

	return count > 0, nil
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformOrdersItemPricingElementDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// OrderIDDataPlatformOrdersItemDatum pointed to by the foreign key.
func (o *DataPlatformOrdersItemPricingElementDatum) OrderIDDataPlatformOrdersItemDatum(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersItemData(queryMods...)
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersItemPricingElementDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersItemPricingElementDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersItemPricingElementDatum
	var object *DataPlatformOrdersItemPricingElementDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersItemPricingElementDatum.(*DataPlatformOrdersItemPricingElementDatum)
		if !ok {
			object = new(DataPlatformOrdersItemPricingElementDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersItemPricingElementDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersItemPricingElementDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersItemPricingElementDatum.(*[]*DataPlatformOrdersItemPricingElementDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersItemPricingElementDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersItemPricingElementDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersItemPricingElementDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersItemPricingElementDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformOrdersItemPricingElementDatumL) LoadOrderIDDataPlatformOrdersItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformOrdersItemPricingElementDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformOrdersItemPricingElementDatum
	var object *DataPlatformOrdersItemPricingElementDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformOrdersItemPricingElementDatum.(*DataPlatformOrdersItemPricingElementDatum)
		if !ok {
			object = new(DataPlatformOrdersItemPricingElementDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformOrdersItemPricingElementDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformOrdersItemPricingElementDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformOrdersItemPricingElementDatum.(*[]*DataPlatformOrdersItemPricingElementDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformOrdersItemPricingElementDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformOrdersItemPricingElementDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformOrdersItemPricingElementDatumR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformOrdersItemPricingElementDatumR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersItemDatum")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDDataPlatformOrdersItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.OrderID {
				local.R.OrderIDDataPlatformOrdersItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformOrdersItemPricingElementDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformOrdersItemPricingElementDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.OrderID, o.OrderItem, o.PricingProcedureCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformOrdersItemPricingElementDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// SetOrderIDDataPlatformOrdersItemDatum of the dataPlatformOrdersItemPricingElementDatum to the related item.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to related.
func (o *DataPlatformOrdersItemPricingElementDatum) SetOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_orders_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.OrderID, o.OrderItem, o.PricingProcedureCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.OrderID
	if o.R == nil {
		o.R = &dataPlatformOrdersItemPricingElementDatumR{
			OrderIDDataPlatformOrdersItemDatum: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersItemDatum = related
	}

	return nil
}

// DataPlatformOrdersItemPricingElementData retrieves all the records using an executor.
func DataPlatformOrdersItemPricingElementData(mods ...qm.QueryMod) dataPlatformOrdersItemPricingElementDatumQuery {
	mods = append(mods, qm.From("`data_platform_orders_item_pricing_element_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_orders_item_pricing_element_data`.*"})
	}

	return dataPlatformOrdersItemPricingElementDatumQuery{q}
}

// FindDataPlatformOrdersItemPricingElementDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformOrdersItemPricingElementDatum(ctx context.Context, exec boil.ContextExecutor, orderID int, orderItem int, pricingProcedureCounter int, selectCols ...string) (*DataPlatformOrdersItemPricingElementDatum, error) {
	dataPlatformOrdersItemPricingElementDatumObj := &DataPlatformOrdersItemPricingElementDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_orders_item_pricing_element_data` where `OrderID`=? AND `OrderItem`=? AND `PricingProcedureCounter`=?", sel,
	)

	q := queries.Raw(query, orderID, orderItem, pricingProcedureCounter)

	err := q.Bind(ctx, exec, dataPlatformOrdersItemPricingElementDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_orders_item_pricing_element_data")
	}

	return dataPlatformOrdersItemPricingElementDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformOrdersItemPricingElementDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_item_pricing_element_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersItemPricingElementDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformOrdersItemPricingElementDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersItemPricingElementDatumInsertCache[key]
	dataPlatformOrdersItemPricingElementDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformOrdersItemPricingElementDatumAllColumns,
			dataPlatformOrdersItemPricingElementDatumColumnsWithDefault,
			dataPlatformOrdersItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersItemPricingElementDatumType, dataPlatformOrdersItemPricingElementDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformOrdersItemPricingElementDatumType, dataPlatformOrdersItemPricingElementDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_orders_item_pricing_element_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_orders_item_pricing_element_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_orders_item_pricing_element_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_orders_item_pricing_element_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.OrderID,
		o.OrderItem,
		o.PricingProcedureCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersItemPricingElementDatumInsertCacheMut.Lock()
		dataPlatformOrdersItemPricingElementDatumInsertCache[key] = cache
		dataPlatformOrdersItemPricingElementDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformOrdersItemPricingElementDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformOrdersItemPricingElementDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformOrdersItemPricingElementDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformOrdersItemPricingElementDatumUpdateCache[key]
	dataPlatformOrdersItemPricingElementDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformOrdersItemPricingElementDatumAllColumns,
			dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_orders_item_pricing_element_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_orders_item_pricing_element_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersItemPricingElementDatumType, dataPlatformOrdersItemPricingElementDatumMapping, append(wl, dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_orders_item_pricing_element_data row")
	}

	if !cached {
		dataPlatformOrdersItemPricingElementDatumUpdateCacheMut.Lock()
		dataPlatformOrdersItemPricingElementDatumUpdateCache[key] = cache
		dataPlatformOrdersItemPricingElementDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformOrdersItemPricingElementDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_orders_item_pricing_element_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformOrdersItemPricingElementDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_orders_item_pricing_element_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformOrdersItemPricingElementDatum slice")
	}

	return nil
}

var mySQLDataPlatformOrdersItemPricingElementDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformOrdersItemPricingElementDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_orders_item_pricing_element_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformOrdersItemPricingElementDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformOrdersItemPricingElementDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformOrdersItemPricingElementDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformOrdersItemPricingElementDatumUpsertCache[key]
	dataPlatformOrdersItemPricingElementDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformOrdersItemPricingElementDatumAllColumns,
			dataPlatformOrdersItemPricingElementDatumColumnsWithDefault,
			dataPlatformOrdersItemPricingElementDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformOrdersItemPricingElementDatumAllColumns,
			dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_orders_item_pricing_element_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_orders_item_pricing_element_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_orders_item_pricing_element_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformOrdersItemPricingElementDatumType, dataPlatformOrdersItemPricingElementDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformOrdersItemPricingElementDatumType, dataPlatformOrdersItemPricingElementDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_orders_item_pricing_element_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformOrdersItemPricingElementDatumType, dataPlatformOrdersItemPricingElementDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_orders_item_pricing_element_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_orders_item_pricing_element_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformOrdersItemPricingElementDatumUpsertCacheMut.Lock()
		dataPlatformOrdersItemPricingElementDatumUpsertCache[key] = cache
		dataPlatformOrdersItemPricingElementDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformOrdersItemPricingElementDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformOrdersItemPricingElementDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformOrdersItemPricingElementDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformOrdersItemPricingElementDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_orders_item_pricing_element_data` WHERE `OrderID`=? AND `OrderItem`=? AND `PricingProcedureCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_orders_item_pricing_element_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformOrdersItemPricingElementDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformOrdersItemPricingElementDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_orders_item_pricing_element_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformOrdersItemPricingElementDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_orders_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformOrdersItemPricingElementDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformOrdersItemPricingElementDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformOrdersItemPricingElementDatum(ctx, exec, o.OrderID, o.OrderItem, o.PricingProcedureCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformOrdersItemPricingElementDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformOrdersItemPricingElementDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformOrdersItemPricingElementDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_orders_item_pricing_element_data`.* FROM `data_platform_orders_item_pricing_element_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformOrdersItemPricingElementDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformOrdersItemPricingElementDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformOrdersItemPricingElementDatumExists checks if the DataPlatformOrdersItemPricingElementDatum row exists.
func DataPlatformOrdersItemPricingElementDatumExists(ctx context.Context, exec boil.ContextExecutor, orderID int, orderItem int, pricingProcedureCounter int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_orders_item_pricing_element_data` where `OrderID`=? AND `OrderItem`=? AND `PricingProcedureCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, orderID, orderItem, pricingProcedureCounter)
	}
	row := exec.QueryRowContext(ctx, sql, orderID, orderItem, pricingProcedureCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_orders_item_pricing_element_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformOrdersItemPricingElementDatum row exists.
func (o *DataPlatformOrdersItemPricingElementDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformOrdersItemPricingElementDatumExists(ctx, exec, o.OrderID, o.OrderItem, o.PricingProcedureCounter)
}
