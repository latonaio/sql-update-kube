// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSCRPaymentRelationDatum is an object representing the database table.
type DataPlatformSCRPaymentRelationDatum struct {
	SupplyChainRelationshipID        int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipBillingID int         `boil:"SupplyChainRelationshipBillingID" json:"SupplyChainRelationshipBillingID" toml:"SupplyChainRelationshipBillingID" yaml:"SupplyChainRelationshipBillingID"`
	SupplyChainRelationshipPaymentID int         `boil:"SupplyChainRelationshipPaymentID" json:"SupplyChainRelationshipPaymentID" toml:"SupplyChainRelationshipPaymentID" yaml:"SupplyChainRelationshipPaymentID"`
	Buyer                            int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                           int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	BillToParty                      int         `boil:"BillToParty" json:"BillToParty" toml:"BillToParty" yaml:"BillToParty"`
	BillFromParty                    int         `boil:"BillFromParty" json:"BillFromParty" toml:"BillFromParty" yaml:"BillFromParty"`
	Payer                            int         `boil:"Payer" json:"Payer" toml:"Payer" yaml:"Payer"`
	Payee                            int         `boil:"Payee" json:"Payee" toml:"Payee" yaml:"Payee"`
	DefaultRelation                  null.Bool   `boil:"DefaultRelation" json:"DefaultRelation,omitempty" toml:"DefaultRelation" yaml:"DefaultRelation,omitempty"`
	PayerHouseBank                   null.String `boil:"PayerHouseBank" json:"PayerHouseBank,omitempty" toml:"PayerHouseBank" yaml:"PayerHouseBank,omitempty"`
	PayerHouseBankAccount            null.String `boil:"PayerHouseBankAccount" json:"PayerHouseBankAccount,omitempty" toml:"PayerHouseBankAccount" yaml:"PayerHouseBankAccount,omitempty"`
	PayeeHouseBank                   null.String `boil:"PayeeHouseBank" json:"PayeeHouseBank,omitempty" toml:"PayeeHouseBank" yaml:"PayeeHouseBank,omitempty"`
	PayeeHouseBankAccount            null.String `boil:"PayeeHouseBankAccount" json:"PayeeHouseBankAccount,omitempty" toml:"PayeeHouseBankAccount" yaml:"PayeeHouseBankAccount,omitempty"`
	CreationDate                     string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                   string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion              null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformSCRPaymentRelationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSCRPaymentRelationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSCRPaymentRelationDatumColumns = struct {
	SupplyChainRelationshipID        string
	SupplyChainRelationshipBillingID string
	SupplyChainRelationshipPaymentID string
	Buyer                            string
	Seller                           string
	BillToParty                      string
	BillFromParty                    string
	Payer                            string
	Payee                            string
	DefaultRelation                  string
	PayerHouseBank                   string
	PayerHouseBankAccount            string
	PayeeHouseBank                   string
	PayeeHouseBankAccount            string
	CreationDate                     string
	LastChangeDate                   string
	IsMarkedForDeletion              string
}{
	SupplyChainRelationshipID:        "SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID: "SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID: "SupplyChainRelationshipPaymentID",
	Buyer:                            "Buyer",
	Seller:                           "Seller",
	BillToParty:                      "BillToParty",
	BillFromParty:                    "BillFromParty",
	Payer:                            "Payer",
	Payee:                            "Payee",
	DefaultRelation:                  "DefaultRelation",
	PayerHouseBank:                   "PayerHouseBank",
	PayerHouseBankAccount:            "PayerHouseBankAccount",
	PayeeHouseBank:                   "PayeeHouseBank",
	PayeeHouseBankAccount:            "PayeeHouseBankAccount",
	CreationDate:                     "CreationDate",
	LastChangeDate:                   "LastChangeDate",
	IsMarkedForDeletion:              "IsMarkedForDeletion",
}

var DataPlatformSCRPaymentRelationDatumTableColumns = struct {
	SupplyChainRelationshipID        string
	SupplyChainRelationshipBillingID string
	SupplyChainRelationshipPaymentID string
	Buyer                            string
	Seller                           string
	BillToParty                      string
	BillFromParty                    string
	Payer                            string
	Payee                            string
	DefaultRelation                  string
	PayerHouseBank                   string
	PayerHouseBankAccount            string
	PayeeHouseBank                   string
	PayeeHouseBankAccount            string
	CreationDate                     string
	LastChangeDate                   string
	IsMarkedForDeletion              string
}{
	SupplyChainRelationshipID:        "data_platform_scr_payment_relation_data.SupplyChainRelationshipID",
	SupplyChainRelationshipBillingID: "data_platform_scr_payment_relation_data.SupplyChainRelationshipBillingID",
	SupplyChainRelationshipPaymentID: "data_platform_scr_payment_relation_data.SupplyChainRelationshipPaymentID",
	Buyer:                            "data_platform_scr_payment_relation_data.Buyer",
	Seller:                           "data_platform_scr_payment_relation_data.Seller",
	BillToParty:                      "data_platform_scr_payment_relation_data.BillToParty",
	BillFromParty:                    "data_platform_scr_payment_relation_data.BillFromParty",
	Payer:                            "data_platform_scr_payment_relation_data.Payer",
	Payee:                            "data_platform_scr_payment_relation_data.Payee",
	DefaultRelation:                  "data_platform_scr_payment_relation_data.DefaultRelation",
	PayerHouseBank:                   "data_platform_scr_payment_relation_data.PayerHouseBank",
	PayerHouseBankAccount:            "data_platform_scr_payment_relation_data.PayerHouseBankAccount",
	PayeeHouseBank:                   "data_platform_scr_payment_relation_data.PayeeHouseBank",
	PayeeHouseBankAccount:            "data_platform_scr_payment_relation_data.PayeeHouseBankAccount",
	CreationDate:                     "data_platform_scr_payment_relation_data.CreationDate",
	LastChangeDate:                   "data_platform_scr_payment_relation_data.LastChangeDate",
	IsMarkedForDeletion:              "data_platform_scr_payment_relation_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformSCRPaymentRelationDatumWhere = struct {
	SupplyChainRelationshipID        whereHelperint
	SupplyChainRelationshipBillingID whereHelperint
	SupplyChainRelationshipPaymentID whereHelperint
	Buyer                            whereHelperint
	Seller                           whereHelperint
	BillToParty                      whereHelperint
	BillFromParty                    whereHelperint
	Payer                            whereHelperint
	Payee                            whereHelperint
	DefaultRelation                  whereHelpernull_Bool
	PayerHouseBank                   whereHelpernull_String
	PayerHouseBankAccount            whereHelpernull_String
	PayeeHouseBank                   whereHelpernull_String
	PayeeHouseBankAccount            whereHelpernull_String
	CreationDate                     whereHelperstring
	LastChangeDate                   whereHelperstring
	IsMarkedForDeletion              whereHelpernull_Bool
}{
	SupplyChainRelationshipID:        whereHelperint{field: "`data_platform_scr_payment_relation_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipBillingID: whereHelperint{field: "`data_platform_scr_payment_relation_data`.`SupplyChainRelationshipBillingID`"},
	SupplyChainRelationshipPaymentID: whereHelperint{field: "`data_platform_scr_payment_relation_data`.`SupplyChainRelationshipPaymentID`"},
	Buyer:                            whereHelperint{field: "`data_platform_scr_payment_relation_data`.`Buyer`"},
	Seller:                           whereHelperint{field: "`data_platform_scr_payment_relation_data`.`Seller`"},
	BillToParty:                      whereHelperint{field: "`data_platform_scr_payment_relation_data`.`BillToParty`"},
	BillFromParty:                    whereHelperint{field: "`data_platform_scr_payment_relation_data`.`BillFromParty`"},
	Payer:                            whereHelperint{field: "`data_platform_scr_payment_relation_data`.`Payer`"},
	Payee:                            whereHelperint{field: "`data_platform_scr_payment_relation_data`.`Payee`"},
	DefaultRelation:                  whereHelpernull_Bool{field: "`data_platform_scr_payment_relation_data`.`DefaultRelation`"},
	PayerHouseBank:                   whereHelpernull_String{field: "`data_platform_scr_payment_relation_data`.`PayerHouseBank`"},
	PayerHouseBankAccount:            whereHelpernull_String{field: "`data_platform_scr_payment_relation_data`.`PayerHouseBankAccount`"},
	PayeeHouseBank:                   whereHelpernull_String{field: "`data_platform_scr_payment_relation_data`.`PayeeHouseBank`"},
	PayeeHouseBankAccount:            whereHelpernull_String{field: "`data_platform_scr_payment_relation_data`.`PayeeHouseBankAccount`"},
	CreationDate:                     whereHelperstring{field: "`data_platform_scr_payment_relation_data`.`CreationDate`"},
	LastChangeDate:                   whereHelperstring{field: "`data_platform_scr_payment_relation_data`.`LastChangeDate`"},
	IsMarkedForDeletion:              whereHelpernull_Bool{field: "`data_platform_scr_payment_relation_data`.`IsMarkedForDeletion`"},
}

// DataPlatformSCRPaymentRelationDatumRels is where relationship names are stored.
var DataPlatformSCRPaymentRelationDatumRels = struct {
	PayeeDataPlatformBusinessPartnerGeneralDatum     string
	PayerDataPlatformBusinessPartnerGeneralDatum     string
	BillFromPartyDataPlatformSCRBillingRelationDatum string
}{
	PayeeDataPlatformBusinessPartnerGeneralDatum:     "PayeeDataPlatformBusinessPartnerGeneralDatum",
	PayerDataPlatformBusinessPartnerGeneralDatum:     "PayerDataPlatformBusinessPartnerGeneralDatum",
	BillFromPartyDataPlatformSCRBillingRelationDatum: "BillFromPartyDataPlatformSCRBillingRelationDatum",
}

// dataPlatformSCRPaymentRelationDatumR is where relationships are stored.
type dataPlatformSCRPaymentRelationDatumR struct {
	PayeeDataPlatformBusinessPartnerGeneralDatum     *DataPlatformBusinessPartnerGeneralDatum `boil:"PayeeDataPlatformBusinessPartnerGeneralDatum" json:"PayeeDataPlatformBusinessPartnerGeneralDatum" toml:"PayeeDataPlatformBusinessPartnerGeneralDatum" yaml:"PayeeDataPlatformBusinessPartnerGeneralDatum"`
	PayerDataPlatformBusinessPartnerGeneralDatum     *DataPlatformBusinessPartnerGeneralDatum `boil:"PayerDataPlatformBusinessPartnerGeneralDatum" json:"PayerDataPlatformBusinessPartnerGeneralDatum" toml:"PayerDataPlatformBusinessPartnerGeneralDatum" yaml:"PayerDataPlatformBusinessPartnerGeneralDatum"`
	BillFromPartyDataPlatformSCRBillingRelationDatum *DataPlatformSCRBillingRelationDatum     `boil:"BillFromPartyDataPlatformSCRBillingRelationDatum" json:"BillFromPartyDataPlatformSCRBillingRelationDatum" toml:"BillFromPartyDataPlatformSCRBillingRelationDatum" yaml:"BillFromPartyDataPlatformSCRBillingRelationDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSCRPaymentRelationDatumR) NewStruct() *dataPlatformSCRPaymentRelationDatumR {
	return &dataPlatformSCRPaymentRelationDatumR{}
}

func (r *dataPlatformSCRPaymentRelationDatumR) GetPayeeDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.PayeeDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRPaymentRelationDatumR) GetPayerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.PayerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRPaymentRelationDatumR) GetBillFromPartyDataPlatformSCRBillingRelationDatum() *DataPlatformSCRBillingRelationDatum {
	if r == nil {
		return nil
	}
	return r.BillFromPartyDataPlatformSCRBillingRelationDatum
}

// dataPlatformSCRPaymentRelationDatumL is where Load methods for each relationship are stored.
type dataPlatformSCRPaymentRelationDatumL struct{}

var (
	dataPlatformSCRPaymentRelationDatumAllColumns            = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "BillToParty", "BillFromParty", "Payer", "Payee", "DefaultRelation", "PayerHouseBank", "PayerHouseBankAccount", "PayeeHouseBank", "PayeeHouseBankAccount", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRPaymentRelationDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "BillToParty", "BillFromParty", "Payer", "Payee", "DefaultRelation", "PayerHouseBank", "PayerHouseBankAccount", "PayeeHouseBank", "PayeeHouseBankAccount", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformSCRPaymentRelationDatumColumnsWithDefault    = []string{}
	dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "SupplyChainRelationshipBillingID", "SupplyChainRelationshipPaymentID", "Buyer", "Seller", "BillToParty", "BillFromParty", "Payer", "Payee"}
	dataPlatformSCRPaymentRelationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSCRPaymentRelationDatumSlice is an alias for a slice of pointers to DataPlatformSCRPaymentRelationDatum.
	// This should almost always be used instead of []DataPlatformSCRPaymentRelationDatum.
	DataPlatformSCRPaymentRelationDatumSlice []*DataPlatformSCRPaymentRelationDatum

	dataPlatformSCRPaymentRelationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSCRPaymentRelationDatumType                 = reflect.TypeOf(&DataPlatformSCRPaymentRelationDatum{})
	dataPlatformSCRPaymentRelationDatumMapping              = queries.MakeStructMapping(dataPlatformSCRPaymentRelationDatumType)
	dataPlatformSCRPaymentRelationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSCRPaymentRelationDatumType, dataPlatformSCRPaymentRelationDatumMapping, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns)
	dataPlatformSCRPaymentRelationDatumInsertCacheMut       sync.RWMutex
	dataPlatformSCRPaymentRelationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSCRPaymentRelationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSCRPaymentRelationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSCRPaymentRelationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSCRPaymentRelationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSCRPaymentRelationDatum record from the query.
func (q dataPlatformSCRPaymentRelationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSCRPaymentRelationDatum, error) {
	o := &DataPlatformSCRPaymentRelationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_scr_payment_relation_data")
	}

	return o, nil
}

// All returns all DataPlatformSCRPaymentRelationDatum records from the query.
func (q dataPlatformSCRPaymentRelationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSCRPaymentRelationDatumSlice, error) {
	var o []*DataPlatformSCRPaymentRelationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSCRPaymentRelationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSCRPaymentRelationDatum records in the query.
func (q dataPlatformSCRPaymentRelationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_scr_payment_relation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSCRPaymentRelationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_scr_payment_relation_data exists")
	}

	return count > 0, nil
}

// PayeeDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRPaymentRelationDatum) PayeeDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Payee),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// PayerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRPaymentRelationDatum) PayerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.Payer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// BillFromPartyDataPlatformSCRBillingRelationDatum pointed to by the foreign key.
func (o *DataPlatformSCRPaymentRelationDatum) BillFromPartyDataPlatformSCRBillingRelationDatum(mods ...qm.QueryMod) dataPlatformSCRBillingRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillFromParty` = ?", o.BillFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRBillingRelationData(queryMods...)
}

// LoadPayeeDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRPaymentRelationDatumL) LoadPayeeDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRPaymentRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRPaymentRelationDatum
	var object *DataPlatformSCRPaymentRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRPaymentRelationDatum.(*DataPlatformSCRPaymentRelationDatum)
		if !ok {
			object = new(DataPlatformSCRPaymentRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRPaymentRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRPaymentRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRPaymentRelationDatum.(*[]*DataPlatformSCRPaymentRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRPaymentRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRPaymentRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRPaymentRelationDatumR{}
		}
		args = append(args, object.Payee)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRPaymentRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Payee {
					continue Outer
				}
			}

			args = append(args, obj.Payee)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PayeeDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Payee == foreign.BusinessPartner {
				local.R.PayeeDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPayerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRPaymentRelationDatumL) LoadPayerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRPaymentRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRPaymentRelationDatum
	var object *DataPlatformSCRPaymentRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRPaymentRelationDatum.(*DataPlatformSCRPaymentRelationDatum)
		if !ok {
			object = new(DataPlatformSCRPaymentRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRPaymentRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRPaymentRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRPaymentRelationDatum.(*[]*DataPlatformSCRPaymentRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRPaymentRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRPaymentRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRPaymentRelationDatumR{}
		}
		args = append(args, object.Payer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRPaymentRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.Payer {
					continue Outer
				}
			}

			args = append(args, obj.Payer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PayerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Payer == foreign.BusinessPartner {
				local.R.PayerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillFromPartyDataPlatformSCRBillingRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRPaymentRelationDatumL) LoadBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRPaymentRelationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRPaymentRelationDatum
	var object *DataPlatformSCRPaymentRelationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRPaymentRelationDatum.(*DataPlatformSCRPaymentRelationDatum)
		if !ok {
			object = new(DataPlatformSCRPaymentRelationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRPaymentRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRPaymentRelationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRPaymentRelationDatum.(*[]*DataPlatformSCRPaymentRelationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRPaymentRelationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRPaymentRelationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRPaymentRelationDatumR{}
		}
		args = append(args, object.BillFromParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRPaymentRelationDatumR{}
			}

			for _, a := range args {
				if a == obj.BillFromParty {
					continue Outer
				}
			}

			args = append(args, obj.BillFromParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_billing_relation_data`),
		qm.WhereIn(`data_platform_scr_billing_relation_data.BillFromParty in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRBillingRelationDatum")
	}

	var resultSlice []*DataPlatformSCRBillingRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRBillingRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_billing_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_billing_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillFromPartyDataPlatformSCRBillingRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillFromParty == foreign.BillFromParty {
				local.R.BillFromPartyDataPlatformSCRBillingRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetPayeeDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRPaymentRelationDatum to the related item.
// Sets o.R.PayeeDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRPaymentRelationDatum) SetPayeeDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_payment_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Payee"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipBillingID, o.SupplyChainRelationshipPaymentID, o.Buyer, o.Seller, o.BillToParty, o.BillFromParty, o.Payer, o.Payee}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Payee = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRPaymentRelationDatumR{
			PayeeDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.PayeeDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetPayerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRPaymentRelationDatum to the related item.
// Sets o.R.PayerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRPaymentRelationDatum) SetPayerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_payment_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Payer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.SupplyChainRelationshipBillingID, o.SupplyChainRelationshipPaymentID, o.Buyer, o.Seller, o.BillToParty, o.BillFromParty, o.Payer, o.Payee}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Payer = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformSCRPaymentRelationDatumR{
			PayerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.PayerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetBillFromPartyDataPlatformSCRBillingRelationDatum of the dataPlatformSCRPaymentRelationDatum to the related item.
// Sets o.R.BillFromPartyDataPlatformSCRBillingRelationDatum to related.
func (o *DataPlatformSCRPaymentRelationDatum) SetBillFromPartyDataPlatformSCRBillingRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRBillingRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_payment_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillFromParty, o.SupplyChainRelationshipID, o.SupplyChainRelationshipBillingID, o.SupplyChainRelationshipPaymentID, o.Buyer, o.Seller, o.BillToParty, o.BillFromParty, o.Payer, o.Payee}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillFromParty = related.BillFromParty
	if o.R == nil {
		o.R = &dataPlatformSCRPaymentRelationDatumR{
			BillFromPartyDataPlatformSCRBillingRelationDatum: related,
		}
	} else {
		o.R.BillFromPartyDataPlatformSCRBillingRelationDatum = related
	}

	return nil
}

// DataPlatformSCRPaymentRelationData retrieves all the records using an executor.
func DataPlatformSCRPaymentRelationData(mods ...qm.QueryMod) dataPlatformSCRPaymentRelationDatumQuery {
	mods = append(mods, qm.From("`data_platform_scr_payment_relation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_scr_payment_relation_data`.*"})
	}

	return dataPlatformSCRPaymentRelationDatumQuery{q}
}

// FindDataPlatformSCRPaymentRelationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSCRPaymentRelationDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipBillingID int, supplyChainRelationshipPaymentID int, buyer int, seller int, billToParty int, billFromParty int, payer int, payee int, selectCols ...string) (*DataPlatformSCRPaymentRelationDatum, error) {
	dataPlatformSCRPaymentRelationDatumObj := &DataPlatformSCRPaymentRelationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_scr_payment_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipBillingID`=? AND `SupplyChainRelationshipPaymentID`=? AND `Buyer`=? AND `Seller`=? AND `BillToParty`=? AND `BillFromParty`=? AND `Payer`=? AND `Payee`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, supplyChainRelationshipBillingID, supplyChainRelationshipPaymentID, buyer, seller, billToParty, billFromParty, payer, payee)

	err := q.Bind(ctx, exec, dataPlatformSCRPaymentRelationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_scr_payment_relation_data")
	}

	return dataPlatformSCRPaymentRelationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSCRPaymentRelationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_payment_relation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRPaymentRelationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSCRPaymentRelationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSCRPaymentRelationDatumInsertCache[key]
	dataPlatformSCRPaymentRelationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSCRPaymentRelationDatumAllColumns,
			dataPlatformSCRPaymentRelationDatumColumnsWithDefault,
			dataPlatformSCRPaymentRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRPaymentRelationDatumType, dataPlatformSCRPaymentRelationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSCRPaymentRelationDatumType, dataPlatformSCRPaymentRelationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_scr_payment_relation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_scr_payment_relation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_scr_payment_relation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_scr_payment_relation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.SupplyChainRelationshipBillingID,
		o.SupplyChainRelationshipPaymentID,
		o.Buyer,
		o.Seller,
		o.BillToParty,
		o.BillFromParty,
		o.Payer,
		o.Payee,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_payment_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRPaymentRelationDatumInsertCacheMut.Lock()
		dataPlatformSCRPaymentRelationDatumInsertCache[key] = cache
		dataPlatformSCRPaymentRelationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSCRPaymentRelationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSCRPaymentRelationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSCRPaymentRelationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSCRPaymentRelationDatumUpdateCache[key]
	dataPlatformSCRPaymentRelationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSCRPaymentRelationDatumAllColumns,
			dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_scr_payment_relation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_scr_payment_relation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRPaymentRelationDatumType, dataPlatformSCRPaymentRelationDatumMapping, append(wl, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_scr_payment_relation_data row")
	}

	if !cached {
		dataPlatformSCRPaymentRelationDatumUpdateCacheMut.Lock()
		dataPlatformSCRPaymentRelationDatumUpdateCache[key] = cache
		dataPlatformSCRPaymentRelationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSCRPaymentRelationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_scr_payment_relation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSCRPaymentRelationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRPaymentRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_scr_payment_relation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSCRPaymentRelationDatum slice")
	}

	return nil
}

var mySQLDataPlatformSCRPaymentRelationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSCRPaymentRelationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_payment_relation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRPaymentRelationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSCRPaymentRelationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSCRPaymentRelationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSCRPaymentRelationDatumUpsertCache[key]
	dataPlatformSCRPaymentRelationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSCRPaymentRelationDatumAllColumns,
			dataPlatformSCRPaymentRelationDatumColumnsWithDefault,
			dataPlatformSCRPaymentRelationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSCRPaymentRelationDatumAllColumns,
			dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_scr_payment_relation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_scr_payment_relation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_scr_payment_relation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRPaymentRelationDatumType, dataPlatformSCRPaymentRelationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSCRPaymentRelationDatumType, dataPlatformSCRPaymentRelationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_scr_payment_relation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSCRPaymentRelationDatumType, dataPlatformSCRPaymentRelationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_scr_payment_relation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_payment_relation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRPaymentRelationDatumUpsertCacheMut.Lock()
		dataPlatformSCRPaymentRelationDatumUpsertCache[key] = cache
		dataPlatformSCRPaymentRelationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSCRPaymentRelationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSCRPaymentRelationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSCRPaymentRelationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSCRPaymentRelationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_scr_payment_relation_data` WHERE `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipBillingID`=? AND `SupplyChainRelationshipPaymentID`=? AND `Buyer`=? AND `Seller`=? AND `BillToParty`=? AND `BillFromParty`=? AND `Payer`=? AND `Payee`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_scr_payment_relation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSCRPaymentRelationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSCRPaymentRelationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_scr_payment_relation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSCRPaymentRelationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRPaymentRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_scr_payment_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSCRPaymentRelationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSCRPaymentRelationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSCRPaymentRelationDatum(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipBillingID, o.SupplyChainRelationshipPaymentID, o.Buyer, o.Seller, o.BillToParty, o.BillFromParty, o.Payer, o.Payee)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSCRPaymentRelationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSCRPaymentRelationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRPaymentRelationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_scr_payment_relation_data`.* FROM `data_platform_scr_payment_relation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRPaymentRelationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSCRPaymentRelationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSCRPaymentRelationDatumExists checks if the DataPlatformSCRPaymentRelationDatum row exists.
func DataPlatformSCRPaymentRelationDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, supplyChainRelationshipBillingID int, supplyChainRelationshipPaymentID int, buyer int, seller int, billToParty int, billFromParty int, payer int, payee int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_scr_payment_relation_data` where `SupplyChainRelationshipID`=? AND `SupplyChainRelationshipBillingID`=? AND `SupplyChainRelationshipPaymentID`=? AND `Buyer`=? AND `Seller`=? AND `BillToParty`=? AND `BillFromParty`=? AND `Payer`=? AND `Payee`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, supplyChainRelationshipBillingID, supplyChainRelationshipPaymentID, buyer, seller, billToParty, billFromParty, payer, payee)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, supplyChainRelationshipBillingID, supplyChainRelationshipPaymentID, buyer, seller, billToParty, billFromParty, payer, payee)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_scr_payment_relation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSCRPaymentRelationDatum row exists.
func (o *DataPlatformSCRPaymentRelationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSCRPaymentRelationDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.SupplyChainRelationshipBillingID, o.SupplyChainRelationshipPaymentID, o.Buyer, o.Seller, o.BillToParty, o.BillFromParty, o.Payer, o.Payee)
}
