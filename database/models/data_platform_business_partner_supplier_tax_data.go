// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerSupplierTaxDatum is an object representing the database table.
type DataPlatformBusinessPartnerSupplierTaxDatum struct {
	BusinessPartner     int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Supplier            int         `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
	DepartureCountry    string      `boil:"DepartureCountry" json:"DepartureCountry" toml:"DepartureCountry" yaml:"DepartureCountry"`
	TaxCategory         null.String `boil:"TaxCategory" json:"TaxCategory,omitempty" toml:"TaxCategory" yaml:"TaxCategory,omitempty"`
	BPTaxClassification null.String `boil:"BPTaxClassification" json:"BPTaxClassification,omitempty" toml:"BPTaxClassification" yaml:"BPTaxClassification,omitempty"`

	R *dataPlatformBusinessPartnerSupplierTaxDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerSupplierTaxDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerSupplierTaxDatumColumns = struct {
	BusinessPartner     string
	Supplier            string
	DepartureCountry    string
	TaxCategory         string
	BPTaxClassification string
}{
	BusinessPartner:     "BusinessPartner",
	Supplier:            "Supplier",
	DepartureCountry:    "DepartureCountry",
	TaxCategory:         "TaxCategory",
	BPTaxClassification: "BPTaxClassification",
}

var DataPlatformBusinessPartnerSupplierTaxDatumTableColumns = struct {
	BusinessPartner     string
	Supplier            string
	DepartureCountry    string
	TaxCategory         string
	BPTaxClassification string
}{
	BusinessPartner:     "data_platform_business_partner_supplier_tax_data.BusinessPartner",
	Supplier:            "data_platform_business_partner_supplier_tax_data.Supplier",
	DepartureCountry:    "data_platform_business_partner_supplier_tax_data.DepartureCountry",
	TaxCategory:         "data_platform_business_partner_supplier_tax_data.TaxCategory",
	BPTaxClassification: "data_platform_business_partner_supplier_tax_data.BPTaxClassification",
}

// Generated where

var DataPlatformBusinessPartnerSupplierTaxDatumWhere = struct {
	BusinessPartner     whereHelperint
	Supplier            whereHelperint
	DepartureCountry    whereHelperstring
	TaxCategory         whereHelpernull_String
	BPTaxClassification whereHelpernull_String
}{
	BusinessPartner:     whereHelperint{field: "`data_platform_business_partner_supplier_tax_data`.`BusinessPartner`"},
	Supplier:            whereHelperint{field: "`data_platform_business_partner_supplier_tax_data`.`Supplier`"},
	DepartureCountry:    whereHelperstring{field: "`data_platform_business_partner_supplier_tax_data`.`DepartureCountry`"},
	TaxCategory:         whereHelpernull_String{field: "`data_platform_business_partner_supplier_tax_data`.`TaxCategory`"},
	BPTaxClassification: whereHelpernull_String{field: "`data_platform_business_partner_supplier_tax_data`.`BPTaxClassification`"},
}

// DataPlatformBusinessPartnerSupplierTaxDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerSupplierTaxDatumRels = struct {
	DepartureCountryDataPlatformCountryCountryDatum         string
	BusinessPartnerDataPlatformBusinessPartnerSupplierDatum string
}{
	DepartureCountryDataPlatformCountryCountryDatum:         "DepartureCountryDataPlatformCountryCountryDatum",
	BusinessPartnerDataPlatformBusinessPartnerSupplierDatum: "BusinessPartnerDataPlatformBusinessPartnerSupplierDatum",
}

// dataPlatformBusinessPartnerSupplierTaxDatumR is where relationships are stored.
type dataPlatformBusinessPartnerSupplierTaxDatumR struct {
	DepartureCountryDataPlatformCountryCountryDatum         *DataPlatformCountryCountryDatum          `boil:"DepartureCountryDataPlatformCountryCountryDatum" json:"DepartureCountryDataPlatformCountryCountryDatum" toml:"DepartureCountryDataPlatformCountryCountryDatum" yaml:"DepartureCountryDataPlatformCountryCountryDatum"`
	BusinessPartnerDataPlatformBusinessPartnerSupplierDatum *DataPlatformBusinessPartnerSupplierDatum `boil:"BusinessPartnerDataPlatformBusinessPartnerSupplierDatum" json:"BusinessPartnerDataPlatformBusinessPartnerSupplierDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerSupplierDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerSupplierDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerSupplierTaxDatumR) NewStruct() *dataPlatformBusinessPartnerSupplierTaxDatumR {
	return &dataPlatformBusinessPartnerSupplierTaxDatumR{}
}

func (r *dataPlatformBusinessPartnerSupplierTaxDatumR) GetDepartureCountryDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.DepartureCountryDataPlatformCountryCountryDatum
}

func (r *dataPlatformBusinessPartnerSupplierTaxDatumR) GetBusinessPartnerDataPlatformBusinessPartnerSupplierDatum() *DataPlatformBusinessPartnerSupplierDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum
}

// dataPlatformBusinessPartnerSupplierTaxDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerSupplierTaxDatumL struct{}

var (
	dataPlatformBusinessPartnerSupplierTaxDatumAllColumns            = []string{"BusinessPartner", "Supplier", "DepartureCountry", "TaxCategory", "BPTaxClassification"}
	dataPlatformBusinessPartnerSupplierTaxDatumColumnsWithoutDefault = []string{"BusinessPartner", "Supplier", "DepartureCountry", "TaxCategory", "BPTaxClassification"}
	dataPlatformBusinessPartnerSupplierTaxDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Supplier", "DepartureCountry"}
	dataPlatformBusinessPartnerSupplierTaxDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerSupplierTaxDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerSupplierTaxDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerSupplierTaxDatum.
	DataPlatformBusinessPartnerSupplierTaxDatumSlice []*DataPlatformBusinessPartnerSupplierTaxDatum
	// DataPlatformBusinessPartnerSupplierTaxDatumHook is the signature for custom DataPlatformBusinessPartnerSupplierTaxDatum hook methods
	DataPlatformBusinessPartnerSupplierTaxDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformBusinessPartnerSupplierTaxDatum) error

	dataPlatformBusinessPartnerSupplierTaxDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerSupplierTaxDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerSupplierTaxDatum{})
	dataPlatformBusinessPartnerSupplierTaxDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerSupplierTaxDatumType)
	dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerSupplierTaxDatumType, dataPlatformBusinessPartnerSupplierTaxDatumMapping, dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerSupplierTaxDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerSupplierTaxDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerSupplierTaxDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerSupplierTaxDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerSupplierTaxDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerSupplierTaxDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformBusinessPartnerSupplierTaxDatumAfterSelectHooks []DataPlatformBusinessPartnerSupplierTaxDatumHook

var dataPlatformBusinessPartnerSupplierTaxDatumBeforeInsertHooks []DataPlatformBusinessPartnerSupplierTaxDatumHook
var dataPlatformBusinessPartnerSupplierTaxDatumAfterInsertHooks []DataPlatformBusinessPartnerSupplierTaxDatumHook

var dataPlatformBusinessPartnerSupplierTaxDatumBeforeUpdateHooks []DataPlatformBusinessPartnerSupplierTaxDatumHook
var dataPlatformBusinessPartnerSupplierTaxDatumAfterUpdateHooks []DataPlatformBusinessPartnerSupplierTaxDatumHook

var dataPlatformBusinessPartnerSupplierTaxDatumBeforeDeleteHooks []DataPlatformBusinessPartnerSupplierTaxDatumHook
var dataPlatformBusinessPartnerSupplierTaxDatumAfterDeleteHooks []DataPlatformBusinessPartnerSupplierTaxDatumHook

var dataPlatformBusinessPartnerSupplierTaxDatumBeforeUpsertHooks []DataPlatformBusinessPartnerSupplierTaxDatumHook
var dataPlatformBusinessPartnerSupplierTaxDatumAfterUpsertHooks []DataPlatformBusinessPartnerSupplierTaxDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierTaxDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierTaxDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierTaxDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierTaxDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierTaxDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierTaxDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierTaxDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierTaxDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierTaxDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformBusinessPartnerSupplierTaxDatumHook registers your hook function for all future operations.
func AddDataPlatformBusinessPartnerSupplierTaxDatumHook(hookPoint boil.HookPoint, dataPlatformBusinessPartnerSupplierTaxDatumHook DataPlatformBusinessPartnerSupplierTaxDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformBusinessPartnerSupplierTaxDatumAfterSelectHooks = append(dataPlatformBusinessPartnerSupplierTaxDatumAfterSelectHooks, dataPlatformBusinessPartnerSupplierTaxDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformBusinessPartnerSupplierTaxDatumBeforeInsertHooks = append(dataPlatformBusinessPartnerSupplierTaxDatumBeforeInsertHooks, dataPlatformBusinessPartnerSupplierTaxDatumHook)
	case boil.AfterInsertHook:
		dataPlatformBusinessPartnerSupplierTaxDatumAfterInsertHooks = append(dataPlatformBusinessPartnerSupplierTaxDatumAfterInsertHooks, dataPlatformBusinessPartnerSupplierTaxDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformBusinessPartnerSupplierTaxDatumBeforeUpdateHooks = append(dataPlatformBusinessPartnerSupplierTaxDatumBeforeUpdateHooks, dataPlatformBusinessPartnerSupplierTaxDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformBusinessPartnerSupplierTaxDatumAfterUpdateHooks = append(dataPlatformBusinessPartnerSupplierTaxDatumAfterUpdateHooks, dataPlatformBusinessPartnerSupplierTaxDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformBusinessPartnerSupplierTaxDatumBeforeDeleteHooks = append(dataPlatformBusinessPartnerSupplierTaxDatumBeforeDeleteHooks, dataPlatformBusinessPartnerSupplierTaxDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformBusinessPartnerSupplierTaxDatumAfterDeleteHooks = append(dataPlatformBusinessPartnerSupplierTaxDatumAfterDeleteHooks, dataPlatformBusinessPartnerSupplierTaxDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformBusinessPartnerSupplierTaxDatumBeforeUpsertHooks = append(dataPlatformBusinessPartnerSupplierTaxDatumBeforeUpsertHooks, dataPlatformBusinessPartnerSupplierTaxDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformBusinessPartnerSupplierTaxDatumAfterUpsertHooks = append(dataPlatformBusinessPartnerSupplierTaxDatumAfterUpsertHooks, dataPlatformBusinessPartnerSupplierTaxDatumHook)
	}
}

// One returns a single dataPlatformBusinessPartnerSupplierTaxDatum record from the query.
func (q dataPlatformBusinessPartnerSupplierTaxDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerSupplierTaxDatum, error) {
	o := &DataPlatformBusinessPartnerSupplierTaxDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_supplier_tax_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerSupplierTaxDatum records from the query.
func (q dataPlatformBusinessPartnerSupplierTaxDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerSupplierTaxDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerSupplierTaxDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerSupplierTaxDatum slice")
	}

	if len(dataPlatformBusinessPartnerSupplierTaxDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerSupplierTaxDatum records in the query.
func (q dataPlatformBusinessPartnerSupplierTaxDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_supplier_tax_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerSupplierTaxDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_supplier_tax_data exists")
	}

	return count > 0, nil
}

// DepartureCountryDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) DepartureCountryDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.DepartureCountry),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerSupplierDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) BusinessPartnerDataPlatformBusinessPartnerSupplierDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerSupplierData(queryMods...)
}

// LoadDepartureCountryDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerSupplierTaxDatumL) LoadDepartureCountryDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerSupplierTaxDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerSupplierTaxDatum
	var object *DataPlatformBusinessPartnerSupplierTaxDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerSupplierTaxDatum.(*DataPlatformBusinessPartnerSupplierTaxDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerSupplierTaxDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerSupplierTaxDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerSupplierTaxDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerSupplierTaxDatum.(*[]*DataPlatformBusinessPartnerSupplierTaxDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerSupplierTaxDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerSupplierTaxDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerSupplierTaxDatumR{}
		}
		args = append(args, object.DepartureCountry)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerSupplierTaxDatumR{}
			}

			for _, a := range args {
				if a == obj.DepartureCountry {
					continue Outer
				}
			}

			args = append(args, obj.DepartureCountry)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(dataPlatformCountryCountryDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DepartureCountryDataPlatformCountryCountryDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformCountryCountryDatumR{}
		}
		foreign.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData = append(foreign.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DepartureCountry == foreign.Country {
				local.R.DepartureCountryDataPlatformCountryCountryDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformCountryCountryDatumR{}
				}
				foreign.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData = append(foreign.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerSupplierDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerSupplierTaxDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerSupplierDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerSupplierTaxDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerSupplierTaxDatum
	var object *DataPlatformBusinessPartnerSupplierTaxDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerSupplierTaxDatum.(*DataPlatformBusinessPartnerSupplierTaxDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerSupplierTaxDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerSupplierTaxDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerSupplierTaxDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerSupplierTaxDatum.(*[]*DataPlatformBusinessPartnerSupplierTaxDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerSupplierTaxDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerSupplierTaxDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerSupplierTaxDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerSupplierTaxDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_supplier_data`),
		qm.WhereIn(`data_platform_business_partner_supplier_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerSupplierDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerSupplierDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerSupplierDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_supplier_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_supplier_data")
	}

	if len(dataPlatformBusinessPartnerSupplierDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerSupplierDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerSupplierDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData, local)
				break
			}
		}
	}

	return nil
}

// SetDepartureCountryDataPlatformCountryCountryDatum of the dataPlatformBusinessPartnerSupplierTaxDatum to the related item.
// Sets o.R.DepartureCountryDataPlatformCountryCountryDatum to related.
// Adds o to related.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) SetDepartureCountryDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_supplier_tax_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DepartureCountry"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.BusinessPartner, o.Supplier, o.DepartureCountry}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DepartureCountry = related.Country
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerSupplierTaxDatumR{
			DepartureCountryDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.DepartureCountryDataPlatformCountryCountryDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformCountryCountryDatumR{
			DepartureCountryDataPlatformBusinessPartnerSupplierTaxData: DataPlatformBusinessPartnerSupplierTaxDatumSlice{o},
		}
	} else {
		related.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData = append(related.R.DepartureCountryDataPlatformBusinessPartnerSupplierTaxData, o)
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerSupplierDatum of the dataPlatformBusinessPartnerSupplierTaxDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) SetBusinessPartnerDataPlatformBusinessPartnerSupplierDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerSupplierDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_supplier_tax_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Supplier, o.DepartureCountry}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerSupplierTaxDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerSupplierDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData: DataPlatformBusinessPartnerSupplierTaxDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData = append(related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierTaxData, o)
	}

	return nil
}

// DataPlatformBusinessPartnerSupplierTaxData retrieves all the records using an executor.
func DataPlatformBusinessPartnerSupplierTaxData(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierTaxDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_supplier_tax_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_supplier_tax_data`.*"})
	}

	return dataPlatformBusinessPartnerSupplierTaxDatumQuery{q}
}

// FindDataPlatformBusinessPartnerSupplierTaxDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerSupplierTaxDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, supplier int, departureCountry string, selectCols ...string) (*DataPlatformBusinessPartnerSupplierTaxDatum, error) {
	dataPlatformBusinessPartnerSupplierTaxDatumObj := &DataPlatformBusinessPartnerSupplierTaxDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_supplier_tax_data` where `BusinessPartner`=? AND `Supplier`=? AND `DepartureCountry`=?", sel,
	)

	q := queries.Raw(query, businessPartner, supplier, departureCountry)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerSupplierTaxDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_supplier_tax_data")
	}

	if err = dataPlatformBusinessPartnerSupplierTaxDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformBusinessPartnerSupplierTaxDatumObj, err
	}

	return dataPlatformBusinessPartnerSupplierTaxDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_supplier_tax_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerSupplierTaxDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerSupplierTaxDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerSupplierTaxDatumInsertCache[key]
	dataPlatformBusinessPartnerSupplierTaxDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerSupplierTaxDatumAllColumns,
			dataPlatformBusinessPartnerSupplierTaxDatumColumnsWithDefault,
			dataPlatformBusinessPartnerSupplierTaxDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierTaxDatumType, dataPlatformBusinessPartnerSupplierTaxDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierTaxDatumType, dataPlatformBusinessPartnerSupplierTaxDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_supplier_tax_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_supplier_tax_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_supplier_tax_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_supplier_tax_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Supplier,
		o.DepartureCountry,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_supplier_tax_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerSupplierTaxDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerSupplierTaxDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerSupplierTaxDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformBusinessPartnerSupplierTaxDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerSupplierTaxDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerSupplierTaxDatumUpdateCache[key]
	dataPlatformBusinessPartnerSupplierTaxDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerSupplierTaxDatumAllColumns,
			dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_business_partner_supplier_tax_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_supplier_tax_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierTaxDatumType, dataPlatformBusinessPartnerSupplierTaxDatumMapping, append(wl, dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_business_partner_supplier_tax_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_business_partner_supplier_tax_data")
	}

	if !cached {
		dataPlatformBusinessPartnerSupplierTaxDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerSupplierTaxDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerSupplierTaxDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerSupplierTaxDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_business_partner_supplier_tax_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_business_partner_supplier_tax_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerSupplierTaxDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_supplier_tax_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerSupplierTaxDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformBusinessPartnerSupplierTaxDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformBusinessPartnerSupplierTaxDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_supplier_tax_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerSupplierTaxDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerSupplierTaxDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerSupplierTaxDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerSupplierTaxDatumUpsertCache[key]
	dataPlatformBusinessPartnerSupplierTaxDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerSupplierTaxDatumAllColumns,
			dataPlatformBusinessPartnerSupplierTaxDatumColumnsWithDefault,
			dataPlatformBusinessPartnerSupplierTaxDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerSupplierTaxDatumAllColumns,
			dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_supplier_tax_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_supplier_tax_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_supplier_tax_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierTaxDatumType, dataPlatformBusinessPartnerSupplierTaxDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierTaxDatumType, dataPlatformBusinessPartnerSupplierTaxDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_supplier_tax_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierTaxDatumType, dataPlatformBusinessPartnerSupplierTaxDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_supplier_tax_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_supplier_tax_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerSupplierTaxDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerSupplierTaxDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerSupplierTaxDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformBusinessPartnerSupplierTaxDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformBusinessPartnerSupplierTaxDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_supplier_tax_data` WHERE `BusinessPartner`=? AND `Supplier`=? AND `DepartureCountry`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_business_partner_supplier_tax_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_business_partner_supplier_tax_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerSupplierTaxDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformBusinessPartnerSupplierTaxDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_supplier_tax_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_supplier_tax_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerSupplierTaxDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformBusinessPartnerSupplierTaxDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_supplier_tax_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerSupplierTaxDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_supplier_tax_data")
	}

	if len(dataPlatformBusinessPartnerSupplierTaxDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerSupplierTaxDatum(ctx, exec, o.BusinessPartner, o.Supplier, o.DepartureCountry)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerSupplierTaxDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerSupplierTaxDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_supplier_tax_data`.* FROM `data_platform_business_partner_supplier_tax_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerSupplierTaxDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerSupplierTaxDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerSupplierTaxDatumExists checks if the DataPlatformBusinessPartnerSupplierTaxDatum row exists.
func DataPlatformBusinessPartnerSupplierTaxDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, supplier int, departureCountry string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_supplier_tax_data` where `BusinessPartner`=? AND `Supplier`=? AND `DepartureCountry`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, supplier, departureCountry)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, supplier, departureCountry)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_supplier_tax_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerSupplierTaxDatum row exists.
func (o *DataPlatformBusinessPartnerSupplierTaxDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerSupplierTaxDatumExists(ctx, exec, o.BusinessPartner, o.Supplier, o.DepartureCountry)
}
