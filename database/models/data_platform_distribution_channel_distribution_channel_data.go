// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformDistributionChannelDistributionChannelDatum is an object representing the database table.
type DataPlatformDistributionChannelDistributionChannelDatum struct {
	DistributionChannel string `boil:"DistributionChannel" json:"DistributionChannel" toml:"DistributionChannel" yaml:"DistributionChannel"`

	R *dataPlatformDistributionChannelDistributionChannelDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformDistributionChannelDistributionChannelDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformDistributionChannelDistributionChannelDatumColumns = struct {
	DistributionChannel string
}{
	DistributionChannel: "DistributionChannel",
}

var DataPlatformDistributionChannelDistributionChannelDatumTableColumns = struct {
	DistributionChannel string
}{
	DistributionChannel: "data_platform_distribution_channel_distribution_channel_data.DistributionChannel",
}

// Generated where

var DataPlatformDistributionChannelDistributionChannelDatumWhere = struct {
	DistributionChannel whereHelperstring
}{
	DistributionChannel: whereHelperstring{field: "`data_platform_distribution_channel_distribution_channel_data`.`DistributionChannel`"},
}

// DataPlatformDistributionChannelDistributionChannelDatumRels is where relationship names are stored.
var DataPlatformDistributionChannelDistributionChannelDatumRels = struct {
	DistributionChannelDataPlatformDistributionChannelTextData string
}{
	DistributionChannelDataPlatformDistributionChannelTextData: "DistributionChannelDataPlatformDistributionChannelTextData",
}

// dataPlatformDistributionChannelDistributionChannelDatumR is where relationships are stored.
type dataPlatformDistributionChannelDistributionChannelDatumR struct {
	DistributionChannelDataPlatformDistributionChannelTextData DataPlatformDistributionChannelTextDatumSlice `boil:"DistributionChannelDataPlatformDistributionChannelTextData" json:"DistributionChannelDataPlatformDistributionChannelTextData" toml:"DistributionChannelDataPlatformDistributionChannelTextData" yaml:"DistributionChannelDataPlatformDistributionChannelTextData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformDistributionChannelDistributionChannelDatumR) NewStruct() *dataPlatformDistributionChannelDistributionChannelDatumR {
	return &dataPlatformDistributionChannelDistributionChannelDatumR{}
}

func (r *dataPlatformDistributionChannelDistributionChannelDatumR) GetDistributionChannelDataPlatformDistributionChannelTextData() DataPlatformDistributionChannelTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.DistributionChannelDataPlatformDistributionChannelTextData
}

// dataPlatformDistributionChannelDistributionChannelDatumL is where Load methods for each relationship are stored.
type dataPlatformDistributionChannelDistributionChannelDatumL struct{}

var (
	dataPlatformDistributionChannelDistributionChannelDatumAllColumns            = []string{"DistributionChannel"}
	dataPlatformDistributionChannelDistributionChannelDatumColumnsWithoutDefault = []string{"DistributionChannel"}
	dataPlatformDistributionChannelDistributionChannelDatumColumnsWithDefault    = []string{}
	dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyColumns     = []string{"DistributionChannel"}
	dataPlatformDistributionChannelDistributionChannelDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformDistributionChannelDistributionChannelDatumSlice is an alias for a slice of pointers to DataPlatformDistributionChannelDistributionChannelDatum.
	// This should almost always be used instead of []DataPlatformDistributionChannelDistributionChannelDatum.
	DataPlatformDistributionChannelDistributionChannelDatumSlice []*DataPlatformDistributionChannelDistributionChannelDatum

	dataPlatformDistributionChannelDistributionChannelDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformDistributionChannelDistributionChannelDatumType                 = reflect.TypeOf(&DataPlatformDistributionChannelDistributionChannelDatum{})
	dataPlatformDistributionChannelDistributionChannelDatumMapping              = queries.MakeStructMapping(dataPlatformDistributionChannelDistributionChannelDatumType)
	dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformDistributionChannelDistributionChannelDatumType, dataPlatformDistributionChannelDistributionChannelDatumMapping, dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyColumns)
	dataPlatformDistributionChannelDistributionChannelDatumInsertCacheMut       sync.RWMutex
	dataPlatformDistributionChannelDistributionChannelDatumInsertCache          = make(map[string]insertCache)
	dataPlatformDistributionChannelDistributionChannelDatumUpdateCacheMut       sync.RWMutex
	dataPlatformDistributionChannelDistributionChannelDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformDistributionChannelDistributionChannelDatumUpsertCacheMut       sync.RWMutex
	dataPlatformDistributionChannelDistributionChannelDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformDistributionChannelDistributionChannelDatum record from the query.
func (q dataPlatformDistributionChannelDistributionChannelDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformDistributionChannelDistributionChannelDatum, error) {
	o := &DataPlatformDistributionChannelDistributionChannelDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_distribution_channel_distribution_channel_data")
	}

	return o, nil
}

// All returns all DataPlatformDistributionChannelDistributionChannelDatum records from the query.
func (q dataPlatformDistributionChannelDistributionChannelDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformDistributionChannelDistributionChannelDatumSlice, error) {
	var o []*DataPlatformDistributionChannelDistributionChannelDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformDistributionChannelDistributionChannelDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformDistributionChannelDistributionChannelDatum records in the query.
func (q dataPlatformDistributionChannelDistributionChannelDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_distribution_channel_distribution_channel_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformDistributionChannelDistributionChannelDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_distribution_channel_distribution_channel_data exists")
	}

	return count > 0, nil
}

// DistributionChannelDataPlatformDistributionChannelTextData retrieves all the data_platform_distribution_channel_text_datum's DataPlatformDistributionChannelTextData with an executor via DistributionChannel column.
func (o *DataPlatformDistributionChannelDistributionChannelDatum) DistributionChannelDataPlatformDistributionChannelTextData(mods ...qm.QueryMod) dataPlatformDistributionChannelTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_distribution_channel_text_data`.`DistributionChannel`=?", o.DistributionChannel),
	)

	return DataPlatformDistributionChannelTextData(queryMods...)
}

// LoadDistributionChannelDataPlatformDistributionChannelTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformDistributionChannelDistributionChannelDatumL) LoadDistributionChannelDataPlatformDistributionChannelTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformDistributionChannelDistributionChannelDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformDistributionChannelDistributionChannelDatum
	var object *DataPlatformDistributionChannelDistributionChannelDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformDistributionChannelDistributionChannelDatum.(*DataPlatformDistributionChannelDistributionChannelDatum)
		if !ok {
			object = new(DataPlatformDistributionChannelDistributionChannelDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformDistributionChannelDistributionChannelDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformDistributionChannelDistributionChannelDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformDistributionChannelDistributionChannelDatum.(*[]*DataPlatformDistributionChannelDistributionChannelDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformDistributionChannelDistributionChannelDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformDistributionChannelDistributionChannelDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformDistributionChannelDistributionChannelDatumR{}
		}
		args = append(args, object.DistributionChannel)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformDistributionChannelDistributionChannelDatumR{}
			}

			for _, a := range args {
				if a == obj.DistributionChannel {
					continue Outer
				}
			}

			args = append(args, obj.DistributionChannel)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_distribution_channel_text_data`),
		qm.WhereIn(`data_platform_distribution_channel_text_data.DistributionChannel in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_distribution_channel_text_data")
	}

	var resultSlice []*DataPlatformDistributionChannelTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_distribution_channel_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_distribution_channel_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_distribution_channel_text_data")
	}

	if singular {
		object.R.DistributionChannelDataPlatformDistributionChannelTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.DistributionChannel == foreign.DistributionChannel {
				local.R.DistributionChannelDataPlatformDistributionChannelTextData = append(local.R.DistributionChannelDataPlatformDistributionChannelTextData, foreign)
				break
			}
		}
	}

	return nil
}

// AddDistributionChannelDataPlatformDistributionChannelTextData adds the given related objects to the existing relationships
// of the data_platform_distribution_channel_distribution_channel_datum, optionally inserting them as new records.
// Appends related to o.R.DistributionChannelDataPlatformDistributionChannelTextData.
func (o *DataPlatformDistributionChannelDistributionChannelDatum) AddDistributionChannelDataPlatformDistributionChannelTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDistributionChannelTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DistributionChannel = o.DistributionChannel
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_distribution_channel_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"DistributionChannel"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDistributionChannelTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.DistributionChannel, rel.DistributionChannel, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DistributionChannel = o.DistributionChannel
		}
	}

	if o.R == nil {
		o.R = &dataPlatformDistributionChannelDistributionChannelDatumR{
			DistributionChannelDataPlatformDistributionChannelTextData: related,
		}
	} else {
		o.R.DistributionChannelDataPlatformDistributionChannelTextData = append(o.R.DistributionChannelDataPlatformDistributionChannelTextData, related...)
	}

	return nil
}

// DataPlatformDistributionChannelDistributionChannelData retrieves all the records using an executor.
func DataPlatformDistributionChannelDistributionChannelData(mods ...qm.QueryMod) dataPlatformDistributionChannelDistributionChannelDatumQuery {
	mods = append(mods, qm.From("`data_platform_distribution_channel_distribution_channel_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_distribution_channel_distribution_channel_data`.*"})
	}

	return dataPlatformDistributionChannelDistributionChannelDatumQuery{q}
}

// FindDataPlatformDistributionChannelDistributionChannelDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformDistributionChannelDistributionChannelDatum(ctx context.Context, exec boil.ContextExecutor, distributionChannel string, selectCols ...string) (*DataPlatformDistributionChannelDistributionChannelDatum, error) {
	dataPlatformDistributionChannelDistributionChannelDatumObj := &DataPlatformDistributionChannelDistributionChannelDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_distribution_channel_distribution_channel_data` where `DistributionChannel`=?", sel,
	)

	q := queries.Raw(query, distributionChannel)

	err := q.Bind(ctx, exec, dataPlatformDistributionChannelDistributionChannelDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_distribution_channel_distribution_channel_data")
	}

	return dataPlatformDistributionChannelDistributionChannelDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformDistributionChannelDistributionChannelDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_distribution_channel_distribution_channel_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDistributionChannelDistributionChannelDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformDistributionChannelDistributionChannelDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformDistributionChannelDistributionChannelDatumInsertCache[key]
	dataPlatformDistributionChannelDistributionChannelDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformDistributionChannelDistributionChannelDatumAllColumns,
			dataPlatformDistributionChannelDistributionChannelDatumColumnsWithDefault,
			dataPlatformDistributionChannelDistributionChannelDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDistributionChannelDistributionChannelDatumType, dataPlatformDistributionChannelDistributionChannelDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformDistributionChannelDistributionChannelDatumType, dataPlatformDistributionChannelDistributionChannelDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_distribution_channel_distribution_channel_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_distribution_channel_distribution_channel_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_distribution_channel_distribution_channel_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_distribution_channel_distribution_channel_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.DistributionChannel,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_distribution_channel_distribution_channel_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDistributionChannelDistributionChannelDatumInsertCacheMut.Lock()
		dataPlatformDistributionChannelDistributionChannelDatumInsertCache[key] = cache
		dataPlatformDistributionChannelDistributionChannelDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformDistributionChannelDistributionChannelDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformDistributionChannelDistributionChannelDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformDistributionChannelDistributionChannelDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformDistributionChannelDistributionChannelDatumUpdateCache[key]
	dataPlatformDistributionChannelDistributionChannelDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformDistributionChannelDistributionChannelDatumAllColumns,
			dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_distribution_channel_distribution_channel_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_distribution_channel_distribution_channel_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformDistributionChannelDistributionChannelDatumType, dataPlatformDistributionChannelDistributionChannelDatumMapping, append(wl, dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_distribution_channel_distribution_channel_data row")
	}

	if !cached {
		dataPlatformDistributionChannelDistributionChannelDatumUpdateCacheMut.Lock()
		dataPlatformDistributionChannelDistributionChannelDatumUpdateCache[key] = cache
		dataPlatformDistributionChannelDistributionChannelDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformDistributionChannelDistributionChannelDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_distribution_channel_distribution_channel_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformDistributionChannelDistributionChannelDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_distribution_channel_distribution_channel_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformDistributionChannelDistributionChannelDatum slice")
	}

	return nil
}

var mySQLDataPlatformDistributionChannelDistributionChannelDatumUniqueColumns = []string{
	"DistributionChannel",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformDistributionChannelDistributionChannelDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_distribution_channel_distribution_channel_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformDistributionChannelDistributionChannelDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformDistributionChannelDistributionChannelDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformDistributionChannelDistributionChannelDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformDistributionChannelDistributionChannelDatumUpsertCache[key]
	dataPlatformDistributionChannelDistributionChannelDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformDistributionChannelDistributionChannelDatumAllColumns,
			dataPlatformDistributionChannelDistributionChannelDatumColumnsWithDefault,
			dataPlatformDistributionChannelDistributionChannelDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformDistributionChannelDistributionChannelDatumAllColumns,
			dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_distribution_channel_distribution_channel_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_distribution_channel_distribution_channel_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_distribution_channel_distribution_channel_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformDistributionChannelDistributionChannelDatumType, dataPlatformDistributionChannelDistributionChannelDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformDistributionChannelDistributionChannelDatumType, dataPlatformDistributionChannelDistributionChannelDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_distribution_channel_distribution_channel_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformDistributionChannelDistributionChannelDatumType, dataPlatformDistributionChannelDistributionChannelDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_distribution_channel_distribution_channel_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_distribution_channel_distribution_channel_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformDistributionChannelDistributionChannelDatumUpsertCacheMut.Lock()
		dataPlatformDistributionChannelDistributionChannelDatumUpsertCache[key] = cache
		dataPlatformDistributionChannelDistributionChannelDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformDistributionChannelDistributionChannelDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformDistributionChannelDistributionChannelDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformDistributionChannelDistributionChannelDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_distribution_channel_distribution_channel_data` WHERE `DistributionChannel`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_distribution_channel_distribution_channel_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformDistributionChannelDistributionChannelDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformDistributionChannelDistributionChannelDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_distribution_channel_distribution_channel_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformDistributionChannelDistributionChannelDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_distribution_channel_distribution_channel_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformDistributionChannelDistributionChannelDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformDistributionChannelDistributionChannelDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformDistributionChannelDistributionChannelDatum(ctx, exec, o.DistributionChannel)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformDistributionChannelDistributionChannelDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformDistributionChannelDistributionChannelDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_distribution_channel_distribution_channel_data`.* FROM `data_platform_distribution_channel_distribution_channel_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformDistributionChannelDistributionChannelDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformDistributionChannelDistributionChannelDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformDistributionChannelDistributionChannelDatumExists checks if the DataPlatformDistributionChannelDistributionChannelDatum row exists.
func DataPlatformDistributionChannelDistributionChannelDatumExists(ctx context.Context, exec boil.ContextExecutor, distributionChannel string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_distribution_channel_distribution_channel_data` where `DistributionChannel`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, distributionChannel)
	}
	row := exec.QueryRowContext(ctx, sql, distributionChannel)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_distribution_channel_distribution_channel_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformDistributionChannelDistributionChannelDatum row exists.
func (o *DataPlatformDistributionChannelDistributionChannelDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformDistributionChannelDistributionChannelDatumExists(ctx, exec, o.DistributionChannel)
}
