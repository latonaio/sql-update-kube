// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionOrderItemDatum is an object representing the database table.
type DataPlatformProductionOrderItemDatum struct {
	ProductionOrder                       int          `boil:"ProductionOrder" json:"ProductionOrder" toml:"ProductionOrder" yaml:"ProductionOrder"`
	ProductionOrderItem                   int          `boil:"ProductionOrderItem" json:"ProductionOrderItem" toml:"ProductionOrderItem" yaml:"ProductionOrderItem"`
	CreationDate                          string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                        string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	ItemIsReleased                        null.Bool    `boil:"ItemIsReleased" json:"ItemIsReleased,omitempty" toml:"ItemIsReleased" yaml:"ItemIsReleased,omitempty"`
	ItemIsPartiallyConfirmed              null.Bool    `boil:"ItemIsPartiallyConfirmed" json:"ItemIsPartiallyConfirmed,omitempty" toml:"ItemIsPartiallyConfirmed" yaml:"ItemIsPartiallyConfirmed,omitempty"`
	ItemIsConfirmed                       null.Bool    `boil:"ItemIsConfirmed" json:"ItemIsConfirmed,omitempty" toml:"ItemIsConfirmed" yaml:"ItemIsConfirmed,omitempty"`
	ItemIsLocked                          null.Bool    `boil:"ItemIsLocked" json:"ItemIsLocked,omitempty" toml:"ItemIsLocked" yaml:"ItemIsLocked,omitempty"`
	ItemIsMarkedForDeletion               null.Bool    `boil:"ItemIsMarkedForDeletion" json:"ItemIsMarkedForDeletion,omitempty" toml:"ItemIsMarkedForDeletion" yaml:"ItemIsMarkedForDeletion,omitempty"`
	ProductionOrderHasGeneratedOperations null.Bool    `boil:"ProductionOrderHasGeneratedOperations" json:"ProductionOrderHasGeneratedOperations,omitempty" toml:"ProductionOrderHasGeneratedOperations" yaml:"ProductionOrderHasGeneratedOperations,omitempty"`
	ProductAvailabilityIsNotChecked       null.Bool    `boil:"ProductAvailabilityIsNotChecked" json:"ProductAvailabilityIsNotChecked,omitempty" toml:"ProductAvailabilityIsNotChecked" yaml:"ProductAvailabilityIsNotChecked,omitempty"`
	PrecedingItem                         null.Int     `boil:"PrecedingItem" json:"PrecedingItem,omitempty" toml:"PrecedingItem" yaml:"PrecedingItem,omitempty"`
	FollowingItem                         null.Int     `boil:"FollowingItem" json:"FollowingItem,omitempty" toml:"FollowingItem" yaml:"FollowingItem,omitempty"`
	Product                               null.String  `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	ProductionPlant                       string       `boil:"ProductionPlant" json:"ProductionPlant" toml:"ProductionPlant" yaml:"ProductionPlant"`
	ProductionPlantBusinessPartner        int          `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner"`
	ProductionPlantStorageLocation        null.String  `boil:"ProductionPlantStorageLocation" json:"ProductionPlantStorageLocation,omitempty" toml:"ProductionPlantStorageLocation" yaml:"ProductionPlantStorageLocation,omitempty"`
	MRPArea                               null.String  `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	MRPController                         null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ProductionSupervisor                  null.String  `boil:"ProductionSupervisor" json:"ProductionSupervisor,omitempty" toml:"ProductionSupervisor" yaml:"ProductionSupervisor,omitempty"`
	ProductionVersion                     null.Int     `boil:"ProductionVersion" json:"ProductionVersion,omitempty" toml:"ProductionVersion" yaml:"ProductionVersion,omitempty"`
	PlannedOrder                          null.Int     `boil:"PlannedOrder" json:"PlannedOrder,omitempty" toml:"PlannedOrder" yaml:"PlannedOrder,omitempty"`
	OrderID                               null.Int     `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                             null.Int     `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	MinimumLotSizeQuantity                null.Float32 `boil:"MinimumLotSizeQuantity" json:"MinimumLotSizeQuantity,omitempty" toml:"MinimumLotSizeQuantity" yaml:"MinimumLotSizeQuantity,omitempty"`
	StandardLotSizeQuantity               null.Float32 `boil:"StandardLotSizeQuantity" json:"StandardLotSizeQuantity,omitempty" toml:"StandardLotSizeQuantity" yaml:"StandardLotSizeQuantity,omitempty"`
	LotSizeRoundingQuantity               null.Float32 `boil:"LotSizeRoundingQuantity" json:"LotSizeRoundingQuantity,omitempty" toml:"LotSizeRoundingQuantity" yaml:"LotSizeRoundingQuantity,omitempty"`
	MaximumLotSizeQuantity                null.Float32 `boil:"MaximumLotSizeQuantity" json:"MaximumLotSizeQuantity,omitempty" toml:"MaximumLotSizeQuantity" yaml:"MaximumLotSizeQuantity,omitempty"`
	LotSizeIsFixed                        null.Bool    `boil:"LotSizeIsFixed" json:"LotSizeIsFixed,omitempty" toml:"LotSizeIsFixed" yaml:"LotSizeIsFixed,omitempty"`
	ProductionOrderPlannedStartDate       null.String  `boil:"ProductionOrderPlannedStartDate" json:"ProductionOrderPlannedStartDate,omitempty" toml:"ProductionOrderPlannedStartDate" yaml:"ProductionOrderPlannedStartDate,omitempty"`
	ProductionOrderPlannedStartTime       null.String  `boil:"ProductionOrderPlannedStartTime" json:"ProductionOrderPlannedStartTime,omitempty" toml:"ProductionOrderPlannedStartTime" yaml:"ProductionOrderPlannedStartTime,omitempty"`
	ProductionOrderPlannedEndDate         null.String  `boil:"ProductionOrderPlannedEndDate" json:"ProductionOrderPlannedEndDate,omitempty" toml:"ProductionOrderPlannedEndDate" yaml:"ProductionOrderPlannedEndDate,omitempty"`
	ProductionOrderPlannedEndTime         null.String  `boil:"ProductionOrderPlannedEndTime" json:"ProductionOrderPlannedEndTime,omitempty" toml:"ProductionOrderPlannedEndTime" yaml:"ProductionOrderPlannedEndTime,omitempty"`
	ProductionOrderActualReleaseDate      null.String  `boil:"ProductionOrderActualReleaseDate" json:"ProductionOrderActualReleaseDate,omitempty" toml:"ProductionOrderActualReleaseDate" yaml:"ProductionOrderActualReleaseDate,omitempty"`
	ProductionOrderActualReleaseTime      null.String  `boil:"ProductionOrderActualReleaseTime" json:"ProductionOrderActualReleaseTime,omitempty" toml:"ProductionOrderActualReleaseTime" yaml:"ProductionOrderActualReleaseTime,omitempty"`
	ProductionOrderActualStartDate        null.String  `boil:"ProductionOrderActualStartDate" json:"ProductionOrderActualStartDate,omitempty" toml:"ProductionOrderActualStartDate" yaml:"ProductionOrderActualStartDate,omitempty"`
	ProductionOrderActualStartTime        null.String  `boil:"ProductionOrderActualStartTime" json:"ProductionOrderActualStartTime,omitempty" toml:"ProductionOrderActualStartTime" yaml:"ProductionOrderActualStartTime,omitempty"`
	ProductionOrderActualEndDate          null.String  `boil:"ProductionOrderActualEndDate" json:"ProductionOrderActualEndDate,omitempty" toml:"ProductionOrderActualEndDate" yaml:"ProductionOrderActualEndDate,omitempty"`
	ProductionOrderActualEndTime          null.String  `boil:"ProductionOrderActualEndTime" json:"ProductionOrderActualEndTime,omitempty" toml:"ProductionOrderActualEndTime" yaml:"ProductionOrderActualEndTime,omitempty"`
	ProductionUnit                        null.String  `boil:"ProductionUnit" json:"ProductionUnit,omitempty" toml:"ProductionUnit" yaml:"ProductionUnit,omitempty"`
	TotalQuantity                         float32      `boil:"TotalQuantity" json:"TotalQuantity" toml:"TotalQuantity" yaml:"TotalQuantity"`
	PlannedScrapQuantity                  null.Float32 `boil:"PlannedScrapQuantity" json:"PlannedScrapQuantity,omitempty" toml:"PlannedScrapQuantity" yaml:"PlannedScrapQuantity,omitempty"`
	ConfirmedYieldQuantity                null.Float32 `boil:"ConfirmedYieldQuantity" json:"ConfirmedYieldQuantity,omitempty" toml:"ConfirmedYieldQuantity" yaml:"ConfirmedYieldQuantity,omitempty"`
	ProductionOrderItemText               null.String  `boil:"ProductionOrderItemText" json:"ProductionOrderItemText,omitempty" toml:"ProductionOrderItemText" yaml:"ProductionOrderItemText,omitempty"`

	R *dataPlatformProductionOrderItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionOrderItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionOrderItemDatumColumns = struct {
	ProductionOrder                       string
	ProductionOrderItem                   string
	CreationDate                          string
	LastChangeDate                        string
	ItemIsReleased                        string
	ItemIsPartiallyConfirmed              string
	ItemIsConfirmed                       string
	ItemIsLocked                          string
	ItemIsMarkedForDeletion               string
	ProductionOrderHasGeneratedOperations string
	ProductAvailabilityIsNotChecked       string
	PrecedingItem                         string
	FollowingItem                         string
	Product                               string
	ProductionPlant                       string
	ProductionPlantBusinessPartner        string
	ProductionPlantStorageLocation        string
	MRPArea                               string
	MRPController                         string
	ProductionSupervisor                  string
	ProductionVersion                     string
	PlannedOrder                          string
	OrderID                               string
	OrderItem                             string
	MinimumLotSizeQuantity                string
	StandardLotSizeQuantity               string
	LotSizeRoundingQuantity               string
	MaximumLotSizeQuantity                string
	LotSizeIsFixed                        string
	ProductionOrderPlannedStartDate       string
	ProductionOrderPlannedStartTime       string
	ProductionOrderPlannedEndDate         string
	ProductionOrderPlannedEndTime         string
	ProductionOrderActualReleaseDate      string
	ProductionOrderActualReleaseTime      string
	ProductionOrderActualStartDate        string
	ProductionOrderActualStartTime        string
	ProductionOrderActualEndDate          string
	ProductionOrderActualEndTime          string
	ProductionUnit                        string
	TotalQuantity                         string
	PlannedScrapQuantity                  string
	ConfirmedYieldQuantity                string
	ProductionOrderItemText               string
}{
	ProductionOrder:                       "ProductionOrder",
	ProductionOrderItem:                   "ProductionOrderItem",
	CreationDate:                          "CreationDate",
	LastChangeDate:                        "LastChangeDate",
	ItemIsReleased:                        "ItemIsReleased",
	ItemIsPartiallyConfirmed:              "ItemIsPartiallyConfirmed",
	ItemIsConfirmed:                       "ItemIsConfirmed",
	ItemIsLocked:                          "ItemIsLocked",
	ItemIsMarkedForDeletion:               "ItemIsMarkedForDeletion",
	ProductionOrderHasGeneratedOperations: "ProductionOrderHasGeneratedOperations",
	ProductAvailabilityIsNotChecked:       "ProductAvailabilityIsNotChecked",
	PrecedingItem:                         "PrecedingItem",
	FollowingItem:                         "FollowingItem",
	Product:                               "Product",
	ProductionPlant:                       "ProductionPlant",
	ProductionPlantBusinessPartner:        "ProductionPlantBusinessPartner",
	ProductionPlantStorageLocation:        "ProductionPlantStorageLocation",
	MRPArea:                               "MRPArea",
	MRPController:                         "MRPController",
	ProductionSupervisor:                  "ProductionSupervisor",
	ProductionVersion:                     "ProductionVersion",
	PlannedOrder:                          "PlannedOrder",
	OrderID:                               "OrderID",
	OrderItem:                             "OrderItem",
	MinimumLotSizeQuantity:                "MinimumLotSizeQuantity",
	StandardLotSizeQuantity:               "StandardLotSizeQuantity",
	LotSizeRoundingQuantity:               "LotSizeRoundingQuantity",
	MaximumLotSizeQuantity:                "MaximumLotSizeQuantity",
	LotSizeIsFixed:                        "LotSizeIsFixed",
	ProductionOrderPlannedStartDate:       "ProductionOrderPlannedStartDate",
	ProductionOrderPlannedStartTime:       "ProductionOrderPlannedStartTime",
	ProductionOrderPlannedEndDate:         "ProductionOrderPlannedEndDate",
	ProductionOrderPlannedEndTime:         "ProductionOrderPlannedEndTime",
	ProductionOrderActualReleaseDate:      "ProductionOrderActualReleaseDate",
	ProductionOrderActualReleaseTime:      "ProductionOrderActualReleaseTime",
	ProductionOrderActualStartDate:        "ProductionOrderActualStartDate",
	ProductionOrderActualStartTime:        "ProductionOrderActualStartTime",
	ProductionOrderActualEndDate:          "ProductionOrderActualEndDate",
	ProductionOrderActualEndTime:          "ProductionOrderActualEndTime",
	ProductionUnit:                        "ProductionUnit",
	TotalQuantity:                         "TotalQuantity",
	PlannedScrapQuantity:                  "PlannedScrapQuantity",
	ConfirmedYieldQuantity:                "ConfirmedYieldQuantity",
	ProductionOrderItemText:               "ProductionOrderItemText",
}

var DataPlatformProductionOrderItemDatumTableColumns = struct {
	ProductionOrder                       string
	ProductionOrderItem                   string
	CreationDate                          string
	LastChangeDate                        string
	ItemIsReleased                        string
	ItemIsPartiallyConfirmed              string
	ItemIsConfirmed                       string
	ItemIsLocked                          string
	ItemIsMarkedForDeletion               string
	ProductionOrderHasGeneratedOperations string
	ProductAvailabilityIsNotChecked       string
	PrecedingItem                         string
	FollowingItem                         string
	Product                               string
	ProductionPlant                       string
	ProductionPlantBusinessPartner        string
	ProductionPlantStorageLocation        string
	MRPArea                               string
	MRPController                         string
	ProductionSupervisor                  string
	ProductionVersion                     string
	PlannedOrder                          string
	OrderID                               string
	OrderItem                             string
	MinimumLotSizeQuantity                string
	StandardLotSizeQuantity               string
	LotSizeRoundingQuantity               string
	MaximumLotSizeQuantity                string
	LotSizeIsFixed                        string
	ProductionOrderPlannedStartDate       string
	ProductionOrderPlannedStartTime       string
	ProductionOrderPlannedEndDate         string
	ProductionOrderPlannedEndTime         string
	ProductionOrderActualReleaseDate      string
	ProductionOrderActualReleaseTime      string
	ProductionOrderActualStartDate        string
	ProductionOrderActualStartTime        string
	ProductionOrderActualEndDate          string
	ProductionOrderActualEndTime          string
	ProductionUnit                        string
	TotalQuantity                         string
	PlannedScrapQuantity                  string
	ConfirmedYieldQuantity                string
	ProductionOrderItemText               string
}{
	ProductionOrder:                       "data_platform_production_order_item_data.ProductionOrder",
	ProductionOrderItem:                   "data_platform_production_order_item_data.ProductionOrderItem",
	CreationDate:                          "data_platform_production_order_item_data.CreationDate",
	LastChangeDate:                        "data_platform_production_order_item_data.LastChangeDate",
	ItemIsReleased:                        "data_platform_production_order_item_data.ItemIsReleased",
	ItemIsPartiallyConfirmed:              "data_platform_production_order_item_data.ItemIsPartiallyConfirmed",
	ItemIsConfirmed:                       "data_platform_production_order_item_data.ItemIsConfirmed",
	ItemIsLocked:                          "data_platform_production_order_item_data.ItemIsLocked",
	ItemIsMarkedForDeletion:               "data_platform_production_order_item_data.ItemIsMarkedForDeletion",
	ProductionOrderHasGeneratedOperations: "data_platform_production_order_item_data.ProductionOrderHasGeneratedOperations",
	ProductAvailabilityIsNotChecked:       "data_platform_production_order_item_data.ProductAvailabilityIsNotChecked",
	PrecedingItem:                         "data_platform_production_order_item_data.PrecedingItem",
	FollowingItem:                         "data_platform_production_order_item_data.FollowingItem",
	Product:                               "data_platform_production_order_item_data.Product",
	ProductionPlant:                       "data_platform_production_order_item_data.ProductionPlant",
	ProductionPlantBusinessPartner:        "data_platform_production_order_item_data.ProductionPlantBusinessPartner",
	ProductionPlantStorageLocation:        "data_platform_production_order_item_data.ProductionPlantStorageLocation",
	MRPArea:                               "data_platform_production_order_item_data.MRPArea",
	MRPController:                         "data_platform_production_order_item_data.MRPController",
	ProductionSupervisor:                  "data_platform_production_order_item_data.ProductionSupervisor",
	ProductionVersion:                     "data_platform_production_order_item_data.ProductionVersion",
	PlannedOrder:                          "data_platform_production_order_item_data.PlannedOrder",
	OrderID:                               "data_platform_production_order_item_data.OrderID",
	OrderItem:                             "data_platform_production_order_item_data.OrderItem",
	MinimumLotSizeQuantity:                "data_platform_production_order_item_data.MinimumLotSizeQuantity",
	StandardLotSizeQuantity:               "data_platform_production_order_item_data.StandardLotSizeQuantity",
	LotSizeRoundingQuantity:               "data_platform_production_order_item_data.LotSizeRoundingQuantity",
	MaximumLotSizeQuantity:                "data_platform_production_order_item_data.MaximumLotSizeQuantity",
	LotSizeIsFixed:                        "data_platform_production_order_item_data.LotSizeIsFixed",
	ProductionOrderPlannedStartDate:       "data_platform_production_order_item_data.ProductionOrderPlannedStartDate",
	ProductionOrderPlannedStartTime:       "data_platform_production_order_item_data.ProductionOrderPlannedStartTime",
	ProductionOrderPlannedEndDate:         "data_platform_production_order_item_data.ProductionOrderPlannedEndDate",
	ProductionOrderPlannedEndTime:         "data_platform_production_order_item_data.ProductionOrderPlannedEndTime",
	ProductionOrderActualReleaseDate:      "data_platform_production_order_item_data.ProductionOrderActualReleaseDate",
	ProductionOrderActualReleaseTime:      "data_platform_production_order_item_data.ProductionOrderActualReleaseTime",
	ProductionOrderActualStartDate:        "data_platform_production_order_item_data.ProductionOrderActualStartDate",
	ProductionOrderActualStartTime:        "data_platform_production_order_item_data.ProductionOrderActualStartTime",
	ProductionOrderActualEndDate:          "data_platform_production_order_item_data.ProductionOrderActualEndDate",
	ProductionOrderActualEndTime:          "data_platform_production_order_item_data.ProductionOrderActualEndTime",
	ProductionUnit:                        "data_platform_production_order_item_data.ProductionUnit",
	TotalQuantity:                         "data_platform_production_order_item_data.TotalQuantity",
	PlannedScrapQuantity:                  "data_platform_production_order_item_data.PlannedScrapQuantity",
	ConfirmedYieldQuantity:                "data_platform_production_order_item_data.ConfirmedYieldQuantity",
	ProductionOrderItemText:               "data_platform_production_order_item_data.ProductionOrderItemText",
}

// Generated where

var DataPlatformProductionOrderItemDatumWhere = struct {
	ProductionOrder                       whereHelperint
	ProductionOrderItem                   whereHelperint
	CreationDate                          whereHelperstring
	LastChangeDate                        whereHelperstring
	ItemIsReleased                        whereHelpernull_Bool
	ItemIsPartiallyConfirmed              whereHelpernull_Bool
	ItemIsConfirmed                       whereHelpernull_Bool
	ItemIsLocked                          whereHelpernull_Bool
	ItemIsMarkedForDeletion               whereHelpernull_Bool
	ProductionOrderHasGeneratedOperations whereHelpernull_Bool
	ProductAvailabilityIsNotChecked       whereHelpernull_Bool
	PrecedingItem                         whereHelpernull_Int
	FollowingItem                         whereHelpernull_Int
	Product                               whereHelpernull_String
	ProductionPlant                       whereHelperstring
	ProductionPlantBusinessPartner        whereHelperint
	ProductionPlantStorageLocation        whereHelpernull_String
	MRPArea                               whereHelpernull_String
	MRPController                         whereHelpernull_String
	ProductionSupervisor                  whereHelpernull_String
	ProductionVersion                     whereHelpernull_Int
	PlannedOrder                          whereHelpernull_Int
	OrderID                               whereHelpernull_Int
	OrderItem                             whereHelpernull_Int
	MinimumLotSizeQuantity                whereHelpernull_Float32
	StandardLotSizeQuantity               whereHelpernull_Float32
	LotSizeRoundingQuantity               whereHelpernull_Float32
	MaximumLotSizeQuantity                whereHelpernull_Float32
	LotSizeIsFixed                        whereHelpernull_Bool
	ProductionOrderPlannedStartDate       whereHelpernull_String
	ProductionOrderPlannedStartTime       whereHelpernull_String
	ProductionOrderPlannedEndDate         whereHelpernull_String
	ProductionOrderPlannedEndTime         whereHelpernull_String
	ProductionOrderActualReleaseDate      whereHelpernull_String
	ProductionOrderActualReleaseTime      whereHelpernull_String
	ProductionOrderActualStartDate        whereHelpernull_String
	ProductionOrderActualStartTime        whereHelpernull_String
	ProductionOrderActualEndDate          whereHelpernull_String
	ProductionOrderActualEndTime          whereHelpernull_String
	ProductionUnit                        whereHelpernull_String
	TotalQuantity                         whereHelperfloat32
	PlannedScrapQuantity                  whereHelpernull_Float32
	ConfirmedYieldQuantity                whereHelpernull_Float32
	ProductionOrderItemText               whereHelpernull_String
}{
	ProductionOrder:                       whereHelperint{field: "`data_platform_production_order_item_data`.`ProductionOrder`"},
	ProductionOrderItem:                   whereHelperint{field: "`data_platform_production_order_item_data`.`ProductionOrderItem`"},
	CreationDate:                          whereHelperstring{field: "`data_platform_production_order_item_data`.`CreationDate`"},
	LastChangeDate:                        whereHelperstring{field: "`data_platform_production_order_item_data`.`LastChangeDate`"},
	ItemIsReleased:                        whereHelpernull_Bool{field: "`data_platform_production_order_item_data`.`ItemIsReleased`"},
	ItemIsPartiallyConfirmed:              whereHelpernull_Bool{field: "`data_platform_production_order_item_data`.`ItemIsPartiallyConfirmed`"},
	ItemIsConfirmed:                       whereHelpernull_Bool{field: "`data_platform_production_order_item_data`.`ItemIsConfirmed`"},
	ItemIsLocked:                          whereHelpernull_Bool{field: "`data_platform_production_order_item_data`.`ItemIsLocked`"},
	ItemIsMarkedForDeletion:               whereHelpernull_Bool{field: "`data_platform_production_order_item_data`.`ItemIsMarkedForDeletion`"},
	ProductionOrderHasGeneratedOperations: whereHelpernull_Bool{field: "`data_platform_production_order_item_data`.`ProductionOrderHasGeneratedOperations`"},
	ProductAvailabilityIsNotChecked:       whereHelpernull_Bool{field: "`data_platform_production_order_item_data`.`ProductAvailabilityIsNotChecked`"},
	PrecedingItem:                         whereHelpernull_Int{field: "`data_platform_production_order_item_data`.`PrecedingItem`"},
	FollowingItem:                         whereHelpernull_Int{field: "`data_platform_production_order_item_data`.`FollowingItem`"},
	Product:                               whereHelpernull_String{field: "`data_platform_production_order_item_data`.`Product`"},
	ProductionPlant:                       whereHelperstring{field: "`data_platform_production_order_item_data`.`ProductionPlant`"},
	ProductionPlantBusinessPartner:        whereHelperint{field: "`data_platform_production_order_item_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlantStorageLocation:        whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionPlantStorageLocation`"},
	MRPArea:                               whereHelpernull_String{field: "`data_platform_production_order_item_data`.`MRPArea`"},
	MRPController:                         whereHelpernull_String{field: "`data_platform_production_order_item_data`.`MRPController`"},
	ProductionSupervisor:                  whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionSupervisor`"},
	ProductionVersion:                     whereHelpernull_Int{field: "`data_platform_production_order_item_data`.`ProductionVersion`"},
	PlannedOrder:                          whereHelpernull_Int{field: "`data_platform_production_order_item_data`.`PlannedOrder`"},
	OrderID:                               whereHelpernull_Int{field: "`data_platform_production_order_item_data`.`OrderID`"},
	OrderItem:                             whereHelpernull_Int{field: "`data_platform_production_order_item_data`.`OrderItem`"},
	MinimumLotSizeQuantity:                whereHelpernull_Float32{field: "`data_platform_production_order_item_data`.`MinimumLotSizeQuantity`"},
	StandardLotSizeQuantity:               whereHelpernull_Float32{field: "`data_platform_production_order_item_data`.`StandardLotSizeQuantity`"},
	LotSizeRoundingQuantity:               whereHelpernull_Float32{field: "`data_platform_production_order_item_data`.`LotSizeRoundingQuantity`"},
	MaximumLotSizeQuantity:                whereHelpernull_Float32{field: "`data_platform_production_order_item_data`.`MaximumLotSizeQuantity`"},
	LotSizeIsFixed:                        whereHelpernull_Bool{field: "`data_platform_production_order_item_data`.`LotSizeIsFixed`"},
	ProductionOrderPlannedStartDate:       whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionOrderPlannedStartDate`"},
	ProductionOrderPlannedStartTime:       whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionOrderPlannedStartTime`"},
	ProductionOrderPlannedEndDate:         whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionOrderPlannedEndDate`"},
	ProductionOrderPlannedEndTime:         whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionOrderPlannedEndTime`"},
	ProductionOrderActualReleaseDate:      whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionOrderActualReleaseDate`"},
	ProductionOrderActualReleaseTime:      whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionOrderActualReleaseTime`"},
	ProductionOrderActualStartDate:        whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionOrderActualStartDate`"},
	ProductionOrderActualStartTime:        whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionOrderActualStartTime`"},
	ProductionOrderActualEndDate:          whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionOrderActualEndDate`"},
	ProductionOrderActualEndTime:          whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionOrderActualEndTime`"},
	ProductionUnit:                        whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionUnit`"},
	TotalQuantity:                         whereHelperfloat32{field: "`data_platform_production_order_item_data`.`TotalQuantity`"},
	PlannedScrapQuantity:                  whereHelpernull_Float32{field: "`data_platform_production_order_item_data`.`PlannedScrapQuantity`"},
	ConfirmedYieldQuantity:                whereHelpernull_Float32{field: "`data_platform_production_order_item_data`.`ConfirmedYieldQuantity`"},
	ProductionOrderItemText:               whereHelpernull_String{field: "`data_platform_production_order_item_data`.`ProductionOrderItemText`"},
}

// DataPlatformProductionOrderItemDatumRels is where relationship names are stored.
var DataPlatformProductionOrderItemDatumRels = struct {
}{}

// dataPlatformProductionOrderItemDatumR is where relationships are stored.
type dataPlatformProductionOrderItemDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionOrderItemDatumR) NewStruct() *dataPlatformProductionOrderItemDatumR {
	return &dataPlatformProductionOrderItemDatumR{}
}

// dataPlatformProductionOrderItemDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionOrderItemDatumL struct{}

var (
	dataPlatformProductionOrderItemDatumAllColumns            = []string{"ProductionOrder", "ProductionOrderItem", "CreationDate", "LastChangeDate", "ItemIsReleased", "ItemIsPartiallyConfirmed", "ItemIsConfirmed", "ItemIsLocked", "ItemIsMarkedForDeletion", "ProductionOrderHasGeneratedOperations", "ProductAvailabilityIsNotChecked", "PrecedingItem", "FollowingItem", "Product", "ProductionPlant", "ProductionPlantBusinessPartner", "ProductionPlantStorageLocation", "MRPArea", "MRPController", "ProductionSupervisor", "ProductionVersion", "PlannedOrder", "OrderID", "OrderItem", "MinimumLotSizeQuantity", "StandardLotSizeQuantity", "LotSizeRoundingQuantity", "MaximumLotSizeQuantity", "LotSizeIsFixed", "ProductionOrderPlannedStartDate", "ProductionOrderPlannedStartTime", "ProductionOrderPlannedEndDate", "ProductionOrderPlannedEndTime", "ProductionOrderActualReleaseDate", "ProductionOrderActualReleaseTime", "ProductionOrderActualStartDate", "ProductionOrderActualStartTime", "ProductionOrderActualEndDate", "ProductionOrderActualEndTime", "ProductionUnit", "TotalQuantity", "PlannedScrapQuantity", "ConfirmedYieldQuantity", "ProductionOrderItemText"}
	dataPlatformProductionOrderItemDatumColumnsWithoutDefault = []string{"ProductionOrder", "ProductionOrderItem", "CreationDate", "LastChangeDate", "ItemIsReleased", "ItemIsPartiallyConfirmed", "ItemIsConfirmed", "ItemIsLocked", "ItemIsMarkedForDeletion", "ProductionOrderHasGeneratedOperations", "ProductAvailabilityIsNotChecked", "PrecedingItem", "FollowingItem", "Product", "ProductionPlant", "ProductionPlantBusinessPartner", "ProductionPlantStorageLocation", "MRPArea", "MRPController", "ProductionSupervisor", "ProductionVersion", "PlannedOrder", "OrderID", "OrderItem", "MinimumLotSizeQuantity", "StandardLotSizeQuantity", "LotSizeRoundingQuantity", "MaximumLotSizeQuantity", "LotSizeIsFixed", "ProductionOrderPlannedStartDate", "ProductionOrderPlannedStartTime", "ProductionOrderPlannedEndDate", "ProductionOrderPlannedEndTime", "ProductionOrderActualReleaseDate", "ProductionOrderActualReleaseTime", "ProductionOrderActualStartDate", "ProductionOrderActualStartTime", "ProductionOrderActualEndDate", "ProductionOrderActualEndTime", "ProductionUnit", "TotalQuantity", "PlannedScrapQuantity", "ConfirmedYieldQuantity", "ProductionOrderItemText"}
	dataPlatformProductionOrderItemDatumColumnsWithDefault    = []string{}
	dataPlatformProductionOrderItemDatumPrimaryKeyColumns     = []string{"ProductionOrder", "ProductionOrderItem"}
	dataPlatformProductionOrderItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionOrderItemDatumSlice is an alias for a slice of pointers to DataPlatformProductionOrderItemDatum.
	// This should almost always be used instead of []DataPlatformProductionOrderItemDatum.
	DataPlatformProductionOrderItemDatumSlice []*DataPlatformProductionOrderItemDatum

	dataPlatformProductionOrderItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionOrderItemDatumType                 = reflect.TypeOf(&DataPlatformProductionOrderItemDatum{})
	dataPlatformProductionOrderItemDatumMapping              = queries.MakeStructMapping(dataPlatformProductionOrderItemDatumType)
	dataPlatformProductionOrderItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionOrderItemDatumType, dataPlatformProductionOrderItemDatumMapping, dataPlatformProductionOrderItemDatumPrimaryKeyColumns)
	dataPlatformProductionOrderItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionOrderItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionOrderItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionOrderItemDatum record from the query.
func (q dataPlatformProductionOrderItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionOrderItemDatum, error) {
	o := &DataPlatformProductionOrderItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_order_item_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionOrderItemDatum records from the query.
func (q dataPlatformProductionOrderItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionOrderItemDatumSlice, error) {
	var o []*DataPlatformProductionOrderItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionOrderItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionOrderItemDatum records in the query.
func (q dataPlatformProductionOrderItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_order_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionOrderItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_order_item_data exists")
	}

	return count > 0, nil
}

// DataPlatformProductionOrderItemData retrieves all the records using an executor.
func DataPlatformProductionOrderItemData(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_order_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_order_item_data`.*"})
	}

	return dataPlatformProductionOrderItemDatumQuery{q}
}

// FindDataPlatformProductionOrderItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, productionOrder int, productionOrderItem int, selectCols ...string) (*DataPlatformProductionOrderItemDatum, error) {
	dataPlatformProductionOrderItemDatumObj := &DataPlatformProductionOrderItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_order_item_data` where `ProductionOrder`=? AND `ProductionOrderItem`=?", sel,
	)

	q := queries.Raw(query, productionOrder, productionOrderItem)

	err := q.Bind(ctx, exec, dataPlatformProductionOrderItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_order_item_data")
	}

	return dataPlatformProductionOrderItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionOrderItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionOrderItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemDatumInsertCache[key]
	dataPlatformProductionOrderItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionOrderItemDatumAllColumns,
			dataPlatformProductionOrderItemDatumColumnsWithDefault,
			dataPlatformProductionOrderItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemDatumType, dataPlatformProductionOrderItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderItemDatumType, dataPlatformProductionOrderItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_order_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_order_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_order_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_order_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionOrder,
		o.ProductionOrderItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderItemDatumInsertCacheMut.Lock()
		dataPlatformProductionOrderItemDatumInsertCache[key] = cache
		dataPlatformProductionOrderItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionOrderItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionOrderItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionOrderItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemDatumUpdateCache[key]
	dataPlatformProductionOrderItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionOrderItemDatumAllColumns,
			dataPlatformProductionOrderItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_order_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_order_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemDatumType, dataPlatformProductionOrderItemDatumMapping, append(wl, dataPlatformProductionOrderItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_order_item_data row")
	}

	if !cached {
		dataPlatformProductionOrderItemDatumUpdateCacheMut.Lock()
		dataPlatformProductionOrderItemDatumUpdateCache[key] = cache
		dataPlatformProductionOrderItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionOrderItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_order_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionOrderItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionOrderItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionOrderItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionOrderItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionOrderItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionOrderItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemDatumUpsertCache[key]
	dataPlatformProductionOrderItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionOrderItemDatumAllColumns,
			dataPlatformProductionOrderItemDatumColumnsWithDefault,
			dataPlatformProductionOrderItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionOrderItemDatumAllColumns,
			dataPlatformProductionOrderItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_order_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_order_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_order_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemDatumType, dataPlatformProductionOrderItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderItemDatumType, dataPlatformProductionOrderItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_order_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionOrderItemDatumType, dataPlatformProductionOrderItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_order_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderItemDatumUpsertCacheMut.Lock()
		dataPlatformProductionOrderItemDatumUpsertCache[key] = cache
		dataPlatformProductionOrderItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionOrderItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionOrderItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionOrderItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionOrderItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_order_item_data` WHERE `ProductionOrder`=? AND `ProductionOrderItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_order_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionOrderItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionOrderItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_order_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionOrderItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_order_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionOrderItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionOrderItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionOrderItemDatum(ctx, exec, o.ProductionOrder, o.ProductionOrderItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionOrderItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionOrderItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_order_item_data`.* FROM `data_platform_production_order_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionOrderItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionOrderItemDatumExists checks if the DataPlatformProductionOrderItemDatum row exists.
func DataPlatformProductionOrderItemDatumExists(ctx context.Context, exec boil.ContextExecutor, productionOrder int, productionOrderItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_order_item_data` where `ProductionOrder`=? AND `ProductionOrderItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionOrder, productionOrderItem)
	}
	row := exec.QueryRowContext(ctx, sql, productionOrder, productionOrderItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_order_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionOrderItemDatum row exists.
func (o *DataPlatformProductionOrderItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionOrderItemDatumExists(ctx, exec, o.ProductionOrder, o.ProductionOrderItem)
}
