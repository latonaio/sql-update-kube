// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPriceMasterPriceMasterDatum is an object representing the database table.
type DataPlatformPriceMasterPriceMasterDatum struct {
	SupplyChainRelationshipID  int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	Buyer                      int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                     int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	ConditionRecord            int          `boil:"ConditionRecord" json:"ConditionRecord" toml:"ConditionRecord" yaml:"ConditionRecord"`
	ConditionSequentialNumber  int          `boil:"ConditionSequentialNumber" json:"ConditionSequentialNumber" toml:"ConditionSequentialNumber" yaml:"ConditionSequentialNumber"`
	ConditionValidityEndDate   string       `boil:"ConditionValidityEndDate" json:"ConditionValidityEndDate" toml:"ConditionValidityEndDate" yaml:"ConditionValidityEndDate"`
	ConditionValidityStartDate string       `boil:"ConditionValidityStartDate" json:"ConditionValidityStartDate" toml:"ConditionValidityStartDate" yaml:"ConditionValidityStartDate"`
	Product                    string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ConditionType              string       `boil:"ConditionType" json:"ConditionType" toml:"ConditionType" yaml:"ConditionType"`
	CreationDate               null.String  `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate             null.String  `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	ConditionRateValue         null.Float32 `boil:"ConditionRateValue" json:"ConditionRateValue,omitempty" toml:"ConditionRateValue" yaml:"ConditionRateValue,omitempty"`
	ConditionRateValueUnit     null.String  `boil:"ConditionRateValueUnit" json:"ConditionRateValueUnit,omitempty" toml:"ConditionRateValueUnit" yaml:"ConditionRateValueUnit,omitempty"`
	ConditionScaleQuantity     null.Float32 `boil:"ConditionScaleQuantity" json:"ConditionScaleQuantity,omitempty" toml:"ConditionScaleQuantity" yaml:"ConditionScaleQuantity,omitempty"`
	ConditionRateRatio         null.Float32 `boil:"ConditionRateRatio" json:"ConditionRateRatio,omitempty" toml:"ConditionRateRatio" yaml:"ConditionRateRatio,omitempty"`
	ConditionRateRatioUnit     null.String  `boil:"ConditionRateRatioUnit" json:"ConditionRateRatioUnit,omitempty" toml:"ConditionRateRatioUnit" yaml:"ConditionRateRatioUnit,omitempty"`
	ConditionCurrency          null.String  `boil:"ConditionCurrency" json:"ConditionCurrency,omitempty" toml:"ConditionCurrency" yaml:"ConditionCurrency,omitempty"`
	BaseUnit                   null.String  `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	ConditionIsDeleted         null.Bool    `boil:"ConditionIsDeleted" json:"ConditionIsDeleted,omitempty" toml:"ConditionIsDeleted" yaml:"ConditionIsDeleted,omitempty"`

	R *dataPlatformPriceMasterPriceMasterDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPriceMasterPriceMasterDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPriceMasterPriceMasterDatumColumns = struct {
	SupplyChainRelationshipID  string
	Buyer                      string
	Seller                     string
	ConditionRecord            string
	ConditionSequentialNumber  string
	ConditionValidityEndDate   string
	ConditionValidityStartDate string
	Product                    string
	ConditionType              string
	CreationDate               string
	LastChangeDate             string
	ConditionRateValue         string
	ConditionRateValueUnit     string
	ConditionScaleQuantity     string
	ConditionRateRatio         string
	ConditionRateRatioUnit     string
	ConditionCurrency          string
	BaseUnit                   string
	ConditionIsDeleted         string
}{
	SupplyChainRelationshipID:  "SupplyChainRelationshipID",
	Buyer:                      "Buyer",
	Seller:                     "Seller",
	ConditionRecord:            "ConditionRecord",
	ConditionSequentialNumber:  "ConditionSequentialNumber",
	ConditionValidityEndDate:   "ConditionValidityEndDate",
	ConditionValidityStartDate: "ConditionValidityStartDate",
	Product:                    "Product",
	ConditionType:              "ConditionType",
	CreationDate:               "CreationDate",
	LastChangeDate:             "LastChangeDate",
	ConditionRateValue:         "ConditionRateValue",
	ConditionRateValueUnit:     "ConditionRateValueUnit",
	ConditionScaleQuantity:     "ConditionScaleQuantity",
	ConditionRateRatio:         "ConditionRateRatio",
	ConditionRateRatioUnit:     "ConditionRateRatioUnit",
	ConditionCurrency:          "ConditionCurrency",
	BaseUnit:                   "BaseUnit",
	ConditionIsDeleted:         "ConditionIsDeleted",
}

var DataPlatformPriceMasterPriceMasterDatumTableColumns = struct {
	SupplyChainRelationshipID  string
	Buyer                      string
	Seller                     string
	ConditionRecord            string
	ConditionSequentialNumber  string
	ConditionValidityEndDate   string
	ConditionValidityStartDate string
	Product                    string
	ConditionType              string
	CreationDate               string
	LastChangeDate             string
	ConditionRateValue         string
	ConditionRateValueUnit     string
	ConditionScaleQuantity     string
	ConditionRateRatio         string
	ConditionRateRatioUnit     string
	ConditionCurrency          string
	BaseUnit                   string
	ConditionIsDeleted         string
}{
	SupplyChainRelationshipID:  "data_platform_price_master_price_master_data.SupplyChainRelationshipID",
	Buyer:                      "data_platform_price_master_price_master_data.Buyer",
	Seller:                     "data_platform_price_master_price_master_data.Seller",
	ConditionRecord:            "data_platform_price_master_price_master_data.ConditionRecord",
	ConditionSequentialNumber:  "data_platform_price_master_price_master_data.ConditionSequentialNumber",
	ConditionValidityEndDate:   "data_platform_price_master_price_master_data.ConditionValidityEndDate",
	ConditionValidityStartDate: "data_platform_price_master_price_master_data.ConditionValidityStartDate",
	Product:                    "data_platform_price_master_price_master_data.Product",
	ConditionType:              "data_platform_price_master_price_master_data.ConditionType",
	CreationDate:               "data_platform_price_master_price_master_data.CreationDate",
	LastChangeDate:             "data_platform_price_master_price_master_data.LastChangeDate",
	ConditionRateValue:         "data_platform_price_master_price_master_data.ConditionRateValue",
	ConditionRateValueUnit:     "data_platform_price_master_price_master_data.ConditionRateValueUnit",
	ConditionScaleQuantity:     "data_platform_price_master_price_master_data.ConditionScaleQuantity",
	ConditionRateRatio:         "data_platform_price_master_price_master_data.ConditionRateRatio",
	ConditionRateRatioUnit:     "data_platform_price_master_price_master_data.ConditionRateRatioUnit",
	ConditionCurrency:          "data_platform_price_master_price_master_data.ConditionCurrency",
	BaseUnit:                   "data_platform_price_master_price_master_data.BaseUnit",
	ConditionIsDeleted:         "data_platform_price_master_price_master_data.ConditionIsDeleted",
}

// Generated where

var DataPlatformPriceMasterPriceMasterDatumWhere = struct {
	SupplyChainRelationshipID  whereHelperint
	Buyer                      whereHelperint
	Seller                     whereHelperint
	ConditionRecord            whereHelperint
	ConditionSequentialNumber  whereHelperint
	ConditionValidityEndDate   whereHelperstring
	ConditionValidityStartDate whereHelperstring
	Product                    whereHelperstring
	ConditionType              whereHelperstring
	CreationDate               whereHelpernull_String
	LastChangeDate             whereHelpernull_String
	ConditionRateValue         whereHelpernull_Float32
	ConditionRateValueUnit     whereHelpernull_String
	ConditionScaleQuantity     whereHelpernull_Float32
	ConditionRateRatio         whereHelpernull_Float32
	ConditionRateRatioUnit     whereHelpernull_String
	ConditionCurrency          whereHelpernull_String
	BaseUnit                   whereHelpernull_String
	ConditionIsDeleted         whereHelpernull_Bool
}{
	SupplyChainRelationshipID:  whereHelperint{field: "`data_platform_price_master_price_master_data`.`SupplyChainRelationshipID`"},
	Buyer:                      whereHelperint{field: "`data_platform_price_master_price_master_data`.`Buyer`"},
	Seller:                     whereHelperint{field: "`data_platform_price_master_price_master_data`.`Seller`"},
	ConditionRecord:            whereHelperint{field: "`data_platform_price_master_price_master_data`.`ConditionRecord`"},
	ConditionSequentialNumber:  whereHelperint{field: "`data_platform_price_master_price_master_data`.`ConditionSequentialNumber`"},
	ConditionValidityEndDate:   whereHelperstring{field: "`data_platform_price_master_price_master_data`.`ConditionValidityEndDate`"},
	ConditionValidityStartDate: whereHelperstring{field: "`data_platform_price_master_price_master_data`.`ConditionValidityStartDate`"},
	Product:                    whereHelperstring{field: "`data_platform_price_master_price_master_data`.`Product`"},
	ConditionType:              whereHelperstring{field: "`data_platform_price_master_price_master_data`.`ConditionType`"},
	CreationDate:               whereHelpernull_String{field: "`data_platform_price_master_price_master_data`.`CreationDate`"},
	LastChangeDate:             whereHelpernull_String{field: "`data_platform_price_master_price_master_data`.`LastChangeDate`"},
	ConditionRateValue:         whereHelpernull_Float32{field: "`data_platform_price_master_price_master_data`.`ConditionRateValue`"},
	ConditionRateValueUnit:     whereHelpernull_String{field: "`data_platform_price_master_price_master_data`.`ConditionRateValueUnit`"},
	ConditionScaleQuantity:     whereHelpernull_Float32{field: "`data_platform_price_master_price_master_data`.`ConditionScaleQuantity`"},
	ConditionRateRatio:         whereHelpernull_Float32{field: "`data_platform_price_master_price_master_data`.`ConditionRateRatio`"},
	ConditionRateRatioUnit:     whereHelpernull_String{field: "`data_platform_price_master_price_master_data`.`ConditionRateRatioUnit`"},
	ConditionCurrency:          whereHelpernull_String{field: "`data_platform_price_master_price_master_data`.`ConditionCurrency`"},
	BaseUnit:                   whereHelpernull_String{field: "`data_platform_price_master_price_master_data`.`BaseUnit`"},
	ConditionIsDeleted:         whereHelpernull_Bool{field: "`data_platform_price_master_price_master_data`.`ConditionIsDeleted`"},
}

// DataPlatformPriceMasterPriceMasterDatumRels is where relationship names are stored.
var DataPlatformPriceMasterPriceMasterDatumRels = struct {
}{}

// dataPlatformPriceMasterPriceMasterDatumR is where relationships are stored.
type dataPlatformPriceMasterPriceMasterDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformPriceMasterPriceMasterDatumR) NewStruct() *dataPlatformPriceMasterPriceMasterDatumR {
	return &dataPlatformPriceMasterPriceMasterDatumR{}
}

// dataPlatformPriceMasterPriceMasterDatumL is where Load methods for each relationship are stored.
type dataPlatformPriceMasterPriceMasterDatumL struct{}

var (
	dataPlatformPriceMasterPriceMasterDatumAllColumns            = []string{"SupplyChainRelationshipID", "Buyer", "Seller", "ConditionRecord", "ConditionSequentialNumber", "ConditionValidityEndDate", "ConditionValidityStartDate", "Product", "ConditionType", "CreationDate", "LastChangeDate", "ConditionRateValue", "ConditionRateValueUnit", "ConditionScaleQuantity", "ConditionRateRatio", "ConditionRateRatioUnit", "ConditionCurrency", "BaseUnit", "ConditionIsDeleted"}
	dataPlatformPriceMasterPriceMasterDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "Buyer", "Seller", "ConditionRecord", "ConditionSequentialNumber", "ConditionValidityEndDate", "ConditionValidityStartDate", "Product", "ConditionType", "CreationDate", "LastChangeDate", "ConditionRateValue", "ConditionRateValueUnit", "ConditionScaleQuantity", "ConditionRateRatio", "ConditionRateRatioUnit", "ConditionCurrency", "BaseUnit", "ConditionIsDeleted"}
	dataPlatformPriceMasterPriceMasterDatumColumnsWithDefault    = []string{}
	dataPlatformPriceMasterPriceMasterDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "Buyer", "Seller", "ConditionRecord", "ConditionSequentialNumber", "ConditionValidityEndDate", "ConditionValidityStartDate", "Product"}
	dataPlatformPriceMasterPriceMasterDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPriceMasterPriceMasterDatumSlice is an alias for a slice of pointers to DataPlatformPriceMasterPriceMasterDatum.
	// This should almost always be used instead of []DataPlatformPriceMasterPriceMasterDatum.
	DataPlatformPriceMasterPriceMasterDatumSlice []*DataPlatformPriceMasterPriceMasterDatum

	dataPlatformPriceMasterPriceMasterDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPriceMasterPriceMasterDatumType                 = reflect.TypeOf(&DataPlatformPriceMasterPriceMasterDatum{})
	dataPlatformPriceMasterPriceMasterDatumMapping              = queries.MakeStructMapping(dataPlatformPriceMasterPriceMasterDatumType)
	dataPlatformPriceMasterPriceMasterDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPriceMasterPriceMasterDatumType, dataPlatformPriceMasterPriceMasterDatumMapping, dataPlatformPriceMasterPriceMasterDatumPrimaryKeyColumns)
	dataPlatformPriceMasterPriceMasterDatumInsertCacheMut       sync.RWMutex
	dataPlatformPriceMasterPriceMasterDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPriceMasterPriceMasterDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPriceMasterPriceMasterDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPriceMasterPriceMasterDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPriceMasterPriceMasterDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPriceMasterPriceMasterDatum record from the query.
func (q dataPlatformPriceMasterPriceMasterDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPriceMasterPriceMasterDatum, error) {
	o := &DataPlatformPriceMasterPriceMasterDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_price_master_price_master_data")
	}

	return o, nil
}

// All returns all DataPlatformPriceMasterPriceMasterDatum records from the query.
func (q dataPlatformPriceMasterPriceMasterDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPriceMasterPriceMasterDatumSlice, error) {
	var o []*DataPlatformPriceMasterPriceMasterDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPriceMasterPriceMasterDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPriceMasterPriceMasterDatum records in the query.
func (q dataPlatformPriceMasterPriceMasterDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_price_master_price_master_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPriceMasterPriceMasterDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_price_master_price_master_data exists")
	}

	return count > 0, nil
}

// DataPlatformPriceMasterPriceMasterData retrieves all the records using an executor.
func DataPlatformPriceMasterPriceMasterData(mods ...qm.QueryMod) dataPlatformPriceMasterPriceMasterDatumQuery {
	mods = append(mods, qm.From("`data_platform_price_master_price_master_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_price_master_price_master_data`.*"})
	}

	return dataPlatformPriceMasterPriceMasterDatumQuery{q}
}

// FindDataPlatformPriceMasterPriceMasterDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPriceMasterPriceMasterDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, buyer int, seller int, conditionRecord int, conditionSequentialNumber int, conditionValidityEndDate string, conditionValidityStartDate string, product string, selectCols ...string) (*DataPlatformPriceMasterPriceMasterDatum, error) {
	dataPlatformPriceMasterPriceMasterDatumObj := &DataPlatformPriceMasterPriceMasterDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_price_master_price_master_data` where `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=? AND `ConditionRecord`=? AND `ConditionSequentialNumber`=? AND `ConditionValidityEndDate`=? AND `ConditionValidityStartDate`=? AND `Product`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, buyer, seller, conditionRecord, conditionSequentialNumber, conditionValidityEndDate, conditionValidityStartDate, product)

	err := q.Bind(ctx, exec, dataPlatformPriceMasterPriceMasterDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_price_master_price_master_data")
	}

	return dataPlatformPriceMasterPriceMasterDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPriceMasterPriceMasterDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_price_master_price_master_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPriceMasterPriceMasterDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPriceMasterPriceMasterDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPriceMasterPriceMasterDatumInsertCache[key]
	dataPlatformPriceMasterPriceMasterDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPriceMasterPriceMasterDatumAllColumns,
			dataPlatformPriceMasterPriceMasterDatumColumnsWithDefault,
			dataPlatformPriceMasterPriceMasterDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPriceMasterPriceMasterDatumType, dataPlatformPriceMasterPriceMasterDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPriceMasterPriceMasterDatumType, dataPlatformPriceMasterPriceMasterDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_price_master_price_master_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_price_master_price_master_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_price_master_price_master_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPriceMasterPriceMasterDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_price_master_price_master_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.Buyer,
		o.Seller,
		o.ConditionRecord,
		o.ConditionSequentialNumber,
		o.ConditionValidityEndDate,
		o.ConditionValidityStartDate,
		o.Product,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_price_master_price_master_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPriceMasterPriceMasterDatumInsertCacheMut.Lock()
		dataPlatformPriceMasterPriceMasterDatumInsertCache[key] = cache
		dataPlatformPriceMasterPriceMasterDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPriceMasterPriceMasterDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPriceMasterPriceMasterDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPriceMasterPriceMasterDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPriceMasterPriceMasterDatumUpdateCache[key]
	dataPlatformPriceMasterPriceMasterDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPriceMasterPriceMasterDatumAllColumns,
			dataPlatformPriceMasterPriceMasterDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_price_master_price_master_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_price_master_price_master_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPriceMasterPriceMasterDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPriceMasterPriceMasterDatumType, dataPlatformPriceMasterPriceMasterDatumMapping, append(wl, dataPlatformPriceMasterPriceMasterDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_price_master_price_master_data row")
	}

	if !cached {
		dataPlatformPriceMasterPriceMasterDatumUpdateCacheMut.Lock()
		dataPlatformPriceMasterPriceMasterDatumUpdateCache[key] = cache
		dataPlatformPriceMasterPriceMasterDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPriceMasterPriceMasterDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_price_master_price_master_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPriceMasterPriceMasterDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPriceMasterPriceMasterDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_price_master_price_master_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPriceMasterPriceMasterDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPriceMasterPriceMasterDatum slice")
	}

	return nil
}

var mySQLDataPlatformPriceMasterPriceMasterDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPriceMasterPriceMasterDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_price_master_price_master_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPriceMasterPriceMasterDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPriceMasterPriceMasterDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPriceMasterPriceMasterDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPriceMasterPriceMasterDatumUpsertCache[key]
	dataPlatformPriceMasterPriceMasterDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPriceMasterPriceMasterDatumAllColumns,
			dataPlatformPriceMasterPriceMasterDatumColumnsWithDefault,
			dataPlatformPriceMasterPriceMasterDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPriceMasterPriceMasterDatumAllColumns,
			dataPlatformPriceMasterPriceMasterDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_price_master_price_master_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_price_master_price_master_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_price_master_price_master_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPriceMasterPriceMasterDatumType, dataPlatformPriceMasterPriceMasterDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPriceMasterPriceMasterDatumType, dataPlatformPriceMasterPriceMasterDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_price_master_price_master_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPriceMasterPriceMasterDatumType, dataPlatformPriceMasterPriceMasterDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_price_master_price_master_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_price_master_price_master_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPriceMasterPriceMasterDatumUpsertCacheMut.Lock()
		dataPlatformPriceMasterPriceMasterDatumUpsertCache[key] = cache
		dataPlatformPriceMasterPriceMasterDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPriceMasterPriceMasterDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPriceMasterPriceMasterDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPriceMasterPriceMasterDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPriceMasterPriceMasterDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_price_master_price_master_data` WHERE `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=? AND `ConditionRecord`=? AND `ConditionSequentialNumber`=? AND `ConditionValidityEndDate`=? AND `ConditionValidityStartDate`=? AND `Product`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_price_master_price_master_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPriceMasterPriceMasterDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPriceMasterPriceMasterDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_price_master_price_master_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPriceMasterPriceMasterDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPriceMasterPriceMasterDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_price_master_price_master_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPriceMasterPriceMasterDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPriceMasterPriceMasterDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPriceMasterPriceMasterDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPriceMasterPriceMasterDatum(ctx, exec, o.SupplyChainRelationshipID, o.Buyer, o.Seller, o.ConditionRecord, o.ConditionSequentialNumber, o.ConditionValidityEndDate, o.ConditionValidityStartDate, o.Product)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPriceMasterPriceMasterDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPriceMasterPriceMasterDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPriceMasterPriceMasterDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_price_master_price_master_data`.* FROM `data_platform_price_master_price_master_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPriceMasterPriceMasterDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPriceMasterPriceMasterDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPriceMasterPriceMasterDatumExists checks if the DataPlatformPriceMasterPriceMasterDatum row exists.
func DataPlatformPriceMasterPriceMasterDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, buyer int, seller int, conditionRecord int, conditionSequentialNumber int, conditionValidityEndDate string, conditionValidityStartDate string, product string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_price_master_price_master_data` where `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=? AND `ConditionRecord`=? AND `ConditionSequentialNumber`=? AND `ConditionValidityEndDate`=? AND `ConditionValidityStartDate`=? AND `Product`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, buyer, seller, conditionRecord, conditionSequentialNumber, conditionValidityEndDate, conditionValidityStartDate, product)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, buyer, seller, conditionRecord, conditionSequentialNumber, conditionValidityEndDate, conditionValidityStartDate, product)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_price_master_price_master_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPriceMasterPriceMasterDatum row exists.
func (o *DataPlatformPriceMasterPriceMasterDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPriceMasterPriceMasterDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.Buyer, o.Seller, o.ConditionRecord, o.ConditionSequentialNumber, o.ConditionValidityEndDate, o.ConditionValidityStartDate, o.Product)
}
