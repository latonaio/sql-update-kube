// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerSupplierPartnerFunctionDatum is an object representing the database table.
type DataPlatformBusinessPartnerSupplierPartnerFunctionDatum struct {
	BusinessPartner                int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Supplier                       int         `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
	PartnerCounter                 int         `boil:"PartnerCounter" json:"PartnerCounter" toml:"PartnerCounter" yaml:"PartnerCounter"`
	PartnerFunction                null.String `boil:"PartnerFunction" json:"PartnerFunction,omitempty" toml:"PartnerFunction" yaml:"PartnerFunction,omitempty"`
	PartnerFunctionBusinessPartner null.Int    `boil:"PartnerFunctionBusinessPartner" json:"PartnerFunctionBusinessPartner,omitempty" toml:"PartnerFunctionBusinessPartner" yaml:"PartnerFunctionBusinessPartner,omitempty"`
	DefaultPartner                 null.Bool   `boil:"DefaultPartner" json:"DefaultPartner,omitempty" toml:"DefaultPartner" yaml:"DefaultPartner,omitempty"`
	CreationDate                   null.Time   `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	IsMarkedForDeletion            null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerSupplierPartnerFunctionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerSupplierPartnerFunctionDatumColumns = struct {
	BusinessPartner                string
	Supplier                       string
	PartnerCounter                 string
	PartnerFunction                string
	PartnerFunctionBusinessPartner string
	DefaultPartner                 string
	CreationDate                   string
	IsMarkedForDeletion            string
}{
	BusinessPartner:                "BusinessPartner",
	Supplier:                       "Supplier",
	PartnerCounter:                 "PartnerCounter",
	PartnerFunction:                "PartnerFunction",
	PartnerFunctionBusinessPartner: "PartnerFunctionBusinessPartner",
	DefaultPartner:                 "DefaultPartner",
	CreationDate:                   "CreationDate",
	IsMarkedForDeletion:            "IsMarkedForDeletion",
}

var DataPlatformBusinessPartnerSupplierPartnerFunctionDatumTableColumns = struct {
	BusinessPartner                string
	Supplier                       string
	PartnerCounter                 string
	PartnerFunction                string
	PartnerFunctionBusinessPartner string
	DefaultPartner                 string
	CreationDate                   string
	IsMarkedForDeletion            string
}{
	BusinessPartner:                "data_platform_business_partner_supplier_partner_function_data.BusinessPartner",
	Supplier:                       "data_platform_business_partner_supplier_partner_function_data.Supplier",
	PartnerCounter:                 "data_platform_business_partner_supplier_partner_function_data.PartnerCounter",
	PartnerFunction:                "data_platform_business_partner_supplier_partner_function_data.PartnerFunction",
	PartnerFunctionBusinessPartner: "data_platform_business_partner_supplier_partner_function_data.PartnerFunctionBusinessPartner",
	DefaultPartner:                 "data_platform_business_partner_supplier_partner_function_data.DefaultPartner",
	CreationDate:                   "data_platform_business_partner_supplier_partner_function_data.CreationDate",
	IsMarkedForDeletion:            "data_platform_business_partner_supplier_partner_function_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformBusinessPartnerSupplierPartnerFunctionDatumWhere = struct {
	BusinessPartner                whereHelperint
	Supplier                       whereHelperint
	PartnerCounter                 whereHelperint
	PartnerFunction                whereHelpernull_String
	PartnerFunctionBusinessPartner whereHelpernull_Int
	DefaultPartner                 whereHelpernull_Bool
	CreationDate                   whereHelpernull_Time
	IsMarkedForDeletion            whereHelpernull_Bool
}{
	BusinessPartner:                whereHelperint{field: "`data_platform_business_partner_supplier_partner_function_data`.`BusinessPartner`"},
	Supplier:                       whereHelperint{field: "`data_platform_business_partner_supplier_partner_function_data`.`Supplier`"},
	PartnerCounter:                 whereHelperint{field: "`data_platform_business_partner_supplier_partner_function_data`.`PartnerCounter`"},
	PartnerFunction:                whereHelpernull_String{field: "`data_platform_business_partner_supplier_partner_function_data`.`PartnerFunction`"},
	PartnerFunctionBusinessPartner: whereHelpernull_Int{field: "`data_platform_business_partner_supplier_partner_function_data`.`PartnerFunctionBusinessPartner`"},
	DefaultPartner:                 whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_partner_function_data`.`DefaultPartner`"},
	CreationDate:                   whereHelpernull_Time{field: "`data_platform_business_partner_supplier_partner_function_data`.`CreationDate`"},
	IsMarkedForDeletion:            whereHelpernull_Bool{field: "`data_platform_business_partner_supplier_partner_function_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBusinessPartnerSupplierPartnerFunctionDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerSupplierPartnerFunctionDatumRels = struct {
	BusinessPartnerDataPlatformBusinessPartnerSupplierDatum               string
	PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum string
	PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum        string
	BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData    string
}{
	BusinessPartnerDataPlatformBusinessPartnerSupplierDatum:               "BusinessPartnerDataPlatformBusinessPartnerSupplierDatum",
	PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: "PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum:        "PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum",
	BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData:    "BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData",
}

// dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR is where relationships are stored.
type dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR struct {
	BusinessPartnerDataPlatformBusinessPartnerSupplierDatum               *DataPlatformBusinessPartnerSupplierDatum                 `boil:"BusinessPartnerDataPlatformBusinessPartnerSupplierDatum" json:"BusinessPartnerDataPlatformBusinessPartnerSupplierDatum" toml:"BusinessPartnerDataPlatformBusinessPartnerSupplierDatum" yaml:"BusinessPartnerDataPlatformBusinessPartnerSupplierDatum"`
	PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum                  `boil:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum        *DataPlatformPartnerFunctionPartnerFunctionDatum          `boil:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum" json:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum" toml:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum" yaml:"PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum"`
	BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData    DataPlatformBusinessPartnerSupplierPartnerPlantDatumSlice `boil:"BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData" json:"BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData" toml:"BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData" yaml:"BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR) NewStruct() *dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR {
	return &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
}

func (r *dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR) GetBusinessPartnerDataPlatformBusinessPartnerSupplierDatum() *DataPlatformBusinessPartnerSupplierDatum {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum
}

func (r *dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR) GetPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR) GetPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum() *DataPlatformPartnerFunctionPartnerFunctionDatum {
	if r == nil {
		return nil
	}
	return r.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum
}

func (r *dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR) GetBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData() DataPlatformBusinessPartnerSupplierPartnerPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData
}

// dataPlatformBusinessPartnerSupplierPartnerFunctionDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerSupplierPartnerFunctionDatumL struct{}

var (
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAllColumns            = []string{"BusinessPartner", "Supplier", "PartnerCounter", "PartnerFunction", "PartnerFunctionBusinessPartner", "DefaultPartner", "CreationDate", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumColumnsWithoutDefault = []string{"BusinessPartner", "Supplier", "PartnerCounter", "PartnerFunction", "PartnerFunctionBusinessPartner", "DefaultPartner", "CreationDate", "IsMarkedForDeletion"}
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns     = []string{"BusinessPartner", "Supplier", "PartnerCounter"}
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerSupplierPartnerFunctionDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerSupplierPartnerFunctionDatum.
	DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice []*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum
	// DataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook is the signature for custom DataPlatformBusinessPartnerSupplierPartnerFunctionDatum hook methods
	DataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) error

	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerSupplierPartnerFunctionDatum{})
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumType)
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumType, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumMapping, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks []DataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook

var dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeInsertHooks []DataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook
var dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterInsertHooks []DataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook

var dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeUpdateHooks []DataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook
var dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterUpdateHooks []DataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook

var dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeDeleteHooks []DataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook
var dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterDeleteHooks []DataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook

var dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeUpsertHooks []DataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook
var dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterUpsertHooks []DataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook registers your hook function for all future operations.
func AddDataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook(hookPoint boil.HookPoint, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook DataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks = append(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeInsertHooks = append(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeInsertHooks, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.AfterInsertHook:
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterInsertHooks = append(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterInsertHooks, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeUpdateHooks = append(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeUpdateHooks, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterUpdateHooks = append(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterUpdateHooks, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeDeleteHooks = append(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeDeleteHooks, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterDeleteHooks = append(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterDeleteHooks, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeUpsertHooks = append(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeUpsertHooks, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterUpsertHooks = append(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterUpsertHooks, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumHook)
	}
}

// One returns a single dataPlatformBusinessPartnerSupplierPartnerFunctionDatum record from the query.
func (q dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum, error) {
	o := &DataPlatformBusinessPartnerSupplierPartnerFunctionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_supplier_partner_function_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerSupplierPartnerFunctionDatum records from the query.
func (q dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerSupplierPartnerFunctionDatum slice")
	}

	if len(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerSupplierPartnerFunctionDatum records in the query.
func (q dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_supplier_partner_function_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_supplier_partner_function_data exists")
	}

	return count > 0, nil
}

// BusinessPartnerDataPlatformBusinessPartnerSupplierDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) BusinessPartnerDataPlatformBusinessPartnerSupplierDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.BusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerSupplierData(queryMods...)
}

// PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.PartnerFunctionBusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum pointed to by the foreign key.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(mods ...qm.QueryMod) dataPlatformPartnerFunctionPartnerFunctionDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PartnerFunction` = ?", o.PartnerFunction),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPartnerFunctionPartnerFunctionData(queryMods...)
}

// BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData retrieves all the data_platform_business_partner_supplier_partner_plant_datum's DataPlatformBusinessPartnerSupplierPartnerPlantData with an executor via BusinessPartner column.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierPartnerPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_business_partner_supplier_partner_plant_data`.`BusinessPartner`=?", o.BusinessPartner),
	)

	return DataPlatformBusinessPartnerSupplierPartnerPlantData(queryMods...)
}

// LoadBusinessPartnerDataPlatformBusinessPartnerSupplierDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerSupplierPartnerFunctionDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerSupplierDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum
	var object *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum.(*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum.(*[]*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
		}
		args = append(args, object.BusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_supplier_data`),
		qm.WhereIn(`data_platform_business_partner_supplier_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerSupplierDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerSupplierDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerSupplierDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_supplier_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_supplier_data")
	}

	if len(dataPlatformBusinessPartnerSupplierDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerSupplierDatumR{}
		}
		foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerSupplierDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData, local)
				break
			}
		}
	}

	return nil
}

// LoadPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerSupplierPartnerFunctionDatumL) LoadPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum
	var object *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum.(*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum.(*[]*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
		}
		if !queries.IsNil(object.PartnerFunctionBusinessPartner) {
			args = append(args, object.PartnerFunctionBusinessPartner)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PartnerFunctionBusinessPartner) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PartnerFunctionBusinessPartner) {
				args = append(args, obj.PartnerFunctionBusinessPartner)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(dataPlatformBusinessPartnerGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
		}
		foreign.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(foreign.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PartnerFunctionBusinessPartner, foreign.BusinessPartner) {
				local.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerGeneralDatumR{}
				}
				foreign.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(foreign.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData, local)
				break
			}
		}
	}

	return nil
}

// LoadPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBusinessPartnerSupplierPartnerFunctionDatumL) LoadPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum
	var object *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum.(*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum.(*[]*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
		}
		if !queries.IsNil(object.PartnerFunction) {
			args = append(args, object.PartnerFunction)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PartnerFunction) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PartnerFunction) {
				args = append(args, obj.PartnerFunction)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_partner_function_partner_function_data`),
		qm.WhereIn(`data_platform_partner_function_partner_function_data.PartnerFunction in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPartnerFunctionPartnerFunctionDatum")
	}

	var resultSlice []*DataPlatformPartnerFunctionPartnerFunctionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPartnerFunctionPartnerFunctionDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_partner_function_partner_function_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_partner_function_partner_function_data")
	}

	if len(dataPlatformPartnerFunctionPartnerFunctionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = foreign
		if foreign.R == nil {
			foreign.R = &dataPlatformPartnerFunctionPartnerFunctionDatumR{}
		}
		foreign.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(foreign.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PartnerFunction, foreign.PartnerFunction) {
				local.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = foreign
				if foreign.R == nil {
					foreign.R = &dataPlatformPartnerFunctionPartnerFunctionDatumR{}
				}
				foreign.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(foreign.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData, local)
				break
			}
		}
	}

	return nil
}

// LoadBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBusinessPartnerSupplierPartnerFunctionDatumL) LoadBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum
	var object *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum.(*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
		if !ok {
			object = new(DataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum.(*[]*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBusinessPartnerSupplierPartnerFunctionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
		}
		args = append(args, object.BusinessPartner)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{}
			}

			for _, a := range args {
				if a == obj.BusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.BusinessPartner)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_supplier_partner_plant_data`),
		qm.WhereIn(`data_platform_business_partner_supplier_partner_plant_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_business_partner_supplier_partner_plant_data")
	}

	var resultSlice []*DataPlatformBusinessPartnerSupplierPartnerPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_business_partner_supplier_partner_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_business_partner_supplier_partner_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_supplier_partner_plant_data")
	}

	if len(dataPlatformBusinessPartnerSupplierPartnerPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformBusinessPartnerSupplierPartnerPlantDatumR{}
			}
			foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BusinessPartner == foreign.BusinessPartner {
				local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData = append(local.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformBusinessPartnerSupplierPartnerPlantDatumR{}
				}
				foreign.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum = local
				break
			}
		}
	}

	return nil
}

// SetBusinessPartnerDataPlatformBusinessPartnerSupplierDatum of the dataPlatformBusinessPartnerSupplierPartnerFunctionDatum to the related item.
// Sets o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum to related.
// Adds o to related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) SetBusinessPartnerDataPlatformBusinessPartnerSupplierDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerSupplierDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_supplier_partner_function_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Supplier, o.PartnerCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierDatum: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerSupplierDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData: DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice{o},
		}
	} else {
		related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData, o)
	}

	return nil
}

// SetPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformBusinessPartnerSupplierPartnerFunctionDatum to the related item.
// Sets o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
// Adds o to related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) SetPartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_supplier_partner_function_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PartnerFunctionBusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.BusinessPartner, o.Supplier, o.PartnerCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PartnerFunctionBusinessPartner, related.BusinessPartner)
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{
			PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformBusinessPartnerGeneralDatumR{
			PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData: DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice{o},
		}
	} else {
		related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData, o)
	}

	return nil
}

// RemovePartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum relationship.
// Sets o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) RemovePartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error

	queries.SetScanner(&o.PartnerFunctionBusinessPartner, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("PartnerFunctionBusinessPartner")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData {
		if queries.Equal(o.PartnerFunctionBusinessPartner, ri.PartnerFunctionBusinessPartner) {
			continue
		}

		ln := len(related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData)
		if ln > 1 && i < ln-1 {
			related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData[i] = related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData[ln-1]
		}
		related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData = related.R.PartnerFunctionBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionData[:ln-1]
		break
	}
	return nil
}

// SetPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum of the dataPlatformBusinessPartnerSupplierPartnerFunctionDatum to the related item.
// Sets o.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum to related.
// Adds o to related.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) SetPartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPartnerFunctionPartnerFunctionDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_business_partner_supplier_partner_function_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PartnerFunction"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PartnerFunction, o.BusinessPartner, o.Supplier, o.PartnerCounter}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PartnerFunction, related.PartnerFunction)
	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{
			PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum: related,
		}
	} else {
		o.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = related
	}

	if related.R == nil {
		related.R = &dataPlatformPartnerFunctionPartnerFunctionDatumR{
			PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData: DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice{o},
		}
	} else {
		related.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData = append(related.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData, o)
	}

	return nil
}

// RemovePartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum relationship.
// Sets o.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) RemovePartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPartnerFunctionPartnerFunctionDatum) error {
	var err error

	queries.SetScanner(&o.PartnerFunction, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("PartnerFunction")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PartnerFunctionDataPlatformPartnerFunctionPartnerFunctionDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData {
		if queries.Equal(o.PartnerFunction, ri.PartnerFunction) {
			continue
		}

		ln := len(related.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData)
		if ln > 1 && i < ln-1 {
			related.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData[i] = related.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData[ln-1]
		}
		related.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData = related.R.PartnerFunctionDataPlatformBusinessPartnerSupplierPartnerFunctionData[:ln-1]
		break
	}
	return nil
}

// AddBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData adds the given related objects to the existing relationships
// of the data_platform_business_partner_supplier_partner_function_datum, optionally inserting them as new records.
// Appends related to o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData.
// Sets related.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum appropriately.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) AddBusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBusinessPartnerSupplierPartnerPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BusinessPartner = o.BusinessPartner
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_business_partner_supplier_partner_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BusinessPartner"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierPartnerPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BusinessPartner, rel.BusinessPartner, rel.Supplier, rel.PartnerCounter, rel.PartnerFunction, rel.PartnerFunctionBusinessPartner, rel.PlantCounter}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BusinessPartner = o.BusinessPartner
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBusinessPartnerSupplierPartnerFunctionDatumR{
			BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData: related,
		}
	} else {
		o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData = append(o.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerPlantData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformBusinessPartnerSupplierPartnerPlantDatumR{
				BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum: o,
			}
		} else {
			rel.R.BusinessPartnerDataPlatformBusinessPartnerSupplierPartnerFunctionDatum = o
		}
	}
	return nil
}

// DataPlatformBusinessPartnerSupplierPartnerFunctionData retrieves all the records using an executor.
func DataPlatformBusinessPartnerSupplierPartnerFunctionData(mods ...qm.QueryMod) dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_supplier_partner_function_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_supplier_partner_function_data`.*"})
	}

	return dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery{q}
}

// FindDataPlatformBusinessPartnerSupplierPartnerFunctionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerSupplierPartnerFunctionDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, supplier int, partnerCounter int, selectCols ...string) (*DataPlatformBusinessPartnerSupplierPartnerFunctionDatum, error) {
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumObj := &DataPlatformBusinessPartnerSupplierPartnerFunctionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_supplier_partner_function_data` where `BusinessPartner`=? AND `Supplier`=? AND `PartnerCounter`=?", sel,
	)

	q := queries.Raw(query, businessPartner, supplier, partnerCounter)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_supplier_partner_function_data")
	}

	if err = dataPlatformBusinessPartnerSupplierPartnerFunctionDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformBusinessPartnerSupplierPartnerFunctionDatumObj, err
	}

	return dataPlatformBusinessPartnerSupplierPartnerFunctionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_supplier_partner_function_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerSupplierPartnerFunctionDatumInsertCache[key]
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAllColumns,
			dataPlatformBusinessPartnerSupplierPartnerFunctionDatumColumnsWithDefault,
			dataPlatformBusinessPartnerSupplierPartnerFunctionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumType, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumType, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_supplier_partner_function_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_supplier_partner_function_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_supplier_partner_function_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_supplier_partner_function_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.Supplier,
		o.PartnerCounter,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_supplier_partner_function_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformBusinessPartnerSupplierPartnerFunctionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpdateCache[key]
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAllColumns,
			dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_business_partner_supplier_partner_function_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_supplier_partner_function_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumType, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumMapping, append(wl, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_business_partner_supplier_partner_function_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_business_partner_supplier_partner_function_data")
	}

	if !cached {
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_business_partner_supplier_partner_function_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_business_partner_supplier_partner_function_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_supplier_partner_function_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerSupplierPartnerFunctionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformBusinessPartnerSupplierPartnerFunctionDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformBusinessPartnerSupplierPartnerFunctionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_supplier_partner_function_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerSupplierPartnerFunctionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpsertCache[key]
	dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAllColumns,
			dataPlatformBusinessPartnerSupplierPartnerFunctionDatumColumnsWithDefault,
			dataPlatformBusinessPartnerSupplierPartnerFunctionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAllColumns,
			dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_supplier_partner_function_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_supplier_partner_function_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_supplier_partner_function_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumType, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumType, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_supplier_partner_function_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumType, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_supplier_partner_function_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_supplier_partner_function_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerSupplierPartnerFunctionDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformBusinessPartnerSupplierPartnerFunctionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformBusinessPartnerSupplierPartnerFunctionDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_supplier_partner_function_data` WHERE `BusinessPartner`=? AND `Supplier`=? AND `PartnerCounter`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_business_partner_supplier_partner_function_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_business_partner_supplier_partner_function_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformBusinessPartnerSupplierPartnerFunctionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_supplier_partner_function_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_supplier_partner_function_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_supplier_partner_function_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerSupplierPartnerFunctionDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_business_partner_supplier_partner_function_data")
	}

	if len(dataPlatformBusinessPartnerSupplierPartnerFunctionDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerSupplierPartnerFunctionDatum(ctx, exec, o.BusinessPartner, o.Supplier, o.PartnerCounter)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_supplier_partner_function_data`.* FROM `data_platform_business_partner_supplier_partner_function_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerSupplierPartnerFunctionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerSupplierPartnerFunctionDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerSupplierPartnerFunctionDatumExists checks if the DataPlatformBusinessPartnerSupplierPartnerFunctionDatum row exists.
func DataPlatformBusinessPartnerSupplierPartnerFunctionDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, supplier int, partnerCounter int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_supplier_partner_function_data` where `BusinessPartner`=? AND `Supplier`=? AND `PartnerCounter`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, supplier, partnerCounter)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, supplier, partnerCounter)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_supplier_partner_function_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerSupplierPartnerFunctionDatum row exists.
func (o *DataPlatformBusinessPartnerSupplierPartnerFunctionDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerSupplierPartnerFunctionDatumExists(ctx, exec, o.BusinessPartner, o.Supplier, o.PartnerCounter)
}
