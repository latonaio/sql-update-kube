// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformSCRGeneralDocDatum is an object representing the database table.
type DataPlatformSCRGeneralDocDatum struct {
	SupplyChainRelationshipID int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	Buyer                     int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                    int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DocType                   string      `boil:"DocType" json:"DocType" toml:"DocType" yaml:"DocType"`
	DocVersionID              int         `boil:"DocVersionID" json:"DocVersionID" toml:"DocVersionID" yaml:"DocVersionID"`
	DocID                     string      `boil:"DocID" json:"DocID" toml:"DocID" yaml:"DocID"`
	FileExtension             string      `boil:"FileExtension" json:"FileExtension" toml:"FileExtension" yaml:"FileExtension"`
	FileName                  null.String `boil:"FileName" json:"FileName,omitempty" toml:"FileName" yaml:"FileName,omitempty"`
	FilePath                  null.String `boil:"FilePath" json:"FilePath,omitempty" toml:"FilePath" yaml:"FilePath,omitempty"`
	DocIssuerBusinessPartner  null.Int    `boil:"DocIssuerBusinessPartner" json:"DocIssuerBusinessPartner,omitempty" toml:"DocIssuerBusinessPartner" yaml:"DocIssuerBusinessPartner,omitempty"`

	R *dataPlatformSCRGeneralDocDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformSCRGeneralDocDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformSCRGeneralDocDatumColumns = struct {
	SupplyChainRelationshipID string
	Buyer                     string
	Seller                    string
	DocType                   string
	DocVersionID              string
	DocID                     string
	FileExtension             string
	FileName                  string
	FilePath                  string
	DocIssuerBusinessPartner  string
}{
	SupplyChainRelationshipID: "SupplyChainRelationshipID",
	Buyer:                     "Buyer",
	Seller:                    "Seller",
	DocType:                   "DocType",
	DocVersionID:              "DocVersionID",
	DocID:                     "DocID",
	FileExtension:             "FileExtension",
	FileName:                  "FileName",
	FilePath:                  "FilePath",
	DocIssuerBusinessPartner:  "DocIssuerBusinessPartner",
}

var DataPlatformSCRGeneralDocDatumTableColumns = struct {
	SupplyChainRelationshipID string
	Buyer                     string
	Seller                    string
	DocType                   string
	DocVersionID              string
	DocID                     string
	FileExtension             string
	FileName                  string
	FilePath                  string
	DocIssuerBusinessPartner  string
}{
	SupplyChainRelationshipID: "data_platform_scr_general_doc_data.SupplyChainRelationshipID",
	Buyer:                     "data_platform_scr_general_doc_data.Buyer",
	Seller:                    "data_platform_scr_general_doc_data.Seller",
	DocType:                   "data_platform_scr_general_doc_data.DocType",
	DocVersionID:              "data_platform_scr_general_doc_data.DocVersionID",
	DocID:                     "data_platform_scr_general_doc_data.DocID",
	FileExtension:             "data_platform_scr_general_doc_data.FileExtension",
	FileName:                  "data_platform_scr_general_doc_data.FileName",
	FilePath:                  "data_platform_scr_general_doc_data.FilePath",
	DocIssuerBusinessPartner:  "data_platform_scr_general_doc_data.DocIssuerBusinessPartner",
}

// Generated where

var DataPlatformSCRGeneralDocDatumWhere = struct {
	SupplyChainRelationshipID whereHelperint
	Buyer                     whereHelperint
	Seller                    whereHelperint
	DocType                   whereHelperstring
	DocVersionID              whereHelperint
	DocID                     whereHelperstring
	FileExtension             whereHelperstring
	FileName                  whereHelpernull_String
	FilePath                  whereHelpernull_String
	DocIssuerBusinessPartner  whereHelpernull_Int
}{
	SupplyChainRelationshipID: whereHelperint{field: "`data_platform_scr_general_doc_data`.`SupplyChainRelationshipID`"},
	Buyer:                     whereHelperint{field: "`data_platform_scr_general_doc_data`.`Buyer`"},
	Seller:                    whereHelperint{field: "`data_platform_scr_general_doc_data`.`Seller`"},
	DocType:                   whereHelperstring{field: "`data_platform_scr_general_doc_data`.`DocType`"},
	DocVersionID:              whereHelperint{field: "`data_platform_scr_general_doc_data`.`DocVersionID`"},
	DocID:                     whereHelperstring{field: "`data_platform_scr_general_doc_data`.`DocID`"},
	FileExtension:             whereHelperstring{field: "`data_platform_scr_general_doc_data`.`FileExtension`"},
	FileName:                  whereHelpernull_String{field: "`data_platform_scr_general_doc_data`.`FileName`"},
	FilePath:                  whereHelpernull_String{field: "`data_platform_scr_general_doc_data`.`FilePath`"},
	DocIssuerBusinessPartner:  whereHelpernull_Int{field: "`data_platform_scr_general_doc_data`.`DocIssuerBusinessPartner`"},
}

// DataPlatformSCRGeneralDocDatumRels is where relationship names are stored.
var DataPlatformSCRGeneralDocDatumRels = struct {
	DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum string
	DocTypeDataPlatformDocTypeDocTypeDatum                          string
	BuyerDataPlatformSCRGeneralDatum                                string
}{
	DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: "DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	DocTypeDataPlatformDocTypeDocTypeDatum:                          "DocTypeDataPlatformDocTypeDocTypeDatum",
	BuyerDataPlatformSCRGeneralDatum:                                "BuyerDataPlatformSCRGeneralDatum",
}

// dataPlatformSCRGeneralDocDatumR is where relationships are stored.
type dataPlatformSCRGeneralDocDatumR struct {
	DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum `boil:"DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	DocTypeDataPlatformDocTypeDocTypeDatum                          *DataPlatformDocTypeDocTypeDatum         `boil:"DocTypeDataPlatformDocTypeDocTypeDatum" json:"DocTypeDataPlatformDocTypeDocTypeDatum" toml:"DocTypeDataPlatformDocTypeDocTypeDatum" yaml:"DocTypeDataPlatformDocTypeDocTypeDatum"`
	BuyerDataPlatformSCRGeneralDatum                                *DataPlatformSCRGeneralDatum             `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformSCRGeneralDocDatumR) NewStruct() *dataPlatformSCRGeneralDocDatumR {
	return &dataPlatformSCRGeneralDocDatumR{}
}

func (r *dataPlatformSCRGeneralDocDatumR) GetDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformSCRGeneralDocDatumR) GetDocTypeDataPlatformDocTypeDocTypeDatum() *DataPlatformDocTypeDocTypeDatum {
	if r == nil {
		return nil
	}
	return r.DocTypeDataPlatformDocTypeDocTypeDatum
}

func (r *dataPlatformSCRGeneralDocDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

// dataPlatformSCRGeneralDocDatumL is where Load methods for each relationship are stored.
type dataPlatformSCRGeneralDocDatumL struct{}

var (
	dataPlatformSCRGeneralDocDatumAllColumns            = []string{"SupplyChainRelationshipID", "Buyer", "Seller", "DocType", "DocVersionID", "DocID", "FileExtension", "FileName", "FilePath", "DocIssuerBusinessPartner"}
	dataPlatformSCRGeneralDocDatumColumnsWithoutDefault = []string{"SupplyChainRelationshipID", "Buyer", "Seller", "DocType", "DocVersionID", "DocID", "FileExtension", "FileName", "FilePath", "DocIssuerBusinessPartner"}
	dataPlatformSCRGeneralDocDatumColumnsWithDefault    = []string{}
	dataPlatformSCRGeneralDocDatumPrimaryKeyColumns     = []string{"SupplyChainRelationshipID", "Buyer", "Seller", "DocType", "DocVersionID", "DocID"}
	dataPlatformSCRGeneralDocDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformSCRGeneralDocDatumSlice is an alias for a slice of pointers to DataPlatformSCRGeneralDocDatum.
	// This should almost always be used instead of []DataPlatformSCRGeneralDocDatum.
	DataPlatformSCRGeneralDocDatumSlice []*DataPlatformSCRGeneralDocDatum

	dataPlatformSCRGeneralDocDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformSCRGeneralDocDatumType                 = reflect.TypeOf(&DataPlatformSCRGeneralDocDatum{})
	dataPlatformSCRGeneralDocDatumMapping              = queries.MakeStructMapping(dataPlatformSCRGeneralDocDatumType)
	dataPlatformSCRGeneralDocDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformSCRGeneralDocDatumType, dataPlatformSCRGeneralDocDatumMapping, dataPlatformSCRGeneralDocDatumPrimaryKeyColumns)
	dataPlatformSCRGeneralDocDatumInsertCacheMut       sync.RWMutex
	dataPlatformSCRGeneralDocDatumInsertCache          = make(map[string]insertCache)
	dataPlatformSCRGeneralDocDatumUpdateCacheMut       sync.RWMutex
	dataPlatformSCRGeneralDocDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformSCRGeneralDocDatumUpsertCacheMut       sync.RWMutex
	dataPlatformSCRGeneralDocDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformSCRGeneralDocDatum record from the query.
func (q dataPlatformSCRGeneralDocDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformSCRGeneralDocDatum, error) {
	o := &DataPlatformSCRGeneralDocDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_scr_general_doc_data")
	}

	return o, nil
}

// All returns all DataPlatformSCRGeneralDocDatum records from the query.
func (q dataPlatformSCRGeneralDocDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformSCRGeneralDocDatumSlice, error) {
	var o []*DataPlatformSCRGeneralDocDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformSCRGeneralDocDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformSCRGeneralDocDatum records in the query.
func (q dataPlatformSCRGeneralDocDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_scr_general_doc_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformSCRGeneralDocDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_scr_general_doc_data exists")
	}

	return count > 0, nil
}

// DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRGeneralDocDatum) DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DocIssuerBusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// DocTypeDataPlatformDocTypeDocTypeDatum pointed to by the foreign key.
func (o *DataPlatformSCRGeneralDocDatum) DocTypeDataPlatformDocTypeDocTypeDatum(mods ...qm.QueryMod) dataPlatformDocTypeDocTypeDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`DocType` = ?", o.DocType),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformDocTypeDocTypeData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformSCRGeneralDocDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// LoadDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRGeneralDocDatumL) LoadDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDocDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDocDatum
	var object *DataPlatformSCRGeneralDocDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDocDatum.(*DataPlatformSCRGeneralDocDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDocDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDocDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDocDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDocDatum.(*[]*DataPlatformSCRGeneralDocDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDocDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDocDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDocDatumR{}
		}
		if !queries.IsNil(object.DocIssuerBusinessPartner) {
			args = append(args, object.DocIssuerBusinessPartner)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDocDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DocIssuerBusinessPartner) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DocIssuerBusinessPartner) {
				args = append(args, obj.DocIssuerBusinessPartner)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DocIssuerBusinessPartner, foreign.BusinessPartner) {
				local.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDocTypeDataPlatformDocTypeDocTypeDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRGeneralDocDatumL) LoadDocTypeDataPlatformDocTypeDocTypeDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDocDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDocDatum
	var object *DataPlatformSCRGeneralDocDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDocDatum.(*DataPlatformSCRGeneralDocDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDocDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDocDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDocDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDocDatum.(*[]*DataPlatformSCRGeneralDocDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDocDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDocDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDocDatumR{}
		}
		args = append(args, object.DocType)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDocDatumR{}
			}

			for _, a := range args {
				if a == obj.DocType {
					continue Outer
				}
			}

			args = append(args, obj.DocType)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_doc_type_doc_type_data`),
		qm.WhereIn(`data_platform_doc_type_doc_type_data.DocType in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformDocTypeDocTypeDatum")
	}

	var resultSlice []*DataPlatformDocTypeDocTypeDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformDocTypeDocTypeDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_doc_type_doc_type_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_doc_type_doc_type_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DocTypeDataPlatformDocTypeDocTypeDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DocType == foreign.DocType {
				local.R.DocTypeDataPlatformDocTypeDocTypeDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformSCRGeneralDocDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformSCRGeneralDocDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformSCRGeneralDocDatum
	var object *DataPlatformSCRGeneralDocDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformSCRGeneralDocDatum.(*DataPlatformSCRGeneralDocDatum)
		if !ok {
			object = new(DataPlatformSCRGeneralDocDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformSCRGeneralDocDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformSCRGeneralDocDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformSCRGeneralDocDatum.(*[]*DataPlatformSCRGeneralDocDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformSCRGeneralDocDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformSCRGeneralDocDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformSCRGeneralDocDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformSCRGeneralDocDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformSCRGeneralDocDatum to the related item.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformSCRGeneralDocDatum) SetDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_general_doc_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DocIssuerBusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDocDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.SupplyChainRelationshipID, o.Buyer, o.Seller, o.DocType, o.DocVersionID, o.DocID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DocIssuerBusinessPartner, related.BusinessPartner)
	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDocDatumR{
			DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// RemoveDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum relationship.
// Sets o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum to nil.
func (o *DataPlatformSCRGeneralDocDatum) RemoveDocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error

	queries.SetScanner(&o.DocIssuerBusinessPartner, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("DocIssuerBusinessPartner")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DocIssuerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetDocTypeDataPlatformDocTypeDocTypeDatum of the dataPlatformSCRGeneralDocDatum to the related item.
// Sets o.R.DocTypeDataPlatformDocTypeDocTypeDatum to related.
func (o *DataPlatformSCRGeneralDocDatum) SetDocTypeDataPlatformDocTypeDocTypeDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformDocTypeDocTypeDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_general_doc_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DocType"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDocDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.DocType, o.SupplyChainRelationshipID, o.Buyer, o.Seller, o.DocType, o.DocVersionID, o.DocID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DocType = related.DocType
	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDocDatumR{
			DocTypeDataPlatformDocTypeDocTypeDatum: related,
		}
	} else {
		o.R.DocTypeDataPlatformDocTypeDocTypeDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformSCRGeneralDocDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformSCRGeneralDocDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_scr_general_doc_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDocDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.SupplyChainRelationshipID, o.Buyer, o.Seller, o.DocType, o.DocVersionID, o.DocID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformSCRGeneralDocDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// DataPlatformSCRGeneralDocData retrieves all the records using an executor.
func DataPlatformSCRGeneralDocData(mods ...qm.QueryMod) dataPlatformSCRGeneralDocDatumQuery {
	mods = append(mods, qm.From("`data_platform_scr_general_doc_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_scr_general_doc_data`.*"})
	}

	return dataPlatformSCRGeneralDocDatumQuery{q}
}

// FindDataPlatformSCRGeneralDocDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformSCRGeneralDocDatum(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, buyer int, seller int, docType string, docVersionID int, docID string, selectCols ...string) (*DataPlatformSCRGeneralDocDatum, error) {
	dataPlatformSCRGeneralDocDatumObj := &DataPlatformSCRGeneralDocDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_scr_general_doc_data` where `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=? AND `DocType`=? AND `DocVersionID`=? AND `DocID`=?", sel,
	)

	q := queries.Raw(query, supplyChainRelationshipID, buyer, seller, docType, docVersionID, docID)

	err := q.Bind(ctx, exec, dataPlatformSCRGeneralDocDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_scr_general_doc_data")
	}

	return dataPlatformSCRGeneralDocDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformSCRGeneralDocDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_general_doc_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRGeneralDocDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformSCRGeneralDocDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformSCRGeneralDocDatumInsertCache[key]
	dataPlatformSCRGeneralDocDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformSCRGeneralDocDatumAllColumns,
			dataPlatformSCRGeneralDocDatumColumnsWithDefault,
			dataPlatformSCRGeneralDocDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRGeneralDocDatumType, dataPlatformSCRGeneralDocDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformSCRGeneralDocDatumType, dataPlatformSCRGeneralDocDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_scr_general_doc_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_scr_general_doc_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_scr_general_doc_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDocDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_scr_general_doc_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SupplyChainRelationshipID,
		o.Buyer,
		o.Seller,
		o.DocType,
		o.DocVersionID,
		o.DocID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_general_doc_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRGeneralDocDatumInsertCacheMut.Lock()
		dataPlatformSCRGeneralDocDatumInsertCache[key] = cache
		dataPlatformSCRGeneralDocDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformSCRGeneralDocDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformSCRGeneralDocDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformSCRGeneralDocDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformSCRGeneralDocDatumUpdateCache[key]
	dataPlatformSCRGeneralDocDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformSCRGeneralDocDatumAllColumns,
			dataPlatformSCRGeneralDocDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_scr_general_doc_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_scr_general_doc_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformSCRGeneralDocDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRGeneralDocDatumType, dataPlatformSCRGeneralDocDatumMapping, append(wl, dataPlatformSCRGeneralDocDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_scr_general_doc_data row")
	}

	if !cached {
		dataPlatformSCRGeneralDocDatumUpdateCacheMut.Lock()
		dataPlatformSCRGeneralDocDatumUpdateCache[key] = cache
		dataPlatformSCRGeneralDocDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformSCRGeneralDocDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_scr_general_doc_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformSCRGeneralDocDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRGeneralDocDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_scr_general_doc_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRGeneralDocDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformSCRGeneralDocDatum slice")
	}

	return nil
}

var mySQLDataPlatformSCRGeneralDocDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformSCRGeneralDocDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_scr_general_doc_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformSCRGeneralDocDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformSCRGeneralDocDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformSCRGeneralDocDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformSCRGeneralDocDatumUpsertCache[key]
	dataPlatformSCRGeneralDocDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformSCRGeneralDocDatumAllColumns,
			dataPlatformSCRGeneralDocDatumColumnsWithDefault,
			dataPlatformSCRGeneralDocDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformSCRGeneralDocDatumAllColumns,
			dataPlatformSCRGeneralDocDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_scr_general_doc_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_scr_general_doc_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_scr_general_doc_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformSCRGeneralDocDatumType, dataPlatformSCRGeneralDocDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformSCRGeneralDocDatumType, dataPlatformSCRGeneralDocDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_scr_general_doc_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformSCRGeneralDocDatumType, dataPlatformSCRGeneralDocDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_scr_general_doc_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_scr_general_doc_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformSCRGeneralDocDatumUpsertCacheMut.Lock()
		dataPlatformSCRGeneralDocDatumUpsertCache[key] = cache
		dataPlatformSCRGeneralDocDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformSCRGeneralDocDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformSCRGeneralDocDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformSCRGeneralDocDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformSCRGeneralDocDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_scr_general_doc_data` WHERE `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=? AND `DocType`=? AND `DocVersionID`=? AND `DocID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_scr_general_doc_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformSCRGeneralDocDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformSCRGeneralDocDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_scr_general_doc_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformSCRGeneralDocDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRGeneralDocDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_scr_general_doc_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRGeneralDocDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformSCRGeneralDocDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformSCRGeneralDocDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformSCRGeneralDocDatum(ctx, exec, o.SupplyChainRelationshipID, o.Buyer, o.Seller, o.DocType, o.DocVersionID, o.DocID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformSCRGeneralDocDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformSCRGeneralDocDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformSCRGeneralDocDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_scr_general_doc_data`.* FROM `data_platform_scr_general_doc_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformSCRGeneralDocDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformSCRGeneralDocDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformSCRGeneralDocDatumExists checks if the DataPlatformSCRGeneralDocDatum row exists.
func DataPlatformSCRGeneralDocDatumExists(ctx context.Context, exec boil.ContextExecutor, supplyChainRelationshipID int, buyer int, seller int, docType string, docVersionID int, docID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_scr_general_doc_data` where `SupplyChainRelationshipID`=? AND `Buyer`=? AND `Seller`=? AND `DocType`=? AND `DocVersionID`=? AND `DocID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, supplyChainRelationshipID, buyer, seller, docType, docVersionID, docID)
	}
	row := exec.QueryRowContext(ctx, sql, supplyChainRelationshipID, buyer, seller, docType, docVersionID, docID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_scr_general_doc_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformSCRGeneralDocDatum row exists.
func (o *DataPlatformSCRGeneralDocDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformSCRGeneralDocDatumExists(ctx, exec, o.SupplyChainRelationshipID, o.Buyer, o.Seller, o.DocType, o.DocVersionID, o.DocID)
}
