// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionOrderItemOperationDatum is an object representing the database table.
type DataPlatformProductionOrderItemOperationDatum struct {
	ProductionOrder                                 int          `boil:"ProductionOrder" json:"ProductionOrder" toml:"ProductionOrder" yaml:"ProductionOrder"`
	ProductionOrderItem                             int          `boil:"ProductionOrderItem" json:"ProductionOrderItem" toml:"ProductionOrderItem" yaml:"ProductionOrderItem"`
	Operations                                      int          `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	OperationsItem                                  int          `boil:"OperationsItem" json:"OperationsItem" toml:"OperationsItem" yaml:"OperationsItem"`
	OperationID                                     int          `boil:"OperationID" json:"OperationID" toml:"OperationID" yaml:"OperationID"`
	OperationType                                   string       `boil:"OperationType" json:"OperationType" toml:"OperationType" yaml:"OperationType"`
	SupplyChainRelationshipID                       int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID               int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID          int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipProductionPlantID        int          `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID"`
	Product                                         string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Buyer                                           int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                          int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverFromParty                                int          `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverFromPlant                                string       `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	DeliverToParty                                  int          `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverToPlant                                  string       `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	ProductionPlantBusinessPartner                  int          `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner"`
	ProductionPlant                                 string       `boil:"ProductionPlant" json:"ProductionPlant" toml:"ProductionPlant" yaml:"ProductionPlant"`
	MRPArea                                         null.String  `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	MRPController                                   null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ProductionVersion                               null.Int     `boil:"ProductionVersion" json:"ProductionVersion,omitempty" toml:"ProductionVersion" yaml:"ProductionVersion,omitempty"`
	ProductionVersionItem                           null.Int     `boil:"ProductionVersionItem" json:"ProductionVersionItem,omitempty" toml:"ProductionVersionItem" yaml:"ProductionVersionItem,omitempty"`
	Sequence                                        int          `boil:"Sequence" json:"Sequence" toml:"Sequence" yaml:"Sequence"`
	SequenceText                                    null.String  `boil:"SequenceText" json:"SequenceText,omitempty" toml:"SequenceText" yaml:"SequenceText,omitempty"`
	OperationText                                   string       `boil:"OperationText" json:"OperationText" toml:"OperationText" yaml:"OperationText"`
	ProductBaseUnit                                 string       `boil:"ProductBaseUnit" json:"ProductBaseUnit" toml:"ProductBaseUnit" yaml:"ProductBaseUnit"`
	ProductProductionUnit                           string       `boil:"ProductProductionUnit" json:"ProductProductionUnit" toml:"ProductProductionUnit" yaml:"ProductProductionUnit"`
	ProductOperationUnit                            string       `boil:"ProductOperationUnit" json:"ProductOperationUnit" toml:"ProductOperationUnit" yaml:"ProductOperationUnit"`
	ProductDeliveryUnit                             string       `boil:"ProductDeliveryUnit" json:"ProductDeliveryUnit" toml:"ProductDeliveryUnit" yaml:"ProductDeliveryUnit"`
	StandardLotSizeQuantity                         float32      `boil:"StandardLotSizeQuantity" json:"StandardLotSizeQuantity" toml:"StandardLotSizeQuantity" yaml:"StandardLotSizeQuantity"`
	MinimumLotSizeQuantity                          float32      `boil:"MinimumLotSizeQuantity" json:"MinimumLotSizeQuantity" toml:"MinimumLotSizeQuantity" yaml:"MinimumLotSizeQuantity"`
	MaximumLotSizeQuantity                          float32      `boil:"MaximumLotSizeQuantity" json:"MaximumLotSizeQuantity" toml:"MaximumLotSizeQuantity" yaml:"MaximumLotSizeQuantity"`
	OperationPlannedQuantityInBaseUnit              float32      `boil:"OperationPlannedQuantityInBaseUnit" json:"OperationPlannedQuantityInBaseUnit" toml:"OperationPlannedQuantityInBaseUnit" yaml:"OperationPlannedQuantityInBaseUnit"`
	OperationPlannedQuantityInProductionUnit        float32      `boil:"OperationPlannedQuantityInProductionUnit" json:"OperationPlannedQuantityInProductionUnit" toml:"OperationPlannedQuantityInProductionUnit" yaml:"OperationPlannedQuantityInProductionUnit"`
	OperationPlannedQuantityInOperationUnit         float32      `boil:"OperationPlannedQuantityInOperationUnit" json:"OperationPlannedQuantityInOperationUnit" toml:"OperationPlannedQuantityInOperationUnit" yaml:"OperationPlannedQuantityInOperationUnit"`
	OperationPlannedQuantityInDeliveryUnit          float32      `boil:"OperationPlannedQuantityInDeliveryUnit" json:"OperationPlannedQuantityInDeliveryUnit" toml:"OperationPlannedQuantityInDeliveryUnit" yaml:"OperationPlannedQuantityInDeliveryUnit"`
	OperationPlannedScrapInPercent                  null.Float32 `boil:"OperationPlannedScrapInPercent" json:"OperationPlannedScrapInPercent,omitempty" toml:"OperationPlannedScrapInPercent" yaml:"OperationPlannedScrapInPercent,omitempty"`
	ResponsiblePlannerGroup                         null.String  `boil:"ResponsiblePlannerGroup" json:"ResponsiblePlannerGroup,omitempty" toml:"ResponsiblePlannerGroup" yaml:"ResponsiblePlannerGroup,omitempty"`
	PlainLongText                                   null.String  `boil:"PlainLongText" json:"PlainLongText,omitempty" toml:"PlainLongText" yaml:"PlainLongText,omitempty"`
	WorkCenter                                      int          `boil:"WorkCenter" json:"WorkCenter" toml:"WorkCenter" yaml:"WorkCenter"`
	CapacityCategory                                null.String  `boil:"CapacityCategory" json:"CapacityCategory,omitempty" toml:"CapacityCategory" yaml:"CapacityCategory,omitempty"`
	OperationCostingRelevancyType                   null.String  `boil:"OperationCostingRelevancyType" json:"OperationCostingRelevancyType,omitempty" toml:"OperationCostingRelevancyType" yaml:"OperationCostingRelevancyType,omitempty"`
	OperationSetupType                              null.String  `boil:"OperationSetupType" json:"OperationSetupType,omitempty" toml:"OperationSetupType" yaml:"OperationSetupType,omitempty"`
	OperationSetupGroupCategory                     null.String  `boil:"OperationSetupGroupCategory" json:"OperationSetupGroupCategory,omitempty" toml:"OperationSetupGroupCategory" yaml:"OperationSetupGroupCategory,omitempty"`
	OperationSetupGroup                             null.String  `boil:"OperationSetupGroup" json:"OperationSetupGroup,omitempty" toml:"OperationSetupGroup" yaml:"OperationSetupGroup,omitempty"`
	MaximumWaitDuration                             null.Float32 `boil:"MaximumWaitDuration" json:"MaximumWaitDuration,omitempty" toml:"MaximumWaitDuration" yaml:"MaximumWaitDuration,omitempty"`
	StandardWaitDuration                            null.Float32 `boil:"StandardWaitDuration" json:"StandardWaitDuration,omitempty" toml:"StandardWaitDuration" yaml:"StandardWaitDuration,omitempty"`
	MinimumWaitDuration                             null.Float32 `boil:"MinimumWaitDuration" json:"MinimumWaitDuration,omitempty" toml:"MinimumWaitDuration" yaml:"MinimumWaitDuration,omitempty"`
	WaitDurationUnit                                null.String  `boil:"WaitDurationUnit" json:"WaitDurationUnit,omitempty" toml:"WaitDurationUnit" yaml:"WaitDurationUnit,omitempty"`
	MaximumQueueDuration                            null.Float32 `boil:"MaximumQueueDuration" json:"MaximumQueueDuration,omitempty" toml:"MaximumQueueDuration" yaml:"MaximumQueueDuration,omitempty"`
	StandardQueueDuration                           null.Float32 `boil:"StandardQueueDuration" json:"StandardQueueDuration,omitempty" toml:"StandardQueueDuration" yaml:"StandardQueueDuration,omitempty"`
	MinimumQueueDuration                            null.Float32 `boil:"MinimumQueueDuration" json:"MinimumQueueDuration,omitempty" toml:"MinimumQueueDuration" yaml:"MinimumQueueDuration,omitempty"`
	QueueDurationUnit                               null.String  `boil:"QueueDurationUnit" json:"QueueDurationUnit,omitempty" toml:"QueueDurationUnit" yaml:"QueueDurationUnit,omitempty"`
	MaximumMoveDuration                             null.Float32 `boil:"MaximumMoveDuration" json:"MaximumMoveDuration,omitempty" toml:"MaximumMoveDuration" yaml:"MaximumMoveDuration,omitempty"`
	StandardMoveDuration                            null.Float32 `boil:"StandardMoveDuration" json:"StandardMoveDuration,omitempty" toml:"StandardMoveDuration" yaml:"StandardMoveDuration,omitempty"`
	MinimumMoveDuration                             null.Float32 `boil:"MinimumMoveDuration" json:"MinimumMoveDuration,omitempty" toml:"MinimumMoveDuration" yaml:"MinimumMoveDuration,omitempty"`
	MoveDurationUnit                                null.String  `boil:"MoveDurationUnit" json:"MoveDurationUnit,omitempty" toml:"MoveDurationUnit" yaml:"MoveDurationUnit,omitempty"`
	StandardDeliveryDuration                        null.Float32 `boil:"StandardDeliveryDuration" json:"StandardDeliveryDuration,omitempty" toml:"StandardDeliveryDuration" yaml:"StandardDeliveryDuration,omitempty"`
	StandardDeliveryDurationUnit                    null.String  `boil:"StandardDeliveryDurationUnit" json:"StandardDeliveryDurationUnit,omitempty" toml:"StandardDeliveryDurationUnit" yaml:"StandardDeliveryDurationUnit,omitempty"`
	CostElement                                     null.String  `boil:"CostElement" json:"CostElement,omitempty" toml:"CostElement" yaml:"CostElement,omitempty"`
	OperationErlstSchedldExecStrtDte                null.String  `boil:"OperationErlstSchedldExecStrtDte" json:"OperationErlstSchedldExecStrtDte,omitempty" toml:"OperationErlstSchedldExecStrtDte" yaml:"OperationErlstSchedldExecStrtDte,omitempty"`
	OperationErlstSchedldExecStrtTme                null.String  `boil:"OperationErlstSchedldExecStrtTme" json:"OperationErlstSchedldExecStrtTme,omitempty" toml:"OperationErlstSchedldExecStrtTme" yaml:"OperationErlstSchedldExecStrtTme,omitempty"`
	OperationErlstSchedldExecEndDate                null.String  `boil:"OperationErlstSchedldExecEndDate" json:"OperationErlstSchedldExecEndDate,omitempty" toml:"OperationErlstSchedldExecEndDate" yaml:"OperationErlstSchedldExecEndDate,omitempty"`
	OperationErlstSchedldExecEndTme                 null.String  `boil:"OperationErlstSchedldExecEndTme" json:"OperationErlstSchedldExecEndTme,omitempty" toml:"OperationErlstSchedldExecEndTme" yaml:"OperationErlstSchedldExecEndTme,omitempty"`
	OperationActualExecutionStartDate               null.String  `boil:"OperationActualExecutionStartDate" json:"OperationActualExecutionStartDate,omitempty" toml:"OperationActualExecutionStartDate" yaml:"OperationActualExecutionStartDate,omitempty"`
	OperationActualExecutionStartTime               null.String  `boil:"OperationActualExecutionStartTime" json:"OperationActualExecutionStartTime,omitempty" toml:"OperationActualExecutionStartTime" yaml:"OperationActualExecutionStartTime,omitempty"`
	OperationActualExecutionEndDate                 null.String  `boil:"OperationActualExecutionEndDate" json:"OperationActualExecutionEndDate,omitempty" toml:"OperationActualExecutionEndDate" yaml:"OperationActualExecutionEndDate,omitempty"`
	OperationActualExecutionEndTime                 null.String  `boil:"OperationActualExecutionEndTime" json:"OperationActualExecutionEndTime,omitempty" toml:"OperationActualExecutionEndTime" yaml:"OperationActualExecutionEndTime,omitempty"`
	OperationConfirmedYieldQuantityInBaseUnit       null.Float32 `boil:"OperationConfirmedYieldQuantityInBaseUnit" json:"OperationConfirmedYieldQuantityInBaseUnit,omitempty" toml:"OperationConfirmedYieldQuantityInBaseUnit" yaml:"OperationConfirmedYieldQuantityInBaseUnit,omitempty"`
	OperationConfirmedYieldQuantityInProductionUnit null.Float32 `boil:"OperationConfirmedYieldQuantityInProductionUnit" json:"OperationConfirmedYieldQuantityInProductionUnit,omitempty" toml:"OperationConfirmedYieldQuantityInProductionUnit" yaml:"OperationConfirmedYieldQuantityInProductionUnit,omitempty"`
	OperationConfirmedYieldQuantityInOperationUnit  null.Float32 `boil:"OperationConfirmedYieldQuantityInOperationUnit" json:"OperationConfirmedYieldQuantityInOperationUnit,omitempty" toml:"OperationConfirmedYieldQuantityInOperationUnit" yaml:"OperationConfirmedYieldQuantityInOperationUnit,omitempty"`
	CreationDate                                    string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                                    string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                                  string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                                  string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsReleased                                      null.Bool    `boil:"IsReleased" json:"IsReleased,omitempty" toml:"IsReleased" yaml:"IsReleased,omitempty"`
	IsPartiallyConfirmed                            null.Bool    `boil:"IsPartiallyConfirmed" json:"IsPartiallyConfirmed,omitempty" toml:"IsPartiallyConfirmed" yaml:"IsPartiallyConfirmed,omitempty"`
	IsConfirmed                                     null.Bool    `boil:"IsConfirmed" json:"IsConfirmed,omitempty" toml:"IsConfirmed" yaml:"IsConfirmed,omitempty"`
	IsLocked                                        null.Bool    `boil:"IsLocked" json:"IsLocked,omitempty" toml:"IsLocked" yaml:"IsLocked,omitempty"`
	IsCancelled                                     null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion                             null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductionOrderItemOperationDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionOrderItemOperationDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionOrderItemOperationDatumColumns = struct {
	ProductionOrder                                 string
	ProductionOrderItem                             string
	Operations                                      string
	OperationsItem                                  string
	OperationID                                     string
	OperationType                                   string
	SupplyChainRelationshipID                       string
	SupplyChainRelationshipDeliveryID               string
	SupplyChainRelationshipDeliveryPlantID          string
	SupplyChainRelationshipProductionPlantID        string
	Product                                         string
	Buyer                                           string
	Seller                                          string
	DeliverFromParty                                string
	DeliverFromPlant                                string
	DeliverToParty                                  string
	DeliverToPlant                                  string
	ProductionPlantBusinessPartner                  string
	ProductionPlant                                 string
	MRPArea                                         string
	MRPController                                   string
	ProductionVersion                               string
	ProductionVersionItem                           string
	Sequence                                        string
	SequenceText                                    string
	OperationText                                   string
	ProductBaseUnit                                 string
	ProductProductionUnit                           string
	ProductOperationUnit                            string
	ProductDeliveryUnit                             string
	StandardLotSizeQuantity                         string
	MinimumLotSizeQuantity                          string
	MaximumLotSizeQuantity                          string
	OperationPlannedQuantityInBaseUnit              string
	OperationPlannedQuantityInProductionUnit        string
	OperationPlannedQuantityInOperationUnit         string
	OperationPlannedQuantityInDeliveryUnit          string
	OperationPlannedScrapInPercent                  string
	ResponsiblePlannerGroup                         string
	PlainLongText                                   string
	WorkCenter                                      string
	CapacityCategory                                string
	OperationCostingRelevancyType                   string
	OperationSetupType                              string
	OperationSetupGroupCategory                     string
	OperationSetupGroup                             string
	MaximumWaitDuration                             string
	StandardWaitDuration                            string
	MinimumWaitDuration                             string
	WaitDurationUnit                                string
	MaximumQueueDuration                            string
	StandardQueueDuration                           string
	MinimumQueueDuration                            string
	QueueDurationUnit                               string
	MaximumMoveDuration                             string
	StandardMoveDuration                            string
	MinimumMoveDuration                             string
	MoveDurationUnit                                string
	StandardDeliveryDuration                        string
	StandardDeliveryDurationUnit                    string
	CostElement                                     string
	OperationErlstSchedldExecStrtDte                string
	OperationErlstSchedldExecStrtTme                string
	OperationErlstSchedldExecEndDate                string
	OperationErlstSchedldExecEndTme                 string
	OperationActualExecutionStartDate               string
	OperationActualExecutionStartTime               string
	OperationActualExecutionEndDate                 string
	OperationActualExecutionEndTime                 string
	OperationConfirmedYieldQuantityInBaseUnit       string
	OperationConfirmedYieldQuantityInProductionUnit string
	OperationConfirmedYieldQuantityInOperationUnit  string
	CreationDate                                    string
	CreationTime                                    string
	LastChangeDate                                  string
	LastChangeTime                                  string
	IsReleased                                      string
	IsPartiallyConfirmed                            string
	IsConfirmed                                     string
	IsLocked                                        string
	IsCancelled                                     string
	IsMarkedForDeletion                             string
}{
	ProductionOrder:                                 "ProductionOrder",
	ProductionOrderItem:                             "ProductionOrderItem",
	Operations:                                      "Operations",
	OperationsItem:                                  "OperationsItem",
	OperationID:                                     "OperationID",
	OperationType:                                   "OperationType",
	SupplyChainRelationshipID:                       "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:               "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:          "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID:        "SupplyChainRelationshipProductionPlantID",
	Product:                                         "Product",
	Buyer:                                           "Buyer",
	Seller:                                          "Seller",
	DeliverFromParty:                                "DeliverFromParty",
	DeliverFromPlant:                                "DeliverFromPlant",
	DeliverToParty:                                  "DeliverToParty",
	DeliverToPlant:                                  "DeliverToPlant",
	ProductionPlantBusinessPartner:                  "ProductionPlantBusinessPartner",
	ProductionPlant:                                 "ProductionPlant",
	MRPArea:                                         "MRPArea",
	MRPController:                                   "MRPController",
	ProductionVersion:                               "ProductionVersion",
	ProductionVersionItem:                           "ProductionVersionItem",
	Sequence:                                        "Sequence",
	SequenceText:                                    "SequenceText",
	OperationText:                                   "OperationText",
	ProductBaseUnit:                                 "ProductBaseUnit",
	ProductProductionUnit:                           "ProductProductionUnit",
	ProductOperationUnit:                            "ProductOperationUnit",
	ProductDeliveryUnit:                             "ProductDeliveryUnit",
	StandardLotSizeQuantity:                         "StandardLotSizeQuantity",
	MinimumLotSizeQuantity:                          "MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:                          "MaximumLotSizeQuantity",
	OperationPlannedQuantityInBaseUnit:              "OperationPlannedQuantityInBaseUnit",
	OperationPlannedQuantityInProductionUnit:        "OperationPlannedQuantityInProductionUnit",
	OperationPlannedQuantityInOperationUnit:         "OperationPlannedQuantityInOperationUnit",
	OperationPlannedQuantityInDeliveryUnit:          "OperationPlannedQuantityInDeliveryUnit",
	OperationPlannedScrapInPercent:                  "OperationPlannedScrapInPercent",
	ResponsiblePlannerGroup:                         "ResponsiblePlannerGroup",
	PlainLongText:                                   "PlainLongText",
	WorkCenter:                                      "WorkCenter",
	CapacityCategory:                                "CapacityCategory",
	OperationCostingRelevancyType:                   "OperationCostingRelevancyType",
	OperationSetupType:                              "OperationSetupType",
	OperationSetupGroupCategory:                     "OperationSetupGroupCategory",
	OperationSetupGroup:                             "OperationSetupGroup",
	MaximumWaitDuration:                             "MaximumWaitDuration",
	StandardWaitDuration:                            "StandardWaitDuration",
	MinimumWaitDuration:                             "MinimumWaitDuration",
	WaitDurationUnit:                                "WaitDurationUnit",
	MaximumQueueDuration:                            "MaximumQueueDuration",
	StandardQueueDuration:                           "StandardQueueDuration",
	MinimumQueueDuration:                            "MinimumQueueDuration",
	QueueDurationUnit:                               "QueueDurationUnit",
	MaximumMoveDuration:                             "MaximumMoveDuration",
	StandardMoveDuration:                            "StandardMoveDuration",
	MinimumMoveDuration:                             "MinimumMoveDuration",
	MoveDurationUnit:                                "MoveDurationUnit",
	StandardDeliveryDuration:                        "StandardDeliveryDuration",
	StandardDeliveryDurationUnit:                    "StandardDeliveryDurationUnit",
	CostElement:                                     "CostElement",
	OperationErlstSchedldExecStrtDte:                "OperationErlstSchedldExecStrtDte",
	OperationErlstSchedldExecStrtTme:                "OperationErlstSchedldExecStrtTme",
	OperationErlstSchedldExecEndDate:                "OperationErlstSchedldExecEndDate",
	OperationErlstSchedldExecEndTme:                 "OperationErlstSchedldExecEndTme",
	OperationActualExecutionStartDate:               "OperationActualExecutionStartDate",
	OperationActualExecutionStartTime:               "OperationActualExecutionStartTime",
	OperationActualExecutionEndDate:                 "OperationActualExecutionEndDate",
	OperationActualExecutionEndTime:                 "OperationActualExecutionEndTime",
	OperationConfirmedYieldQuantityInBaseUnit:       "OperationConfirmedYieldQuantityInBaseUnit",
	OperationConfirmedYieldQuantityInProductionUnit: "OperationConfirmedYieldQuantityInProductionUnit",
	OperationConfirmedYieldQuantityInOperationUnit:  "OperationConfirmedYieldQuantityInOperationUnit",
	CreationDate:                                    "CreationDate",
	CreationTime:                                    "CreationTime",
	LastChangeDate:                                  "LastChangeDate",
	LastChangeTime:                                  "LastChangeTime",
	IsReleased:                                      "IsReleased",
	IsPartiallyConfirmed:                            "IsPartiallyConfirmed",
	IsConfirmed:                                     "IsConfirmed",
	IsLocked:                                        "IsLocked",
	IsCancelled:                                     "IsCancelled",
	IsMarkedForDeletion:                             "IsMarkedForDeletion",
}

var DataPlatformProductionOrderItemOperationDatumTableColumns = struct {
	ProductionOrder                                 string
	ProductionOrderItem                             string
	Operations                                      string
	OperationsItem                                  string
	OperationID                                     string
	OperationType                                   string
	SupplyChainRelationshipID                       string
	SupplyChainRelationshipDeliveryID               string
	SupplyChainRelationshipDeliveryPlantID          string
	SupplyChainRelationshipProductionPlantID        string
	Product                                         string
	Buyer                                           string
	Seller                                          string
	DeliverFromParty                                string
	DeliverFromPlant                                string
	DeliverToParty                                  string
	DeliverToPlant                                  string
	ProductionPlantBusinessPartner                  string
	ProductionPlant                                 string
	MRPArea                                         string
	MRPController                                   string
	ProductionVersion                               string
	ProductionVersionItem                           string
	Sequence                                        string
	SequenceText                                    string
	OperationText                                   string
	ProductBaseUnit                                 string
	ProductProductionUnit                           string
	ProductOperationUnit                            string
	ProductDeliveryUnit                             string
	StandardLotSizeQuantity                         string
	MinimumLotSizeQuantity                          string
	MaximumLotSizeQuantity                          string
	OperationPlannedQuantityInBaseUnit              string
	OperationPlannedQuantityInProductionUnit        string
	OperationPlannedQuantityInOperationUnit         string
	OperationPlannedQuantityInDeliveryUnit          string
	OperationPlannedScrapInPercent                  string
	ResponsiblePlannerGroup                         string
	PlainLongText                                   string
	WorkCenter                                      string
	CapacityCategory                                string
	OperationCostingRelevancyType                   string
	OperationSetupType                              string
	OperationSetupGroupCategory                     string
	OperationSetupGroup                             string
	MaximumWaitDuration                             string
	StandardWaitDuration                            string
	MinimumWaitDuration                             string
	WaitDurationUnit                                string
	MaximumQueueDuration                            string
	StandardQueueDuration                           string
	MinimumQueueDuration                            string
	QueueDurationUnit                               string
	MaximumMoveDuration                             string
	StandardMoveDuration                            string
	MinimumMoveDuration                             string
	MoveDurationUnit                                string
	StandardDeliveryDuration                        string
	StandardDeliveryDurationUnit                    string
	CostElement                                     string
	OperationErlstSchedldExecStrtDte                string
	OperationErlstSchedldExecStrtTme                string
	OperationErlstSchedldExecEndDate                string
	OperationErlstSchedldExecEndTme                 string
	OperationActualExecutionStartDate               string
	OperationActualExecutionStartTime               string
	OperationActualExecutionEndDate                 string
	OperationActualExecutionEndTime                 string
	OperationConfirmedYieldQuantityInBaseUnit       string
	OperationConfirmedYieldQuantityInProductionUnit string
	OperationConfirmedYieldQuantityInOperationUnit  string
	CreationDate                                    string
	CreationTime                                    string
	LastChangeDate                                  string
	LastChangeTime                                  string
	IsReleased                                      string
	IsPartiallyConfirmed                            string
	IsConfirmed                                     string
	IsLocked                                        string
	IsCancelled                                     string
	IsMarkedForDeletion                             string
}{
	ProductionOrder:                                 "data_platform_production_order_item_operation_data.ProductionOrder",
	ProductionOrderItem:                             "data_platform_production_order_item_operation_data.ProductionOrderItem",
	Operations:                                      "data_platform_production_order_item_operation_data.Operations",
	OperationsItem:                                  "data_platform_production_order_item_operation_data.OperationsItem",
	OperationID:                                     "data_platform_production_order_item_operation_data.OperationID",
	OperationType:                                   "data_platform_production_order_item_operation_data.OperationType",
	SupplyChainRelationshipID:                       "data_platform_production_order_item_operation_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:               "data_platform_production_order_item_operation_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:          "data_platform_production_order_item_operation_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID:        "data_platform_production_order_item_operation_data.SupplyChainRelationshipProductionPlantID",
	Product:                                         "data_platform_production_order_item_operation_data.Product",
	Buyer:                                           "data_platform_production_order_item_operation_data.Buyer",
	Seller:                                          "data_platform_production_order_item_operation_data.Seller",
	DeliverFromParty:                                "data_platform_production_order_item_operation_data.DeliverFromParty",
	DeliverFromPlant:                                "data_platform_production_order_item_operation_data.DeliverFromPlant",
	DeliverToParty:                                  "data_platform_production_order_item_operation_data.DeliverToParty",
	DeliverToPlant:                                  "data_platform_production_order_item_operation_data.DeliverToPlant",
	ProductionPlantBusinessPartner:                  "data_platform_production_order_item_operation_data.ProductionPlantBusinessPartner",
	ProductionPlant:                                 "data_platform_production_order_item_operation_data.ProductionPlant",
	MRPArea:                                         "data_platform_production_order_item_operation_data.MRPArea",
	MRPController:                                   "data_platform_production_order_item_operation_data.MRPController",
	ProductionVersion:                               "data_platform_production_order_item_operation_data.ProductionVersion",
	ProductionVersionItem:                           "data_platform_production_order_item_operation_data.ProductionVersionItem",
	Sequence:                                        "data_platform_production_order_item_operation_data.Sequence",
	SequenceText:                                    "data_platform_production_order_item_operation_data.SequenceText",
	OperationText:                                   "data_platform_production_order_item_operation_data.OperationText",
	ProductBaseUnit:                                 "data_platform_production_order_item_operation_data.ProductBaseUnit",
	ProductProductionUnit:                           "data_platform_production_order_item_operation_data.ProductProductionUnit",
	ProductOperationUnit:                            "data_platform_production_order_item_operation_data.ProductOperationUnit",
	ProductDeliveryUnit:                             "data_platform_production_order_item_operation_data.ProductDeliveryUnit",
	StandardLotSizeQuantity:                         "data_platform_production_order_item_operation_data.StandardLotSizeQuantity",
	MinimumLotSizeQuantity:                          "data_platform_production_order_item_operation_data.MinimumLotSizeQuantity",
	MaximumLotSizeQuantity:                          "data_platform_production_order_item_operation_data.MaximumLotSizeQuantity",
	OperationPlannedQuantityInBaseUnit:              "data_platform_production_order_item_operation_data.OperationPlannedQuantityInBaseUnit",
	OperationPlannedQuantityInProductionUnit:        "data_platform_production_order_item_operation_data.OperationPlannedQuantityInProductionUnit",
	OperationPlannedQuantityInOperationUnit:         "data_platform_production_order_item_operation_data.OperationPlannedQuantityInOperationUnit",
	OperationPlannedQuantityInDeliveryUnit:          "data_platform_production_order_item_operation_data.OperationPlannedQuantityInDeliveryUnit",
	OperationPlannedScrapInPercent:                  "data_platform_production_order_item_operation_data.OperationPlannedScrapInPercent",
	ResponsiblePlannerGroup:                         "data_platform_production_order_item_operation_data.ResponsiblePlannerGroup",
	PlainLongText:                                   "data_platform_production_order_item_operation_data.PlainLongText",
	WorkCenter:                                      "data_platform_production_order_item_operation_data.WorkCenter",
	CapacityCategory:                                "data_platform_production_order_item_operation_data.CapacityCategory",
	OperationCostingRelevancyType:                   "data_platform_production_order_item_operation_data.OperationCostingRelevancyType",
	OperationSetupType:                              "data_platform_production_order_item_operation_data.OperationSetupType",
	OperationSetupGroupCategory:                     "data_platform_production_order_item_operation_data.OperationSetupGroupCategory",
	OperationSetupGroup:                             "data_platform_production_order_item_operation_data.OperationSetupGroup",
	MaximumWaitDuration:                             "data_platform_production_order_item_operation_data.MaximumWaitDuration",
	StandardWaitDuration:                            "data_platform_production_order_item_operation_data.StandardWaitDuration",
	MinimumWaitDuration:                             "data_platform_production_order_item_operation_data.MinimumWaitDuration",
	WaitDurationUnit:                                "data_platform_production_order_item_operation_data.WaitDurationUnit",
	MaximumQueueDuration:                            "data_platform_production_order_item_operation_data.MaximumQueueDuration",
	StandardQueueDuration:                           "data_platform_production_order_item_operation_data.StandardQueueDuration",
	MinimumQueueDuration:                            "data_platform_production_order_item_operation_data.MinimumQueueDuration",
	QueueDurationUnit:                               "data_platform_production_order_item_operation_data.QueueDurationUnit",
	MaximumMoveDuration:                             "data_platform_production_order_item_operation_data.MaximumMoveDuration",
	StandardMoveDuration:                            "data_platform_production_order_item_operation_data.StandardMoveDuration",
	MinimumMoveDuration:                             "data_platform_production_order_item_operation_data.MinimumMoveDuration",
	MoveDurationUnit:                                "data_platform_production_order_item_operation_data.MoveDurationUnit",
	StandardDeliveryDuration:                        "data_platform_production_order_item_operation_data.StandardDeliveryDuration",
	StandardDeliveryDurationUnit:                    "data_platform_production_order_item_operation_data.StandardDeliveryDurationUnit",
	CostElement:                                     "data_platform_production_order_item_operation_data.CostElement",
	OperationErlstSchedldExecStrtDte:                "data_platform_production_order_item_operation_data.OperationErlstSchedldExecStrtDte",
	OperationErlstSchedldExecStrtTme:                "data_platform_production_order_item_operation_data.OperationErlstSchedldExecStrtTme",
	OperationErlstSchedldExecEndDate:                "data_platform_production_order_item_operation_data.OperationErlstSchedldExecEndDate",
	OperationErlstSchedldExecEndTme:                 "data_platform_production_order_item_operation_data.OperationErlstSchedldExecEndTme",
	OperationActualExecutionStartDate:               "data_platform_production_order_item_operation_data.OperationActualExecutionStartDate",
	OperationActualExecutionStartTime:               "data_platform_production_order_item_operation_data.OperationActualExecutionStartTime",
	OperationActualExecutionEndDate:                 "data_platform_production_order_item_operation_data.OperationActualExecutionEndDate",
	OperationActualExecutionEndTime:                 "data_platform_production_order_item_operation_data.OperationActualExecutionEndTime",
	OperationConfirmedYieldQuantityInBaseUnit:       "data_platform_production_order_item_operation_data.OperationConfirmedYieldQuantityInBaseUnit",
	OperationConfirmedYieldQuantityInProductionUnit: "data_platform_production_order_item_operation_data.OperationConfirmedYieldQuantityInProductionUnit",
	OperationConfirmedYieldQuantityInOperationUnit:  "data_platform_production_order_item_operation_data.OperationConfirmedYieldQuantityInOperationUnit",
	CreationDate:                                    "data_platform_production_order_item_operation_data.CreationDate",
	CreationTime:                                    "data_platform_production_order_item_operation_data.CreationTime",
	LastChangeDate:                                  "data_platform_production_order_item_operation_data.LastChangeDate",
	LastChangeTime:                                  "data_platform_production_order_item_operation_data.LastChangeTime",
	IsReleased:                                      "data_platform_production_order_item_operation_data.IsReleased",
	IsPartiallyConfirmed:                            "data_platform_production_order_item_operation_data.IsPartiallyConfirmed",
	IsConfirmed:                                     "data_platform_production_order_item_operation_data.IsConfirmed",
	IsLocked:                                        "data_platform_production_order_item_operation_data.IsLocked",
	IsCancelled:                                     "data_platform_production_order_item_operation_data.IsCancelled",
	IsMarkedForDeletion:                             "data_platform_production_order_item_operation_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductionOrderItemOperationDatumWhere = struct {
	ProductionOrder                                 whereHelperint
	ProductionOrderItem                             whereHelperint
	Operations                                      whereHelperint
	OperationsItem                                  whereHelperint
	OperationID                                     whereHelperint
	OperationType                                   whereHelperstring
	SupplyChainRelationshipID                       whereHelperint
	SupplyChainRelationshipDeliveryID               whereHelperint
	SupplyChainRelationshipDeliveryPlantID          whereHelperint
	SupplyChainRelationshipProductionPlantID        whereHelperint
	Product                                         whereHelperstring
	Buyer                                           whereHelperint
	Seller                                          whereHelperint
	DeliverFromParty                                whereHelperint
	DeliverFromPlant                                whereHelperstring
	DeliverToParty                                  whereHelperint
	DeliverToPlant                                  whereHelperstring
	ProductionPlantBusinessPartner                  whereHelperint
	ProductionPlant                                 whereHelperstring
	MRPArea                                         whereHelpernull_String
	MRPController                                   whereHelpernull_String
	ProductionVersion                               whereHelpernull_Int
	ProductionVersionItem                           whereHelpernull_Int
	Sequence                                        whereHelperint
	SequenceText                                    whereHelpernull_String
	OperationText                                   whereHelperstring
	ProductBaseUnit                                 whereHelperstring
	ProductProductionUnit                           whereHelperstring
	ProductOperationUnit                            whereHelperstring
	ProductDeliveryUnit                             whereHelperstring
	StandardLotSizeQuantity                         whereHelperfloat32
	MinimumLotSizeQuantity                          whereHelperfloat32
	MaximumLotSizeQuantity                          whereHelperfloat32
	OperationPlannedQuantityInBaseUnit              whereHelperfloat32
	OperationPlannedQuantityInProductionUnit        whereHelperfloat32
	OperationPlannedQuantityInOperationUnit         whereHelperfloat32
	OperationPlannedQuantityInDeliveryUnit          whereHelperfloat32
	OperationPlannedScrapInPercent                  whereHelpernull_Float32
	ResponsiblePlannerGroup                         whereHelpernull_String
	PlainLongText                                   whereHelpernull_String
	WorkCenter                                      whereHelperint
	CapacityCategory                                whereHelpernull_String
	OperationCostingRelevancyType                   whereHelpernull_String
	OperationSetupType                              whereHelpernull_String
	OperationSetupGroupCategory                     whereHelpernull_String
	OperationSetupGroup                             whereHelpernull_String
	MaximumWaitDuration                             whereHelpernull_Float32
	StandardWaitDuration                            whereHelpernull_Float32
	MinimumWaitDuration                             whereHelpernull_Float32
	WaitDurationUnit                                whereHelpernull_String
	MaximumQueueDuration                            whereHelpernull_Float32
	StandardQueueDuration                           whereHelpernull_Float32
	MinimumQueueDuration                            whereHelpernull_Float32
	QueueDurationUnit                               whereHelpernull_String
	MaximumMoveDuration                             whereHelpernull_Float32
	StandardMoveDuration                            whereHelpernull_Float32
	MinimumMoveDuration                             whereHelpernull_Float32
	MoveDurationUnit                                whereHelpernull_String
	StandardDeliveryDuration                        whereHelpernull_Float32
	StandardDeliveryDurationUnit                    whereHelpernull_String
	CostElement                                     whereHelpernull_String
	OperationErlstSchedldExecStrtDte                whereHelpernull_String
	OperationErlstSchedldExecStrtTme                whereHelpernull_String
	OperationErlstSchedldExecEndDate                whereHelpernull_String
	OperationErlstSchedldExecEndTme                 whereHelpernull_String
	OperationActualExecutionStartDate               whereHelpernull_String
	OperationActualExecutionStartTime               whereHelpernull_String
	OperationActualExecutionEndDate                 whereHelpernull_String
	OperationActualExecutionEndTime                 whereHelpernull_String
	OperationConfirmedYieldQuantityInBaseUnit       whereHelpernull_Float32
	OperationConfirmedYieldQuantityInProductionUnit whereHelpernull_Float32
	OperationConfirmedYieldQuantityInOperationUnit  whereHelpernull_Float32
	CreationDate                                    whereHelperstring
	CreationTime                                    whereHelperstring
	LastChangeDate                                  whereHelperstring
	LastChangeTime                                  whereHelperstring
	IsReleased                                      whereHelpernull_Bool
	IsPartiallyConfirmed                            whereHelpernull_Bool
	IsConfirmed                                     whereHelpernull_Bool
	IsLocked                                        whereHelpernull_Bool
	IsCancelled                                     whereHelpernull_Bool
	IsMarkedForDeletion                             whereHelpernull_Bool
}{
	ProductionOrder:                                 whereHelperint{field: "`data_platform_production_order_item_operation_data`.`ProductionOrder`"},
	ProductionOrderItem:                             whereHelperint{field: "`data_platform_production_order_item_operation_data`.`ProductionOrderItem`"},
	Operations:                                      whereHelperint{field: "`data_platform_production_order_item_operation_data`.`Operations`"},
	OperationsItem:                                  whereHelperint{field: "`data_platform_production_order_item_operation_data`.`OperationsItem`"},
	OperationID:                                     whereHelperint{field: "`data_platform_production_order_item_operation_data`.`OperationID`"},
	OperationType:                                   whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`OperationType`"},
	SupplyChainRelationshipID:                       whereHelperint{field: "`data_platform_production_order_item_operation_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:               whereHelperint{field: "`data_platform_production_order_item_operation_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:          whereHelperint{field: "`data_platform_production_order_item_operation_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipProductionPlantID:        whereHelperint{field: "`data_platform_production_order_item_operation_data`.`SupplyChainRelationshipProductionPlantID`"},
	Product:                                         whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`Product`"},
	Buyer:                                           whereHelperint{field: "`data_platform_production_order_item_operation_data`.`Buyer`"},
	Seller:                                          whereHelperint{field: "`data_platform_production_order_item_operation_data`.`Seller`"},
	DeliverFromParty:                                whereHelperint{field: "`data_platform_production_order_item_operation_data`.`DeliverFromParty`"},
	DeliverFromPlant:                                whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`DeliverFromPlant`"},
	DeliverToParty:                                  whereHelperint{field: "`data_platform_production_order_item_operation_data`.`DeliverToParty`"},
	DeliverToPlant:                                  whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`DeliverToPlant`"},
	ProductionPlantBusinessPartner:                  whereHelperint{field: "`data_platform_production_order_item_operation_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                                 whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`ProductionPlant`"},
	MRPArea:                                         whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`MRPArea`"},
	MRPController:                                   whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`MRPController`"},
	ProductionVersion:                               whereHelpernull_Int{field: "`data_platform_production_order_item_operation_data`.`ProductionVersion`"},
	ProductionVersionItem:                           whereHelpernull_Int{field: "`data_platform_production_order_item_operation_data`.`ProductionVersionItem`"},
	Sequence:                                        whereHelperint{field: "`data_platform_production_order_item_operation_data`.`Sequence`"},
	SequenceText:                                    whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`SequenceText`"},
	OperationText:                                   whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`OperationText`"},
	ProductBaseUnit:                                 whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`ProductBaseUnit`"},
	ProductProductionUnit:                           whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`ProductProductionUnit`"},
	ProductOperationUnit:                            whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`ProductOperationUnit`"},
	ProductDeliveryUnit:                             whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`ProductDeliveryUnit`"},
	StandardLotSizeQuantity:                         whereHelperfloat32{field: "`data_platform_production_order_item_operation_data`.`StandardLotSizeQuantity`"},
	MinimumLotSizeQuantity:                          whereHelperfloat32{field: "`data_platform_production_order_item_operation_data`.`MinimumLotSizeQuantity`"},
	MaximumLotSizeQuantity:                          whereHelperfloat32{field: "`data_platform_production_order_item_operation_data`.`MaximumLotSizeQuantity`"},
	OperationPlannedQuantityInBaseUnit:              whereHelperfloat32{field: "`data_platform_production_order_item_operation_data`.`OperationPlannedQuantityInBaseUnit`"},
	OperationPlannedQuantityInProductionUnit:        whereHelperfloat32{field: "`data_platform_production_order_item_operation_data`.`OperationPlannedQuantityInProductionUnit`"},
	OperationPlannedQuantityInOperationUnit:         whereHelperfloat32{field: "`data_platform_production_order_item_operation_data`.`OperationPlannedQuantityInOperationUnit`"},
	OperationPlannedQuantityInDeliveryUnit:          whereHelperfloat32{field: "`data_platform_production_order_item_operation_data`.`OperationPlannedQuantityInDeliveryUnit`"},
	OperationPlannedScrapInPercent:                  whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`OperationPlannedScrapInPercent`"},
	ResponsiblePlannerGroup:                         whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`ResponsiblePlannerGroup`"},
	PlainLongText:                                   whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`PlainLongText`"},
	WorkCenter:                                      whereHelperint{field: "`data_platform_production_order_item_operation_data`.`WorkCenter`"},
	CapacityCategory:                                whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`CapacityCategory`"},
	OperationCostingRelevancyType:                   whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`OperationCostingRelevancyType`"},
	OperationSetupType:                              whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`OperationSetupType`"},
	OperationSetupGroupCategory:                     whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`OperationSetupGroupCategory`"},
	OperationSetupGroup:                             whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`OperationSetupGroup`"},
	MaximumWaitDuration:                             whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`MaximumWaitDuration`"},
	StandardWaitDuration:                            whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`StandardWaitDuration`"},
	MinimumWaitDuration:                             whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`MinimumWaitDuration`"},
	WaitDurationUnit:                                whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`WaitDurationUnit`"},
	MaximumQueueDuration:                            whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`MaximumQueueDuration`"},
	StandardQueueDuration:                           whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`StandardQueueDuration`"},
	MinimumQueueDuration:                            whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`MinimumQueueDuration`"},
	QueueDurationUnit:                               whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`QueueDurationUnit`"},
	MaximumMoveDuration:                             whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`MaximumMoveDuration`"},
	StandardMoveDuration:                            whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`StandardMoveDuration`"},
	MinimumMoveDuration:                             whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`MinimumMoveDuration`"},
	MoveDurationUnit:                                whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`MoveDurationUnit`"},
	StandardDeliveryDuration:                        whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`StandardDeliveryDuration`"},
	StandardDeliveryDurationUnit:                    whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`StandardDeliveryDurationUnit`"},
	CostElement:                                     whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`CostElement`"},
	OperationErlstSchedldExecStrtDte:                whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`OperationErlstSchedldExecStrtDte`"},
	OperationErlstSchedldExecStrtTme:                whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`OperationErlstSchedldExecStrtTme`"},
	OperationErlstSchedldExecEndDate:                whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`OperationErlstSchedldExecEndDate`"},
	OperationErlstSchedldExecEndTme:                 whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`OperationErlstSchedldExecEndTme`"},
	OperationActualExecutionStartDate:               whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`OperationActualExecutionStartDate`"},
	OperationActualExecutionStartTime:               whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`OperationActualExecutionStartTime`"},
	OperationActualExecutionEndDate:                 whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`OperationActualExecutionEndDate`"},
	OperationActualExecutionEndTime:                 whereHelpernull_String{field: "`data_platform_production_order_item_operation_data`.`OperationActualExecutionEndTime`"},
	OperationConfirmedYieldQuantityInBaseUnit:       whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`OperationConfirmedYieldQuantityInBaseUnit`"},
	OperationConfirmedYieldQuantityInProductionUnit: whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`OperationConfirmedYieldQuantityInProductionUnit`"},
	OperationConfirmedYieldQuantityInOperationUnit:  whereHelpernull_Float32{field: "`data_platform_production_order_item_operation_data`.`OperationConfirmedYieldQuantityInOperationUnit`"},
	CreationDate:                                    whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`CreationDate`"},
	CreationTime:                                    whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`CreationTime`"},
	LastChangeDate:                                  whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`LastChangeDate`"},
	LastChangeTime:                                  whereHelperstring{field: "`data_platform_production_order_item_operation_data`.`LastChangeTime`"},
	IsReleased:                                      whereHelpernull_Bool{field: "`data_platform_production_order_item_operation_data`.`IsReleased`"},
	IsPartiallyConfirmed:                            whereHelpernull_Bool{field: "`data_platform_production_order_item_operation_data`.`IsPartiallyConfirmed`"},
	IsConfirmed:                                     whereHelpernull_Bool{field: "`data_platform_production_order_item_operation_data`.`IsConfirmed`"},
	IsLocked:                                        whereHelpernull_Bool{field: "`data_platform_production_order_item_operation_data`.`IsLocked`"},
	IsCancelled:                                     whereHelpernull_Bool{field: "`data_platform_production_order_item_operation_data`.`IsCancelled`"},
	IsMarkedForDeletion:                             whereHelpernull_Bool{field: "`data_platform_production_order_item_operation_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductionOrderItemOperationDatumRels is where relationship names are stored.
var DataPlatformProductionOrderItemOperationDatumRels = struct {
	MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum             string
	OperationIDDataPlatformOperationsItemOperationDatum                   string
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum              string
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum          string
	ProductionVersionDataPlatformProductionVersionItemDatum               string
	ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum         string
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum        string
	QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum            string
	BuyerDataPlatformSCRDeliveryRelationDatum                             string
	BuyerDataPlatformSCRGeneralDatum                                      string
	StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum string
	WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum             string
	WorkCenterDataPlatformWorkCenterGeneralDatum                          string
	ProductionOrderDataPlatformProductionOrderItemDatum                   string
	OperationIDDataPlatformDeliveryDocumentHeaderData                     string
	OperationIDDataPlatformDeliveryDocumentItemData                       string
	OperationIDDataPlatformOrdersHeaderData                               string
	OperationIDDataPlatformOrdersItemData                                 string
	OperationIDDataPlatformProductionOrderConfirmationHeaderData          string
	OperationIDDataPlatformProductionOrderItemOperationComponentData      string
	OperationIDDataPlatformProductionOrderItemOperationCostingData        string
}{
	MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:             "MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	OperationIDDataPlatformOperationsItemOperationDatum:                   "OperationIDDataPlatformOperationsItemOperationDatum",
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum:              "ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum:          "ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductionVersionDataPlatformProductionVersionItemDatum:               "ProductionVersionDataPlatformProductionVersionItemDatum",
	ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum:         "ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum:        "ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum",
	QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:            "QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:                             "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:                                      "BuyerDataPlatformSCRGeneralDatum",
	StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: "StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum:             "WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum",
	WorkCenterDataPlatformWorkCenterGeneralDatum:                          "WorkCenterDataPlatformWorkCenterGeneralDatum",
	ProductionOrderDataPlatformProductionOrderItemDatum:                   "ProductionOrderDataPlatformProductionOrderItemDatum",
	OperationIDDataPlatformDeliveryDocumentHeaderData:                     "OperationIDDataPlatformDeliveryDocumentHeaderData",
	OperationIDDataPlatformDeliveryDocumentItemData:                       "OperationIDDataPlatformDeliveryDocumentItemData",
	OperationIDDataPlatformOrdersHeaderData:                               "OperationIDDataPlatformOrdersHeaderData",
	OperationIDDataPlatformOrdersItemData:                                 "OperationIDDataPlatformOrdersItemData",
	OperationIDDataPlatformProductionOrderConfirmationHeaderData:          "OperationIDDataPlatformProductionOrderConfirmationHeaderData",
	OperationIDDataPlatformProductionOrderItemOperationComponentData:      "OperationIDDataPlatformProductionOrderItemOperationComponentData",
	OperationIDDataPlatformProductionOrderItemOperationCostingData:        "OperationIDDataPlatformProductionOrderItemOperationCostingData",
}

// dataPlatformProductionOrderItemOperationDatumR is where relationships are stored.
type dataPlatformProductionOrderItemOperationDatumR struct {
	MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum             *DataPlatformQuantityUnitQuantityUnitDatum                  `boil:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	OperationIDDataPlatformOperationsItemOperationDatum                   *DataPlatformOperationsItemOperationDatum                   `boil:"OperationIDDataPlatformOperationsItemOperationDatum" json:"OperationIDDataPlatformOperationsItemOperationDatum" toml:"OperationIDDataPlatformOperationsItemOperationDatum" yaml:"OperationIDDataPlatformOperationsItemOperationDatum"`
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum              *DataPlatformQuantityUnitQuantityUnitDatum                  `boil:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum          *DataPlatformQuantityUnitQuantityUnitDatum                  `boil:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductionVersionDataPlatformProductionVersionItemDatum               *DataPlatformProductionVersionItemDatum                     `boil:"ProductionVersionDataPlatformProductionVersionItemDatum" json:"ProductionVersionDataPlatformProductionVersionItemDatum" toml:"ProductionVersionDataPlatformProductionVersionItemDatum" yaml:"ProductionVersionDataPlatformProductionVersionItemDatum"`
	ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum         *DataPlatformQuantityUnitQuantityUnitDatum                  `boil:"ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum        *DataPlatformQuantityUnitQuantityUnitDatum                  `boil:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum            *DataPlatformQuantityUnitQuantityUnitDatum                  `boil:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum                             *DataPlatformSCRDeliveryRelationDatum                       `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum                                      *DataPlatformSCRGeneralDatum                                `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum                  `boil:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum             *DataPlatformQuantityUnitQuantityUnitDatum                  `boil:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	WorkCenterDataPlatformWorkCenterGeneralDatum                          *DataPlatformWorkCenterGeneralDatum                         `boil:"WorkCenterDataPlatformWorkCenterGeneralDatum" json:"WorkCenterDataPlatformWorkCenterGeneralDatum" toml:"WorkCenterDataPlatformWorkCenterGeneralDatum" yaml:"WorkCenterDataPlatformWorkCenterGeneralDatum"`
	ProductionOrderDataPlatformProductionOrderItemDatum                   *DataPlatformProductionOrderItemDatum                       `boil:"ProductionOrderDataPlatformProductionOrderItemDatum" json:"ProductionOrderDataPlatformProductionOrderItemDatum" toml:"ProductionOrderDataPlatformProductionOrderItemDatum" yaml:"ProductionOrderDataPlatformProductionOrderItemDatum"`
	OperationIDDataPlatformDeliveryDocumentHeaderData                     DataPlatformDeliveryDocumentHeaderDatumSlice                `boil:"OperationIDDataPlatformDeliveryDocumentHeaderData" json:"OperationIDDataPlatformDeliveryDocumentHeaderData" toml:"OperationIDDataPlatformDeliveryDocumentHeaderData" yaml:"OperationIDDataPlatformDeliveryDocumentHeaderData"`
	OperationIDDataPlatformDeliveryDocumentItemData                       DataPlatformDeliveryDocumentItemDatumSlice                  `boil:"OperationIDDataPlatformDeliveryDocumentItemData" json:"OperationIDDataPlatformDeliveryDocumentItemData" toml:"OperationIDDataPlatformDeliveryDocumentItemData" yaml:"OperationIDDataPlatformDeliveryDocumentItemData"`
	OperationIDDataPlatformOrdersHeaderData                               DataPlatformOrdersHeaderDatumSlice                          `boil:"OperationIDDataPlatformOrdersHeaderData" json:"OperationIDDataPlatformOrdersHeaderData" toml:"OperationIDDataPlatformOrdersHeaderData" yaml:"OperationIDDataPlatformOrdersHeaderData"`
	OperationIDDataPlatformOrdersItemData                                 DataPlatformOrdersItemDatumSlice                            `boil:"OperationIDDataPlatformOrdersItemData" json:"OperationIDDataPlatformOrdersItemData" toml:"OperationIDDataPlatformOrdersItemData" yaml:"OperationIDDataPlatformOrdersItemData"`
	OperationIDDataPlatformProductionOrderConfirmationHeaderData          DataPlatformProductionOrderConfirmationHeaderDatumSlice     `boil:"OperationIDDataPlatformProductionOrderConfirmationHeaderData" json:"OperationIDDataPlatformProductionOrderConfirmationHeaderData" toml:"OperationIDDataPlatformProductionOrderConfirmationHeaderData" yaml:"OperationIDDataPlatformProductionOrderConfirmationHeaderData"`
	OperationIDDataPlatformProductionOrderItemOperationComponentData      DataPlatformProductionOrderItemOperationComponentDatumSlice `boil:"OperationIDDataPlatformProductionOrderItemOperationComponentData" json:"OperationIDDataPlatformProductionOrderItemOperationComponentData" toml:"OperationIDDataPlatformProductionOrderItemOperationComponentData" yaml:"OperationIDDataPlatformProductionOrderItemOperationComponentData"`
	OperationIDDataPlatformProductionOrderItemOperationCostingData        DataPlatformProductionOrderItemOperationCostingDatumSlice   `boil:"OperationIDDataPlatformProductionOrderItemOperationCostingData" json:"OperationIDDataPlatformProductionOrderItemOperationCostingData" toml:"OperationIDDataPlatformProductionOrderItemOperationCostingData" yaml:"OperationIDDataPlatformProductionOrderItemOperationCostingData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionOrderItemOperationDatumR) NewStruct() *dataPlatformProductionOrderItemOperationDatumR {
	return &dataPlatformProductionOrderItemOperationDatumR{}
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetOperationIDDataPlatformOperationsItemOperationDatum() *DataPlatformOperationsItemOperationDatum {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformOperationsItemOperationDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetProductionVersionDataPlatformProductionVersionItemDatum() *DataPlatformProductionVersionItemDatum {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformProductionVersionItemDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetWorkCenterDataPlatformWorkCenterGeneralDatum() *DataPlatformWorkCenterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.WorkCenterDataPlatformWorkCenterGeneralDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetProductionOrderDataPlatformProductionOrderItemDatum() *DataPlatformProductionOrderItemDatum {
	if r == nil {
		return nil
	}
	return r.ProductionOrderDataPlatformProductionOrderItemDatum
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetOperationIDDataPlatformDeliveryDocumentHeaderData() DataPlatformDeliveryDocumentHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformDeliveryDocumentHeaderData
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetOperationIDDataPlatformDeliveryDocumentItemData() DataPlatformDeliveryDocumentItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformDeliveryDocumentItemData
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetOperationIDDataPlatformOrdersHeaderData() DataPlatformOrdersHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformOrdersHeaderData
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetOperationIDDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformOrdersItemData
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetOperationIDDataPlatformProductionOrderConfirmationHeaderData() DataPlatformProductionOrderConfirmationHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformProductionOrderConfirmationHeaderData
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetOperationIDDataPlatformProductionOrderItemOperationComponentData() DataPlatformProductionOrderItemOperationComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformProductionOrderItemOperationComponentData
}

func (r *dataPlatformProductionOrderItemOperationDatumR) GetOperationIDDataPlatformProductionOrderItemOperationCostingData() DataPlatformProductionOrderItemOperationCostingDatumSlice {
	if r == nil {
		return nil
	}
	return r.OperationIDDataPlatformProductionOrderItemOperationCostingData
}

// dataPlatformProductionOrderItemOperationDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionOrderItemOperationDatumL struct{}

var (
	dataPlatformProductionOrderItemOperationDatumAllColumns            = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "OperationID", "OperationType", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "Product", "Buyer", "Seller", "DeliverFromParty", "DeliverFromPlant", "DeliverToParty", "DeliverToPlant", "ProductionPlantBusinessPartner", "ProductionPlant", "MRPArea", "MRPController", "ProductionVersion", "ProductionVersionItem", "Sequence", "SequenceText", "OperationText", "ProductBaseUnit", "ProductProductionUnit", "ProductOperationUnit", "ProductDeliveryUnit", "StandardLotSizeQuantity", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "OperationPlannedQuantityInBaseUnit", "OperationPlannedQuantityInProductionUnit", "OperationPlannedQuantityInOperationUnit", "OperationPlannedQuantityInDeliveryUnit", "OperationPlannedScrapInPercent", "ResponsiblePlannerGroup", "PlainLongText", "WorkCenter", "CapacityCategory", "OperationCostingRelevancyType", "OperationSetupType", "OperationSetupGroupCategory", "OperationSetupGroup", "MaximumWaitDuration", "StandardWaitDuration", "MinimumWaitDuration", "WaitDurationUnit", "MaximumQueueDuration", "StandardQueueDuration", "MinimumQueueDuration", "QueueDurationUnit", "MaximumMoveDuration", "StandardMoveDuration", "MinimumMoveDuration", "MoveDurationUnit", "StandardDeliveryDuration", "StandardDeliveryDurationUnit", "CostElement", "OperationErlstSchedldExecStrtDte", "OperationErlstSchedldExecStrtTme", "OperationErlstSchedldExecEndDate", "OperationErlstSchedldExecEndTme", "OperationActualExecutionStartDate", "OperationActualExecutionStartTime", "OperationActualExecutionEndDate", "OperationActualExecutionEndTime", "OperationConfirmedYieldQuantityInBaseUnit", "OperationConfirmedYieldQuantityInProductionUnit", "OperationConfirmedYieldQuantityInOperationUnit", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsPartiallyConfirmed", "IsConfirmed", "IsLocked", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformProductionOrderItemOperationDatumColumnsWithoutDefault = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "OperationID", "OperationType", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "Product", "Buyer", "Seller", "DeliverFromParty", "DeliverFromPlant", "DeliverToParty", "DeliverToPlant", "ProductionPlantBusinessPartner", "ProductionPlant", "MRPArea", "MRPController", "ProductionVersion", "ProductionVersionItem", "Sequence", "SequenceText", "OperationText", "ProductBaseUnit", "ProductProductionUnit", "ProductOperationUnit", "ProductDeliveryUnit", "StandardLotSizeQuantity", "MinimumLotSizeQuantity", "MaximumLotSizeQuantity", "OperationPlannedQuantityInBaseUnit", "OperationPlannedQuantityInProductionUnit", "OperationPlannedQuantityInOperationUnit", "OperationPlannedQuantityInDeliveryUnit", "OperationPlannedScrapInPercent", "ResponsiblePlannerGroup", "PlainLongText", "WorkCenter", "CapacityCategory", "OperationCostingRelevancyType", "OperationSetupType", "OperationSetupGroupCategory", "OperationSetupGroup", "MaximumWaitDuration", "StandardWaitDuration", "MinimumWaitDuration", "WaitDurationUnit", "MaximumQueueDuration", "StandardQueueDuration", "MinimumQueueDuration", "QueueDurationUnit", "MaximumMoveDuration", "StandardMoveDuration", "MinimumMoveDuration", "MoveDurationUnit", "StandardDeliveryDuration", "StandardDeliveryDurationUnit", "CostElement", "OperationErlstSchedldExecStrtDte", "OperationErlstSchedldExecStrtTme", "OperationErlstSchedldExecEndDate", "OperationErlstSchedldExecEndTme", "OperationActualExecutionStartDate", "OperationActualExecutionStartTime", "OperationActualExecutionEndDate", "OperationActualExecutionEndTime", "OperationConfirmedYieldQuantityInBaseUnit", "OperationConfirmedYieldQuantityInProductionUnit", "OperationConfirmedYieldQuantityInOperationUnit", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsPartiallyConfirmed", "IsConfirmed", "IsLocked", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformProductionOrderItemOperationDatumColumnsWithDefault    = []string{}
	dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns     = []string{"ProductionOrder", "ProductionOrderItem", "Operations", "OperationsItem", "OperationID"}
	dataPlatformProductionOrderItemOperationDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionOrderItemOperationDatumSlice is an alias for a slice of pointers to DataPlatformProductionOrderItemOperationDatum.
	// This should almost always be used instead of []DataPlatformProductionOrderItemOperationDatum.
	DataPlatformProductionOrderItemOperationDatumSlice []*DataPlatformProductionOrderItemOperationDatum

	dataPlatformProductionOrderItemOperationDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionOrderItemOperationDatumType                 = reflect.TypeOf(&DataPlatformProductionOrderItemOperationDatum{})
	dataPlatformProductionOrderItemOperationDatumMapping              = queries.MakeStructMapping(dataPlatformProductionOrderItemOperationDatumType)
	dataPlatformProductionOrderItemOperationDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionOrderItemOperationDatumType, dataPlatformProductionOrderItemOperationDatumMapping, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns)
	dataPlatformProductionOrderItemOperationDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemOperationDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionOrderItemOperationDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemOperationDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionOrderItemOperationDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionOrderItemOperationDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionOrderItemOperationDatum record from the query.
func (q dataPlatformProductionOrderItemOperationDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionOrderItemOperationDatum, error) {
	o := &DataPlatformProductionOrderItemOperationDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_order_item_operation_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionOrderItemOperationDatum records from the query.
func (q dataPlatformProductionOrderItemOperationDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionOrderItemOperationDatumSlice, error) {
	var o []*DataPlatformProductionOrderItemOperationDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionOrderItemOperationDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionOrderItemOperationDatum records in the query.
func (q dataPlatformProductionOrderItemOperationDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_order_item_operation_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionOrderItemOperationDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_order_item_operation_data exists")
	}

	return count > 0, nil
}

// MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.MoveDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// OperationIDDataPlatformOperationsItemOperationDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) OperationIDDataPlatformOperationsItemOperationDatum(mods ...qm.QueryMod) dataPlatformOperationsItemOperationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OperationID` = ?", o.OperationID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOperationsItemOperationData(queryMods...)
}

// ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductBaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductDeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductionVersionDataPlatformProductionVersionItemDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) ProductionVersionDataPlatformProductionVersionItemDatum(mods ...qm.QueryMod) dataPlatformProductionVersionItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductionVersion` = ?", o.ProductionVersion),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionVersionItemData(queryMods...)
}

// ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductOperationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductProductionUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.QueueDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.StandardDeliveryDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.WaitDurationUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// WorkCenterDataPlatformWorkCenterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) WorkCenterDataPlatformWorkCenterGeneralDatum(mods ...qm.QueryMod) dataPlatformWorkCenterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`WorkCenter` = ?", o.WorkCenter),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformWorkCenterGeneralData(queryMods...)
}

// ProductionOrderDataPlatformProductionOrderItemDatum pointed to by the foreign key.
func (o *DataPlatformProductionOrderItemOperationDatum) ProductionOrderDataPlatformProductionOrderItemDatum(mods ...qm.QueryMod) dataPlatformProductionOrderItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductionOrder` = ?", o.ProductionOrder),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionOrderItemData(queryMods...)
}

// OperationIDDataPlatformDeliveryDocumentHeaderData retrieves all the data_platform_delivery_document_header_datum's DataPlatformDeliveryDocumentHeaderData with an executor via OperationID column.
func (o *DataPlatformProductionOrderItemOperationDatum) OperationIDDataPlatformDeliveryDocumentHeaderData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_header_data`.`OperationID`=?", o.OperationID),
	)

	return DataPlatformDeliveryDocumentHeaderData(queryMods...)
}

// OperationIDDataPlatformDeliveryDocumentItemData retrieves all the data_platform_delivery_document_item_datum's DataPlatformDeliveryDocumentItemData with an executor via OperationID column.
func (o *DataPlatformProductionOrderItemOperationDatum) OperationIDDataPlatformDeliveryDocumentItemData(mods ...qm.QueryMod) dataPlatformDeliveryDocumentItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_delivery_document_item_data`.`OperationID`=?", o.OperationID),
	)

	return DataPlatformDeliveryDocumentItemData(queryMods...)
}

// OperationIDDataPlatformOrdersHeaderData retrieves all the data_platform_orders_header_datum's DataPlatformOrdersHeaderData with an executor via OperationID column.
func (o *DataPlatformProductionOrderItemOperationDatum) OperationIDDataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_data`.`OperationID`=?", o.OperationID),
	)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// OperationIDDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via OperationID column.
func (o *DataPlatformProductionOrderItemOperationDatum) OperationIDDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`OperationID`=?", o.OperationID),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// OperationIDDataPlatformProductionOrderConfirmationHeaderData retrieves all the data_platform_production_order_confirmation_header_datum's DataPlatformProductionOrderConfirmationHeaderData with an executor via OperationID column.
func (o *DataPlatformProductionOrderItemOperationDatum) OperationIDDataPlatformProductionOrderConfirmationHeaderData(mods ...qm.QueryMod) dataPlatformProductionOrderConfirmationHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_confirmation_header_data`.`OperationID`=?", o.OperationID),
	)

	return DataPlatformProductionOrderConfirmationHeaderData(queryMods...)
}

// OperationIDDataPlatformProductionOrderItemOperationComponentData retrieves all the data_platform_production_order_item_operation_component_datum's DataPlatformProductionOrderItemOperationComponentData with an executor via OperationID column.
func (o *DataPlatformProductionOrderItemOperationDatum) OperationIDDataPlatformProductionOrderItemOperationComponentData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_component_data`.`OperationID`=?", o.OperationID),
	)

	return DataPlatformProductionOrderItemOperationComponentData(queryMods...)
}

// OperationIDDataPlatformProductionOrderItemOperationCostingData retrieves all the data_platform_production_order_item_operation_costing_datum's DataPlatformProductionOrderItemOperationCostingData with an executor via OperationID column.
func (o *DataPlatformProductionOrderItemOperationDatum) OperationIDDataPlatformProductionOrderItemOperationCostingData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationCostingDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_costing_data`.`OperationID`=?", o.OperationID),
	)

	return DataPlatformProductionOrderItemOperationCostingData(queryMods...)
}

// LoadMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		if !queries.IsNil(object.MoveDurationUnit) {
			args = append(args, object.MoveDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MoveDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MoveDurationUnit) {
				args = append(args, obj.MoveDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MoveDurationUnit, foreign.QuantityUnit) {
				local.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformOperationsItemOperationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadOperationIDDataPlatformOperationsItemOperationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.OperationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.OperationID {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_item_operation_data`),
		qm.WhereIn(`data_platform_operations_item_operation_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOperationsItemOperationDatum")
	}

	var resultSlice []*DataPlatformOperationsItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOperationsItemOperationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_operations_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_item_operation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OperationIDDataPlatformOperationsItemOperationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OperationID == foreign.OperationID {
				local.R.OperationIDDataPlatformOperationsItemOperationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.ProductBaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductBaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductBaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductBaseUnit == foreign.QuantityUnit {
				local.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.ProductDeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductDeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductDeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductDeliveryUnit == foreign.QuantityUnit {
				local.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformProductionVersionItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadProductionVersionDataPlatformProductionVersionItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		if !queries.IsNil(object.ProductionVersion) {
			args = append(args, object.ProductionVersion)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionVersion) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductionVersion) {
				args = append(args, obj.ProductionVersion)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_version_item_data`),
		qm.WhereIn(`data_platform_production_version_item_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionVersionItemDatum")
	}

	var resultSlice []*DataPlatformProductionVersionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionVersionItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_version_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_version_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionVersionDataPlatformProductionVersionItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductionVersion, foreign.ProductionVersion) {
				local.R.ProductionVersionDataPlatformProductionVersionItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.ProductOperationUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductOperationUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductOperationUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductOperationUnit == foreign.QuantityUnit {
				local.R.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.ProductProductionUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductProductionUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductProductionUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductProductionUnit == foreign.QuantityUnit {
				local.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		if !queries.IsNil(object.QueueDurationUnit) {
			args = append(args, object.QueueDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.QueueDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.QueueDurationUnit) {
				args = append(args, obj.QueueDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.QueueDurationUnit, foreign.QuantityUnit) {
				local.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		if !queries.IsNil(object.StandardDeliveryDurationUnit) {
			args = append(args, object.StandardDeliveryDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.StandardDeliveryDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.StandardDeliveryDurationUnit) {
				args = append(args, obj.StandardDeliveryDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StandardDeliveryDurationUnit, foreign.QuantityUnit) {
				local.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		if !queries.IsNil(object.WaitDurationUnit) {
			args = append(args, object.WaitDurationUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.WaitDurationUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.WaitDurationUnit) {
				args = append(args, obj.WaitDurationUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.WaitDurationUnit, foreign.QuantityUnit) {
				local.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadWorkCenterDataPlatformWorkCenterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.WorkCenter)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.WorkCenter {
					continue Outer
				}
			}

			args = append(args, obj.WorkCenter)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_work_center_general_data`),
		qm.WhereIn(`data_platform_work_center_general_data.WorkCenter in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformWorkCenterGeneralDatum")
	}

	var resultSlice []*DataPlatformWorkCenterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformWorkCenterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_work_center_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_work_center_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WorkCenterDataPlatformWorkCenterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WorkCenter == foreign.WorkCenter {
				local.R.WorkCenterDataPlatformWorkCenterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionOrderDataPlatformProductionOrderItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadProductionOrderDataPlatformProductionOrderItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.ProductionOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductionOrder {
					continue Outer
				}
			}

			args = append(args, obj.ProductionOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_data`),
		qm.WhereIn(`data_platform_production_order_item_data.ProductionOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionOrderItemDatum")
	}

	var resultSlice []*DataPlatformProductionOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionOrderItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionOrderDataPlatformProductionOrderItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductionOrder == foreign.ProductionOrder {
				local.R.ProductionOrderDataPlatformProductionOrderItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformDeliveryDocumentHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadOperationIDDataPlatformDeliveryDocumentHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.OperationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OperationID) {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_header_data`),
		qm.WhereIn(`data_platform_delivery_document_header_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_header_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_header_data")
	}

	if singular {
		object.R.OperationIDDataPlatformDeliveryDocumentHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OperationID, foreign.OperationID) {
				local.R.OperationIDDataPlatformDeliveryDocumentHeaderData = append(local.R.OperationIDDataPlatformDeliveryDocumentHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformDeliveryDocumentItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadOperationIDDataPlatformDeliveryDocumentItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.OperationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OperationID) {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_delivery_document_item_data`),
		qm.WhereIn(`data_platform_delivery_document_item_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_delivery_document_item_data")
	}

	var resultSlice []*DataPlatformDeliveryDocumentItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_delivery_document_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_delivery_document_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_delivery_document_item_data")
	}

	if singular {
		object.R.OperationIDDataPlatformDeliveryDocumentItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OperationID, foreign.OperationID) {
				local.R.OperationIDDataPlatformDeliveryDocumentItemData = append(local.R.OperationIDDataPlatformDeliveryDocumentItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformOrdersHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadOperationIDDataPlatformOrdersHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.OperationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OperationID) {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if singular {
		object.R.OperationIDDataPlatformOrdersHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OperationID, foreign.OperationID) {
				local.R.OperationIDDataPlatformOrdersHeaderData = append(local.R.OperationIDDataPlatformOrdersHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadOperationIDDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.OperationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OperationID) {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.OperationIDDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.OperationID, foreign.OperationID) {
				local.R.OperationIDDataPlatformOrdersItemData = append(local.R.OperationIDDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformProductionOrderConfirmationHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadOperationIDDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.OperationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.OperationID {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_confirmation_header_data`),
		qm.WhereIn(`data_platform_production_order_confirmation_header_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_confirmation_header_data")
	}

	var resultSlice []*DataPlatformProductionOrderConfirmationHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_confirmation_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_confirmation_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_confirmation_header_data")
	}

	if singular {
		object.R.OperationIDDataPlatformProductionOrderConfirmationHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.OperationID == foreign.OperationID {
				local.R.OperationIDDataPlatformProductionOrderConfirmationHeaderData = append(local.R.OperationIDDataPlatformProductionOrderConfirmationHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformProductionOrderItemOperationComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadOperationIDDataPlatformProductionOrderItemOperationComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.OperationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.OperationID {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_component_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_component_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_component_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_component_data")
	}

	if singular {
		object.R.OperationIDDataPlatformProductionOrderItemOperationComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.OperationID == foreign.OperationID {
				local.R.OperationIDDataPlatformProductionOrderItemOperationComponentData = append(local.R.OperationIDDataPlatformProductionOrderItemOperationComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOperationIDDataPlatformProductionOrderItemOperationCostingData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionOrderItemOperationDatumL) LoadOperationIDDataPlatformProductionOrderItemOperationCostingData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionOrderItemOperationDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionOrderItemOperationDatum
	var object *DataPlatformProductionOrderItemOperationDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionOrderItemOperationDatum.(*DataPlatformProductionOrderItemOperationDatum)
		if !ok {
			object = new(DataPlatformProductionOrderItemOperationDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionOrderItemOperationDatum.(*[]*DataPlatformProductionOrderItemOperationDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionOrderItemOperationDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionOrderItemOperationDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionOrderItemOperationDatumR{}
		}
		args = append(args, object.OperationID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionOrderItemOperationDatumR{}
			}

			for _, a := range args {
				if a == obj.OperationID {
					continue Outer
				}
			}

			args = append(args, obj.OperationID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_costing_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_costing_data.OperationID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_costing_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationCostingDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_costing_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_costing_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_costing_data")
	}

	if singular {
		object.R.OperationIDDataPlatformProductionOrderItemOperationCostingData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.OperationID == foreign.OperationID {
				local.R.OperationIDDataPlatformProductionOrderItemOperationCostingData = append(local.R.OperationIDDataPlatformProductionOrderItemOperationCostingData, foreign)
				break
			}
		}
	}

	return nil
}

// SetMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"MoveDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MoveDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformProductionOrderItemOperationDatum) RemoveMoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.MoveDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("MoveDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MoveDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOperationIDDataPlatformOperationsItemOperationDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.OperationIDDataPlatformOperationsItemOperationDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetOperationIDDataPlatformOperationsItemOperationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOperationsItemOperationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OperationID, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OperationID = related.OperationID
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			OperationIDDataPlatformOperationsItemOperationDatum: related,
		}
	} else {
		o.R.OperationIDDataPlatformOperationsItemOperationDatum = related
	}

	return nil
}

// SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductBaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductDeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductionVersionDataPlatformProductionVersionItemDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetProductionVersionDataPlatformProductionVersionItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionVersionItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductionVersion, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductionVersion, related.ProductionVersion)
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			ProductionVersionDataPlatformProductionVersionItemDatum: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformProductionVersionItemDatum = related
	}

	return nil
}

// RemoveProductionVersionDataPlatformProductionVersionItemDatum relationship.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum to nil.
func (o *DataPlatformProductionOrderItemOperationDatum) RemoveProductionVersionDataPlatformProductionVersionItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductionVersionItemDatum) error {
	var err error

	queries.SetScanner(&o.ProductionVersion, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductionVersion")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductionVersionDataPlatformProductionVersionItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductOperationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductOperationUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductOperationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductProductionUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"QueueDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.QueueDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformProductionOrderItemOperationDatum) RemoveQueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.QueueDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("QueueDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.QueueDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// SetStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"StandardDeliveryDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StandardDeliveryDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformProductionOrderItemOperationDatum) RemoveStandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.StandardDeliveryDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("StandardDeliveryDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.StandardDeliveryDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"WaitDurationUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.WaitDurationUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformProductionOrderItemOperationDatum) RemoveWaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.WaitDurationUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("WaitDurationUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.WaitDurationUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetWorkCenterDataPlatformWorkCenterGeneralDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.WorkCenterDataPlatformWorkCenterGeneralDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetWorkCenterDataPlatformWorkCenterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformWorkCenterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"WorkCenter"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.WorkCenter, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WorkCenter = related.WorkCenter
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			WorkCenterDataPlatformWorkCenterGeneralDatum: related,
		}
	} else {
		o.R.WorkCenterDataPlatformWorkCenterGeneralDatum = related
	}

	return nil
}

// SetProductionOrderDataPlatformProductionOrderItemDatum of the dataPlatformProductionOrderItemOperationDatum to the related item.
// Sets o.R.ProductionOrderDataPlatformProductionOrderItemDatum to related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetProductionOrderDataPlatformProductionOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionOrderItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionOrder"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductionOrder, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductionOrder = related.ProductionOrder
	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			ProductionOrderDataPlatformProductionOrderItemDatum: related,
		}
	} else {
		o.R.ProductionOrderDataPlatformProductionOrderItemDatum = related
	}

	return nil
}

// AddOperationIDDataPlatformDeliveryDocumentHeaderData adds the given related objects to the existing relationships
// of the data_platform_production_order_item_operation_datum, optionally inserting them as new records.
// Appends related to o.R.OperationIDDataPlatformDeliveryDocumentHeaderData.
func (o *DataPlatformProductionOrderItemOperationDatum) AddOperationIDDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OperationID, o.OperationID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OperationID, rel.DeliveryDocument}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OperationID, o.OperationID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			OperationIDDataPlatformDeliveryDocumentHeaderData: related,
		}
	} else {
		o.R.OperationIDDataPlatformDeliveryDocumentHeaderData = append(o.R.OperationIDDataPlatformDeliveryDocumentHeaderData, related...)
	}

	return nil
}

// SetOperationIDDataPlatformDeliveryDocumentHeaderData removes all previously related items of the
// data_platform_production_order_item_operation_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OperationIDDataPlatformProductionOrderItemOperationDatum's OperationIDDataPlatformDeliveryDocumentHeaderData accordingly.
// Replaces o.R.OperationIDDataPlatformDeliveryDocumentHeaderData with related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetOperationIDDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	query := "update `data_platform_delivery_document_header_data` set `OperationID` = null where `OperationID` = ?"
	values := []interface{}{o.OperationID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.OperationIDDataPlatformDeliveryDocumentHeaderData = nil
	}

	return o.AddOperationIDDataPlatformDeliveryDocumentHeaderData(ctx, exec, insert, related...)
}

// RemoveOperationIDDataPlatformDeliveryDocumentHeaderData relationships from objects passed in.
// Removes related items from R.OperationIDDataPlatformDeliveryDocumentHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductionOrderItemOperationDatum) RemoveOperationIDDataPlatformDeliveryDocumentHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OperationID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("OperationID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OperationIDDataPlatformDeliveryDocumentHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.OperationIDDataPlatformDeliveryDocumentHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.OperationIDDataPlatformDeliveryDocumentHeaderData[i] = o.R.OperationIDDataPlatformDeliveryDocumentHeaderData[ln-1]
			}
			o.R.OperationIDDataPlatformDeliveryDocumentHeaderData = o.R.OperationIDDataPlatformDeliveryDocumentHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddOperationIDDataPlatformDeliveryDocumentItemData adds the given related objects to the existing relationships
// of the data_platform_production_order_item_operation_datum, optionally inserting them as new records.
// Appends related to o.R.OperationIDDataPlatformDeliveryDocumentItemData.
func (o *DataPlatformProductionOrderItemOperationDatum) AddOperationIDDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OperationID, o.OperationID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_delivery_document_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformDeliveryDocumentItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OperationID, rel.DeliveryDocument, rel.DeliveryDocumentItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OperationID, o.OperationID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			OperationIDDataPlatformDeliveryDocumentItemData: related,
		}
	} else {
		o.R.OperationIDDataPlatformDeliveryDocumentItemData = append(o.R.OperationIDDataPlatformDeliveryDocumentItemData, related...)
	}

	return nil
}

// SetOperationIDDataPlatformDeliveryDocumentItemData removes all previously related items of the
// data_platform_production_order_item_operation_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OperationIDDataPlatformProductionOrderItemOperationDatum's OperationIDDataPlatformDeliveryDocumentItemData accordingly.
// Replaces o.R.OperationIDDataPlatformDeliveryDocumentItemData with related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetOperationIDDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	query := "update `data_platform_delivery_document_item_data` set `OperationID` = null where `OperationID` = ?"
	values := []interface{}{o.OperationID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.OperationIDDataPlatformDeliveryDocumentItemData = nil
	}

	return o.AddOperationIDDataPlatformDeliveryDocumentItemData(ctx, exec, insert, related...)
}

// RemoveOperationIDDataPlatformDeliveryDocumentItemData relationships from objects passed in.
// Removes related items from R.OperationIDDataPlatformDeliveryDocumentItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductionOrderItemOperationDatum) RemoveOperationIDDataPlatformDeliveryDocumentItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformDeliveryDocumentItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OperationID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("OperationID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OperationIDDataPlatformDeliveryDocumentItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.OperationIDDataPlatformDeliveryDocumentItemData)
			if ln > 1 && i < ln-1 {
				o.R.OperationIDDataPlatformDeliveryDocumentItemData[i] = o.R.OperationIDDataPlatformDeliveryDocumentItemData[ln-1]
			}
			o.R.OperationIDDataPlatformDeliveryDocumentItemData = o.R.OperationIDDataPlatformDeliveryDocumentItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddOperationIDDataPlatformOrdersHeaderData adds the given related objects to the existing relationships
// of the data_platform_production_order_item_operation_datum, optionally inserting them as new records.
// Appends related to o.R.OperationIDDataPlatformOrdersHeaderData.
func (o *DataPlatformProductionOrderItemOperationDatum) AddOperationIDDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OperationID, o.OperationID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OperationID, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OperationID, o.OperationID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			OperationIDDataPlatformOrdersHeaderData: related,
		}
	} else {
		o.R.OperationIDDataPlatformOrdersHeaderData = append(o.R.OperationIDDataPlatformOrdersHeaderData, related...)
	}

	return nil
}

// SetOperationIDDataPlatformOrdersHeaderData removes all previously related items of the
// data_platform_production_order_item_operation_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OperationIDDataPlatformProductionOrderItemOperationDatum's OperationIDDataPlatformOrdersHeaderData accordingly.
// Replaces o.R.OperationIDDataPlatformOrdersHeaderData with related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetOperationIDDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	query := "update `data_platform_orders_header_data` set `OperationID` = null where `OperationID` = ?"
	values := []interface{}{o.OperationID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.OperationIDDataPlatformOrdersHeaderData = nil
	}

	return o.AddOperationIDDataPlatformOrdersHeaderData(ctx, exec, insert, related...)
}

// RemoveOperationIDDataPlatformOrdersHeaderData relationships from objects passed in.
// Removes related items from R.OperationIDDataPlatformOrdersHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductionOrderItemOperationDatum) RemoveOperationIDDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OperationID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("OperationID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OperationIDDataPlatformOrdersHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.OperationIDDataPlatformOrdersHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.OperationIDDataPlatformOrdersHeaderData[i] = o.R.OperationIDDataPlatformOrdersHeaderData[ln-1]
			}
			o.R.OperationIDDataPlatformOrdersHeaderData = o.R.OperationIDDataPlatformOrdersHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddOperationIDDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_production_order_item_operation_datum, optionally inserting them as new records.
// Appends related to o.R.OperationIDDataPlatformOrdersItemData.
func (o *DataPlatformProductionOrderItemOperationDatum) AddOperationIDDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OperationID, o.OperationID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OperationID, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OperationID, o.OperationID)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			OperationIDDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.OperationIDDataPlatformOrdersItemData = append(o.R.OperationIDDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetOperationIDDataPlatformOrdersItemData removes all previously related items of the
// data_platform_production_order_item_operation_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OperationIDDataPlatformProductionOrderItemOperationDatum's OperationIDDataPlatformOrdersItemData accordingly.
// Replaces o.R.OperationIDDataPlatformOrdersItemData with related.
func (o *DataPlatformProductionOrderItemOperationDatum) SetOperationIDDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `OperationID` = null where `OperationID` = ?"
	values := []interface{}{o.OperationID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.OperationIDDataPlatformOrdersItemData = nil
	}

	return o.AddOperationIDDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveOperationIDDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.OperationIDDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductionOrderItemOperationDatum) RemoveOperationIDDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OperationID, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("OperationID")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OperationIDDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.OperationIDDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.OperationIDDataPlatformOrdersItemData[i] = o.R.OperationIDDataPlatformOrdersItemData[ln-1]
			}
			o.R.OperationIDDataPlatformOrdersItemData = o.R.OperationIDDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddOperationIDDataPlatformProductionOrderConfirmationHeaderData adds the given related objects to the existing relationships
// of the data_platform_production_order_item_operation_datum, optionally inserting them as new records.
// Appends related to o.R.OperationIDDataPlatformProductionOrderConfirmationHeaderData.
func (o *DataPlatformProductionOrderItemOperationDatum) AddOperationIDDataPlatformProductionOrderConfirmationHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderConfirmationHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OperationID = o.OperationID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_confirmation_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderConfirmationHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OperationID, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.ConfirmationCountingID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OperationID = o.OperationID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			OperationIDDataPlatformProductionOrderConfirmationHeaderData: related,
		}
	} else {
		o.R.OperationIDDataPlatformProductionOrderConfirmationHeaderData = append(o.R.OperationIDDataPlatformProductionOrderConfirmationHeaderData, related...)
	}

	return nil
}

// AddOperationIDDataPlatformProductionOrderItemOperationComponentData adds the given related objects to the existing relationships
// of the data_platform_production_order_item_operation_datum, optionally inserting them as new records.
// Appends related to o.R.OperationIDDataPlatformProductionOrderItemOperationComponentData.
func (o *DataPlatformProductionOrderItemOperationDatum) AddOperationIDDataPlatformProductionOrderItemOperationComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OperationID = o.OperationID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OperationID, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OperationID = o.OperationID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			OperationIDDataPlatformProductionOrderItemOperationComponentData: related,
		}
	} else {
		o.R.OperationIDDataPlatformProductionOrderItemOperationComponentData = append(o.R.OperationIDDataPlatformProductionOrderItemOperationComponentData, related...)
	}

	return nil
}

// AddOperationIDDataPlatformProductionOrderItemOperationCostingData adds the given related objects to the existing relationships
// of the data_platform_production_order_item_operation_datum, optionally inserting them as new records.
// Appends related to o.R.OperationIDDataPlatformProductionOrderItemOperationCostingData.
func (o *DataPlatformProductionOrderItemOperationDatum) AddOperationIDDataPlatformProductionOrderItemOperationCostingData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationCostingDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.OperationID = o.OperationID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_costing_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"OperationID"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationCostingDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.OperationID, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.OperationID = o.OperationID
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionOrderItemOperationDatumR{
			OperationIDDataPlatformProductionOrderItemOperationCostingData: related,
		}
	} else {
		o.R.OperationIDDataPlatformProductionOrderItemOperationCostingData = append(o.R.OperationIDDataPlatformProductionOrderItemOperationCostingData, related...)
	}

	return nil
}

// DataPlatformProductionOrderItemOperationData retrieves all the records using an executor.
func DataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_order_item_operation_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_order_item_operation_data`.*"})
	}

	return dataPlatformProductionOrderItemOperationDatumQuery{q}
}

// FindDataPlatformProductionOrderItemOperationDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionOrderItemOperationDatum(ctx context.Context, exec boil.ContextExecutor, productionOrder int, productionOrderItem int, operations int, operationsItem int, operationID int, selectCols ...string) (*DataPlatformProductionOrderItemOperationDatum, error) {
	dataPlatformProductionOrderItemOperationDatumObj := &DataPlatformProductionOrderItemOperationDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_order_item_operation_data` where `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=?", sel,
	)

	q := queries.Raw(query, productionOrder, productionOrderItem, operations, operationsItem, operationID)

	err := q.Bind(ctx, exec, dataPlatformProductionOrderItemOperationDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_order_item_operation_data")
	}

	return dataPlatformProductionOrderItemOperationDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionOrderItemOperationDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_item_operation_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderItemOperationDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionOrderItemOperationDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemOperationDatumInsertCache[key]
	dataPlatformProductionOrderItemOperationDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionOrderItemOperationDatumAllColumns,
			dataPlatformProductionOrderItemOperationDatumColumnsWithDefault,
			dataPlatformProductionOrderItemOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationDatumType, dataPlatformProductionOrderItemOperationDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationDatumType, dataPlatformProductionOrderItemOperationDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_order_item_operation_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_order_item_operation_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_order_item_operation_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_order_item_operation_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionOrder,
		o.ProductionOrderItem,
		o.Operations,
		o.OperationsItem,
		o.OperationID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_item_operation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderItemOperationDatumInsertCacheMut.Lock()
		dataPlatformProductionOrderItemOperationDatumInsertCache[key] = cache
		dataPlatformProductionOrderItemOperationDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionOrderItemOperationDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionOrderItemOperationDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionOrderItemOperationDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemOperationDatumUpdateCache[key]
	dataPlatformProductionOrderItemOperationDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionOrderItemOperationDatumAllColumns,
			dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_order_item_operation_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationDatumType, dataPlatformProductionOrderItemOperationDatumMapping, append(wl, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_order_item_operation_data row")
	}

	if !cached {
		dataPlatformProductionOrderItemOperationDatumUpdateCacheMut.Lock()
		dataPlatformProductionOrderItemOperationDatumUpdateCache[key] = cache
		dataPlatformProductionOrderItemOperationDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionOrderItemOperationDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_order_item_operation_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionOrderItemOperationDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionOrderItemOperationDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionOrderItemOperationDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionOrderItemOperationDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_order_item_operation_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionOrderItemOperationDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionOrderItemOperationDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionOrderItemOperationDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionOrderItemOperationDatumUpsertCache[key]
	dataPlatformProductionOrderItemOperationDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionOrderItemOperationDatumAllColumns,
			dataPlatformProductionOrderItemOperationDatumColumnsWithDefault,
			dataPlatformProductionOrderItemOperationDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionOrderItemOperationDatumAllColumns,
			dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_order_item_operation_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_order_item_operation_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_order_item_operation_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationDatumType, dataPlatformProductionOrderItemOperationDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionOrderItemOperationDatumType, dataPlatformProductionOrderItemOperationDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_order_item_operation_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionOrderItemOperationDatumType, dataPlatformProductionOrderItemOperationDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_order_item_operation_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_order_item_operation_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionOrderItemOperationDatumUpsertCacheMut.Lock()
		dataPlatformProductionOrderItemOperationDatumUpsertCache[key] = cache
		dataPlatformProductionOrderItemOperationDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionOrderItemOperationDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionOrderItemOperationDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionOrderItemOperationDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionOrderItemOperationDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_order_item_operation_data` WHERE `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_order_item_operation_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionOrderItemOperationDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionOrderItemOperationDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_order_item_operation_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionOrderItemOperationDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_order_item_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionOrderItemOperationDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionOrderItemOperationDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionOrderItemOperationDatum(ctx, exec, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionOrderItemOperationDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionOrderItemOperationDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionOrderItemOperationDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_order_item_operation_data`.* FROM `data_platform_production_order_item_operation_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionOrderItemOperationDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionOrderItemOperationDatumExists checks if the DataPlatformProductionOrderItemOperationDatum row exists.
func DataPlatformProductionOrderItemOperationDatumExists(ctx context.Context, exec boil.ContextExecutor, productionOrder int, productionOrderItem int, operations int, operationsItem int, operationID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_order_item_operation_data` where `ProductionOrder`=? AND `ProductionOrderItem`=? AND `Operations`=? AND `OperationsItem`=? AND `OperationID`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionOrder, productionOrderItem, operations, operationsItem, operationID)
	}
	row := exec.QueryRowContext(ctx, sql, productionOrder, productionOrderItem, operations, operationsItem, operationID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_order_item_operation_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionOrderItemOperationDatum row exists.
func (o *DataPlatformProductionOrderItemOperationDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionOrderItemOperationDatumExists(ctx, exec, o.ProductionOrder, o.ProductionOrderItem, o.Operations, o.OperationsItem, o.OperationID)
}
