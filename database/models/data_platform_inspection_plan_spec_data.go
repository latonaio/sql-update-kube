// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInspectionPlanSpecDatum is an object representing the database table.
type DataPlatformInspectionPlanSpecDatum struct {
	InspectionPlantBusinessPartner int          `boil:"InspectionPlantBusinessPartner" json:"InspectionPlantBusinessPartner" toml:"InspectionPlantBusinessPartner" yaml:"InspectionPlantBusinessPartner"`
	InspectionPlant                string       `boil:"InspectionPlant" json:"InspectionPlant" toml:"InspectionPlant" yaml:"InspectionPlant"`
	InspectionPlan                 int          `boil:"InspectionPlan" json:"InspectionPlan" toml:"InspectionPlan" yaml:"InspectionPlan"`
	InspectionPlanGroup            int          `boil:"InspectionPlanGroup" json:"InspectionPlanGroup" toml:"InspectionPlanGroup" yaml:"InspectionPlanGroup"`
	InspectionPlanInternalVersion  int          `boil:"InspectionPlanInternalVersion" json:"InspectionPlanInternalVersion" toml:"InspectionPlanInternalVersion" yaml:"InspectionPlanInternalVersion"`
	SpecType                       string       `boil:"SpecType" json:"SpecType" toml:"SpecType" yaml:"SpecType"`
	SpecTypeUpperSpecLimit         null.Float32 `boil:"SpecTypeUpperSpecLimit" json:"SpecTypeUpperSpecLimit,omitempty" toml:"SpecTypeUpperSpecLimit" yaml:"SpecTypeUpperSpecLimit,omitempty"`
	SpecTypeLowerSpecLimit         null.Float32 `boil:"SpecTypeLowerSpecLimit" json:"SpecTypeLowerSpecLimit,omitempty" toml:"SpecTypeLowerSpecLimit" yaml:"SpecTypeLowerSpecLimit,omitempty"`
	SpecTypeHeatNumber             null.Float32 `boil:"SpecTypeHeatNumber" json:"SpecTypeHeatNumber,omitempty" toml:"SpecTypeHeatNumber" yaml:"SpecTypeHeatNumber,omitempty"`
	SpecTypeUnit                   null.String  `boil:"SpecTypeUnit" json:"SpecTypeUnit,omitempty" toml:"SpecTypeUnit" yaml:"SpecTypeUnit,omitempty"`
	ValidityStartDate              string       `boil:"ValidityStartDate" json:"ValidityStartDate" toml:"ValidityStartDate" yaml:"ValidityStartDate"`
	ValidityEndDate                string       `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	CreationDate                   null.String  `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	CreationTime                   null.String  `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	LastChangeDate                 null.String  `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeTime                 null.String  `boil:"LastChangeTime" json:"LastChangeTime,omitempty" toml:"LastChangeTime" yaml:"LastChangeTime,omitempty"`
	IsMarkedForDeletion            null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformInspectionPlanSpecDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInspectionPlanSpecDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInspectionPlanSpecDatumColumns = struct {
	InspectionPlantBusinessPartner string
	InspectionPlant                string
	InspectionPlan                 string
	InspectionPlanGroup            string
	InspectionPlanInternalVersion  string
	SpecType                       string
	SpecTypeUpperSpecLimit         string
	SpecTypeLowerSpecLimit         string
	SpecTypeHeatNumber             string
	SpecTypeUnit                   string
	ValidityStartDate              string
	ValidityEndDate                string
	CreationDate                   string
	CreationTime                   string
	LastChangeDate                 string
	LastChangeTime                 string
	IsMarkedForDeletion            string
}{
	InspectionPlantBusinessPartner: "InspectionPlantBusinessPartner",
	InspectionPlant:                "InspectionPlant",
	InspectionPlan:                 "InspectionPlan",
	InspectionPlanGroup:            "InspectionPlanGroup",
	InspectionPlanInternalVersion:  "InspectionPlanInternalVersion",
	SpecType:                       "SpecType",
	SpecTypeUpperSpecLimit:         "SpecTypeUpperSpecLimit",
	SpecTypeLowerSpecLimit:         "SpecTypeLowerSpecLimit",
	SpecTypeHeatNumber:             "SpecTypeHeatNumber",
	SpecTypeUnit:                   "SpecTypeUnit",
	ValidityStartDate:              "ValidityStartDate",
	ValidityEndDate:                "ValidityEndDate",
	CreationDate:                   "CreationDate",
	CreationTime:                   "CreationTime",
	LastChangeDate:                 "LastChangeDate",
	LastChangeTime:                 "LastChangeTime",
	IsMarkedForDeletion:            "IsMarkedForDeletion",
}

var DataPlatformInspectionPlanSpecDatumTableColumns = struct {
	InspectionPlantBusinessPartner string
	InspectionPlant                string
	InspectionPlan                 string
	InspectionPlanGroup            string
	InspectionPlanInternalVersion  string
	SpecType                       string
	SpecTypeUpperSpecLimit         string
	SpecTypeLowerSpecLimit         string
	SpecTypeHeatNumber             string
	SpecTypeUnit                   string
	ValidityStartDate              string
	ValidityEndDate                string
	CreationDate                   string
	CreationTime                   string
	LastChangeDate                 string
	LastChangeTime                 string
	IsMarkedForDeletion            string
}{
	InspectionPlantBusinessPartner: "data_platform_inspection_plan_spec_data.InspectionPlantBusinessPartner",
	InspectionPlant:                "data_platform_inspection_plan_spec_data.InspectionPlant",
	InspectionPlan:                 "data_platform_inspection_plan_spec_data.InspectionPlan",
	InspectionPlanGroup:            "data_platform_inspection_plan_spec_data.InspectionPlanGroup",
	InspectionPlanInternalVersion:  "data_platform_inspection_plan_spec_data.InspectionPlanInternalVersion",
	SpecType:                       "data_platform_inspection_plan_spec_data.SpecType",
	SpecTypeUpperSpecLimit:         "data_platform_inspection_plan_spec_data.SpecTypeUpperSpecLimit",
	SpecTypeLowerSpecLimit:         "data_platform_inspection_plan_spec_data.SpecTypeLowerSpecLimit",
	SpecTypeHeatNumber:             "data_platform_inspection_plan_spec_data.SpecTypeHeatNumber",
	SpecTypeUnit:                   "data_platform_inspection_plan_spec_data.SpecTypeUnit",
	ValidityStartDate:              "data_platform_inspection_plan_spec_data.ValidityStartDate",
	ValidityEndDate:                "data_platform_inspection_plan_spec_data.ValidityEndDate",
	CreationDate:                   "data_platform_inspection_plan_spec_data.CreationDate",
	CreationTime:                   "data_platform_inspection_plan_spec_data.CreationTime",
	LastChangeDate:                 "data_platform_inspection_plan_spec_data.LastChangeDate",
	LastChangeTime:                 "data_platform_inspection_plan_spec_data.LastChangeTime",
	IsMarkedForDeletion:            "data_platform_inspection_plan_spec_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformInspectionPlanSpecDatumWhere = struct {
	InspectionPlantBusinessPartner whereHelperint
	InspectionPlant                whereHelperstring
	InspectionPlan                 whereHelperint
	InspectionPlanGroup            whereHelperint
	InspectionPlanInternalVersion  whereHelperint
	SpecType                       whereHelperstring
	SpecTypeUpperSpecLimit         whereHelpernull_Float32
	SpecTypeLowerSpecLimit         whereHelpernull_Float32
	SpecTypeHeatNumber             whereHelpernull_Float32
	SpecTypeUnit                   whereHelpernull_String
	ValidityStartDate              whereHelperstring
	ValidityEndDate                whereHelperstring
	CreationDate                   whereHelpernull_String
	CreationTime                   whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	LastChangeTime                 whereHelpernull_String
	IsMarkedForDeletion            whereHelpernull_Bool
}{
	InspectionPlantBusinessPartner: whereHelperint{field: "`data_platform_inspection_plan_spec_data`.`InspectionPlantBusinessPartner`"},
	InspectionPlant:                whereHelperstring{field: "`data_platform_inspection_plan_spec_data`.`InspectionPlant`"},
	InspectionPlan:                 whereHelperint{field: "`data_platform_inspection_plan_spec_data`.`InspectionPlan`"},
	InspectionPlanGroup:            whereHelperint{field: "`data_platform_inspection_plan_spec_data`.`InspectionPlanGroup`"},
	InspectionPlanInternalVersion:  whereHelperint{field: "`data_platform_inspection_plan_spec_data`.`InspectionPlanInternalVersion`"},
	SpecType:                       whereHelperstring{field: "`data_platform_inspection_plan_spec_data`.`SpecType`"},
	SpecTypeUpperSpecLimit:         whereHelpernull_Float32{field: "`data_platform_inspection_plan_spec_data`.`SpecTypeUpperSpecLimit`"},
	SpecTypeLowerSpecLimit:         whereHelpernull_Float32{field: "`data_platform_inspection_plan_spec_data`.`SpecTypeLowerSpecLimit`"},
	SpecTypeHeatNumber:             whereHelpernull_Float32{field: "`data_platform_inspection_plan_spec_data`.`SpecTypeHeatNumber`"},
	SpecTypeUnit:                   whereHelpernull_String{field: "`data_platform_inspection_plan_spec_data`.`SpecTypeUnit`"},
	ValidityStartDate:              whereHelperstring{field: "`data_platform_inspection_plan_spec_data`.`ValidityStartDate`"},
	ValidityEndDate:                whereHelperstring{field: "`data_platform_inspection_plan_spec_data`.`ValidityEndDate`"},
	CreationDate:                   whereHelpernull_String{field: "`data_platform_inspection_plan_spec_data`.`CreationDate`"},
	CreationTime:                   whereHelpernull_String{field: "`data_platform_inspection_plan_spec_data`.`CreationTime`"},
	LastChangeDate:                 whereHelpernull_String{field: "`data_platform_inspection_plan_spec_data`.`LastChangeDate`"},
	LastChangeTime:                 whereHelpernull_String{field: "`data_platform_inspection_plan_spec_data`.`LastChangeTime`"},
	IsMarkedForDeletion:            whereHelpernull_Bool{field: "`data_platform_inspection_plan_spec_data`.`IsMarkedForDeletion`"},
}

// DataPlatformInspectionPlanSpecDatumRels is where relationship names are stored.
var DataPlatformInspectionPlanSpecDatumRels = struct {
	InspectionPlanDataPlatformInspectionPlanHeaderDatum string
}{
	InspectionPlanDataPlatformInspectionPlanHeaderDatum: "InspectionPlanDataPlatformInspectionPlanHeaderDatum",
}

// dataPlatformInspectionPlanSpecDatumR is where relationships are stored.
type dataPlatformInspectionPlanSpecDatumR struct {
	InspectionPlanDataPlatformInspectionPlanHeaderDatum *DataPlatformInspectionPlanHeaderDatum `boil:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" json:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" toml:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" yaml:"InspectionPlanDataPlatformInspectionPlanHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInspectionPlanSpecDatumR) NewStruct() *dataPlatformInspectionPlanSpecDatumR {
	return &dataPlatformInspectionPlanSpecDatumR{}
}

func (r *dataPlatformInspectionPlanSpecDatumR) GetInspectionPlanDataPlatformInspectionPlanHeaderDatum() *DataPlatformInspectionPlanHeaderDatum {
	if r == nil {
		return nil
	}
	return r.InspectionPlanDataPlatformInspectionPlanHeaderDatum
}

// dataPlatformInspectionPlanSpecDatumL is where Load methods for each relationship are stored.
type dataPlatformInspectionPlanSpecDatumL struct{}

var (
	dataPlatformInspectionPlanSpecDatumAllColumns            = []string{"InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionPlanGroup", "InspectionPlanInternalVersion", "SpecType", "SpecTypeUpperSpecLimit", "SpecTypeLowerSpecLimit", "SpecTypeHeatNumber", "SpecTypeUnit", "ValidityStartDate", "ValidityEndDate", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformInspectionPlanSpecDatumColumnsWithoutDefault = []string{"InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionPlanGroup", "InspectionPlanInternalVersion", "SpecType", "SpecTypeUpperSpecLimit", "SpecTypeLowerSpecLimit", "SpecTypeHeatNumber", "SpecTypeUnit", "ValidityStartDate", "ValidityEndDate", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformInspectionPlanSpecDatumColumnsWithDefault    = []string{}
	dataPlatformInspectionPlanSpecDatumPrimaryKeyColumns     = []string{"InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionPlanGroup", "InspectionPlanInternalVersion", "SpecType"}
	dataPlatformInspectionPlanSpecDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInspectionPlanSpecDatumSlice is an alias for a slice of pointers to DataPlatformInspectionPlanSpecDatum.
	// This should almost always be used instead of []DataPlatformInspectionPlanSpecDatum.
	DataPlatformInspectionPlanSpecDatumSlice []*DataPlatformInspectionPlanSpecDatum

	dataPlatformInspectionPlanSpecDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInspectionPlanSpecDatumType                 = reflect.TypeOf(&DataPlatformInspectionPlanSpecDatum{})
	dataPlatformInspectionPlanSpecDatumMapping              = queries.MakeStructMapping(dataPlatformInspectionPlanSpecDatumType)
	dataPlatformInspectionPlanSpecDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInspectionPlanSpecDatumType, dataPlatformInspectionPlanSpecDatumMapping, dataPlatformInspectionPlanSpecDatumPrimaryKeyColumns)
	dataPlatformInspectionPlanSpecDatumInsertCacheMut       sync.RWMutex
	dataPlatformInspectionPlanSpecDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInspectionPlanSpecDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInspectionPlanSpecDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInspectionPlanSpecDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInspectionPlanSpecDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInspectionPlanSpecDatum record from the query.
func (q dataPlatformInspectionPlanSpecDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInspectionPlanSpecDatum, error) {
	o := &DataPlatformInspectionPlanSpecDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_inspection_plan_spec_data")
	}

	return o, nil
}

// All returns all DataPlatformInspectionPlanSpecDatum records from the query.
func (q dataPlatformInspectionPlanSpecDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInspectionPlanSpecDatumSlice, error) {
	var o []*DataPlatformInspectionPlanSpecDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInspectionPlanSpecDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInspectionPlanSpecDatum records in the query.
func (q dataPlatformInspectionPlanSpecDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_inspection_plan_spec_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInspectionPlanSpecDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_inspection_plan_spec_data exists")
	}

	return count > 0, nil
}

// InspectionPlanDataPlatformInspectionPlanHeaderDatum pointed to by the foreign key.
func (o *DataPlatformInspectionPlanSpecDatum) InspectionPlanDataPlatformInspectionPlanHeaderDatum(mods ...qm.QueryMod) dataPlatformInspectionPlanHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InspectionPlan` = ?", o.InspectionPlan),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInspectionPlanHeaderData(queryMods...)
}

// LoadInspectionPlanDataPlatformInspectionPlanHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionPlanSpecDatumL) LoadInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionPlanSpecDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionPlanSpecDatum
	var object *DataPlatformInspectionPlanSpecDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionPlanSpecDatum.(*DataPlatformInspectionPlanSpecDatum)
		if !ok {
			object = new(DataPlatformInspectionPlanSpecDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionPlanSpecDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionPlanSpecDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionPlanSpecDatum.(*[]*DataPlatformInspectionPlanSpecDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionPlanSpecDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionPlanSpecDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionPlanSpecDatumR{}
		}
		args = append(args, object.InspectionPlan)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionPlanSpecDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionPlan {
					continue Outer
				}
			}

			args = append(args, obj.InspectionPlan)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_header_data`),
		qm.WhereIn(`data_platform_inspection_plan_header_data.InspectionPlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInspectionPlanHeaderDatum")
	}

	var resultSlice []*DataPlatformInspectionPlanHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInspectionPlanHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_inspection_plan_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InspectionPlan == foreign.InspectionPlan {
				local.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetInspectionPlanDataPlatformInspectionPlanHeaderDatum of the dataPlatformInspectionPlanSpecDatum to the related item.
// Sets o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum to related.
func (o *DataPlatformInspectionPlanSpecDatum) SetInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInspectionPlanHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_plan_spec_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlan"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanSpecDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.InspectionPlan, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanGroup, o.InspectionPlanInternalVersion, o.SpecType}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InspectionPlan = related.InspectionPlan
	if o.R == nil {
		o.R = &dataPlatformInspectionPlanSpecDatumR{
			InspectionPlanDataPlatformInspectionPlanHeaderDatum: related,
		}
	} else {
		o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = related
	}

	return nil
}

// DataPlatformInspectionPlanSpecData retrieves all the records using an executor.
func DataPlatformInspectionPlanSpecData(mods ...qm.QueryMod) dataPlatformInspectionPlanSpecDatumQuery {
	mods = append(mods, qm.From("`data_platform_inspection_plan_spec_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_inspection_plan_spec_data`.*"})
	}

	return dataPlatformInspectionPlanSpecDatumQuery{q}
}

// FindDataPlatformInspectionPlanSpecDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInspectionPlanSpecDatum(ctx context.Context, exec boil.ContextExecutor, inspectionPlantBusinessPartner int, inspectionPlant string, inspectionPlan int, inspectionPlanGroup int, inspectionPlanInternalVersion int, specType string, selectCols ...string) (*DataPlatformInspectionPlanSpecDatum, error) {
	dataPlatformInspectionPlanSpecDatumObj := &DataPlatformInspectionPlanSpecDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_inspection_plan_spec_data` where `InspectionPlantBusinessPartner`=? AND `InspectionPlant`=? AND `InspectionPlan`=? AND `InspectionPlanGroup`=? AND `InspectionPlanInternalVersion`=? AND `SpecType`=?", sel,
	)

	q := queries.Raw(query, inspectionPlantBusinessPartner, inspectionPlant, inspectionPlan, inspectionPlanGroup, inspectionPlanInternalVersion, specType)

	err := q.Bind(ctx, exec, dataPlatformInspectionPlanSpecDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_inspection_plan_spec_data")
	}

	return dataPlatformInspectionPlanSpecDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInspectionPlanSpecDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_plan_spec_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionPlanSpecDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInspectionPlanSpecDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanSpecDatumInsertCache[key]
	dataPlatformInspectionPlanSpecDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInspectionPlanSpecDatumAllColumns,
			dataPlatformInspectionPlanSpecDatumColumnsWithDefault,
			dataPlatformInspectionPlanSpecDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanSpecDatumType, dataPlatformInspectionPlanSpecDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInspectionPlanSpecDatumType, dataPlatformInspectionPlanSpecDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_inspection_plan_spec_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_inspection_plan_spec_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_inspection_plan_spec_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanSpecDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_inspection_plan_spec_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InspectionPlantBusinessPartner,
		o.InspectionPlant,
		o.InspectionPlan,
		o.InspectionPlanGroup,
		o.InspectionPlanInternalVersion,
		o.SpecType,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_plan_spec_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionPlanSpecDatumInsertCacheMut.Lock()
		dataPlatformInspectionPlanSpecDatumInsertCache[key] = cache
		dataPlatformInspectionPlanSpecDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInspectionPlanSpecDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInspectionPlanSpecDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInspectionPlanSpecDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanSpecDatumUpdateCache[key]
	dataPlatformInspectionPlanSpecDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInspectionPlanSpecDatumAllColumns,
			dataPlatformInspectionPlanSpecDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_inspection_plan_spec_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_inspection_plan_spec_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanSpecDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanSpecDatumType, dataPlatformInspectionPlanSpecDatumMapping, append(wl, dataPlatformInspectionPlanSpecDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_inspection_plan_spec_data row")
	}

	if !cached {
		dataPlatformInspectionPlanSpecDatumUpdateCacheMut.Lock()
		dataPlatformInspectionPlanSpecDatumUpdateCache[key] = cache
		dataPlatformInspectionPlanSpecDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInspectionPlanSpecDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_inspection_plan_spec_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInspectionPlanSpecDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanSpecDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_inspection_plan_spec_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanSpecDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInspectionPlanSpecDatum slice")
	}

	return nil
}

var mySQLDataPlatformInspectionPlanSpecDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInspectionPlanSpecDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_plan_spec_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionPlanSpecDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInspectionPlanSpecDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInspectionPlanSpecDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanSpecDatumUpsertCache[key]
	dataPlatformInspectionPlanSpecDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInspectionPlanSpecDatumAllColumns,
			dataPlatformInspectionPlanSpecDatumColumnsWithDefault,
			dataPlatformInspectionPlanSpecDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInspectionPlanSpecDatumAllColumns,
			dataPlatformInspectionPlanSpecDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_inspection_plan_spec_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_inspection_plan_spec_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_inspection_plan_spec_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanSpecDatumType, dataPlatformInspectionPlanSpecDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInspectionPlanSpecDatumType, dataPlatformInspectionPlanSpecDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_inspection_plan_spec_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInspectionPlanSpecDatumType, dataPlatformInspectionPlanSpecDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_inspection_plan_spec_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_plan_spec_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionPlanSpecDatumUpsertCacheMut.Lock()
		dataPlatformInspectionPlanSpecDatumUpsertCache[key] = cache
		dataPlatformInspectionPlanSpecDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInspectionPlanSpecDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInspectionPlanSpecDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInspectionPlanSpecDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInspectionPlanSpecDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_inspection_plan_spec_data` WHERE `InspectionPlantBusinessPartner`=? AND `InspectionPlant`=? AND `InspectionPlan`=? AND `InspectionPlanGroup`=? AND `InspectionPlanInternalVersion`=? AND `SpecType`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_inspection_plan_spec_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInspectionPlanSpecDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInspectionPlanSpecDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_inspection_plan_spec_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInspectionPlanSpecDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanSpecDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_inspection_plan_spec_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanSpecDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInspectionPlanSpecDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInspectionPlanSpecDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInspectionPlanSpecDatum(ctx, exec, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanGroup, o.InspectionPlanInternalVersion, o.SpecType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInspectionPlanSpecDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInspectionPlanSpecDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanSpecDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_inspection_plan_spec_data`.* FROM `data_platform_inspection_plan_spec_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanSpecDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInspectionPlanSpecDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInspectionPlanSpecDatumExists checks if the DataPlatformInspectionPlanSpecDatum row exists.
func DataPlatformInspectionPlanSpecDatumExists(ctx context.Context, exec boil.ContextExecutor, inspectionPlantBusinessPartner int, inspectionPlant string, inspectionPlan int, inspectionPlanGroup int, inspectionPlanInternalVersion int, specType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_inspection_plan_spec_data` where `InspectionPlantBusinessPartner`=? AND `InspectionPlant`=? AND `InspectionPlan`=? AND `InspectionPlanGroup`=? AND `InspectionPlanInternalVersion`=? AND `SpecType`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inspectionPlantBusinessPartner, inspectionPlant, inspectionPlan, inspectionPlanGroup, inspectionPlanInternalVersion, specType)
	}
	row := exec.QueryRowContext(ctx, sql, inspectionPlantBusinessPartner, inspectionPlant, inspectionPlan, inspectionPlanGroup, inspectionPlanInternalVersion, specType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_inspection_plan_spec_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInspectionPlanSpecDatum row exists.
func (o *DataPlatformInspectionPlanSpecDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInspectionPlanSpecDatumExists(ctx, exec, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanGroup, o.InspectionPlanInternalVersion, o.SpecType)
}
