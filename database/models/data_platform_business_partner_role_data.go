// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBusinessPartnerRoleDatum is an object representing the database table.
type DataPlatformBusinessPartnerRoleDatum struct {
	BusinessPartner     int    `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	BusinessPartnerRole string `boil:"BusinessPartnerRole" json:"BusinessPartnerRole" toml:"BusinessPartnerRole" yaml:"BusinessPartnerRole"`
	ValidityEndDate     string `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	ValidityStartDate   string `boil:"ValidityStartDate" json:"ValidityStartDate" toml:"ValidityStartDate" yaml:"ValidityStartDate"`

	R *dataPlatformBusinessPartnerRoleDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBusinessPartnerRoleDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBusinessPartnerRoleDatumColumns = struct {
	BusinessPartner     string
	BusinessPartnerRole string
	ValidityEndDate     string
	ValidityStartDate   string
}{
	BusinessPartner:     "BusinessPartner",
	BusinessPartnerRole: "BusinessPartnerRole",
	ValidityEndDate:     "ValidityEndDate",
	ValidityStartDate:   "ValidityStartDate",
}

var DataPlatformBusinessPartnerRoleDatumTableColumns = struct {
	BusinessPartner     string
	BusinessPartnerRole string
	ValidityEndDate     string
	ValidityStartDate   string
}{
	BusinessPartner:     "data_platform_business_partner_role_data.BusinessPartner",
	BusinessPartnerRole: "data_platform_business_partner_role_data.BusinessPartnerRole",
	ValidityEndDate:     "data_platform_business_partner_role_data.ValidityEndDate",
	ValidityStartDate:   "data_platform_business_partner_role_data.ValidityStartDate",
}

// Generated where

var DataPlatformBusinessPartnerRoleDatumWhere = struct {
	BusinessPartner     whereHelperint
	BusinessPartnerRole whereHelperstring
	ValidityEndDate     whereHelperstring
	ValidityStartDate   whereHelperstring
}{
	BusinessPartner:     whereHelperint{field: "`data_platform_business_partner_role_data`.`BusinessPartner`"},
	BusinessPartnerRole: whereHelperstring{field: "`data_platform_business_partner_role_data`.`BusinessPartnerRole`"},
	ValidityEndDate:     whereHelperstring{field: "`data_platform_business_partner_role_data`.`ValidityEndDate`"},
	ValidityStartDate:   whereHelperstring{field: "`data_platform_business_partner_role_data`.`ValidityStartDate`"},
}

// DataPlatformBusinessPartnerRoleDatumRels is where relationship names are stored.
var DataPlatformBusinessPartnerRoleDatumRels = struct {
}{}

// dataPlatformBusinessPartnerRoleDatumR is where relationships are stored.
type dataPlatformBusinessPartnerRoleDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformBusinessPartnerRoleDatumR) NewStruct() *dataPlatformBusinessPartnerRoleDatumR {
	return &dataPlatformBusinessPartnerRoleDatumR{}
}

// dataPlatformBusinessPartnerRoleDatumL is where Load methods for each relationship are stored.
type dataPlatformBusinessPartnerRoleDatumL struct{}

var (
	dataPlatformBusinessPartnerRoleDatumAllColumns            = []string{"BusinessPartner", "BusinessPartnerRole", "ValidityEndDate", "ValidityStartDate"}
	dataPlatformBusinessPartnerRoleDatumColumnsWithoutDefault = []string{"BusinessPartner", "BusinessPartnerRole", "ValidityEndDate", "ValidityStartDate"}
	dataPlatformBusinessPartnerRoleDatumColumnsWithDefault    = []string{}
	dataPlatformBusinessPartnerRoleDatumPrimaryKeyColumns     = []string{"BusinessPartner", "BusinessPartnerRole", "ValidityEndDate", "ValidityStartDate"}
	dataPlatformBusinessPartnerRoleDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBusinessPartnerRoleDatumSlice is an alias for a slice of pointers to DataPlatformBusinessPartnerRoleDatum.
	// This should almost always be used instead of []DataPlatformBusinessPartnerRoleDatum.
	DataPlatformBusinessPartnerRoleDatumSlice []*DataPlatformBusinessPartnerRoleDatum

	dataPlatformBusinessPartnerRoleDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBusinessPartnerRoleDatumType                 = reflect.TypeOf(&DataPlatformBusinessPartnerRoleDatum{})
	dataPlatformBusinessPartnerRoleDatumMapping              = queries.MakeStructMapping(dataPlatformBusinessPartnerRoleDatumType)
	dataPlatformBusinessPartnerRoleDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBusinessPartnerRoleDatumType, dataPlatformBusinessPartnerRoleDatumMapping, dataPlatformBusinessPartnerRoleDatumPrimaryKeyColumns)
	dataPlatformBusinessPartnerRoleDatumInsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerRoleDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBusinessPartnerRoleDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerRoleDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBusinessPartnerRoleDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBusinessPartnerRoleDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformBusinessPartnerRoleDatum record from the query.
func (q dataPlatformBusinessPartnerRoleDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBusinessPartnerRoleDatum, error) {
	o := &DataPlatformBusinessPartnerRoleDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_business_partner_role_data")
	}

	return o, nil
}

// All returns all DataPlatformBusinessPartnerRoleDatum records from the query.
func (q dataPlatformBusinessPartnerRoleDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBusinessPartnerRoleDatumSlice, error) {
	var o []*DataPlatformBusinessPartnerRoleDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBusinessPartnerRoleDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformBusinessPartnerRoleDatum records in the query.
func (q dataPlatformBusinessPartnerRoleDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_business_partner_role_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBusinessPartnerRoleDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_business_partner_role_data exists")
	}

	return count > 0, nil
}

// DataPlatformBusinessPartnerRoleData retrieves all the records using an executor.
func DataPlatformBusinessPartnerRoleData(mods ...qm.QueryMod) dataPlatformBusinessPartnerRoleDatumQuery {
	mods = append(mods, qm.From("`data_platform_business_partner_role_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_business_partner_role_data`.*"})
	}

	return dataPlatformBusinessPartnerRoleDatumQuery{q}
}

// FindDataPlatformBusinessPartnerRoleDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBusinessPartnerRoleDatum(ctx context.Context, exec boil.ContextExecutor, businessPartner int, businessPartnerRole string, validityEndDate string, validityStartDate string, selectCols ...string) (*DataPlatformBusinessPartnerRoleDatum, error) {
	dataPlatformBusinessPartnerRoleDatumObj := &DataPlatformBusinessPartnerRoleDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_business_partner_role_data` where `BusinessPartner`=? AND `BusinessPartnerRole`=? AND `ValidityEndDate`=? AND `ValidityStartDate`=?", sel,
	)

	q := queries.Raw(query, businessPartner, businessPartnerRole, validityEndDate, validityStartDate)

	err := q.Bind(ctx, exec, dataPlatformBusinessPartnerRoleDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_business_partner_role_data")
	}

	return dataPlatformBusinessPartnerRoleDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBusinessPartnerRoleDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_role_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerRoleDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBusinessPartnerRoleDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerRoleDatumInsertCache[key]
	dataPlatformBusinessPartnerRoleDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBusinessPartnerRoleDatumAllColumns,
			dataPlatformBusinessPartnerRoleDatumColumnsWithDefault,
			dataPlatformBusinessPartnerRoleDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerRoleDatumType, dataPlatformBusinessPartnerRoleDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerRoleDatumType, dataPlatformBusinessPartnerRoleDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_business_partner_role_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_business_partner_role_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_business_partner_role_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerRoleDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_business_partner_role_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BusinessPartner,
		o.BusinessPartnerRole,
		o.ValidityEndDate,
		o.ValidityStartDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_role_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerRoleDatumInsertCacheMut.Lock()
		dataPlatformBusinessPartnerRoleDatumInsertCache[key] = cache
		dataPlatformBusinessPartnerRoleDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformBusinessPartnerRoleDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBusinessPartnerRoleDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformBusinessPartnerRoleDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerRoleDatumUpdateCache[key]
	dataPlatformBusinessPartnerRoleDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBusinessPartnerRoleDatumAllColumns,
			dataPlatformBusinessPartnerRoleDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_business_partner_role_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_business_partner_role_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBusinessPartnerRoleDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerRoleDatumType, dataPlatformBusinessPartnerRoleDatumMapping, append(wl, dataPlatformBusinessPartnerRoleDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_business_partner_role_data row")
	}

	if !cached {
		dataPlatformBusinessPartnerRoleDatumUpdateCacheMut.Lock()
		dataPlatformBusinessPartnerRoleDatumUpdateCache[key] = cache
		dataPlatformBusinessPartnerRoleDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBusinessPartnerRoleDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_business_partner_role_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBusinessPartnerRoleDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerRoleDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_business_partner_role_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerRoleDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformBusinessPartnerRoleDatum slice")
	}

	return nil
}

var mySQLDataPlatformBusinessPartnerRoleDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBusinessPartnerRoleDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_business_partner_role_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBusinessPartnerRoleDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBusinessPartnerRoleDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBusinessPartnerRoleDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBusinessPartnerRoleDatumUpsertCache[key]
	dataPlatformBusinessPartnerRoleDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBusinessPartnerRoleDatumAllColumns,
			dataPlatformBusinessPartnerRoleDatumColumnsWithDefault,
			dataPlatformBusinessPartnerRoleDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBusinessPartnerRoleDatumAllColumns,
			dataPlatformBusinessPartnerRoleDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_business_partner_role_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_business_partner_role_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_business_partner_role_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBusinessPartnerRoleDatumType, dataPlatformBusinessPartnerRoleDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBusinessPartnerRoleDatumType, dataPlatformBusinessPartnerRoleDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_business_partner_role_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBusinessPartnerRoleDatumType, dataPlatformBusinessPartnerRoleDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_business_partner_role_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_business_partner_role_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBusinessPartnerRoleDatumUpsertCacheMut.Lock()
		dataPlatformBusinessPartnerRoleDatumUpsertCache[key] = cache
		dataPlatformBusinessPartnerRoleDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformBusinessPartnerRoleDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBusinessPartnerRoleDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformBusinessPartnerRoleDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBusinessPartnerRoleDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_business_partner_role_data` WHERE `BusinessPartner`=? AND `BusinessPartnerRole`=? AND `ValidityEndDate`=? AND `ValidityStartDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_business_partner_role_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBusinessPartnerRoleDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformBusinessPartnerRoleDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_business_partner_role_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBusinessPartnerRoleDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerRoleDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_business_partner_role_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerRoleDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformBusinessPartnerRoleDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBusinessPartnerRoleDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBusinessPartnerRoleDatum(ctx, exec, o.BusinessPartner, o.BusinessPartnerRole, o.ValidityEndDate, o.ValidityStartDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBusinessPartnerRoleDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBusinessPartnerRoleDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBusinessPartnerRoleDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_business_partner_role_data`.* FROM `data_platform_business_partner_role_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBusinessPartnerRoleDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBusinessPartnerRoleDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBusinessPartnerRoleDatumExists checks if the DataPlatformBusinessPartnerRoleDatum row exists.
func DataPlatformBusinessPartnerRoleDatumExists(ctx context.Context, exec boil.ContextExecutor, businessPartner int, businessPartnerRole string, validityEndDate string, validityStartDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_business_partner_role_data` where `BusinessPartner`=? AND `BusinessPartnerRole`=? AND `ValidityEndDate`=? AND `ValidityStartDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, businessPartner, businessPartnerRole, validityEndDate, validityStartDate)
	}
	row := exec.QueryRowContext(ctx, sql, businessPartner, businessPartnerRole, validityEndDate, validityStartDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_business_partner_role_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBusinessPartnerRoleDatum row exists.
func (o *DataPlatformBusinessPartnerRoleDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBusinessPartnerRoleDatumExists(ctx, exec, o.BusinessPartner, o.BusinessPartnerRole, o.ValidityEndDate, o.ValidityStartDate)
}
