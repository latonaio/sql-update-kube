// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformEquipmentMasterOwnerBusinessPartnerDatum is an object representing the database table.
type DataPlatformEquipmentMasterOwnerBusinessPartnerDatum struct {
	Equipment                int         `boil:"Equipment" json:"Equipment" toml:"Equipment" yaml:"Equipment"`
	OwnerBusinessPartner     int         `boil:"OwnerBusinessPartner" json:"OwnerBusinessPartner" toml:"OwnerBusinessPartner" yaml:"OwnerBusinessPartner"`
	ValidityStartDate        string      `boil:"ValidityStartDate" json:"ValidityStartDate" toml:"ValidityStartDate" yaml:"ValidityStartDate"`
	ValidityEndDate          string      `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	CreationDate             null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	BusinessPartnerEquipment null.Int    `boil:"BusinessPartnerEquipment" json:"BusinessPartnerEquipment,omitempty" toml:"BusinessPartnerEquipment" yaml:"BusinessPartnerEquipment,omitempty"`
	IsMarkedForDeletion      null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformEquipmentMasterOwnerBusinessPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformEquipmentMasterOwnerBusinessPartnerDatumColumns = struct {
	Equipment                string
	OwnerBusinessPartner     string
	ValidityStartDate        string
	ValidityEndDate          string
	CreationDate             string
	BusinessPartnerEquipment string
	IsMarkedForDeletion      string
}{
	Equipment:                "Equipment",
	OwnerBusinessPartner:     "OwnerBusinessPartner",
	ValidityStartDate:        "ValidityStartDate",
	ValidityEndDate:          "ValidityEndDate",
	CreationDate:             "CreationDate",
	BusinessPartnerEquipment: "BusinessPartnerEquipment",
	IsMarkedForDeletion:      "IsMarkedForDeletion",
}

var DataPlatformEquipmentMasterOwnerBusinessPartnerDatumTableColumns = struct {
	Equipment                string
	OwnerBusinessPartner     string
	ValidityStartDate        string
	ValidityEndDate          string
	CreationDate             string
	BusinessPartnerEquipment string
	IsMarkedForDeletion      string
}{
	Equipment:                "data_platform_equipment_master_owner_business_partner_data.Equipment",
	OwnerBusinessPartner:     "data_platform_equipment_master_owner_business_partner_data.OwnerBusinessPartner",
	ValidityStartDate:        "data_platform_equipment_master_owner_business_partner_data.ValidityStartDate",
	ValidityEndDate:          "data_platform_equipment_master_owner_business_partner_data.ValidityEndDate",
	CreationDate:             "data_platform_equipment_master_owner_business_partner_data.CreationDate",
	BusinessPartnerEquipment: "data_platform_equipment_master_owner_business_partner_data.BusinessPartnerEquipment",
	IsMarkedForDeletion:      "data_platform_equipment_master_owner_business_partner_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformEquipmentMasterOwnerBusinessPartnerDatumWhere = struct {
	Equipment                whereHelperint
	OwnerBusinessPartner     whereHelperint
	ValidityStartDate        whereHelperstring
	ValidityEndDate          whereHelperstring
	CreationDate             whereHelpernull_String
	BusinessPartnerEquipment whereHelpernull_Int
	IsMarkedForDeletion      whereHelpernull_Bool
}{
	Equipment:                whereHelperint{field: "`data_platform_equipment_master_owner_business_partner_data`.`Equipment`"},
	OwnerBusinessPartner:     whereHelperint{field: "`data_platform_equipment_master_owner_business_partner_data`.`OwnerBusinessPartner`"},
	ValidityStartDate:        whereHelperstring{field: "`data_platform_equipment_master_owner_business_partner_data`.`ValidityStartDate`"},
	ValidityEndDate:          whereHelperstring{field: "`data_platform_equipment_master_owner_business_partner_data`.`ValidityEndDate`"},
	CreationDate:             whereHelpernull_String{field: "`data_platform_equipment_master_owner_business_partner_data`.`CreationDate`"},
	BusinessPartnerEquipment: whereHelpernull_Int{field: "`data_platform_equipment_master_owner_business_partner_data`.`BusinessPartnerEquipment`"},
	IsMarkedForDeletion:      whereHelpernull_Bool{field: "`data_platform_equipment_master_owner_business_partner_data`.`IsMarkedForDeletion`"},
}

// DataPlatformEquipmentMasterOwnerBusinessPartnerDatumRels is where relationship names are stored.
var DataPlatformEquipmentMasterOwnerBusinessPartnerDatumRels = struct {
	OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum string
	EquipmentDataPlatformEquipmentMasterGeneralDatum            string
}{
	OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: "OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum",
	EquipmentDataPlatformEquipmentMasterGeneralDatum:            "EquipmentDataPlatformEquipmentMasterGeneralDatum",
}

// dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR is where relationships are stored.
type dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR struct {
	OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum *DataPlatformBusinessPartnerGeneralDatum `boil:"OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" json:"OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" toml:"OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum" yaml:"OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum"`
	EquipmentDataPlatformEquipmentMasterGeneralDatum            *DataPlatformEquipmentMasterGeneralDatum `boil:"EquipmentDataPlatformEquipmentMasterGeneralDatum" json:"EquipmentDataPlatformEquipmentMasterGeneralDatum" toml:"EquipmentDataPlatformEquipmentMasterGeneralDatum" yaml:"EquipmentDataPlatformEquipmentMasterGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR) NewStruct() *dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR {
	return &dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR{}
}

func (r *dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR) GetOwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum() *DataPlatformBusinessPartnerGeneralDatum {
	if r == nil {
		return nil
	}
	return r.OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum
}

func (r *dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR) GetEquipmentDataPlatformEquipmentMasterGeneralDatum() *DataPlatformEquipmentMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.EquipmentDataPlatformEquipmentMasterGeneralDatum
}

// dataPlatformEquipmentMasterOwnerBusinessPartnerDatumL is where Load methods for each relationship are stored.
type dataPlatformEquipmentMasterOwnerBusinessPartnerDatumL struct{}

var (
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumAllColumns            = []string{"Equipment", "OwnerBusinessPartner", "ValidityStartDate", "ValidityEndDate", "CreationDate", "BusinessPartnerEquipment", "IsMarkedForDeletion"}
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumColumnsWithoutDefault = []string{"Equipment", "OwnerBusinessPartner", "ValidityStartDate", "ValidityEndDate", "CreationDate", "BusinessPartnerEquipment", "IsMarkedForDeletion"}
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumColumnsWithDefault    = []string{}
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns     = []string{"Equipment", "OwnerBusinessPartner", "ValidityStartDate", "ValidityEndDate"}
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice is an alias for a slice of pointers to DataPlatformEquipmentMasterOwnerBusinessPartnerDatum.
	// This should almost always be used instead of []DataPlatformEquipmentMasterOwnerBusinessPartnerDatum.
	DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice []*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum

	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumType                 = reflect.TypeOf(&DataPlatformEquipmentMasterOwnerBusinessPartnerDatum{})
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumMapping              = queries.MakeStructMapping(dataPlatformEquipmentMasterOwnerBusinessPartnerDatumType)
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformEquipmentMasterOwnerBusinessPartnerDatumType, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumMapping, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns)
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumInsertCacheMut       sync.RWMutex
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumInsertCache          = make(map[string]insertCache)
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpdateCacheMut       sync.RWMutex
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpsertCacheMut       sync.RWMutex
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformEquipmentMasterOwnerBusinessPartnerDatum record from the query.
func (q dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum, error) {
	o := &DataPlatformEquipmentMasterOwnerBusinessPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_equipment_master_owner_business_partner_data")
	}

	return o, nil
}

// All returns all DataPlatformEquipmentMasterOwnerBusinessPartnerDatum records from the query.
func (q dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice, error) {
	var o []*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformEquipmentMasterOwnerBusinessPartnerDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformEquipmentMasterOwnerBusinessPartnerDatum records in the query.
func (q dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_equipment_master_owner_business_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_equipment_master_owner_business_partner_data exists")
	}

	return count > 0, nil
}

// OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum pointed to by the foreign key.
func (o *DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(mods ...qm.QueryMod) dataPlatformBusinessPartnerGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.OwnerBusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBusinessPartnerGeneralData(queryMods...)
}

// EquipmentDataPlatformEquipmentMasterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) EquipmentDataPlatformEquipmentMasterGeneralDatum(mods ...qm.QueryMod) dataPlatformEquipmentMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Equipment` = ?", o.Equipment),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformEquipmentMasterGeneralData(queryMods...)
}

// LoadOwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformEquipmentMasterOwnerBusinessPartnerDatumL) LoadOwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum
	var object *DataPlatformEquipmentMasterOwnerBusinessPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum.(*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum)
		if !ok {
			object = new(DataPlatformEquipmentMasterOwnerBusinessPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum.(*[]*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR{}
		}
		args = append(args, object.OwnerBusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.OwnerBusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.OwnerBusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_business_partner_general_data`),
		qm.WhereIn(`data_platform_business_partner_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBusinessPartnerGeneralDatum")
	}

	var resultSlice []*DataPlatformBusinessPartnerGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBusinessPartnerGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_business_partner_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_business_partner_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OwnerBusinessPartner == foreign.BusinessPartner {
				local.R.OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadEquipmentDataPlatformEquipmentMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformEquipmentMasterOwnerBusinessPartnerDatumL) LoadEquipmentDataPlatformEquipmentMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum
	var object *DataPlatformEquipmentMasterOwnerBusinessPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum.(*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum)
		if !ok {
			object = new(DataPlatformEquipmentMasterOwnerBusinessPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum.(*[]*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformEquipmentMasterOwnerBusinessPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR{}
		}
		args = append(args, object.Equipment)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.Equipment {
					continue Outer
				}
			}

			args = append(args, obj.Equipment)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_equipment_master_general_data`),
		qm.WhereIn(`data_platform_equipment_master_general_data.Equipment in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformEquipmentMasterGeneralDatum")
	}

	var resultSlice []*DataPlatformEquipmentMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformEquipmentMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_equipment_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_equipment_master_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Equipment == foreign.Equipment {
				local.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetOwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum of the dataPlatformEquipmentMasterOwnerBusinessPartnerDatum to the related item.
// Sets o.R.OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum to related.
func (o *DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) SetOwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBusinessPartnerGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_equipment_master_owner_business_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OwnerBusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.Equipment, o.OwnerBusinessPartner, o.ValidityStartDate, o.ValidityEndDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OwnerBusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR{
			OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum: related,
		}
	} else {
		o.R.OwnerBusinessPartnerDataPlatformBusinessPartnerGeneralDatum = related
	}

	return nil
}

// SetEquipmentDataPlatformEquipmentMasterGeneralDatum of the dataPlatformEquipmentMasterOwnerBusinessPartnerDatum to the related item.
// Sets o.R.EquipmentDataPlatformEquipmentMasterGeneralDatum to related.
func (o *DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) SetEquipmentDataPlatformEquipmentMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformEquipmentMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_equipment_master_owner_business_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Equipment"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Equipment, o.Equipment, o.OwnerBusinessPartner, o.ValidityStartDate, o.ValidityEndDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Equipment = related.Equipment
	if o.R == nil {
		o.R = &dataPlatformEquipmentMasterOwnerBusinessPartnerDatumR{
			EquipmentDataPlatformEquipmentMasterGeneralDatum: related,
		}
	} else {
		o.R.EquipmentDataPlatformEquipmentMasterGeneralDatum = related
	}

	return nil
}

// DataPlatformEquipmentMasterOwnerBusinessPartnerData retrieves all the records using an executor.
func DataPlatformEquipmentMasterOwnerBusinessPartnerData(mods ...qm.QueryMod) dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery {
	mods = append(mods, qm.From("`data_platform_equipment_master_owner_business_partner_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_equipment_master_owner_business_partner_data`.*"})
	}

	return dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery{q}
}

// FindDataPlatformEquipmentMasterOwnerBusinessPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformEquipmentMasterOwnerBusinessPartnerDatum(ctx context.Context, exec boil.ContextExecutor, equipment int, ownerBusinessPartner int, validityStartDate string, validityEndDate string, selectCols ...string) (*DataPlatformEquipmentMasterOwnerBusinessPartnerDatum, error) {
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumObj := &DataPlatformEquipmentMasterOwnerBusinessPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_equipment_master_owner_business_partner_data` where `Equipment`=? AND `OwnerBusinessPartner`=? AND `ValidityStartDate`=? AND `ValidityEndDate`=?", sel,
	)

	q := queries.Raw(query, equipment, ownerBusinessPartner, validityStartDate, validityEndDate)

	err := q.Bind(ctx, exec, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_equipment_master_owner_business_partner_data")
	}

	return dataPlatformEquipmentMasterOwnerBusinessPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_equipment_master_owner_business_partner_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformEquipmentMasterOwnerBusinessPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformEquipmentMasterOwnerBusinessPartnerDatumInsertCache[key]
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformEquipmentMasterOwnerBusinessPartnerDatumAllColumns,
			dataPlatformEquipmentMasterOwnerBusinessPartnerDatumColumnsWithDefault,
			dataPlatformEquipmentMasterOwnerBusinessPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformEquipmentMasterOwnerBusinessPartnerDatumType, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformEquipmentMasterOwnerBusinessPartnerDatumType, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_equipment_master_owner_business_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_equipment_master_owner_business_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_equipment_master_owner_business_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_equipment_master_owner_business_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Equipment,
		o.OwnerBusinessPartner,
		o.ValidityStartDate,
		o.ValidityEndDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_equipment_master_owner_business_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformEquipmentMasterOwnerBusinessPartnerDatumInsertCacheMut.Lock()
		dataPlatformEquipmentMasterOwnerBusinessPartnerDatumInsertCache[key] = cache
		dataPlatformEquipmentMasterOwnerBusinessPartnerDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformEquipmentMasterOwnerBusinessPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpdateCache[key]
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformEquipmentMasterOwnerBusinessPartnerDatumAllColumns,
			dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_equipment_master_owner_business_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_equipment_master_owner_business_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformEquipmentMasterOwnerBusinessPartnerDatumType, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumMapping, append(wl, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_equipment_master_owner_business_partner_data row")
	}

	if !cached {
		dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpdateCacheMut.Lock()
		dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpdateCache[key] = cache
		dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_equipment_master_owner_business_partner_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_equipment_master_owner_business_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformEquipmentMasterOwnerBusinessPartnerDatum slice")
	}

	return nil
}

var mySQLDataPlatformEquipmentMasterOwnerBusinessPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_equipment_master_owner_business_partner_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformEquipmentMasterOwnerBusinessPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformEquipmentMasterOwnerBusinessPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpsertCache[key]
	dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformEquipmentMasterOwnerBusinessPartnerDatumAllColumns,
			dataPlatformEquipmentMasterOwnerBusinessPartnerDatumColumnsWithDefault,
			dataPlatformEquipmentMasterOwnerBusinessPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformEquipmentMasterOwnerBusinessPartnerDatumAllColumns,
			dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_equipment_master_owner_business_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_equipment_master_owner_business_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_equipment_master_owner_business_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformEquipmentMasterOwnerBusinessPartnerDatumType, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformEquipmentMasterOwnerBusinessPartnerDatumType, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_equipment_master_owner_business_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformEquipmentMasterOwnerBusinessPartnerDatumType, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_equipment_master_owner_business_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_equipment_master_owner_business_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpsertCacheMut.Lock()
		dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpsertCache[key] = cache
		dataPlatformEquipmentMasterOwnerBusinessPartnerDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformEquipmentMasterOwnerBusinessPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformEquipmentMasterOwnerBusinessPartnerDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_equipment_master_owner_business_partner_data` WHERE `Equipment`=? AND `OwnerBusinessPartner`=? AND `ValidityStartDate`=? AND `ValidityEndDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_equipment_master_owner_business_partner_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformEquipmentMasterOwnerBusinessPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_equipment_master_owner_business_partner_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_equipment_master_owner_business_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformEquipmentMasterOwnerBusinessPartnerDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformEquipmentMasterOwnerBusinessPartnerDatum(ctx, exec, o.Equipment, o.OwnerBusinessPartner, o.ValidityStartDate, o.ValidityEndDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_equipment_master_owner_business_partner_data`.* FROM `data_platform_equipment_master_owner_business_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformEquipmentMasterOwnerBusinessPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformEquipmentMasterOwnerBusinessPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformEquipmentMasterOwnerBusinessPartnerDatumExists checks if the DataPlatformEquipmentMasterOwnerBusinessPartnerDatum row exists.
func DataPlatformEquipmentMasterOwnerBusinessPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, equipment int, ownerBusinessPartner int, validityStartDate string, validityEndDate string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_equipment_master_owner_business_partner_data` where `Equipment`=? AND `OwnerBusinessPartner`=? AND `ValidityStartDate`=? AND `ValidityEndDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, equipment, ownerBusinessPartner, validityStartDate, validityEndDate)
	}
	row := exec.QueryRowContext(ctx, sql, equipment, ownerBusinessPartner, validityStartDate, validityEndDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_equipment_master_owner_business_partner_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformEquipmentMasterOwnerBusinessPartnerDatum row exists.
func (o *DataPlatformEquipmentMasterOwnerBusinessPartnerDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformEquipmentMasterOwnerBusinessPartnerDatumExists(ctx, exec, o.Equipment, o.OwnerBusinessPartner, o.ValidityStartDate, o.ValidityEndDate)
}
