// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInspectionLotComponentCompositionDatum is an object representing the database table.
type DataPlatformInspectionLotComponentCompositionDatum struct {
	InspectionLot                              int       `boil:"InspectionLot" json:"InspectionLot" toml:"InspectionLot" yaml:"InspectionLot"`
	ComponentCompositionType                   string    `boil:"ComponentCompositionType" json:"ComponentCompositionType" toml:"ComponentCompositionType" yaml:"ComponentCompositionType"`
	ComponentCompositionUpperLimitInPercent    float32   `boil:"ComponentCompositionUpperLimitInPercent" json:"ComponentCompositionUpperLimitInPercent" toml:"ComponentCompositionUpperLimitInPercent" yaml:"ComponentCompositionUpperLimitInPercent"`
	ComponentCompositionLowerLimitInPercent    float32   `boil:"ComponentCompositionLowerLimitInPercent" json:"ComponentCompositionLowerLimitInPercent" toml:"ComponentCompositionLowerLimitInPercent" yaml:"ComponentCompositionLowerLimitInPercent"`
	ComponentCompositionStandardValueInPercent float32   `boil:"ComponentCompositionStandardValueInPercent" json:"ComponentCompositionStandardValueInPercent" toml:"ComponentCompositionStandardValueInPercent" yaml:"ComponentCompositionStandardValueInPercent"`
	CreationDate                               string    `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                               string    `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                             string    `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                             string    `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsReleased                                 null.Bool `boil:"IsReleased" json:"IsReleased,omitempty" toml:"IsReleased" yaml:"IsReleased,omitempty"`
	IsLocked                                   null.Bool `boil:"IsLocked" json:"IsLocked,omitempty" toml:"IsLocked" yaml:"IsLocked,omitempty"`
	IsCancelled                                null.Bool `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion                        null.Bool `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformInspectionLotComponentCompositionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInspectionLotComponentCompositionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInspectionLotComponentCompositionDatumColumns = struct {
	InspectionLot                              string
	ComponentCompositionType                   string
	ComponentCompositionUpperLimitInPercent    string
	ComponentCompositionLowerLimitInPercent    string
	ComponentCompositionStandardValueInPercent string
	CreationDate                               string
	CreationTime                               string
	LastChangeDate                             string
	LastChangeTime                             string
	IsReleased                                 string
	IsLocked                                   string
	IsCancelled                                string
	IsMarkedForDeletion                        string
}{
	InspectionLot:                              "InspectionLot",
	ComponentCompositionType:                   "ComponentCompositionType",
	ComponentCompositionUpperLimitInPercent:    "ComponentCompositionUpperLimitInPercent",
	ComponentCompositionLowerLimitInPercent:    "ComponentCompositionLowerLimitInPercent",
	ComponentCompositionStandardValueInPercent: "ComponentCompositionStandardValueInPercent",
	CreationDate:                               "CreationDate",
	CreationTime:                               "CreationTime",
	LastChangeDate:                             "LastChangeDate",
	LastChangeTime:                             "LastChangeTime",
	IsReleased:                                 "IsReleased",
	IsLocked:                                   "IsLocked",
	IsCancelled:                                "IsCancelled",
	IsMarkedForDeletion:                        "IsMarkedForDeletion",
}

var DataPlatformInspectionLotComponentCompositionDatumTableColumns = struct {
	InspectionLot                              string
	ComponentCompositionType                   string
	ComponentCompositionUpperLimitInPercent    string
	ComponentCompositionLowerLimitInPercent    string
	ComponentCompositionStandardValueInPercent string
	CreationDate                               string
	CreationTime                               string
	LastChangeDate                             string
	LastChangeTime                             string
	IsReleased                                 string
	IsLocked                                   string
	IsCancelled                                string
	IsMarkedForDeletion                        string
}{
	InspectionLot:                              "data_platform_inspection_lot_component_composition_data.InspectionLot",
	ComponentCompositionType:                   "data_platform_inspection_lot_component_composition_data.ComponentCompositionType",
	ComponentCompositionUpperLimitInPercent:    "data_platform_inspection_lot_component_composition_data.ComponentCompositionUpperLimitInPercent",
	ComponentCompositionLowerLimitInPercent:    "data_platform_inspection_lot_component_composition_data.ComponentCompositionLowerLimitInPercent",
	ComponentCompositionStandardValueInPercent: "data_platform_inspection_lot_component_composition_data.ComponentCompositionStandardValueInPercent",
	CreationDate:                               "data_platform_inspection_lot_component_composition_data.CreationDate",
	CreationTime:                               "data_platform_inspection_lot_component_composition_data.CreationTime",
	LastChangeDate:                             "data_platform_inspection_lot_component_composition_data.LastChangeDate",
	LastChangeTime:                             "data_platform_inspection_lot_component_composition_data.LastChangeTime",
	IsReleased:                                 "data_platform_inspection_lot_component_composition_data.IsReleased",
	IsLocked:                                   "data_platform_inspection_lot_component_composition_data.IsLocked",
	IsCancelled:                                "data_platform_inspection_lot_component_composition_data.IsCancelled",
	IsMarkedForDeletion:                        "data_platform_inspection_lot_component_composition_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformInspectionLotComponentCompositionDatumWhere = struct {
	InspectionLot                              whereHelperint
	ComponentCompositionType                   whereHelperstring
	ComponentCompositionUpperLimitInPercent    whereHelperfloat32
	ComponentCompositionLowerLimitInPercent    whereHelperfloat32
	ComponentCompositionStandardValueInPercent whereHelperfloat32
	CreationDate                               whereHelperstring
	CreationTime                               whereHelperstring
	LastChangeDate                             whereHelperstring
	LastChangeTime                             whereHelperstring
	IsReleased                                 whereHelpernull_Bool
	IsLocked                                   whereHelpernull_Bool
	IsCancelled                                whereHelpernull_Bool
	IsMarkedForDeletion                        whereHelpernull_Bool
}{
	InspectionLot:                              whereHelperint{field: "`data_platform_inspection_lot_component_composition_data`.`InspectionLot`"},
	ComponentCompositionType:                   whereHelperstring{field: "`data_platform_inspection_lot_component_composition_data`.`ComponentCompositionType`"},
	ComponentCompositionUpperLimitInPercent:    whereHelperfloat32{field: "`data_platform_inspection_lot_component_composition_data`.`ComponentCompositionUpperLimitInPercent`"},
	ComponentCompositionLowerLimitInPercent:    whereHelperfloat32{field: "`data_platform_inspection_lot_component_composition_data`.`ComponentCompositionLowerLimitInPercent`"},
	ComponentCompositionStandardValueInPercent: whereHelperfloat32{field: "`data_platform_inspection_lot_component_composition_data`.`ComponentCompositionStandardValueInPercent`"},
	CreationDate:                               whereHelperstring{field: "`data_platform_inspection_lot_component_composition_data`.`CreationDate`"},
	CreationTime:                               whereHelperstring{field: "`data_platform_inspection_lot_component_composition_data`.`CreationTime`"},
	LastChangeDate:                             whereHelperstring{field: "`data_platform_inspection_lot_component_composition_data`.`LastChangeDate`"},
	LastChangeTime:                             whereHelperstring{field: "`data_platform_inspection_lot_component_composition_data`.`LastChangeTime`"},
	IsReleased:                                 whereHelpernull_Bool{field: "`data_platform_inspection_lot_component_composition_data`.`IsReleased`"},
	IsLocked:                                   whereHelpernull_Bool{field: "`data_platform_inspection_lot_component_composition_data`.`IsLocked`"},
	IsCancelled:                                whereHelpernull_Bool{field: "`data_platform_inspection_lot_component_composition_data`.`IsCancelled`"},
	IsMarkedForDeletion:                        whereHelpernull_Bool{field: "`data_platform_inspection_lot_component_composition_data`.`IsMarkedForDeletion`"},
}

// DataPlatformInspectionLotComponentCompositionDatumRels is where relationship names are stored.
var DataPlatformInspectionLotComponentCompositionDatumRels = struct {
	InspectionLotDataPlatformInspectionLotHeaderDatum string
}{
	InspectionLotDataPlatformInspectionLotHeaderDatum: "InspectionLotDataPlatformInspectionLotHeaderDatum",
}

// dataPlatformInspectionLotComponentCompositionDatumR is where relationships are stored.
type dataPlatformInspectionLotComponentCompositionDatumR struct {
	InspectionLotDataPlatformInspectionLotHeaderDatum *DataPlatformInspectionLotHeaderDatum `boil:"InspectionLotDataPlatformInspectionLotHeaderDatum" json:"InspectionLotDataPlatformInspectionLotHeaderDatum" toml:"InspectionLotDataPlatformInspectionLotHeaderDatum" yaml:"InspectionLotDataPlatformInspectionLotHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInspectionLotComponentCompositionDatumR) NewStruct() *dataPlatformInspectionLotComponentCompositionDatumR {
	return &dataPlatformInspectionLotComponentCompositionDatumR{}
}

func (r *dataPlatformInspectionLotComponentCompositionDatumR) GetInspectionLotDataPlatformInspectionLotHeaderDatum() *DataPlatformInspectionLotHeaderDatum {
	if r == nil {
		return nil
	}
	return r.InspectionLotDataPlatformInspectionLotHeaderDatum
}

// dataPlatformInspectionLotComponentCompositionDatumL is where Load methods for each relationship are stored.
type dataPlatformInspectionLotComponentCompositionDatumL struct{}

var (
	dataPlatformInspectionLotComponentCompositionDatumAllColumns            = []string{"InspectionLot", "ComponentCompositionType", "ComponentCompositionUpperLimitInPercent", "ComponentCompositionLowerLimitInPercent", "ComponentCompositionStandardValueInPercent", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsLocked", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformInspectionLotComponentCompositionDatumColumnsWithoutDefault = []string{"InspectionLot", "ComponentCompositionType", "ComponentCompositionUpperLimitInPercent", "ComponentCompositionLowerLimitInPercent", "ComponentCompositionStandardValueInPercent", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsReleased", "IsLocked", "IsCancelled", "IsMarkedForDeletion"}
	dataPlatformInspectionLotComponentCompositionDatumColumnsWithDefault    = []string{}
	dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyColumns     = []string{"InspectionLot", "ComponentCompositionType"}
	dataPlatformInspectionLotComponentCompositionDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInspectionLotComponentCompositionDatumSlice is an alias for a slice of pointers to DataPlatformInspectionLotComponentCompositionDatum.
	// This should almost always be used instead of []DataPlatformInspectionLotComponentCompositionDatum.
	DataPlatformInspectionLotComponentCompositionDatumSlice []*DataPlatformInspectionLotComponentCompositionDatum

	dataPlatformInspectionLotComponentCompositionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInspectionLotComponentCompositionDatumType                 = reflect.TypeOf(&DataPlatformInspectionLotComponentCompositionDatum{})
	dataPlatformInspectionLotComponentCompositionDatumMapping              = queries.MakeStructMapping(dataPlatformInspectionLotComponentCompositionDatumType)
	dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInspectionLotComponentCompositionDatumType, dataPlatformInspectionLotComponentCompositionDatumMapping, dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyColumns)
	dataPlatformInspectionLotComponentCompositionDatumInsertCacheMut       sync.RWMutex
	dataPlatformInspectionLotComponentCompositionDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInspectionLotComponentCompositionDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInspectionLotComponentCompositionDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInspectionLotComponentCompositionDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInspectionLotComponentCompositionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInspectionLotComponentCompositionDatum record from the query.
func (q dataPlatformInspectionLotComponentCompositionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInspectionLotComponentCompositionDatum, error) {
	o := &DataPlatformInspectionLotComponentCompositionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_inspection_lot_component_composition_data")
	}

	return o, nil
}

// All returns all DataPlatformInspectionLotComponentCompositionDatum records from the query.
func (q dataPlatformInspectionLotComponentCompositionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInspectionLotComponentCompositionDatumSlice, error) {
	var o []*DataPlatformInspectionLotComponentCompositionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInspectionLotComponentCompositionDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInspectionLotComponentCompositionDatum records in the query.
func (q dataPlatformInspectionLotComponentCompositionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_inspection_lot_component_composition_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInspectionLotComponentCompositionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_inspection_lot_component_composition_data exists")
	}

	return count > 0, nil
}

// InspectionLotDataPlatformInspectionLotHeaderDatum pointed to by the foreign key.
func (o *DataPlatformInspectionLotComponentCompositionDatum) InspectionLotDataPlatformInspectionLotHeaderDatum(mods ...qm.QueryMod) dataPlatformInspectionLotHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InspectionLot` = ?", o.InspectionLot),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInspectionLotHeaderData(queryMods...)
}

// LoadInspectionLotDataPlatformInspectionLotHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionLotComponentCompositionDatumL) LoadInspectionLotDataPlatformInspectionLotHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionLotComponentCompositionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionLotComponentCompositionDatum
	var object *DataPlatformInspectionLotComponentCompositionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionLotComponentCompositionDatum.(*DataPlatformInspectionLotComponentCompositionDatum)
		if !ok {
			object = new(DataPlatformInspectionLotComponentCompositionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionLotComponentCompositionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionLotComponentCompositionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionLotComponentCompositionDatum.(*[]*DataPlatformInspectionLotComponentCompositionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionLotComponentCompositionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionLotComponentCompositionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionLotComponentCompositionDatumR{}
		}
		args = append(args, object.InspectionLot)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionLotComponentCompositionDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionLot {
					continue Outer
				}
			}

			args = append(args, obj.InspectionLot)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_lot_header_data`),
		qm.WhereIn(`data_platform_inspection_lot_header_data.InspectionLot in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInspectionLotHeaderDatum")
	}

	var resultSlice []*DataPlatformInspectionLotHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInspectionLotHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_inspection_lot_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_lot_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionLotDataPlatformInspectionLotHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InspectionLot == foreign.InspectionLot {
				local.R.InspectionLotDataPlatformInspectionLotHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetInspectionLotDataPlatformInspectionLotHeaderDatum of the dataPlatformInspectionLotComponentCompositionDatum to the related item.
// Sets o.R.InspectionLotDataPlatformInspectionLotHeaderDatum to related.
func (o *DataPlatformInspectionLotComponentCompositionDatum) SetInspectionLotDataPlatformInspectionLotHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInspectionLotHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_lot_component_composition_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionLot"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.InspectionLot, o.InspectionLot, o.ComponentCompositionType}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InspectionLot = related.InspectionLot
	if o.R == nil {
		o.R = &dataPlatformInspectionLotComponentCompositionDatumR{
			InspectionLotDataPlatformInspectionLotHeaderDatum: related,
		}
	} else {
		o.R.InspectionLotDataPlatformInspectionLotHeaderDatum = related
	}

	return nil
}

// DataPlatformInspectionLotComponentCompositionData retrieves all the records using an executor.
func DataPlatformInspectionLotComponentCompositionData(mods ...qm.QueryMod) dataPlatformInspectionLotComponentCompositionDatumQuery {
	mods = append(mods, qm.From("`data_platform_inspection_lot_component_composition_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_inspection_lot_component_composition_data`.*"})
	}

	return dataPlatformInspectionLotComponentCompositionDatumQuery{q}
}

// FindDataPlatformInspectionLotComponentCompositionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInspectionLotComponentCompositionDatum(ctx context.Context, exec boil.ContextExecutor, inspectionLot int, componentCompositionType string, selectCols ...string) (*DataPlatformInspectionLotComponentCompositionDatum, error) {
	dataPlatformInspectionLotComponentCompositionDatumObj := &DataPlatformInspectionLotComponentCompositionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_inspection_lot_component_composition_data` where `InspectionLot`=? AND `ComponentCompositionType`=?", sel,
	)

	q := queries.Raw(query, inspectionLot, componentCompositionType)

	err := q.Bind(ctx, exec, dataPlatformInspectionLotComponentCompositionDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_inspection_lot_component_composition_data")
	}

	return dataPlatformInspectionLotComponentCompositionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInspectionLotComponentCompositionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_lot_component_composition_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionLotComponentCompositionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInspectionLotComponentCompositionDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotComponentCompositionDatumInsertCache[key]
	dataPlatformInspectionLotComponentCompositionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInspectionLotComponentCompositionDatumAllColumns,
			dataPlatformInspectionLotComponentCompositionDatumColumnsWithDefault,
			dataPlatformInspectionLotComponentCompositionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotComponentCompositionDatumType, dataPlatformInspectionLotComponentCompositionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInspectionLotComponentCompositionDatumType, dataPlatformInspectionLotComponentCompositionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_inspection_lot_component_composition_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_inspection_lot_component_composition_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_inspection_lot_component_composition_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_inspection_lot_component_composition_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InspectionLot,
		o.ComponentCompositionType,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_lot_component_composition_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionLotComponentCompositionDatumInsertCacheMut.Lock()
		dataPlatformInspectionLotComponentCompositionDatumInsertCache[key] = cache
		dataPlatformInspectionLotComponentCompositionDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInspectionLotComponentCompositionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInspectionLotComponentCompositionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInspectionLotComponentCompositionDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotComponentCompositionDatumUpdateCache[key]
	dataPlatformInspectionLotComponentCompositionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInspectionLotComponentCompositionDatumAllColumns,
			dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_inspection_lot_component_composition_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_inspection_lot_component_composition_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotComponentCompositionDatumType, dataPlatformInspectionLotComponentCompositionDatumMapping, append(wl, dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_inspection_lot_component_composition_data row")
	}

	if !cached {
		dataPlatformInspectionLotComponentCompositionDatumUpdateCacheMut.Lock()
		dataPlatformInspectionLotComponentCompositionDatumUpdateCache[key] = cache
		dataPlatformInspectionLotComponentCompositionDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInspectionLotComponentCompositionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_inspection_lot_component_composition_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInspectionLotComponentCompositionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_inspection_lot_component_composition_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInspectionLotComponentCompositionDatum slice")
	}

	return nil
}

var mySQLDataPlatformInspectionLotComponentCompositionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInspectionLotComponentCompositionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_lot_component_composition_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionLotComponentCompositionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInspectionLotComponentCompositionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInspectionLotComponentCompositionDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionLotComponentCompositionDatumUpsertCache[key]
	dataPlatformInspectionLotComponentCompositionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInspectionLotComponentCompositionDatumAllColumns,
			dataPlatformInspectionLotComponentCompositionDatumColumnsWithDefault,
			dataPlatformInspectionLotComponentCompositionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInspectionLotComponentCompositionDatumAllColumns,
			dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_inspection_lot_component_composition_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_inspection_lot_component_composition_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_inspection_lot_component_composition_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionLotComponentCompositionDatumType, dataPlatformInspectionLotComponentCompositionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInspectionLotComponentCompositionDatumType, dataPlatformInspectionLotComponentCompositionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_inspection_lot_component_composition_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInspectionLotComponentCompositionDatumType, dataPlatformInspectionLotComponentCompositionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_inspection_lot_component_composition_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_lot_component_composition_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionLotComponentCompositionDatumUpsertCacheMut.Lock()
		dataPlatformInspectionLotComponentCompositionDatumUpsertCache[key] = cache
		dataPlatformInspectionLotComponentCompositionDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInspectionLotComponentCompositionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInspectionLotComponentCompositionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInspectionLotComponentCompositionDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_inspection_lot_component_composition_data` WHERE `InspectionLot`=? AND `ComponentCompositionType`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_inspection_lot_component_composition_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInspectionLotComponentCompositionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInspectionLotComponentCompositionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_inspection_lot_component_composition_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInspectionLotComponentCompositionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_inspection_lot_component_composition_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInspectionLotComponentCompositionDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInspectionLotComponentCompositionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInspectionLotComponentCompositionDatum(ctx, exec, o.InspectionLot, o.ComponentCompositionType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInspectionLotComponentCompositionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInspectionLotComponentCompositionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_inspection_lot_component_composition_data`.* FROM `data_platform_inspection_lot_component_composition_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionLotComponentCompositionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInspectionLotComponentCompositionDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInspectionLotComponentCompositionDatumExists checks if the DataPlatformInspectionLotComponentCompositionDatum row exists.
func DataPlatformInspectionLotComponentCompositionDatumExists(ctx context.Context, exec boil.ContextExecutor, inspectionLot int, componentCompositionType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_inspection_lot_component_composition_data` where `InspectionLot`=? AND `ComponentCompositionType`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inspectionLot, componentCompositionType)
	}
	row := exec.QueryRowContext(ctx, sql, inspectionLot, componentCompositionType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_inspection_lot_component_composition_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInspectionLotComponentCompositionDatum row exists.
func (o *DataPlatformInspectionLotComponentCompositionDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInspectionLotComponentCompositionDatumExists(ctx, exec, o.InspectionLot, o.ComponentCompositionType)
}
