// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformQuotationsHeaderPartnerDatum is an object representing the database table.
type DataPlatformQuotationsHeaderPartnerDatum struct {
	Quotation               int         `boil:"Quotation" json:"Quotation" toml:"Quotation" yaml:"Quotation"`
	PartnerFunction         string      `boil:"PartnerFunction" json:"PartnerFunction" toml:"PartnerFunction" yaml:"PartnerFunction"`
	BusinessPartner         null.Int    `boil:"BusinessPartner" json:"BusinessPartner,omitempty" toml:"BusinessPartner" yaml:"BusinessPartner,omitempty"`
	BusinessPartnerFullName null.String `boil:"BusinessPartnerFullName" json:"BusinessPartnerFullName,omitempty" toml:"BusinessPartnerFullName" yaml:"BusinessPartnerFullName,omitempty"`
	BusinessPartnerName     null.String `boil:"BusinessPartnerName" json:"BusinessPartnerName,omitempty" toml:"BusinessPartnerName" yaml:"BusinessPartnerName,omitempty"`
	QuotationType           null.String `boil:"QuotationType" json:"QuotationType,omitempty" toml:"QuotationType" yaml:"QuotationType,omitempty"`
	Organization            null.String `boil:"Organization" json:"Organization,omitempty" toml:"Organization" yaml:"Organization,omitempty"`
	Language                null.String `boil:"Language" json:"Language,omitempty" toml:"Language" yaml:"Language,omitempty"`
	Currency                null.String `boil:"Currency" json:"Currency,omitempty" toml:"Currency" yaml:"Currency,omitempty"`
	ExternalDocumentID      null.String `boil:"ExternalDocumentID" json:"ExternalDocumentID,omitempty" toml:"ExternalDocumentID" yaml:"ExternalDocumentID,omitempty"`
	AddressID               null.Int    `boil:"AddressID" json:"AddressID,omitempty" toml:"AddressID" yaml:"AddressID,omitempty"`

	R *dataPlatformQuotationsHeaderPartnerDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformQuotationsHeaderPartnerDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformQuotationsHeaderPartnerDatumColumns = struct {
	Quotation               string
	PartnerFunction         string
	BusinessPartner         string
	BusinessPartnerFullName string
	BusinessPartnerName     string
	QuotationType           string
	Organization            string
	Language                string
	Currency                string
	ExternalDocumentID      string
	AddressID               string
}{
	Quotation:               "Quotation",
	PartnerFunction:         "PartnerFunction",
	BusinessPartner:         "BusinessPartner",
	BusinessPartnerFullName: "BusinessPartnerFullName",
	BusinessPartnerName:     "BusinessPartnerName",
	QuotationType:           "QuotationType",
	Organization:            "Organization",
	Language:                "Language",
	Currency:                "Currency",
	ExternalDocumentID:      "ExternalDocumentID",
	AddressID:               "AddressID",
}

var DataPlatformQuotationsHeaderPartnerDatumTableColumns = struct {
	Quotation               string
	PartnerFunction         string
	BusinessPartner         string
	BusinessPartnerFullName string
	BusinessPartnerName     string
	QuotationType           string
	Organization            string
	Language                string
	Currency                string
	ExternalDocumentID      string
	AddressID               string
}{
	Quotation:               "data_platform_quotations_header_partner_data.Quotation",
	PartnerFunction:         "data_platform_quotations_header_partner_data.PartnerFunction",
	BusinessPartner:         "data_platform_quotations_header_partner_data.BusinessPartner",
	BusinessPartnerFullName: "data_platform_quotations_header_partner_data.BusinessPartnerFullName",
	BusinessPartnerName:     "data_platform_quotations_header_partner_data.BusinessPartnerName",
	QuotationType:           "data_platform_quotations_header_partner_data.QuotationType",
	Organization:            "data_platform_quotations_header_partner_data.Organization",
	Language:                "data_platform_quotations_header_partner_data.Language",
	Currency:                "data_platform_quotations_header_partner_data.Currency",
	ExternalDocumentID:      "data_platform_quotations_header_partner_data.ExternalDocumentID",
	AddressID:               "data_platform_quotations_header_partner_data.AddressID",
}

// Generated where

var DataPlatformQuotationsHeaderPartnerDatumWhere = struct {
	Quotation               whereHelperint
	PartnerFunction         whereHelperstring
	BusinessPartner         whereHelpernull_Int
	BusinessPartnerFullName whereHelpernull_String
	BusinessPartnerName     whereHelpernull_String
	QuotationType           whereHelpernull_String
	Organization            whereHelpernull_String
	Language                whereHelpernull_String
	Currency                whereHelpernull_String
	ExternalDocumentID      whereHelpernull_String
	AddressID               whereHelpernull_Int
}{
	Quotation:               whereHelperint{field: "`data_platform_quotations_header_partner_data`.`Quotation`"},
	PartnerFunction:         whereHelperstring{field: "`data_platform_quotations_header_partner_data`.`PartnerFunction`"},
	BusinessPartner:         whereHelpernull_Int{field: "`data_platform_quotations_header_partner_data`.`BusinessPartner`"},
	BusinessPartnerFullName: whereHelpernull_String{field: "`data_platform_quotations_header_partner_data`.`BusinessPartnerFullName`"},
	BusinessPartnerName:     whereHelpernull_String{field: "`data_platform_quotations_header_partner_data`.`BusinessPartnerName`"},
	QuotationType:           whereHelpernull_String{field: "`data_platform_quotations_header_partner_data`.`QuotationType`"},
	Organization:            whereHelpernull_String{field: "`data_platform_quotations_header_partner_data`.`Organization`"},
	Language:                whereHelpernull_String{field: "`data_platform_quotations_header_partner_data`.`Language`"},
	Currency:                whereHelpernull_String{field: "`data_platform_quotations_header_partner_data`.`Currency`"},
	ExternalDocumentID:      whereHelpernull_String{field: "`data_platform_quotations_header_partner_data`.`ExternalDocumentID`"},
	AddressID:               whereHelpernull_Int{field: "`data_platform_quotations_header_partner_data`.`AddressID`"},
}

// DataPlatformQuotationsHeaderPartnerDatumRels is where relationship names are stored.
var DataPlatformQuotationsHeaderPartnerDatumRels = struct {
	QuotationDataPlatformQuotationsHeaderDatum                    string
	PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData string
	PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData   string
}{
	QuotationDataPlatformQuotationsHeaderDatum:                    "QuotationDataPlatformQuotationsHeaderDatum",
	PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData: "PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData",
	PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData:   "PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData",
}

// dataPlatformQuotationsHeaderPartnerDatumR is where relationships are stored.
type dataPlatformQuotationsHeaderPartnerDatumR struct {
	QuotationDataPlatformQuotationsHeaderDatum                    *DataPlatformQuotationsHeaderDatum                   `boil:"QuotationDataPlatformQuotationsHeaderDatum" json:"QuotationDataPlatformQuotationsHeaderDatum" toml:"QuotationDataPlatformQuotationsHeaderDatum" yaml:"QuotationDataPlatformQuotationsHeaderDatum"`
	PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData DataPlatformQuotationsHeaderPartnerContactDatumSlice `boil:"PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData" json:"PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData" toml:"PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData" yaml:"PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData"`
	PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData   DataPlatformQuotationsHeaderPartnerPlantDatumSlice   `boil:"PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData" json:"PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData" toml:"PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData" yaml:"PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformQuotationsHeaderPartnerDatumR) NewStruct() *dataPlatformQuotationsHeaderPartnerDatumR {
	return &dataPlatformQuotationsHeaderPartnerDatumR{}
}

func (r *dataPlatformQuotationsHeaderPartnerDatumR) GetQuotationDataPlatformQuotationsHeaderDatum() *DataPlatformQuotationsHeaderDatum {
	if r == nil {
		return nil
	}
	return r.QuotationDataPlatformQuotationsHeaderDatum
}

func (r *dataPlatformQuotationsHeaderPartnerDatumR) GetPartnerFunctionDataPlatformQuotationsHeaderPartnerContactData() DataPlatformQuotationsHeaderPartnerContactDatumSlice {
	if r == nil {
		return nil
	}
	return r.PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData
}

func (r *dataPlatformQuotationsHeaderPartnerDatumR) GetPartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData() DataPlatformQuotationsHeaderPartnerPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData
}

// dataPlatformQuotationsHeaderPartnerDatumL is where Load methods for each relationship are stored.
type dataPlatformQuotationsHeaderPartnerDatumL struct{}

var (
	dataPlatformQuotationsHeaderPartnerDatumAllColumns            = []string{"Quotation", "PartnerFunction", "BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "QuotationType", "Organization", "Language", "Currency", "ExternalDocumentID", "AddressID"}
	dataPlatformQuotationsHeaderPartnerDatumColumnsWithoutDefault = []string{"Quotation", "PartnerFunction", "BusinessPartner", "BusinessPartnerFullName", "BusinessPartnerName", "QuotationType", "Organization", "Language", "Currency", "ExternalDocumentID", "AddressID"}
	dataPlatformQuotationsHeaderPartnerDatumColumnsWithDefault    = []string{}
	dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyColumns     = []string{"Quotation", "PartnerFunction"}
	dataPlatformQuotationsHeaderPartnerDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformQuotationsHeaderPartnerDatumSlice is an alias for a slice of pointers to DataPlatformQuotationsHeaderPartnerDatum.
	// This should almost always be used instead of []DataPlatformQuotationsHeaderPartnerDatum.
	DataPlatformQuotationsHeaderPartnerDatumSlice []*DataPlatformQuotationsHeaderPartnerDatum

	dataPlatformQuotationsHeaderPartnerDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformQuotationsHeaderPartnerDatumType                 = reflect.TypeOf(&DataPlatformQuotationsHeaderPartnerDatum{})
	dataPlatformQuotationsHeaderPartnerDatumMapping              = queries.MakeStructMapping(dataPlatformQuotationsHeaderPartnerDatumType)
	dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformQuotationsHeaderPartnerDatumType, dataPlatformQuotationsHeaderPartnerDatumMapping, dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyColumns)
	dataPlatformQuotationsHeaderPartnerDatumInsertCacheMut       sync.RWMutex
	dataPlatformQuotationsHeaderPartnerDatumInsertCache          = make(map[string]insertCache)
	dataPlatformQuotationsHeaderPartnerDatumUpdateCacheMut       sync.RWMutex
	dataPlatformQuotationsHeaderPartnerDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformQuotationsHeaderPartnerDatumUpsertCacheMut       sync.RWMutex
	dataPlatformQuotationsHeaderPartnerDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformQuotationsHeaderPartnerDatum record from the query.
func (q dataPlatformQuotationsHeaderPartnerDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformQuotationsHeaderPartnerDatum, error) {
	o := &DataPlatformQuotationsHeaderPartnerDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_quotations_header_partner_data")
	}

	return o, nil
}

// All returns all DataPlatformQuotationsHeaderPartnerDatum records from the query.
func (q dataPlatformQuotationsHeaderPartnerDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformQuotationsHeaderPartnerDatumSlice, error) {
	var o []*DataPlatformQuotationsHeaderPartnerDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformQuotationsHeaderPartnerDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformQuotationsHeaderPartnerDatum records in the query.
func (q dataPlatformQuotationsHeaderPartnerDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_quotations_header_partner_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformQuotationsHeaderPartnerDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_quotations_header_partner_data exists")
	}

	return count > 0, nil
}

// QuotationDataPlatformQuotationsHeaderDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsHeaderPartnerDatum) QuotationDataPlatformQuotationsHeaderDatum(mods ...qm.QueryMod) dataPlatformQuotationsHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Quotation` = ?", o.Quotation),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuotationsHeaderData(queryMods...)
}

// PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData retrieves all the data_platform_quotations_header_partner_contact_datum's DataPlatformQuotationsHeaderPartnerContactData with an executor via PartnerFunction column.
func (o *DataPlatformQuotationsHeaderPartnerDatum) PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderPartnerContactDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_header_partner_contact_data`.`PartnerFunction`=?", o.PartnerFunction),
	)

	return DataPlatformQuotationsHeaderPartnerContactData(queryMods...)
}

// PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData retrieves all the data_platform_quotations_header_partner_plant_datum's DataPlatformQuotationsHeaderPartnerPlantData with an executor via PartnerFunction column.
func (o *DataPlatformQuotationsHeaderPartnerDatum) PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderPartnerPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_quotations_header_partner_plant_data`.`PartnerFunction`=?", o.PartnerFunction),
	)

	return DataPlatformQuotationsHeaderPartnerPlantData(queryMods...)
}

// LoadQuotationDataPlatformQuotationsHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsHeaderPartnerDatumL) LoadQuotationDataPlatformQuotationsHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderPartnerDatum
	var object *DataPlatformQuotationsHeaderPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderPartnerDatum.(*DataPlatformQuotationsHeaderPartnerDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderPartnerDatum.(*[]*DataPlatformQuotationsHeaderPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderPartnerDatumR{}
		}
		args = append(args, object.Quotation)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.Quotation {
					continue Outer
				}
			}

			args = append(args, obj.Quotation)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_data`),
		qm.WhereIn(`data_platform_quotations_header_data.Quotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuotationsHeaderDatum")
	}

	var resultSlice []*DataPlatformQuotationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuotationsHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quotations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QuotationDataPlatformQuotationsHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Quotation == foreign.Quotation {
				local.R.QuotationDataPlatformQuotationsHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPartnerFunctionDataPlatformQuotationsHeaderPartnerContactData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuotationsHeaderPartnerDatumL) LoadPartnerFunctionDataPlatformQuotationsHeaderPartnerContactData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderPartnerDatum
	var object *DataPlatformQuotationsHeaderPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderPartnerDatum.(*DataPlatformQuotationsHeaderPartnerDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderPartnerDatum.(*[]*DataPlatformQuotationsHeaderPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderPartnerDatumR{}
		}
		args = append(args, object.PartnerFunction)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.PartnerFunction {
					continue Outer
				}
			}

			args = append(args, obj.PartnerFunction)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_partner_contact_data`),
		qm.WhereIn(`data_platform_quotations_header_partner_contact_data.PartnerFunction in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_header_partner_contact_data")
	}

	var resultSlice []*DataPlatformQuotationsHeaderPartnerContactDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_header_partner_contact_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_header_partner_contact_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_partner_contact_data")
	}

	if singular {
		object.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PartnerFunction == foreign.PartnerFunction {
				local.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData = append(local.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformQuotationsHeaderPartnerDatumL) LoadPartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsHeaderPartnerDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsHeaderPartnerDatum
	var object *DataPlatformQuotationsHeaderPartnerDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsHeaderPartnerDatum.(*DataPlatformQuotationsHeaderPartnerDatum)
		if !ok {
			object = new(DataPlatformQuotationsHeaderPartnerDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsHeaderPartnerDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsHeaderPartnerDatum.(*[]*DataPlatformQuotationsHeaderPartnerDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsHeaderPartnerDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsHeaderPartnerDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsHeaderPartnerDatumR{}
		}
		args = append(args, object.PartnerFunction)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsHeaderPartnerDatumR{}
			}

			for _, a := range args {
				if a == obj.PartnerFunction {
					continue Outer
				}
			}

			args = append(args, obj.PartnerFunction)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_partner_plant_data`),
		qm.WhereIn(`data_platform_quotations_header_partner_plant_data.PartnerFunction in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_quotations_header_partner_plant_data")
	}

	var resultSlice []*DataPlatformQuotationsHeaderPartnerPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_quotations_header_partner_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_quotations_header_partner_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_partner_plant_data")
	}

	if singular {
		object.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PartnerFunction == foreign.PartnerFunction {
				local.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData = append(local.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData, foreign)
				break
			}
		}
	}

	return nil
}

// SetQuotationDataPlatformQuotationsHeaderDatum of the dataPlatformQuotationsHeaderPartnerDatum to the related item.
// Sets o.R.QuotationDataPlatformQuotationsHeaderDatum to related.
func (o *DataPlatformQuotationsHeaderPartnerDatum) SetQuotationDataPlatformQuotationsHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuotationsHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Quotation"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Quotation, o.Quotation, o.PartnerFunction}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Quotation = related.Quotation
	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderPartnerDatumR{
			QuotationDataPlatformQuotationsHeaderDatum: related,
		}
	} else {
		o.R.QuotationDataPlatformQuotationsHeaderDatum = related
	}

	return nil
}

// AddPartnerFunctionDataPlatformQuotationsHeaderPartnerContactData adds the given related objects to the existing relationships
// of the data_platform_quotations_header_partner_datum, optionally inserting them as new records.
// Appends related to o.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData.
func (o *DataPlatformQuotationsHeaderPartnerDatum) AddPartnerFunctionDataPlatformQuotationsHeaderPartnerContactData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderPartnerContactDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PartnerFunction = o.PartnerFunction
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_header_partner_contact_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PartnerFunction"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderPartnerContactDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PartnerFunction, rel.Quotation, rel.PartnerFunction, rel.ContactID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PartnerFunction = o.PartnerFunction
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderPartnerDatumR{
			PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData: related,
		}
	} else {
		o.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData = append(o.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerContactData, related...)
	}

	return nil
}

// AddPartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData adds the given related objects to the existing relationships
// of the data_platform_quotations_header_partner_datum, optionally inserting them as new records.
// Appends related to o.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData.
func (o *DataPlatformQuotationsHeaderPartnerDatum) AddPartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformQuotationsHeaderPartnerPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PartnerFunction = o.PartnerFunction
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_quotations_header_partner_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PartnerFunction"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderPartnerPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PartnerFunction, rel.Quotation, rel.PartnerFunction, rel.BusinessPartner}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PartnerFunction = o.PartnerFunction
		}
	}

	if o.R == nil {
		o.R = &dataPlatformQuotationsHeaderPartnerDatumR{
			PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData: related,
		}
	} else {
		o.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData = append(o.R.PartnerFunctionDataPlatformQuotationsHeaderPartnerPlantData, related...)
	}

	return nil
}

// DataPlatformQuotationsHeaderPartnerData retrieves all the records using an executor.
func DataPlatformQuotationsHeaderPartnerData(mods ...qm.QueryMod) dataPlatformQuotationsHeaderPartnerDatumQuery {
	mods = append(mods, qm.From("`data_platform_quotations_header_partner_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_quotations_header_partner_data`.*"})
	}

	return dataPlatformQuotationsHeaderPartnerDatumQuery{q}
}

// FindDataPlatformQuotationsHeaderPartnerDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformQuotationsHeaderPartnerDatum(ctx context.Context, exec boil.ContextExecutor, quotation int, partnerFunction string, selectCols ...string) (*DataPlatformQuotationsHeaderPartnerDatum, error) {
	dataPlatformQuotationsHeaderPartnerDatumObj := &DataPlatformQuotationsHeaderPartnerDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_quotations_header_partner_data` where `Quotation`=? AND `PartnerFunction`=?", sel,
	)

	q := queries.Raw(query, quotation, partnerFunction)

	err := q.Bind(ctx, exec, dataPlatformQuotationsHeaderPartnerDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_quotations_header_partner_data")
	}

	return dataPlatformQuotationsHeaderPartnerDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformQuotationsHeaderPartnerDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_header_partner_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsHeaderPartnerDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformQuotationsHeaderPartnerDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsHeaderPartnerDatumInsertCache[key]
	dataPlatformQuotationsHeaderPartnerDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformQuotationsHeaderPartnerDatumAllColumns,
			dataPlatformQuotationsHeaderPartnerDatumColumnsWithDefault,
			dataPlatformQuotationsHeaderPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderPartnerDatumType, dataPlatformQuotationsHeaderPartnerDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderPartnerDatumType, dataPlatformQuotationsHeaderPartnerDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_quotations_header_partner_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_quotations_header_partner_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_quotations_header_partner_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_quotations_header_partner_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Quotation,
		o.PartnerFunction,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_header_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsHeaderPartnerDatumInsertCacheMut.Lock()
		dataPlatformQuotationsHeaderPartnerDatumInsertCache[key] = cache
		dataPlatformQuotationsHeaderPartnerDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformQuotationsHeaderPartnerDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformQuotationsHeaderPartnerDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformQuotationsHeaderPartnerDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformQuotationsHeaderPartnerDatumUpdateCache[key]
	dataPlatformQuotationsHeaderPartnerDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformQuotationsHeaderPartnerDatumAllColumns,
			dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_quotations_header_partner_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_quotations_header_partner_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderPartnerDatumType, dataPlatformQuotationsHeaderPartnerDatumMapping, append(wl, dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_quotations_header_partner_data row")
	}

	if !cached {
		dataPlatformQuotationsHeaderPartnerDatumUpdateCacheMut.Lock()
		dataPlatformQuotationsHeaderPartnerDatumUpdateCache[key] = cache
		dataPlatformQuotationsHeaderPartnerDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformQuotationsHeaderPartnerDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_quotations_header_partner_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformQuotationsHeaderPartnerDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_quotations_header_partner_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformQuotationsHeaderPartnerDatum slice")
	}

	return nil
}

var mySQLDataPlatformQuotationsHeaderPartnerDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformQuotationsHeaderPartnerDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_header_partner_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsHeaderPartnerDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformQuotationsHeaderPartnerDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformQuotationsHeaderPartnerDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsHeaderPartnerDatumUpsertCache[key]
	dataPlatformQuotationsHeaderPartnerDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformQuotationsHeaderPartnerDatumAllColumns,
			dataPlatformQuotationsHeaderPartnerDatumColumnsWithDefault,
			dataPlatformQuotationsHeaderPartnerDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformQuotationsHeaderPartnerDatumAllColumns,
			dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_quotations_header_partner_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_quotations_header_partner_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_quotations_header_partner_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderPartnerDatumType, dataPlatformQuotationsHeaderPartnerDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsHeaderPartnerDatumType, dataPlatformQuotationsHeaderPartnerDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_quotations_header_partner_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformQuotationsHeaderPartnerDatumType, dataPlatformQuotationsHeaderPartnerDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_quotations_header_partner_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_header_partner_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsHeaderPartnerDatumUpsertCacheMut.Lock()
		dataPlatformQuotationsHeaderPartnerDatumUpsertCache[key] = cache
		dataPlatformQuotationsHeaderPartnerDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformQuotationsHeaderPartnerDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformQuotationsHeaderPartnerDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformQuotationsHeaderPartnerDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_quotations_header_partner_data` WHERE `Quotation`=? AND `PartnerFunction`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_quotations_header_partner_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformQuotationsHeaderPartnerDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformQuotationsHeaderPartnerDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_quotations_header_partner_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformQuotationsHeaderPartnerDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_quotations_header_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformQuotationsHeaderPartnerDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformQuotationsHeaderPartnerDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformQuotationsHeaderPartnerDatum(ctx, exec, o.Quotation, o.PartnerFunction)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformQuotationsHeaderPartnerDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformQuotationsHeaderPartnerDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_quotations_header_partner_data`.* FROM `data_platform_quotations_header_partner_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsHeaderPartnerDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformQuotationsHeaderPartnerDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformQuotationsHeaderPartnerDatumExists checks if the DataPlatformQuotationsHeaderPartnerDatum row exists.
func DataPlatformQuotationsHeaderPartnerDatumExists(ctx context.Context, exec boil.ContextExecutor, quotation int, partnerFunction string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_quotations_header_partner_data` where `Quotation`=? AND `PartnerFunction`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, quotation, partnerFunction)
	}
	row := exec.QueryRowContext(ctx, sql, quotation, partnerFunction)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_quotations_header_partner_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformQuotationsHeaderPartnerDatum row exists.
func (o *DataPlatformQuotationsHeaderPartnerDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformQuotationsHeaderPartnerDatumExists(ctx, exec, o.Quotation, o.PartnerFunction)
}
