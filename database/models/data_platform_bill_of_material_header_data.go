// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformBillOfMaterialHeaderDatum is an object representing the database table.
type DataPlatformBillOfMaterialHeaderDatum struct {
	BillOfMaterial                           int         `boil:"BillOfMaterial" json:"BillOfMaterial" toml:"BillOfMaterial" yaml:"BillOfMaterial"`
	BillOfMaterialType                       string      `boil:"BillOfMaterialType" json:"BillOfMaterialType" toml:"BillOfMaterialType" yaml:"BillOfMaterialType"`
	SupplyChainRelationshipID                int         `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID        int         `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID   int         `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipProductionPlantID int         `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID"`
	Product                                  string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Buyer                                    int         `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                   int         `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DestinationDeliverToParty                int         `boil:"DestinationDeliverToParty" json:"DestinationDeliverToParty" toml:"DestinationDeliverToParty" yaml:"DestinationDeliverToParty"`
	DestinationDeliverToPlant                string      `boil:"DestinationDeliverToPlant" json:"DestinationDeliverToPlant" toml:"DestinationDeliverToPlant" yaml:"DestinationDeliverToPlant"`
	DepartureDeliverFromParty                int         `boil:"DepartureDeliverFromParty" json:"DepartureDeliverFromParty" toml:"DepartureDeliverFromParty" yaml:"DepartureDeliverFromParty"`
	DepartureDeliverFromPlant                string      `boil:"DepartureDeliverFromPlant" json:"DepartureDeliverFromPlant" toml:"DepartureDeliverFromPlant" yaml:"DepartureDeliverFromPlant"`
	OwnerProductionPlantBusinessPartner      int         `boil:"OwnerProductionPlantBusinessPartner" json:"OwnerProductionPlantBusinessPartner" toml:"OwnerProductionPlantBusinessPartner" yaml:"OwnerProductionPlantBusinessPartner"`
	OwnerProductionPlant                     string      `boil:"OwnerProductionPlant" json:"OwnerProductionPlant" toml:"OwnerProductionPlant" yaml:"OwnerProductionPlant"`
	ProductBaseUnit                          string      `boil:"ProductBaseUnit" json:"ProductBaseUnit" toml:"ProductBaseUnit" yaml:"ProductBaseUnit"`
	ProductDeliveryUnit                      string      `boil:"ProductDeliveryUnit" json:"ProductDeliveryUnit" toml:"ProductDeliveryUnit" yaml:"ProductDeliveryUnit"`
	ProductProductionUnit                    string      `boil:"ProductProductionUnit" json:"ProductProductionUnit" toml:"ProductProductionUnit" yaml:"ProductProductionUnit"`
	ProductStandardQuantityInBaseUnit        float32     `boil:"ProductStandardQuantityInBaseUnit" json:"ProductStandardQuantityInBaseUnit" toml:"ProductStandardQuantityInBaseUnit" yaml:"ProductStandardQuantityInBaseUnit"`
	ProductStandardQuantityInDeliveryUnit    float32     `boil:"ProductStandardQuantityInDeliveryUnit" json:"ProductStandardQuantityInDeliveryUnit" toml:"ProductStandardQuantityInDeliveryUnit" yaml:"ProductStandardQuantityInDeliveryUnit"`
	ProductStandardQuantityInProductionUnit  float32     `boil:"ProductStandardQuantityInProductionUnit" json:"ProductStandardQuantityInProductionUnit" toml:"ProductStandardQuantityInProductionUnit" yaml:"ProductStandardQuantityInProductionUnit"`
	BillOfMaterialHeaderText                 null.String `boil:"BillOfMaterialHeaderText" json:"BillOfMaterialHeaderText,omitempty" toml:"BillOfMaterialHeaderText" yaml:"BillOfMaterialHeaderText,omitempty"`
	ValidityStartDate                        null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate                          null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	CreationDate                             string      `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                           string      `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsMarkedForDeletion                      null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformBillOfMaterialHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformBillOfMaterialHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformBillOfMaterialHeaderDatumColumns = struct {
	BillOfMaterial                           string
	BillOfMaterialType                       string
	SupplyChainRelationshipID                string
	SupplyChainRelationshipDeliveryID        string
	SupplyChainRelationshipDeliveryPlantID   string
	SupplyChainRelationshipProductionPlantID string
	Product                                  string
	Buyer                                    string
	Seller                                   string
	DestinationDeliverToParty                string
	DestinationDeliverToPlant                string
	DepartureDeliverFromParty                string
	DepartureDeliverFromPlant                string
	OwnerProductionPlantBusinessPartner      string
	OwnerProductionPlant                     string
	ProductBaseUnit                          string
	ProductDeliveryUnit                      string
	ProductProductionUnit                    string
	ProductStandardQuantityInBaseUnit        string
	ProductStandardQuantityInDeliveryUnit    string
	ProductStandardQuantityInProductionUnit  string
	BillOfMaterialHeaderText                 string
	ValidityStartDate                        string
	ValidityEndDate                          string
	CreationDate                             string
	LastChangeDate                           string
	IsMarkedForDeletion                      string
}{
	BillOfMaterial:                           "BillOfMaterial",
	BillOfMaterialType:                       "BillOfMaterialType",
	SupplyChainRelationshipID:                "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:        "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:   "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID: "SupplyChainRelationshipProductionPlantID",
	Product:                                  "Product",
	Buyer:                                    "Buyer",
	Seller:                                   "Seller",
	DestinationDeliverToParty:                "DestinationDeliverToParty",
	DestinationDeliverToPlant:                "DestinationDeliverToPlant",
	DepartureDeliverFromParty:                "DepartureDeliverFromParty",
	DepartureDeliverFromPlant:                "DepartureDeliverFromPlant",
	OwnerProductionPlantBusinessPartner:      "OwnerProductionPlantBusinessPartner",
	OwnerProductionPlant:                     "OwnerProductionPlant",
	ProductBaseUnit:                          "ProductBaseUnit",
	ProductDeliveryUnit:                      "ProductDeliveryUnit",
	ProductProductionUnit:                    "ProductProductionUnit",
	ProductStandardQuantityInBaseUnit:        "ProductStandardQuantityInBaseUnit",
	ProductStandardQuantityInDeliveryUnit:    "ProductStandardQuantityInDeliveryUnit",
	ProductStandardQuantityInProductionUnit:  "ProductStandardQuantityInProductionUnit",
	BillOfMaterialHeaderText:                 "BillOfMaterialHeaderText",
	ValidityStartDate:                        "ValidityStartDate",
	ValidityEndDate:                          "ValidityEndDate",
	CreationDate:                             "CreationDate",
	LastChangeDate:                           "LastChangeDate",
	IsMarkedForDeletion:                      "IsMarkedForDeletion",
}

var DataPlatformBillOfMaterialHeaderDatumTableColumns = struct {
	BillOfMaterial                           string
	BillOfMaterialType                       string
	SupplyChainRelationshipID                string
	SupplyChainRelationshipDeliveryID        string
	SupplyChainRelationshipDeliveryPlantID   string
	SupplyChainRelationshipProductionPlantID string
	Product                                  string
	Buyer                                    string
	Seller                                   string
	DestinationDeliverToParty                string
	DestinationDeliverToPlant                string
	DepartureDeliverFromParty                string
	DepartureDeliverFromPlant                string
	OwnerProductionPlantBusinessPartner      string
	OwnerProductionPlant                     string
	ProductBaseUnit                          string
	ProductDeliveryUnit                      string
	ProductProductionUnit                    string
	ProductStandardQuantityInBaseUnit        string
	ProductStandardQuantityInDeliveryUnit    string
	ProductStandardQuantityInProductionUnit  string
	BillOfMaterialHeaderText                 string
	ValidityStartDate                        string
	ValidityEndDate                          string
	CreationDate                             string
	LastChangeDate                           string
	IsMarkedForDeletion                      string
}{
	BillOfMaterial:                           "data_platform_bill_of_material_header_data.BillOfMaterial",
	BillOfMaterialType:                       "data_platform_bill_of_material_header_data.BillOfMaterialType",
	SupplyChainRelationshipID:                "data_platform_bill_of_material_header_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:        "data_platform_bill_of_material_header_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:   "data_platform_bill_of_material_header_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID: "data_platform_bill_of_material_header_data.SupplyChainRelationshipProductionPlantID",
	Product:                                  "data_platform_bill_of_material_header_data.Product",
	Buyer:                                    "data_platform_bill_of_material_header_data.Buyer",
	Seller:                                   "data_platform_bill_of_material_header_data.Seller",
	DestinationDeliverToParty:                "data_platform_bill_of_material_header_data.DestinationDeliverToParty",
	DestinationDeliverToPlant:                "data_platform_bill_of_material_header_data.DestinationDeliverToPlant",
	DepartureDeliverFromParty:                "data_platform_bill_of_material_header_data.DepartureDeliverFromParty",
	DepartureDeliverFromPlant:                "data_platform_bill_of_material_header_data.DepartureDeliverFromPlant",
	OwnerProductionPlantBusinessPartner:      "data_platform_bill_of_material_header_data.OwnerProductionPlantBusinessPartner",
	OwnerProductionPlant:                     "data_platform_bill_of_material_header_data.OwnerProductionPlant",
	ProductBaseUnit:                          "data_platform_bill_of_material_header_data.ProductBaseUnit",
	ProductDeliveryUnit:                      "data_platform_bill_of_material_header_data.ProductDeliveryUnit",
	ProductProductionUnit:                    "data_platform_bill_of_material_header_data.ProductProductionUnit",
	ProductStandardQuantityInBaseUnit:        "data_platform_bill_of_material_header_data.ProductStandardQuantityInBaseUnit",
	ProductStandardQuantityInDeliveryUnit:    "data_platform_bill_of_material_header_data.ProductStandardQuantityInDeliveryUnit",
	ProductStandardQuantityInProductionUnit:  "data_platform_bill_of_material_header_data.ProductStandardQuantityInProductionUnit",
	BillOfMaterialHeaderText:                 "data_platform_bill_of_material_header_data.BillOfMaterialHeaderText",
	ValidityStartDate:                        "data_platform_bill_of_material_header_data.ValidityStartDate",
	ValidityEndDate:                          "data_platform_bill_of_material_header_data.ValidityEndDate",
	CreationDate:                             "data_platform_bill_of_material_header_data.CreationDate",
	LastChangeDate:                           "data_platform_bill_of_material_header_data.LastChangeDate",
	IsMarkedForDeletion:                      "data_platform_bill_of_material_header_data.IsMarkedForDeletion",
}

// Generated where

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var DataPlatformBillOfMaterialHeaderDatumWhere = struct {
	BillOfMaterial                           whereHelperint
	BillOfMaterialType                       whereHelperstring
	SupplyChainRelationshipID                whereHelperint
	SupplyChainRelationshipDeliveryID        whereHelperint
	SupplyChainRelationshipDeliveryPlantID   whereHelperint
	SupplyChainRelationshipProductionPlantID whereHelperint
	Product                                  whereHelperstring
	Buyer                                    whereHelperint
	Seller                                   whereHelperint
	DestinationDeliverToParty                whereHelperint
	DestinationDeliverToPlant                whereHelperstring
	DepartureDeliverFromParty                whereHelperint
	DepartureDeliverFromPlant                whereHelperstring
	OwnerProductionPlantBusinessPartner      whereHelperint
	OwnerProductionPlant                     whereHelperstring
	ProductBaseUnit                          whereHelperstring
	ProductDeliveryUnit                      whereHelperstring
	ProductProductionUnit                    whereHelperstring
	ProductStandardQuantityInBaseUnit        whereHelperfloat32
	ProductStandardQuantityInDeliveryUnit    whereHelperfloat32
	ProductStandardQuantityInProductionUnit  whereHelperfloat32
	BillOfMaterialHeaderText                 whereHelpernull_String
	ValidityStartDate                        whereHelpernull_String
	ValidityEndDate                          whereHelpernull_String
	CreationDate                             whereHelperstring
	LastChangeDate                           whereHelperstring
	IsMarkedForDeletion                      whereHelpernull_Bool
}{
	BillOfMaterial:                           whereHelperint{field: "`data_platform_bill_of_material_header_data`.`BillOfMaterial`"},
	BillOfMaterialType:                       whereHelperstring{field: "`data_platform_bill_of_material_header_data`.`BillOfMaterialType`"},
	SupplyChainRelationshipID:                whereHelperint{field: "`data_platform_bill_of_material_header_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:        whereHelperint{field: "`data_platform_bill_of_material_header_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:   whereHelperint{field: "`data_platform_bill_of_material_header_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipProductionPlantID: whereHelperint{field: "`data_platform_bill_of_material_header_data`.`SupplyChainRelationshipProductionPlantID`"},
	Product:                                  whereHelperstring{field: "`data_platform_bill_of_material_header_data`.`Product`"},
	Buyer:                                    whereHelperint{field: "`data_platform_bill_of_material_header_data`.`Buyer`"},
	Seller:                                   whereHelperint{field: "`data_platform_bill_of_material_header_data`.`Seller`"},
	DestinationDeliverToParty:                whereHelperint{field: "`data_platform_bill_of_material_header_data`.`DestinationDeliverToParty`"},
	DestinationDeliverToPlant:                whereHelperstring{field: "`data_platform_bill_of_material_header_data`.`DestinationDeliverToPlant`"},
	DepartureDeliverFromParty:                whereHelperint{field: "`data_platform_bill_of_material_header_data`.`DepartureDeliverFromParty`"},
	DepartureDeliverFromPlant:                whereHelperstring{field: "`data_platform_bill_of_material_header_data`.`DepartureDeliverFromPlant`"},
	OwnerProductionPlantBusinessPartner:      whereHelperint{field: "`data_platform_bill_of_material_header_data`.`OwnerProductionPlantBusinessPartner`"},
	OwnerProductionPlant:                     whereHelperstring{field: "`data_platform_bill_of_material_header_data`.`OwnerProductionPlant`"},
	ProductBaseUnit:                          whereHelperstring{field: "`data_platform_bill_of_material_header_data`.`ProductBaseUnit`"},
	ProductDeliveryUnit:                      whereHelperstring{field: "`data_platform_bill_of_material_header_data`.`ProductDeliveryUnit`"},
	ProductProductionUnit:                    whereHelperstring{field: "`data_platform_bill_of_material_header_data`.`ProductProductionUnit`"},
	ProductStandardQuantityInBaseUnit:        whereHelperfloat32{field: "`data_platform_bill_of_material_header_data`.`ProductStandardQuantityInBaseUnit`"},
	ProductStandardQuantityInDeliveryUnit:    whereHelperfloat32{field: "`data_platform_bill_of_material_header_data`.`ProductStandardQuantityInDeliveryUnit`"},
	ProductStandardQuantityInProductionUnit:  whereHelperfloat32{field: "`data_platform_bill_of_material_header_data`.`ProductStandardQuantityInProductionUnit`"},
	BillOfMaterialHeaderText:                 whereHelpernull_String{field: "`data_platform_bill_of_material_header_data`.`BillOfMaterialHeaderText`"},
	ValidityStartDate:                        whereHelpernull_String{field: "`data_platform_bill_of_material_header_data`.`ValidityStartDate`"},
	ValidityEndDate:                          whereHelpernull_String{field: "`data_platform_bill_of_material_header_data`.`ValidityEndDate`"},
	CreationDate:                             whereHelperstring{field: "`data_platform_bill_of_material_header_data`.`CreationDate`"},
	LastChangeDate:                           whereHelperstring{field: "`data_platform_bill_of_material_header_data`.`LastChangeDate`"},
	IsMarkedForDeletion:                      whereHelpernull_Bool{field: "`data_platform_bill_of_material_header_data`.`IsMarkedForDeletion`"},
}

// DataPlatformBillOfMaterialHeaderDatumRels is where relationship names are stored.
var DataPlatformBillOfMaterialHeaderDatumRels = struct {
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum       string
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum   string
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum string
	BuyerDataPlatformSCRDeliveryRelationDatum                      string
	BuyerDataPlatformSCRGeneralDatum                               string
	BillOfMaterialDataPlatformBillOfMaterialItemData               string
}{
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum:       "ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum:   "ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: "ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:                      "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:                               "BuyerDataPlatformSCRGeneralDatum",
	BillOfMaterialDataPlatformBillOfMaterialItemData:               "BillOfMaterialDataPlatformBillOfMaterialItemData",
}

// dataPlatformBillOfMaterialHeaderDatumR is where relationships are stored.
type dataPlatformBillOfMaterialHeaderDatumR struct {
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum       *DataPlatformQuantityUnitQuantityUnitDatum `boil:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum   *DataPlatformQuantityUnitQuantityUnitDatum `boil:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum `boil:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum                      *DataPlatformSCRDeliveryRelationDatum      `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum                               *DataPlatformSCRGeneralDatum               `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	BillOfMaterialDataPlatformBillOfMaterialItemData               DataPlatformBillOfMaterialItemDatumSlice   `boil:"BillOfMaterialDataPlatformBillOfMaterialItemData" json:"BillOfMaterialDataPlatformBillOfMaterialItemData" toml:"BillOfMaterialDataPlatformBillOfMaterialItemData" yaml:"BillOfMaterialDataPlatformBillOfMaterialItemData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformBillOfMaterialHeaderDatumR) NewStruct() *dataPlatformBillOfMaterialHeaderDatumR {
	return &dataPlatformBillOfMaterialHeaderDatumR{}
}

func (r *dataPlatformBillOfMaterialHeaderDatumR) GetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformBillOfMaterialHeaderDatumR) GetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformBillOfMaterialHeaderDatumR) GetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformBillOfMaterialHeaderDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformBillOfMaterialHeaderDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformBillOfMaterialHeaderDatumR) GetBillOfMaterialDataPlatformBillOfMaterialItemData() DataPlatformBillOfMaterialItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformBillOfMaterialItemData
}

// dataPlatformBillOfMaterialHeaderDatumL is where Load methods for each relationship are stored.
type dataPlatformBillOfMaterialHeaderDatumL struct{}

var (
	dataPlatformBillOfMaterialHeaderDatumAllColumns            = []string{"BillOfMaterial", "BillOfMaterialType", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "Product", "Buyer", "Seller", "DestinationDeliverToParty", "DestinationDeliverToPlant", "DepartureDeliverFromParty", "DepartureDeliverFromPlant", "OwnerProductionPlantBusinessPartner", "OwnerProductionPlant", "ProductBaseUnit", "ProductDeliveryUnit", "ProductProductionUnit", "ProductStandardQuantityInBaseUnit", "ProductStandardQuantityInDeliveryUnit", "ProductStandardQuantityInProductionUnit", "BillOfMaterialHeaderText", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformBillOfMaterialHeaderDatumColumnsWithoutDefault = []string{"BillOfMaterial", "BillOfMaterialType", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "Product", "Buyer", "Seller", "DestinationDeliverToParty", "DestinationDeliverToPlant", "DepartureDeliverFromParty", "DepartureDeliverFromPlant", "OwnerProductionPlantBusinessPartner", "OwnerProductionPlant", "ProductBaseUnit", "ProductDeliveryUnit", "ProductProductionUnit", "ProductStandardQuantityInBaseUnit", "ProductStandardQuantityInDeliveryUnit", "ProductStandardQuantityInProductionUnit", "BillOfMaterialHeaderText", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformBillOfMaterialHeaderDatumColumnsWithDefault    = []string{}
	dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns     = []string{"BillOfMaterial"}
	dataPlatformBillOfMaterialHeaderDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformBillOfMaterialHeaderDatumSlice is an alias for a slice of pointers to DataPlatformBillOfMaterialHeaderDatum.
	// This should almost always be used instead of []DataPlatformBillOfMaterialHeaderDatum.
	DataPlatformBillOfMaterialHeaderDatumSlice []*DataPlatformBillOfMaterialHeaderDatum

	dataPlatformBillOfMaterialHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformBillOfMaterialHeaderDatumType                 = reflect.TypeOf(&DataPlatformBillOfMaterialHeaderDatum{})
	dataPlatformBillOfMaterialHeaderDatumMapping              = queries.MakeStructMapping(dataPlatformBillOfMaterialHeaderDatumType)
	dataPlatformBillOfMaterialHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformBillOfMaterialHeaderDatumType, dataPlatformBillOfMaterialHeaderDatumMapping, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns)
	dataPlatformBillOfMaterialHeaderDatumInsertCacheMut       sync.RWMutex
	dataPlatformBillOfMaterialHeaderDatumInsertCache          = make(map[string]insertCache)
	dataPlatformBillOfMaterialHeaderDatumUpdateCacheMut       sync.RWMutex
	dataPlatformBillOfMaterialHeaderDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformBillOfMaterialHeaderDatumUpsertCacheMut       sync.RWMutex
	dataPlatformBillOfMaterialHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformBillOfMaterialHeaderDatum record from the query.
func (q dataPlatformBillOfMaterialHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformBillOfMaterialHeaderDatum, error) {
	o := &DataPlatformBillOfMaterialHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_bill_of_material_header_data")
	}

	return o, nil
}

// All returns all DataPlatformBillOfMaterialHeaderDatum records from the query.
func (q dataPlatformBillOfMaterialHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformBillOfMaterialHeaderDatumSlice, error) {
	var o []*DataPlatformBillOfMaterialHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformBillOfMaterialHeaderDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformBillOfMaterialHeaderDatum records in the query.
func (q dataPlatformBillOfMaterialHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_bill_of_material_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformBillOfMaterialHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_bill_of_material_header_data exists")
	}

	return count > 0, nil
}

// ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformBillOfMaterialHeaderDatum) ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductBaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformBillOfMaterialHeaderDatum) ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductDeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformBillOfMaterialHeaderDatum) ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductProductionUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformBillOfMaterialHeaderDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformBillOfMaterialHeaderDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// BillOfMaterialDataPlatformBillOfMaterialItemData retrieves all the data_platform_bill_of_material_item_datum's DataPlatformBillOfMaterialItemData with an executor via BillOfMaterial column.
func (o *DataPlatformBillOfMaterialHeaderDatum) BillOfMaterialDataPlatformBillOfMaterialItemData(mods ...qm.QueryMod) dataPlatformBillOfMaterialItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_bill_of_material_item_data`.`BillOfMaterial`=?", o.BillOfMaterial),
	)

	return DataPlatformBillOfMaterialItemData(queryMods...)
}

// LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBillOfMaterialHeaderDatumL) LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialHeaderDatum
	var object *DataPlatformBillOfMaterialHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialHeaderDatum.(*DataPlatformBillOfMaterialHeaderDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialHeaderDatum.(*[]*DataPlatformBillOfMaterialHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialHeaderDatumR{}
		}
		args = append(args, object.ProductBaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductBaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductBaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductBaseUnit == foreign.QuantityUnit {
				local.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBillOfMaterialHeaderDatumL) LoadProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialHeaderDatum
	var object *DataPlatformBillOfMaterialHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialHeaderDatum.(*DataPlatformBillOfMaterialHeaderDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialHeaderDatum.(*[]*DataPlatformBillOfMaterialHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialHeaderDatumR{}
		}
		args = append(args, object.ProductDeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductDeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductDeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductDeliveryUnit == foreign.QuantityUnit {
				local.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBillOfMaterialHeaderDatumL) LoadProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialHeaderDatum
	var object *DataPlatformBillOfMaterialHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialHeaderDatum.(*DataPlatformBillOfMaterialHeaderDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialHeaderDatum.(*[]*DataPlatformBillOfMaterialHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialHeaderDatumR{}
		}
		args = append(args, object.ProductProductionUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductProductionUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductProductionUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductProductionUnit == foreign.QuantityUnit {
				local.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBillOfMaterialHeaderDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialHeaderDatum
	var object *DataPlatformBillOfMaterialHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialHeaderDatum.(*DataPlatformBillOfMaterialHeaderDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialHeaderDatum.(*[]*DataPlatformBillOfMaterialHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformBillOfMaterialHeaderDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialHeaderDatum
	var object *DataPlatformBillOfMaterialHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialHeaderDatum.(*DataPlatformBillOfMaterialHeaderDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialHeaderDatum.(*[]*DataPlatformBillOfMaterialHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialHeaderDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBillOfMaterialDataPlatformBillOfMaterialItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformBillOfMaterialHeaderDatumL) LoadBillOfMaterialDataPlatformBillOfMaterialItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformBillOfMaterialHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformBillOfMaterialHeaderDatum
	var object *DataPlatformBillOfMaterialHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformBillOfMaterialHeaderDatum.(*DataPlatformBillOfMaterialHeaderDatum)
		if !ok {
			object = new(DataPlatformBillOfMaterialHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformBillOfMaterialHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformBillOfMaterialHeaderDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformBillOfMaterialHeaderDatum.(*[]*DataPlatformBillOfMaterialHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformBillOfMaterialHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformBillOfMaterialHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformBillOfMaterialHeaderDatumR{}
		}
		args = append(args, object.BillOfMaterial)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformBillOfMaterialHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.BillOfMaterial {
					continue Outer
				}
			}

			args = append(args, obj.BillOfMaterial)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_item_data`),
		qm.WhereIn(`data_platform_bill_of_material_item_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_bill_of_material_item_data")
	}

	var resultSlice []*DataPlatformBillOfMaterialItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_bill_of_material_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_bill_of_material_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_item_data")
	}

	if singular {
		object.R.BillOfMaterialDataPlatformBillOfMaterialItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.BillOfMaterial == foreign.BillOfMaterial {
				local.R.BillOfMaterialDataPlatformBillOfMaterialItemData = append(local.R.BillOfMaterialDataPlatformBillOfMaterialItemData, foreign)
				break
			}
		}
	}

	return nil
}

// SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformBillOfMaterialHeaderDatum to the related item.
// Sets o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformBillOfMaterialHeaderDatum) SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.BillOfMaterial}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductBaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialHeaderDatumR{
			ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformBillOfMaterialHeaderDatum to the related item.
// Sets o.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformBillOfMaterialHeaderDatum) SetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.BillOfMaterial}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductDeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialHeaderDatumR{
			ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformBillOfMaterialHeaderDatum to the related item.
// Sets o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformBillOfMaterialHeaderDatum) SetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.BillOfMaterial}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductProductionUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialHeaderDatumR{
			ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformBillOfMaterialHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformBillOfMaterialHeaderDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.BillOfMaterial}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialHeaderDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformBillOfMaterialHeaderDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformBillOfMaterialHeaderDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.BillOfMaterial}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialHeaderDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// AddBillOfMaterialDataPlatformBillOfMaterialItemData adds the given related objects to the existing relationships
// of the data_platform_bill_of_material_header_datum, optionally inserting them as new records.
// Appends related to o.R.BillOfMaterialDataPlatformBillOfMaterialItemData.
func (o *DataPlatformBillOfMaterialHeaderDatum) AddBillOfMaterialDataPlatformBillOfMaterialItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformBillOfMaterialItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BillOfMaterial = o.BillOfMaterial
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_bill_of_material_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.BillOfMaterial, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BillOfMaterial = o.BillOfMaterial
		}
	}

	if o.R == nil {
		o.R = &dataPlatformBillOfMaterialHeaderDatumR{
			BillOfMaterialDataPlatformBillOfMaterialItemData: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformBillOfMaterialItemData = append(o.R.BillOfMaterialDataPlatformBillOfMaterialItemData, related...)
	}

	return nil
}

// DataPlatformBillOfMaterialHeaderData retrieves all the records using an executor.
func DataPlatformBillOfMaterialHeaderData(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	mods = append(mods, qm.From("`data_platform_bill_of_material_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_bill_of_material_header_data`.*"})
	}

	return dataPlatformBillOfMaterialHeaderDatumQuery{q}
}

// FindDataPlatformBillOfMaterialHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, billOfMaterial int, selectCols ...string) (*DataPlatformBillOfMaterialHeaderDatum, error) {
	dataPlatformBillOfMaterialHeaderDatumObj := &DataPlatformBillOfMaterialHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_bill_of_material_header_data` where `BillOfMaterial`=?", sel,
	)

	q := queries.Raw(query, billOfMaterial)

	err := q.Bind(ctx, exec, dataPlatformBillOfMaterialHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_bill_of_material_header_data")
	}

	return dataPlatformBillOfMaterialHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformBillOfMaterialHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_bill_of_material_header_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBillOfMaterialHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformBillOfMaterialHeaderDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformBillOfMaterialHeaderDatumInsertCache[key]
	dataPlatformBillOfMaterialHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformBillOfMaterialHeaderDatumAllColumns,
			dataPlatformBillOfMaterialHeaderDatumColumnsWithDefault,
			dataPlatformBillOfMaterialHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBillOfMaterialHeaderDatumType, dataPlatformBillOfMaterialHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformBillOfMaterialHeaderDatumType, dataPlatformBillOfMaterialHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_bill_of_material_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_bill_of_material_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_bill_of_material_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_bill_of_material_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.BillOfMaterial,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_bill_of_material_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBillOfMaterialHeaderDatumInsertCacheMut.Lock()
		dataPlatformBillOfMaterialHeaderDatumInsertCache[key] = cache
		dataPlatformBillOfMaterialHeaderDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformBillOfMaterialHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformBillOfMaterialHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformBillOfMaterialHeaderDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformBillOfMaterialHeaderDatumUpdateCache[key]
	dataPlatformBillOfMaterialHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformBillOfMaterialHeaderDatumAllColumns,
			dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_bill_of_material_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformBillOfMaterialHeaderDatumType, dataPlatformBillOfMaterialHeaderDatumMapping, append(wl, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_bill_of_material_header_data row")
	}

	if !cached {
		dataPlatformBillOfMaterialHeaderDatumUpdateCacheMut.Lock()
		dataPlatformBillOfMaterialHeaderDatumUpdateCache[key] = cache
		dataPlatformBillOfMaterialHeaderDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformBillOfMaterialHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_bill_of_material_header_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformBillOfMaterialHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBillOfMaterialHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_bill_of_material_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformBillOfMaterialHeaderDatum slice")
	}

	return nil
}

var mySQLDataPlatformBillOfMaterialHeaderDatumUniqueColumns = []string{
	"BillOfMaterial",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformBillOfMaterialHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_bill_of_material_header_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformBillOfMaterialHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformBillOfMaterialHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformBillOfMaterialHeaderDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformBillOfMaterialHeaderDatumUpsertCache[key]
	dataPlatformBillOfMaterialHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformBillOfMaterialHeaderDatumAllColumns,
			dataPlatformBillOfMaterialHeaderDatumColumnsWithDefault,
			dataPlatformBillOfMaterialHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformBillOfMaterialHeaderDatumAllColumns,
			dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_bill_of_material_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_bill_of_material_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_bill_of_material_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformBillOfMaterialHeaderDatumType, dataPlatformBillOfMaterialHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformBillOfMaterialHeaderDatumType, dataPlatformBillOfMaterialHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_bill_of_material_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformBillOfMaterialHeaderDatumType, dataPlatformBillOfMaterialHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_bill_of_material_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_bill_of_material_header_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformBillOfMaterialHeaderDatumUpsertCacheMut.Lock()
		dataPlatformBillOfMaterialHeaderDatumUpsertCache[key] = cache
		dataPlatformBillOfMaterialHeaderDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformBillOfMaterialHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformBillOfMaterialHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformBillOfMaterialHeaderDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformBillOfMaterialHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_bill_of_material_header_data` WHERE `BillOfMaterial`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_bill_of_material_header_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformBillOfMaterialHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformBillOfMaterialHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_bill_of_material_header_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformBillOfMaterialHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBillOfMaterialHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_bill_of_material_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformBillOfMaterialHeaderDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformBillOfMaterialHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformBillOfMaterialHeaderDatum(ctx, exec, o.BillOfMaterial)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformBillOfMaterialHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformBillOfMaterialHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformBillOfMaterialHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_bill_of_material_header_data`.* FROM `data_platform_bill_of_material_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformBillOfMaterialHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformBillOfMaterialHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformBillOfMaterialHeaderDatumExists checks if the DataPlatformBillOfMaterialHeaderDatum row exists.
func DataPlatformBillOfMaterialHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, billOfMaterial int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_bill_of_material_header_data` where `BillOfMaterial`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, billOfMaterial)
	}
	row := exec.QueryRowContext(ctx, sql, billOfMaterial)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_bill_of_material_header_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformBillOfMaterialHeaderDatum row exists.
func (o *DataPlatformBillOfMaterialHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformBillOfMaterialHeaderDatumExists(ctx, exec, o.BillOfMaterial)
}
