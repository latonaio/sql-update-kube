// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductionVersionItemDatum is an object representing the database table.
type DataPlatformProductionVersionItemDatum struct {
	ProductionVersion       int         `boil:"ProductionVersion" json:"ProductionVersion" toml:"ProductionVersion" yaml:"ProductionVersion"`
	ProductionVersionItem   int         `boil:"ProductionVersionItem" json:"ProductionVersionItem" toml:"ProductionVersionItem" yaml:"ProductionVersionItem"`
	Product                 string      `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	BusinessPartner         int         `boil:"BusinessPartner" json:"BusinessPartner" toml:"BusinessPartner" yaml:"BusinessPartner"`
	Plant                   string      `boil:"Plant" json:"Plant" toml:"Plant" yaml:"Plant"`
	BillOfMaterial          int         `boil:"BillOfMaterial" json:"BillOfMaterial" toml:"BillOfMaterial" yaml:"BillOfMaterial"`
	Operations              int         `boil:"Operations" json:"Operations" toml:"Operations" yaml:"Operations"`
	ProductionVersionText   null.String `boil:"ProductionVersionText" json:"ProductionVersionText,omitempty" toml:"ProductionVersionText" yaml:"ProductionVersionText,omitempty"`
	ProductionVersionStatus null.String `boil:"ProductionVersionStatus" json:"ProductionVersionStatus,omitempty" toml:"ProductionVersionStatus" yaml:"ProductionVersionStatus,omitempty"`
	ValidityStartDate       null.String `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ValidityEndDate         null.String `boil:"ValidityEndDate" json:"ValidityEndDate,omitempty" toml:"ValidityEndDate" yaml:"ValidityEndDate,omitempty"`
	CreationDate            null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate          null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	IsLocked                null.Bool   `boil:"IsLocked" json:"IsLocked,omitempty" toml:"IsLocked" yaml:"IsLocked,omitempty"`
	IsMarkedForDeletion     null.Bool   `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductionVersionItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductionVersionItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductionVersionItemDatumColumns = struct {
	ProductionVersion       string
	ProductionVersionItem   string
	Product                 string
	BusinessPartner         string
	Plant                   string
	BillOfMaterial          string
	Operations              string
	ProductionVersionText   string
	ProductionVersionStatus string
	ValidityStartDate       string
	ValidityEndDate         string
	CreationDate            string
	LastChangeDate          string
	IsLocked                string
	IsMarkedForDeletion     string
}{
	ProductionVersion:       "ProductionVersion",
	ProductionVersionItem:   "ProductionVersionItem",
	Product:                 "Product",
	BusinessPartner:         "BusinessPartner",
	Plant:                   "Plant",
	BillOfMaterial:          "BillOfMaterial",
	Operations:              "Operations",
	ProductionVersionText:   "ProductionVersionText",
	ProductionVersionStatus: "ProductionVersionStatus",
	ValidityStartDate:       "ValidityStartDate",
	ValidityEndDate:         "ValidityEndDate",
	CreationDate:            "CreationDate",
	LastChangeDate:          "LastChangeDate",
	IsLocked:                "IsLocked",
	IsMarkedForDeletion:     "IsMarkedForDeletion",
}

var DataPlatformProductionVersionItemDatumTableColumns = struct {
	ProductionVersion       string
	ProductionVersionItem   string
	Product                 string
	BusinessPartner         string
	Plant                   string
	BillOfMaterial          string
	Operations              string
	ProductionVersionText   string
	ProductionVersionStatus string
	ValidityStartDate       string
	ValidityEndDate         string
	CreationDate            string
	LastChangeDate          string
	IsLocked                string
	IsMarkedForDeletion     string
}{
	ProductionVersion:       "data_platform_production_version_item_data.ProductionVersion",
	ProductionVersionItem:   "data_platform_production_version_item_data.ProductionVersionItem",
	Product:                 "data_platform_production_version_item_data.Product",
	BusinessPartner:         "data_platform_production_version_item_data.BusinessPartner",
	Plant:                   "data_platform_production_version_item_data.Plant",
	BillOfMaterial:          "data_platform_production_version_item_data.BillOfMaterial",
	Operations:              "data_platform_production_version_item_data.Operations",
	ProductionVersionText:   "data_platform_production_version_item_data.ProductionVersionText",
	ProductionVersionStatus: "data_platform_production_version_item_data.ProductionVersionStatus",
	ValidityStartDate:       "data_platform_production_version_item_data.ValidityStartDate",
	ValidityEndDate:         "data_platform_production_version_item_data.ValidityEndDate",
	CreationDate:            "data_platform_production_version_item_data.CreationDate",
	LastChangeDate:          "data_platform_production_version_item_data.LastChangeDate",
	IsLocked:                "data_platform_production_version_item_data.IsLocked",
	IsMarkedForDeletion:     "data_platform_production_version_item_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductionVersionItemDatumWhere = struct {
	ProductionVersion       whereHelperint
	ProductionVersionItem   whereHelperint
	Product                 whereHelperstring
	BusinessPartner         whereHelperint
	Plant                   whereHelperstring
	BillOfMaterial          whereHelperint
	Operations              whereHelperint
	ProductionVersionText   whereHelpernull_String
	ProductionVersionStatus whereHelpernull_String
	ValidityStartDate       whereHelpernull_String
	ValidityEndDate         whereHelpernull_String
	CreationDate            whereHelpernull_String
	LastChangeDate          whereHelpernull_String
	IsLocked                whereHelpernull_Bool
	IsMarkedForDeletion     whereHelpernull_Bool
}{
	ProductionVersion:       whereHelperint{field: "`data_platform_production_version_item_data`.`ProductionVersion`"},
	ProductionVersionItem:   whereHelperint{field: "`data_platform_production_version_item_data`.`ProductionVersionItem`"},
	Product:                 whereHelperstring{field: "`data_platform_production_version_item_data`.`Product`"},
	BusinessPartner:         whereHelperint{field: "`data_platform_production_version_item_data`.`BusinessPartner`"},
	Plant:                   whereHelperstring{field: "`data_platform_production_version_item_data`.`Plant`"},
	BillOfMaterial:          whereHelperint{field: "`data_platform_production_version_item_data`.`BillOfMaterial`"},
	Operations:              whereHelperint{field: "`data_platform_production_version_item_data`.`Operations`"},
	ProductionVersionText:   whereHelpernull_String{field: "`data_platform_production_version_item_data`.`ProductionVersionText`"},
	ProductionVersionStatus: whereHelpernull_String{field: "`data_platform_production_version_item_data`.`ProductionVersionStatus`"},
	ValidityStartDate:       whereHelpernull_String{field: "`data_platform_production_version_item_data`.`ValidityStartDate`"},
	ValidityEndDate:         whereHelpernull_String{field: "`data_platform_production_version_item_data`.`ValidityEndDate`"},
	CreationDate:            whereHelpernull_String{field: "`data_platform_production_version_item_data`.`CreationDate`"},
	LastChangeDate:          whereHelpernull_String{field: "`data_platform_production_version_item_data`.`LastChangeDate`"},
	IsLocked:                whereHelpernull_Bool{field: "`data_platform_production_version_item_data`.`IsLocked`"},
	IsMarkedForDeletion:     whereHelpernull_Bool{field: "`data_platform_production_version_item_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductionVersionItemDatumRels is where relationship names are stored.
var DataPlatformProductionVersionItemDatumRels = struct {
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum           string
	Operation                                                     string
	ProductionVersionDataPlatformProductionVersionHeaderDatum     string
	ProductionVersionDataPlatformOrdersHeaderData                 string
	ProductionVersionDataPlatformOrdersItemData                   string
	ProductionVersionDataPlatformPlannedOrderItemComponentData    string
	ProductionVersionDataPlatformPlannedOrderItemData             string
	ProductionVersionDataPlatformPlannedOrderItemOperationData    string
	ProductionVersionDataPlatformProductionOrderItemOperationData string
}{
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum: "BillOfMaterialDataPlatformBillOfMaterialHeaderDatum",
	Operation: "Operation",
	ProductionVersionDataPlatformProductionVersionHeaderDatum:     "ProductionVersionDataPlatformProductionVersionHeaderDatum",
	ProductionVersionDataPlatformOrdersHeaderData:                 "ProductionVersionDataPlatformOrdersHeaderData",
	ProductionVersionDataPlatformOrdersItemData:                   "ProductionVersionDataPlatformOrdersItemData",
	ProductionVersionDataPlatformPlannedOrderItemComponentData:    "ProductionVersionDataPlatformPlannedOrderItemComponentData",
	ProductionVersionDataPlatformPlannedOrderItemData:             "ProductionVersionDataPlatformPlannedOrderItemData",
	ProductionVersionDataPlatformPlannedOrderItemOperationData:    "ProductionVersionDataPlatformPlannedOrderItemOperationData",
	ProductionVersionDataPlatformProductionOrderItemOperationData: "ProductionVersionDataPlatformProductionOrderItemOperationData",
}

// dataPlatformProductionVersionItemDatumR is where relationships are stored.
type dataPlatformProductionVersionItemDatumR struct {
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum           *DataPlatformBillOfMaterialHeaderDatum             `boil:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" json:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" toml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" yaml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum"`
	Operation                                                     *DataPlatformOperationsHeaderDatum                 `boil:"Operation" json:"Operation" toml:"Operation" yaml:"Operation"`
	ProductionVersionDataPlatformProductionVersionHeaderDatum     *DataPlatformProductionVersionHeaderDatum          `boil:"ProductionVersionDataPlatformProductionVersionHeaderDatum" json:"ProductionVersionDataPlatformProductionVersionHeaderDatum" toml:"ProductionVersionDataPlatformProductionVersionHeaderDatum" yaml:"ProductionVersionDataPlatformProductionVersionHeaderDatum"`
	ProductionVersionDataPlatformOrdersHeaderData                 DataPlatformOrdersHeaderDatumSlice                 `boil:"ProductionVersionDataPlatformOrdersHeaderData" json:"ProductionVersionDataPlatformOrdersHeaderData" toml:"ProductionVersionDataPlatformOrdersHeaderData" yaml:"ProductionVersionDataPlatformOrdersHeaderData"`
	ProductionVersionDataPlatformOrdersItemData                   DataPlatformOrdersItemDatumSlice                   `boil:"ProductionVersionDataPlatformOrdersItemData" json:"ProductionVersionDataPlatformOrdersItemData" toml:"ProductionVersionDataPlatformOrdersItemData" yaml:"ProductionVersionDataPlatformOrdersItemData"`
	ProductionVersionDataPlatformPlannedOrderItemComponentData    DataPlatformPlannedOrderItemComponentDatumSlice    `boil:"ProductionVersionDataPlatformPlannedOrderItemComponentData" json:"ProductionVersionDataPlatformPlannedOrderItemComponentData" toml:"ProductionVersionDataPlatformPlannedOrderItemComponentData" yaml:"ProductionVersionDataPlatformPlannedOrderItemComponentData"`
	ProductionVersionDataPlatformPlannedOrderItemData             DataPlatformPlannedOrderItemDatumSlice             `boil:"ProductionVersionDataPlatformPlannedOrderItemData" json:"ProductionVersionDataPlatformPlannedOrderItemData" toml:"ProductionVersionDataPlatformPlannedOrderItemData" yaml:"ProductionVersionDataPlatformPlannedOrderItemData"`
	ProductionVersionDataPlatformPlannedOrderItemOperationData    DataPlatformPlannedOrderItemOperationDatumSlice    `boil:"ProductionVersionDataPlatformPlannedOrderItemOperationData" json:"ProductionVersionDataPlatformPlannedOrderItemOperationData" toml:"ProductionVersionDataPlatformPlannedOrderItemOperationData" yaml:"ProductionVersionDataPlatformPlannedOrderItemOperationData"`
	ProductionVersionDataPlatformProductionOrderItemOperationData DataPlatformProductionOrderItemOperationDatumSlice `boil:"ProductionVersionDataPlatformProductionOrderItemOperationData" json:"ProductionVersionDataPlatformProductionOrderItemOperationData" toml:"ProductionVersionDataPlatformProductionOrderItemOperationData" yaml:"ProductionVersionDataPlatformProductionOrderItemOperationData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductionVersionItemDatumR) NewStruct() *dataPlatformProductionVersionItemDatumR {
	return &dataPlatformProductionVersionItemDatumR{}
}

func (r *dataPlatformProductionVersionItemDatumR) GetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum() *DataPlatformBillOfMaterialHeaderDatum {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum
}

func (r *dataPlatformProductionVersionItemDatumR) GetOperation() *DataPlatformOperationsHeaderDatum {
	if r == nil {
		return nil
	}
	return r.Operation
}

func (r *dataPlatformProductionVersionItemDatumR) GetProductionVersionDataPlatformProductionVersionHeaderDatum() *DataPlatformProductionVersionHeaderDatum {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformProductionVersionHeaderDatum
}

func (r *dataPlatformProductionVersionItemDatumR) GetProductionVersionDataPlatformOrdersHeaderData() DataPlatformOrdersHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformOrdersHeaderData
}

func (r *dataPlatformProductionVersionItemDatumR) GetProductionVersionDataPlatformOrdersItemData() DataPlatformOrdersItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformOrdersItemData
}

func (r *dataPlatformProductionVersionItemDatumR) GetProductionVersionDataPlatformPlannedOrderItemComponentData() DataPlatformPlannedOrderItemComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformPlannedOrderItemComponentData
}

func (r *dataPlatformProductionVersionItemDatumR) GetProductionVersionDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformPlannedOrderItemData
}

func (r *dataPlatformProductionVersionItemDatumR) GetProductionVersionDataPlatformPlannedOrderItemOperationData() DataPlatformPlannedOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformPlannedOrderItemOperationData
}

func (r *dataPlatformProductionVersionItemDatumR) GetProductionVersionDataPlatformProductionOrderItemOperationData() DataPlatformProductionOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformProductionOrderItemOperationData
}

// dataPlatformProductionVersionItemDatumL is where Load methods for each relationship are stored.
type dataPlatformProductionVersionItemDatumL struct{}

var (
	dataPlatformProductionVersionItemDatumAllColumns            = []string{"ProductionVersion", "ProductionVersionItem", "Product", "BusinessPartner", "Plant", "BillOfMaterial", "Operations", "ProductionVersionText", "ProductionVersionStatus", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsLocked", "IsMarkedForDeletion"}
	dataPlatformProductionVersionItemDatumColumnsWithoutDefault = []string{"ProductionVersion", "ProductionVersionItem", "Product", "BusinessPartner", "Plant", "BillOfMaterial", "Operations", "ProductionVersionText", "ProductionVersionStatus", "ValidityStartDate", "ValidityEndDate", "CreationDate", "LastChangeDate", "IsLocked", "IsMarkedForDeletion"}
	dataPlatformProductionVersionItemDatumColumnsWithDefault    = []string{}
	dataPlatformProductionVersionItemDatumPrimaryKeyColumns     = []string{"ProductionVersion", "ProductionVersionItem"}
	dataPlatformProductionVersionItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductionVersionItemDatumSlice is an alias for a slice of pointers to DataPlatformProductionVersionItemDatum.
	// This should almost always be used instead of []DataPlatformProductionVersionItemDatum.
	DataPlatformProductionVersionItemDatumSlice []*DataPlatformProductionVersionItemDatum

	dataPlatformProductionVersionItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductionVersionItemDatumType                 = reflect.TypeOf(&DataPlatformProductionVersionItemDatum{})
	dataPlatformProductionVersionItemDatumMapping              = queries.MakeStructMapping(dataPlatformProductionVersionItemDatumType)
	dataPlatformProductionVersionItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductionVersionItemDatumType, dataPlatformProductionVersionItemDatumMapping, dataPlatformProductionVersionItemDatumPrimaryKeyColumns)
	dataPlatformProductionVersionItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductionVersionItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductionVersionItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductionVersionItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductionVersionItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductionVersionItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductionVersionItemDatum record from the query.
func (q dataPlatformProductionVersionItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductionVersionItemDatum, error) {
	o := &DataPlatformProductionVersionItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_production_version_item_data")
	}

	return o, nil
}

// All returns all DataPlatformProductionVersionItemDatum records from the query.
func (q dataPlatformProductionVersionItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductionVersionItemDatumSlice, error) {
	var o []*DataPlatformProductionVersionItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductionVersionItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductionVersionItemDatum records in the query.
func (q dataPlatformProductionVersionItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_production_version_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductionVersionItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_production_version_item_data exists")
	}

	return count > 0, nil
}

// BillOfMaterialDataPlatformBillOfMaterialHeaderDatum pointed to by the foreign key.
func (o *DataPlatformProductionVersionItemDatum) BillOfMaterialDataPlatformBillOfMaterialHeaderDatum(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillOfMaterial` = ?", o.BillOfMaterial),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// Operation pointed to by the foreign key.
func (o *DataPlatformProductionVersionItemDatum) Operation(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Operations` = ?", o.Operations),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// ProductionVersionDataPlatformProductionVersionHeaderDatum pointed to by the foreign key.
func (o *DataPlatformProductionVersionItemDatum) ProductionVersionDataPlatformProductionVersionHeaderDatum(mods ...qm.QueryMod) dataPlatformProductionVersionHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductionVersion` = ?", o.ProductionVersion),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionVersionHeaderData(queryMods...)
}

// ProductionVersionDataPlatformOrdersHeaderData retrieves all the data_platform_orders_header_datum's DataPlatformOrdersHeaderData with an executor via ProductionVersion column.
func (o *DataPlatformProductionVersionItemDatum) ProductionVersionDataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_data`.`ProductionVersion`=?", o.ProductionVersion),
	)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// ProductionVersionDataPlatformOrdersItemData retrieves all the data_platform_orders_item_datum's DataPlatformOrdersItemData with an executor via ProductionVersion column.
func (o *DataPlatformProductionVersionItemDatum) ProductionVersionDataPlatformOrdersItemData(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_item_data`.`ProductionVersion`=?", o.ProductionVersion),
	)

	return DataPlatformOrdersItemData(queryMods...)
}

// ProductionVersionDataPlatformPlannedOrderItemComponentData retrieves all the data_platform_planned_order_item_component_datum's DataPlatformPlannedOrderItemComponentData with an executor via ProductionVersion column.
func (o *DataPlatformProductionVersionItemDatum) ProductionVersionDataPlatformPlannedOrderItemComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_component_data`.`ProductionVersion`=?", o.ProductionVersion),
	)

	return DataPlatformPlannedOrderItemComponentData(queryMods...)
}

// ProductionVersionDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via ProductionVersion column.
func (o *DataPlatformProductionVersionItemDatum) ProductionVersionDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`ProductionVersion`=?", o.ProductionVersion),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// ProductionVersionDataPlatformPlannedOrderItemOperationData retrieves all the data_platform_planned_order_item_operation_datum's DataPlatformPlannedOrderItemOperationData with an executor via ProductionVersion column.
func (o *DataPlatformProductionVersionItemDatum) ProductionVersionDataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_data`.`ProductionVersion`=?", o.ProductionVersion),
	)

	return DataPlatformPlannedOrderItemOperationData(queryMods...)
}

// ProductionVersionDataPlatformProductionOrderItemOperationData retrieves all the data_platform_production_order_item_operation_datum's DataPlatformProductionOrderItemOperationData with an executor via ProductionVersion column.
func (o *DataPlatformProductionVersionItemDatum) ProductionVersionDataPlatformProductionOrderItemOperationData(mods ...qm.QueryMod) dataPlatformProductionOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_production_order_item_operation_data`.`ProductionVersion`=?", o.ProductionVersion),
	)

	return DataPlatformProductionOrderItemOperationData(queryMods...)
}

// LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionVersionItemDatumL) LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionVersionItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionVersionItemDatum
	var object *DataPlatformProductionVersionItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionVersionItemDatum.(*DataPlatformProductionVersionItemDatum)
		if !ok {
			object = new(DataPlatformProductionVersionItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionVersionItemDatum.(*[]*DataPlatformProductionVersionItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionVersionItemDatumR{}
		}
		args = append(args, object.BillOfMaterial)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionVersionItemDatumR{}
			}

			for _, a := range args {
				if a == obj.BillOfMaterial {
					continue Outer
				}
			}

			args = append(args, obj.BillOfMaterial)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBillOfMaterialHeaderDatum")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBillOfMaterialHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BillOfMaterial == foreign.BillOfMaterial {
				local.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionVersionItemDatumL) LoadOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionVersionItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionVersionItemDatum
	var object *DataPlatformProductionVersionItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionVersionItemDatum.(*DataPlatformProductionVersionItemDatum)
		if !ok {
			object = new(DataPlatformProductionVersionItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionVersionItemDatum.(*[]*DataPlatformProductionVersionItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionVersionItemDatumR{}
		}
		args = append(args, object.Operations)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionVersionItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Operations {
					continue Outer
				}
			}

			args = append(args, obj.Operations)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.Operations in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOperationsHeaderDatum")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOperationsHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Operation = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Operations == foreign.Operations {
				local.R.Operation = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformProductionVersionHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformProductionVersionItemDatumL) LoadProductionVersionDataPlatformProductionVersionHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionVersionItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionVersionItemDatum
	var object *DataPlatformProductionVersionItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionVersionItemDatum.(*DataPlatformProductionVersionItemDatum)
		if !ok {
			object = new(DataPlatformProductionVersionItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionVersionItemDatum.(*[]*DataPlatformProductionVersionItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionVersionItemDatumR{}
		}
		args = append(args, object.ProductionVersion)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionVersionItemDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductionVersion {
					continue Outer
				}
			}

			args = append(args, obj.ProductionVersion)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_version_header_data`),
		qm.WhereIn(`data_platform_production_version_header_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionVersionHeaderDatum")
	}

	var resultSlice []*DataPlatformProductionVersionHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionVersionHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_version_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_version_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionVersionDataPlatformProductionVersionHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductionVersion == foreign.ProductionVersion {
				local.R.ProductionVersionDataPlatformProductionVersionHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformOrdersHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionVersionItemDatumL) LoadProductionVersionDataPlatformOrdersHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionVersionItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionVersionItemDatum
	var object *DataPlatformProductionVersionItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionVersionItemDatum.(*DataPlatformProductionVersionItemDatum)
		if !ok {
			object = new(DataPlatformProductionVersionItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionVersionItemDatum.(*[]*DataPlatformProductionVersionItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionVersionItemDatumR{}
		}
		args = append(args, object.ProductionVersion)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionVersionItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionVersion) {
					continue Outer
				}
			}

			args = append(args, obj.ProductionVersion)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if singular {
		object.R.ProductionVersionDataPlatformOrdersHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductionVersion, foreign.ProductionVersion) {
				local.R.ProductionVersionDataPlatformOrdersHeaderData = append(local.R.ProductionVersionDataPlatformOrdersHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformOrdersItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionVersionItemDatumL) LoadProductionVersionDataPlatformOrdersItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionVersionItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionVersionItemDatum
	var object *DataPlatformProductionVersionItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionVersionItemDatum.(*DataPlatformProductionVersionItemDatum)
		if !ok {
			object = new(DataPlatformProductionVersionItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionVersionItemDatum.(*[]*DataPlatformProductionVersionItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionVersionItemDatumR{}
		}
		args = append(args, object.ProductionVersion)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionVersionItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionVersion) {
					continue Outer
				}
			}

			args = append(args, obj.ProductionVersion)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_item_data")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if singular {
		object.R.ProductionVersionDataPlatformOrdersItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductionVersion, foreign.ProductionVersion) {
				local.R.ProductionVersionDataPlatformOrdersItemData = append(local.R.ProductionVersionDataPlatformOrdersItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformPlannedOrderItemComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionVersionItemDatumL) LoadProductionVersionDataPlatformPlannedOrderItemComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionVersionItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionVersionItemDatum
	var object *DataPlatformProductionVersionItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionVersionItemDatum.(*DataPlatformProductionVersionItemDatum)
		if !ok {
			object = new(DataPlatformProductionVersionItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionVersionItemDatum.(*[]*DataPlatformProductionVersionItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionVersionItemDatumR{}
		}
		args = append(args, object.ProductionVersion)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionVersionItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionVersion) {
					continue Outer
				}
			}

			args = append(args, obj.ProductionVersion)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_component_data`),
		qm.WhereIn(`data_platform_planned_order_item_component_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_component_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_component_data")
	}

	if singular {
		object.R.ProductionVersionDataPlatformPlannedOrderItemComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductionVersion, foreign.ProductionVersion) {
				local.R.ProductionVersionDataPlatformPlannedOrderItemComponentData = append(local.R.ProductionVersionDataPlatformPlannedOrderItemComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionVersionItemDatumL) LoadProductionVersionDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionVersionItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionVersionItemDatum
	var object *DataPlatformProductionVersionItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionVersionItemDatum.(*DataPlatformProductionVersionItemDatum)
		if !ok {
			object = new(DataPlatformProductionVersionItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionVersionItemDatum.(*[]*DataPlatformProductionVersionItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionVersionItemDatumR{}
		}
		args = append(args, object.ProductionVersion)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionVersionItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionVersion) {
					continue Outer
				}
			}

			args = append(args, obj.ProductionVersion)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.ProductionVersionDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductionVersion, foreign.ProductionVersion) {
				local.R.ProductionVersionDataPlatformPlannedOrderItemData = append(local.R.ProductionVersionDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformPlannedOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionVersionItemDatumL) LoadProductionVersionDataPlatformPlannedOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionVersionItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionVersionItemDatum
	var object *DataPlatformProductionVersionItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionVersionItemDatum.(*DataPlatformProductionVersionItemDatum)
		if !ok {
			object = new(DataPlatformProductionVersionItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionVersionItemDatum.(*[]*DataPlatformProductionVersionItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionVersionItemDatumR{}
		}
		args = append(args, object.ProductionVersion)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionVersionItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionVersion) {
					continue Outer
				}
			}

			args = append(args, obj.ProductionVersion)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_data")
	}

	if singular {
		object.R.ProductionVersionDataPlatformPlannedOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductionVersion, foreign.ProductionVersion) {
				local.R.ProductionVersionDataPlatformPlannedOrderItemOperationData = append(local.R.ProductionVersionDataPlatformPlannedOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformProductionOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductionVersionItemDatumL) LoadProductionVersionDataPlatformProductionOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductionVersionItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductionVersionItemDatum
	var object *DataPlatformProductionVersionItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductionVersionItemDatum.(*DataPlatformProductionVersionItemDatum)
		if !ok {
			object = new(DataPlatformProductionVersionItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductionVersionItemDatum.(*[]*DataPlatformProductionVersionItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductionVersionItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductionVersionItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductionVersionItemDatumR{}
		}
		args = append(args, object.ProductionVersion)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductionVersionItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionVersion) {
					continue Outer
				}
			}

			args = append(args, obj.ProductionVersion)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_order_item_operation_data`),
		qm.WhereIn(`data_platform_production_order_item_operation_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_production_order_item_operation_data")
	}

	var resultSlice []*DataPlatformProductionOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_production_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_production_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_order_item_operation_data")
	}

	if singular {
		object.R.ProductionVersionDataPlatformProductionOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ProductionVersion, foreign.ProductionVersion) {
				local.R.ProductionVersionDataPlatformProductionOrderItemOperationData = append(local.R.ProductionVersionDataPlatformProductionOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum of the dataPlatformProductionVersionItemDatum to the related item.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum to related.
func (o *DataPlatformProductionVersionItemDatum) SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_version_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionVersionItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillOfMaterial, o.ProductionVersion, o.ProductionVersionItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BillOfMaterial = related.BillOfMaterial
	if o.R == nil {
		o.R = &dataPlatformProductionVersionItemDatumR{
			BillOfMaterialDataPlatformBillOfMaterialHeaderDatum: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = related
	}

	return nil
}

// SetOperation of the dataPlatformProductionVersionItemDatum to the related item.
// Sets o.R.Operation to related.
func (o *DataPlatformProductionVersionItemDatum) SetOperation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOperationsHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_version_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Operations"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionVersionItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Operations, o.ProductionVersion, o.ProductionVersionItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Operations = related.Operations
	if o.R == nil {
		o.R = &dataPlatformProductionVersionItemDatumR{
			Operation: related,
		}
	} else {
		o.R.Operation = related
	}

	return nil
}

// SetProductionVersionDataPlatformProductionVersionHeaderDatum of the dataPlatformProductionVersionItemDatum to the related item.
// Sets o.R.ProductionVersionDataPlatformProductionVersionHeaderDatum to related.
func (o *DataPlatformProductionVersionItemDatum) SetProductionVersionDataPlatformProductionVersionHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionVersionHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_production_version_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformProductionVersionItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductionVersion, o.ProductionVersion, o.ProductionVersionItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductionVersion = related.ProductionVersion
	if o.R == nil {
		o.R = &dataPlatformProductionVersionItemDatumR{
			ProductionVersionDataPlatformProductionVersionHeaderDatum: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformProductionVersionHeaderDatum = related
	}

	return nil
}

// AddProductionVersionDataPlatformOrdersHeaderData adds the given related objects to the existing relationships
// of the data_platform_production_version_item_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionVersionDataPlatformOrdersHeaderData.
func (o *DataPlatformProductionVersionItemDatum) AddProductionVersionDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductionVersion, o.ProductionVersion)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductionVersion, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductionVersion, o.ProductionVersion)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionVersionItemDatumR{
			ProductionVersionDataPlatformOrdersHeaderData: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformOrdersHeaderData = append(o.R.ProductionVersionDataPlatformOrdersHeaderData, related...)
	}

	return nil
}

// SetProductionVersionDataPlatformOrdersHeaderData removes all previously related items of the
// data_platform_production_version_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum's ProductionVersionDataPlatformOrdersHeaderData accordingly.
// Replaces o.R.ProductionVersionDataPlatformOrdersHeaderData with related.
func (o *DataPlatformProductionVersionItemDatum) SetProductionVersionDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	query := "update `data_platform_orders_header_data` set `ProductionVersion` = null where `ProductionVersion` = ?"
	values := []interface{}{o.ProductionVersion}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductionVersionDataPlatformOrdersHeaderData = nil
	}

	return o.AddProductionVersionDataPlatformOrdersHeaderData(ctx, exec, insert, related...)
}

// RemoveProductionVersionDataPlatformOrdersHeaderData relationships from objects passed in.
// Removes related items from R.ProductionVersionDataPlatformOrdersHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductionVersionItemDatum) RemoveProductionVersionDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductionVersion, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductionVersion")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductionVersionDataPlatformOrdersHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductionVersionDataPlatformOrdersHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.ProductionVersionDataPlatformOrdersHeaderData[i] = o.R.ProductionVersionDataPlatformOrdersHeaderData[ln-1]
			}
			o.R.ProductionVersionDataPlatformOrdersHeaderData = o.R.ProductionVersionDataPlatformOrdersHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductionVersionDataPlatformOrdersItemData adds the given related objects to the existing relationships
// of the data_platform_production_version_item_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionVersionDataPlatformOrdersItemData.
func (o *DataPlatformProductionVersionItemDatum) AddProductionVersionDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductionVersion, o.ProductionVersion)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductionVersion, rel.OrderID, rel.OrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductionVersion, o.ProductionVersion)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionVersionItemDatumR{
			ProductionVersionDataPlatformOrdersItemData: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformOrdersItemData = append(o.R.ProductionVersionDataPlatformOrdersItemData, related...)
	}

	return nil
}

// SetProductionVersionDataPlatformOrdersItemData removes all previously related items of the
// data_platform_production_version_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum's ProductionVersionDataPlatformOrdersItemData accordingly.
// Replaces o.R.ProductionVersionDataPlatformOrdersItemData with related.
func (o *DataPlatformProductionVersionItemDatum) SetProductionVersionDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersItemDatum) error {
	query := "update `data_platform_orders_item_data` set `ProductionVersion` = null where `ProductionVersion` = ?"
	values := []interface{}{o.ProductionVersion}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductionVersionDataPlatformOrdersItemData = nil
	}

	return o.AddProductionVersionDataPlatformOrdersItemData(ctx, exec, insert, related...)
}

// RemoveProductionVersionDataPlatformOrdersItemData relationships from objects passed in.
// Removes related items from R.ProductionVersionDataPlatformOrdersItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductionVersionItemDatum) RemoveProductionVersionDataPlatformOrdersItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformOrdersItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductionVersion, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductionVersion")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductionVersionDataPlatformOrdersItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductionVersionDataPlatformOrdersItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductionVersionDataPlatformOrdersItemData[i] = o.R.ProductionVersionDataPlatformOrdersItemData[ln-1]
			}
			o.R.ProductionVersionDataPlatformOrdersItemData = o.R.ProductionVersionDataPlatformOrdersItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductionVersionDataPlatformPlannedOrderItemComponentData adds the given related objects to the existing relationships
// of the data_platform_production_version_item_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionVersionDataPlatformPlannedOrderItemComponentData.
func (o *DataPlatformProductionVersionItemDatum) AddProductionVersionDataPlatformPlannedOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductionVersion, o.ProductionVersion)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductionVersion, rel.PlannedOrder, rel.PlannedOrderItem, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductionVersion, o.ProductionVersion)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionVersionItemDatumR{
			ProductionVersionDataPlatformPlannedOrderItemComponentData: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformPlannedOrderItemComponentData = append(o.R.ProductionVersionDataPlatformPlannedOrderItemComponentData, related...)
	}

	return nil
}

// SetProductionVersionDataPlatformPlannedOrderItemComponentData removes all previously related items of the
// data_platform_production_version_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum's ProductionVersionDataPlatformPlannedOrderItemComponentData accordingly.
// Replaces o.R.ProductionVersionDataPlatformPlannedOrderItemComponentData with related.
func (o *DataPlatformProductionVersionItemDatum) SetProductionVersionDataPlatformPlannedOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemComponentDatum) error {
	query := "update `data_platform_planned_order_item_component_data` set `ProductionVersion` = null where `ProductionVersion` = ?"
	values := []interface{}{o.ProductionVersion}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductionVersionDataPlatformPlannedOrderItemComponentData = nil
	}

	return o.AddProductionVersionDataPlatformPlannedOrderItemComponentData(ctx, exec, insert, related...)
}

// RemoveProductionVersionDataPlatformPlannedOrderItemComponentData relationships from objects passed in.
// Removes related items from R.ProductionVersionDataPlatformPlannedOrderItemComponentData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductionVersionItemDatum) RemoveProductionVersionDataPlatformPlannedOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemComponentDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductionVersion, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductionVersion")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductionVersionDataPlatformPlannedOrderItemComponentData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductionVersionDataPlatformPlannedOrderItemComponentData)
			if ln > 1 && i < ln-1 {
				o.R.ProductionVersionDataPlatformPlannedOrderItemComponentData[i] = o.R.ProductionVersionDataPlatformPlannedOrderItemComponentData[ln-1]
			}
			o.R.ProductionVersionDataPlatformPlannedOrderItemComponentData = o.R.ProductionVersionDataPlatformPlannedOrderItemComponentData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductionVersionDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_production_version_item_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionVersionDataPlatformPlannedOrderItemData.
func (o *DataPlatformProductionVersionItemDatum) AddProductionVersionDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductionVersion, o.ProductionVersion)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductionVersion, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductionVersion, o.ProductionVersion)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionVersionItemDatumR{
			ProductionVersionDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformPlannedOrderItemData = append(o.R.ProductionVersionDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// SetProductionVersionDataPlatformPlannedOrderItemData removes all previously related items of the
// data_platform_production_version_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum's ProductionVersionDataPlatformPlannedOrderItemData accordingly.
// Replaces o.R.ProductionVersionDataPlatformPlannedOrderItemData with related.
func (o *DataPlatformProductionVersionItemDatum) SetProductionVersionDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	query := "update `data_platform_planned_order_item_data` set `ProductionVersion` = null where `ProductionVersion` = ?"
	values := []interface{}{o.ProductionVersion}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductionVersionDataPlatformPlannedOrderItemData = nil
	}

	return o.AddProductionVersionDataPlatformPlannedOrderItemData(ctx, exec, insert, related...)
}

// RemoveProductionVersionDataPlatformPlannedOrderItemData relationships from objects passed in.
// Removes related items from R.ProductionVersionDataPlatformPlannedOrderItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductionVersionItemDatum) RemoveProductionVersionDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductionVersion, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductionVersion")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductionVersionDataPlatformPlannedOrderItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductionVersionDataPlatformPlannedOrderItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductionVersionDataPlatformPlannedOrderItemData[i] = o.R.ProductionVersionDataPlatformPlannedOrderItemData[ln-1]
			}
			o.R.ProductionVersionDataPlatformPlannedOrderItemData = o.R.ProductionVersionDataPlatformPlannedOrderItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductionVersionDataPlatformPlannedOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_production_version_item_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionVersionDataPlatformPlannedOrderItemOperationData.
func (o *DataPlatformProductionVersionItemDatum) AddProductionVersionDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductionVersion, o.ProductionVersion)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductionVersion, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductionVersion, o.ProductionVersion)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionVersionItemDatumR{
			ProductionVersionDataPlatformPlannedOrderItemOperationData: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformPlannedOrderItemOperationData = append(o.R.ProductionVersionDataPlatformPlannedOrderItemOperationData, related...)
	}

	return nil
}

// SetProductionVersionDataPlatformPlannedOrderItemOperationData removes all previously related items of the
// data_platform_production_version_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum's ProductionVersionDataPlatformPlannedOrderItemOperationData accordingly.
// Replaces o.R.ProductionVersionDataPlatformPlannedOrderItemOperationData with related.
func (o *DataPlatformProductionVersionItemDatum) SetProductionVersionDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	query := "update `data_platform_planned_order_item_operation_data` set `ProductionVersion` = null where `ProductionVersion` = ?"
	values := []interface{}{o.ProductionVersion}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductionVersionDataPlatformPlannedOrderItemOperationData = nil
	}

	return o.AddProductionVersionDataPlatformPlannedOrderItemOperationData(ctx, exec, insert, related...)
}

// RemoveProductionVersionDataPlatformPlannedOrderItemOperationData relationships from objects passed in.
// Removes related items from R.ProductionVersionDataPlatformPlannedOrderItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductionVersionItemDatum) RemoveProductionVersionDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductionVersion, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductionVersion")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductionVersionDataPlatformPlannedOrderItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductionVersionDataPlatformPlannedOrderItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.ProductionVersionDataPlatformPlannedOrderItemOperationData[i] = o.R.ProductionVersionDataPlatformPlannedOrderItemOperationData[ln-1]
			}
			o.R.ProductionVersionDataPlatformPlannedOrderItemOperationData = o.R.ProductionVersionDataPlatformPlannedOrderItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductionVersionDataPlatformProductionOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_production_version_item_datum, optionally inserting them as new records.
// Appends related to o.R.ProductionVersionDataPlatformProductionOrderItemOperationData.
func (o *DataPlatformProductionVersionItemDatum) AddProductionVersionDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ProductionVersion, o.ProductionVersion)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_production_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductionOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.ProductionVersion, rel.ProductionOrder, rel.ProductionOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ProductionVersion, o.ProductionVersion)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductionVersionItemDatumR{
			ProductionVersionDataPlatformProductionOrderItemOperationData: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformProductionOrderItemOperationData = append(o.R.ProductionVersionDataPlatformProductionOrderItemOperationData, related...)
	}

	return nil
}

// SetProductionVersionDataPlatformProductionOrderItemOperationData removes all previously related items of the
// data_platform_production_version_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum's ProductionVersionDataPlatformProductionOrderItemOperationData accordingly.
// Replaces o.R.ProductionVersionDataPlatformProductionOrderItemOperationData with related.
func (o *DataPlatformProductionVersionItemDatum) SetProductionVersionDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	query := "update `data_platform_production_order_item_operation_data` set `ProductionVersion` = null where `ProductionVersion` = ?"
	values := []interface{}{o.ProductionVersion}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductionVersionDataPlatformProductionOrderItemOperationData = nil
	}

	return o.AddProductionVersionDataPlatformProductionOrderItemOperationData(ctx, exec, insert, related...)
}

// RemoveProductionVersionDataPlatformProductionOrderItemOperationData relationships from objects passed in.
// Removes related items from R.ProductionVersionDataPlatformProductionOrderItemOperationData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductionVersionItemDatum) RemoveProductionVersionDataPlatformProductionOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformProductionOrderItemOperationDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ProductionVersion, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("ProductionVersion")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductionVersionDataPlatformProductionOrderItemOperationData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductionVersionDataPlatformProductionOrderItemOperationData)
			if ln > 1 && i < ln-1 {
				o.R.ProductionVersionDataPlatformProductionOrderItemOperationData[i] = o.R.ProductionVersionDataPlatformProductionOrderItemOperationData[ln-1]
			}
			o.R.ProductionVersionDataPlatformProductionOrderItemOperationData = o.R.ProductionVersionDataPlatformProductionOrderItemOperationData[:ln-1]
			break
		}
	}

	return nil
}

// DataPlatformProductionVersionItemData retrieves all the records using an executor.
func DataPlatformProductionVersionItemData(mods ...qm.QueryMod) dataPlatformProductionVersionItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_production_version_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_production_version_item_data`.*"})
	}

	return dataPlatformProductionVersionItemDatumQuery{q}
}

// FindDataPlatformProductionVersionItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductionVersionItemDatum(ctx context.Context, exec boil.ContextExecutor, productionVersion int, productionVersionItem int, selectCols ...string) (*DataPlatformProductionVersionItemDatum, error) {
	dataPlatformProductionVersionItemDatumObj := &DataPlatformProductionVersionItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_production_version_item_data` where `ProductionVersion`=? AND `ProductionVersionItem`=?", sel,
	)

	q := queries.Raw(query, productionVersion, productionVersionItem)

	err := q.Bind(ctx, exec, dataPlatformProductionVersionItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_production_version_item_data")
	}

	return dataPlatformProductionVersionItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductionVersionItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_version_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionVersionItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductionVersionItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductionVersionItemDatumInsertCache[key]
	dataPlatformProductionVersionItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductionVersionItemDatumAllColumns,
			dataPlatformProductionVersionItemDatumColumnsWithDefault,
			dataPlatformProductionVersionItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionVersionItemDatumType, dataPlatformProductionVersionItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductionVersionItemDatumType, dataPlatformProductionVersionItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_production_version_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_production_version_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_production_version_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductionVersionItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_production_version_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ProductionVersion,
		o.ProductionVersionItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_version_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionVersionItemDatumInsertCacheMut.Lock()
		dataPlatformProductionVersionItemDatumInsertCache[key] = cache
		dataPlatformProductionVersionItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductionVersionItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductionVersionItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductionVersionItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductionVersionItemDatumUpdateCache[key]
	dataPlatformProductionVersionItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductionVersionItemDatumAllColumns,
			dataPlatformProductionVersionItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_production_version_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_production_version_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductionVersionItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionVersionItemDatumType, dataPlatformProductionVersionItemDatumMapping, append(wl, dataPlatformProductionVersionItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_production_version_item_data row")
	}

	if !cached {
		dataPlatformProductionVersionItemDatumUpdateCacheMut.Lock()
		dataPlatformProductionVersionItemDatumUpdateCache[key] = cache
		dataPlatformProductionVersionItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductionVersionItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_production_version_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductionVersionItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionVersionItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_production_version_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionVersionItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductionVersionItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductionVersionItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductionVersionItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_production_version_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductionVersionItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductionVersionItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductionVersionItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductionVersionItemDatumUpsertCache[key]
	dataPlatformProductionVersionItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductionVersionItemDatumAllColumns,
			dataPlatformProductionVersionItemDatumColumnsWithDefault,
			dataPlatformProductionVersionItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductionVersionItemDatumAllColumns,
			dataPlatformProductionVersionItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_production_version_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_production_version_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_production_version_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductionVersionItemDatumType, dataPlatformProductionVersionItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductionVersionItemDatumType, dataPlatformProductionVersionItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_production_version_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductionVersionItemDatumType, dataPlatformProductionVersionItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_production_version_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_production_version_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductionVersionItemDatumUpsertCacheMut.Lock()
		dataPlatformProductionVersionItemDatumUpsertCache[key] = cache
		dataPlatformProductionVersionItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductionVersionItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductionVersionItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductionVersionItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductionVersionItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_production_version_item_data` WHERE `ProductionVersion`=? AND `ProductionVersionItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_production_version_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductionVersionItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductionVersionItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_production_version_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductionVersionItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionVersionItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_production_version_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionVersionItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductionVersionItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductionVersionItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductionVersionItemDatum(ctx, exec, o.ProductionVersion, o.ProductionVersionItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductionVersionItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductionVersionItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductionVersionItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_production_version_item_data`.* FROM `data_platform_production_version_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductionVersionItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductionVersionItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductionVersionItemDatumExists checks if the DataPlatformProductionVersionItemDatum row exists.
func DataPlatformProductionVersionItemDatumExists(ctx context.Context, exec boil.ContextExecutor, productionVersion int, productionVersionItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_production_version_item_data` where `ProductionVersion`=? AND `ProductionVersionItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, productionVersion, productionVersionItem)
	}
	row := exec.QueryRowContext(ctx, sql, productionVersion, productionVersionItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_production_version_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductionVersionItemDatum row exists.
func (o *DataPlatformProductionVersionItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductionVersionItemDatumExists(ctx, exec, o.ProductionVersion, o.ProductionVersionItem)
}
