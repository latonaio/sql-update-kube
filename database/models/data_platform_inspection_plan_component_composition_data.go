// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformInspectionPlanComponentCompositionDatum is an object representing the database table.
type DataPlatformInspectionPlanComponentCompositionDatum struct {
	InspectionPlantBusinessPartner         int          `boil:"InspectionPlantBusinessPartner" json:"InspectionPlantBusinessPartner" toml:"InspectionPlantBusinessPartner" yaml:"InspectionPlantBusinessPartner"`
	InspectionPlant                        string       `boil:"InspectionPlant" json:"InspectionPlant" toml:"InspectionPlant" yaml:"InspectionPlant"`
	InspectionPlan                         int          `boil:"InspectionPlan" json:"InspectionPlan" toml:"InspectionPlan" yaml:"InspectionPlan"`
	InspectionPlanGroup                    int          `boil:"InspectionPlanGroup" json:"InspectionPlanGroup" toml:"InspectionPlanGroup" yaml:"InspectionPlanGroup"`
	InspectionPlanInternalVersion          int          `boil:"InspectionPlanInternalVersion" json:"InspectionPlanInternalVersion" toml:"InspectionPlanInternalVersion" yaml:"InspectionPlanInternalVersion"`
	ComponentCompositionType               string       `boil:"ComponentCompositionType" json:"ComponentCompositionType" toml:"ComponentCompositionType" yaml:"ComponentCompositionType"`
	ComponentCompositionTypeUpperSpecLimit null.Float32 `boil:"ComponentCompositionTypeUpperSpecLimit" json:"ComponentCompositionTypeUpperSpecLimit,omitempty" toml:"ComponentCompositionTypeUpperSpecLimit" yaml:"ComponentCompositionTypeUpperSpecLimit,omitempty"`
	ComponentCompositionTypeLowerSpecLimit null.Float32 `boil:"ComponentCompositionTypeLowerSpecLimit" json:"ComponentCompositionTypeLowerSpecLimit,omitempty" toml:"ComponentCompositionTypeLowerSpecLimit" yaml:"ComponentCompositionTypeLowerSpecLimit,omitempty"`
	ComponentCompositionTypeHeatNumber     null.Float32 `boil:"ComponentCompositionTypeHeatNumber" json:"ComponentCompositionTypeHeatNumber,omitempty" toml:"ComponentCompositionTypeHeatNumber" yaml:"ComponentCompositionTypeHeatNumber,omitempty"`
	ComponentCompositionTypeUnit           null.String  `boil:"ComponentCompositionTypeUnit" json:"ComponentCompositionTypeUnit,omitempty" toml:"ComponentCompositionTypeUnit" yaml:"ComponentCompositionTypeUnit,omitempty"`
	ValidityStartDate                      string       `boil:"ValidityStartDate" json:"ValidityStartDate" toml:"ValidityStartDate" yaml:"ValidityStartDate"`
	ValidityEndDate                        string       `boil:"ValidityEndDate" json:"ValidityEndDate" toml:"ValidityEndDate" yaml:"ValidityEndDate"`
	CreationDate                           null.String  `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	CreationTime                           null.String  `boil:"CreationTime" json:"CreationTime,omitempty" toml:"CreationTime" yaml:"CreationTime,omitempty"`
	LastChangeDate                         null.String  `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	LastChangeTime                         null.String  `boil:"LastChangeTime" json:"LastChangeTime,omitempty" toml:"LastChangeTime" yaml:"LastChangeTime,omitempty"`
	IsMarkedForDeletion                    null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformInspectionPlanComponentCompositionDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformInspectionPlanComponentCompositionDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformInspectionPlanComponentCompositionDatumColumns = struct {
	InspectionPlantBusinessPartner         string
	InspectionPlant                        string
	InspectionPlan                         string
	InspectionPlanGroup                    string
	InspectionPlanInternalVersion          string
	ComponentCompositionType               string
	ComponentCompositionTypeUpperSpecLimit string
	ComponentCompositionTypeLowerSpecLimit string
	ComponentCompositionTypeHeatNumber     string
	ComponentCompositionTypeUnit           string
	ValidityStartDate                      string
	ValidityEndDate                        string
	CreationDate                           string
	CreationTime                           string
	LastChangeDate                         string
	LastChangeTime                         string
	IsMarkedForDeletion                    string
}{
	InspectionPlantBusinessPartner:         "InspectionPlantBusinessPartner",
	InspectionPlant:                        "InspectionPlant",
	InspectionPlan:                         "InspectionPlan",
	InspectionPlanGroup:                    "InspectionPlanGroup",
	InspectionPlanInternalVersion:          "InspectionPlanInternalVersion",
	ComponentCompositionType:               "ComponentCompositionType",
	ComponentCompositionTypeUpperSpecLimit: "ComponentCompositionTypeUpperSpecLimit",
	ComponentCompositionTypeLowerSpecLimit: "ComponentCompositionTypeLowerSpecLimit",
	ComponentCompositionTypeHeatNumber:     "ComponentCompositionTypeHeatNumber",
	ComponentCompositionTypeUnit:           "ComponentCompositionTypeUnit",
	ValidityStartDate:                      "ValidityStartDate",
	ValidityEndDate:                        "ValidityEndDate",
	CreationDate:                           "CreationDate",
	CreationTime:                           "CreationTime",
	LastChangeDate:                         "LastChangeDate",
	LastChangeTime:                         "LastChangeTime",
	IsMarkedForDeletion:                    "IsMarkedForDeletion",
}

var DataPlatformInspectionPlanComponentCompositionDatumTableColumns = struct {
	InspectionPlantBusinessPartner         string
	InspectionPlant                        string
	InspectionPlan                         string
	InspectionPlanGroup                    string
	InspectionPlanInternalVersion          string
	ComponentCompositionType               string
	ComponentCompositionTypeUpperSpecLimit string
	ComponentCompositionTypeLowerSpecLimit string
	ComponentCompositionTypeHeatNumber     string
	ComponentCompositionTypeUnit           string
	ValidityStartDate                      string
	ValidityEndDate                        string
	CreationDate                           string
	CreationTime                           string
	LastChangeDate                         string
	LastChangeTime                         string
	IsMarkedForDeletion                    string
}{
	InspectionPlantBusinessPartner:         "data_platform_inspection_plan_component_composition_data.InspectionPlantBusinessPartner",
	InspectionPlant:                        "data_platform_inspection_plan_component_composition_data.InspectionPlant",
	InspectionPlan:                         "data_platform_inspection_plan_component_composition_data.InspectionPlan",
	InspectionPlanGroup:                    "data_platform_inspection_plan_component_composition_data.InspectionPlanGroup",
	InspectionPlanInternalVersion:          "data_platform_inspection_plan_component_composition_data.InspectionPlanInternalVersion",
	ComponentCompositionType:               "data_platform_inspection_plan_component_composition_data.ComponentCompositionType",
	ComponentCompositionTypeUpperSpecLimit: "data_platform_inspection_plan_component_composition_data.ComponentCompositionTypeUpperSpecLimit",
	ComponentCompositionTypeLowerSpecLimit: "data_platform_inspection_plan_component_composition_data.ComponentCompositionTypeLowerSpecLimit",
	ComponentCompositionTypeHeatNumber:     "data_platform_inspection_plan_component_composition_data.ComponentCompositionTypeHeatNumber",
	ComponentCompositionTypeUnit:           "data_platform_inspection_plan_component_composition_data.ComponentCompositionTypeUnit",
	ValidityStartDate:                      "data_platform_inspection_plan_component_composition_data.ValidityStartDate",
	ValidityEndDate:                        "data_platform_inspection_plan_component_composition_data.ValidityEndDate",
	CreationDate:                           "data_platform_inspection_plan_component_composition_data.CreationDate",
	CreationTime:                           "data_platform_inspection_plan_component_composition_data.CreationTime",
	LastChangeDate:                         "data_platform_inspection_plan_component_composition_data.LastChangeDate",
	LastChangeTime:                         "data_platform_inspection_plan_component_composition_data.LastChangeTime",
	IsMarkedForDeletion:                    "data_platform_inspection_plan_component_composition_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformInspectionPlanComponentCompositionDatumWhere = struct {
	InspectionPlantBusinessPartner         whereHelperint
	InspectionPlant                        whereHelperstring
	InspectionPlan                         whereHelperint
	InspectionPlanGroup                    whereHelperint
	InspectionPlanInternalVersion          whereHelperint
	ComponentCompositionType               whereHelperstring
	ComponentCompositionTypeUpperSpecLimit whereHelpernull_Float32
	ComponentCompositionTypeLowerSpecLimit whereHelpernull_Float32
	ComponentCompositionTypeHeatNumber     whereHelpernull_Float32
	ComponentCompositionTypeUnit           whereHelpernull_String
	ValidityStartDate                      whereHelperstring
	ValidityEndDate                        whereHelperstring
	CreationDate                           whereHelpernull_String
	CreationTime                           whereHelpernull_String
	LastChangeDate                         whereHelpernull_String
	LastChangeTime                         whereHelpernull_String
	IsMarkedForDeletion                    whereHelpernull_Bool
}{
	InspectionPlantBusinessPartner:         whereHelperint{field: "`data_platform_inspection_plan_component_composition_data`.`InspectionPlantBusinessPartner`"},
	InspectionPlant:                        whereHelperstring{field: "`data_platform_inspection_plan_component_composition_data`.`InspectionPlant`"},
	InspectionPlan:                         whereHelperint{field: "`data_platform_inspection_plan_component_composition_data`.`InspectionPlan`"},
	InspectionPlanGroup:                    whereHelperint{field: "`data_platform_inspection_plan_component_composition_data`.`InspectionPlanGroup`"},
	InspectionPlanInternalVersion:          whereHelperint{field: "`data_platform_inspection_plan_component_composition_data`.`InspectionPlanInternalVersion`"},
	ComponentCompositionType:               whereHelperstring{field: "`data_platform_inspection_plan_component_composition_data`.`ComponentCompositionType`"},
	ComponentCompositionTypeUpperSpecLimit: whereHelpernull_Float32{field: "`data_platform_inspection_plan_component_composition_data`.`ComponentCompositionTypeUpperSpecLimit`"},
	ComponentCompositionTypeLowerSpecLimit: whereHelpernull_Float32{field: "`data_platform_inspection_plan_component_composition_data`.`ComponentCompositionTypeLowerSpecLimit`"},
	ComponentCompositionTypeHeatNumber:     whereHelpernull_Float32{field: "`data_platform_inspection_plan_component_composition_data`.`ComponentCompositionTypeHeatNumber`"},
	ComponentCompositionTypeUnit:           whereHelpernull_String{field: "`data_platform_inspection_plan_component_composition_data`.`ComponentCompositionTypeUnit`"},
	ValidityStartDate:                      whereHelperstring{field: "`data_platform_inspection_plan_component_composition_data`.`ValidityStartDate`"},
	ValidityEndDate:                        whereHelperstring{field: "`data_platform_inspection_plan_component_composition_data`.`ValidityEndDate`"},
	CreationDate:                           whereHelpernull_String{field: "`data_platform_inspection_plan_component_composition_data`.`CreationDate`"},
	CreationTime:                           whereHelpernull_String{field: "`data_platform_inspection_plan_component_composition_data`.`CreationTime`"},
	LastChangeDate:                         whereHelpernull_String{field: "`data_platform_inspection_plan_component_composition_data`.`LastChangeDate`"},
	LastChangeTime:                         whereHelpernull_String{field: "`data_platform_inspection_plan_component_composition_data`.`LastChangeTime`"},
	IsMarkedForDeletion:                    whereHelpernull_Bool{field: "`data_platform_inspection_plan_component_composition_data`.`IsMarkedForDeletion`"},
}

// DataPlatformInspectionPlanComponentCompositionDatumRels is where relationship names are stored.
var DataPlatformInspectionPlanComponentCompositionDatumRels = struct {
	InspectionPlanDataPlatformInspectionPlanHeaderDatum string
}{
	InspectionPlanDataPlatformInspectionPlanHeaderDatum: "InspectionPlanDataPlatformInspectionPlanHeaderDatum",
}

// dataPlatformInspectionPlanComponentCompositionDatumR is where relationships are stored.
type dataPlatformInspectionPlanComponentCompositionDatumR struct {
	InspectionPlanDataPlatformInspectionPlanHeaderDatum *DataPlatformInspectionPlanHeaderDatum `boil:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" json:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" toml:"InspectionPlanDataPlatformInspectionPlanHeaderDatum" yaml:"InspectionPlanDataPlatformInspectionPlanHeaderDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformInspectionPlanComponentCompositionDatumR) NewStruct() *dataPlatformInspectionPlanComponentCompositionDatumR {
	return &dataPlatformInspectionPlanComponentCompositionDatumR{}
}

func (r *dataPlatformInspectionPlanComponentCompositionDatumR) GetInspectionPlanDataPlatformInspectionPlanHeaderDatum() *DataPlatformInspectionPlanHeaderDatum {
	if r == nil {
		return nil
	}
	return r.InspectionPlanDataPlatformInspectionPlanHeaderDatum
}

// dataPlatformInspectionPlanComponentCompositionDatumL is where Load methods for each relationship are stored.
type dataPlatformInspectionPlanComponentCompositionDatumL struct{}

var (
	dataPlatformInspectionPlanComponentCompositionDatumAllColumns            = []string{"InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionPlanGroup", "InspectionPlanInternalVersion", "ComponentCompositionType", "ComponentCompositionTypeUpperSpecLimit", "ComponentCompositionTypeLowerSpecLimit", "ComponentCompositionTypeHeatNumber", "ComponentCompositionTypeUnit", "ValidityStartDate", "ValidityEndDate", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformInspectionPlanComponentCompositionDatumColumnsWithoutDefault = []string{"InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionPlanGroup", "InspectionPlanInternalVersion", "ComponentCompositionType", "ComponentCompositionTypeUpperSpecLimit", "ComponentCompositionTypeLowerSpecLimit", "ComponentCompositionTypeHeatNumber", "ComponentCompositionTypeUnit", "ValidityStartDate", "ValidityEndDate", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformInspectionPlanComponentCompositionDatumColumnsWithDefault    = []string{}
	dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyColumns     = []string{"InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionPlanGroup", "InspectionPlanInternalVersion", "ComponentCompositionType"}
	dataPlatformInspectionPlanComponentCompositionDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformInspectionPlanComponentCompositionDatumSlice is an alias for a slice of pointers to DataPlatformInspectionPlanComponentCompositionDatum.
	// This should almost always be used instead of []DataPlatformInspectionPlanComponentCompositionDatum.
	DataPlatformInspectionPlanComponentCompositionDatumSlice []*DataPlatformInspectionPlanComponentCompositionDatum

	dataPlatformInspectionPlanComponentCompositionDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformInspectionPlanComponentCompositionDatumType                 = reflect.TypeOf(&DataPlatformInspectionPlanComponentCompositionDatum{})
	dataPlatformInspectionPlanComponentCompositionDatumMapping              = queries.MakeStructMapping(dataPlatformInspectionPlanComponentCompositionDatumType)
	dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformInspectionPlanComponentCompositionDatumType, dataPlatformInspectionPlanComponentCompositionDatumMapping, dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyColumns)
	dataPlatformInspectionPlanComponentCompositionDatumInsertCacheMut       sync.RWMutex
	dataPlatformInspectionPlanComponentCompositionDatumInsertCache          = make(map[string]insertCache)
	dataPlatformInspectionPlanComponentCompositionDatumUpdateCacheMut       sync.RWMutex
	dataPlatformInspectionPlanComponentCompositionDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformInspectionPlanComponentCompositionDatumUpsertCacheMut       sync.RWMutex
	dataPlatformInspectionPlanComponentCompositionDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformInspectionPlanComponentCompositionDatum record from the query.
func (q dataPlatformInspectionPlanComponentCompositionDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformInspectionPlanComponentCompositionDatum, error) {
	o := &DataPlatformInspectionPlanComponentCompositionDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_inspection_plan_component_composition_data")
	}

	return o, nil
}

// All returns all DataPlatformInspectionPlanComponentCompositionDatum records from the query.
func (q dataPlatformInspectionPlanComponentCompositionDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformInspectionPlanComponentCompositionDatumSlice, error) {
	var o []*DataPlatformInspectionPlanComponentCompositionDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformInspectionPlanComponentCompositionDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformInspectionPlanComponentCompositionDatum records in the query.
func (q dataPlatformInspectionPlanComponentCompositionDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_inspection_plan_component_composition_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformInspectionPlanComponentCompositionDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_inspection_plan_component_composition_data exists")
	}

	return count > 0, nil
}

// InspectionPlanDataPlatformInspectionPlanHeaderDatum pointed to by the foreign key.
func (o *DataPlatformInspectionPlanComponentCompositionDatum) InspectionPlanDataPlatformInspectionPlanHeaderDatum(mods ...qm.QueryMod) dataPlatformInspectionPlanHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`InspectionPlan` = ?", o.InspectionPlan),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformInspectionPlanHeaderData(queryMods...)
}

// LoadInspectionPlanDataPlatformInspectionPlanHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformInspectionPlanComponentCompositionDatumL) LoadInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformInspectionPlanComponentCompositionDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformInspectionPlanComponentCompositionDatum
	var object *DataPlatformInspectionPlanComponentCompositionDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformInspectionPlanComponentCompositionDatum.(*DataPlatformInspectionPlanComponentCompositionDatum)
		if !ok {
			object = new(DataPlatformInspectionPlanComponentCompositionDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformInspectionPlanComponentCompositionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformInspectionPlanComponentCompositionDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformInspectionPlanComponentCompositionDatum.(*[]*DataPlatformInspectionPlanComponentCompositionDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformInspectionPlanComponentCompositionDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformInspectionPlanComponentCompositionDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformInspectionPlanComponentCompositionDatumR{}
		}
		args = append(args, object.InspectionPlan)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformInspectionPlanComponentCompositionDatumR{}
			}

			for _, a := range args {
				if a == obj.InspectionPlan {
					continue Outer
				}
			}

			args = append(args, obj.InspectionPlan)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_header_data`),
		qm.WhereIn(`data_platform_inspection_plan_header_data.InspectionPlan in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformInspectionPlanHeaderDatum")
	}

	var resultSlice []*DataPlatformInspectionPlanHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformInspectionPlanHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_inspection_plan_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.InspectionPlan == foreign.InspectionPlan {
				local.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetInspectionPlanDataPlatformInspectionPlanHeaderDatum of the dataPlatformInspectionPlanComponentCompositionDatum to the related item.
// Sets o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum to related.
func (o *DataPlatformInspectionPlanComponentCompositionDatum) SetInspectionPlanDataPlatformInspectionPlanHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformInspectionPlanHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_inspection_plan_component_composition_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InspectionPlan"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.InspectionPlan, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanGroup, o.InspectionPlanInternalVersion, o.ComponentCompositionType}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.InspectionPlan = related.InspectionPlan
	if o.R == nil {
		o.R = &dataPlatformInspectionPlanComponentCompositionDatumR{
			InspectionPlanDataPlatformInspectionPlanHeaderDatum: related,
		}
	} else {
		o.R.InspectionPlanDataPlatformInspectionPlanHeaderDatum = related
	}

	return nil
}

// DataPlatformInspectionPlanComponentCompositionData retrieves all the records using an executor.
func DataPlatformInspectionPlanComponentCompositionData(mods ...qm.QueryMod) dataPlatformInspectionPlanComponentCompositionDatumQuery {
	mods = append(mods, qm.From("`data_platform_inspection_plan_component_composition_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_inspection_plan_component_composition_data`.*"})
	}

	return dataPlatformInspectionPlanComponentCompositionDatumQuery{q}
}

// FindDataPlatformInspectionPlanComponentCompositionDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformInspectionPlanComponentCompositionDatum(ctx context.Context, exec boil.ContextExecutor, inspectionPlantBusinessPartner int, inspectionPlant string, inspectionPlan int, inspectionPlanGroup int, inspectionPlanInternalVersion int, componentCompositionType string, selectCols ...string) (*DataPlatformInspectionPlanComponentCompositionDatum, error) {
	dataPlatformInspectionPlanComponentCompositionDatumObj := &DataPlatformInspectionPlanComponentCompositionDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_inspection_plan_component_composition_data` where `InspectionPlantBusinessPartner`=? AND `InspectionPlant`=? AND `InspectionPlan`=? AND `InspectionPlanGroup`=? AND `InspectionPlanInternalVersion`=? AND `ComponentCompositionType`=?", sel,
	)

	q := queries.Raw(query, inspectionPlantBusinessPartner, inspectionPlant, inspectionPlan, inspectionPlanGroup, inspectionPlanInternalVersion, componentCompositionType)

	err := q.Bind(ctx, exec, dataPlatformInspectionPlanComponentCompositionDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_inspection_plan_component_composition_data")
	}

	return dataPlatformInspectionPlanComponentCompositionDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformInspectionPlanComponentCompositionDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_plan_component_composition_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionPlanComponentCompositionDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformInspectionPlanComponentCompositionDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanComponentCompositionDatumInsertCache[key]
	dataPlatformInspectionPlanComponentCompositionDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformInspectionPlanComponentCompositionDatumAllColumns,
			dataPlatformInspectionPlanComponentCompositionDatumColumnsWithDefault,
			dataPlatformInspectionPlanComponentCompositionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanComponentCompositionDatumType, dataPlatformInspectionPlanComponentCompositionDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformInspectionPlanComponentCompositionDatumType, dataPlatformInspectionPlanComponentCompositionDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_inspection_plan_component_composition_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_inspection_plan_component_composition_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_inspection_plan_component_composition_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_inspection_plan_component_composition_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.InspectionPlantBusinessPartner,
		o.InspectionPlant,
		o.InspectionPlan,
		o.InspectionPlanGroup,
		o.InspectionPlanInternalVersion,
		o.ComponentCompositionType,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_plan_component_composition_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionPlanComponentCompositionDatumInsertCacheMut.Lock()
		dataPlatformInspectionPlanComponentCompositionDatumInsertCache[key] = cache
		dataPlatformInspectionPlanComponentCompositionDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformInspectionPlanComponentCompositionDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformInspectionPlanComponentCompositionDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformInspectionPlanComponentCompositionDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanComponentCompositionDatumUpdateCache[key]
	dataPlatformInspectionPlanComponentCompositionDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformInspectionPlanComponentCompositionDatumAllColumns,
			dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_inspection_plan_component_composition_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_inspection_plan_component_composition_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanComponentCompositionDatumType, dataPlatformInspectionPlanComponentCompositionDatumMapping, append(wl, dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_inspection_plan_component_composition_data row")
	}

	if !cached {
		dataPlatformInspectionPlanComponentCompositionDatumUpdateCacheMut.Lock()
		dataPlatformInspectionPlanComponentCompositionDatumUpdateCache[key] = cache
		dataPlatformInspectionPlanComponentCompositionDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformInspectionPlanComponentCompositionDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_inspection_plan_component_composition_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformInspectionPlanComponentCompositionDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_inspection_plan_component_composition_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformInspectionPlanComponentCompositionDatum slice")
	}

	return nil
}

var mySQLDataPlatformInspectionPlanComponentCompositionDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformInspectionPlanComponentCompositionDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_inspection_plan_component_composition_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformInspectionPlanComponentCompositionDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformInspectionPlanComponentCompositionDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformInspectionPlanComponentCompositionDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformInspectionPlanComponentCompositionDatumUpsertCache[key]
	dataPlatformInspectionPlanComponentCompositionDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformInspectionPlanComponentCompositionDatumAllColumns,
			dataPlatformInspectionPlanComponentCompositionDatumColumnsWithDefault,
			dataPlatformInspectionPlanComponentCompositionDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformInspectionPlanComponentCompositionDatumAllColumns,
			dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_inspection_plan_component_composition_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_inspection_plan_component_composition_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_inspection_plan_component_composition_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformInspectionPlanComponentCompositionDatumType, dataPlatformInspectionPlanComponentCompositionDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformInspectionPlanComponentCompositionDatumType, dataPlatformInspectionPlanComponentCompositionDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_inspection_plan_component_composition_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformInspectionPlanComponentCompositionDatumType, dataPlatformInspectionPlanComponentCompositionDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_inspection_plan_component_composition_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_inspection_plan_component_composition_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformInspectionPlanComponentCompositionDatumUpsertCacheMut.Lock()
		dataPlatformInspectionPlanComponentCompositionDatumUpsertCache[key] = cache
		dataPlatformInspectionPlanComponentCompositionDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformInspectionPlanComponentCompositionDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformInspectionPlanComponentCompositionDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformInspectionPlanComponentCompositionDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_inspection_plan_component_composition_data` WHERE `InspectionPlantBusinessPartner`=? AND `InspectionPlant`=? AND `InspectionPlan`=? AND `InspectionPlanGroup`=? AND `InspectionPlanInternalVersion`=? AND `ComponentCompositionType`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_inspection_plan_component_composition_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformInspectionPlanComponentCompositionDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformInspectionPlanComponentCompositionDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_inspection_plan_component_composition_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformInspectionPlanComponentCompositionDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_inspection_plan_component_composition_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformInspectionPlanComponentCompositionDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformInspectionPlanComponentCompositionDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformInspectionPlanComponentCompositionDatum(ctx, exec, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanGroup, o.InspectionPlanInternalVersion, o.ComponentCompositionType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformInspectionPlanComponentCompositionDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformInspectionPlanComponentCompositionDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_inspection_plan_component_composition_data`.* FROM `data_platform_inspection_plan_component_composition_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformInspectionPlanComponentCompositionDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformInspectionPlanComponentCompositionDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformInspectionPlanComponentCompositionDatumExists checks if the DataPlatformInspectionPlanComponentCompositionDatum row exists.
func DataPlatformInspectionPlanComponentCompositionDatumExists(ctx context.Context, exec boil.ContextExecutor, inspectionPlantBusinessPartner int, inspectionPlant string, inspectionPlan int, inspectionPlanGroup int, inspectionPlanInternalVersion int, componentCompositionType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_inspection_plan_component_composition_data` where `InspectionPlantBusinessPartner`=? AND `InspectionPlant`=? AND `InspectionPlan`=? AND `InspectionPlanGroup`=? AND `InspectionPlanInternalVersion`=? AND `ComponentCompositionType`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, inspectionPlantBusinessPartner, inspectionPlant, inspectionPlan, inspectionPlanGroup, inspectionPlanInternalVersion, componentCompositionType)
	}
	row := exec.QueryRowContext(ctx, sql, inspectionPlantBusinessPartner, inspectionPlant, inspectionPlan, inspectionPlanGroup, inspectionPlanInternalVersion, componentCompositionType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_inspection_plan_component_composition_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformInspectionPlanComponentCompositionDatum row exists.
func (o *DataPlatformInspectionPlanComponentCompositionDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformInspectionPlanComponentCompositionDatumExists(ctx, exec, o.InspectionPlantBusinessPartner, o.InspectionPlant, o.InspectionPlan, o.InspectionPlanGroup, o.InspectionPlanInternalVersion, o.ComponentCompositionType)
}
