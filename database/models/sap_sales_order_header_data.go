// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SapSalesOrderHeaderDatum is an object representing the database table.
type SapSalesOrderHeaderDatum struct {
	SalesOrder                     string      `boil:"SalesOrder" json:"SalesOrder" toml:"SalesOrder" yaml:"SalesOrder"`
	SalesOrderType                 null.String `boil:"SalesOrderType" json:"SalesOrderType,omitempty" toml:"SalesOrderType" yaml:"SalesOrderType,omitempty"`
	SalesOrganization              null.String `boil:"SalesOrganization" json:"SalesOrganization,omitempty" toml:"SalesOrganization" yaml:"SalesOrganization,omitempty"`
	DistributionChannel            null.String `boil:"DistributionChannel" json:"DistributionChannel,omitempty" toml:"DistributionChannel" yaml:"DistributionChannel,omitempty"`
	OrganizationDivision           null.String `boil:"OrganizationDivision" json:"OrganizationDivision,omitempty" toml:"OrganizationDivision" yaml:"OrganizationDivision,omitempty"`
	SalesGroup                     null.String `boil:"SalesGroup" json:"SalesGroup,omitempty" toml:"SalesGroup" yaml:"SalesGroup,omitempty"`
	SalesOffice                    null.String `boil:"SalesOffice" json:"SalesOffice,omitempty" toml:"SalesOffice" yaml:"SalesOffice,omitempty"`
	SalesDistrict                  null.String `boil:"SalesDistrict" json:"SalesDistrict,omitempty" toml:"SalesDistrict" yaml:"SalesDistrict,omitempty"`
	SoldToParty                    null.String `boil:"SoldToParty" json:"SoldToParty,omitempty" toml:"SoldToParty" yaml:"SoldToParty,omitempty"`
	CreationDate                   null.String `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                 null.String `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	PurchaseOrderByCustomer        null.String `boil:"PurchaseOrderByCustomer" json:"PurchaseOrderByCustomer,omitempty" toml:"PurchaseOrderByCustomer" yaml:"PurchaseOrderByCustomer,omitempty"`
	CustomerPurchaseOrderDate      null.String `boil:"CustomerPurchaseOrderDate" json:"CustomerPurchaseOrderDate,omitempty" toml:"CustomerPurchaseOrderDate" yaml:"CustomerPurchaseOrderDate,omitempty"`
	SalesOrderDate                 null.String `boil:"SalesOrderDate" json:"SalesOrderDate,omitempty" toml:"SalesOrderDate" yaml:"SalesOrderDate,omitempty"`
	TotalNetAmount                 null.String `boil:"TotalNetAmount" json:"TotalNetAmount,omitempty" toml:"TotalNetAmount" yaml:"TotalNetAmount,omitempty"`
	OverallDeliveryStatus          null.String `boil:"OverallDeliveryStatus" json:"OverallDeliveryStatus,omitempty" toml:"OverallDeliveryStatus" yaml:"OverallDeliveryStatus,omitempty"`
	TotalBlockStatus               null.String `boil:"TotalBlockStatus" json:"TotalBlockStatus,omitempty" toml:"TotalBlockStatus" yaml:"TotalBlockStatus,omitempty"`
	OverallOrdReltdBillgStatus     null.String `boil:"OverallOrdReltdBillgStatus" json:"OverallOrdReltdBillgStatus,omitempty" toml:"OverallOrdReltdBillgStatus" yaml:"OverallOrdReltdBillgStatus,omitempty"`
	OverallSDDocReferenceStatus    null.String `boil:"OverallSDDocReferenceStatus" json:"OverallSDDocReferenceStatus,omitempty" toml:"OverallSDDocReferenceStatus" yaml:"OverallSDDocReferenceStatus,omitempty"`
	TransactionCurrency            null.String `boil:"TransactionCurrency" json:"TransactionCurrency,omitempty" toml:"TransactionCurrency" yaml:"TransactionCurrency,omitempty"`
	PricingDate                    null.String `boil:"PricingDate" json:"PricingDate,omitempty" toml:"PricingDate" yaml:"PricingDate,omitempty"`
	SDDocumentReason               null.String `boil:"SDDocumentReason" json:"SDDocumentReason,omitempty" toml:"SDDocumentReason" yaml:"SDDocumentReason,omitempty"`
	PriceDetnExchangeRate          null.String `boil:"PriceDetnExchangeRate" json:"PriceDetnExchangeRate,omitempty" toml:"PriceDetnExchangeRate" yaml:"PriceDetnExchangeRate,omitempty"`
	RequestedDeliveryDate          null.String `boil:"RequestedDeliveryDate" json:"RequestedDeliveryDate,omitempty" toml:"RequestedDeliveryDate" yaml:"RequestedDeliveryDate,omitempty"`
	ShippingCondition              null.String `boil:"ShippingCondition" json:"ShippingCondition,omitempty" toml:"ShippingCondition" yaml:"ShippingCondition,omitempty"`
	CompleteDeliveryIsDefined      null.String `boil:"CompleteDeliveryIsDefined" json:"CompleteDeliveryIsDefined,omitempty" toml:"CompleteDeliveryIsDefined" yaml:"CompleteDeliveryIsDefined,omitempty"`
	ShippingType                   null.String `boil:"ShippingType" json:"ShippingType,omitempty" toml:"ShippingType" yaml:"ShippingType,omitempty"`
	HeaderBillingBlockReason       null.String `boil:"HeaderBillingBlockReason" json:"HeaderBillingBlockReason,omitempty" toml:"HeaderBillingBlockReason" yaml:"HeaderBillingBlockReason,omitempty"`
	DeliveryBlockReason            null.String `boil:"DeliveryBlockReason" json:"DeliveryBlockReason,omitempty" toml:"DeliveryBlockReason" yaml:"DeliveryBlockReason,omitempty"`
	IncotermsClassification        null.String `boil:"IncotermsClassification" json:"IncotermsClassification,omitempty" toml:"IncotermsClassification" yaml:"IncotermsClassification,omitempty"`
	CustomerPriceGroup             null.String `boil:"CustomerPriceGroup" json:"CustomerPriceGroup,omitempty" toml:"CustomerPriceGroup" yaml:"CustomerPriceGroup,omitempty"`
	PriceListType                  null.String `boil:"PriceListType" json:"PriceListType,omitempty" toml:"PriceListType" yaml:"PriceListType,omitempty"`
	CustomerPaymentTerms           null.String `boil:"CustomerPaymentTerms" json:"CustomerPaymentTerms,omitempty" toml:"CustomerPaymentTerms" yaml:"CustomerPaymentTerms,omitempty"`
	PaymentMethod                  null.String `boil:"PaymentMethod" json:"PaymentMethod,omitempty" toml:"PaymentMethod" yaml:"PaymentMethod,omitempty"`
	ReferenceSDDocument            null.String `boil:"ReferenceSDDocument" json:"ReferenceSDDocument,omitempty" toml:"ReferenceSDDocument" yaml:"ReferenceSDDocument,omitempty"`
	CustomerAccountAssignmentGroup null.String `boil:"CustomerAccountAssignmentGroup" json:"CustomerAccountAssignmentGroup,omitempty" toml:"CustomerAccountAssignmentGroup" yaml:"CustomerAccountAssignmentGroup,omitempty"`
	ReferenceSDDocumentCategory    null.String `boil:"ReferenceSDDocumentCategory" json:"ReferenceSDDocumentCategory,omitempty" toml:"ReferenceSDDocumentCategory" yaml:"ReferenceSDDocumentCategory,omitempty"`
	AccountingExchangeRate         null.String `boil:"AccountingExchangeRate" json:"AccountingExchangeRate,omitempty" toml:"AccountingExchangeRate" yaml:"AccountingExchangeRate,omitempty"`
	CustomerGroup                  null.String `boil:"CustomerGroup" json:"CustomerGroup,omitempty" toml:"CustomerGroup" yaml:"CustomerGroup,omitempty"`
	AdditionalCustomerGroup1       null.String `boil:"AdditionalCustomerGroup1" json:"AdditionalCustomerGroup1,omitempty" toml:"AdditionalCustomerGroup1" yaml:"AdditionalCustomerGroup1,omitempty"`
	AdditionalCustomerGroup2       null.String `boil:"AdditionalCustomerGroup2" json:"AdditionalCustomerGroup2,omitempty" toml:"AdditionalCustomerGroup2" yaml:"AdditionalCustomerGroup2,omitempty"`
	AdditionalCustomerGroup3       null.String `boil:"AdditionalCustomerGroup3" json:"AdditionalCustomerGroup3,omitempty" toml:"AdditionalCustomerGroup3" yaml:"AdditionalCustomerGroup3,omitempty"`
	AdditionalCustomerGroup4       null.String `boil:"AdditionalCustomerGroup4" json:"AdditionalCustomerGroup4,omitempty" toml:"AdditionalCustomerGroup4" yaml:"AdditionalCustomerGroup4,omitempty"`
	AdditionalCustomerGroup5       null.String `boil:"AdditionalCustomerGroup5" json:"AdditionalCustomerGroup5,omitempty" toml:"AdditionalCustomerGroup5" yaml:"AdditionalCustomerGroup5,omitempty"`
	CustomerTaxClassification1     null.String `boil:"CustomerTaxClassification1" json:"CustomerTaxClassification1,omitempty" toml:"CustomerTaxClassification1" yaml:"CustomerTaxClassification1,omitempty"`
	TotalCreditCheckStatus         null.String `boil:"TotalCreditCheckStatus" json:"TotalCreditCheckStatus,omitempty" toml:"TotalCreditCheckStatus" yaml:"TotalCreditCheckStatus,omitempty"`
	BillingDocumentDate            null.String `boil:"BillingDocumentDate" json:"BillingDocumentDate,omitempty" toml:"BillingDocumentDate" yaml:"BillingDocumentDate,omitempty"`

	R *sapSalesOrderHeaderDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sapSalesOrderHeaderDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SapSalesOrderHeaderDatumColumns = struct {
	SalesOrder                     string
	SalesOrderType                 string
	SalesOrganization              string
	DistributionChannel            string
	OrganizationDivision           string
	SalesGroup                     string
	SalesOffice                    string
	SalesDistrict                  string
	SoldToParty                    string
	CreationDate                   string
	LastChangeDate                 string
	PurchaseOrderByCustomer        string
	CustomerPurchaseOrderDate      string
	SalesOrderDate                 string
	TotalNetAmount                 string
	OverallDeliveryStatus          string
	TotalBlockStatus               string
	OverallOrdReltdBillgStatus     string
	OverallSDDocReferenceStatus    string
	TransactionCurrency            string
	PricingDate                    string
	SDDocumentReason               string
	PriceDetnExchangeRate          string
	RequestedDeliveryDate          string
	ShippingCondition              string
	CompleteDeliveryIsDefined      string
	ShippingType                   string
	HeaderBillingBlockReason       string
	DeliveryBlockReason            string
	IncotermsClassification        string
	CustomerPriceGroup             string
	PriceListType                  string
	CustomerPaymentTerms           string
	PaymentMethod                  string
	ReferenceSDDocument            string
	CustomerAccountAssignmentGroup string
	ReferenceSDDocumentCategory    string
	AccountingExchangeRate         string
	CustomerGroup                  string
	AdditionalCustomerGroup1       string
	AdditionalCustomerGroup2       string
	AdditionalCustomerGroup3       string
	AdditionalCustomerGroup4       string
	AdditionalCustomerGroup5       string
	CustomerTaxClassification1     string
	TotalCreditCheckStatus         string
	BillingDocumentDate            string
}{
	SalesOrder:                     "SalesOrder",
	SalesOrderType:                 "SalesOrderType",
	SalesOrganization:              "SalesOrganization",
	DistributionChannel:            "DistributionChannel",
	OrganizationDivision:           "OrganizationDivision",
	SalesGroup:                     "SalesGroup",
	SalesOffice:                    "SalesOffice",
	SalesDistrict:                  "SalesDistrict",
	SoldToParty:                    "SoldToParty",
	CreationDate:                   "CreationDate",
	LastChangeDate:                 "LastChangeDate",
	PurchaseOrderByCustomer:        "PurchaseOrderByCustomer",
	CustomerPurchaseOrderDate:      "CustomerPurchaseOrderDate",
	SalesOrderDate:                 "SalesOrderDate",
	TotalNetAmount:                 "TotalNetAmount",
	OverallDeliveryStatus:          "OverallDeliveryStatus",
	TotalBlockStatus:               "TotalBlockStatus",
	OverallOrdReltdBillgStatus:     "OverallOrdReltdBillgStatus",
	OverallSDDocReferenceStatus:    "OverallSDDocReferenceStatus",
	TransactionCurrency:            "TransactionCurrency",
	PricingDate:                    "PricingDate",
	SDDocumentReason:               "SDDocumentReason",
	PriceDetnExchangeRate:          "PriceDetnExchangeRate",
	RequestedDeliveryDate:          "RequestedDeliveryDate",
	ShippingCondition:              "ShippingCondition",
	CompleteDeliveryIsDefined:      "CompleteDeliveryIsDefined",
	ShippingType:                   "ShippingType",
	HeaderBillingBlockReason:       "HeaderBillingBlockReason",
	DeliveryBlockReason:            "DeliveryBlockReason",
	IncotermsClassification:        "IncotermsClassification",
	CustomerPriceGroup:             "CustomerPriceGroup",
	PriceListType:                  "PriceListType",
	CustomerPaymentTerms:           "CustomerPaymentTerms",
	PaymentMethod:                  "PaymentMethod",
	ReferenceSDDocument:            "ReferenceSDDocument",
	CustomerAccountAssignmentGroup: "CustomerAccountAssignmentGroup",
	ReferenceSDDocumentCategory:    "ReferenceSDDocumentCategory",
	AccountingExchangeRate:         "AccountingExchangeRate",
	CustomerGroup:                  "CustomerGroup",
	AdditionalCustomerGroup1:       "AdditionalCustomerGroup1",
	AdditionalCustomerGroup2:       "AdditionalCustomerGroup2",
	AdditionalCustomerGroup3:       "AdditionalCustomerGroup3",
	AdditionalCustomerGroup4:       "AdditionalCustomerGroup4",
	AdditionalCustomerGroup5:       "AdditionalCustomerGroup5",
	CustomerTaxClassification1:     "CustomerTaxClassification1",
	TotalCreditCheckStatus:         "TotalCreditCheckStatus",
	BillingDocumentDate:            "BillingDocumentDate",
}

var SapSalesOrderHeaderDatumTableColumns = struct {
	SalesOrder                     string
	SalesOrderType                 string
	SalesOrganization              string
	DistributionChannel            string
	OrganizationDivision           string
	SalesGroup                     string
	SalesOffice                    string
	SalesDistrict                  string
	SoldToParty                    string
	CreationDate                   string
	LastChangeDate                 string
	PurchaseOrderByCustomer        string
	CustomerPurchaseOrderDate      string
	SalesOrderDate                 string
	TotalNetAmount                 string
	OverallDeliveryStatus          string
	TotalBlockStatus               string
	OverallOrdReltdBillgStatus     string
	OverallSDDocReferenceStatus    string
	TransactionCurrency            string
	PricingDate                    string
	SDDocumentReason               string
	PriceDetnExchangeRate          string
	RequestedDeliveryDate          string
	ShippingCondition              string
	CompleteDeliveryIsDefined      string
	ShippingType                   string
	HeaderBillingBlockReason       string
	DeliveryBlockReason            string
	IncotermsClassification        string
	CustomerPriceGroup             string
	PriceListType                  string
	CustomerPaymentTerms           string
	PaymentMethod                  string
	ReferenceSDDocument            string
	CustomerAccountAssignmentGroup string
	ReferenceSDDocumentCategory    string
	AccountingExchangeRate         string
	CustomerGroup                  string
	AdditionalCustomerGroup1       string
	AdditionalCustomerGroup2       string
	AdditionalCustomerGroup3       string
	AdditionalCustomerGroup4       string
	AdditionalCustomerGroup5       string
	CustomerTaxClassification1     string
	TotalCreditCheckStatus         string
	BillingDocumentDate            string
}{
	SalesOrder:                     "sap_sales_order_header_data.SalesOrder",
	SalesOrderType:                 "sap_sales_order_header_data.SalesOrderType",
	SalesOrganization:              "sap_sales_order_header_data.SalesOrganization",
	DistributionChannel:            "sap_sales_order_header_data.DistributionChannel",
	OrganizationDivision:           "sap_sales_order_header_data.OrganizationDivision",
	SalesGroup:                     "sap_sales_order_header_data.SalesGroup",
	SalesOffice:                    "sap_sales_order_header_data.SalesOffice",
	SalesDistrict:                  "sap_sales_order_header_data.SalesDistrict",
	SoldToParty:                    "sap_sales_order_header_data.SoldToParty",
	CreationDate:                   "sap_sales_order_header_data.CreationDate",
	LastChangeDate:                 "sap_sales_order_header_data.LastChangeDate",
	PurchaseOrderByCustomer:        "sap_sales_order_header_data.PurchaseOrderByCustomer",
	CustomerPurchaseOrderDate:      "sap_sales_order_header_data.CustomerPurchaseOrderDate",
	SalesOrderDate:                 "sap_sales_order_header_data.SalesOrderDate",
	TotalNetAmount:                 "sap_sales_order_header_data.TotalNetAmount",
	OverallDeliveryStatus:          "sap_sales_order_header_data.OverallDeliveryStatus",
	TotalBlockStatus:               "sap_sales_order_header_data.TotalBlockStatus",
	OverallOrdReltdBillgStatus:     "sap_sales_order_header_data.OverallOrdReltdBillgStatus",
	OverallSDDocReferenceStatus:    "sap_sales_order_header_data.OverallSDDocReferenceStatus",
	TransactionCurrency:            "sap_sales_order_header_data.TransactionCurrency",
	PricingDate:                    "sap_sales_order_header_data.PricingDate",
	SDDocumentReason:               "sap_sales_order_header_data.SDDocumentReason",
	PriceDetnExchangeRate:          "sap_sales_order_header_data.PriceDetnExchangeRate",
	RequestedDeliveryDate:          "sap_sales_order_header_data.RequestedDeliveryDate",
	ShippingCondition:              "sap_sales_order_header_data.ShippingCondition",
	CompleteDeliveryIsDefined:      "sap_sales_order_header_data.CompleteDeliveryIsDefined",
	ShippingType:                   "sap_sales_order_header_data.ShippingType",
	HeaderBillingBlockReason:       "sap_sales_order_header_data.HeaderBillingBlockReason",
	DeliveryBlockReason:            "sap_sales_order_header_data.DeliveryBlockReason",
	IncotermsClassification:        "sap_sales_order_header_data.IncotermsClassification",
	CustomerPriceGroup:             "sap_sales_order_header_data.CustomerPriceGroup",
	PriceListType:                  "sap_sales_order_header_data.PriceListType",
	CustomerPaymentTerms:           "sap_sales_order_header_data.CustomerPaymentTerms",
	PaymentMethod:                  "sap_sales_order_header_data.PaymentMethod",
	ReferenceSDDocument:            "sap_sales_order_header_data.ReferenceSDDocument",
	CustomerAccountAssignmentGroup: "sap_sales_order_header_data.CustomerAccountAssignmentGroup",
	ReferenceSDDocumentCategory:    "sap_sales_order_header_data.ReferenceSDDocumentCategory",
	AccountingExchangeRate:         "sap_sales_order_header_data.AccountingExchangeRate",
	CustomerGroup:                  "sap_sales_order_header_data.CustomerGroup",
	AdditionalCustomerGroup1:       "sap_sales_order_header_data.AdditionalCustomerGroup1",
	AdditionalCustomerGroup2:       "sap_sales_order_header_data.AdditionalCustomerGroup2",
	AdditionalCustomerGroup3:       "sap_sales_order_header_data.AdditionalCustomerGroup3",
	AdditionalCustomerGroup4:       "sap_sales_order_header_data.AdditionalCustomerGroup4",
	AdditionalCustomerGroup5:       "sap_sales_order_header_data.AdditionalCustomerGroup5",
	CustomerTaxClassification1:     "sap_sales_order_header_data.CustomerTaxClassification1",
	TotalCreditCheckStatus:         "sap_sales_order_header_data.TotalCreditCheckStatus",
	BillingDocumentDate:            "sap_sales_order_header_data.BillingDocumentDate",
}

// Generated where

var SapSalesOrderHeaderDatumWhere = struct {
	SalesOrder                     whereHelperstring
	SalesOrderType                 whereHelpernull_String
	SalesOrganization              whereHelpernull_String
	DistributionChannel            whereHelpernull_String
	OrganizationDivision           whereHelpernull_String
	SalesGroup                     whereHelpernull_String
	SalesOffice                    whereHelpernull_String
	SalesDistrict                  whereHelpernull_String
	SoldToParty                    whereHelpernull_String
	CreationDate                   whereHelpernull_String
	LastChangeDate                 whereHelpernull_String
	PurchaseOrderByCustomer        whereHelpernull_String
	CustomerPurchaseOrderDate      whereHelpernull_String
	SalesOrderDate                 whereHelpernull_String
	TotalNetAmount                 whereHelpernull_String
	OverallDeliveryStatus          whereHelpernull_String
	TotalBlockStatus               whereHelpernull_String
	OverallOrdReltdBillgStatus     whereHelpernull_String
	OverallSDDocReferenceStatus    whereHelpernull_String
	TransactionCurrency            whereHelpernull_String
	PricingDate                    whereHelpernull_String
	SDDocumentReason               whereHelpernull_String
	PriceDetnExchangeRate          whereHelpernull_String
	RequestedDeliveryDate          whereHelpernull_String
	ShippingCondition              whereHelpernull_String
	CompleteDeliveryIsDefined      whereHelpernull_String
	ShippingType                   whereHelpernull_String
	HeaderBillingBlockReason       whereHelpernull_String
	DeliveryBlockReason            whereHelpernull_String
	IncotermsClassification        whereHelpernull_String
	CustomerPriceGroup             whereHelpernull_String
	PriceListType                  whereHelpernull_String
	CustomerPaymentTerms           whereHelpernull_String
	PaymentMethod                  whereHelpernull_String
	ReferenceSDDocument            whereHelpernull_String
	CustomerAccountAssignmentGroup whereHelpernull_String
	ReferenceSDDocumentCategory    whereHelpernull_String
	AccountingExchangeRate         whereHelpernull_String
	CustomerGroup                  whereHelpernull_String
	AdditionalCustomerGroup1       whereHelpernull_String
	AdditionalCustomerGroup2       whereHelpernull_String
	AdditionalCustomerGroup3       whereHelpernull_String
	AdditionalCustomerGroup4       whereHelpernull_String
	AdditionalCustomerGroup5       whereHelpernull_String
	CustomerTaxClassification1     whereHelpernull_String
	TotalCreditCheckStatus         whereHelpernull_String
	BillingDocumentDate            whereHelpernull_String
}{
	SalesOrder:                     whereHelperstring{field: "`sap_sales_order_header_data`.`SalesOrder`"},
	SalesOrderType:                 whereHelpernull_String{field: "`sap_sales_order_header_data`.`SalesOrderType`"},
	SalesOrganization:              whereHelpernull_String{field: "`sap_sales_order_header_data`.`SalesOrganization`"},
	DistributionChannel:            whereHelpernull_String{field: "`sap_sales_order_header_data`.`DistributionChannel`"},
	OrganizationDivision:           whereHelpernull_String{field: "`sap_sales_order_header_data`.`OrganizationDivision`"},
	SalesGroup:                     whereHelpernull_String{field: "`sap_sales_order_header_data`.`SalesGroup`"},
	SalesOffice:                    whereHelpernull_String{field: "`sap_sales_order_header_data`.`SalesOffice`"},
	SalesDistrict:                  whereHelpernull_String{field: "`sap_sales_order_header_data`.`SalesDistrict`"},
	SoldToParty:                    whereHelpernull_String{field: "`sap_sales_order_header_data`.`SoldToParty`"},
	CreationDate:                   whereHelpernull_String{field: "`sap_sales_order_header_data`.`CreationDate`"},
	LastChangeDate:                 whereHelpernull_String{field: "`sap_sales_order_header_data`.`LastChangeDate`"},
	PurchaseOrderByCustomer:        whereHelpernull_String{field: "`sap_sales_order_header_data`.`PurchaseOrderByCustomer`"},
	CustomerPurchaseOrderDate:      whereHelpernull_String{field: "`sap_sales_order_header_data`.`CustomerPurchaseOrderDate`"},
	SalesOrderDate:                 whereHelpernull_String{field: "`sap_sales_order_header_data`.`SalesOrderDate`"},
	TotalNetAmount:                 whereHelpernull_String{field: "`sap_sales_order_header_data`.`TotalNetAmount`"},
	OverallDeliveryStatus:          whereHelpernull_String{field: "`sap_sales_order_header_data`.`OverallDeliveryStatus`"},
	TotalBlockStatus:               whereHelpernull_String{field: "`sap_sales_order_header_data`.`TotalBlockStatus`"},
	OverallOrdReltdBillgStatus:     whereHelpernull_String{field: "`sap_sales_order_header_data`.`OverallOrdReltdBillgStatus`"},
	OverallSDDocReferenceStatus:    whereHelpernull_String{field: "`sap_sales_order_header_data`.`OverallSDDocReferenceStatus`"},
	TransactionCurrency:            whereHelpernull_String{field: "`sap_sales_order_header_data`.`TransactionCurrency`"},
	PricingDate:                    whereHelpernull_String{field: "`sap_sales_order_header_data`.`PricingDate`"},
	SDDocumentReason:               whereHelpernull_String{field: "`sap_sales_order_header_data`.`SDDocumentReason`"},
	PriceDetnExchangeRate:          whereHelpernull_String{field: "`sap_sales_order_header_data`.`PriceDetnExchangeRate`"},
	RequestedDeliveryDate:          whereHelpernull_String{field: "`sap_sales_order_header_data`.`RequestedDeliveryDate`"},
	ShippingCondition:              whereHelpernull_String{field: "`sap_sales_order_header_data`.`ShippingCondition`"},
	CompleteDeliveryIsDefined:      whereHelpernull_String{field: "`sap_sales_order_header_data`.`CompleteDeliveryIsDefined`"},
	ShippingType:                   whereHelpernull_String{field: "`sap_sales_order_header_data`.`ShippingType`"},
	HeaderBillingBlockReason:       whereHelpernull_String{field: "`sap_sales_order_header_data`.`HeaderBillingBlockReason`"},
	DeliveryBlockReason:            whereHelpernull_String{field: "`sap_sales_order_header_data`.`DeliveryBlockReason`"},
	IncotermsClassification:        whereHelpernull_String{field: "`sap_sales_order_header_data`.`IncotermsClassification`"},
	CustomerPriceGroup:             whereHelpernull_String{field: "`sap_sales_order_header_data`.`CustomerPriceGroup`"},
	PriceListType:                  whereHelpernull_String{field: "`sap_sales_order_header_data`.`PriceListType`"},
	CustomerPaymentTerms:           whereHelpernull_String{field: "`sap_sales_order_header_data`.`CustomerPaymentTerms`"},
	PaymentMethod:                  whereHelpernull_String{field: "`sap_sales_order_header_data`.`PaymentMethod`"},
	ReferenceSDDocument:            whereHelpernull_String{field: "`sap_sales_order_header_data`.`ReferenceSDDocument`"},
	CustomerAccountAssignmentGroup: whereHelpernull_String{field: "`sap_sales_order_header_data`.`CustomerAccountAssignmentGroup`"},
	ReferenceSDDocumentCategory:    whereHelpernull_String{field: "`sap_sales_order_header_data`.`ReferenceSDDocumentCategory`"},
	AccountingExchangeRate:         whereHelpernull_String{field: "`sap_sales_order_header_data`.`AccountingExchangeRate`"},
	CustomerGroup:                  whereHelpernull_String{field: "`sap_sales_order_header_data`.`CustomerGroup`"},
	AdditionalCustomerGroup1:       whereHelpernull_String{field: "`sap_sales_order_header_data`.`AdditionalCustomerGroup1`"},
	AdditionalCustomerGroup2:       whereHelpernull_String{field: "`sap_sales_order_header_data`.`AdditionalCustomerGroup2`"},
	AdditionalCustomerGroup3:       whereHelpernull_String{field: "`sap_sales_order_header_data`.`AdditionalCustomerGroup3`"},
	AdditionalCustomerGroup4:       whereHelpernull_String{field: "`sap_sales_order_header_data`.`AdditionalCustomerGroup4`"},
	AdditionalCustomerGroup5:       whereHelpernull_String{field: "`sap_sales_order_header_data`.`AdditionalCustomerGroup5`"},
	CustomerTaxClassification1:     whereHelpernull_String{field: "`sap_sales_order_header_data`.`CustomerTaxClassification1`"},
	TotalCreditCheckStatus:         whereHelpernull_String{field: "`sap_sales_order_header_data`.`TotalCreditCheckStatus`"},
	BillingDocumentDate:            whereHelpernull_String{field: "`sap_sales_order_header_data`.`BillingDocumentDate`"},
}

// SapSalesOrderHeaderDatumRels is where relationship names are stored.
var SapSalesOrderHeaderDatumRels = struct {
	SalesOrderSapSalesOrderItemData string
}{
	SalesOrderSapSalesOrderItemData: "SalesOrderSapSalesOrderItemData",
}

// sapSalesOrderHeaderDatumR is where relationships are stored.
type sapSalesOrderHeaderDatumR struct {
	SalesOrderSapSalesOrderItemData SapSalesOrderItemDatumSlice `boil:"SalesOrderSapSalesOrderItemData" json:"SalesOrderSapSalesOrderItemData" toml:"SalesOrderSapSalesOrderItemData" yaml:"SalesOrderSapSalesOrderItemData"`
}

// NewStruct creates a new relationship struct
func (*sapSalesOrderHeaderDatumR) NewStruct() *sapSalesOrderHeaderDatumR {
	return &sapSalesOrderHeaderDatumR{}
}

func (r *sapSalesOrderHeaderDatumR) GetSalesOrderSapSalesOrderItemData() SapSalesOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.SalesOrderSapSalesOrderItemData
}

// sapSalesOrderHeaderDatumL is where Load methods for each relationship are stored.
type sapSalesOrderHeaderDatumL struct{}

var (
	sapSalesOrderHeaderDatumAllColumns            = []string{"SalesOrder", "SalesOrderType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "PurchaseOrderByCustomer", "CustomerPurchaseOrderDate", "SalesOrderDate", "TotalNetAmount", "OverallDeliveryStatus", "TotalBlockStatus", "OverallOrdReltdBillgStatus", "OverallSDDocReferenceStatus", "TransactionCurrency", "PricingDate", "SDDocumentReason", "PriceDetnExchangeRate", "RequestedDeliveryDate", "ShippingCondition", "CompleteDeliveryIsDefined", "ShippingType", "HeaderBillingBlockReason", "DeliveryBlockReason", "IncotermsClassification", "CustomerPriceGroup", "PriceListType", "CustomerPaymentTerms", "PaymentMethod", "ReferenceSDDocument", "CustomerAccountAssignmentGroup", "ReferenceSDDocumentCategory", "AccountingExchangeRate", "CustomerGroup", "AdditionalCustomerGroup1", "AdditionalCustomerGroup2", "AdditionalCustomerGroup3", "AdditionalCustomerGroup4", "AdditionalCustomerGroup5", "CustomerTaxClassification1", "TotalCreditCheckStatus", "BillingDocumentDate"}
	sapSalesOrderHeaderDatumColumnsWithoutDefault = []string{"SalesOrder", "SalesOrderType", "SalesOrganization", "DistributionChannel", "OrganizationDivision", "SalesGroup", "SalesOffice", "SalesDistrict", "SoldToParty", "CreationDate", "LastChangeDate", "PurchaseOrderByCustomer", "CustomerPurchaseOrderDate", "SalesOrderDate", "TotalNetAmount", "OverallDeliveryStatus", "TotalBlockStatus", "OverallOrdReltdBillgStatus", "OverallSDDocReferenceStatus", "TransactionCurrency", "PricingDate", "SDDocumentReason", "PriceDetnExchangeRate", "RequestedDeliveryDate", "ShippingCondition", "CompleteDeliveryIsDefined", "ShippingType", "HeaderBillingBlockReason", "DeliveryBlockReason", "IncotermsClassification", "CustomerPriceGroup", "PriceListType", "CustomerPaymentTerms", "PaymentMethod", "ReferenceSDDocument", "CustomerAccountAssignmentGroup", "ReferenceSDDocumentCategory", "AccountingExchangeRate", "CustomerGroup", "AdditionalCustomerGroup1", "AdditionalCustomerGroup2", "AdditionalCustomerGroup3", "AdditionalCustomerGroup4", "AdditionalCustomerGroup5", "CustomerTaxClassification1", "TotalCreditCheckStatus", "BillingDocumentDate"}
	sapSalesOrderHeaderDatumColumnsWithDefault    = []string{}
	sapSalesOrderHeaderDatumPrimaryKeyColumns     = []string{"SalesOrder"}
	sapSalesOrderHeaderDatumGeneratedColumns      = []string{}
)

type (
	// SapSalesOrderHeaderDatumSlice is an alias for a slice of pointers to SapSalesOrderHeaderDatum.
	// This should almost always be used instead of []SapSalesOrderHeaderDatum.
	SapSalesOrderHeaderDatumSlice []*SapSalesOrderHeaderDatum
	// SapSalesOrderHeaderDatumHook is the signature for custom SapSalesOrderHeaderDatum hook methods
	SapSalesOrderHeaderDatumHook func(context.Context, boil.ContextExecutor, *SapSalesOrderHeaderDatum) error

	sapSalesOrderHeaderDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sapSalesOrderHeaderDatumType                 = reflect.TypeOf(&SapSalesOrderHeaderDatum{})
	sapSalesOrderHeaderDatumMapping              = queries.MakeStructMapping(sapSalesOrderHeaderDatumType)
	sapSalesOrderHeaderDatumPrimaryKeyMapping, _ = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, sapSalesOrderHeaderDatumPrimaryKeyColumns)
	sapSalesOrderHeaderDatumInsertCacheMut       sync.RWMutex
	sapSalesOrderHeaderDatumInsertCache          = make(map[string]insertCache)
	sapSalesOrderHeaderDatumUpdateCacheMut       sync.RWMutex
	sapSalesOrderHeaderDatumUpdateCache          = make(map[string]updateCache)
	sapSalesOrderHeaderDatumUpsertCacheMut       sync.RWMutex
	sapSalesOrderHeaderDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sapSalesOrderHeaderDatumAfterSelectHooks []SapSalesOrderHeaderDatumHook

var sapSalesOrderHeaderDatumBeforeInsertHooks []SapSalesOrderHeaderDatumHook
var sapSalesOrderHeaderDatumAfterInsertHooks []SapSalesOrderHeaderDatumHook

var sapSalesOrderHeaderDatumBeforeUpdateHooks []SapSalesOrderHeaderDatumHook
var sapSalesOrderHeaderDatumAfterUpdateHooks []SapSalesOrderHeaderDatumHook

var sapSalesOrderHeaderDatumBeforeDeleteHooks []SapSalesOrderHeaderDatumHook
var sapSalesOrderHeaderDatumAfterDeleteHooks []SapSalesOrderHeaderDatumHook

var sapSalesOrderHeaderDatumBeforeUpsertHooks []SapSalesOrderHeaderDatumHook
var sapSalesOrderHeaderDatumAfterUpsertHooks []SapSalesOrderHeaderDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SapSalesOrderHeaderDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SapSalesOrderHeaderDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SapSalesOrderHeaderDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SapSalesOrderHeaderDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SapSalesOrderHeaderDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SapSalesOrderHeaderDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SapSalesOrderHeaderDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SapSalesOrderHeaderDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SapSalesOrderHeaderDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sapSalesOrderHeaderDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSapSalesOrderHeaderDatumHook registers your hook function for all future operations.
func AddSapSalesOrderHeaderDatumHook(hookPoint boil.HookPoint, sapSalesOrderHeaderDatumHook SapSalesOrderHeaderDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sapSalesOrderHeaderDatumAfterSelectHooks = append(sapSalesOrderHeaderDatumAfterSelectHooks, sapSalesOrderHeaderDatumHook)
	case boil.BeforeInsertHook:
		sapSalesOrderHeaderDatumBeforeInsertHooks = append(sapSalesOrderHeaderDatumBeforeInsertHooks, sapSalesOrderHeaderDatumHook)
	case boil.AfterInsertHook:
		sapSalesOrderHeaderDatumAfterInsertHooks = append(sapSalesOrderHeaderDatumAfterInsertHooks, sapSalesOrderHeaderDatumHook)
	case boil.BeforeUpdateHook:
		sapSalesOrderHeaderDatumBeforeUpdateHooks = append(sapSalesOrderHeaderDatumBeforeUpdateHooks, sapSalesOrderHeaderDatumHook)
	case boil.AfterUpdateHook:
		sapSalesOrderHeaderDatumAfterUpdateHooks = append(sapSalesOrderHeaderDatumAfterUpdateHooks, sapSalesOrderHeaderDatumHook)
	case boil.BeforeDeleteHook:
		sapSalesOrderHeaderDatumBeforeDeleteHooks = append(sapSalesOrderHeaderDatumBeforeDeleteHooks, sapSalesOrderHeaderDatumHook)
	case boil.AfterDeleteHook:
		sapSalesOrderHeaderDatumAfterDeleteHooks = append(sapSalesOrderHeaderDatumAfterDeleteHooks, sapSalesOrderHeaderDatumHook)
	case boil.BeforeUpsertHook:
		sapSalesOrderHeaderDatumBeforeUpsertHooks = append(sapSalesOrderHeaderDatumBeforeUpsertHooks, sapSalesOrderHeaderDatumHook)
	case boil.AfterUpsertHook:
		sapSalesOrderHeaderDatumAfterUpsertHooks = append(sapSalesOrderHeaderDatumAfterUpsertHooks, sapSalesOrderHeaderDatumHook)
	}
}

// One returns a single sapSalesOrderHeaderDatum record from the query.
func (q sapSalesOrderHeaderDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SapSalesOrderHeaderDatum, error) {
	o := &SapSalesOrderHeaderDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sap_sales_order_header_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SapSalesOrderHeaderDatum records from the query.
func (q sapSalesOrderHeaderDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (SapSalesOrderHeaderDatumSlice, error) {
	var o []*SapSalesOrderHeaderDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SapSalesOrderHeaderDatum slice")
	}

	if len(sapSalesOrderHeaderDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SapSalesOrderHeaderDatum records in the query.
func (q sapSalesOrderHeaderDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sap_sales_order_header_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sapSalesOrderHeaderDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sap_sales_order_header_data exists")
	}

	return count > 0, nil
}

// SalesOrderSapSalesOrderItemData retrieves all the sap_sales_order_item_datum's SapSalesOrderItemData with an executor via SalesOrder column.
func (o *SapSalesOrderHeaderDatum) SalesOrderSapSalesOrderItemData(mods ...qm.QueryMod) sapSalesOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`sap_sales_order_item_data`.`SalesOrder`=?", o.SalesOrder),
	)

	return SapSalesOrderItemData(queryMods...)
}

// LoadSalesOrderSapSalesOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sapSalesOrderHeaderDatumL) LoadSalesOrderSapSalesOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSapSalesOrderHeaderDatum interface{}, mods queries.Applicator) error {
	var slice []*SapSalesOrderHeaderDatum
	var object *SapSalesOrderHeaderDatum

	if singular {
		var ok bool
		object, ok = maybeSapSalesOrderHeaderDatum.(*SapSalesOrderHeaderDatum)
		if !ok {
			object = new(SapSalesOrderHeaderDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSapSalesOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSapSalesOrderHeaderDatum))
			}
		}
	} else {
		s, ok := maybeSapSalesOrderHeaderDatum.(*[]*SapSalesOrderHeaderDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSapSalesOrderHeaderDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSapSalesOrderHeaderDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sapSalesOrderHeaderDatumR{}
		}
		args = append(args, object.SalesOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sapSalesOrderHeaderDatumR{}
			}

			for _, a := range args {
				if a == obj.SalesOrder {
					continue Outer
				}
			}

			args = append(args, obj.SalesOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sap_sales_order_item_data`),
		qm.WhereIn(`sap_sales_order_item_data.SalesOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sap_sales_order_item_data")
	}

	var resultSlice []*SapSalesOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sap_sales_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sap_sales_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sap_sales_order_item_data")
	}

	if len(sapSalesOrderItemDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SalesOrderSapSalesOrderItemData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sapSalesOrderItemDatumR{}
			}
			foreign.R.SalesOrderSapSalesOrderHeaderDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SalesOrder == foreign.SalesOrder {
				local.R.SalesOrderSapSalesOrderItemData = append(local.R.SalesOrderSapSalesOrderItemData, foreign)
				if foreign.R == nil {
					foreign.R = &sapSalesOrderItemDatumR{}
				}
				foreign.R.SalesOrderSapSalesOrderHeaderDatum = local
				break
			}
		}
	}

	return nil
}

// AddSalesOrderSapSalesOrderItemData adds the given related objects to the existing relationships
// of the sap_sales_order_header_datum, optionally inserting them as new records.
// Appends related to o.R.SalesOrderSapSalesOrderItemData.
// Sets related.R.SalesOrderSapSalesOrderHeaderDatum appropriately.
func (o *SapSalesOrderHeaderDatum) AddSalesOrderSapSalesOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SapSalesOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SalesOrder = o.SalesOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `sap_sales_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"SalesOrder"}),
				strmangle.WhereClause("`", "`", 0, sapSalesOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.SalesOrder, rel.SalesOrder, rel.SalesOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SalesOrder = o.SalesOrder
		}
	}

	if o.R == nil {
		o.R = &sapSalesOrderHeaderDatumR{
			SalesOrderSapSalesOrderItemData: related,
		}
	} else {
		o.R.SalesOrderSapSalesOrderItemData = append(o.R.SalesOrderSapSalesOrderItemData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sapSalesOrderItemDatumR{
				SalesOrderSapSalesOrderHeaderDatum: o,
			}
		} else {
			rel.R.SalesOrderSapSalesOrderHeaderDatum = o
		}
	}
	return nil
}

// SapSalesOrderHeaderData retrieves all the records using an executor.
func SapSalesOrderHeaderData(mods ...qm.QueryMod) sapSalesOrderHeaderDatumQuery {
	mods = append(mods, qm.From("`sap_sales_order_header_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`sap_sales_order_header_data`.*"})
	}

	return sapSalesOrderHeaderDatumQuery{q}
}

// FindSapSalesOrderHeaderDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSapSalesOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, salesOrder string, selectCols ...string) (*SapSalesOrderHeaderDatum, error) {
	sapSalesOrderHeaderDatumObj := &SapSalesOrderHeaderDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `sap_sales_order_header_data` where `SalesOrder`=?", sel,
	)

	q := queries.Raw(query, salesOrder)

	err := q.Bind(ctx, exec, sapSalesOrderHeaderDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sap_sales_order_header_data")
	}

	if err = sapSalesOrderHeaderDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sapSalesOrderHeaderDatumObj, err
	}

	return sapSalesOrderHeaderDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SapSalesOrderHeaderDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_order_header_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesOrderHeaderDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sapSalesOrderHeaderDatumInsertCacheMut.RLock()
	cache, cached := sapSalesOrderHeaderDatumInsertCache[key]
	sapSalesOrderHeaderDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sapSalesOrderHeaderDatumAllColumns,
			sapSalesOrderHeaderDatumColumnsWithDefault,
			sapSalesOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `sap_sales_order_header_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `sap_sales_order_header_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `sap_sales_order_header_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, sapSalesOrderHeaderDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sap_sales_order_header_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SalesOrder,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_order_header_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesOrderHeaderDatumInsertCacheMut.Lock()
		sapSalesOrderHeaderDatumInsertCache[key] = cache
		sapSalesOrderHeaderDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SapSalesOrderHeaderDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SapSalesOrderHeaderDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sapSalesOrderHeaderDatumUpdateCacheMut.RLock()
	cache, cached := sapSalesOrderHeaderDatumUpdateCache[key]
	sapSalesOrderHeaderDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sapSalesOrderHeaderDatumAllColumns,
			sapSalesOrderHeaderDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sap_sales_order_header_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `sap_sales_order_header_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, sapSalesOrderHeaderDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, append(wl, sapSalesOrderHeaderDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sap_sales_order_header_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sap_sales_order_header_data")
	}

	if !cached {
		sapSalesOrderHeaderDatumUpdateCacheMut.Lock()
		sapSalesOrderHeaderDatumUpdateCache[key] = cache
		sapSalesOrderHeaderDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sapSalesOrderHeaderDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sap_sales_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sap_sales_order_header_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SapSalesOrderHeaderDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `sap_sales_order_header_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesOrderHeaderDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sapSalesOrderHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sapSalesOrderHeaderDatum")
	}
	return rowsAff, nil
}

var mySQLSapSalesOrderHeaderDatumUniqueColumns = []string{
	"SalesOrder",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SapSalesOrderHeaderDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sap_sales_order_header_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sapSalesOrderHeaderDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSapSalesOrderHeaderDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sapSalesOrderHeaderDatumUpsertCacheMut.RLock()
	cache, cached := sapSalesOrderHeaderDatumUpsertCache[key]
	sapSalesOrderHeaderDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sapSalesOrderHeaderDatumAllColumns,
			sapSalesOrderHeaderDatumColumnsWithDefault,
			sapSalesOrderHeaderDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sapSalesOrderHeaderDatumAllColumns,
			sapSalesOrderHeaderDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert sap_sales_order_header_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`sap_sales_order_header_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `sap_sales_order_header_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for sap_sales_order_header_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(sapSalesOrderHeaderDatumType, sapSalesOrderHeaderDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for sap_sales_order_header_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for sap_sales_order_header_data")
	}

CacheNoHooks:
	if !cached {
		sapSalesOrderHeaderDatumUpsertCacheMut.Lock()
		sapSalesOrderHeaderDatumUpsertCache[key] = cache
		sapSalesOrderHeaderDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SapSalesOrderHeaderDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SapSalesOrderHeaderDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SapSalesOrderHeaderDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sapSalesOrderHeaderDatumPrimaryKeyMapping)
	sql := "DELETE FROM `sap_sales_order_header_data` WHERE `SalesOrder`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sap_sales_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sap_sales_order_header_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sapSalesOrderHeaderDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sapSalesOrderHeaderDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sap_sales_order_header_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_order_header_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SapSalesOrderHeaderDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sapSalesOrderHeaderDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `sap_sales_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesOrderHeaderDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sapSalesOrderHeaderDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sap_sales_order_header_data")
	}

	if len(sapSalesOrderHeaderDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SapSalesOrderHeaderDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSapSalesOrderHeaderDatum(ctx, exec, o.SalesOrder)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SapSalesOrderHeaderDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SapSalesOrderHeaderDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sapSalesOrderHeaderDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `sap_sales_order_header_data`.* FROM `sap_sales_order_header_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sapSalesOrderHeaderDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SapSalesOrderHeaderDatumSlice")
	}

	*o = slice

	return nil
}

// SapSalesOrderHeaderDatumExists checks if the SapSalesOrderHeaderDatum row exists.
func SapSalesOrderHeaderDatumExists(ctx context.Context, exec boil.ContextExecutor, salesOrder string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `sap_sales_order_header_data` where `SalesOrder`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, salesOrder)
	}
	row := exec.QueryRowContext(ctx, sql, salesOrder)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sap_sales_order_header_data exists")
	}

	return exists, nil
}

// Exists checks if the SapSalesOrderHeaderDatum row exists.
func (o *SapSalesOrderHeaderDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SapSalesOrderHeaderDatumExists(ctx, exec, o.SalesOrder)
}
