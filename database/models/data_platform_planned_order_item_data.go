// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPlannedOrderItemDatum is an object representing the database table.
type DataPlatformPlannedOrderItemDatum struct {
	PlannedOrder                          int          `boil:"PlannedOrder" json:"PlannedOrder" toml:"PlannedOrder" yaml:"PlannedOrder"`
	PlannedOrderItem                      int          `boil:"PlannedOrderItem" json:"PlannedOrderItem" toml:"PlannedOrderItem" yaml:"PlannedOrderItem"`
	Product                               null.String  `boil:"Product" json:"Product,omitempty" toml:"Product" yaml:"Product,omitempty"`
	ProductDeliverFromParty               null.Int     `boil:"ProductDeliverFromParty" json:"ProductDeliverFromParty,omitempty" toml:"ProductDeliverFromParty" yaml:"ProductDeliverFromParty,omitempty"`
	ProductDeliverToParty                 null.Int     `boil:"ProductDeliverToParty" json:"ProductDeliverToParty,omitempty" toml:"ProductDeliverToParty" yaml:"ProductDeliverToParty,omitempty"`
	IssuingPlant                          null.String  `boil:"IssuingPlant" json:"IssuingPlant,omitempty" toml:"IssuingPlant" yaml:"IssuingPlant,omitempty"`
	IssuingPlantStorageLocation           null.String  `boil:"IssuingPlantStorageLocation" json:"IssuingPlantStorageLocation,omitempty" toml:"IssuingPlantStorageLocation" yaml:"IssuingPlantStorageLocation,omitempty"`
	ReceivingPlant                        null.String  `boil:"ReceivingPlant" json:"ReceivingPlant,omitempty" toml:"ReceivingPlant" yaml:"ReceivingPlant,omitempty"`
	ReceivingPlantStorageLocation         null.String  `boil:"ReceivingPlantStorageLocation" json:"ReceivingPlantStorageLocation,omitempty" toml:"ReceivingPlantStorageLocation" yaml:"ReceivingPlantStorageLocation,omitempty"`
	ProductionPlantBusinessPartner        null.Int     `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner,omitempty" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner,omitempty"`
	ProductionPlant                       null.String  `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	ProductionPlantStorageLocation        null.String  `boil:"ProductionPlantStorageLocation" json:"ProductionPlantStorageLocation,omitempty" toml:"ProductionPlantStorageLocation" yaml:"ProductionPlantStorageLocation,omitempty"`
	BaseUnit                              null.String  `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	MRPArea                               null.String  `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	MRPController                         null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	PlannedOrderQuantityInBaseUnit        null.Float32 `boil:"PlannedOrderQuantityInBaseUnit" json:"PlannedOrderQuantityInBaseUnit,omitempty" toml:"PlannedOrderQuantityInBaseUnit" yaml:"PlannedOrderQuantityInBaseUnit,omitempty"`
	PlannedOrderPlannedScrapQtyInBaseUnit null.Float32 `boil:"PlannedOrderPlannedScrapQtyInBaseUnit" json:"PlannedOrderPlannedScrapQtyInBaseUnit,omitempty" toml:"PlannedOrderPlannedScrapQtyInBaseUnit" yaml:"PlannedOrderPlannedScrapQtyInBaseUnit,omitempty"`
	PlannedOrderIssuingUnit               null.String  `boil:"PlannedOrderIssuingUnit" json:"PlannedOrderIssuingUnit,omitempty" toml:"PlannedOrderIssuingUnit" yaml:"PlannedOrderIssuingUnit,omitempty"`
	PlannedOrderReceivingUnit             null.String  `boil:"PlannedOrderReceivingUnit" json:"PlannedOrderReceivingUnit,omitempty" toml:"PlannedOrderReceivingUnit" yaml:"PlannedOrderReceivingUnit,omitempty"`
	PlannedOrderIssuingQuantity           null.Float32 `boil:"PlannedOrderIssuingQuantity" json:"PlannedOrderIssuingQuantity,omitempty" toml:"PlannedOrderIssuingQuantity" yaml:"PlannedOrderIssuingQuantity,omitempty"`
	PlannedOrderReceivingQuantity         null.Float32 `boil:"PlannedOrderReceivingQuantity" json:"PlannedOrderReceivingQuantity,omitempty" toml:"PlannedOrderReceivingQuantity" yaml:"PlannedOrderReceivingQuantity,omitempty"`
	PlannedOrderPlannedStartDate          null.String  `boil:"PlannedOrderPlannedStartDate" json:"PlannedOrderPlannedStartDate,omitempty" toml:"PlannedOrderPlannedStartDate" yaml:"PlannedOrderPlannedStartDate,omitempty"`
	PlannedOrderPlannedStartTime          null.String  `boil:"PlannedOrderPlannedStartTime" json:"PlannedOrderPlannedStartTime,omitempty" toml:"PlannedOrderPlannedStartTime" yaml:"PlannedOrderPlannedStartTime,omitempty"`
	PlannedOrderPlannedEndDate            null.String  `boil:"PlannedOrderPlannedEndDate" json:"PlannedOrderPlannedEndDate,omitempty" toml:"PlannedOrderPlannedEndDate" yaml:"PlannedOrderPlannedEndDate,omitempty"`
	PlannedOrderPlannedEndTime            null.String  `boil:"PlannedOrderPlannedEndTime" json:"PlannedOrderPlannedEndTime,omitempty" toml:"PlannedOrderPlannedEndTime" yaml:"PlannedOrderPlannedEndTime,omitempty"`
	LastChangeDateTime                    null.String  `boil:"LastChangeDateTime" json:"LastChangeDateTime,omitempty" toml:"LastChangeDateTime" yaml:"LastChangeDateTime,omitempty"`
	OrderID                               null.Int     `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                             null.Int     `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	ProductBuyer                          null.Int     `boil:"ProductBuyer" json:"ProductBuyer,omitempty" toml:"ProductBuyer" yaml:"ProductBuyer,omitempty"`
	ProductSeller                         null.Int     `boil:"ProductSeller" json:"ProductSeller,omitempty" toml:"ProductSeller" yaml:"ProductSeller,omitempty"`
	Project                               null.String  `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	Reservation                           null.Int     `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	ReservationItem                       null.Int     `boil:"ReservationItem" json:"ReservationItem,omitempty" toml:"ReservationItem" yaml:"ReservationItem,omitempty"`
	PlannedOrderLongText                  null.String  `boil:"PlannedOrderLongText" json:"PlannedOrderLongText,omitempty" toml:"PlannedOrderLongText" yaml:"PlannedOrderLongText,omitempty"`
	PlannedOrderIsFixed                   null.Bool    `boil:"PlannedOrderIsFixed" json:"PlannedOrderIsFixed,omitempty" toml:"PlannedOrderIsFixed" yaml:"PlannedOrderIsFixed,omitempty"`
	PlannedOrderBOMIsFixed                null.Bool    `boil:"PlannedOrderBOMIsFixed" json:"PlannedOrderBOMIsFixed,omitempty" toml:"PlannedOrderBOMIsFixed" yaml:"PlannedOrderBOMIsFixed,omitempty"`
	LastScheduledDate                     null.String  `boil:"LastScheduledDate" json:"LastScheduledDate,omitempty" toml:"LastScheduledDate" yaml:"LastScheduledDate,omitempty"`
	ScheduledBasicEndDate                 null.String  `boil:"ScheduledBasicEndDate" json:"ScheduledBasicEndDate,omitempty" toml:"ScheduledBasicEndDate" yaml:"ScheduledBasicEndDate,omitempty"`
	ScheduledBasicEndTime                 null.String  `boil:"ScheduledBasicEndTime" json:"ScheduledBasicEndTime,omitempty" toml:"ScheduledBasicEndTime" yaml:"ScheduledBasicEndTime,omitempty"`
	ScheduledBasicStartDate               null.String  `boil:"ScheduledBasicStartDate" json:"ScheduledBasicStartDate,omitempty" toml:"ScheduledBasicStartDate" yaml:"ScheduledBasicStartDate,omitempty"`
	ScheduledBasicStartTime               null.String  `boil:"ScheduledBasicStartTime" json:"ScheduledBasicStartTime,omitempty" toml:"ScheduledBasicStartTime" yaml:"ScheduledBasicStartTime,omitempty"`
	SchedulingType                        null.String  `boil:"SchedulingType" json:"SchedulingType,omitempty" toml:"SchedulingType" yaml:"SchedulingType,omitempty"`
	PlannedOrderIsReleased                null.Bool    `boil:"PlannedOrderIsReleased" json:"PlannedOrderIsReleased,omitempty" toml:"PlannedOrderIsReleased" yaml:"PlannedOrderIsReleased,omitempty"`
	IsMarkedForDeletion                   null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPlannedOrderItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPlannedOrderItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPlannedOrderItemDatumColumns = struct {
	PlannedOrder                          string
	PlannedOrderItem                      string
	Product                               string
	ProductDeliverFromParty               string
	ProductDeliverToParty                 string
	IssuingPlant                          string
	IssuingPlantStorageLocation           string
	ReceivingPlant                        string
	ReceivingPlantStorageLocation         string
	ProductionPlantBusinessPartner        string
	ProductionPlant                       string
	ProductionPlantStorageLocation        string
	BaseUnit                              string
	MRPArea                               string
	MRPController                         string
	PlannedOrderQuantityInBaseUnit        string
	PlannedOrderPlannedScrapQtyInBaseUnit string
	PlannedOrderIssuingUnit               string
	PlannedOrderReceivingUnit             string
	PlannedOrderIssuingQuantity           string
	PlannedOrderReceivingQuantity         string
	PlannedOrderPlannedStartDate          string
	PlannedOrderPlannedStartTime          string
	PlannedOrderPlannedEndDate            string
	PlannedOrderPlannedEndTime            string
	LastChangeDateTime                    string
	OrderID                               string
	OrderItem                             string
	ProductBuyer                          string
	ProductSeller                         string
	Project                               string
	Reservation                           string
	ReservationItem                       string
	PlannedOrderLongText                  string
	PlannedOrderIsFixed                   string
	PlannedOrderBOMIsFixed                string
	LastScheduledDate                     string
	ScheduledBasicEndDate                 string
	ScheduledBasicEndTime                 string
	ScheduledBasicStartDate               string
	ScheduledBasicStartTime               string
	SchedulingType                        string
	PlannedOrderIsReleased                string
	IsMarkedForDeletion                   string
}{
	PlannedOrder:                          "PlannedOrder",
	PlannedOrderItem:                      "PlannedOrderItem",
	Product:                               "Product",
	ProductDeliverFromParty:               "ProductDeliverFromParty",
	ProductDeliverToParty:                 "ProductDeliverToParty",
	IssuingPlant:                          "IssuingPlant",
	IssuingPlantStorageLocation:           "IssuingPlantStorageLocation",
	ReceivingPlant:                        "ReceivingPlant",
	ReceivingPlantStorageLocation:         "ReceivingPlantStorageLocation",
	ProductionPlantBusinessPartner:        "ProductionPlantBusinessPartner",
	ProductionPlant:                       "ProductionPlant",
	ProductionPlantStorageLocation:        "ProductionPlantStorageLocation",
	BaseUnit:                              "BaseUnit",
	MRPArea:                               "MRPArea",
	MRPController:                         "MRPController",
	PlannedOrderQuantityInBaseUnit:        "PlannedOrderQuantityInBaseUnit",
	PlannedOrderPlannedScrapQtyInBaseUnit: "PlannedOrderPlannedScrapQtyInBaseUnit",
	PlannedOrderIssuingUnit:               "PlannedOrderIssuingUnit",
	PlannedOrderReceivingUnit:             "PlannedOrderReceivingUnit",
	PlannedOrderIssuingQuantity:           "PlannedOrderIssuingQuantity",
	PlannedOrderReceivingQuantity:         "PlannedOrderReceivingQuantity",
	PlannedOrderPlannedStartDate:          "PlannedOrderPlannedStartDate",
	PlannedOrderPlannedStartTime:          "PlannedOrderPlannedStartTime",
	PlannedOrderPlannedEndDate:            "PlannedOrderPlannedEndDate",
	PlannedOrderPlannedEndTime:            "PlannedOrderPlannedEndTime",
	LastChangeDateTime:                    "LastChangeDateTime",
	OrderID:                               "OrderID",
	OrderItem:                             "OrderItem",
	ProductBuyer:                          "ProductBuyer",
	ProductSeller:                         "ProductSeller",
	Project:                               "Project",
	Reservation:                           "Reservation",
	ReservationItem:                       "ReservationItem",
	PlannedOrderLongText:                  "PlannedOrderLongText",
	PlannedOrderIsFixed:                   "PlannedOrderIsFixed",
	PlannedOrderBOMIsFixed:                "PlannedOrderBOMIsFixed",
	LastScheduledDate:                     "LastScheduledDate",
	ScheduledBasicEndDate:                 "ScheduledBasicEndDate",
	ScheduledBasicEndTime:                 "ScheduledBasicEndTime",
	ScheduledBasicStartDate:               "ScheduledBasicStartDate",
	ScheduledBasicStartTime:               "ScheduledBasicStartTime",
	SchedulingType:                        "SchedulingType",
	PlannedOrderIsReleased:                "PlannedOrderIsReleased",
	IsMarkedForDeletion:                   "IsMarkedForDeletion",
}

var DataPlatformPlannedOrderItemDatumTableColumns = struct {
	PlannedOrder                          string
	PlannedOrderItem                      string
	Product                               string
	ProductDeliverFromParty               string
	ProductDeliverToParty                 string
	IssuingPlant                          string
	IssuingPlantStorageLocation           string
	ReceivingPlant                        string
	ReceivingPlantStorageLocation         string
	ProductionPlantBusinessPartner        string
	ProductionPlant                       string
	ProductionPlantStorageLocation        string
	BaseUnit                              string
	MRPArea                               string
	MRPController                         string
	PlannedOrderQuantityInBaseUnit        string
	PlannedOrderPlannedScrapQtyInBaseUnit string
	PlannedOrderIssuingUnit               string
	PlannedOrderReceivingUnit             string
	PlannedOrderIssuingQuantity           string
	PlannedOrderReceivingQuantity         string
	PlannedOrderPlannedStartDate          string
	PlannedOrderPlannedStartTime          string
	PlannedOrderPlannedEndDate            string
	PlannedOrderPlannedEndTime            string
	LastChangeDateTime                    string
	OrderID                               string
	OrderItem                             string
	ProductBuyer                          string
	ProductSeller                         string
	Project                               string
	Reservation                           string
	ReservationItem                       string
	PlannedOrderLongText                  string
	PlannedOrderIsFixed                   string
	PlannedOrderBOMIsFixed                string
	LastScheduledDate                     string
	ScheduledBasicEndDate                 string
	ScheduledBasicEndTime                 string
	ScheduledBasicStartDate               string
	ScheduledBasicStartTime               string
	SchedulingType                        string
	PlannedOrderIsReleased                string
	IsMarkedForDeletion                   string
}{
	PlannedOrder:                          "data_platform_planned_order_item_data.PlannedOrder",
	PlannedOrderItem:                      "data_platform_planned_order_item_data.PlannedOrderItem",
	Product:                               "data_platform_planned_order_item_data.Product",
	ProductDeliverFromParty:               "data_platform_planned_order_item_data.ProductDeliverFromParty",
	ProductDeliverToParty:                 "data_platform_planned_order_item_data.ProductDeliverToParty",
	IssuingPlant:                          "data_platform_planned_order_item_data.IssuingPlant",
	IssuingPlantStorageLocation:           "data_platform_planned_order_item_data.IssuingPlantStorageLocation",
	ReceivingPlant:                        "data_platform_planned_order_item_data.ReceivingPlant",
	ReceivingPlantStorageLocation:         "data_platform_planned_order_item_data.ReceivingPlantStorageLocation",
	ProductionPlantBusinessPartner:        "data_platform_planned_order_item_data.ProductionPlantBusinessPartner",
	ProductionPlant:                       "data_platform_planned_order_item_data.ProductionPlant",
	ProductionPlantStorageLocation:        "data_platform_planned_order_item_data.ProductionPlantStorageLocation",
	BaseUnit:                              "data_platform_planned_order_item_data.BaseUnit",
	MRPArea:                               "data_platform_planned_order_item_data.MRPArea",
	MRPController:                         "data_platform_planned_order_item_data.MRPController",
	PlannedOrderQuantityInBaseUnit:        "data_platform_planned_order_item_data.PlannedOrderQuantityInBaseUnit",
	PlannedOrderPlannedScrapQtyInBaseUnit: "data_platform_planned_order_item_data.PlannedOrderPlannedScrapQtyInBaseUnit",
	PlannedOrderIssuingUnit:               "data_platform_planned_order_item_data.PlannedOrderIssuingUnit",
	PlannedOrderReceivingUnit:             "data_platform_planned_order_item_data.PlannedOrderReceivingUnit",
	PlannedOrderIssuingQuantity:           "data_platform_planned_order_item_data.PlannedOrderIssuingQuantity",
	PlannedOrderReceivingQuantity:         "data_platform_planned_order_item_data.PlannedOrderReceivingQuantity",
	PlannedOrderPlannedStartDate:          "data_platform_planned_order_item_data.PlannedOrderPlannedStartDate",
	PlannedOrderPlannedStartTime:          "data_platform_planned_order_item_data.PlannedOrderPlannedStartTime",
	PlannedOrderPlannedEndDate:            "data_platform_planned_order_item_data.PlannedOrderPlannedEndDate",
	PlannedOrderPlannedEndTime:            "data_platform_planned_order_item_data.PlannedOrderPlannedEndTime",
	LastChangeDateTime:                    "data_platform_planned_order_item_data.LastChangeDateTime",
	OrderID:                               "data_platform_planned_order_item_data.OrderID",
	OrderItem:                             "data_platform_planned_order_item_data.OrderItem",
	ProductBuyer:                          "data_platform_planned_order_item_data.ProductBuyer",
	ProductSeller:                         "data_platform_planned_order_item_data.ProductSeller",
	Project:                               "data_platform_planned_order_item_data.Project",
	Reservation:                           "data_platform_planned_order_item_data.Reservation",
	ReservationItem:                       "data_platform_planned_order_item_data.ReservationItem",
	PlannedOrderLongText:                  "data_platform_planned_order_item_data.PlannedOrderLongText",
	PlannedOrderIsFixed:                   "data_platform_planned_order_item_data.PlannedOrderIsFixed",
	PlannedOrderBOMIsFixed:                "data_platform_planned_order_item_data.PlannedOrderBOMIsFixed",
	LastScheduledDate:                     "data_platform_planned_order_item_data.LastScheduledDate",
	ScheduledBasicEndDate:                 "data_platform_planned_order_item_data.ScheduledBasicEndDate",
	ScheduledBasicEndTime:                 "data_platform_planned_order_item_data.ScheduledBasicEndTime",
	ScheduledBasicStartDate:               "data_platform_planned_order_item_data.ScheduledBasicStartDate",
	ScheduledBasicStartTime:               "data_platform_planned_order_item_data.ScheduledBasicStartTime",
	SchedulingType:                        "data_platform_planned_order_item_data.SchedulingType",
	PlannedOrderIsReleased:                "data_platform_planned_order_item_data.PlannedOrderIsReleased",
	IsMarkedForDeletion:                   "data_platform_planned_order_item_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPlannedOrderItemDatumWhere = struct {
	PlannedOrder                          whereHelperint
	PlannedOrderItem                      whereHelperint
	Product                               whereHelpernull_String
	ProductDeliverFromParty               whereHelpernull_Int
	ProductDeliverToParty                 whereHelpernull_Int
	IssuingPlant                          whereHelpernull_String
	IssuingPlantStorageLocation           whereHelpernull_String
	ReceivingPlant                        whereHelpernull_String
	ReceivingPlantStorageLocation         whereHelpernull_String
	ProductionPlantBusinessPartner        whereHelpernull_Int
	ProductionPlant                       whereHelpernull_String
	ProductionPlantStorageLocation        whereHelpernull_String
	BaseUnit                              whereHelpernull_String
	MRPArea                               whereHelpernull_String
	MRPController                         whereHelpernull_String
	PlannedOrderQuantityInBaseUnit        whereHelpernull_Float32
	PlannedOrderPlannedScrapQtyInBaseUnit whereHelpernull_Float32
	PlannedOrderIssuingUnit               whereHelpernull_String
	PlannedOrderReceivingUnit             whereHelpernull_String
	PlannedOrderIssuingQuantity           whereHelpernull_Float32
	PlannedOrderReceivingQuantity         whereHelpernull_Float32
	PlannedOrderPlannedStartDate          whereHelpernull_String
	PlannedOrderPlannedStartTime          whereHelpernull_String
	PlannedOrderPlannedEndDate            whereHelpernull_String
	PlannedOrderPlannedEndTime            whereHelpernull_String
	LastChangeDateTime                    whereHelpernull_String
	OrderID                               whereHelpernull_Int
	OrderItem                             whereHelpernull_Int
	ProductBuyer                          whereHelpernull_Int
	ProductSeller                         whereHelpernull_Int
	Project                               whereHelpernull_String
	Reservation                           whereHelpernull_Int
	ReservationItem                       whereHelpernull_Int
	PlannedOrderLongText                  whereHelpernull_String
	PlannedOrderIsFixed                   whereHelpernull_Bool
	PlannedOrderBOMIsFixed                whereHelpernull_Bool
	LastScheduledDate                     whereHelpernull_String
	ScheduledBasicEndDate                 whereHelpernull_String
	ScheduledBasicEndTime                 whereHelpernull_String
	ScheduledBasicStartDate               whereHelpernull_String
	ScheduledBasicStartTime               whereHelpernull_String
	SchedulingType                        whereHelpernull_String
	PlannedOrderIsReleased                whereHelpernull_Bool
	IsMarkedForDeletion                   whereHelpernull_Bool
}{
	PlannedOrder:                          whereHelperint{field: "`data_platform_planned_order_item_data`.`PlannedOrder`"},
	PlannedOrderItem:                      whereHelperint{field: "`data_platform_planned_order_item_data`.`PlannedOrderItem`"},
	Product:                               whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`Product`"},
	ProductDeliverFromParty:               whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`ProductDeliverFromParty`"},
	ProductDeliverToParty:                 whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`ProductDeliverToParty`"},
	IssuingPlant:                          whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`IssuingPlant`"},
	IssuingPlantStorageLocation:           whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`IssuingPlantStorageLocation`"},
	ReceivingPlant:                        whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ReceivingPlant`"},
	ReceivingPlantStorageLocation:         whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ReceivingPlantStorageLocation`"},
	ProductionPlantBusinessPartner:        whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                       whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ProductionPlant`"},
	ProductionPlantStorageLocation:        whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ProductionPlantStorageLocation`"},
	BaseUnit:                              whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`BaseUnit`"},
	MRPArea:                               whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`MRPArea`"},
	MRPController:                         whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`MRPController`"},
	PlannedOrderQuantityInBaseUnit:        whereHelpernull_Float32{field: "`data_platform_planned_order_item_data`.`PlannedOrderQuantityInBaseUnit`"},
	PlannedOrderPlannedScrapQtyInBaseUnit: whereHelpernull_Float32{field: "`data_platform_planned_order_item_data`.`PlannedOrderPlannedScrapQtyInBaseUnit`"},
	PlannedOrderIssuingUnit:               whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`PlannedOrderIssuingUnit`"},
	PlannedOrderReceivingUnit:             whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`PlannedOrderReceivingUnit`"},
	PlannedOrderIssuingQuantity:           whereHelpernull_Float32{field: "`data_platform_planned_order_item_data`.`PlannedOrderIssuingQuantity`"},
	PlannedOrderReceivingQuantity:         whereHelpernull_Float32{field: "`data_platform_planned_order_item_data`.`PlannedOrderReceivingQuantity`"},
	PlannedOrderPlannedStartDate:          whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`PlannedOrderPlannedStartDate`"},
	PlannedOrderPlannedStartTime:          whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`PlannedOrderPlannedStartTime`"},
	PlannedOrderPlannedEndDate:            whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`PlannedOrderPlannedEndDate`"},
	PlannedOrderPlannedEndTime:            whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`PlannedOrderPlannedEndTime`"},
	LastChangeDateTime:                    whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`LastChangeDateTime`"},
	OrderID:                               whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`OrderID`"},
	OrderItem:                             whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`OrderItem`"},
	ProductBuyer:                          whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`ProductBuyer`"},
	ProductSeller:                         whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`ProductSeller`"},
	Project:                               whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`Project`"},
	Reservation:                           whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`Reservation`"},
	ReservationItem:                       whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`ReservationItem`"},
	PlannedOrderLongText:                  whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`PlannedOrderLongText`"},
	PlannedOrderIsFixed:                   whereHelpernull_Bool{field: "`data_platform_planned_order_item_data`.`PlannedOrderIsFixed`"},
	PlannedOrderBOMIsFixed:                whereHelpernull_Bool{field: "`data_platform_planned_order_item_data`.`PlannedOrderBOMIsFixed`"},
	LastScheduledDate:                     whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`LastScheduledDate`"},
	ScheduledBasicEndDate:                 whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ScheduledBasicEndDate`"},
	ScheduledBasicEndTime:                 whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ScheduledBasicEndTime`"},
	ScheduledBasicStartDate:               whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ScheduledBasicStartDate`"},
	ScheduledBasicStartTime:               whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ScheduledBasicStartTime`"},
	SchedulingType:                        whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`SchedulingType`"},
	PlannedOrderIsReleased:                whereHelpernull_Bool{field: "`data_platform_planned_order_item_data`.`PlannedOrderIsReleased`"},
	IsMarkedForDeletion:                   whereHelpernull_Bool{field: "`data_platform_planned_order_item_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPlannedOrderItemDatumRels is where relationship names are stored.
var DataPlatformPlannedOrderItemDatumRels = struct {
	PlannedOrderDataPlatformPlannedOrderHeaderDatum                    string
	PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum string
	OrderIDDataPlatformOrdersItemDatum                                 string
	ProductDataPlatformProductMasterGeneralDatum                       string
	IssuingPlantDataPlatformPlantGeneralDatum                          string
	ProductDeliverToPartyDataPlatformPlantGeneralDatum                 string
	ProductDeliverToPartyDataPlatformPlantStorageLocationDatum         string
	ProductionPlantDataPlatformPlantGeneralDatum                       string
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum                  string
	PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum   string
	PlannedOrderDataPlatformPlannedOrderComponentData                  string
}{
	PlannedOrderDataPlatformPlannedOrderHeaderDatum:                    "PlannedOrderDataPlatformPlannedOrderHeaderDatum",
	PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum: "PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum",
	OrderIDDataPlatformOrdersItemDatum:                                 "OrderIDDataPlatformOrdersItemDatum",
	ProductDataPlatformProductMasterGeneralDatum:                       "ProductDataPlatformProductMasterGeneralDatum",
	IssuingPlantDataPlatformPlantGeneralDatum:                          "IssuingPlantDataPlatformPlantGeneralDatum",
	ProductDeliverToPartyDataPlatformPlantGeneralDatum:                 "ProductDeliverToPartyDataPlatformPlantGeneralDatum",
	ProductDeliverToPartyDataPlatformPlantStorageLocationDatum:         "ProductDeliverToPartyDataPlatformPlantStorageLocationDatum",
	ProductionPlantDataPlatformPlantGeneralDatum:                       "ProductionPlantDataPlatformPlantGeneralDatum",
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum:                  "BaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum:   "PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum",
	PlannedOrderDataPlatformPlannedOrderComponentData:                  "PlannedOrderDataPlatformPlannedOrderComponentData",
}

// dataPlatformPlannedOrderItemDatumR is where relationships are stored.
type dataPlatformPlannedOrderItemDatumR struct {
	PlannedOrderDataPlatformPlannedOrderHeaderDatum                    *DataPlatformPlannedOrderHeaderDatum        `boil:"PlannedOrderDataPlatformPlannedOrderHeaderDatum" json:"PlannedOrderDataPlatformPlannedOrderHeaderDatum" toml:"PlannedOrderDataPlatformPlannedOrderHeaderDatum" yaml:"PlannedOrderDataPlatformPlannedOrderHeaderDatum"`
	PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum  `boil:"PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	OrderIDDataPlatformOrdersItemDatum                                 *DataPlatformOrdersItemDatum                `boil:"OrderIDDataPlatformOrdersItemDatum" json:"OrderIDDataPlatformOrdersItemDatum" toml:"OrderIDDataPlatformOrdersItemDatum" yaml:"OrderIDDataPlatformOrdersItemDatum"`
	ProductDataPlatformProductMasterGeneralDatum                       *DataPlatformProductMasterGeneralDatum      `boil:"ProductDataPlatformProductMasterGeneralDatum" json:"ProductDataPlatformProductMasterGeneralDatum" toml:"ProductDataPlatformProductMasterGeneralDatum" yaml:"ProductDataPlatformProductMasterGeneralDatum"`
	IssuingPlantDataPlatformPlantGeneralDatum                          *DataPlatformPlantGeneralDatum              `boil:"IssuingPlantDataPlatformPlantGeneralDatum" json:"IssuingPlantDataPlatformPlantGeneralDatum" toml:"IssuingPlantDataPlatformPlantGeneralDatum" yaml:"IssuingPlantDataPlatformPlantGeneralDatum"`
	ProductDeliverToPartyDataPlatformPlantGeneralDatum                 *DataPlatformPlantGeneralDatum              `boil:"ProductDeliverToPartyDataPlatformPlantGeneralDatum" json:"ProductDeliverToPartyDataPlatformPlantGeneralDatum" toml:"ProductDeliverToPartyDataPlatformPlantGeneralDatum" yaml:"ProductDeliverToPartyDataPlatformPlantGeneralDatum"`
	ProductDeliverToPartyDataPlatformPlantStorageLocationDatum         *DataPlatformPlantStorageLocationDatum      `boil:"ProductDeliverToPartyDataPlatformPlantStorageLocationDatum" json:"ProductDeliverToPartyDataPlatformPlantStorageLocationDatum" toml:"ProductDeliverToPartyDataPlatformPlantStorageLocationDatum" yaml:"ProductDeliverToPartyDataPlatformPlantStorageLocationDatum"`
	ProductionPlantDataPlatformPlantGeneralDatum                       *DataPlatformPlantGeneralDatum              `boil:"ProductionPlantDataPlatformPlantGeneralDatum" json:"ProductionPlantDataPlatformPlantGeneralDatum" toml:"ProductionPlantDataPlatformPlantGeneralDatum" yaml:"ProductionPlantDataPlatformPlantGeneralDatum"`
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum                  *DataPlatformQuantityUnitQuantityUnitDatum  `boil:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum   *DataPlatformQuantityUnitQuantityUnitDatum  `boil:"PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	PlannedOrderDataPlatformPlannedOrderComponentData                  DataPlatformPlannedOrderComponentDatumSlice `boil:"PlannedOrderDataPlatformPlannedOrderComponentData" json:"PlannedOrderDataPlatformPlannedOrderComponentData" toml:"PlannedOrderDataPlatformPlannedOrderComponentData" yaml:"PlannedOrderDataPlatformPlannedOrderComponentData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPlannedOrderItemDatumR) NewStruct() *dataPlatformPlannedOrderItemDatumR {
	return &dataPlatformPlannedOrderItemDatumR{}
}

func (r *dataPlatformPlannedOrderItemDatumR) GetPlannedOrderDataPlatformPlannedOrderHeaderDatum() *DataPlatformPlannedOrderHeaderDatum {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderHeaderDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetPlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetOrderIDDataPlatformOrdersItemDatum() *DataPlatformOrdersItemDatum {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersItemDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetProductDataPlatformProductMasterGeneralDatum() *DataPlatformProductMasterGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformProductMasterGeneralDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetIssuingPlantDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.IssuingPlantDataPlatformPlantGeneralDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetProductDeliverToPartyDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductDeliverToPartyDataPlatformPlantGeneralDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetProductDeliverToPartyDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.ProductDeliverToPartyDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetProductionPlantDataPlatformPlantGeneralDatum() *DataPlatformPlantGeneralDatum {
	if r == nil {
		return nil
	}
	return r.ProductionPlantDataPlatformPlantGeneralDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetPlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetPlannedOrderDataPlatformPlannedOrderComponentData() DataPlatformPlannedOrderComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderComponentData
}

// dataPlatformPlannedOrderItemDatumL is where Load methods for each relationship are stored.
type dataPlatformPlannedOrderItemDatumL struct{}

var (
	dataPlatformPlannedOrderItemDatumAllColumns            = []string{"PlannedOrder", "PlannedOrderItem", "Product", "ProductDeliverFromParty", "ProductDeliverToParty", "IssuingPlant", "IssuingPlantStorageLocation", "ReceivingPlant", "ReceivingPlantStorageLocation", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantStorageLocation", "BaseUnit", "MRPArea", "MRPController", "PlannedOrderQuantityInBaseUnit", "PlannedOrderPlannedScrapQtyInBaseUnit", "PlannedOrderIssuingUnit", "PlannedOrderReceivingUnit", "PlannedOrderIssuingQuantity", "PlannedOrderReceivingQuantity", "PlannedOrderPlannedStartDate", "PlannedOrderPlannedStartTime", "PlannedOrderPlannedEndDate", "PlannedOrderPlannedEndTime", "LastChangeDateTime", "OrderID", "OrderItem", "ProductBuyer", "ProductSeller", "Project", "Reservation", "ReservationItem", "PlannedOrderLongText", "PlannedOrderIsFixed", "PlannedOrderBOMIsFixed", "LastScheduledDate", "ScheduledBasicEndDate", "ScheduledBasicEndTime", "ScheduledBasicStartDate", "ScheduledBasicStartTime", "SchedulingType", "PlannedOrderIsReleased", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderItemDatumColumnsWithoutDefault = []string{"PlannedOrder", "PlannedOrderItem", "Product", "ProductDeliverFromParty", "ProductDeliverToParty", "IssuingPlant", "IssuingPlantStorageLocation", "ReceivingPlant", "ReceivingPlantStorageLocation", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantStorageLocation", "BaseUnit", "MRPArea", "MRPController", "PlannedOrderQuantityInBaseUnit", "PlannedOrderPlannedScrapQtyInBaseUnit", "PlannedOrderIssuingUnit", "PlannedOrderReceivingUnit", "PlannedOrderIssuingQuantity", "PlannedOrderReceivingQuantity", "PlannedOrderPlannedStartDate", "PlannedOrderPlannedStartTime", "PlannedOrderPlannedEndDate", "PlannedOrderPlannedEndTime", "LastChangeDateTime", "OrderID", "OrderItem", "ProductBuyer", "ProductSeller", "Project", "Reservation", "ReservationItem", "PlannedOrderLongText", "PlannedOrderIsFixed", "PlannedOrderBOMIsFixed", "LastScheduledDate", "ScheduledBasicEndDate", "ScheduledBasicEndTime", "ScheduledBasicStartDate", "ScheduledBasicStartTime", "SchedulingType", "PlannedOrderIsReleased", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderItemDatumColumnsWithDefault    = []string{}
	dataPlatformPlannedOrderItemDatumPrimaryKeyColumns     = []string{"PlannedOrder", "PlannedOrderItem"}
	dataPlatformPlannedOrderItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPlannedOrderItemDatumSlice is an alias for a slice of pointers to DataPlatformPlannedOrderItemDatum.
	// This should almost always be used instead of []DataPlatformPlannedOrderItemDatum.
	DataPlatformPlannedOrderItemDatumSlice []*DataPlatformPlannedOrderItemDatum

	dataPlatformPlannedOrderItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPlannedOrderItemDatumType                 = reflect.TypeOf(&DataPlatformPlannedOrderItemDatum{})
	dataPlatformPlannedOrderItemDatumMapping              = queries.MakeStructMapping(dataPlatformPlannedOrderItemDatumType)
	dataPlatformPlannedOrderItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns)
	dataPlatformPlannedOrderItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPlannedOrderItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPlannedOrderItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPlannedOrderItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPlannedOrderItemDatum record from the query.
func (q dataPlatformPlannedOrderItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPlannedOrderItemDatum, error) {
	o := &DataPlatformPlannedOrderItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_planned_order_item_data")
	}

	return o, nil
}

// All returns all DataPlatformPlannedOrderItemDatum records from the query.
func (q dataPlatformPlannedOrderItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPlannedOrderItemDatumSlice, error) {
	var o []*DataPlatformPlannedOrderItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPlannedOrderItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPlannedOrderItemDatum records in the query.
func (q dataPlatformPlannedOrderItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_planned_order_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPlannedOrderItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_planned_order_item_data exists")
	}

	return count > 0, nil
}

// PlannedOrderDataPlatformPlannedOrderHeaderDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) PlannedOrderDataPlatformPlannedOrderHeaderDatum(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PlannedOrder` = ?", o.PlannedOrder),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlannedOrderHeaderData(queryMods...)
}

// PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.PlannedOrderReceivingUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// OrderIDDataPlatformOrdersItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) OrderIDDataPlatformOrdersItemDatum(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersItemData(queryMods...)
}

// ProductDataPlatformProductMasterGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) ProductDataPlatformProductMasterGeneralDatum(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Product` = ?", o.Product),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductMasterGeneralData(queryMods...)
}

// IssuingPlantDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) IssuingPlantDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Plant` = ?", o.IssuingPlant),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// ProductDeliverToPartyDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) ProductDeliverToPartyDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.ProductDeliverToParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// ProductDeliverToPartyDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) ProductDeliverToPartyDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.ProductDeliverToParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// ProductionPlantDataPlatformPlantGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) ProductionPlantDataPlatformPlantGeneralDatum(mods ...qm.QueryMod) dataPlatformPlantGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Plant` = ?", o.ProductionPlant),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantGeneralData(queryMods...)
}

// BaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) BaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.BaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.PlannedOrderIssuingUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// PlannedOrderDataPlatformPlannedOrderComponentData retrieves all the data_platform_planned_order_component_datum's DataPlatformPlannedOrderComponentData with an executor via PlannedOrder column.
func (o *DataPlatformPlannedOrderItemDatum) PlannedOrderDataPlatformPlannedOrderComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_component_data`.`PlannedOrder`=?", o.PlannedOrder),
	)

	return DataPlatformPlannedOrderComponentData(queryMods...)
}

// LoadPlannedOrderDataPlatformPlannedOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadPlannedOrderDataPlatformPlannedOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.PlannedOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_data`),
		qm.WhereIn(`data_platform_planned_order_header_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlannedOrderHeaderDatum")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlannedOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_planned_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderDataPlatformPlannedOrderHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadPlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.PlannedOrderReceivingUnit) {
			args = append(args, object.PlannedOrderReceivingUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlannedOrderReceivingUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PlannedOrderReceivingUnit) {
				args = append(args, obj.PlannedOrderReceivingUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlannedOrderReceivingUnit, foreign.QuantityUnit) {
				local.R.PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadOrderIDDataPlatformOrdersItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersItemDatum")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDDataPlatformOrdersItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDDataPlatformOrdersItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductDataPlatformProductMasterGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadProductDataPlatformProductMasterGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.Product) {
			args = append(args, object.Product)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Product) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Product) {
				args = append(args, obj.Product)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_general_data`),
		qm.WhereIn(`data_platform_product_master_general_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductMasterGeneralDatum")
	}

	var resultSlice []*DataPlatformProductMasterGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductMasterGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_master_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDataPlatformProductMasterGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Product, foreign.Product) {
				local.R.ProductDataPlatformProductMasterGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadIssuingPlantDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadIssuingPlantDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.IssuingPlant) {
			args = append(args, object.IssuingPlant)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.IssuingPlant) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.IssuingPlant) {
				args = append(args, obj.IssuingPlant)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.Plant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.IssuingPlantDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.IssuingPlant, foreign.Plant) {
				local.R.IssuingPlantDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductDeliverToPartyDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadProductDeliverToPartyDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.ProductDeliverToParty) {
			args = append(args, object.ProductDeliverToParty)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductDeliverToParty) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductDeliverToParty) {
				args = append(args, obj.ProductDeliverToParty)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDeliverToPartyDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductDeliverToParty, foreign.BusinessPartner) {
				local.R.ProductDeliverToPartyDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductDeliverToPartyDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadProductDeliverToPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.ProductDeliverToParty) {
			args = append(args, object.ProductDeliverToParty)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductDeliverToParty) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductDeliverToParty) {
				args = append(args, obj.ProductDeliverToParty)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDeliverToPartyDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductDeliverToParty, foreign.BusinessPartner) {
				local.R.ProductDeliverToPartyDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionPlantDataPlatformPlantGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadProductionPlantDataPlatformPlantGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.ProductionPlant) {
			args = append(args, object.ProductionPlant)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionPlant) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductionPlant) {
				args = append(args, obj.ProductionPlant)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_general_data`),
		qm.WhereIn(`data_platform_plant_general_data.Plant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantGeneralDatum")
	}

	var resultSlice []*DataPlatformPlantGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionPlantDataPlatformPlantGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductionPlant, foreign.Plant) {
				local.R.ProductionPlantDataPlatformPlantGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.BaseUnit) {
			args = append(args, object.BaseUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BaseUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BaseUnit) {
				args = append(args, obj.BaseUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BaseUnit, foreign.QuantityUnit) {
				local.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadPlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.PlannedOrderIssuingUnit) {
			args = append(args, object.PlannedOrderIssuingUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlannedOrderIssuingUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PlannedOrderIssuingUnit) {
				args = append(args, obj.PlannedOrderIssuingUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlannedOrderIssuingUnit, foreign.QuantityUnit) {
				local.R.PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDataPlatformPlannedOrderComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadPlannedOrderDataPlatformPlannedOrderComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.PlannedOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_component_data`),
		qm.WhereIn(`data_platform_planned_order_component_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_component_data")
	}

	var resultSlice []*DataPlatformPlannedOrderComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_component_data")
	}

	if singular {
		object.R.PlannedOrderDataPlatformPlannedOrderComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderComponentData = append(local.R.PlannedOrderDataPlatformPlannedOrderComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// SetPlannedOrderDataPlatformPlannedOrderHeaderDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.PlannedOrderDataPlatformPlannedOrderHeaderDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetPlannedOrderDataPlatformPlannedOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlannedOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PlannedOrder, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlannedOrder = related.PlannedOrder
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			PlannedOrderDataPlatformPlannedOrderHeaderDatum: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderHeaderDatum = related
	}

	return nil
}

// SetPlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetPlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrderReceivingUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlannedOrderReceivingUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemovePlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemovePlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.PlannedOrderReceivingUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PlannedOrderReceivingUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PlannedOrderReceivingUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOrderIDDataPlatformOrdersItemDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.OrderID)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			OrderIDDataPlatformOrdersItemDatum: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersItemDatum = related
	}

	return nil
}

// RemoveOrderIDDataPlatformOrdersItemDatum relationship.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformOrdersItemDatum) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderIDDataPlatformOrdersItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductDataPlatformProductMasterGeneralDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetProductDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductMasterGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Product, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Product, related.Product)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			ProductDataPlatformProductMasterGeneralDatum: related,
		}
	} else {
		o.R.ProductDataPlatformProductMasterGeneralDatum = related
	}

	return nil
}

// RemoveProductDataPlatformProductMasterGeneralDatum relationship.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveProductDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductMasterGeneralDatum) error {
	var err error

	queries.SetScanner(&o.Product, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Product")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductDataPlatformProductMasterGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetIssuingPlantDataPlatformPlantGeneralDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.IssuingPlantDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetIssuingPlantDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"IssuingPlant"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Plant, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.IssuingPlant, related.Plant)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			IssuingPlantDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.IssuingPlantDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// RemoveIssuingPlantDataPlatformPlantGeneralDatum relationship.
// Sets o.R.IssuingPlantDataPlatformPlantGeneralDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveIssuingPlantDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPlantGeneralDatum) error {
	var err error

	queries.SetScanner(&o.IssuingPlant, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("IssuingPlant")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.IssuingPlantDataPlatformPlantGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductDeliverToPartyDataPlatformPlantGeneralDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.ProductDeliverToPartyDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetProductDeliverToPartyDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliverToParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductDeliverToParty, related.BusinessPartner)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			ProductDeliverToPartyDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.ProductDeliverToPartyDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// RemoveProductDeliverToPartyDataPlatformPlantGeneralDatum relationship.
// Sets o.R.ProductDeliverToPartyDataPlatformPlantGeneralDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveProductDeliverToPartyDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPlantGeneralDatum) error {
	var err error

	queries.SetScanner(&o.ProductDeliverToParty, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductDeliverToParty")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductDeliverToPartyDataPlatformPlantGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductDeliverToPartyDataPlatformPlantStorageLocationDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.ProductDeliverToPartyDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetProductDeliverToPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliverToParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductDeliverToParty, related.BusinessPartner)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			ProductDeliverToPartyDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.ProductDeliverToPartyDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// RemoveProductDeliverToPartyDataPlatformPlantStorageLocationDatum relationship.
// Sets o.R.ProductDeliverToPartyDataPlatformPlantStorageLocationDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveProductDeliverToPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPlantStorageLocationDatum) error {
	var err error

	queries.SetScanner(&o.ProductDeliverToParty, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductDeliverToParty")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductDeliverToPartyDataPlatformPlantStorageLocationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductionPlantDataPlatformPlantGeneralDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.ProductionPlantDataPlatformPlantGeneralDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetProductionPlantDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionPlant"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Plant, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductionPlant, related.Plant)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			ProductionPlantDataPlatformPlantGeneralDatum: related,
		}
	} else {
		o.R.ProductionPlantDataPlatformPlantGeneralDatum = related
	}

	return nil
}

// RemoveProductionPlantDataPlatformPlantGeneralDatum relationship.
// Sets o.R.ProductionPlantDataPlatformPlantGeneralDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveProductionPlantDataPlatformPlantGeneralDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPlantGeneralDatum) error {
	var err error

	queries.SetScanner(&o.ProductionPlant, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductionPlant")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductionPlantDataPlatformPlantGeneralDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BaseUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			BaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveBaseUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.BaseUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BaseUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetPlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrderIssuingUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlannedOrderIssuingUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemovePlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemovePlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.PlannedOrderIssuingUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("PlannedOrderIssuingUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PlannedOrderIssuingUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// AddPlannedOrderDataPlatformPlannedOrderComponentData adds the given related objects to the existing relationships
// of the data_platform_planned_order_item_datum, optionally inserting them as new records.
// Appends related to o.R.PlannedOrderDataPlatformPlannedOrderComponentData.
func (o *DataPlatformPlannedOrderItemDatum) AddPlannedOrderDataPlatformPlannedOrderComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlannedOrder = o.PlannedOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PlannedOrder, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlannedOrder = o.PlannedOrder
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			PlannedOrderDataPlatformPlannedOrderComponentData: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderComponentData = append(o.R.PlannedOrderDataPlatformPlannedOrderComponentData, related...)
	}

	return nil
}

// DataPlatformPlannedOrderItemData retrieves all the records using an executor.
func DataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_planned_order_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_planned_order_item_data`.*"})
	}

	return dataPlatformPlannedOrderItemDatumQuery{q}
}

// FindDataPlatformPlannedOrderItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPlannedOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, plannedOrder int, plannedOrderItem int, selectCols ...string) (*DataPlatformPlannedOrderItemDatum, error) {
	dataPlatformPlannedOrderItemDatumObj := &DataPlatformPlannedOrderItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_planned_order_item_data` where `PlannedOrder`=? AND `PlannedOrderItem`=?", sel,
	)

	q := queries.Raw(query, plannedOrder, plannedOrderItem)

	err := q.Bind(ctx, exec, dataPlatformPlannedOrderItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_planned_order_item_data")
	}

	return dataPlatformPlannedOrderItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPlannedOrderItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPlannedOrderItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderItemDatumInsertCache[key]
	dataPlatformPlannedOrderItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPlannedOrderItemDatumAllColumns,
			dataPlatformPlannedOrderItemDatumColumnsWithDefault,
			dataPlatformPlannedOrderItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_planned_order_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_planned_order_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_planned_order_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_planned_order_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PlannedOrder,
		o.PlannedOrderItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderItemDatumInsertCacheMut.Lock()
		dataPlatformPlannedOrderItemDatumInsertCache[key] = cache
		dataPlatformPlannedOrderItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPlannedOrderItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPlannedOrderItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPlannedOrderItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderItemDatumUpdateCache[key]
	dataPlatformPlannedOrderItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPlannedOrderItemDatumAllColumns,
			dataPlatformPlannedOrderItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_planned_order_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, append(wl, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_planned_order_item_data row")
	}

	if !cached {
		dataPlatformPlannedOrderItemDatumUpdateCacheMut.Lock()
		dataPlatformPlannedOrderItemDatumUpdateCache[key] = cache
		dataPlatformPlannedOrderItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPlannedOrderItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_planned_order_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPlannedOrderItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPlannedOrderItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformPlannedOrderItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPlannedOrderItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPlannedOrderItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPlannedOrderItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderItemDatumUpsertCache[key]
	dataPlatformPlannedOrderItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPlannedOrderItemDatumAllColumns,
			dataPlatformPlannedOrderItemDatumColumnsWithDefault,
			dataPlatformPlannedOrderItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPlannedOrderItemDatumAllColumns,
			dataPlatformPlannedOrderItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_planned_order_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_planned_order_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_planned_order_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_planned_order_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_planned_order_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderItemDatumUpsertCacheMut.Lock()
		dataPlatformPlannedOrderItemDatumUpsertCache[key] = cache
		dataPlatformPlannedOrderItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPlannedOrderItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPlannedOrderItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPlannedOrderItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPlannedOrderItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_planned_order_item_data` WHERE `PlannedOrder`=? AND `PlannedOrderItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_planned_order_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPlannedOrderItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPlannedOrderItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_planned_order_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPlannedOrderItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_planned_order_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPlannedOrderItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPlannedOrderItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPlannedOrderItemDatum(ctx, exec, o.PlannedOrder, o.PlannedOrderItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPlannedOrderItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPlannedOrderItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_planned_order_item_data`.* FROM `data_platform_planned_order_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPlannedOrderItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPlannedOrderItemDatumExists checks if the DataPlatformPlannedOrderItemDatum row exists.
func DataPlatformPlannedOrderItemDatumExists(ctx context.Context, exec boil.ContextExecutor, plannedOrder int, plannedOrderItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_planned_order_item_data` where `PlannedOrder`=? AND `PlannedOrderItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, plannedOrder, plannedOrderItem)
	}
	row := exec.QueryRowContext(ctx, sql, plannedOrder, plannedOrderItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_planned_order_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPlannedOrderItemDatum row exists.
func (o *DataPlatformPlannedOrderItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPlannedOrderItemDatumExists(ctx, exec, o.PlannedOrder, o.PlannedOrderItem)
}
