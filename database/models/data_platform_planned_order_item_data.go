// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPlannedOrderItemDatum is an object representing the database table.
type DataPlatformPlannedOrderItemDatum struct {
	PlannedOrder                             int          `boil:"PlannedOrder" json:"PlannedOrder" toml:"PlannedOrder" yaml:"PlannedOrder"`
	PlannedOrderItem                         int          `boil:"PlannedOrderItem" json:"PlannedOrderItem" toml:"PlannedOrderItem" yaml:"PlannedOrderItem"`
	PrecedingPlannedOrderItem                null.Int     `boil:"PrecedingPlannedOrderItem" json:"PrecedingPlannedOrderItem,omitempty" toml:"PrecedingPlannedOrderItem" yaml:"PrecedingPlannedOrderItem,omitempty"`
	FollowingPlannedOrderItem                null.Int     `boil:"FollowingPlannedOrderItem" json:"FollowingPlannedOrderItem,omitempty" toml:"FollowingPlannedOrderItem" yaml:"FollowingPlannedOrderItem,omitempty"`
	SupplyChainRelationshipID                int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	SupplyChainRelationshipDeliveryID        int          `boil:"SupplyChainRelationshipDeliveryID" json:"SupplyChainRelationshipDeliveryID" toml:"SupplyChainRelationshipDeliveryID" yaml:"SupplyChainRelationshipDeliveryID"`
	SupplyChainRelationshipDeliveryPlantID   int          `boil:"SupplyChainRelationshipDeliveryPlantID" json:"SupplyChainRelationshipDeliveryPlantID" toml:"SupplyChainRelationshipDeliveryPlantID" yaml:"SupplyChainRelationshipDeliveryPlantID"`
	SupplyChainRelationshipProductionPlantID null.Int     `boil:"SupplyChainRelationshipProductionPlantID" json:"SupplyChainRelationshipProductionPlantID,omitempty" toml:"SupplyChainRelationshipProductionPlantID" yaml:"SupplyChainRelationshipProductionPlantID,omitempty"`
	SupplyChainRelationshipStockConfPlantID  int          `boil:"SupplyChainRelationshipStockConfPlantID" json:"SupplyChainRelationshipStockConfPlantID" toml:"SupplyChainRelationshipStockConfPlantID" yaml:"SupplyChainRelationshipStockConfPlantID"`
	PlannedOrderType                         string       `boil:"PlannedOrderType" json:"PlannedOrderType" toml:"PlannedOrderType" yaml:"PlannedOrderType"`
	Product                                  string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	Buyer                                    int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                   int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	DeliverToParty                           int          `boil:"DeliverToParty" json:"DeliverToParty" toml:"DeliverToParty" yaml:"DeliverToParty"`
	DeliverToPlant                           string       `boil:"DeliverToPlant" json:"DeliverToPlant" toml:"DeliverToPlant" yaml:"DeliverToPlant"`
	DeliverToPlantStorageLocation            null.String  `boil:"DeliverToPlantStorageLocation" json:"DeliverToPlantStorageLocation,omitempty" toml:"DeliverToPlantStorageLocation" yaml:"DeliverToPlantStorageLocation,omitempty"`
	DeliverFromParty                         int          `boil:"DeliverFromParty" json:"DeliverFromParty" toml:"DeliverFromParty" yaml:"DeliverFromParty"`
	DeliverFromPlant                         string       `boil:"DeliverFromPlant" json:"DeliverFromPlant" toml:"DeliverFromPlant" yaml:"DeliverFromPlant"`
	DeliverFromPlantStorageLocation          null.String  `boil:"DeliverFromPlantStorageLocation" json:"DeliverFromPlantStorageLocation,omitempty" toml:"DeliverFromPlantStorageLocation" yaml:"DeliverFromPlantStorageLocation,omitempty"`
	ProductionPlantBusinessPartner           null.Int     `boil:"ProductionPlantBusinessPartner" json:"ProductionPlantBusinessPartner,omitempty" toml:"ProductionPlantBusinessPartner" yaml:"ProductionPlantBusinessPartner,omitempty"`
	ProductionPlant                          null.String  `boil:"ProductionPlant" json:"ProductionPlant,omitempty" toml:"ProductionPlant" yaml:"ProductionPlant,omitempty"`
	ProductionPlantStorageLocation           null.String  `boil:"ProductionPlantStorageLocation" json:"ProductionPlantStorageLocation,omitempty" toml:"ProductionPlantStorageLocation" yaml:"ProductionPlantStorageLocation,omitempty"`
	ProductBaseUnit                          string       `boil:"ProductBaseUnit" json:"ProductBaseUnit" toml:"ProductBaseUnit" yaml:"ProductBaseUnit"`
	ProductDeliveryUnit                      string       `boil:"ProductDeliveryUnit" json:"ProductDeliveryUnit" toml:"ProductDeliveryUnit" yaml:"ProductDeliveryUnit"`
	ProductProductionUnit                    null.String  `boil:"ProductProductionUnit" json:"ProductProductionUnit,omitempty" toml:"ProductProductionUnit" yaml:"ProductProductionUnit,omitempty"`
	MRPArea                                  null.String  `boil:"MRPArea" json:"MRPArea,omitempty" toml:"MRPArea" yaml:"MRPArea,omitempty"`
	MRPController                            null.String  `boil:"MRPController" json:"MRPController,omitempty" toml:"MRPController" yaml:"MRPController,omitempty"`
	ProductionVersion                        null.Int     `boil:"ProductionVersion" json:"ProductionVersion,omitempty" toml:"ProductionVersion" yaml:"ProductionVersion,omitempty"`
	ProductionVersionItem                    null.Int     `boil:"ProductionVersionItem" json:"ProductionVersionItem,omitempty" toml:"ProductionVersionItem" yaml:"ProductionVersionItem,omitempty"`
	StockConfirmationBusinessPartner         int          `boil:"StockConfirmationBusinessPartner" json:"StockConfirmationBusinessPartner" toml:"StockConfirmationBusinessPartner" yaml:"StockConfirmationBusinessPartner"`
	StockConfirmationPlant                   string       `boil:"StockConfirmationPlant" json:"StockConfirmationPlant" toml:"StockConfirmationPlant" yaml:"StockConfirmationPlant"`
	StockConfirmationPlantStorageLocation    null.String  `boil:"StockConfirmationPlantStorageLocation" json:"StockConfirmationPlantStorageLocation,omitempty" toml:"StockConfirmationPlantStorageLocation" yaml:"StockConfirmationPlantStorageLocation,omitempty"`
	BillOfMaterial                           null.Int     `boil:"BillOfMaterial" json:"BillOfMaterial,omitempty" toml:"BillOfMaterial" yaml:"BillOfMaterial,omitempty"`
	Operations                               null.Int     `boil:"Operations" json:"Operations,omitempty" toml:"Operations" yaml:"Operations,omitempty"`
	PlannedOrderQuantityInBaseUnit           float32      `boil:"PlannedOrderQuantityInBaseUnit" json:"PlannedOrderQuantityInBaseUnit" toml:"PlannedOrderQuantityInBaseUnit" yaml:"PlannedOrderQuantityInBaseUnit"`
	PlannedOrderQuantityInDeliveryUnit       float32      `boil:"PlannedOrderQuantityInDeliveryUnit" json:"PlannedOrderQuantityInDeliveryUnit" toml:"PlannedOrderQuantityInDeliveryUnit" yaml:"PlannedOrderQuantityInDeliveryUnit"`
	PlannedOrderQuantityInProductionUnit     null.Float32 `boil:"PlannedOrderQuantityInProductionUnit" json:"PlannedOrderQuantityInProductionUnit,omitempty" toml:"PlannedOrderQuantityInProductionUnit" yaml:"PlannedOrderQuantityInProductionUnit,omitempty"`
	PlannedOrderPlannedScrapQtyInBaseUnit    null.Float32 `boil:"PlannedOrderPlannedScrapQtyInBaseUnit" json:"PlannedOrderPlannedScrapQtyInBaseUnit,omitempty" toml:"PlannedOrderPlannedScrapQtyInBaseUnit" yaml:"PlannedOrderPlannedScrapQtyInBaseUnit,omitempty"`
	PlannedOrderMinimumLotSizeQuantity       float32      `boil:"PlannedOrderMinimumLotSizeQuantity" json:"PlannedOrderMinimumLotSizeQuantity" toml:"PlannedOrderMinimumLotSizeQuantity" yaml:"PlannedOrderMinimumLotSizeQuantity"`
	PlannedOrderStandardLotSizeQuantity      float32      `boil:"PlannedOrderStandardLotSizeQuantity" json:"PlannedOrderStandardLotSizeQuantity" toml:"PlannedOrderStandardLotSizeQuantity" yaml:"PlannedOrderStandardLotSizeQuantity"`
	PlannedOrderMaximumLotSizeQuantity       float32      `boil:"PlannedOrderMaximumLotSizeQuantity" json:"PlannedOrderMaximumLotSizeQuantity" toml:"PlannedOrderMaximumLotSizeQuantity" yaml:"PlannedOrderMaximumLotSizeQuantity"`
	PlannedOrderLotSizeRoundingQuantity      null.Float32 `boil:"PlannedOrderLotSizeRoundingQuantity" json:"PlannedOrderLotSizeRoundingQuantity,omitempty" toml:"PlannedOrderLotSizeRoundingQuantity" yaml:"PlannedOrderLotSizeRoundingQuantity,omitempty"`
	PlannedOrderLotSizeIsFixed               null.Bool    `boil:"PlannedOrderLotSizeIsFixed" json:"PlannedOrderLotSizeIsFixed,omitempty" toml:"PlannedOrderLotSizeIsFixed" yaml:"PlannedOrderLotSizeIsFixed,omitempty"`
	PlannedOrderPlannedStartDate             string       `boil:"PlannedOrderPlannedStartDate" json:"PlannedOrderPlannedStartDate" toml:"PlannedOrderPlannedStartDate" yaml:"PlannedOrderPlannedStartDate"`
	PlannedOrderPlannedStartTime             string       `boil:"PlannedOrderPlannedStartTime" json:"PlannedOrderPlannedStartTime" toml:"PlannedOrderPlannedStartTime" yaml:"PlannedOrderPlannedStartTime"`
	PlannedOrderPlannedEndDate               string       `boil:"PlannedOrderPlannedEndDate" json:"PlannedOrderPlannedEndDate" toml:"PlannedOrderPlannedEndDate" yaml:"PlannedOrderPlannedEndDate"`
	PlannedOrderPlannedEndTime               string       `boil:"PlannedOrderPlannedEndTime" json:"PlannedOrderPlannedEndTime" toml:"PlannedOrderPlannedEndTime" yaml:"PlannedOrderPlannedEndTime"`
	OrderID                                  null.Int     `boil:"OrderID" json:"OrderID,omitempty" toml:"OrderID" yaml:"OrderID,omitempty"`
	OrderItem                                null.Int     `boil:"OrderItem" json:"OrderItem,omitempty" toml:"OrderItem" yaml:"OrderItem,omitempty"`
	Project                                  null.Int     `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	WBSElement                               null.Int     `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	Reservation                              null.Int     `boil:"Reservation" json:"Reservation,omitempty" toml:"Reservation" yaml:"Reservation,omitempty"`
	ReservationItem                          null.Int     `boil:"ReservationItem" json:"ReservationItem,omitempty" toml:"ReservationItem" yaml:"ReservationItem,omitempty"`
	PlannedOrderLongText                     null.String  `boil:"PlannedOrderLongText" json:"PlannedOrderLongText,omitempty" toml:"PlannedOrderLongText" yaml:"PlannedOrderLongText,omitempty"`
	LastScheduledDate                        null.String  `boil:"LastScheduledDate" json:"LastScheduledDate,omitempty" toml:"LastScheduledDate" yaml:"LastScheduledDate,omitempty"`
	ScheduledBasicEndDate                    null.String  `boil:"ScheduledBasicEndDate" json:"ScheduledBasicEndDate,omitempty" toml:"ScheduledBasicEndDate" yaml:"ScheduledBasicEndDate,omitempty"`
	ScheduledBasicEndTime                    null.String  `boil:"ScheduledBasicEndTime" json:"ScheduledBasicEndTime,omitempty" toml:"ScheduledBasicEndTime" yaml:"ScheduledBasicEndTime,omitempty"`
	ScheduledBasicStartDate                  null.String  `boil:"ScheduledBasicStartDate" json:"ScheduledBasicStartDate,omitempty" toml:"ScheduledBasicStartDate" yaml:"ScheduledBasicStartDate,omitempty"`
	ScheduledBasicStartTime                  null.String  `boil:"ScheduledBasicStartTime" json:"ScheduledBasicStartTime,omitempty" toml:"ScheduledBasicStartTime" yaml:"ScheduledBasicStartTime,omitempty"`
	SchedulingType                           null.String  `boil:"SchedulingType" json:"SchedulingType,omitempty" toml:"SchedulingType" yaml:"SchedulingType,omitempty"`
	PlannedOrderIsReleased                   null.Bool    `boil:"PlannedOrderIsReleased" json:"PlannedOrderIsReleased,omitempty" toml:"PlannedOrderIsReleased" yaml:"PlannedOrderIsReleased,omitempty"`
	CreationDate                             string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime                             string       `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate                           string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime                           string       `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsMarkedForDeletion                      null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformPlannedOrderItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPlannedOrderItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPlannedOrderItemDatumColumns = struct {
	PlannedOrder                             string
	PlannedOrderItem                         string
	PrecedingPlannedOrderItem                string
	FollowingPlannedOrderItem                string
	SupplyChainRelationshipID                string
	SupplyChainRelationshipDeliveryID        string
	SupplyChainRelationshipDeliveryPlantID   string
	SupplyChainRelationshipProductionPlantID string
	SupplyChainRelationshipStockConfPlantID  string
	PlannedOrderType                         string
	Product                                  string
	Buyer                                    string
	Seller                                   string
	DeliverToParty                           string
	DeliverToPlant                           string
	DeliverToPlantStorageLocation            string
	DeliverFromParty                         string
	DeliverFromPlant                         string
	DeliverFromPlantStorageLocation          string
	ProductionPlantBusinessPartner           string
	ProductionPlant                          string
	ProductionPlantStorageLocation           string
	ProductBaseUnit                          string
	ProductDeliveryUnit                      string
	ProductProductionUnit                    string
	MRPArea                                  string
	MRPController                            string
	ProductionVersion                        string
	ProductionVersionItem                    string
	StockConfirmationBusinessPartner         string
	StockConfirmationPlant                   string
	StockConfirmationPlantStorageLocation    string
	BillOfMaterial                           string
	Operations                               string
	PlannedOrderQuantityInBaseUnit           string
	PlannedOrderQuantityInDeliveryUnit       string
	PlannedOrderQuantityInProductionUnit     string
	PlannedOrderPlannedScrapQtyInBaseUnit    string
	PlannedOrderMinimumLotSizeQuantity       string
	PlannedOrderStandardLotSizeQuantity      string
	PlannedOrderMaximumLotSizeQuantity       string
	PlannedOrderLotSizeRoundingQuantity      string
	PlannedOrderLotSizeIsFixed               string
	PlannedOrderPlannedStartDate             string
	PlannedOrderPlannedStartTime             string
	PlannedOrderPlannedEndDate               string
	PlannedOrderPlannedEndTime               string
	OrderID                                  string
	OrderItem                                string
	Project                                  string
	WBSElement                               string
	Reservation                              string
	ReservationItem                          string
	PlannedOrderLongText                     string
	LastScheduledDate                        string
	ScheduledBasicEndDate                    string
	ScheduledBasicEndTime                    string
	ScheduledBasicStartDate                  string
	ScheduledBasicStartTime                  string
	SchedulingType                           string
	PlannedOrderIsReleased                   string
	CreationDate                             string
	CreationTime                             string
	LastChangeDate                           string
	LastChangeTime                           string
	IsMarkedForDeletion                      string
}{
	PlannedOrder:                             "PlannedOrder",
	PlannedOrderItem:                         "PlannedOrderItem",
	PrecedingPlannedOrderItem:                "PrecedingPlannedOrderItem",
	FollowingPlannedOrderItem:                "FollowingPlannedOrderItem",
	SupplyChainRelationshipID:                "SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:        "SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:   "SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID: "SupplyChainRelationshipProductionPlantID",
	SupplyChainRelationshipStockConfPlantID:  "SupplyChainRelationshipStockConfPlantID",
	PlannedOrderType:                         "PlannedOrderType",
	Product:                                  "Product",
	Buyer:                                    "Buyer",
	Seller:                                   "Seller",
	DeliverToParty:                           "DeliverToParty",
	DeliverToPlant:                           "DeliverToPlant",
	DeliverToPlantStorageLocation:            "DeliverToPlantStorageLocation",
	DeliverFromParty:                         "DeliverFromParty",
	DeliverFromPlant:                         "DeliverFromPlant",
	DeliverFromPlantStorageLocation:          "DeliverFromPlantStorageLocation",
	ProductionPlantBusinessPartner:           "ProductionPlantBusinessPartner",
	ProductionPlant:                          "ProductionPlant",
	ProductionPlantStorageLocation:           "ProductionPlantStorageLocation",
	ProductBaseUnit:                          "ProductBaseUnit",
	ProductDeliveryUnit:                      "ProductDeliveryUnit",
	ProductProductionUnit:                    "ProductProductionUnit",
	MRPArea:                                  "MRPArea",
	MRPController:                            "MRPController",
	ProductionVersion:                        "ProductionVersion",
	ProductionVersionItem:                    "ProductionVersionItem",
	StockConfirmationBusinessPartner:         "StockConfirmationBusinessPartner",
	StockConfirmationPlant:                   "StockConfirmationPlant",
	StockConfirmationPlantStorageLocation:    "StockConfirmationPlantStorageLocation",
	BillOfMaterial:                           "BillOfMaterial",
	Operations:                               "Operations",
	PlannedOrderQuantityInBaseUnit:           "PlannedOrderQuantityInBaseUnit",
	PlannedOrderQuantityInDeliveryUnit:       "PlannedOrderQuantityInDeliveryUnit",
	PlannedOrderQuantityInProductionUnit:     "PlannedOrderQuantityInProductionUnit",
	PlannedOrderPlannedScrapQtyInBaseUnit:    "PlannedOrderPlannedScrapQtyInBaseUnit",
	PlannedOrderMinimumLotSizeQuantity:       "PlannedOrderMinimumLotSizeQuantity",
	PlannedOrderStandardLotSizeQuantity:      "PlannedOrderStandardLotSizeQuantity",
	PlannedOrderMaximumLotSizeQuantity:       "PlannedOrderMaximumLotSizeQuantity",
	PlannedOrderLotSizeRoundingQuantity:      "PlannedOrderLotSizeRoundingQuantity",
	PlannedOrderLotSizeIsFixed:               "PlannedOrderLotSizeIsFixed",
	PlannedOrderPlannedStartDate:             "PlannedOrderPlannedStartDate",
	PlannedOrderPlannedStartTime:             "PlannedOrderPlannedStartTime",
	PlannedOrderPlannedEndDate:               "PlannedOrderPlannedEndDate",
	PlannedOrderPlannedEndTime:               "PlannedOrderPlannedEndTime",
	OrderID:                                  "OrderID",
	OrderItem:                                "OrderItem",
	Project:                                  "Project",
	WBSElement:                               "WBSElement",
	Reservation:                              "Reservation",
	ReservationItem:                          "ReservationItem",
	PlannedOrderLongText:                     "PlannedOrderLongText",
	LastScheduledDate:                        "LastScheduledDate",
	ScheduledBasicEndDate:                    "ScheduledBasicEndDate",
	ScheduledBasicEndTime:                    "ScheduledBasicEndTime",
	ScheduledBasicStartDate:                  "ScheduledBasicStartDate",
	ScheduledBasicStartTime:                  "ScheduledBasicStartTime",
	SchedulingType:                           "SchedulingType",
	PlannedOrderIsReleased:                   "PlannedOrderIsReleased",
	CreationDate:                             "CreationDate",
	CreationTime:                             "CreationTime",
	LastChangeDate:                           "LastChangeDate",
	LastChangeTime:                           "LastChangeTime",
	IsMarkedForDeletion:                      "IsMarkedForDeletion",
}

var DataPlatformPlannedOrderItemDatumTableColumns = struct {
	PlannedOrder                             string
	PlannedOrderItem                         string
	PrecedingPlannedOrderItem                string
	FollowingPlannedOrderItem                string
	SupplyChainRelationshipID                string
	SupplyChainRelationshipDeliveryID        string
	SupplyChainRelationshipDeliveryPlantID   string
	SupplyChainRelationshipProductionPlantID string
	SupplyChainRelationshipStockConfPlantID  string
	PlannedOrderType                         string
	Product                                  string
	Buyer                                    string
	Seller                                   string
	DeliverToParty                           string
	DeliverToPlant                           string
	DeliverToPlantStorageLocation            string
	DeliverFromParty                         string
	DeliverFromPlant                         string
	DeliverFromPlantStorageLocation          string
	ProductionPlantBusinessPartner           string
	ProductionPlant                          string
	ProductionPlantStorageLocation           string
	ProductBaseUnit                          string
	ProductDeliveryUnit                      string
	ProductProductionUnit                    string
	MRPArea                                  string
	MRPController                            string
	ProductionVersion                        string
	ProductionVersionItem                    string
	StockConfirmationBusinessPartner         string
	StockConfirmationPlant                   string
	StockConfirmationPlantStorageLocation    string
	BillOfMaterial                           string
	Operations                               string
	PlannedOrderQuantityInBaseUnit           string
	PlannedOrderQuantityInDeliveryUnit       string
	PlannedOrderQuantityInProductionUnit     string
	PlannedOrderPlannedScrapQtyInBaseUnit    string
	PlannedOrderMinimumLotSizeQuantity       string
	PlannedOrderStandardLotSizeQuantity      string
	PlannedOrderMaximumLotSizeQuantity       string
	PlannedOrderLotSizeRoundingQuantity      string
	PlannedOrderLotSizeIsFixed               string
	PlannedOrderPlannedStartDate             string
	PlannedOrderPlannedStartTime             string
	PlannedOrderPlannedEndDate               string
	PlannedOrderPlannedEndTime               string
	OrderID                                  string
	OrderItem                                string
	Project                                  string
	WBSElement                               string
	Reservation                              string
	ReservationItem                          string
	PlannedOrderLongText                     string
	LastScheduledDate                        string
	ScheduledBasicEndDate                    string
	ScheduledBasicEndTime                    string
	ScheduledBasicStartDate                  string
	ScheduledBasicStartTime                  string
	SchedulingType                           string
	PlannedOrderIsReleased                   string
	CreationDate                             string
	CreationTime                             string
	LastChangeDate                           string
	LastChangeTime                           string
	IsMarkedForDeletion                      string
}{
	PlannedOrder:                             "data_platform_planned_order_item_data.PlannedOrder",
	PlannedOrderItem:                         "data_platform_planned_order_item_data.PlannedOrderItem",
	PrecedingPlannedOrderItem:                "data_platform_planned_order_item_data.PrecedingPlannedOrderItem",
	FollowingPlannedOrderItem:                "data_platform_planned_order_item_data.FollowingPlannedOrderItem",
	SupplyChainRelationshipID:                "data_platform_planned_order_item_data.SupplyChainRelationshipID",
	SupplyChainRelationshipDeliveryID:        "data_platform_planned_order_item_data.SupplyChainRelationshipDeliveryID",
	SupplyChainRelationshipDeliveryPlantID:   "data_platform_planned_order_item_data.SupplyChainRelationshipDeliveryPlantID",
	SupplyChainRelationshipProductionPlantID: "data_platform_planned_order_item_data.SupplyChainRelationshipProductionPlantID",
	SupplyChainRelationshipStockConfPlantID:  "data_platform_planned_order_item_data.SupplyChainRelationshipStockConfPlantID",
	PlannedOrderType:                         "data_platform_planned_order_item_data.PlannedOrderType",
	Product:                                  "data_platform_planned_order_item_data.Product",
	Buyer:                                    "data_platform_planned_order_item_data.Buyer",
	Seller:                                   "data_platform_planned_order_item_data.Seller",
	DeliverToParty:                           "data_platform_planned_order_item_data.DeliverToParty",
	DeliverToPlant:                           "data_platform_planned_order_item_data.DeliverToPlant",
	DeliverToPlantStorageLocation:            "data_platform_planned_order_item_data.DeliverToPlantStorageLocation",
	DeliverFromParty:                         "data_platform_planned_order_item_data.DeliverFromParty",
	DeliverFromPlant:                         "data_platform_planned_order_item_data.DeliverFromPlant",
	DeliverFromPlantStorageLocation:          "data_platform_planned_order_item_data.DeliverFromPlantStorageLocation",
	ProductionPlantBusinessPartner:           "data_platform_planned_order_item_data.ProductionPlantBusinessPartner",
	ProductionPlant:                          "data_platform_planned_order_item_data.ProductionPlant",
	ProductionPlantStorageLocation:           "data_platform_planned_order_item_data.ProductionPlantStorageLocation",
	ProductBaseUnit:                          "data_platform_planned_order_item_data.ProductBaseUnit",
	ProductDeliveryUnit:                      "data_platform_planned_order_item_data.ProductDeliveryUnit",
	ProductProductionUnit:                    "data_platform_planned_order_item_data.ProductProductionUnit",
	MRPArea:                                  "data_platform_planned_order_item_data.MRPArea",
	MRPController:                            "data_platform_planned_order_item_data.MRPController",
	ProductionVersion:                        "data_platform_planned_order_item_data.ProductionVersion",
	ProductionVersionItem:                    "data_platform_planned_order_item_data.ProductionVersionItem",
	StockConfirmationBusinessPartner:         "data_platform_planned_order_item_data.StockConfirmationBusinessPartner",
	StockConfirmationPlant:                   "data_platform_planned_order_item_data.StockConfirmationPlant",
	StockConfirmationPlantStorageLocation:    "data_platform_planned_order_item_data.StockConfirmationPlantStorageLocation",
	BillOfMaterial:                           "data_platform_planned_order_item_data.BillOfMaterial",
	Operations:                               "data_platform_planned_order_item_data.Operations",
	PlannedOrderQuantityInBaseUnit:           "data_platform_planned_order_item_data.PlannedOrderQuantityInBaseUnit",
	PlannedOrderQuantityInDeliveryUnit:       "data_platform_planned_order_item_data.PlannedOrderQuantityInDeliveryUnit",
	PlannedOrderQuantityInProductionUnit:     "data_platform_planned_order_item_data.PlannedOrderQuantityInProductionUnit",
	PlannedOrderPlannedScrapQtyInBaseUnit:    "data_platform_planned_order_item_data.PlannedOrderPlannedScrapQtyInBaseUnit",
	PlannedOrderMinimumLotSizeQuantity:       "data_platform_planned_order_item_data.PlannedOrderMinimumLotSizeQuantity",
	PlannedOrderStandardLotSizeQuantity:      "data_platform_planned_order_item_data.PlannedOrderStandardLotSizeQuantity",
	PlannedOrderMaximumLotSizeQuantity:       "data_platform_planned_order_item_data.PlannedOrderMaximumLotSizeQuantity",
	PlannedOrderLotSizeRoundingQuantity:      "data_platform_planned_order_item_data.PlannedOrderLotSizeRoundingQuantity",
	PlannedOrderLotSizeIsFixed:               "data_platform_planned_order_item_data.PlannedOrderLotSizeIsFixed",
	PlannedOrderPlannedStartDate:             "data_platform_planned_order_item_data.PlannedOrderPlannedStartDate",
	PlannedOrderPlannedStartTime:             "data_platform_planned_order_item_data.PlannedOrderPlannedStartTime",
	PlannedOrderPlannedEndDate:               "data_platform_planned_order_item_data.PlannedOrderPlannedEndDate",
	PlannedOrderPlannedEndTime:               "data_platform_planned_order_item_data.PlannedOrderPlannedEndTime",
	OrderID:                                  "data_platform_planned_order_item_data.OrderID",
	OrderItem:                                "data_platform_planned_order_item_data.OrderItem",
	Project:                                  "data_platform_planned_order_item_data.Project",
	WBSElement:                               "data_platform_planned_order_item_data.WBSElement",
	Reservation:                              "data_platform_planned_order_item_data.Reservation",
	ReservationItem:                          "data_platform_planned_order_item_data.ReservationItem",
	PlannedOrderLongText:                     "data_platform_planned_order_item_data.PlannedOrderLongText",
	LastScheduledDate:                        "data_platform_planned_order_item_data.LastScheduledDate",
	ScheduledBasicEndDate:                    "data_platform_planned_order_item_data.ScheduledBasicEndDate",
	ScheduledBasicEndTime:                    "data_platform_planned_order_item_data.ScheduledBasicEndTime",
	ScheduledBasicStartDate:                  "data_platform_planned_order_item_data.ScheduledBasicStartDate",
	ScheduledBasicStartTime:                  "data_platform_planned_order_item_data.ScheduledBasicStartTime",
	SchedulingType:                           "data_platform_planned_order_item_data.SchedulingType",
	PlannedOrderIsReleased:                   "data_platform_planned_order_item_data.PlannedOrderIsReleased",
	CreationDate:                             "data_platform_planned_order_item_data.CreationDate",
	CreationTime:                             "data_platform_planned_order_item_data.CreationTime",
	LastChangeDate:                           "data_platform_planned_order_item_data.LastChangeDate",
	LastChangeTime:                           "data_platform_planned_order_item_data.LastChangeTime",
	IsMarkedForDeletion:                      "data_platform_planned_order_item_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformPlannedOrderItemDatumWhere = struct {
	PlannedOrder                             whereHelperint
	PlannedOrderItem                         whereHelperint
	PrecedingPlannedOrderItem                whereHelpernull_Int
	FollowingPlannedOrderItem                whereHelpernull_Int
	SupplyChainRelationshipID                whereHelperint
	SupplyChainRelationshipDeliveryID        whereHelperint
	SupplyChainRelationshipDeliveryPlantID   whereHelperint
	SupplyChainRelationshipProductionPlantID whereHelpernull_Int
	SupplyChainRelationshipStockConfPlantID  whereHelperint
	PlannedOrderType                         whereHelperstring
	Product                                  whereHelperstring
	Buyer                                    whereHelperint
	Seller                                   whereHelperint
	DeliverToParty                           whereHelperint
	DeliverToPlant                           whereHelperstring
	DeliverToPlantStorageLocation            whereHelpernull_String
	DeliverFromParty                         whereHelperint
	DeliverFromPlant                         whereHelperstring
	DeliverFromPlantStorageLocation          whereHelpernull_String
	ProductionPlantBusinessPartner           whereHelpernull_Int
	ProductionPlant                          whereHelpernull_String
	ProductionPlantStorageLocation           whereHelpernull_String
	ProductBaseUnit                          whereHelperstring
	ProductDeliveryUnit                      whereHelperstring
	ProductProductionUnit                    whereHelpernull_String
	MRPArea                                  whereHelpernull_String
	MRPController                            whereHelpernull_String
	ProductionVersion                        whereHelpernull_Int
	ProductionVersionItem                    whereHelpernull_Int
	StockConfirmationBusinessPartner         whereHelperint
	StockConfirmationPlant                   whereHelperstring
	StockConfirmationPlantStorageLocation    whereHelpernull_String
	BillOfMaterial                           whereHelpernull_Int
	Operations                               whereHelpernull_Int
	PlannedOrderQuantityInBaseUnit           whereHelperfloat32
	PlannedOrderQuantityInDeliveryUnit       whereHelperfloat32
	PlannedOrderQuantityInProductionUnit     whereHelpernull_Float32
	PlannedOrderPlannedScrapQtyInBaseUnit    whereHelpernull_Float32
	PlannedOrderMinimumLotSizeQuantity       whereHelperfloat32
	PlannedOrderStandardLotSizeQuantity      whereHelperfloat32
	PlannedOrderMaximumLotSizeQuantity       whereHelperfloat32
	PlannedOrderLotSizeRoundingQuantity      whereHelpernull_Float32
	PlannedOrderLotSizeIsFixed               whereHelpernull_Bool
	PlannedOrderPlannedStartDate             whereHelperstring
	PlannedOrderPlannedStartTime             whereHelperstring
	PlannedOrderPlannedEndDate               whereHelperstring
	PlannedOrderPlannedEndTime               whereHelperstring
	OrderID                                  whereHelpernull_Int
	OrderItem                                whereHelpernull_Int
	Project                                  whereHelpernull_Int
	WBSElement                               whereHelpernull_Int
	Reservation                              whereHelpernull_Int
	ReservationItem                          whereHelpernull_Int
	PlannedOrderLongText                     whereHelpernull_String
	LastScheduledDate                        whereHelpernull_String
	ScheduledBasicEndDate                    whereHelpernull_String
	ScheduledBasicEndTime                    whereHelpernull_String
	ScheduledBasicStartDate                  whereHelpernull_String
	ScheduledBasicStartTime                  whereHelpernull_String
	SchedulingType                           whereHelpernull_String
	PlannedOrderIsReleased                   whereHelpernull_Bool
	CreationDate                             whereHelperstring
	CreationTime                             whereHelperstring
	LastChangeDate                           whereHelperstring
	LastChangeTime                           whereHelperstring
	IsMarkedForDeletion                      whereHelpernull_Bool
}{
	PlannedOrder:                             whereHelperint{field: "`data_platform_planned_order_item_data`.`PlannedOrder`"},
	PlannedOrderItem:                         whereHelperint{field: "`data_platform_planned_order_item_data`.`PlannedOrderItem`"},
	PrecedingPlannedOrderItem:                whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`PrecedingPlannedOrderItem`"},
	FollowingPlannedOrderItem:                whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`FollowingPlannedOrderItem`"},
	SupplyChainRelationshipID:                whereHelperint{field: "`data_platform_planned_order_item_data`.`SupplyChainRelationshipID`"},
	SupplyChainRelationshipDeliveryID:        whereHelperint{field: "`data_platform_planned_order_item_data`.`SupplyChainRelationshipDeliveryID`"},
	SupplyChainRelationshipDeliveryPlantID:   whereHelperint{field: "`data_platform_planned_order_item_data`.`SupplyChainRelationshipDeliveryPlantID`"},
	SupplyChainRelationshipProductionPlantID: whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`SupplyChainRelationshipProductionPlantID`"},
	SupplyChainRelationshipStockConfPlantID:  whereHelperint{field: "`data_platform_planned_order_item_data`.`SupplyChainRelationshipStockConfPlantID`"},
	PlannedOrderType:                         whereHelperstring{field: "`data_platform_planned_order_item_data`.`PlannedOrderType`"},
	Product:                                  whereHelperstring{field: "`data_platform_planned_order_item_data`.`Product`"},
	Buyer:                                    whereHelperint{field: "`data_platform_planned_order_item_data`.`Buyer`"},
	Seller:                                   whereHelperint{field: "`data_platform_planned_order_item_data`.`Seller`"},
	DeliverToParty:                           whereHelperint{field: "`data_platform_planned_order_item_data`.`DeliverToParty`"},
	DeliverToPlant:                           whereHelperstring{field: "`data_platform_planned_order_item_data`.`DeliverToPlant`"},
	DeliverToPlantStorageLocation:            whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`DeliverToPlantStorageLocation`"},
	DeliverFromParty:                         whereHelperint{field: "`data_platform_planned_order_item_data`.`DeliverFromParty`"},
	DeliverFromPlant:                         whereHelperstring{field: "`data_platform_planned_order_item_data`.`DeliverFromPlant`"},
	DeliverFromPlantStorageLocation:          whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`DeliverFromPlantStorageLocation`"},
	ProductionPlantBusinessPartner:           whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`ProductionPlantBusinessPartner`"},
	ProductionPlant:                          whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ProductionPlant`"},
	ProductionPlantStorageLocation:           whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ProductionPlantStorageLocation`"},
	ProductBaseUnit:                          whereHelperstring{field: "`data_platform_planned_order_item_data`.`ProductBaseUnit`"},
	ProductDeliveryUnit:                      whereHelperstring{field: "`data_platform_planned_order_item_data`.`ProductDeliveryUnit`"},
	ProductProductionUnit:                    whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ProductProductionUnit`"},
	MRPArea:                                  whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`MRPArea`"},
	MRPController:                            whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`MRPController`"},
	ProductionVersion:                        whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`ProductionVersion`"},
	ProductionVersionItem:                    whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`ProductionVersionItem`"},
	StockConfirmationBusinessPartner:         whereHelperint{field: "`data_platform_planned_order_item_data`.`StockConfirmationBusinessPartner`"},
	StockConfirmationPlant:                   whereHelperstring{field: "`data_platform_planned_order_item_data`.`StockConfirmationPlant`"},
	StockConfirmationPlantStorageLocation:    whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`StockConfirmationPlantStorageLocation`"},
	BillOfMaterial:                           whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`BillOfMaterial`"},
	Operations:                               whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`Operations`"},
	PlannedOrderQuantityInBaseUnit:           whereHelperfloat32{field: "`data_platform_planned_order_item_data`.`PlannedOrderQuantityInBaseUnit`"},
	PlannedOrderQuantityInDeliveryUnit:       whereHelperfloat32{field: "`data_platform_planned_order_item_data`.`PlannedOrderQuantityInDeliveryUnit`"},
	PlannedOrderQuantityInProductionUnit:     whereHelpernull_Float32{field: "`data_platform_planned_order_item_data`.`PlannedOrderQuantityInProductionUnit`"},
	PlannedOrderPlannedScrapQtyInBaseUnit:    whereHelpernull_Float32{field: "`data_platform_planned_order_item_data`.`PlannedOrderPlannedScrapQtyInBaseUnit`"},
	PlannedOrderMinimumLotSizeQuantity:       whereHelperfloat32{field: "`data_platform_planned_order_item_data`.`PlannedOrderMinimumLotSizeQuantity`"},
	PlannedOrderStandardLotSizeQuantity:      whereHelperfloat32{field: "`data_platform_planned_order_item_data`.`PlannedOrderStandardLotSizeQuantity`"},
	PlannedOrderMaximumLotSizeQuantity:       whereHelperfloat32{field: "`data_platform_planned_order_item_data`.`PlannedOrderMaximumLotSizeQuantity`"},
	PlannedOrderLotSizeRoundingQuantity:      whereHelpernull_Float32{field: "`data_platform_planned_order_item_data`.`PlannedOrderLotSizeRoundingQuantity`"},
	PlannedOrderLotSizeIsFixed:               whereHelpernull_Bool{field: "`data_platform_planned_order_item_data`.`PlannedOrderLotSizeIsFixed`"},
	PlannedOrderPlannedStartDate:             whereHelperstring{field: "`data_platform_planned_order_item_data`.`PlannedOrderPlannedStartDate`"},
	PlannedOrderPlannedStartTime:             whereHelperstring{field: "`data_platform_planned_order_item_data`.`PlannedOrderPlannedStartTime`"},
	PlannedOrderPlannedEndDate:               whereHelperstring{field: "`data_platform_planned_order_item_data`.`PlannedOrderPlannedEndDate`"},
	PlannedOrderPlannedEndTime:               whereHelperstring{field: "`data_platform_planned_order_item_data`.`PlannedOrderPlannedEndTime`"},
	OrderID:                                  whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`OrderID`"},
	OrderItem:                                whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`OrderItem`"},
	Project:                                  whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`Project`"},
	WBSElement:                               whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`WBSElement`"},
	Reservation:                              whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`Reservation`"},
	ReservationItem:                          whereHelpernull_Int{field: "`data_platform_planned_order_item_data`.`ReservationItem`"},
	PlannedOrderLongText:                     whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`PlannedOrderLongText`"},
	LastScheduledDate:                        whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`LastScheduledDate`"},
	ScheduledBasicEndDate:                    whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ScheduledBasicEndDate`"},
	ScheduledBasicEndTime:                    whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ScheduledBasicEndTime`"},
	ScheduledBasicStartDate:                  whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ScheduledBasicStartDate`"},
	ScheduledBasicStartTime:                  whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`ScheduledBasicStartTime`"},
	SchedulingType:                           whereHelpernull_String{field: "`data_platform_planned_order_item_data`.`SchedulingType`"},
	PlannedOrderIsReleased:                   whereHelpernull_Bool{field: "`data_platform_planned_order_item_data`.`PlannedOrderIsReleased`"},
	CreationDate:                             whereHelperstring{field: "`data_platform_planned_order_item_data`.`CreationDate`"},
	CreationTime:                             whereHelperstring{field: "`data_platform_planned_order_item_data`.`CreationTime`"},
	LastChangeDate:                           whereHelperstring{field: "`data_platform_planned_order_item_data`.`LastChangeDate`"},
	LastChangeTime:                           whereHelperstring{field: "`data_platform_planned_order_item_data`.`LastChangeTime`"},
	IsMarkedForDeletion:                      whereHelpernull_Bool{field: "`data_platform_planned_order_item_data`.`IsMarkedForDeletion`"},
}

// DataPlatformPlannedOrderItemDatumRels is where relationship names are stored.
var DataPlatformPlannedOrderItemDatumRels = struct {
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum                   string
	DeliverFromPartyDataPlatformPlantStorageLocationDatum                 string
	DeliverToPartyDataPlatformPlantStorageLocationDatum                   string
	FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum            string
	Operation                                                             string
	OrderIDDataPlatformOrdersItemDatum                                    string
	PlannedOrderDataPlatformPlannedOrderItemDatum                         string
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum              string
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum          string
	ProductionPlantDataPlatformPlantStorageLocationDatum                  string
	ProductionVersionDataPlatformProductionVersionItemDatum               string
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum        string
	BuyerDataPlatformSCRDeliveryRelationDatum                             string
	BuyerDataPlatformSCRGeneralDatum                                      string
	StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum string
	PlannedOrderDataPlatformPlannedOrderHeaderDatum                       string
	PlannedOrderDataPlatformPlannedOrderItemComponentData                 string
	FollowingPlannedOrderItemDataPlatformPlannedOrderItemData             string
	PlannedOrderDataPlatformPlannedOrderItemData                          string
	PlannedOrderDataPlatformPlannedOrderItemDocData                       string
	PlannedOrderDataPlatformPlannedOrderItemOperationData                 string
}{
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum:        "BillOfMaterialDataPlatformBillOfMaterialHeaderDatum",
	DeliverFromPartyDataPlatformPlantStorageLocationDatum:      "DeliverFromPartyDataPlatformPlantStorageLocationDatum",
	DeliverToPartyDataPlatformPlantStorageLocationDatum:        "DeliverToPartyDataPlatformPlantStorageLocationDatum",
	FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum: "FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum",
	Operation:                          "Operation",
	OrderIDDataPlatformOrdersItemDatum: "OrderIDDataPlatformOrdersItemDatum",
	PlannedOrderDataPlatformPlannedOrderItemDatum:                         "PlannedOrderDataPlatformPlannedOrderItemDatum",
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum:              "ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum:          "ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ProductionPlantDataPlatformPlantStorageLocationDatum:                  "ProductionPlantDataPlatformPlantStorageLocationDatum",
	ProductionVersionDataPlatformProductionVersionItemDatum:               "ProductionVersionDataPlatformProductionVersionItemDatum",
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum:        "ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum",
	BuyerDataPlatformSCRDeliveryRelationDatum:                             "BuyerDataPlatformSCRDeliveryRelationDatum",
	BuyerDataPlatformSCRGeneralDatum:                                      "BuyerDataPlatformSCRGeneralDatum",
	StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum: "StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum",
	PlannedOrderDataPlatformPlannedOrderHeaderDatum:                       "PlannedOrderDataPlatformPlannedOrderHeaderDatum",
	PlannedOrderDataPlatformPlannedOrderItemComponentData:                 "PlannedOrderDataPlatformPlannedOrderItemComponentData",
	FollowingPlannedOrderItemDataPlatformPlannedOrderItemData:             "FollowingPlannedOrderItemDataPlatformPlannedOrderItemData",
	PlannedOrderDataPlatformPlannedOrderItemData:                          "PlannedOrderDataPlatformPlannedOrderItemData",
	PlannedOrderDataPlatformPlannedOrderItemDocData:                       "PlannedOrderDataPlatformPlannedOrderItemDocData",
	PlannedOrderDataPlatformPlannedOrderItemOperationData:                 "PlannedOrderDataPlatformPlannedOrderItemOperationData",
}

// dataPlatformPlannedOrderItemDatumR is where relationships are stored.
type dataPlatformPlannedOrderItemDatumR struct {
	BillOfMaterialDataPlatformBillOfMaterialHeaderDatum                   *DataPlatformBillOfMaterialHeaderDatum          `boil:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" json:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" toml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum" yaml:"BillOfMaterialDataPlatformBillOfMaterialHeaderDatum"`
	DeliverFromPartyDataPlatformPlantStorageLocationDatum                 *DataPlatformPlantStorageLocationDatum          `boil:"DeliverFromPartyDataPlatformPlantStorageLocationDatum" json:"DeliverFromPartyDataPlatformPlantStorageLocationDatum" toml:"DeliverFromPartyDataPlatformPlantStorageLocationDatum" yaml:"DeliverFromPartyDataPlatformPlantStorageLocationDatum"`
	DeliverToPartyDataPlatformPlantStorageLocationDatum                   *DataPlatformPlantStorageLocationDatum          `boil:"DeliverToPartyDataPlatformPlantStorageLocationDatum" json:"DeliverToPartyDataPlatformPlantStorageLocationDatum" toml:"DeliverToPartyDataPlatformPlantStorageLocationDatum" yaml:"DeliverToPartyDataPlatformPlantStorageLocationDatum"`
	FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum            *DataPlatformPlannedOrderItemDatum              `boil:"FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum" json:"FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum" toml:"FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum" yaml:"FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum"`
	Operation                                                             *DataPlatformOperationsHeaderDatum              `boil:"Operation" json:"Operation" toml:"Operation" yaml:"Operation"`
	OrderIDDataPlatformOrdersItemDatum                                    *DataPlatformOrdersItemDatum                    `boil:"OrderIDDataPlatformOrdersItemDatum" json:"OrderIDDataPlatformOrdersItemDatum" toml:"OrderIDDataPlatformOrdersItemDatum" yaml:"OrderIDDataPlatformOrdersItemDatum"`
	PlannedOrderDataPlatformPlannedOrderItemDatum                         *DataPlatformPlannedOrderItemDatum              `boil:"PlannedOrderDataPlatformPlannedOrderItemDatum" json:"PlannedOrderDataPlatformPlannedOrderItemDatum" toml:"PlannedOrderDataPlatformPlannedOrderItemDatum" yaml:"PlannedOrderDataPlatformPlannedOrderItemDatum"`
	ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum              *DataPlatformQuantityUnitQuantityUnitDatum      `boil:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum          *DataPlatformQuantityUnitQuantityUnitDatum      `boil:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ProductionPlantDataPlatformPlantStorageLocationDatum                  *DataPlatformPlantStorageLocationDatum          `boil:"ProductionPlantDataPlatformPlantStorageLocationDatum" json:"ProductionPlantDataPlatformPlantStorageLocationDatum" toml:"ProductionPlantDataPlatformPlantStorageLocationDatum" yaml:"ProductionPlantDataPlatformPlantStorageLocationDatum"`
	ProductionVersionDataPlatformProductionVersionItemDatum               *DataPlatformProductionVersionItemDatum         `boil:"ProductionVersionDataPlatformProductionVersionItemDatum" json:"ProductionVersionDataPlatformProductionVersionItemDatum" toml:"ProductionVersionDataPlatformProductionVersionItemDatum" yaml:"ProductionVersionDataPlatformProductionVersionItemDatum"`
	ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum        *DataPlatformQuantityUnitQuantityUnitDatum      `boil:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	BuyerDataPlatformSCRDeliveryRelationDatum                             *DataPlatformSCRDeliveryRelationDatum           `boil:"BuyerDataPlatformSCRDeliveryRelationDatum" json:"BuyerDataPlatformSCRDeliveryRelationDatum" toml:"BuyerDataPlatformSCRDeliveryRelationDatum" yaml:"BuyerDataPlatformSCRDeliveryRelationDatum"`
	BuyerDataPlatformSCRGeneralDatum                                      *DataPlatformSCRGeneralDatum                    `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
	StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum *DataPlatformPlantStorageLocationDatum          `boil:"StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum" json:"StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum" toml:"StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum" yaml:"StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum"`
	PlannedOrderDataPlatformPlannedOrderHeaderDatum                       *DataPlatformPlannedOrderHeaderDatum            `boil:"PlannedOrderDataPlatformPlannedOrderHeaderDatum" json:"PlannedOrderDataPlatformPlannedOrderHeaderDatum" toml:"PlannedOrderDataPlatformPlannedOrderHeaderDatum" yaml:"PlannedOrderDataPlatformPlannedOrderHeaderDatum"`
	PlannedOrderDataPlatformPlannedOrderItemComponentData                 DataPlatformPlannedOrderItemComponentDatumSlice `boil:"PlannedOrderDataPlatformPlannedOrderItemComponentData" json:"PlannedOrderDataPlatformPlannedOrderItemComponentData" toml:"PlannedOrderDataPlatformPlannedOrderItemComponentData" yaml:"PlannedOrderDataPlatformPlannedOrderItemComponentData"`
	FollowingPlannedOrderItemDataPlatformPlannedOrderItemData             DataPlatformPlannedOrderItemDatumSlice          `boil:"FollowingPlannedOrderItemDataPlatformPlannedOrderItemData" json:"FollowingPlannedOrderItemDataPlatformPlannedOrderItemData" toml:"FollowingPlannedOrderItemDataPlatformPlannedOrderItemData" yaml:"FollowingPlannedOrderItemDataPlatformPlannedOrderItemData"`
	PlannedOrderDataPlatformPlannedOrderItemData                          DataPlatformPlannedOrderItemDatumSlice          `boil:"PlannedOrderDataPlatformPlannedOrderItemData" json:"PlannedOrderDataPlatformPlannedOrderItemData" toml:"PlannedOrderDataPlatformPlannedOrderItemData" yaml:"PlannedOrderDataPlatformPlannedOrderItemData"`
	PlannedOrderDataPlatformPlannedOrderItemDocData                       DataPlatformPlannedOrderItemDocDatumSlice       `boil:"PlannedOrderDataPlatformPlannedOrderItemDocData" json:"PlannedOrderDataPlatformPlannedOrderItemDocData" toml:"PlannedOrderDataPlatformPlannedOrderItemDocData" yaml:"PlannedOrderDataPlatformPlannedOrderItemDocData"`
	PlannedOrderDataPlatformPlannedOrderItemOperationData                 DataPlatformPlannedOrderItemOperationDatumSlice `boil:"PlannedOrderDataPlatformPlannedOrderItemOperationData" json:"PlannedOrderDataPlatformPlannedOrderItemOperationData" toml:"PlannedOrderDataPlatformPlannedOrderItemOperationData" yaml:"PlannedOrderDataPlatformPlannedOrderItemOperationData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPlannedOrderItemDatumR) NewStruct() *dataPlatformPlannedOrderItemDatumR {
	return &dataPlatformPlannedOrderItemDatumR{}
}

func (r *dataPlatformPlannedOrderItemDatumR) GetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum() *DataPlatformBillOfMaterialHeaderDatum {
	if r == nil {
		return nil
	}
	return r.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetDeliverFromPartyDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.DeliverFromPartyDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetDeliverToPartyDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.DeliverToPartyDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetFollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum() *DataPlatformPlannedOrderItemDatum {
	if r == nil {
		return nil
	}
	return r.FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetOperation() *DataPlatformOperationsHeaderDatum {
	if r == nil {
		return nil
	}
	return r.Operation
}

func (r *dataPlatformPlannedOrderItemDatumR) GetOrderIDDataPlatformOrdersItemDatum() *DataPlatformOrdersItemDatum {
	if r == nil {
		return nil
	}
	return r.OrderIDDataPlatformOrdersItemDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetPlannedOrderDataPlatformPlannedOrderItemDatum() *DataPlatformPlannedOrderItemDatum {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderItemDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetProductionPlantDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.ProductionPlantDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetProductionVersionDataPlatformProductionVersionItemDatum() *DataPlatformProductionVersionItemDatum {
	if r == nil {
		return nil
	}
	return r.ProductionVersionDataPlatformProductionVersionItemDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetBuyerDataPlatformSCRDeliveryRelationDatum() *DataPlatformSCRDeliveryRelationDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRDeliveryRelationDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetStockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum() *DataPlatformPlantStorageLocationDatum {
	if r == nil {
		return nil
	}
	return r.StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetPlannedOrderDataPlatformPlannedOrderHeaderDatum() *DataPlatformPlannedOrderHeaderDatum {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderHeaderDatum
}

func (r *dataPlatformPlannedOrderItemDatumR) GetPlannedOrderDataPlatformPlannedOrderItemComponentData() DataPlatformPlannedOrderItemComponentDatumSlice {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderItemComponentData
}

func (r *dataPlatformPlannedOrderItemDatumR) GetFollowingPlannedOrderItemDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData
}

func (r *dataPlatformPlannedOrderItemDatumR) GetPlannedOrderDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderItemData
}

func (r *dataPlatformPlannedOrderItemDatumR) GetPlannedOrderDataPlatformPlannedOrderItemDocData() DataPlatformPlannedOrderItemDocDatumSlice {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderItemDocData
}

func (r *dataPlatformPlannedOrderItemDatumR) GetPlannedOrderDataPlatformPlannedOrderItemOperationData() DataPlatformPlannedOrderItemOperationDatumSlice {
	if r == nil {
		return nil
	}
	return r.PlannedOrderDataPlatformPlannedOrderItemOperationData
}

// dataPlatformPlannedOrderItemDatumL is where Load methods for each relationship are stored.
type dataPlatformPlannedOrderItemDatumL struct{}

var (
	dataPlatformPlannedOrderItemDatumAllColumns            = []string{"PlannedOrder", "PlannedOrderItem", "PrecedingPlannedOrderItem", "FollowingPlannedOrderItem", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "SupplyChainRelationshipStockConfPlantID", "PlannedOrderType", "Product", "Buyer", "Seller", "DeliverToParty", "DeliverToPlant", "DeliverToPlantStorageLocation", "DeliverFromParty", "DeliverFromPlant", "DeliverFromPlantStorageLocation", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantStorageLocation", "ProductBaseUnit", "ProductDeliveryUnit", "ProductProductionUnit", "MRPArea", "MRPController", "ProductionVersion", "ProductionVersionItem", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "StockConfirmationPlantStorageLocation", "BillOfMaterial", "Operations", "PlannedOrderQuantityInBaseUnit", "PlannedOrderQuantityInDeliveryUnit", "PlannedOrderQuantityInProductionUnit", "PlannedOrderPlannedScrapQtyInBaseUnit", "PlannedOrderMinimumLotSizeQuantity", "PlannedOrderStandardLotSizeQuantity", "PlannedOrderMaximumLotSizeQuantity", "PlannedOrderLotSizeRoundingQuantity", "PlannedOrderLotSizeIsFixed", "PlannedOrderPlannedStartDate", "PlannedOrderPlannedStartTime", "PlannedOrderPlannedEndDate", "PlannedOrderPlannedEndTime", "OrderID", "OrderItem", "Project", "WBSElement", "Reservation", "ReservationItem", "PlannedOrderLongText", "LastScheduledDate", "ScheduledBasicEndDate", "ScheduledBasicEndTime", "ScheduledBasicStartDate", "ScheduledBasicStartTime", "SchedulingType", "PlannedOrderIsReleased", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderItemDatumColumnsWithoutDefault = []string{"PlannedOrder", "PlannedOrderItem", "PrecedingPlannedOrderItem", "FollowingPlannedOrderItem", "SupplyChainRelationshipID", "SupplyChainRelationshipDeliveryID", "SupplyChainRelationshipDeliveryPlantID", "SupplyChainRelationshipProductionPlantID", "SupplyChainRelationshipStockConfPlantID", "PlannedOrderType", "Product", "Buyer", "Seller", "DeliverToParty", "DeliverToPlant", "DeliverToPlantStorageLocation", "DeliverFromParty", "DeliverFromPlant", "DeliverFromPlantStorageLocation", "ProductionPlantBusinessPartner", "ProductionPlant", "ProductionPlantStorageLocation", "ProductBaseUnit", "ProductDeliveryUnit", "ProductProductionUnit", "MRPArea", "MRPController", "ProductionVersion", "ProductionVersionItem", "StockConfirmationBusinessPartner", "StockConfirmationPlant", "StockConfirmationPlantStorageLocation", "BillOfMaterial", "Operations", "PlannedOrderQuantityInBaseUnit", "PlannedOrderQuantityInDeliveryUnit", "PlannedOrderQuantityInProductionUnit", "PlannedOrderPlannedScrapQtyInBaseUnit", "PlannedOrderMinimumLotSizeQuantity", "PlannedOrderStandardLotSizeQuantity", "PlannedOrderMaximumLotSizeQuantity", "PlannedOrderLotSizeRoundingQuantity", "PlannedOrderLotSizeIsFixed", "PlannedOrderPlannedStartDate", "PlannedOrderPlannedStartTime", "PlannedOrderPlannedEndDate", "PlannedOrderPlannedEndTime", "OrderID", "OrderItem", "Project", "WBSElement", "Reservation", "ReservationItem", "PlannedOrderLongText", "LastScheduledDate", "ScheduledBasicEndDate", "ScheduledBasicEndTime", "ScheduledBasicStartDate", "ScheduledBasicStartTime", "SchedulingType", "PlannedOrderIsReleased", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformPlannedOrderItemDatumColumnsWithDefault    = []string{}
	dataPlatformPlannedOrderItemDatumPrimaryKeyColumns     = []string{"PlannedOrder", "PlannedOrderItem"}
	dataPlatformPlannedOrderItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPlannedOrderItemDatumSlice is an alias for a slice of pointers to DataPlatformPlannedOrderItemDatum.
	// This should almost always be used instead of []DataPlatformPlannedOrderItemDatum.
	DataPlatformPlannedOrderItemDatumSlice []*DataPlatformPlannedOrderItemDatum

	dataPlatformPlannedOrderItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPlannedOrderItemDatumType                 = reflect.TypeOf(&DataPlatformPlannedOrderItemDatum{})
	dataPlatformPlannedOrderItemDatumMapping              = queries.MakeStructMapping(dataPlatformPlannedOrderItemDatumType)
	dataPlatformPlannedOrderItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns)
	dataPlatformPlannedOrderItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPlannedOrderItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPlannedOrderItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPlannedOrderItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPlannedOrderItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPlannedOrderItemDatum record from the query.
func (q dataPlatformPlannedOrderItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPlannedOrderItemDatum, error) {
	o := &DataPlatformPlannedOrderItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_planned_order_item_data")
	}

	return o, nil
}

// All returns all DataPlatformPlannedOrderItemDatum records from the query.
func (q dataPlatformPlannedOrderItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPlannedOrderItemDatumSlice, error) {
	var o []*DataPlatformPlannedOrderItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPlannedOrderItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPlannedOrderItemDatum records in the query.
func (q dataPlatformPlannedOrderItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_planned_order_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPlannedOrderItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_planned_order_item_data exists")
	}

	return count > 0, nil
}

// BillOfMaterialDataPlatformBillOfMaterialHeaderDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) BillOfMaterialDataPlatformBillOfMaterialHeaderDatum(mods ...qm.QueryMod) dataPlatformBillOfMaterialHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BillOfMaterial` = ?", o.BillOfMaterial),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformBillOfMaterialHeaderData(queryMods...)
}

// DeliverFromPartyDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) DeliverFromPartyDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DeliverFromParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// DeliverToPartyDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) DeliverToPartyDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.DeliverToParty),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PlannedOrderItem` = ?", o.FollowingPlannedOrderItem),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// Operation pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) Operation(mods ...qm.QueryMod) dataPlatformOperationsHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Operations` = ?", o.Operations),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOperationsHeaderData(queryMods...)
}

// OrderIDDataPlatformOrdersItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) OrderIDDataPlatformOrdersItemDatum(mods ...qm.QueryMod) dataPlatformOrdersItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`OrderID` = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformOrdersItemData(queryMods...)
}

// PlannedOrderDataPlatformPlannedOrderItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) PlannedOrderDataPlatformPlannedOrderItemDatum(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PlannedOrder` = ?", o.PlannedOrder),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductBaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductDeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ProductionPlantDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) ProductionPlantDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Plant` = ?", o.ProductionPlant),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// ProductionVersionDataPlatformProductionVersionItemDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) ProductionVersionDataPlatformProductionVersionItemDatum(mods ...qm.QueryMod) dataPlatformProductionVersionItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductionVersion` = ?", o.ProductionVersion),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductionVersionItemData(queryMods...)
}

// ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ProductProductionUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// BuyerDataPlatformSCRDeliveryRelationDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) BuyerDataPlatformSCRDeliveryRelationDatum(mods ...qm.QueryMod) dataPlatformSCRDeliveryRelationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRDeliveryRelationData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum(mods ...qm.QueryMod) dataPlatformPlantStorageLocationDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`BusinessPartner` = ?", o.StockConfirmationBusinessPartner),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlantStorageLocationData(queryMods...)
}

// PlannedOrderDataPlatformPlannedOrderHeaderDatum pointed to by the foreign key.
func (o *DataPlatformPlannedOrderItemDatum) PlannedOrderDataPlatformPlannedOrderHeaderDatum(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PlannedOrder` = ?", o.PlannedOrder),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPlannedOrderHeaderData(queryMods...)
}

// PlannedOrderDataPlatformPlannedOrderItemComponentData retrieves all the data_platform_planned_order_item_component_datum's DataPlatformPlannedOrderItemComponentData with an executor via PlannedOrder column.
func (o *DataPlatformPlannedOrderItemDatum) PlannedOrderDataPlatformPlannedOrderItemComponentData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemComponentDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_component_data`.`PlannedOrder`=?", o.PlannedOrder),
	)

	return DataPlatformPlannedOrderItemComponentData(queryMods...)
}

// FollowingPlannedOrderItemDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via FollowingPlannedOrderItem column.
func (o *DataPlatformPlannedOrderItemDatum) FollowingPlannedOrderItemDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`FollowingPlannedOrderItem`=?", o.PlannedOrderItem),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// PlannedOrderDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via PlannedOrder column.
func (o *DataPlatformPlannedOrderItemDatum) PlannedOrderDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`PlannedOrder`=?", o.PlannedOrder),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// PlannedOrderDataPlatformPlannedOrderItemDocData retrieves all the data_platform_planned_order_item_doc_datum's DataPlatformPlannedOrderItemDocData with an executor via PlannedOrder column.
func (o *DataPlatformPlannedOrderItemDatum) PlannedOrderDataPlatformPlannedOrderItemDocData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDocDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_doc_data`.`PlannedOrder`=?", o.PlannedOrder),
	)

	return DataPlatformPlannedOrderItemDocData(queryMods...)
}

// PlannedOrderDataPlatformPlannedOrderItemOperationData retrieves all the data_platform_planned_order_item_operation_datum's DataPlatformPlannedOrderItemOperationData with an executor via PlannedOrder column.
func (o *DataPlatformPlannedOrderItemDatum) PlannedOrderDataPlatformPlannedOrderItemOperationData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemOperationDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_operation_data`.`PlannedOrder`=?", o.PlannedOrder),
	)

	return DataPlatformPlannedOrderItemOperationData(queryMods...)
}

// LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.BillOfMaterial) {
			args = append(args, object.BillOfMaterial)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillOfMaterial) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillOfMaterial) {
				args = append(args, obj.BillOfMaterial)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_bill_of_material_header_data`),
		qm.WhereIn(`data_platform_bill_of_material_header_data.BillOfMaterial in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformBillOfMaterialHeaderDatum")
	}

	var resultSlice []*DataPlatformBillOfMaterialHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformBillOfMaterialHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_bill_of_material_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_bill_of_material_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillOfMaterial, foreign.BillOfMaterial) {
				local.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliverFromPartyDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadDeliverFromPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.DeliverFromParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliverFromParty {
					continue Outer
				}
			}

			args = append(args, obj.DeliverFromParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliverFromPartyDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliverFromParty == foreign.BusinessPartner {
				local.R.DeliverFromPartyDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliverToPartyDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadDeliverToPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.DeliverToParty)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliverToParty {
					continue Outer
				}
			}

			args = append(args, obj.DeliverToParty)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliverToPartyDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliverToParty == foreign.BusinessPartner {
				local.R.DeliverToPartyDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadFollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadFollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.FollowingPlannedOrderItem) {
			args = append(args, object.FollowingPlannedOrderItem)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FollowingPlannedOrderItem) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FollowingPlannedOrderItem) {
				args = append(args, obj.FollowingPlannedOrderItem)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.PlannedOrderItem in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlannedOrderItemDatum")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlannedOrderItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FollowingPlannedOrderItem, foreign.PlannedOrderItem) {
				local.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadOperation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadOperation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.Operations) {
			args = append(args, object.Operations)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Operations) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Operations) {
				args = append(args, obj.Operations)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_operations_header_data`),
		qm.WhereIn(`data_platform_operations_header_data.Operations in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOperationsHeaderDatum")
	}

	var resultSlice []*DataPlatformOperationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOperationsHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_operations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_operations_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Operation = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Operations, foreign.Operations) {
				local.R.Operation = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrderIDDataPlatformOrdersItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadOrderIDDataPlatformOrdersItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_item_data`),
		qm.WhereIn(`data_platform_orders_item_data.OrderID in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformOrdersItemDatum")
	}

	var resultSlice []*DataPlatformOrdersItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformOrdersItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_orders_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderIDDataPlatformOrdersItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.OrderID) {
				local.R.OrderIDDataPlatformOrdersItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDataPlatformPlannedOrderItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadPlannedOrderDataPlatformPlannedOrderItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.PlannedOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlannedOrderItemDatum")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlannedOrderItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderDataPlatformPlannedOrderItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.ProductBaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductBaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductBaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductBaseUnit == foreign.QuantityUnit {
				local.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.ProductDeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.ProductDeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.ProductDeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductDeliveryUnit == foreign.QuantityUnit {
				local.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionPlantDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadProductionPlantDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.ProductionPlant) {
			args = append(args, object.ProductionPlant)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionPlant) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductionPlant) {
				args = append(args, obj.ProductionPlant)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.Plant in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionPlantDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductionPlant, foreign.Plant) {
				local.R.ProductionPlantDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductionVersionDataPlatformProductionVersionItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadProductionVersionDataPlatformProductionVersionItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.ProductionVersion) {
			args = append(args, object.ProductionVersion)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductionVersion) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductionVersion) {
				args = append(args, obj.ProductionVersion)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_production_version_item_data`),
		qm.WhereIn(`data_platform_production_version_item_data.ProductionVersion in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductionVersionItemDatum")
	}

	var resultSlice []*DataPlatformProductionVersionItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductionVersionItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_production_version_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_production_version_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductionVersionDataPlatformProductionVersionItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductionVersion, foreign.ProductionVersion) {
				local.R.ProductionVersionDataPlatformProductionVersionItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		if !queries.IsNil(object.ProductProductionUnit) {
			args = append(args, object.ProductProductionUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductProductionUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductProductionUnit) {
				args = append(args, obj.ProductProductionUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductProductionUnit, foreign.QuantityUnit) {
				local.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRDeliveryRelationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_delivery_relation_data`),
		qm.WhereIn(`data_platform_scr_delivery_relation_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRDeliveryRelationDatum")
	}

	var resultSlice []*DataPlatformSCRDeliveryRelationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRDeliveryRelationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_delivery_relation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_delivery_relation_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRDeliveryRelationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadStockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadStockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.StockConfirmationBusinessPartner)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.StockConfirmationBusinessPartner {
					continue Outer
				}
			}

			args = append(args, obj.StockConfirmationBusinessPartner)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_plant_storage_location_data`),
		qm.WhereIn(`data_platform_plant_storage_location_data.BusinessPartner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlantStorageLocationDatum")
	}

	var resultSlice []*DataPlatformPlantStorageLocationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlantStorageLocationDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_plant_storage_location_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_plant_storage_location_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StockConfirmationBusinessPartner == foreign.BusinessPartner {
				local.R.StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDataPlatformPlannedOrderHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadPlannedOrderDataPlatformPlannedOrderHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.PlannedOrder)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_data`),
		qm.WhereIn(`data_platform_planned_order_header_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPlannedOrderHeaderDatum")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPlannedOrderHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_planned_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlannedOrderDataPlatformPlannedOrderHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDataPlatformPlannedOrderItemComponentData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadPlannedOrderDataPlatformPlannedOrderItemComponentData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.PlannedOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_component_data`),
		qm.WhereIn(`data_platform_planned_order_item_component_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_component_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemComponentDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_component_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_component_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_component_data")
	}

	if singular {
		object.R.PlannedOrderDataPlatformPlannedOrderItemComponentData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderItemComponentData = append(local.R.PlannedOrderDataPlatformPlannedOrderItemComponentData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadFollowingPlannedOrderItemDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadFollowingPlannedOrderItemDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.PlannedOrderItem)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlannedOrderItem) {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrderItem)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.FollowingPlannedOrderItem in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PlannedOrderItem, foreign.FollowingPlannedOrderItem) {
				local.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData = append(local.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadPlannedOrderDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.PlannedOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.PlannedOrderDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderItemData = append(local.R.PlannedOrderDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDataPlatformPlannedOrderItemDocData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadPlannedOrderDataPlatformPlannedOrderItemDocData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.PlannedOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_doc_data`),
		qm.WhereIn(`data_platform_planned_order_item_doc_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_doc_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDocDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_doc_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_doc_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_doc_data")
	}

	if singular {
		object.R.PlannedOrderDataPlatformPlannedOrderItemDocData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderItemDocData = append(local.R.PlannedOrderDataPlatformPlannedOrderItemDocData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPlannedOrderDataPlatformPlannedOrderItemOperationData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPlannedOrderItemDatumL) LoadPlannedOrderDataPlatformPlannedOrderItemOperationData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPlannedOrderItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPlannedOrderItemDatum
	var object *DataPlatformPlannedOrderItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPlannedOrderItemDatum.(*DataPlatformPlannedOrderItemDatum)
		if !ok {
			object = new(DataPlatformPlannedOrderItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPlannedOrderItemDatum.(*[]*DataPlatformPlannedOrderItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPlannedOrderItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPlannedOrderItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPlannedOrderItemDatumR{}
		}
		args = append(args, object.PlannedOrder)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPlannedOrderItemDatumR{}
			}

			for _, a := range args {
				if a == obj.PlannedOrder {
					continue Outer
				}
			}

			args = append(args, obj.PlannedOrder)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_operation_data`),
		qm.WhereIn(`data_platform_planned_order_item_operation_data.PlannedOrder in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_operation_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemOperationDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_operation_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_operation_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_operation_data")
	}

	if singular {
		object.R.PlannedOrderDataPlatformPlannedOrderItemOperationData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PlannedOrder == foreign.PlannedOrder {
				local.R.PlannedOrderDataPlatformPlannedOrderItemOperationData = append(local.R.PlannedOrderDataPlatformPlannedOrderItemOperationData, foreign)
				break
			}
		}
	}

	return nil
}

// SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformBillOfMaterialHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BillOfMaterial"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BillOfMaterial, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillOfMaterial, related.BillOfMaterial)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			BillOfMaterialDataPlatformBillOfMaterialHeaderDatum: related,
		}
	} else {
		o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = related
	}

	return nil
}

// RemoveBillOfMaterialDataPlatformBillOfMaterialHeaderDatum relationship.
// Sets o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveBillOfMaterialDataPlatformBillOfMaterialHeaderDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformBillOfMaterialHeaderDatum) error {
	var err error

	queries.SetScanner(&o.BillOfMaterial, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("BillOfMaterial")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillOfMaterialDataPlatformBillOfMaterialHeaderDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetDeliverFromPartyDataPlatformPlantStorageLocationDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.DeliverFromPartyDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetDeliverFromPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliverFromParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliverFromParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			DeliverFromPartyDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.DeliverFromPartyDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// SetDeliverToPartyDataPlatformPlantStorageLocationDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.DeliverToPartyDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetDeliverToPartyDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliverToParty"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliverToParty = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			DeliverToPartyDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.DeliverToPartyDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// SetFollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetFollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlannedOrderItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"FollowingPlannedOrderItem"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PlannedOrderItem, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FollowingPlannedOrderItem, related.PlannedOrderItem)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum: related,
		}
	} else {
		o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum = related
	}

	return nil
}

// RemoveFollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum relationship.
// Sets o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveFollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPlannedOrderItemDatum) error {
	var err error

	queries.SetScanner(&o.FollowingPlannedOrderItem, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("FollowingPlannedOrderItem")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOperation of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.Operation to related.
func (o *DataPlatformPlannedOrderItemDatum) SetOperation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOperationsHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Operations"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Operations, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Operations, related.Operations)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			Operation: related,
		}
	} else {
		o.R.Operation = related
	}

	return nil
}

// RemoveOperation relationship.
// Sets o.R.Operation to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveOperation(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformOperationsHeaderDatum) error {
	var err error

	queries.SetScanner(&o.Operations, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Operations")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Operation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetOrderIDDataPlatformOrdersItemDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformOrdersItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"OrderID"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.OrderID, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.OrderID)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			OrderIDDataPlatformOrdersItemDatum: related,
		}
	} else {
		o.R.OrderIDDataPlatformOrdersItemDatum = related
	}

	return nil
}

// RemoveOrderIDDataPlatformOrdersItemDatum relationship.
// Sets o.R.OrderIDDataPlatformOrdersItemDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveOrderIDDataPlatformOrdersItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformOrdersItemDatum) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("OrderID")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderIDDataPlatformOrdersItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPlannedOrderDataPlatformPlannedOrderItemDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.PlannedOrderDataPlatformPlannedOrderItemDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetPlannedOrderDataPlatformPlannedOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlannedOrderItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PlannedOrder, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlannedOrder = related.PlannedOrder
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			PlannedOrderDataPlatformPlannedOrderItemDatum: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderItemDatum = related
	}

	return nil
}

// SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductBaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductBaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductBaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductDeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductDeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetProductionPlantDataPlatformPlantStorageLocationDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.ProductionPlantDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetProductionPlantDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionPlant"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Plant, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductionPlant, related.Plant)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			ProductionPlantDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.ProductionPlantDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// RemoveProductionPlantDataPlatformPlantStorageLocationDatum relationship.
// Sets o.R.ProductionPlantDataPlatformPlantStorageLocationDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveProductionPlantDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformPlantStorageLocationDatum) error {
	var err error

	queries.SetScanner(&o.ProductionPlant, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductionPlant")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductionPlantDataPlatformPlantStorageLocationDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductionVersionDataPlatformProductionVersionItemDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetProductionVersionDataPlatformProductionVersionItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductionVersionItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductionVersion"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductionVersion, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductionVersion, related.ProductionVersion)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			ProductionVersionDataPlatformProductionVersionItemDatum: related,
		}
	} else {
		o.R.ProductionVersionDataPlatformProductionVersionItemDatum = related
	}

	return nil
}

// RemoveProductionVersionDataPlatformProductionVersionItemDatum relationship.
// Sets o.R.ProductionVersionDataPlatformProductionVersionItemDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveProductionVersionDataPlatformProductionVersionItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductionVersionItemDatum) error {
	var err error

	queries.SetScanner(&o.ProductionVersion, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductionVersion")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductionVersionDataPlatformProductionVersionItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductProductionUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductProductionUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformPlannedOrderItemDatum) RemoveProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.ProductProductionUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductProductionUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductProductionUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetBuyerDataPlatformSCRDeliveryRelationDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRDeliveryRelationDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetBuyerDataPlatformSCRDeliveryRelationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRDeliveryRelationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			BuyerDataPlatformSCRDeliveryRelationDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRDeliveryRelationDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// SetStockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetStockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlantStorageLocationDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"StockConfirmationBusinessPartner"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.BusinessPartner, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StockConfirmationBusinessPartner = related.BusinessPartner
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum: related,
		}
	} else {
		o.R.StockConfirmationBusinessPartnerDataPlatformPlantStorageLocationDatum = related
	}

	return nil
}

// SetPlannedOrderDataPlatformPlannedOrderHeaderDatum of the dataPlatformPlannedOrderItemDatum to the related item.
// Sets o.R.PlannedOrderDataPlatformPlannedOrderHeaderDatum to related.
func (o *DataPlatformPlannedOrderItemDatum) SetPlannedOrderDataPlatformPlannedOrderHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPlannedOrderHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PlannedOrder, o.PlannedOrder, o.PlannedOrderItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlannedOrder = related.PlannedOrder
	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			PlannedOrderDataPlatformPlannedOrderHeaderDatum: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderHeaderDatum = related
	}

	return nil
}

// AddPlannedOrderDataPlatformPlannedOrderItemComponentData adds the given related objects to the existing relationships
// of the data_platform_planned_order_item_datum, optionally inserting them as new records.
// Appends related to o.R.PlannedOrderDataPlatformPlannedOrderItemComponentData.
func (o *DataPlatformPlannedOrderItemDatum) AddPlannedOrderDataPlatformPlannedOrderItemComponentData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemComponentDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlannedOrder = o.PlannedOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_component_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemComponentDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PlannedOrder, rel.PlannedOrder, rel.PlannedOrderItem, rel.BillOfMaterial, rel.BillOfMaterialItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlannedOrder = o.PlannedOrder
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			PlannedOrderDataPlatformPlannedOrderItemComponentData: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderItemComponentData = append(o.R.PlannedOrderDataPlatformPlannedOrderItemComponentData, related...)
	}

	return nil
}

// AddFollowingPlannedOrderItemDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_planned_order_item_datum, optionally inserting them as new records.
// Appends related to o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData.
func (o *DataPlatformPlannedOrderItemDatum) AddFollowingPlannedOrderItemDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FollowingPlannedOrderItem, o.PlannedOrderItem)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"FollowingPlannedOrderItem"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PlannedOrderItem, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FollowingPlannedOrderItem, o.PlannedOrderItem)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			FollowingPlannedOrderItemDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData = append(o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// SetFollowingPlannedOrderItemDataPlatformPlannedOrderItemData removes all previously related items of the
// data_platform_planned_order_item_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemDatum's FollowingPlannedOrderItemDataPlatformPlannedOrderItemData accordingly.
// Replaces o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData with related.
func (o *DataPlatformPlannedOrderItemDatum) SetFollowingPlannedOrderItemDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	query := "update `data_platform_planned_order_item_data` set `FollowingPlannedOrderItem` = null where `FollowingPlannedOrderItem` = ?"
	values := []interface{}{o.PlannedOrderItem}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData = nil
	}

	return o.AddFollowingPlannedOrderItemDataPlatformPlannedOrderItemData(ctx, exec, insert, related...)
}

// RemoveFollowingPlannedOrderItemDataPlatformPlannedOrderItemData relationships from objects passed in.
// Removes related items from R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformPlannedOrderItemDatum) RemoveFollowingPlannedOrderItemDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FollowingPlannedOrderItem, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("FollowingPlannedOrderItem")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData)
			if ln > 1 && i < ln-1 {
				o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData[i] = o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData[ln-1]
			}
			o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData = o.R.FollowingPlannedOrderItemDataPlatformPlannedOrderItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddPlannedOrderDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_planned_order_item_datum, optionally inserting them as new records.
// Appends related to o.R.PlannedOrderDataPlatformPlannedOrderItemData.
func (o *DataPlatformPlannedOrderItemDatum) AddPlannedOrderDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlannedOrder = o.PlannedOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PlannedOrder, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlannedOrder = o.PlannedOrder
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			PlannedOrderDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderItemData = append(o.R.PlannedOrderDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// AddPlannedOrderDataPlatformPlannedOrderItemDocData adds the given related objects to the existing relationships
// of the data_platform_planned_order_item_datum, optionally inserting them as new records.
// Appends related to o.R.PlannedOrderDataPlatformPlannedOrderItemDocData.
func (o *DataPlatformPlannedOrderItemDatum) AddPlannedOrderDataPlatformPlannedOrderItemDocData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDocDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlannedOrder = o.PlannedOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_doc_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDocDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PlannedOrder, rel.PlannedOrder, rel.PlannedOrderItem, rel.DocType, rel.DocVersionID, rel.DocID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlannedOrder = o.PlannedOrder
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			PlannedOrderDataPlatformPlannedOrderItemDocData: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderItemDocData = append(o.R.PlannedOrderDataPlatformPlannedOrderItemDocData, related...)
	}

	return nil
}

// AddPlannedOrderDataPlatformPlannedOrderItemOperationData adds the given related objects to the existing relationships
// of the data_platform_planned_order_item_datum, optionally inserting them as new records.
// Appends related to o.R.PlannedOrderDataPlatformPlannedOrderItemOperationData.
func (o *DataPlatformPlannedOrderItemDatum) AddPlannedOrderDataPlatformPlannedOrderItemOperationData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemOperationDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlannedOrder = o.PlannedOrder
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_operation_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PlannedOrder"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemOperationDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PlannedOrder, rel.PlannedOrder, rel.PlannedOrderItem, rel.Operations, rel.OperationsItem, rel.OperationID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlannedOrder = o.PlannedOrder
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPlannedOrderItemDatumR{
			PlannedOrderDataPlatformPlannedOrderItemOperationData: related,
		}
	} else {
		o.R.PlannedOrderDataPlatformPlannedOrderItemOperationData = append(o.R.PlannedOrderDataPlatformPlannedOrderItemOperationData, related...)
	}

	return nil
}

// DataPlatformPlannedOrderItemData retrieves all the records using an executor.
func DataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_planned_order_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_planned_order_item_data`.*"})
	}

	return dataPlatformPlannedOrderItemDatumQuery{q}
}

// FindDataPlatformPlannedOrderItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPlannedOrderItemDatum(ctx context.Context, exec boil.ContextExecutor, plannedOrder int, plannedOrderItem int, selectCols ...string) (*DataPlatformPlannedOrderItemDatum, error) {
	dataPlatformPlannedOrderItemDatumObj := &DataPlatformPlannedOrderItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_planned_order_item_data` where `PlannedOrder`=? AND `PlannedOrderItem`=?", sel,
	)

	q := queries.Raw(query, plannedOrder, plannedOrderItem)

	err := q.Bind(ctx, exec, dataPlatformPlannedOrderItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_planned_order_item_data")
	}

	return dataPlatformPlannedOrderItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPlannedOrderItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPlannedOrderItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderItemDatumInsertCache[key]
	dataPlatformPlannedOrderItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPlannedOrderItemDatumAllColumns,
			dataPlatformPlannedOrderItemDatumColumnsWithDefault,
			dataPlatformPlannedOrderItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_planned_order_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_planned_order_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_planned_order_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_planned_order_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PlannedOrder,
		o.PlannedOrderItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderItemDatumInsertCacheMut.Lock()
		dataPlatformPlannedOrderItemDatumInsertCache[key] = cache
		dataPlatformPlannedOrderItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPlannedOrderItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPlannedOrderItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPlannedOrderItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderItemDatumUpdateCache[key]
	dataPlatformPlannedOrderItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPlannedOrderItemDatumAllColumns,
			dataPlatformPlannedOrderItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_planned_order_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, append(wl, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_planned_order_item_data row")
	}

	if !cached {
		dataPlatformPlannedOrderItemDatumUpdateCacheMut.Lock()
		dataPlatformPlannedOrderItemDatumUpdateCache[key] = cache
		dataPlatformPlannedOrderItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPlannedOrderItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_planned_order_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPlannedOrderItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPlannedOrderItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformPlannedOrderItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPlannedOrderItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_planned_order_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPlannedOrderItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPlannedOrderItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPlannedOrderItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPlannedOrderItemDatumUpsertCache[key]
	dataPlatformPlannedOrderItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPlannedOrderItemDatumAllColumns,
			dataPlatformPlannedOrderItemDatumColumnsWithDefault,
			dataPlatformPlannedOrderItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPlannedOrderItemDatumAllColumns,
			dataPlatformPlannedOrderItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_planned_order_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_planned_order_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_planned_order_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_planned_order_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPlannedOrderItemDatumType, dataPlatformPlannedOrderItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_planned_order_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_planned_order_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPlannedOrderItemDatumUpsertCacheMut.Lock()
		dataPlatformPlannedOrderItemDatumUpsertCache[key] = cache
		dataPlatformPlannedOrderItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPlannedOrderItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPlannedOrderItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPlannedOrderItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPlannedOrderItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_planned_order_item_data` WHERE `PlannedOrder`=? AND `PlannedOrderItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_planned_order_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPlannedOrderItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPlannedOrderItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_planned_order_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPlannedOrderItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_planned_order_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPlannedOrderItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPlannedOrderItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPlannedOrderItemDatum(ctx, exec, o.PlannedOrder, o.PlannedOrderItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPlannedOrderItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPlannedOrderItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPlannedOrderItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_planned_order_item_data`.* FROM `data_platform_planned_order_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPlannedOrderItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPlannedOrderItemDatumExists checks if the DataPlatformPlannedOrderItemDatum row exists.
func DataPlatformPlannedOrderItemDatumExists(ctx context.Context, exec boil.ContextExecutor, plannedOrder int, plannedOrderItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_planned_order_item_data` where `PlannedOrder`=? AND `PlannedOrderItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, plannedOrder, plannedOrderItem)
	}
	row := exec.QueryRowContext(ctx, sql, plannedOrder, plannedOrderItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_planned_order_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPlannedOrderItemDatum row exists.
func (o *DataPlatformPlannedOrderItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPlannedOrderItemDatumExists(ctx, exec, o.PlannedOrder, o.PlannedOrderItem)
}
