// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductMasterGeneralDatum is an object representing the database table.
type DataPlatformProductMasterGeneralDatum struct {
	Product                       string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ProductType                   null.String  `boil:"ProductType" json:"ProductType,omitempty" toml:"ProductType" yaml:"ProductType,omitempty"`
	BaseUnit                      null.String  `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	ValidityStartDate             null.Time    `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ProductGroup                  null.String  `boil:"ProductGroup" json:"ProductGroup,omitempty" toml:"ProductGroup" yaml:"ProductGroup,omitempty"`
	Division                      null.String  `boil:"Division" json:"Division,omitempty" toml:"Division" yaml:"Division,omitempty"`
	GrossWeight                   null.Float32 `boil:"GrossWeight" json:"GrossWeight,omitempty" toml:"GrossWeight" yaml:"GrossWeight,omitempty"`
	WeightUnit                    null.String  `boil:"WeightUnit" json:"WeightUnit,omitempty" toml:"WeightUnit" yaml:"WeightUnit,omitempty"`
	SizeOrDimensionText           null.String  `boil:"SizeOrDimensionText" json:"SizeOrDimensionText,omitempty" toml:"SizeOrDimensionText" yaml:"SizeOrDimensionText,omitempty"`
	IndustryStandardName          null.String  `boil:"IndustryStandardName" json:"IndustryStandardName,omitempty" toml:"IndustryStandardName" yaml:"IndustryStandardName,omitempty"`
	ProductStandardID             null.String  `boil:"ProductStandardID" json:"ProductStandardID,omitempty" toml:"ProductStandardID" yaml:"ProductStandardID,omitempty"`
	CreationDate                  null.Time    `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                null.Time    `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	NetWeight                     null.Float32 `boil:"NetWeight" json:"NetWeight,omitempty" toml:"NetWeight" yaml:"NetWeight,omitempty"`
	CountryOfOrigin               null.String  `boil:"CountryOfOrigin" json:"CountryOfOrigin,omitempty" toml:"CountryOfOrigin" yaml:"CountryOfOrigin,omitempty"`
	ItemCategory                  null.String  `boil:"ItemCategory" json:"ItemCategory,omitempty" toml:"ItemCategory" yaml:"ItemCategory,omitempty"`
	ProductAccountAssignmentGroup null.String  `boil:"ProductAccountAssignmentGroup" json:"ProductAccountAssignmentGroup,omitempty" toml:"ProductAccountAssignmentGroup" yaml:"ProductAccountAssignmentGroup,omitempty"`
	IsMarkedForDeletion           null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductMasterGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductMasterGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductMasterGeneralDatumColumns = struct {
	Product                       string
	ProductType                   string
	BaseUnit                      string
	ValidityStartDate             string
	ProductGroup                  string
	Division                      string
	GrossWeight                   string
	WeightUnit                    string
	SizeOrDimensionText           string
	IndustryStandardName          string
	ProductStandardID             string
	CreationDate                  string
	LastChangeDate                string
	NetWeight                     string
	CountryOfOrigin               string
	ItemCategory                  string
	ProductAccountAssignmentGroup string
	IsMarkedForDeletion           string
}{
	Product:                       "Product",
	ProductType:                   "ProductType",
	BaseUnit:                      "BaseUnit",
	ValidityStartDate:             "ValidityStartDate",
	ProductGroup:                  "ProductGroup",
	Division:                      "Division",
	GrossWeight:                   "GrossWeight",
	WeightUnit:                    "WeightUnit",
	SizeOrDimensionText:           "SizeOrDimensionText",
	IndustryStandardName:          "IndustryStandardName",
	ProductStandardID:             "ProductStandardID",
	CreationDate:                  "CreationDate",
	LastChangeDate:                "LastChangeDate",
	NetWeight:                     "NetWeight",
	CountryOfOrigin:               "CountryOfOrigin",
	ItemCategory:                  "ItemCategory",
	ProductAccountAssignmentGroup: "ProductAccountAssignmentGroup",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
}

var DataPlatformProductMasterGeneralDatumTableColumns = struct {
	Product                       string
	ProductType                   string
	BaseUnit                      string
	ValidityStartDate             string
	ProductGroup                  string
	Division                      string
	GrossWeight                   string
	WeightUnit                    string
	SizeOrDimensionText           string
	IndustryStandardName          string
	ProductStandardID             string
	CreationDate                  string
	LastChangeDate                string
	NetWeight                     string
	CountryOfOrigin               string
	ItemCategory                  string
	ProductAccountAssignmentGroup string
	IsMarkedForDeletion           string
}{
	Product:                       "data_platform_product_master_general_data.Product",
	ProductType:                   "data_platform_product_master_general_data.ProductType",
	BaseUnit:                      "data_platform_product_master_general_data.BaseUnit",
	ValidityStartDate:             "data_platform_product_master_general_data.ValidityStartDate",
	ProductGroup:                  "data_platform_product_master_general_data.ProductGroup",
	Division:                      "data_platform_product_master_general_data.Division",
	GrossWeight:                   "data_platform_product_master_general_data.GrossWeight",
	WeightUnit:                    "data_platform_product_master_general_data.WeightUnit",
	SizeOrDimensionText:           "data_platform_product_master_general_data.SizeOrDimensionText",
	IndustryStandardName:          "data_platform_product_master_general_data.IndustryStandardName",
	ProductStandardID:             "data_platform_product_master_general_data.ProductStandardID",
	CreationDate:                  "data_platform_product_master_general_data.CreationDate",
	LastChangeDate:                "data_platform_product_master_general_data.LastChangeDate",
	NetWeight:                     "data_platform_product_master_general_data.NetWeight",
	CountryOfOrigin:               "data_platform_product_master_general_data.CountryOfOrigin",
	ItemCategory:                  "data_platform_product_master_general_data.ItemCategory",
	ProductAccountAssignmentGroup: "data_platform_product_master_general_data.ProductAccountAssignmentGroup",
	IsMarkedForDeletion:           "data_platform_product_master_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductMasterGeneralDatumWhere = struct {
	Product                       whereHelperstring
	ProductType                   whereHelpernull_String
	BaseUnit                      whereHelpernull_String
	ValidityStartDate             whereHelpernull_Time
	ProductGroup                  whereHelpernull_String
	Division                      whereHelpernull_String
	GrossWeight                   whereHelpernull_Float32
	WeightUnit                    whereHelpernull_String
	SizeOrDimensionText           whereHelpernull_String
	IndustryStandardName          whereHelpernull_String
	ProductStandardID             whereHelpernull_String
	CreationDate                  whereHelpernull_Time
	LastChangeDate                whereHelpernull_Time
	NetWeight                     whereHelpernull_Float32
	CountryOfOrigin               whereHelpernull_String
	ItemCategory                  whereHelpernull_String
	ProductAccountAssignmentGroup whereHelpernull_String
	IsMarkedForDeletion           whereHelpernull_Bool
}{
	Product:                       whereHelperstring{field: "`data_platform_product_master_general_data`.`Product`"},
	ProductType:                   whereHelpernull_String{field: "`data_platform_product_master_general_data`.`ProductType`"},
	BaseUnit:                      whereHelpernull_String{field: "`data_platform_product_master_general_data`.`BaseUnit`"},
	ValidityStartDate:             whereHelpernull_Time{field: "`data_platform_product_master_general_data`.`ValidityStartDate`"},
	ProductGroup:                  whereHelpernull_String{field: "`data_platform_product_master_general_data`.`ProductGroup`"},
	Division:                      whereHelpernull_String{field: "`data_platform_product_master_general_data`.`Division`"},
	GrossWeight:                   whereHelpernull_Float32{field: "`data_platform_product_master_general_data`.`GrossWeight`"},
	WeightUnit:                    whereHelpernull_String{field: "`data_platform_product_master_general_data`.`WeightUnit`"},
	SizeOrDimensionText:           whereHelpernull_String{field: "`data_platform_product_master_general_data`.`SizeOrDimensionText`"},
	IndustryStandardName:          whereHelpernull_String{field: "`data_platform_product_master_general_data`.`IndustryStandardName`"},
	ProductStandardID:             whereHelpernull_String{field: "`data_platform_product_master_general_data`.`ProductStandardID`"},
	CreationDate:                  whereHelpernull_Time{field: "`data_platform_product_master_general_data`.`CreationDate`"},
	LastChangeDate:                whereHelpernull_Time{field: "`data_platform_product_master_general_data`.`LastChangeDate`"},
	NetWeight:                     whereHelpernull_Float32{field: "`data_platform_product_master_general_data`.`NetWeight`"},
	CountryOfOrigin:               whereHelpernull_String{field: "`data_platform_product_master_general_data`.`CountryOfOrigin`"},
	ItemCategory:                  whereHelpernull_String{field: "`data_platform_product_master_general_data`.`ItemCategory`"},
	ProductAccountAssignmentGroup: whereHelpernull_String{field: "`data_platform_product_master_general_data`.`ProductAccountAssignmentGroup`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`data_platform_product_master_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductMasterGeneralDatumRels is where relationship names are stored.
var DataPlatformProductMasterGeneralDatumRels = struct {
	ProductDataPlatformProductMasterBPPlantData            string
	ProductDataPlatformProductMasterBusinessPartnerData    string
	ProductDataPlatformProductMasterProductDescriptionData string
}{
	ProductDataPlatformProductMasterBPPlantData:            "ProductDataPlatformProductMasterBPPlantData",
	ProductDataPlatformProductMasterBusinessPartnerData:    "ProductDataPlatformProductMasterBusinessPartnerData",
	ProductDataPlatformProductMasterProductDescriptionData: "ProductDataPlatformProductMasterProductDescriptionData",
}

// dataPlatformProductMasterGeneralDatumR is where relationships are stored.
type dataPlatformProductMasterGeneralDatumR struct {
	ProductDataPlatformProductMasterBPPlantData            DataPlatformProductMasterBPPlantDatumSlice            `boil:"ProductDataPlatformProductMasterBPPlantData" json:"ProductDataPlatformProductMasterBPPlantData" toml:"ProductDataPlatformProductMasterBPPlantData" yaml:"ProductDataPlatformProductMasterBPPlantData"`
	ProductDataPlatformProductMasterBusinessPartnerData    DataPlatformProductMasterBusinessPartnerDatumSlice    `boil:"ProductDataPlatformProductMasterBusinessPartnerData" json:"ProductDataPlatformProductMasterBusinessPartnerData" toml:"ProductDataPlatformProductMasterBusinessPartnerData" yaml:"ProductDataPlatformProductMasterBusinessPartnerData"`
	ProductDataPlatformProductMasterProductDescriptionData DataPlatformProductMasterProductDescriptionDatumSlice `boil:"ProductDataPlatformProductMasterProductDescriptionData" json:"ProductDataPlatformProductMasterProductDescriptionData" toml:"ProductDataPlatformProductMasterProductDescriptionData" yaml:"ProductDataPlatformProductMasterProductDescriptionData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductMasterGeneralDatumR) NewStruct() *dataPlatformProductMasterGeneralDatumR {
	return &dataPlatformProductMasterGeneralDatumR{}
}

func (r *dataPlatformProductMasterGeneralDatumR) GetProductDataPlatformProductMasterBPPlantData() DataPlatformProductMasterBPPlantDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformProductMasterBPPlantData
}

func (r *dataPlatformProductMasterGeneralDatumR) GetProductDataPlatformProductMasterBusinessPartnerData() DataPlatformProductMasterBusinessPartnerDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformProductMasterBusinessPartnerData
}

func (r *dataPlatformProductMasterGeneralDatumR) GetProductDataPlatformProductMasterProductDescriptionData() DataPlatformProductMasterProductDescriptionDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformProductMasterProductDescriptionData
}

// dataPlatformProductMasterGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformProductMasterGeneralDatumL struct{}

var (
	dataPlatformProductMasterGeneralDatumAllColumns            = []string{"Product", "ProductType", "BaseUnit", "ValidityStartDate", "ProductGroup", "Division", "GrossWeight", "WeightUnit", "SizeOrDimensionText", "IndustryStandardName", "ProductStandardID", "CreationDate", "LastChangeDate", "NetWeight", "CountryOfOrigin", "ItemCategory", "ProductAccountAssignmentGroup", "IsMarkedForDeletion"}
	dataPlatformProductMasterGeneralDatumColumnsWithoutDefault = []string{"Product", "ProductType", "BaseUnit", "ValidityStartDate", "ProductGroup", "Division", "GrossWeight", "WeightUnit", "SizeOrDimensionText", "IndustryStandardName", "ProductStandardID", "CreationDate", "LastChangeDate", "NetWeight", "CountryOfOrigin", "ItemCategory", "ProductAccountAssignmentGroup", "IsMarkedForDeletion"}
	dataPlatformProductMasterGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformProductMasterGeneralDatumPrimaryKeyColumns     = []string{"Product"}
	dataPlatformProductMasterGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductMasterGeneralDatumSlice is an alias for a slice of pointers to DataPlatformProductMasterGeneralDatum.
	// This should almost always be used instead of []DataPlatformProductMasterGeneralDatum.
	DataPlatformProductMasterGeneralDatumSlice []*DataPlatformProductMasterGeneralDatum
	// DataPlatformProductMasterGeneralDatumHook is the signature for custom DataPlatformProductMasterGeneralDatum hook methods
	DataPlatformProductMasterGeneralDatumHook func(context.Context, boil.ContextExecutor, *DataPlatformProductMasterGeneralDatum) error

	dataPlatformProductMasterGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductMasterGeneralDatumType                 = reflect.TypeOf(&DataPlatformProductMasterGeneralDatum{})
	dataPlatformProductMasterGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformProductMasterGeneralDatumType)
	dataPlatformProductMasterGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns)
	dataPlatformProductMasterGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductMasterGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductMasterGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductMasterGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductMasterGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductMasterGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var dataPlatformProductMasterGeneralDatumAfterSelectHooks []DataPlatformProductMasterGeneralDatumHook

var dataPlatformProductMasterGeneralDatumBeforeInsertHooks []DataPlatformProductMasterGeneralDatumHook
var dataPlatformProductMasterGeneralDatumAfterInsertHooks []DataPlatformProductMasterGeneralDatumHook

var dataPlatformProductMasterGeneralDatumBeforeUpdateHooks []DataPlatformProductMasterGeneralDatumHook
var dataPlatformProductMasterGeneralDatumAfterUpdateHooks []DataPlatformProductMasterGeneralDatumHook

var dataPlatformProductMasterGeneralDatumBeforeDeleteHooks []DataPlatformProductMasterGeneralDatumHook
var dataPlatformProductMasterGeneralDatumAfterDeleteHooks []DataPlatformProductMasterGeneralDatumHook

var dataPlatformProductMasterGeneralDatumBeforeUpsertHooks []DataPlatformProductMasterGeneralDatumHook
var dataPlatformProductMasterGeneralDatumAfterUpsertHooks []DataPlatformProductMasterGeneralDatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DataPlatformProductMasterGeneralDatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterGeneralDatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DataPlatformProductMasterGeneralDatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterGeneralDatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DataPlatformProductMasterGeneralDatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterGeneralDatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DataPlatformProductMasterGeneralDatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterGeneralDatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DataPlatformProductMasterGeneralDatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterGeneralDatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DataPlatformProductMasterGeneralDatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterGeneralDatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DataPlatformProductMasterGeneralDatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterGeneralDatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DataPlatformProductMasterGeneralDatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterGeneralDatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DataPlatformProductMasterGeneralDatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range dataPlatformProductMasterGeneralDatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDataPlatformProductMasterGeneralDatumHook registers your hook function for all future operations.
func AddDataPlatformProductMasterGeneralDatumHook(hookPoint boil.HookPoint, dataPlatformProductMasterGeneralDatumHook DataPlatformProductMasterGeneralDatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		dataPlatformProductMasterGeneralDatumAfterSelectHooks = append(dataPlatformProductMasterGeneralDatumAfterSelectHooks, dataPlatformProductMasterGeneralDatumHook)
	case boil.BeforeInsertHook:
		dataPlatformProductMasterGeneralDatumBeforeInsertHooks = append(dataPlatformProductMasterGeneralDatumBeforeInsertHooks, dataPlatformProductMasterGeneralDatumHook)
	case boil.AfterInsertHook:
		dataPlatformProductMasterGeneralDatumAfterInsertHooks = append(dataPlatformProductMasterGeneralDatumAfterInsertHooks, dataPlatformProductMasterGeneralDatumHook)
	case boil.BeforeUpdateHook:
		dataPlatformProductMasterGeneralDatumBeforeUpdateHooks = append(dataPlatformProductMasterGeneralDatumBeforeUpdateHooks, dataPlatformProductMasterGeneralDatumHook)
	case boil.AfterUpdateHook:
		dataPlatformProductMasterGeneralDatumAfterUpdateHooks = append(dataPlatformProductMasterGeneralDatumAfterUpdateHooks, dataPlatformProductMasterGeneralDatumHook)
	case boil.BeforeDeleteHook:
		dataPlatformProductMasterGeneralDatumBeforeDeleteHooks = append(dataPlatformProductMasterGeneralDatumBeforeDeleteHooks, dataPlatformProductMasterGeneralDatumHook)
	case boil.AfterDeleteHook:
		dataPlatformProductMasterGeneralDatumAfterDeleteHooks = append(dataPlatformProductMasterGeneralDatumAfterDeleteHooks, dataPlatformProductMasterGeneralDatumHook)
	case boil.BeforeUpsertHook:
		dataPlatformProductMasterGeneralDatumBeforeUpsertHooks = append(dataPlatformProductMasterGeneralDatumBeforeUpsertHooks, dataPlatformProductMasterGeneralDatumHook)
	case boil.AfterUpsertHook:
		dataPlatformProductMasterGeneralDatumAfterUpsertHooks = append(dataPlatformProductMasterGeneralDatumAfterUpsertHooks, dataPlatformProductMasterGeneralDatumHook)
	}
}

// One returns a single dataPlatformProductMasterGeneralDatum record from the query.
func (q dataPlatformProductMasterGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductMasterGeneralDatum, error) {
	o := &DataPlatformProductMasterGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_master_general_data")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DataPlatformProductMasterGeneralDatum records from the query.
func (q dataPlatformProductMasterGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductMasterGeneralDatumSlice, error) {
	var o []*DataPlatformProductMasterGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductMasterGeneralDatum slice")
	}

	if len(dataPlatformProductMasterGeneralDatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductMasterGeneralDatum records in the query.
func (q dataPlatformProductMasterGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_master_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductMasterGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_master_general_data exists")
	}

	return count > 0, nil
}

// ProductDataPlatformProductMasterBPPlantData retrieves all the data_platform_product_master_bp_plant_datum's DataPlatformProductMasterBPPlantData with an executor via Product column.
func (o *DataPlatformProductMasterGeneralDatum) ProductDataPlatformProductMasterBPPlantData(mods ...qm.QueryMod) dataPlatformProductMasterBPPlantDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_bp_plant_data`.`Product`=?", o.Product),
	)

	return DataPlatformProductMasterBPPlantData(queryMods...)
}

// ProductDataPlatformProductMasterBusinessPartnerData retrieves all the data_platform_product_master_business_partner_datum's DataPlatformProductMasterBusinessPartnerData with an executor via Product column.
func (o *DataPlatformProductMasterGeneralDatum) ProductDataPlatformProductMasterBusinessPartnerData(mods ...qm.QueryMod) dataPlatformProductMasterBusinessPartnerDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_business_partner_data`.`Product`=?", o.Product),
	)

	return DataPlatformProductMasterBusinessPartnerData(queryMods...)
}

// ProductDataPlatformProductMasterProductDescriptionData retrieves all the data_platform_product_master_product_description_datum's DataPlatformProductMasterProductDescriptionData with an executor via Product column.
func (o *DataPlatformProductMasterGeneralDatum) ProductDataPlatformProductMasterProductDescriptionData(mods ...qm.QueryMod) dataPlatformProductMasterProductDescriptionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_master_product_description_data`.`Product`=?", o.Product),
	)

	return DataPlatformProductMasterProductDescriptionData(queryMods...)
}

// LoadProductDataPlatformProductMasterBPPlantData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterGeneralDatumL) LoadProductDataPlatformProductMasterBPPlantData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterGeneralDatum
	var object *DataPlatformProductMasterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterGeneralDatum.(*DataPlatformProductMasterGeneralDatum)
		if !ok {
			object = new(DataPlatformProductMasterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterGeneralDatum.(*[]*DataPlatformProductMasterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterGeneralDatumR{}
		}
		args = append(args, object.Product)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_bp_plant_data`),
		qm.WhereIn(`data_platform_product_master_bp_plant_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_bp_plant_data")
	}

	var resultSlice []*DataPlatformProductMasterBPPlantDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_bp_plant_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_bp_plant_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_bp_plant_data")
	}

	if len(dataPlatformProductMasterBPPlantDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductDataPlatformProductMasterBPPlantData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
			}
			foreign.R.ProductDataPlatformProductMasterGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Product == foreign.Product {
				local.R.ProductDataPlatformProductMasterBPPlantData = append(local.R.ProductDataPlatformProductMasterBPPlantData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterBPPlantDatumR{}
				}
				foreign.R.ProductDataPlatformProductMasterGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadProductDataPlatformProductMasterBusinessPartnerData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterGeneralDatumL) LoadProductDataPlatformProductMasterBusinessPartnerData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterGeneralDatum
	var object *DataPlatformProductMasterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterGeneralDatum.(*DataPlatformProductMasterGeneralDatum)
		if !ok {
			object = new(DataPlatformProductMasterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterGeneralDatum.(*[]*DataPlatformProductMasterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterGeneralDatumR{}
		}
		args = append(args, object.Product)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_business_partner_data`),
		qm.WhereIn(`data_platform_product_master_business_partner_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_business_partner_data")
	}

	var resultSlice []*DataPlatformProductMasterBusinessPartnerDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_business_partner_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_business_partner_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_business_partner_data")
	}

	if len(dataPlatformProductMasterBusinessPartnerDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductDataPlatformProductMasterBusinessPartnerData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterBusinessPartnerDatumR{}
			}
			foreign.R.ProductDataPlatformProductMasterGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Product == foreign.Product {
				local.R.ProductDataPlatformProductMasterBusinessPartnerData = append(local.R.ProductDataPlatformProductMasterBusinessPartnerData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterBusinessPartnerDatumR{}
				}
				foreign.R.ProductDataPlatformProductMasterGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// LoadProductDataPlatformProductMasterProductDescriptionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterGeneralDatumL) LoadProductDataPlatformProductMasterProductDescriptionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterGeneralDatum
	var object *DataPlatformProductMasterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterGeneralDatum.(*DataPlatformProductMasterGeneralDatum)
		if !ok {
			object = new(DataPlatformProductMasterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterGeneralDatum.(*[]*DataPlatformProductMasterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterGeneralDatumR{}
		}
		args = append(args, object.Product)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_master_product_description_data`),
		qm.WhereIn(`data_platform_product_master_product_description_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_master_product_description_data")
	}

	var resultSlice []*DataPlatformProductMasterProductDescriptionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_master_product_description_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_master_product_description_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_master_product_description_data")
	}

	if len(dataPlatformProductMasterProductDescriptionDatumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductDataPlatformProductMasterProductDescriptionData = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dataPlatformProductMasterProductDescriptionDatumR{}
			}
			foreign.R.ProductDataPlatformProductMasterGeneralDatum = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Product == foreign.Product {
				local.R.ProductDataPlatformProductMasterProductDescriptionData = append(local.R.ProductDataPlatformProductMasterProductDescriptionData, foreign)
				if foreign.R == nil {
					foreign.R = &dataPlatformProductMasterProductDescriptionDatumR{}
				}
				foreign.R.ProductDataPlatformProductMasterGeneralDatum = local
				break
			}
		}
	}

	return nil
}

// AddProductDataPlatformProductMasterBPPlantData adds the given related objects to the existing relationships
// of the data_platform_product_master_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDataPlatformProductMasterBPPlantData.
// Sets related.R.ProductDataPlatformProductMasterGeneralDatum appropriately.
func (o *DataPlatformProductMasterGeneralDatum) AddProductDataPlatformProductMasterBPPlantData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBPPlantDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Product = o.Product
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_bp_plant_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBPPlantDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Product, rel.Product, rel.BusinessPartner, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Product = o.Product
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterGeneralDatumR{
			ProductDataPlatformProductMasterBPPlantData: related,
		}
	} else {
		o.R.ProductDataPlatformProductMasterBPPlantData = append(o.R.ProductDataPlatformProductMasterBPPlantData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterBPPlantDatumR{
				ProductDataPlatformProductMasterGeneralDatum: o,
			}
		} else {
			rel.R.ProductDataPlatformProductMasterGeneralDatum = o
		}
	}
	return nil
}

// AddProductDataPlatformProductMasterBusinessPartnerData adds the given related objects to the existing relationships
// of the data_platform_product_master_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDataPlatformProductMasterBusinessPartnerData.
// Sets related.R.ProductDataPlatformProductMasterGeneralDatum appropriately.
func (o *DataPlatformProductMasterGeneralDatum) AddProductDataPlatformProductMasterBusinessPartnerData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterBusinessPartnerDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Product = o.Product
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_business_partner_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterBusinessPartnerDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Product, rel.Product, rel.BusinessPartner, rel.ValidityEndDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Product = o.Product
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterGeneralDatumR{
			ProductDataPlatformProductMasterBusinessPartnerData: related,
		}
	} else {
		o.R.ProductDataPlatformProductMasterBusinessPartnerData = append(o.R.ProductDataPlatformProductMasterBusinessPartnerData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterBusinessPartnerDatumR{
				ProductDataPlatformProductMasterGeneralDatum: o,
			}
		} else {
			rel.R.ProductDataPlatformProductMasterGeneralDatum = o
		}
	}
	return nil
}

// AddProductDataPlatformProductMasterProductDescriptionData adds the given related objects to the existing relationships
// of the data_platform_product_master_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDataPlatformProductMasterProductDescriptionData.
// Sets related.R.ProductDataPlatformProductMasterGeneralDatum appropriately.
func (o *DataPlatformProductMasterGeneralDatum) AddProductDataPlatformProductMasterProductDescriptionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductMasterProductDescriptionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Product = o.Product
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_master_product_description_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterProductDescriptionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Product, rel.Product, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Product = o.Product
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterGeneralDatumR{
			ProductDataPlatformProductMasterProductDescriptionData: related,
		}
	} else {
		o.R.ProductDataPlatformProductMasterProductDescriptionData = append(o.R.ProductDataPlatformProductMasterProductDescriptionData, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dataPlatformProductMasterProductDescriptionDatumR{
				ProductDataPlatformProductMasterGeneralDatum: o,
			}
		} else {
			rel.R.ProductDataPlatformProductMasterGeneralDatum = o
		}
	}
	return nil
}

// DataPlatformProductMasterGeneralData retrieves all the records using an executor.
func DataPlatformProductMasterGeneralData(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_master_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_master_general_data`.*"})
	}

	return dataPlatformProductMasterGeneralDatumQuery{q}
}

// FindDataPlatformProductMasterGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, product string, selectCols ...string) (*DataPlatformProductMasterGeneralDatum, error) {
	dataPlatformProductMasterGeneralDatumObj := &DataPlatformProductMasterGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_master_general_data` where `Product`=?", sel,
	)

	q := queries.Raw(query, product)

	err := q.Bind(ctx, exec, dataPlatformProductMasterGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_master_general_data")
	}

	if err = dataPlatformProductMasterGeneralDatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return dataPlatformProductMasterGeneralDatumObj, err
	}

	return dataPlatformProductMasterGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductMasterGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_general_data provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductMasterGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterGeneralDatumInsertCache[key]
	dataPlatformProductMasterGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductMasterGeneralDatumAllColumns,
			dataPlatformProductMasterGeneralDatumColumnsWithDefault,
			dataPlatformProductMasterGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_master_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_master_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_master_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_master_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterGeneralDatumInsertCacheMut.Lock()
		dataPlatformProductMasterGeneralDatumInsertCache[key] = cache
		dataPlatformProductMasterGeneralDatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DataPlatformProductMasterGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductMasterGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dataPlatformProductMasterGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductMasterGeneralDatumUpdateCache[key]
	dataPlatformProductMasterGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductMasterGeneralDatumAllColumns,
			dataPlatformProductMasterGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update data_platform_product_master_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, append(wl, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update data_platform_product_master_general_data row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for data_platform_product_master_general_data")
	}

	if !cached {
		dataPlatformProductMasterGeneralDatumUpdateCacheMut.Lock()
		dataPlatformProductMasterGeneralDatumUpdateCache[key] = cache
		dataPlatformProductMasterGeneralDatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductMasterGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for data_platform_product_master_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for data_platform_product_master_general_data")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductMasterGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dataPlatformProductMasterGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dataPlatformProductMasterGeneralDatum")
	}
	return rowsAff, nil
}

var mySQLDataPlatformProductMasterGeneralDatumUniqueColumns = []string{
	"Product",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductMasterGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_general_data provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductMasterGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductMasterGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterGeneralDatumUpsertCache[key]
	dataPlatformProductMasterGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductMasterGeneralDatumAllColumns,
			dataPlatformProductMasterGeneralDatumColumnsWithDefault,
			dataPlatformProductMasterGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductMasterGeneralDatumAllColumns,
			dataPlatformProductMasterGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_master_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_master_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_master_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_master_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_master_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterGeneralDatumUpsertCacheMut.Lock()
		dataPlatformProductMasterGeneralDatumUpsertCache[key] = cache
		dataPlatformProductMasterGeneralDatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DataPlatformProductMasterGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductMasterGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DataPlatformProductMasterGeneralDatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductMasterGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_master_general_data` WHERE `Product`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from data_platform_product_master_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for data_platform_product_master_general_data")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductMasterGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dataPlatformProductMasterGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from data_platform_product_master_general_data")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_product_master_general_data")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductMasterGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(dataPlatformProductMasterGeneralDatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_master_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dataPlatformProductMasterGeneralDatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for data_platform_product_master_general_data")
	}

	if len(dataPlatformProductMasterGeneralDatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductMasterGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductMasterGeneralDatum(ctx, exec, o.Product)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductMasterGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductMasterGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_master_general_data`.* FROM `data_platform_product_master_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductMasterGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductMasterGeneralDatumExists checks if the DataPlatformProductMasterGeneralDatum row exists.
func DataPlatformProductMasterGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, product string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_master_general_data` where `Product`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product)
	}
	row := exec.QueryRowContext(ctx, sql, product)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_master_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductMasterGeneralDatum row exists.
func (o *DataPlatformProductMasterGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductMasterGeneralDatumExists(ctx, exec, o.Product)
}
