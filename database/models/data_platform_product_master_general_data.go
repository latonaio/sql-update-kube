// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformProductMasterGeneralDatum is an object representing the database table.
type DataPlatformProductMasterGeneralDatum struct {
	Product                       string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ProductType                   null.String  `boil:"ProductType" json:"ProductType,omitempty" toml:"ProductType" yaml:"ProductType,omitempty"`
	BaseUnit                      null.String  `boil:"BaseUnit" json:"BaseUnit,omitempty" toml:"BaseUnit" yaml:"BaseUnit,omitempty"`
	ValidityStartDate             null.String  `boil:"ValidityStartDate" json:"ValidityStartDate,omitempty" toml:"ValidityStartDate" yaml:"ValidityStartDate,omitempty"`
	ProductGroup                  null.String  `boil:"ProductGroup" json:"ProductGroup,omitempty" toml:"ProductGroup" yaml:"ProductGroup,omitempty"`
	GrossWeight                   null.Float32 `boil:"GrossWeight" json:"GrossWeight,omitempty" toml:"GrossWeight" yaml:"GrossWeight,omitempty"`
	NetWeight                     null.Float32 `boil:"NetWeight" json:"NetWeight,omitempty" toml:"NetWeight" yaml:"NetWeight,omitempty"`
	WeightUnit                    null.String  `boil:"WeightUnit" json:"WeightUnit,omitempty" toml:"WeightUnit" yaml:"WeightUnit,omitempty"`
	InternalCapacityQuantity      null.Float32 `boil:"InternalCapacityQuantity" json:"InternalCapacityQuantity,omitempty" toml:"InternalCapacityQuantity" yaml:"InternalCapacityQuantity,omitempty"`
	InternalCapacityQuantityUnit  null.String  `boil:"InternalCapacityQuantityUnit" json:"InternalCapacityQuantityUnit,omitempty" toml:"InternalCapacityQuantityUnit" yaml:"InternalCapacityQuantityUnit,omitempty"`
	SizeOrDimensionText           null.String  `boil:"SizeOrDimensionText" json:"SizeOrDimensionText,omitempty" toml:"SizeOrDimensionText" yaml:"SizeOrDimensionText,omitempty"`
	ProductStandardID             null.String  `boil:"ProductStandardID" json:"ProductStandardID,omitempty" toml:"ProductStandardID" yaml:"ProductStandardID,omitempty"`
	IndustryStandardName          null.String  `boil:"IndustryStandardName" json:"IndustryStandardName,omitempty" toml:"IndustryStandardName" yaml:"IndustryStandardName,omitempty"`
	ItemCategory                  null.String  `boil:"ItemCategory" json:"ItemCategory,omitempty" toml:"ItemCategory" yaml:"ItemCategory,omitempty"`
	CountryOfOrigin               null.String  `boil:"CountryOfOrigin" json:"CountryOfOrigin,omitempty" toml:"CountryOfOrigin" yaml:"CountryOfOrigin,omitempty"`
	CountryOfOriginLanguage       null.String  `boil:"CountryOfOriginLanguage" json:"CountryOfOriginLanguage,omitempty" toml:"CountryOfOriginLanguage" yaml:"CountryOfOriginLanguage,omitempty"`
	BarcodeType                   null.String  `boil:"BarcodeType" json:"BarcodeType,omitempty" toml:"BarcodeType" yaml:"BarcodeType,omitempty"`
	ProductAccountAssignmentGroup null.String  `boil:"ProductAccountAssignmentGroup" json:"ProductAccountAssignmentGroup,omitempty" toml:"ProductAccountAssignmentGroup" yaml:"ProductAccountAssignmentGroup,omitempty"`
	CreationDate                  null.String  `boil:"CreationDate" json:"CreationDate,omitempty" toml:"CreationDate" yaml:"CreationDate,omitempty"`
	LastChangeDate                null.String  `boil:"LastChangeDate" json:"LastChangeDate,omitempty" toml:"LastChangeDate" yaml:"LastChangeDate,omitempty"`
	IsMarkedForDeletion           null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformProductMasterGeneralDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformProductMasterGeneralDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformProductMasterGeneralDatumColumns = struct {
	Product                       string
	ProductType                   string
	BaseUnit                      string
	ValidityStartDate             string
	ProductGroup                  string
	GrossWeight                   string
	NetWeight                     string
	WeightUnit                    string
	InternalCapacityQuantity      string
	InternalCapacityQuantityUnit  string
	SizeOrDimensionText           string
	ProductStandardID             string
	IndustryStandardName          string
	ItemCategory                  string
	CountryOfOrigin               string
	CountryOfOriginLanguage       string
	BarcodeType                   string
	ProductAccountAssignmentGroup string
	CreationDate                  string
	LastChangeDate                string
	IsMarkedForDeletion           string
}{
	Product:                       "Product",
	ProductType:                   "ProductType",
	BaseUnit:                      "BaseUnit",
	ValidityStartDate:             "ValidityStartDate",
	ProductGroup:                  "ProductGroup",
	GrossWeight:                   "GrossWeight",
	NetWeight:                     "NetWeight",
	WeightUnit:                    "WeightUnit",
	InternalCapacityQuantity:      "InternalCapacityQuantity",
	InternalCapacityQuantityUnit:  "InternalCapacityQuantityUnit",
	SizeOrDimensionText:           "SizeOrDimensionText",
	ProductStandardID:             "ProductStandardID",
	IndustryStandardName:          "IndustryStandardName",
	ItemCategory:                  "ItemCategory",
	CountryOfOrigin:               "CountryOfOrigin",
	CountryOfOriginLanguage:       "CountryOfOriginLanguage",
	BarcodeType:                   "BarcodeType",
	ProductAccountAssignmentGroup: "ProductAccountAssignmentGroup",
	CreationDate:                  "CreationDate",
	LastChangeDate:                "LastChangeDate",
	IsMarkedForDeletion:           "IsMarkedForDeletion",
}

var DataPlatformProductMasterGeneralDatumTableColumns = struct {
	Product                       string
	ProductType                   string
	BaseUnit                      string
	ValidityStartDate             string
	ProductGroup                  string
	GrossWeight                   string
	NetWeight                     string
	WeightUnit                    string
	InternalCapacityQuantity      string
	InternalCapacityQuantityUnit  string
	SizeOrDimensionText           string
	ProductStandardID             string
	IndustryStandardName          string
	ItemCategory                  string
	CountryOfOrigin               string
	CountryOfOriginLanguage       string
	BarcodeType                   string
	ProductAccountAssignmentGroup string
	CreationDate                  string
	LastChangeDate                string
	IsMarkedForDeletion           string
}{
	Product:                       "data_platform_product_master_general_data.Product",
	ProductType:                   "data_platform_product_master_general_data.ProductType",
	BaseUnit:                      "data_platform_product_master_general_data.BaseUnit",
	ValidityStartDate:             "data_platform_product_master_general_data.ValidityStartDate",
	ProductGroup:                  "data_platform_product_master_general_data.ProductGroup",
	GrossWeight:                   "data_platform_product_master_general_data.GrossWeight",
	NetWeight:                     "data_platform_product_master_general_data.NetWeight",
	WeightUnit:                    "data_platform_product_master_general_data.WeightUnit",
	InternalCapacityQuantity:      "data_platform_product_master_general_data.InternalCapacityQuantity",
	InternalCapacityQuantityUnit:  "data_platform_product_master_general_data.InternalCapacityQuantityUnit",
	SizeOrDimensionText:           "data_platform_product_master_general_data.SizeOrDimensionText",
	ProductStandardID:             "data_platform_product_master_general_data.ProductStandardID",
	IndustryStandardName:          "data_platform_product_master_general_data.IndustryStandardName",
	ItemCategory:                  "data_platform_product_master_general_data.ItemCategory",
	CountryOfOrigin:               "data_platform_product_master_general_data.CountryOfOrigin",
	CountryOfOriginLanguage:       "data_platform_product_master_general_data.CountryOfOriginLanguage",
	BarcodeType:                   "data_platform_product_master_general_data.BarcodeType",
	ProductAccountAssignmentGroup: "data_platform_product_master_general_data.ProductAccountAssignmentGroup",
	CreationDate:                  "data_platform_product_master_general_data.CreationDate",
	LastChangeDate:                "data_platform_product_master_general_data.LastChangeDate",
	IsMarkedForDeletion:           "data_platform_product_master_general_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformProductMasterGeneralDatumWhere = struct {
	Product                       whereHelperstring
	ProductType                   whereHelpernull_String
	BaseUnit                      whereHelpernull_String
	ValidityStartDate             whereHelpernull_String
	ProductGroup                  whereHelpernull_String
	GrossWeight                   whereHelpernull_Float32
	NetWeight                     whereHelpernull_Float32
	WeightUnit                    whereHelpernull_String
	InternalCapacityQuantity      whereHelpernull_Float32
	InternalCapacityQuantityUnit  whereHelpernull_String
	SizeOrDimensionText           whereHelpernull_String
	ProductStandardID             whereHelpernull_String
	IndustryStandardName          whereHelpernull_String
	ItemCategory                  whereHelpernull_String
	CountryOfOrigin               whereHelpernull_String
	CountryOfOriginLanguage       whereHelpernull_String
	BarcodeType                   whereHelpernull_String
	ProductAccountAssignmentGroup whereHelpernull_String
	CreationDate                  whereHelpernull_String
	LastChangeDate                whereHelpernull_String
	IsMarkedForDeletion           whereHelpernull_Bool
}{
	Product:                       whereHelperstring{field: "`data_platform_product_master_general_data`.`Product`"},
	ProductType:                   whereHelpernull_String{field: "`data_platform_product_master_general_data`.`ProductType`"},
	BaseUnit:                      whereHelpernull_String{field: "`data_platform_product_master_general_data`.`BaseUnit`"},
	ValidityStartDate:             whereHelpernull_String{field: "`data_platform_product_master_general_data`.`ValidityStartDate`"},
	ProductGroup:                  whereHelpernull_String{field: "`data_platform_product_master_general_data`.`ProductGroup`"},
	GrossWeight:                   whereHelpernull_Float32{field: "`data_platform_product_master_general_data`.`GrossWeight`"},
	NetWeight:                     whereHelpernull_Float32{field: "`data_platform_product_master_general_data`.`NetWeight`"},
	WeightUnit:                    whereHelpernull_String{field: "`data_platform_product_master_general_data`.`WeightUnit`"},
	InternalCapacityQuantity:      whereHelpernull_Float32{field: "`data_platform_product_master_general_data`.`InternalCapacityQuantity`"},
	InternalCapacityQuantityUnit:  whereHelpernull_String{field: "`data_platform_product_master_general_data`.`InternalCapacityQuantityUnit`"},
	SizeOrDimensionText:           whereHelpernull_String{field: "`data_platform_product_master_general_data`.`SizeOrDimensionText`"},
	ProductStandardID:             whereHelpernull_String{field: "`data_platform_product_master_general_data`.`ProductStandardID`"},
	IndustryStandardName:          whereHelpernull_String{field: "`data_platform_product_master_general_data`.`IndustryStandardName`"},
	ItemCategory:                  whereHelpernull_String{field: "`data_platform_product_master_general_data`.`ItemCategory`"},
	CountryOfOrigin:               whereHelpernull_String{field: "`data_platform_product_master_general_data`.`CountryOfOrigin`"},
	CountryOfOriginLanguage:       whereHelpernull_String{field: "`data_platform_product_master_general_data`.`CountryOfOriginLanguage`"},
	BarcodeType:                   whereHelpernull_String{field: "`data_platform_product_master_general_data`.`BarcodeType`"},
	ProductAccountAssignmentGroup: whereHelpernull_String{field: "`data_platform_product_master_general_data`.`ProductAccountAssignmentGroup`"},
	CreationDate:                  whereHelpernull_String{field: "`data_platform_product_master_general_data`.`CreationDate`"},
	LastChangeDate:                whereHelpernull_String{field: "`data_platform_product_master_general_data`.`LastChangeDate`"},
	IsMarkedForDeletion:           whereHelpernull_Bool{field: "`data_platform_product_master_general_data`.`IsMarkedForDeletion`"},
}

// DataPlatformProductMasterGeneralDatumRels is where relationship names are stored.
var DataPlatformProductMasterGeneralDatumRels = struct {
	ProductDataPlatformInspectionPlanHeaderData         string
	ProductDataPlatformPlannedOrderHeaderData           string
	ProductDataPlatformPlannedOrderItemData             string
	ProductDataPlatformProductStockProductStockDataOlds string
}{
	ProductDataPlatformInspectionPlanHeaderData:         "ProductDataPlatformInspectionPlanHeaderData",
	ProductDataPlatformPlannedOrderHeaderData:           "ProductDataPlatformPlannedOrderHeaderData",
	ProductDataPlatformPlannedOrderItemData:             "ProductDataPlatformPlannedOrderItemData",
	ProductDataPlatformProductStockProductStockDataOlds: "ProductDataPlatformProductStockProductStockDataOlds",
}

// dataPlatformProductMasterGeneralDatumR is where relationships are stored.
type dataPlatformProductMasterGeneralDatumR struct {
	ProductDataPlatformInspectionPlanHeaderData         DataPlatformInspectionPlanHeaderDatumSlice       `boil:"ProductDataPlatformInspectionPlanHeaderData" json:"ProductDataPlatformInspectionPlanHeaderData" toml:"ProductDataPlatformInspectionPlanHeaderData" yaml:"ProductDataPlatformInspectionPlanHeaderData"`
	ProductDataPlatformPlannedOrderHeaderData           DataPlatformPlannedOrderHeaderDatumSlice         `boil:"ProductDataPlatformPlannedOrderHeaderData" json:"ProductDataPlatformPlannedOrderHeaderData" toml:"ProductDataPlatformPlannedOrderHeaderData" yaml:"ProductDataPlatformPlannedOrderHeaderData"`
	ProductDataPlatformPlannedOrderItemData             DataPlatformPlannedOrderItemDatumSlice           `boil:"ProductDataPlatformPlannedOrderItemData" json:"ProductDataPlatformPlannedOrderItemData" toml:"ProductDataPlatformPlannedOrderItemData" yaml:"ProductDataPlatformPlannedOrderItemData"`
	ProductDataPlatformProductStockProductStockDataOlds DataPlatformProductStockProductStockDataOldSlice `boil:"ProductDataPlatformProductStockProductStockDataOlds" json:"ProductDataPlatformProductStockProductStockDataOlds" toml:"ProductDataPlatformProductStockProductStockDataOlds" yaml:"ProductDataPlatformProductStockProductStockDataOlds"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformProductMasterGeneralDatumR) NewStruct() *dataPlatformProductMasterGeneralDatumR {
	return &dataPlatformProductMasterGeneralDatumR{}
}

func (r *dataPlatformProductMasterGeneralDatumR) GetProductDataPlatformInspectionPlanHeaderData() DataPlatformInspectionPlanHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformInspectionPlanHeaderData
}

func (r *dataPlatformProductMasterGeneralDatumR) GetProductDataPlatformPlannedOrderHeaderData() DataPlatformPlannedOrderHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformPlannedOrderHeaderData
}

func (r *dataPlatformProductMasterGeneralDatumR) GetProductDataPlatformPlannedOrderItemData() DataPlatformPlannedOrderItemDatumSlice {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformPlannedOrderItemData
}

func (r *dataPlatformProductMasterGeneralDatumR) GetProductDataPlatformProductStockProductStockDataOlds() DataPlatformProductStockProductStockDataOldSlice {
	if r == nil {
		return nil
	}
	return r.ProductDataPlatformProductStockProductStockDataOlds
}

// dataPlatformProductMasterGeneralDatumL is where Load methods for each relationship are stored.
type dataPlatformProductMasterGeneralDatumL struct{}

var (
	dataPlatformProductMasterGeneralDatumAllColumns            = []string{"Product", "ProductType", "BaseUnit", "ValidityStartDate", "ProductGroup", "GrossWeight", "NetWeight", "WeightUnit", "InternalCapacityQuantity", "InternalCapacityQuantityUnit", "SizeOrDimensionText", "ProductStandardID", "IndustryStandardName", "ItemCategory", "CountryOfOrigin", "CountryOfOriginLanguage", "BarcodeType", "ProductAccountAssignmentGroup", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformProductMasterGeneralDatumColumnsWithoutDefault = []string{"Product", "ProductType", "BaseUnit", "ValidityStartDate", "ProductGroup", "GrossWeight", "NetWeight", "WeightUnit", "InternalCapacityQuantity", "InternalCapacityQuantityUnit", "SizeOrDimensionText", "ProductStandardID", "IndustryStandardName", "ItemCategory", "CountryOfOrigin", "CountryOfOriginLanguage", "BarcodeType", "ProductAccountAssignmentGroup", "CreationDate", "LastChangeDate", "IsMarkedForDeletion"}
	dataPlatformProductMasterGeneralDatumColumnsWithDefault    = []string{}
	dataPlatformProductMasterGeneralDatumPrimaryKeyColumns     = []string{"Product"}
	dataPlatformProductMasterGeneralDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformProductMasterGeneralDatumSlice is an alias for a slice of pointers to DataPlatformProductMasterGeneralDatum.
	// This should almost always be used instead of []DataPlatformProductMasterGeneralDatum.
	DataPlatformProductMasterGeneralDatumSlice []*DataPlatformProductMasterGeneralDatum

	dataPlatformProductMasterGeneralDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformProductMasterGeneralDatumType                 = reflect.TypeOf(&DataPlatformProductMasterGeneralDatum{})
	dataPlatformProductMasterGeneralDatumMapping              = queries.MakeStructMapping(dataPlatformProductMasterGeneralDatumType)
	dataPlatformProductMasterGeneralDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns)
	dataPlatformProductMasterGeneralDatumInsertCacheMut       sync.RWMutex
	dataPlatformProductMasterGeneralDatumInsertCache          = make(map[string]insertCache)
	dataPlatformProductMasterGeneralDatumUpdateCacheMut       sync.RWMutex
	dataPlatformProductMasterGeneralDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformProductMasterGeneralDatumUpsertCacheMut       sync.RWMutex
	dataPlatformProductMasterGeneralDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformProductMasterGeneralDatum record from the query.
func (q dataPlatformProductMasterGeneralDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformProductMasterGeneralDatum, error) {
	o := &DataPlatformProductMasterGeneralDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_product_master_general_data")
	}

	return o, nil
}

// All returns all DataPlatformProductMasterGeneralDatum records from the query.
func (q dataPlatformProductMasterGeneralDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformProductMasterGeneralDatumSlice, error) {
	var o []*DataPlatformProductMasterGeneralDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformProductMasterGeneralDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformProductMasterGeneralDatum records in the query.
func (q dataPlatformProductMasterGeneralDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_product_master_general_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformProductMasterGeneralDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_product_master_general_data exists")
	}

	return count > 0, nil
}

// ProductDataPlatformInspectionPlanHeaderData retrieves all the data_platform_inspection_plan_header_datum's DataPlatformInspectionPlanHeaderData with an executor via Product column.
func (o *DataPlatformProductMasterGeneralDatum) ProductDataPlatformInspectionPlanHeaderData(mods ...qm.QueryMod) dataPlatformInspectionPlanHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_inspection_plan_header_data`.`Product`=?", o.Product),
	)

	return DataPlatformInspectionPlanHeaderData(queryMods...)
}

// ProductDataPlatformPlannedOrderHeaderData retrieves all the data_platform_planned_order_header_datum's DataPlatformPlannedOrderHeaderData with an executor via Product column.
func (o *DataPlatformProductMasterGeneralDatum) ProductDataPlatformPlannedOrderHeaderData(mods ...qm.QueryMod) dataPlatformPlannedOrderHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_header_data`.`Product`=?", o.Product),
	)

	return DataPlatformPlannedOrderHeaderData(queryMods...)
}

// ProductDataPlatformPlannedOrderItemData retrieves all the data_platform_planned_order_item_datum's DataPlatformPlannedOrderItemData with an executor via Product column.
func (o *DataPlatformProductMasterGeneralDatum) ProductDataPlatformPlannedOrderItemData(mods ...qm.QueryMod) dataPlatformPlannedOrderItemDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_planned_order_item_data`.`Product`=?", o.Product),
	)

	return DataPlatformPlannedOrderItemData(queryMods...)
}

// ProductDataPlatformProductStockProductStockDataOlds retrieves all the data_platform_product_stock_product_stock_data_old's DataPlatformProductStockProductStockDataOlds with an executor via Product column.
func (o *DataPlatformProductMasterGeneralDatum) ProductDataPlatformProductStockProductStockDataOlds(mods ...qm.QueryMod) dataPlatformProductStockProductStockDataOldQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_product_stock_product_stock_data_old`.`Product`=?", o.Product),
	)

	return DataPlatformProductStockProductStockDataOlds(queryMods...)
}

// LoadProductDataPlatformInspectionPlanHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterGeneralDatumL) LoadProductDataPlatformInspectionPlanHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterGeneralDatum
	var object *DataPlatformProductMasterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterGeneralDatum.(*DataPlatformProductMasterGeneralDatum)
		if !ok {
			object = new(DataPlatformProductMasterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterGeneralDatum.(*[]*DataPlatformProductMasterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterGeneralDatumR{}
		}
		args = append(args, object.Product)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Product) {
					continue Outer
				}
			}

			args = append(args, obj.Product)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_inspection_plan_header_data`),
		qm.WhereIn(`data_platform_inspection_plan_header_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_inspection_plan_header_data")
	}

	var resultSlice []*DataPlatformInspectionPlanHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_inspection_plan_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_inspection_plan_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_inspection_plan_header_data")
	}

	if singular {
		object.R.ProductDataPlatformInspectionPlanHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Product, foreign.Product) {
				local.R.ProductDataPlatformInspectionPlanHeaderData = append(local.R.ProductDataPlatformInspectionPlanHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductDataPlatformPlannedOrderHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterGeneralDatumL) LoadProductDataPlatformPlannedOrderHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterGeneralDatum
	var object *DataPlatformProductMasterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterGeneralDatum.(*DataPlatformProductMasterGeneralDatum)
		if !ok {
			object = new(DataPlatformProductMasterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterGeneralDatum.(*[]*DataPlatformProductMasterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterGeneralDatumR{}
		}
		args = append(args, object.Product)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Product) {
					continue Outer
				}
			}

			args = append(args, obj.Product)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_header_data`),
		qm.WhereIn(`data_platform_planned_order_header_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_header_data")
	}

	var resultSlice []*DataPlatformPlannedOrderHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_header_data")
	}

	if singular {
		object.R.ProductDataPlatformPlannedOrderHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Product, foreign.Product) {
				local.R.ProductDataPlatformPlannedOrderHeaderData = append(local.R.ProductDataPlatformPlannedOrderHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductDataPlatformPlannedOrderItemData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterGeneralDatumL) LoadProductDataPlatformPlannedOrderItemData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterGeneralDatum
	var object *DataPlatformProductMasterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterGeneralDatum.(*DataPlatformProductMasterGeneralDatum)
		if !ok {
			object = new(DataPlatformProductMasterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterGeneralDatum.(*[]*DataPlatformProductMasterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterGeneralDatumR{}
		}
		args = append(args, object.Product)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterGeneralDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Product) {
					continue Outer
				}
			}

			args = append(args, obj.Product)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_planned_order_item_data`),
		qm.WhereIn(`data_platform_planned_order_item_data.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_planned_order_item_data")
	}

	var resultSlice []*DataPlatformPlannedOrderItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_planned_order_item_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_planned_order_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_planned_order_item_data")
	}

	if singular {
		object.R.ProductDataPlatformPlannedOrderItemData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Product, foreign.Product) {
				local.R.ProductDataPlatformPlannedOrderItemData = append(local.R.ProductDataPlatformPlannedOrderItemData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProductDataPlatformProductStockProductStockDataOlds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformProductMasterGeneralDatumL) LoadProductDataPlatformProductStockProductStockDataOlds(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformProductMasterGeneralDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformProductMasterGeneralDatum
	var object *DataPlatformProductMasterGeneralDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformProductMasterGeneralDatum.(*DataPlatformProductMasterGeneralDatum)
		if !ok {
			object = new(DataPlatformProductMasterGeneralDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformProductMasterGeneralDatum.(*[]*DataPlatformProductMasterGeneralDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformProductMasterGeneralDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformProductMasterGeneralDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformProductMasterGeneralDatumR{}
		}
		args = append(args, object.Product)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformProductMasterGeneralDatumR{}
			}

			for _, a := range args {
				if a == obj.Product {
					continue Outer
				}
			}

			args = append(args, obj.Product)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_stock_product_stock_data_old`),
		qm.WhereIn(`data_platform_product_stock_product_stock_data_old.Product in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_product_stock_product_stock_data_old")
	}

	var resultSlice []*DataPlatformProductStockProductStockDataOld
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_product_stock_product_stock_data_old")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_product_stock_product_stock_data_old")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_stock_product_stock_data_old")
	}

	if singular {
		object.R.ProductDataPlatformProductStockProductStockDataOlds = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Product == foreign.Product {
				local.R.ProductDataPlatformProductStockProductStockDataOlds = append(local.R.ProductDataPlatformProductStockProductStockDataOlds, foreign)
				break
			}
		}
	}

	return nil
}

// AddProductDataPlatformInspectionPlanHeaderData adds the given related objects to the existing relationships
// of the data_platform_product_master_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDataPlatformInspectionPlanHeaderData.
func (o *DataPlatformProductMasterGeneralDatum) AddProductDataPlatformInspectionPlanHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionPlanHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Product, o.Product)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_inspection_plan_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformInspectionPlanHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Product, rel.InspectionPlantBusinessPartner, rel.InspectionPlant, rel.InspectionPlan, rel.InspectionPlanGroup, rel.InspectionPlanInternalVersion}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Product, o.Product)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterGeneralDatumR{
			ProductDataPlatformInspectionPlanHeaderData: related,
		}
	} else {
		o.R.ProductDataPlatformInspectionPlanHeaderData = append(o.R.ProductDataPlatformInspectionPlanHeaderData, related...)
	}

	return nil
}

// SetProductDataPlatformInspectionPlanHeaderData removes all previously related items of the
// data_platform_product_master_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum's ProductDataPlatformInspectionPlanHeaderData accordingly.
// Replaces o.R.ProductDataPlatformInspectionPlanHeaderData with related.
func (o *DataPlatformProductMasterGeneralDatum) SetProductDataPlatformInspectionPlanHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformInspectionPlanHeaderDatum) error {
	query := "update `data_platform_inspection_plan_header_data` set `Product` = null where `Product` = ?"
	values := []interface{}{o.Product}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductDataPlatformInspectionPlanHeaderData = nil
	}

	return o.AddProductDataPlatformInspectionPlanHeaderData(ctx, exec, insert, related...)
}

// RemoveProductDataPlatformInspectionPlanHeaderData relationships from objects passed in.
// Removes related items from R.ProductDataPlatformInspectionPlanHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductMasterGeneralDatum) RemoveProductDataPlatformInspectionPlanHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformInspectionPlanHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Product, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Product")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductDataPlatformInspectionPlanHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductDataPlatformInspectionPlanHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.ProductDataPlatformInspectionPlanHeaderData[i] = o.R.ProductDataPlatformInspectionPlanHeaderData[ln-1]
			}
			o.R.ProductDataPlatformInspectionPlanHeaderData = o.R.ProductDataPlatformInspectionPlanHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductDataPlatformPlannedOrderHeaderData adds the given related objects to the existing relationships
// of the data_platform_product_master_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDataPlatformPlannedOrderHeaderData.
func (o *DataPlatformProductMasterGeneralDatum) AddProductDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Product, o.Product)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Product, rel.PlannedOrder}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Product, o.Product)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterGeneralDatumR{
			ProductDataPlatformPlannedOrderHeaderData: related,
		}
	} else {
		o.R.ProductDataPlatformPlannedOrderHeaderData = append(o.R.ProductDataPlatformPlannedOrderHeaderData, related...)
	}

	return nil
}

// SetProductDataPlatformPlannedOrderHeaderData removes all previously related items of the
// data_platform_product_master_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum's ProductDataPlatformPlannedOrderHeaderData accordingly.
// Replaces o.R.ProductDataPlatformPlannedOrderHeaderData with related.
func (o *DataPlatformProductMasterGeneralDatum) SetProductDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	query := "update `data_platform_planned_order_header_data` set `Product` = null where `Product` = ?"
	values := []interface{}{o.Product}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductDataPlatformPlannedOrderHeaderData = nil
	}

	return o.AddProductDataPlatformPlannedOrderHeaderData(ctx, exec, insert, related...)
}

// RemoveProductDataPlatformPlannedOrderHeaderData relationships from objects passed in.
// Removes related items from R.ProductDataPlatformPlannedOrderHeaderData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductMasterGeneralDatum) RemoveProductDataPlatformPlannedOrderHeaderData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderHeaderDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Product, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Product")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductDataPlatformPlannedOrderHeaderData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductDataPlatformPlannedOrderHeaderData)
			if ln > 1 && i < ln-1 {
				o.R.ProductDataPlatformPlannedOrderHeaderData[i] = o.R.ProductDataPlatformPlannedOrderHeaderData[ln-1]
			}
			o.R.ProductDataPlatformPlannedOrderHeaderData = o.R.ProductDataPlatformPlannedOrderHeaderData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductDataPlatformPlannedOrderItemData adds the given related objects to the existing relationships
// of the data_platform_product_master_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDataPlatformPlannedOrderItemData.
func (o *DataPlatformProductMasterGeneralDatum) AddProductDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Product, o.Product)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_planned_order_item_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPlannedOrderItemDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.Product, rel.PlannedOrder, rel.PlannedOrderItem}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Product, o.Product)
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterGeneralDatumR{
			ProductDataPlatformPlannedOrderItemData: related,
		}
	} else {
		o.R.ProductDataPlatformPlannedOrderItemData = append(o.R.ProductDataPlatformPlannedOrderItemData, related...)
	}

	return nil
}

// SetProductDataPlatformPlannedOrderItemData removes all previously related items of the
// data_platform_product_master_general_datum replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductDataPlatformProductMasterGeneralDatum's ProductDataPlatformPlannedOrderItemData accordingly.
// Replaces o.R.ProductDataPlatformPlannedOrderItemData with related.
func (o *DataPlatformProductMasterGeneralDatum) SetProductDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPlannedOrderItemDatum) error {
	query := "update `data_platform_planned_order_item_data` set `Product` = null where `Product` = ?"
	values := []interface{}{o.Product}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		o.R.ProductDataPlatformPlannedOrderItemData = nil
	}

	return o.AddProductDataPlatformPlannedOrderItemData(ctx, exec, insert, related...)
}

// RemoveProductDataPlatformPlannedOrderItemData relationships from objects passed in.
// Removes related items from R.ProductDataPlatformPlannedOrderItemData (uses pointer comparison, removal does not keep order)
func (o *DataPlatformProductMasterGeneralDatum) RemoveProductDataPlatformPlannedOrderItemData(ctx context.Context, exec boil.ContextExecutor, related ...*DataPlatformPlannedOrderItemDatum) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Product, nil)
		if err = rel.Update(ctx, exec, boil.Whitelist("Product")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductDataPlatformPlannedOrderItemData {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductDataPlatformPlannedOrderItemData)
			if ln > 1 && i < ln-1 {
				o.R.ProductDataPlatformPlannedOrderItemData[i] = o.R.ProductDataPlatformPlannedOrderItemData[ln-1]
			}
			o.R.ProductDataPlatformPlannedOrderItemData = o.R.ProductDataPlatformPlannedOrderItemData[:ln-1]
			break
		}
	}

	return nil
}

// AddProductDataPlatformProductStockProductStockDataOlds adds the given related objects to the existing relationships
// of the data_platform_product_master_general_datum, optionally inserting them as new records.
// Appends related to o.R.ProductDataPlatformProductStockProductStockDataOlds.
func (o *DataPlatformProductMasterGeneralDatum) AddProductDataPlatformProductStockProductStockDataOlds(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformProductStockProductStockDataOld) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Product = o.Product
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_product_stock_product_stock_data_old` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"Product"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformProductStockProductStockDataOldPrimaryKeyColumns),
			)
			values := []interface{}{o.Product, rel.BusinessPartner, rel.Product, rel.Plant}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Product = o.Product
		}
	}

	if o.R == nil {
		o.R = &dataPlatformProductMasterGeneralDatumR{
			ProductDataPlatformProductStockProductStockDataOlds: related,
		}
	} else {
		o.R.ProductDataPlatformProductStockProductStockDataOlds = append(o.R.ProductDataPlatformProductStockProductStockDataOlds, related...)
	}

	return nil
}

// DataPlatformProductMasterGeneralData retrieves all the records using an executor.
func DataPlatformProductMasterGeneralData(mods ...qm.QueryMod) dataPlatformProductMasterGeneralDatumQuery {
	mods = append(mods, qm.From("`data_platform_product_master_general_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_product_master_general_data`.*"})
	}

	return dataPlatformProductMasterGeneralDatumQuery{q}
}

// FindDataPlatformProductMasterGeneralDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformProductMasterGeneralDatum(ctx context.Context, exec boil.ContextExecutor, product string, selectCols ...string) (*DataPlatformProductMasterGeneralDatum, error) {
	dataPlatformProductMasterGeneralDatumObj := &DataPlatformProductMasterGeneralDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_product_master_general_data` where `Product`=?", sel,
	)

	q := queries.Raw(query, product)

	err := q.Bind(ctx, exec, dataPlatformProductMasterGeneralDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_product_master_general_data")
	}

	return dataPlatformProductMasterGeneralDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformProductMasterGeneralDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_general_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterGeneralDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformProductMasterGeneralDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterGeneralDatumInsertCache[key]
	dataPlatformProductMasterGeneralDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformProductMasterGeneralDatumAllColumns,
			dataPlatformProductMasterGeneralDatumColumnsWithDefault,
			dataPlatformProductMasterGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_product_master_general_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_product_master_general_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_product_master_general_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_product_master_general_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Product,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterGeneralDatumInsertCacheMut.Lock()
		dataPlatformProductMasterGeneralDatumInsertCache[key] = cache
		dataPlatformProductMasterGeneralDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformProductMasterGeneralDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformProductMasterGeneralDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformProductMasterGeneralDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformProductMasterGeneralDatumUpdateCache[key]
	dataPlatformProductMasterGeneralDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformProductMasterGeneralDatumAllColumns,
			dataPlatformProductMasterGeneralDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_product_master_general_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, append(wl, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_product_master_general_data row")
	}

	if !cached {
		dataPlatformProductMasterGeneralDatumUpdateCacheMut.Lock()
		dataPlatformProductMasterGeneralDatumUpdateCache[key] = cache
		dataPlatformProductMasterGeneralDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformProductMasterGeneralDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_product_master_general_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformProductMasterGeneralDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_product_master_general_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformProductMasterGeneralDatum slice")
	}

	return nil
}

var mySQLDataPlatformProductMasterGeneralDatumUniqueColumns = []string{
	"Product",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformProductMasterGeneralDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_product_master_general_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformProductMasterGeneralDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformProductMasterGeneralDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformProductMasterGeneralDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformProductMasterGeneralDatumUpsertCache[key]
	dataPlatformProductMasterGeneralDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformProductMasterGeneralDatumAllColumns,
			dataPlatformProductMasterGeneralDatumColumnsWithDefault,
			dataPlatformProductMasterGeneralDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformProductMasterGeneralDatumAllColumns,
			dataPlatformProductMasterGeneralDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_product_master_general_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_product_master_general_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_product_master_general_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_product_master_general_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformProductMasterGeneralDatumType, dataPlatformProductMasterGeneralDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_product_master_general_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_product_master_general_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformProductMasterGeneralDatumUpsertCacheMut.Lock()
		dataPlatformProductMasterGeneralDatumUpsertCache[key] = cache
		dataPlatformProductMasterGeneralDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformProductMasterGeneralDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformProductMasterGeneralDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformProductMasterGeneralDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformProductMasterGeneralDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_product_master_general_data` WHERE `Product`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_product_master_general_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformProductMasterGeneralDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformProductMasterGeneralDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_product_master_general_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformProductMasterGeneralDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_product_master_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformProductMasterGeneralDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformProductMasterGeneralDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformProductMasterGeneralDatum(ctx, exec, o.Product)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformProductMasterGeneralDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformProductMasterGeneralDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformProductMasterGeneralDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_product_master_general_data`.* FROM `data_platform_product_master_general_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformProductMasterGeneralDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformProductMasterGeneralDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformProductMasterGeneralDatumExists checks if the DataPlatformProductMasterGeneralDatum row exists.
func DataPlatformProductMasterGeneralDatumExists(ctx context.Context, exec boil.ContextExecutor, product string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_product_master_general_data` where `Product`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, product)
	}
	row := exec.QueryRowContext(ctx, sql, product)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_product_master_general_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformProductMasterGeneralDatum row exists.
func (o *DataPlatformProductMasterGeneralDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformProductMasterGeneralDatumExists(ctx, exec, o.Product)
}
