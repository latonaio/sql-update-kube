// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformCaChainCaChainDatum is an object representing the database table.
type DataPlatformCaChainCaChainDatum struct {
	CertificateAuthorityChain string    `boil:"CertificateAuthorityChain" json:"CertificateAuthorityChain" toml:"CertificateAuthorityChain" yaml:"CertificateAuthorityChain"`
	DataIssuer                int       `boil:"DataIssuer" json:"DataIssuer" toml:"DataIssuer" yaml:"DataIssuer"`
	DataAuthorizer            int       `boil:"DataAuthorizer" json:"DataAuthorizer" toml:"DataAuthorizer" yaml:"DataAuthorizer"`
	DataDistributor           int       `boil:"DataDistributor" json:"DataDistributor" toml:"DataDistributor" yaml:"DataDistributor"`
	CreationDate              string    `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	CreationTime              string    `boil:"CreationTime" json:"CreationTime" toml:"CreationTime" yaml:"CreationTime"`
	LastChangeDate            string    `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	LastChangeTime            string    `boil:"LastChangeTime" json:"LastChangeTime" toml:"LastChangeTime" yaml:"LastChangeTime"`
	IsMarkedForDeletion       null.Bool `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`

	R *dataPlatformCaChainCaChainDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformCaChainCaChainDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformCaChainCaChainDatumColumns = struct {
	CertificateAuthorityChain string
	DataIssuer                string
	DataAuthorizer            string
	DataDistributor           string
	CreationDate              string
	CreationTime              string
	LastChangeDate            string
	LastChangeTime            string
	IsMarkedForDeletion       string
}{
	CertificateAuthorityChain: "CertificateAuthorityChain",
	DataIssuer:                "DataIssuer",
	DataAuthorizer:            "DataAuthorizer",
	DataDistributor:           "DataDistributor",
	CreationDate:              "CreationDate",
	CreationTime:              "CreationTime",
	LastChangeDate:            "LastChangeDate",
	LastChangeTime:            "LastChangeTime",
	IsMarkedForDeletion:       "IsMarkedForDeletion",
}

var DataPlatformCaChainCaChainDatumTableColumns = struct {
	CertificateAuthorityChain string
	DataIssuer                string
	DataAuthorizer            string
	DataDistributor           string
	CreationDate              string
	CreationTime              string
	LastChangeDate            string
	LastChangeTime            string
	IsMarkedForDeletion       string
}{
	CertificateAuthorityChain: "data_platform_ca_chain_ca_chain_data.CertificateAuthorityChain",
	DataIssuer:                "data_platform_ca_chain_ca_chain_data.DataIssuer",
	DataAuthorizer:            "data_platform_ca_chain_ca_chain_data.DataAuthorizer",
	DataDistributor:           "data_platform_ca_chain_ca_chain_data.DataDistributor",
	CreationDate:              "data_platform_ca_chain_ca_chain_data.CreationDate",
	CreationTime:              "data_platform_ca_chain_ca_chain_data.CreationTime",
	LastChangeDate:            "data_platform_ca_chain_ca_chain_data.LastChangeDate",
	LastChangeTime:            "data_platform_ca_chain_ca_chain_data.LastChangeTime",
	IsMarkedForDeletion:       "data_platform_ca_chain_ca_chain_data.IsMarkedForDeletion",
}

// Generated where

var DataPlatformCaChainCaChainDatumWhere = struct {
	CertificateAuthorityChain whereHelperstring
	DataIssuer                whereHelperint
	DataAuthorizer            whereHelperint
	DataDistributor           whereHelperint
	CreationDate              whereHelperstring
	CreationTime              whereHelperstring
	LastChangeDate            whereHelperstring
	LastChangeTime            whereHelperstring
	IsMarkedForDeletion       whereHelpernull_Bool
}{
	CertificateAuthorityChain: whereHelperstring{field: "`data_platform_ca_chain_ca_chain_data`.`CertificateAuthorityChain`"},
	DataIssuer:                whereHelperint{field: "`data_platform_ca_chain_ca_chain_data`.`DataIssuer`"},
	DataAuthorizer:            whereHelperint{field: "`data_platform_ca_chain_ca_chain_data`.`DataAuthorizer`"},
	DataDistributor:           whereHelperint{field: "`data_platform_ca_chain_ca_chain_data`.`DataDistributor`"},
	CreationDate:              whereHelperstring{field: "`data_platform_ca_chain_ca_chain_data`.`CreationDate`"},
	CreationTime:              whereHelperstring{field: "`data_platform_ca_chain_ca_chain_data`.`CreationTime`"},
	LastChangeDate:            whereHelperstring{field: "`data_platform_ca_chain_ca_chain_data`.`LastChangeDate`"},
	LastChangeTime:            whereHelperstring{field: "`data_platform_ca_chain_ca_chain_data`.`LastChangeTime`"},
	IsMarkedForDeletion:       whereHelpernull_Bool{field: "`data_platform_ca_chain_ca_chain_data`.`IsMarkedForDeletion`"},
}

// DataPlatformCaChainCaChainDatumRels is where relationship names are stored.
var DataPlatformCaChainCaChainDatumRels = struct {
}{}

// dataPlatformCaChainCaChainDatumR is where relationships are stored.
type dataPlatformCaChainCaChainDatumR struct {
}

// NewStruct creates a new relationship struct
func (*dataPlatformCaChainCaChainDatumR) NewStruct() *dataPlatformCaChainCaChainDatumR {
	return &dataPlatformCaChainCaChainDatumR{}
}

// dataPlatformCaChainCaChainDatumL is where Load methods for each relationship are stored.
type dataPlatformCaChainCaChainDatumL struct{}

var (
	dataPlatformCaChainCaChainDatumAllColumns            = []string{"CertificateAuthorityChain", "DataIssuer", "DataAuthorizer", "DataDistributor", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformCaChainCaChainDatumColumnsWithoutDefault = []string{"CertificateAuthorityChain", "DataIssuer", "DataAuthorizer", "DataDistributor", "CreationDate", "CreationTime", "LastChangeDate", "LastChangeTime", "IsMarkedForDeletion"}
	dataPlatformCaChainCaChainDatumColumnsWithDefault    = []string{}
	dataPlatformCaChainCaChainDatumPrimaryKeyColumns     = []string{"CertificateAuthorityChain"}
	dataPlatformCaChainCaChainDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformCaChainCaChainDatumSlice is an alias for a slice of pointers to DataPlatformCaChainCaChainDatum.
	// This should almost always be used instead of []DataPlatformCaChainCaChainDatum.
	DataPlatformCaChainCaChainDatumSlice []*DataPlatformCaChainCaChainDatum

	dataPlatformCaChainCaChainDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformCaChainCaChainDatumType                 = reflect.TypeOf(&DataPlatformCaChainCaChainDatum{})
	dataPlatformCaChainCaChainDatumMapping              = queries.MakeStructMapping(dataPlatformCaChainCaChainDatumType)
	dataPlatformCaChainCaChainDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformCaChainCaChainDatumType, dataPlatformCaChainCaChainDatumMapping, dataPlatformCaChainCaChainDatumPrimaryKeyColumns)
	dataPlatformCaChainCaChainDatumInsertCacheMut       sync.RWMutex
	dataPlatformCaChainCaChainDatumInsertCache          = make(map[string]insertCache)
	dataPlatformCaChainCaChainDatumUpdateCacheMut       sync.RWMutex
	dataPlatformCaChainCaChainDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformCaChainCaChainDatumUpsertCacheMut       sync.RWMutex
	dataPlatformCaChainCaChainDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformCaChainCaChainDatum record from the query.
func (q dataPlatformCaChainCaChainDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformCaChainCaChainDatum, error) {
	o := &DataPlatformCaChainCaChainDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_ca_chain_ca_chain_data")
	}

	return o, nil
}

// All returns all DataPlatformCaChainCaChainDatum records from the query.
func (q dataPlatformCaChainCaChainDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformCaChainCaChainDatumSlice, error) {
	var o []*DataPlatformCaChainCaChainDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformCaChainCaChainDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformCaChainCaChainDatum records in the query.
func (q dataPlatformCaChainCaChainDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_ca_chain_ca_chain_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformCaChainCaChainDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_ca_chain_ca_chain_data exists")
	}

	return count > 0, nil
}

// DataPlatformCaChainCaChainData retrieves all the records using an executor.
func DataPlatformCaChainCaChainData(mods ...qm.QueryMod) dataPlatformCaChainCaChainDatumQuery {
	mods = append(mods, qm.From("`data_platform_ca_chain_ca_chain_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_ca_chain_ca_chain_data`.*"})
	}

	return dataPlatformCaChainCaChainDatumQuery{q}
}

// FindDataPlatformCaChainCaChainDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformCaChainCaChainDatum(ctx context.Context, exec boil.ContextExecutor, certificateAuthorityChain string, selectCols ...string) (*DataPlatformCaChainCaChainDatum, error) {
	dataPlatformCaChainCaChainDatumObj := &DataPlatformCaChainCaChainDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_ca_chain_ca_chain_data` where `CertificateAuthorityChain`=?", sel,
	)

	q := queries.Raw(query, certificateAuthorityChain)

	err := q.Bind(ctx, exec, dataPlatformCaChainCaChainDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_ca_chain_ca_chain_data")
	}

	return dataPlatformCaChainCaChainDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformCaChainCaChainDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_ca_chain_ca_chain_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformCaChainCaChainDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformCaChainCaChainDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformCaChainCaChainDatumInsertCache[key]
	dataPlatformCaChainCaChainDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformCaChainCaChainDatumAllColumns,
			dataPlatformCaChainCaChainDatumColumnsWithDefault,
			dataPlatformCaChainCaChainDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformCaChainCaChainDatumType, dataPlatformCaChainCaChainDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformCaChainCaChainDatumType, dataPlatformCaChainCaChainDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_ca_chain_ca_chain_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_ca_chain_ca_chain_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_ca_chain_ca_chain_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformCaChainCaChainDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_ca_chain_ca_chain_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.CertificateAuthorityChain,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_ca_chain_ca_chain_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformCaChainCaChainDatumInsertCacheMut.Lock()
		dataPlatformCaChainCaChainDatumInsertCache[key] = cache
		dataPlatformCaChainCaChainDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformCaChainCaChainDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformCaChainCaChainDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformCaChainCaChainDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformCaChainCaChainDatumUpdateCache[key]
	dataPlatformCaChainCaChainDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformCaChainCaChainDatumAllColumns,
			dataPlatformCaChainCaChainDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_ca_chain_ca_chain_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_ca_chain_ca_chain_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformCaChainCaChainDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformCaChainCaChainDatumType, dataPlatformCaChainCaChainDatumMapping, append(wl, dataPlatformCaChainCaChainDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_ca_chain_ca_chain_data row")
	}

	if !cached {
		dataPlatformCaChainCaChainDatumUpdateCacheMut.Lock()
		dataPlatformCaChainCaChainDatumUpdateCache[key] = cache
		dataPlatformCaChainCaChainDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformCaChainCaChainDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_ca_chain_ca_chain_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformCaChainCaChainDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCaChainCaChainDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_ca_chain_ca_chain_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCaChainCaChainDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformCaChainCaChainDatum slice")
	}

	return nil
}

var mySQLDataPlatformCaChainCaChainDatumUniqueColumns = []string{
	"CertificateAuthorityChain",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformCaChainCaChainDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_ca_chain_ca_chain_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformCaChainCaChainDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformCaChainCaChainDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformCaChainCaChainDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformCaChainCaChainDatumUpsertCache[key]
	dataPlatformCaChainCaChainDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformCaChainCaChainDatumAllColumns,
			dataPlatformCaChainCaChainDatumColumnsWithDefault,
			dataPlatformCaChainCaChainDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformCaChainCaChainDatumAllColumns,
			dataPlatformCaChainCaChainDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_ca_chain_ca_chain_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_ca_chain_ca_chain_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_ca_chain_ca_chain_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformCaChainCaChainDatumType, dataPlatformCaChainCaChainDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformCaChainCaChainDatumType, dataPlatformCaChainCaChainDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_ca_chain_ca_chain_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformCaChainCaChainDatumType, dataPlatformCaChainCaChainDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_ca_chain_ca_chain_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_ca_chain_ca_chain_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformCaChainCaChainDatumUpsertCacheMut.Lock()
		dataPlatformCaChainCaChainDatumUpsertCache[key] = cache
		dataPlatformCaChainCaChainDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformCaChainCaChainDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformCaChainCaChainDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformCaChainCaChainDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformCaChainCaChainDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_ca_chain_ca_chain_data` WHERE `CertificateAuthorityChain`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_ca_chain_ca_chain_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformCaChainCaChainDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformCaChainCaChainDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_ca_chain_ca_chain_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformCaChainCaChainDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCaChainCaChainDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_ca_chain_ca_chain_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCaChainCaChainDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformCaChainCaChainDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformCaChainCaChainDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformCaChainCaChainDatum(ctx, exec, o.CertificateAuthorityChain)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformCaChainCaChainDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformCaChainCaChainDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformCaChainCaChainDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_ca_chain_ca_chain_data`.* FROM `data_platform_ca_chain_ca_chain_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformCaChainCaChainDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformCaChainCaChainDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformCaChainCaChainDatumExists checks if the DataPlatformCaChainCaChainDatum row exists.
func DataPlatformCaChainCaChainDatumExists(ctx context.Context, exec boil.ContextExecutor, certificateAuthorityChain string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_ca_chain_ca_chain_data` where `CertificateAuthorityChain`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, certificateAuthorityChain)
	}
	row := exec.QueryRowContext(ctx, sql, certificateAuthorityChain)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_ca_chain_ca_chain_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformCaChainCaChainDatum row exists.
func (o *DataPlatformCaChainCaChainDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformCaChainCaChainDatumExists(ctx, exec, o.CertificateAuthorityChain)
}
