// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformPaymentTermsPaymentTermsDatum is an object representing the database table.
type DataPlatformPaymentTermsPaymentTermsDatum struct {
	PaymentTerms                string   `boil:"PaymentTerms" json:"PaymentTerms" toml:"PaymentTerms" yaml:"PaymentTerms"`
	BaseDate                    int      `boil:"BaseDate" json:"BaseDate" toml:"BaseDate" yaml:"BaseDate"`
	BaseDateCalcAddMonth        null.Int `boil:"BaseDateCalcAddMonth" json:"BaseDateCalcAddMonth,omitempty" toml:"BaseDateCalcAddMonth" yaml:"BaseDateCalcAddMonth,omitempty"`
	BaseDateCalcFixedDate       null.Int `boil:"BaseDateCalcFixedDate" json:"BaseDateCalcFixedDate,omitempty" toml:"BaseDateCalcFixedDate" yaml:"BaseDateCalcFixedDate,omitempty"`
	PaymentDueDateCalcAddMonth  null.Int `boil:"PaymentDueDateCalcAddMonth" json:"PaymentDueDateCalcAddMonth,omitempty" toml:"PaymentDueDateCalcAddMonth" yaml:"PaymentDueDateCalcAddMonth,omitempty"`
	PaymentDueDateCalcFixedDate null.Int `boil:"PaymentDueDateCalcFixedDate" json:"PaymentDueDateCalcFixedDate,omitempty" toml:"PaymentDueDateCalcFixedDate" yaml:"PaymentDueDateCalcFixedDate,omitempty"`

	R *dataPlatformPaymentTermsPaymentTermsDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformPaymentTermsPaymentTermsDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformPaymentTermsPaymentTermsDatumColumns = struct {
	PaymentTerms                string
	BaseDate                    string
	BaseDateCalcAddMonth        string
	BaseDateCalcFixedDate       string
	PaymentDueDateCalcAddMonth  string
	PaymentDueDateCalcFixedDate string
}{
	PaymentTerms:                "PaymentTerms",
	BaseDate:                    "BaseDate",
	BaseDateCalcAddMonth:        "BaseDateCalcAddMonth",
	BaseDateCalcFixedDate:       "BaseDateCalcFixedDate",
	PaymentDueDateCalcAddMonth:  "PaymentDueDateCalcAddMonth",
	PaymentDueDateCalcFixedDate: "PaymentDueDateCalcFixedDate",
}

var DataPlatformPaymentTermsPaymentTermsDatumTableColumns = struct {
	PaymentTerms                string
	BaseDate                    string
	BaseDateCalcAddMonth        string
	BaseDateCalcFixedDate       string
	PaymentDueDateCalcAddMonth  string
	PaymentDueDateCalcFixedDate string
}{
	PaymentTerms:                "data_platform_payment_terms_payment_terms_data.PaymentTerms",
	BaseDate:                    "data_platform_payment_terms_payment_terms_data.BaseDate",
	BaseDateCalcAddMonth:        "data_platform_payment_terms_payment_terms_data.BaseDateCalcAddMonth",
	BaseDateCalcFixedDate:       "data_platform_payment_terms_payment_terms_data.BaseDateCalcFixedDate",
	PaymentDueDateCalcAddMonth:  "data_platform_payment_terms_payment_terms_data.PaymentDueDateCalcAddMonth",
	PaymentDueDateCalcFixedDate: "data_platform_payment_terms_payment_terms_data.PaymentDueDateCalcFixedDate",
}

// Generated where

var DataPlatformPaymentTermsPaymentTermsDatumWhere = struct {
	PaymentTerms                whereHelperstring
	BaseDate                    whereHelperint
	BaseDateCalcAddMonth        whereHelpernull_Int
	BaseDateCalcFixedDate       whereHelpernull_Int
	PaymentDueDateCalcAddMonth  whereHelpernull_Int
	PaymentDueDateCalcFixedDate whereHelpernull_Int
}{
	PaymentTerms:                whereHelperstring{field: "`data_platform_payment_terms_payment_terms_data`.`PaymentTerms`"},
	BaseDate:                    whereHelperint{field: "`data_platform_payment_terms_payment_terms_data`.`BaseDate`"},
	BaseDateCalcAddMonth:        whereHelpernull_Int{field: "`data_platform_payment_terms_payment_terms_data`.`BaseDateCalcAddMonth`"},
	BaseDateCalcFixedDate:       whereHelpernull_Int{field: "`data_platform_payment_terms_payment_terms_data`.`BaseDateCalcFixedDate`"},
	PaymentDueDateCalcAddMonth:  whereHelpernull_Int{field: "`data_platform_payment_terms_payment_terms_data`.`PaymentDueDateCalcAddMonth`"},
	PaymentDueDateCalcFixedDate: whereHelpernull_Int{field: "`data_platform_payment_terms_payment_terms_data`.`PaymentDueDateCalcFixedDate`"},
}

// DataPlatformPaymentTermsPaymentTermsDatumRels is where relationship names are stored.
var DataPlatformPaymentTermsPaymentTermsDatumRels = struct {
	PaymentTermDataPlatformOrdersHeaderData                 string
	PaymentTermDataPlatformPaymentTermsPaymentTermsTextData string
	PaymentTermDataPlatformSCRTransactionData               string
}{
	PaymentTermDataPlatformOrdersHeaderData:                 "PaymentTermDataPlatformOrdersHeaderData",
	PaymentTermDataPlatformPaymentTermsPaymentTermsTextData: "PaymentTermDataPlatformPaymentTermsPaymentTermsTextData",
	PaymentTermDataPlatformSCRTransactionData:               "PaymentTermDataPlatformSCRTransactionData",
}

// dataPlatformPaymentTermsPaymentTermsDatumR is where relationships are stored.
type dataPlatformPaymentTermsPaymentTermsDatumR struct {
	PaymentTermDataPlatformOrdersHeaderData                 DataPlatformOrdersHeaderDatumSlice                 `boil:"PaymentTermDataPlatformOrdersHeaderData" json:"PaymentTermDataPlatformOrdersHeaderData" toml:"PaymentTermDataPlatformOrdersHeaderData" yaml:"PaymentTermDataPlatformOrdersHeaderData"`
	PaymentTermDataPlatformPaymentTermsPaymentTermsTextData DataPlatformPaymentTermsPaymentTermsTextDatumSlice `boil:"PaymentTermDataPlatformPaymentTermsPaymentTermsTextData" json:"PaymentTermDataPlatformPaymentTermsPaymentTermsTextData" toml:"PaymentTermDataPlatformPaymentTermsPaymentTermsTextData" yaml:"PaymentTermDataPlatformPaymentTermsPaymentTermsTextData"`
	PaymentTermDataPlatformSCRTransactionData               DataPlatformSCRTransactionDatumSlice               `boil:"PaymentTermDataPlatformSCRTransactionData" json:"PaymentTermDataPlatformSCRTransactionData" toml:"PaymentTermDataPlatformSCRTransactionData" yaml:"PaymentTermDataPlatformSCRTransactionData"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformPaymentTermsPaymentTermsDatumR) NewStruct() *dataPlatformPaymentTermsPaymentTermsDatumR {
	return &dataPlatformPaymentTermsPaymentTermsDatumR{}
}

func (r *dataPlatformPaymentTermsPaymentTermsDatumR) GetPaymentTermDataPlatformOrdersHeaderData() DataPlatformOrdersHeaderDatumSlice {
	if r == nil {
		return nil
	}
	return r.PaymentTermDataPlatformOrdersHeaderData
}

func (r *dataPlatformPaymentTermsPaymentTermsDatumR) GetPaymentTermDataPlatformPaymentTermsPaymentTermsTextData() DataPlatformPaymentTermsPaymentTermsTextDatumSlice {
	if r == nil {
		return nil
	}
	return r.PaymentTermDataPlatformPaymentTermsPaymentTermsTextData
}

func (r *dataPlatformPaymentTermsPaymentTermsDatumR) GetPaymentTermDataPlatformSCRTransactionData() DataPlatformSCRTransactionDatumSlice {
	if r == nil {
		return nil
	}
	return r.PaymentTermDataPlatformSCRTransactionData
}

// dataPlatformPaymentTermsPaymentTermsDatumL is where Load methods for each relationship are stored.
type dataPlatformPaymentTermsPaymentTermsDatumL struct{}

var (
	dataPlatformPaymentTermsPaymentTermsDatumAllColumns            = []string{"PaymentTerms", "BaseDate", "BaseDateCalcAddMonth", "BaseDateCalcFixedDate", "PaymentDueDateCalcAddMonth", "PaymentDueDateCalcFixedDate"}
	dataPlatformPaymentTermsPaymentTermsDatumColumnsWithoutDefault = []string{"PaymentTerms", "BaseDate", "BaseDateCalcAddMonth", "BaseDateCalcFixedDate", "PaymentDueDateCalcAddMonth", "PaymentDueDateCalcFixedDate"}
	dataPlatformPaymentTermsPaymentTermsDatumColumnsWithDefault    = []string{}
	dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyColumns     = []string{"PaymentTerms", "BaseDate"}
	dataPlatformPaymentTermsPaymentTermsDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformPaymentTermsPaymentTermsDatumSlice is an alias for a slice of pointers to DataPlatformPaymentTermsPaymentTermsDatum.
	// This should almost always be used instead of []DataPlatformPaymentTermsPaymentTermsDatum.
	DataPlatformPaymentTermsPaymentTermsDatumSlice []*DataPlatformPaymentTermsPaymentTermsDatum

	dataPlatformPaymentTermsPaymentTermsDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformPaymentTermsPaymentTermsDatumType                 = reflect.TypeOf(&DataPlatformPaymentTermsPaymentTermsDatum{})
	dataPlatformPaymentTermsPaymentTermsDatumMapping              = queries.MakeStructMapping(dataPlatformPaymentTermsPaymentTermsDatumType)
	dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformPaymentTermsPaymentTermsDatumType, dataPlatformPaymentTermsPaymentTermsDatumMapping, dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyColumns)
	dataPlatformPaymentTermsPaymentTermsDatumInsertCacheMut       sync.RWMutex
	dataPlatformPaymentTermsPaymentTermsDatumInsertCache          = make(map[string]insertCache)
	dataPlatformPaymentTermsPaymentTermsDatumUpdateCacheMut       sync.RWMutex
	dataPlatformPaymentTermsPaymentTermsDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformPaymentTermsPaymentTermsDatumUpsertCacheMut       sync.RWMutex
	dataPlatformPaymentTermsPaymentTermsDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformPaymentTermsPaymentTermsDatum record from the query.
func (q dataPlatformPaymentTermsPaymentTermsDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformPaymentTermsPaymentTermsDatum, error) {
	o := &DataPlatformPaymentTermsPaymentTermsDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_payment_terms_payment_terms_data")
	}

	return o, nil
}

// All returns all DataPlatformPaymentTermsPaymentTermsDatum records from the query.
func (q dataPlatformPaymentTermsPaymentTermsDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformPaymentTermsPaymentTermsDatumSlice, error) {
	var o []*DataPlatformPaymentTermsPaymentTermsDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformPaymentTermsPaymentTermsDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformPaymentTermsPaymentTermsDatum records in the query.
func (q dataPlatformPaymentTermsPaymentTermsDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_payment_terms_payment_terms_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformPaymentTermsPaymentTermsDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_payment_terms_payment_terms_data exists")
	}

	return count > 0, nil
}

// PaymentTermDataPlatformOrdersHeaderData retrieves all the data_platform_orders_header_datum's DataPlatformOrdersHeaderData with an executor via PaymentTerms column.
func (o *DataPlatformPaymentTermsPaymentTermsDatum) PaymentTermDataPlatformOrdersHeaderData(mods ...qm.QueryMod) dataPlatformOrdersHeaderDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_orders_header_data`.`PaymentTerms`=?", o.PaymentTerms),
	)

	return DataPlatformOrdersHeaderData(queryMods...)
}

// PaymentTermDataPlatformPaymentTermsPaymentTermsTextData retrieves all the data_platform_payment_terms_payment_terms_text_datum's DataPlatformPaymentTermsPaymentTermsTextData with an executor via PaymentTerms column.
func (o *DataPlatformPaymentTermsPaymentTermsDatum) PaymentTermDataPlatformPaymentTermsPaymentTermsTextData(mods ...qm.QueryMod) dataPlatformPaymentTermsPaymentTermsTextDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_payment_terms_payment_terms_text_data`.`PaymentTerms`=?", o.PaymentTerms),
	)

	return DataPlatformPaymentTermsPaymentTermsTextData(queryMods...)
}

// PaymentTermDataPlatformSCRTransactionData retrieves all the data_platform_scr_transaction_datum's DataPlatformSCRTransactionData with an executor via PaymentTerms column.
func (o *DataPlatformPaymentTermsPaymentTermsDatum) PaymentTermDataPlatformSCRTransactionData(mods ...qm.QueryMod) dataPlatformSCRTransactionDatumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`data_platform_scr_transaction_data`.`PaymentTerms`=?", o.PaymentTerms),
	)

	return DataPlatformSCRTransactionData(queryMods...)
}

// LoadPaymentTermDataPlatformOrdersHeaderData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPaymentTermsPaymentTermsDatumL) LoadPaymentTermDataPlatformOrdersHeaderData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPaymentTermsPaymentTermsDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPaymentTermsPaymentTermsDatum
	var object *DataPlatformPaymentTermsPaymentTermsDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPaymentTermsPaymentTermsDatum.(*DataPlatformPaymentTermsPaymentTermsDatum)
		if !ok {
			object = new(DataPlatformPaymentTermsPaymentTermsDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPaymentTermsPaymentTermsDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPaymentTermsPaymentTermsDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPaymentTermsPaymentTermsDatum.(*[]*DataPlatformPaymentTermsPaymentTermsDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPaymentTermsPaymentTermsDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPaymentTermsPaymentTermsDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPaymentTermsPaymentTermsDatumR{}
		}
		args = append(args, object.PaymentTerms)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPaymentTermsPaymentTermsDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentTerms {
					continue Outer
				}
			}

			args = append(args, obj.PaymentTerms)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_orders_header_data`),
		qm.WhereIn(`data_platform_orders_header_data.PaymentTerms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_orders_header_data")
	}

	var resultSlice []*DataPlatformOrdersHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_orders_header_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_orders_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_orders_header_data")
	}

	if singular {
		object.R.PaymentTermDataPlatformOrdersHeaderData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PaymentTerms == foreign.PaymentTerms {
				local.R.PaymentTermDataPlatformOrdersHeaderData = append(local.R.PaymentTermDataPlatformOrdersHeaderData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPaymentTermDataPlatformPaymentTermsPaymentTermsTextData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPaymentTermsPaymentTermsDatumL) LoadPaymentTermDataPlatformPaymentTermsPaymentTermsTextData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPaymentTermsPaymentTermsDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPaymentTermsPaymentTermsDatum
	var object *DataPlatformPaymentTermsPaymentTermsDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPaymentTermsPaymentTermsDatum.(*DataPlatformPaymentTermsPaymentTermsDatum)
		if !ok {
			object = new(DataPlatformPaymentTermsPaymentTermsDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPaymentTermsPaymentTermsDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPaymentTermsPaymentTermsDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPaymentTermsPaymentTermsDatum.(*[]*DataPlatformPaymentTermsPaymentTermsDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPaymentTermsPaymentTermsDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPaymentTermsPaymentTermsDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPaymentTermsPaymentTermsDatumR{}
		}
		args = append(args, object.PaymentTerms)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPaymentTermsPaymentTermsDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentTerms {
					continue Outer
				}
			}

			args = append(args, obj.PaymentTerms)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_terms_payment_terms_text_data`),
		qm.WhereIn(`data_platform_payment_terms_payment_terms_text_data.PaymentTerms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_payment_terms_payment_terms_text_data")
	}

	var resultSlice []*DataPlatformPaymentTermsPaymentTermsTextDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_payment_terms_payment_terms_text_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_payment_terms_payment_terms_text_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_terms_payment_terms_text_data")
	}

	if singular {
		object.R.PaymentTermDataPlatformPaymentTermsPaymentTermsTextData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PaymentTerms == foreign.PaymentTerms {
				local.R.PaymentTermDataPlatformPaymentTermsPaymentTermsTextData = append(local.R.PaymentTermDataPlatformPaymentTermsPaymentTermsTextData, foreign)
				break
			}
		}
	}

	return nil
}

// LoadPaymentTermDataPlatformSCRTransactionData allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (dataPlatformPaymentTermsPaymentTermsDatumL) LoadPaymentTermDataPlatformSCRTransactionData(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformPaymentTermsPaymentTermsDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformPaymentTermsPaymentTermsDatum
	var object *DataPlatformPaymentTermsPaymentTermsDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformPaymentTermsPaymentTermsDatum.(*DataPlatformPaymentTermsPaymentTermsDatum)
		if !ok {
			object = new(DataPlatformPaymentTermsPaymentTermsDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformPaymentTermsPaymentTermsDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformPaymentTermsPaymentTermsDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformPaymentTermsPaymentTermsDatum.(*[]*DataPlatformPaymentTermsPaymentTermsDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformPaymentTermsPaymentTermsDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformPaymentTermsPaymentTermsDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformPaymentTermsPaymentTermsDatumR{}
		}
		args = append(args, object.PaymentTerms)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformPaymentTermsPaymentTermsDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentTerms {
					continue Outer
				}
			}

			args = append(args, obj.PaymentTerms)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_transaction_data`),
		qm.WhereIn(`data_platform_scr_transaction_data.PaymentTerms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load data_platform_scr_transaction_data")
	}

	var resultSlice []*DataPlatformSCRTransactionDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice data_platform_scr_transaction_data")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on data_platform_scr_transaction_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_transaction_data")
	}

	if singular {
		object.R.PaymentTermDataPlatformSCRTransactionData = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PaymentTerms == foreign.PaymentTerms {
				local.R.PaymentTermDataPlatformSCRTransactionData = append(local.R.PaymentTermDataPlatformSCRTransactionData, foreign)
				break
			}
		}
	}

	return nil
}

// AddPaymentTermDataPlatformOrdersHeaderData adds the given related objects to the existing relationships
// of the data_platform_payment_terms_payment_terms_datum, optionally inserting them as new records.
// Appends related to o.R.PaymentTermDataPlatformOrdersHeaderData.
func (o *DataPlatformPaymentTermsPaymentTermsDatum) AddPaymentTermDataPlatformOrdersHeaderData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformOrdersHeaderDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PaymentTerms = o.PaymentTerms
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_orders_header_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PaymentTerms"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformOrdersHeaderDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PaymentTerms, rel.OrderID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PaymentTerms = o.PaymentTerms
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPaymentTermsPaymentTermsDatumR{
			PaymentTermDataPlatformOrdersHeaderData: related,
		}
	} else {
		o.R.PaymentTermDataPlatformOrdersHeaderData = append(o.R.PaymentTermDataPlatformOrdersHeaderData, related...)
	}

	return nil
}

// AddPaymentTermDataPlatformPaymentTermsPaymentTermsTextData adds the given related objects to the existing relationships
// of the data_platform_payment_terms_payment_terms_datum, optionally inserting them as new records.
// Appends related to o.R.PaymentTermDataPlatformPaymentTermsPaymentTermsTextData.
func (o *DataPlatformPaymentTermsPaymentTermsDatum) AddPaymentTermDataPlatformPaymentTermsPaymentTermsTextData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformPaymentTermsPaymentTermsTextDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PaymentTerms = o.PaymentTerms
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_payment_terms_payment_terms_text_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PaymentTerms"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformPaymentTermsPaymentTermsTextDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PaymentTerms, rel.PaymentTerms, rel.Language}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PaymentTerms = o.PaymentTerms
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPaymentTermsPaymentTermsDatumR{
			PaymentTermDataPlatformPaymentTermsPaymentTermsTextData: related,
		}
	} else {
		o.R.PaymentTermDataPlatformPaymentTermsPaymentTermsTextData = append(o.R.PaymentTermDataPlatformPaymentTermsPaymentTermsTextData, related...)
	}

	return nil
}

// AddPaymentTermDataPlatformSCRTransactionData adds the given related objects to the existing relationships
// of the data_platform_payment_terms_payment_terms_datum, optionally inserting them as new records.
// Appends related to o.R.PaymentTermDataPlatformSCRTransactionData.
func (o *DataPlatformPaymentTermsPaymentTermsDatum) AddPaymentTermDataPlatformSCRTransactionData(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DataPlatformSCRTransactionDatum) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PaymentTerms = o.PaymentTerms
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `data_platform_scr_transaction_data` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"PaymentTerms"}),
				strmangle.WhereClause("`", "`", 0, dataPlatformSCRTransactionDatumPrimaryKeyColumns),
			)
			values := []interface{}{o.PaymentTerms, rel.SupplyChainRelationshipID, rel.Buyer, rel.Seller}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PaymentTerms = o.PaymentTerms
		}
	}

	if o.R == nil {
		o.R = &dataPlatformPaymentTermsPaymentTermsDatumR{
			PaymentTermDataPlatformSCRTransactionData: related,
		}
	} else {
		o.R.PaymentTermDataPlatformSCRTransactionData = append(o.R.PaymentTermDataPlatformSCRTransactionData, related...)
	}

	return nil
}

// DataPlatformPaymentTermsPaymentTermsData retrieves all the records using an executor.
func DataPlatformPaymentTermsPaymentTermsData(mods ...qm.QueryMod) dataPlatformPaymentTermsPaymentTermsDatumQuery {
	mods = append(mods, qm.From("`data_platform_payment_terms_payment_terms_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_payment_terms_payment_terms_data`.*"})
	}

	return dataPlatformPaymentTermsPaymentTermsDatumQuery{q}
}

// FindDataPlatformPaymentTermsPaymentTermsDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformPaymentTermsPaymentTermsDatum(ctx context.Context, exec boil.ContextExecutor, paymentTerms string, baseDate int, selectCols ...string) (*DataPlatformPaymentTermsPaymentTermsDatum, error) {
	dataPlatformPaymentTermsPaymentTermsDatumObj := &DataPlatformPaymentTermsPaymentTermsDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_payment_terms_payment_terms_data` where `PaymentTerms`=? AND `BaseDate`=?", sel,
	)

	q := queries.Raw(query, paymentTerms, baseDate)

	err := q.Bind(ctx, exec, dataPlatformPaymentTermsPaymentTermsDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_payment_terms_payment_terms_data")
	}

	return dataPlatformPaymentTermsPaymentTermsDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformPaymentTermsPaymentTermsDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_payment_terms_payment_terms_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPaymentTermsPaymentTermsDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformPaymentTermsPaymentTermsDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformPaymentTermsPaymentTermsDatumInsertCache[key]
	dataPlatformPaymentTermsPaymentTermsDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformPaymentTermsPaymentTermsDatumAllColumns,
			dataPlatformPaymentTermsPaymentTermsDatumColumnsWithDefault,
			dataPlatformPaymentTermsPaymentTermsDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPaymentTermsPaymentTermsDatumType, dataPlatformPaymentTermsPaymentTermsDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformPaymentTermsPaymentTermsDatumType, dataPlatformPaymentTermsPaymentTermsDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_payment_terms_payment_terms_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_payment_terms_payment_terms_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_payment_terms_payment_terms_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_payment_terms_payment_terms_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PaymentTerms,
		o.BaseDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_payment_terms_payment_terms_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPaymentTermsPaymentTermsDatumInsertCacheMut.Lock()
		dataPlatformPaymentTermsPaymentTermsDatumInsertCache[key] = cache
		dataPlatformPaymentTermsPaymentTermsDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformPaymentTermsPaymentTermsDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformPaymentTermsPaymentTermsDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformPaymentTermsPaymentTermsDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformPaymentTermsPaymentTermsDatumUpdateCache[key]
	dataPlatformPaymentTermsPaymentTermsDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformPaymentTermsPaymentTermsDatumAllColumns,
			dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_payment_terms_payment_terms_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_payment_terms_payment_terms_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformPaymentTermsPaymentTermsDatumType, dataPlatformPaymentTermsPaymentTermsDatumMapping, append(wl, dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_payment_terms_payment_terms_data row")
	}

	if !cached {
		dataPlatformPaymentTermsPaymentTermsDatumUpdateCacheMut.Lock()
		dataPlatformPaymentTermsPaymentTermsDatumUpdateCache[key] = cache
		dataPlatformPaymentTermsPaymentTermsDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformPaymentTermsPaymentTermsDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_payment_terms_payment_terms_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformPaymentTermsPaymentTermsDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_payment_terms_payment_terms_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformPaymentTermsPaymentTermsDatum slice")
	}

	return nil
}

var mySQLDataPlatformPaymentTermsPaymentTermsDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformPaymentTermsPaymentTermsDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_payment_terms_payment_terms_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformPaymentTermsPaymentTermsDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformPaymentTermsPaymentTermsDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformPaymentTermsPaymentTermsDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformPaymentTermsPaymentTermsDatumUpsertCache[key]
	dataPlatformPaymentTermsPaymentTermsDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformPaymentTermsPaymentTermsDatumAllColumns,
			dataPlatformPaymentTermsPaymentTermsDatumColumnsWithDefault,
			dataPlatformPaymentTermsPaymentTermsDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformPaymentTermsPaymentTermsDatumAllColumns,
			dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_payment_terms_payment_terms_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_payment_terms_payment_terms_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_payment_terms_payment_terms_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformPaymentTermsPaymentTermsDatumType, dataPlatformPaymentTermsPaymentTermsDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformPaymentTermsPaymentTermsDatumType, dataPlatformPaymentTermsPaymentTermsDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_payment_terms_payment_terms_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformPaymentTermsPaymentTermsDatumType, dataPlatformPaymentTermsPaymentTermsDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_payment_terms_payment_terms_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_payment_terms_payment_terms_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformPaymentTermsPaymentTermsDatumUpsertCacheMut.Lock()
		dataPlatformPaymentTermsPaymentTermsDatumUpsertCache[key] = cache
		dataPlatformPaymentTermsPaymentTermsDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformPaymentTermsPaymentTermsDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformPaymentTermsPaymentTermsDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformPaymentTermsPaymentTermsDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_payment_terms_payment_terms_data` WHERE `PaymentTerms`=? AND `BaseDate`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_payment_terms_payment_terms_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformPaymentTermsPaymentTermsDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformPaymentTermsPaymentTermsDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_payment_terms_payment_terms_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformPaymentTermsPaymentTermsDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_payment_terms_payment_terms_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformPaymentTermsPaymentTermsDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformPaymentTermsPaymentTermsDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformPaymentTermsPaymentTermsDatum(ctx, exec, o.PaymentTerms, o.BaseDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformPaymentTermsPaymentTermsDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformPaymentTermsPaymentTermsDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_payment_terms_payment_terms_data`.* FROM `data_platform_payment_terms_payment_terms_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformPaymentTermsPaymentTermsDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformPaymentTermsPaymentTermsDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformPaymentTermsPaymentTermsDatumExists checks if the DataPlatformPaymentTermsPaymentTermsDatum row exists.
func DataPlatformPaymentTermsPaymentTermsDatumExists(ctx context.Context, exec boil.ContextExecutor, paymentTerms string, baseDate int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_payment_terms_payment_terms_data` where `PaymentTerms`=? AND `BaseDate`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, paymentTerms, baseDate)
	}
	row := exec.QueryRowContext(ctx, sql, paymentTerms, baseDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_payment_terms_payment_terms_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformPaymentTermsPaymentTermsDatum row exists.
func (o *DataPlatformPaymentTermsPaymentTermsDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformPaymentTermsPaymentTermsDatumExists(ctx, exec, o.PaymentTerms, o.BaseDate)
}
