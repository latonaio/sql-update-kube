// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DataPlatformQuotationsItemDatum is an object representing the database table.
type DataPlatformQuotationsItemDatum struct {
	Quotation                               int          `boil:"Quotation" json:"Quotation" toml:"Quotation" yaml:"Quotation"`
	QuotationItem                           int          `boil:"QuotationItem" json:"QuotationItem" toml:"QuotationItem" yaml:"QuotationItem"`
	QuotationItemCategory                   string       `boil:"QuotationItemCategory" json:"QuotationItemCategory" toml:"QuotationItemCategory" yaml:"QuotationItemCategory"`
	SupplyChainRelationshipID               int          `boil:"SupplyChainRelationshipID" json:"SupplyChainRelationshipID" toml:"SupplyChainRelationshipID" yaml:"SupplyChainRelationshipID"`
	Buyer                                   int          `boil:"Buyer" json:"Buyer" toml:"Buyer" yaml:"Buyer"`
	Seller                                  int          `boil:"Seller" json:"Seller" toml:"Seller" yaml:"Seller"`
	QuotationItemText                       string       `boil:"QuotationItemText" json:"QuotationItemText" toml:"QuotationItemText" yaml:"QuotationItemText"`
	QuotationItemTextByBuyer                string       `boil:"QuotationItemTextByBuyer" json:"QuotationItemTextByBuyer" toml:"QuotationItemTextByBuyer" yaml:"QuotationItemTextByBuyer"`
	QuotationItemTextBySeller               string       `boil:"QuotationItemTextBySeller" json:"QuotationItemTextBySeller" toml:"QuotationItemTextBySeller" yaml:"QuotationItemTextBySeller"`
	Product                                 string       `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	SizeOrDimensionText                     null.String  `boil:"SizeOrDimensionText" json:"SizeOrDimensionText,omitempty" toml:"SizeOrDimensionText" yaml:"SizeOrDimensionText,omitempty"`
	ProductStandardID                       null.String  `boil:"ProductStandardID" json:"ProductStandardID,omitempty" toml:"ProductStandardID" yaml:"ProductStandardID,omitempty"`
	ProductGroup                            null.String  `boil:"ProductGroup" json:"ProductGroup,omitempty" toml:"ProductGroup" yaml:"ProductGroup,omitempty"`
	ProductSpecification                    null.String  `boil:"ProductSpecification" json:"ProductSpecification,omitempty" toml:"ProductSpecification" yaml:"ProductSpecification,omitempty"`
	MarkingOfMaterial                       null.String  `boil:"MarkingOfMaterial" json:"MarkingOfMaterial,omitempty" toml:"MarkingOfMaterial" yaml:"MarkingOfMaterial,omitempty"`
	BaseUnit                                string       `boil:"BaseUnit" json:"BaseUnit" toml:"BaseUnit" yaml:"BaseUnit"`
	PricingDate                             string       `boil:"PricingDate" json:"PricingDate" toml:"PricingDate" yaml:"PricingDate"`
	PriceDetnExchangeRate                   null.Float32 `boil:"PriceDetnExchangeRate" json:"PriceDetnExchangeRate,omitempty" toml:"PriceDetnExchangeRate" yaml:"PriceDetnExchangeRate,omitempty"`
	RequestedDeliveryDate                   string       `boil:"RequestedDeliveryDate" json:"RequestedDeliveryDate" toml:"RequestedDeliveryDate" yaml:"RequestedDeliveryDate"`
	DeliveryUnit                            string       `boil:"DeliveryUnit" json:"DeliveryUnit" toml:"DeliveryUnit" yaml:"DeliveryUnit"`
	ServicesRenderingDate                   null.String  `boil:"ServicesRenderingDate" json:"ServicesRenderingDate,omitempty" toml:"ServicesRenderingDate" yaml:"ServicesRenderingDate,omitempty"`
	QuotationQuantityInBaseUnit             float32      `boil:"QuotationQuantityInBaseUnit" json:"QuotationQuantityInBaseUnit" toml:"QuotationQuantityInBaseUnit" yaml:"QuotationQuantityInBaseUnit"`
	QuotationQuantityInDeliveryUnit         float32      `boil:"QuotationQuantityInDeliveryUnit" json:"QuotationQuantityInDeliveryUnit" toml:"QuotationQuantityInDeliveryUnit" yaml:"QuotationQuantityInDeliveryUnit"`
	ItemWeightUnit                          null.String  `boil:"ItemWeightUnit" json:"ItemWeightUnit,omitempty" toml:"ItemWeightUnit" yaml:"ItemWeightUnit,omitempty"`
	ProductGrossWeight                      null.Float32 `boil:"ProductGrossWeight" json:"ProductGrossWeight,omitempty" toml:"ProductGrossWeight" yaml:"ProductGrossWeight,omitempty"`
	ItemGrossWeight                         null.Float32 `boil:"ItemGrossWeight" json:"ItemGrossWeight,omitempty" toml:"ItemGrossWeight" yaml:"ItemGrossWeight,omitempty"`
	ProductNetWeight                        null.Float32 `boil:"ProductNetWeight" json:"ProductNetWeight,omitempty" toml:"ProductNetWeight" yaml:"ProductNetWeight,omitempty"`
	ItemNetWeight                           null.Float32 `boil:"ItemNetWeight" json:"ItemNetWeight,omitempty" toml:"ItemNetWeight" yaml:"ItemNetWeight,omitempty"`
	InternalCapacityQuantity                null.Float32 `boil:"InternalCapacityQuantity" json:"InternalCapacityQuantity,omitempty" toml:"InternalCapacityQuantity" yaml:"InternalCapacityQuantity,omitempty"`
	InternalCapacityQuantityUnit            null.String  `boil:"InternalCapacityQuantityUnit" json:"InternalCapacityQuantityUnit,omitempty" toml:"InternalCapacityQuantityUnit" yaml:"InternalCapacityQuantityUnit,omitempty"`
	NetAmount                               float32      `boil:"NetAmount" json:"NetAmount" toml:"NetAmount" yaml:"NetAmount"`
	TaxAmount                               float32      `boil:"TaxAmount" json:"TaxAmount" toml:"TaxAmount" yaml:"TaxAmount"`
	GrossAmount                             float32      `boil:"GrossAmount" json:"GrossAmount" toml:"GrossAmount" yaml:"GrossAmount"`
	Incoterms                               null.String  `boil:"Incoterms" json:"Incoterms,omitempty" toml:"Incoterms" yaml:"Incoterms,omitempty"`
	TransactionTaxClassification            string       `boil:"TransactionTaxClassification" json:"TransactionTaxClassification" toml:"TransactionTaxClassification" yaml:"TransactionTaxClassification"`
	ProductTaxClassificationBillToCountry   null.String  `boil:"ProductTaxClassificationBillToCountry" json:"ProductTaxClassificationBillToCountry,omitempty" toml:"ProductTaxClassificationBillToCountry" yaml:"ProductTaxClassificationBillToCountry,omitempty"`
	ProductTaxClassificationBillFromCountry null.String  `boil:"ProductTaxClassificationBillFromCountry" json:"ProductTaxClassificationBillFromCountry,omitempty" toml:"ProductTaxClassificationBillFromCountry" yaml:"ProductTaxClassificationBillFromCountry,omitempty"`
	DefinedTaxClassification                null.String  `boil:"DefinedTaxClassification" json:"DefinedTaxClassification,omitempty" toml:"DefinedTaxClassification" yaml:"DefinedTaxClassification,omitempty"`
	AccountAssignmentGroup                  string       `boil:"AccountAssignmentGroup" json:"AccountAssignmentGroup" toml:"AccountAssignmentGroup" yaml:"AccountAssignmentGroup"`
	ProductAccountAssignmentGroup           string       `boil:"ProductAccountAssignmentGroup" json:"ProductAccountAssignmentGroup" toml:"ProductAccountAssignmentGroup" yaml:"ProductAccountAssignmentGroup"`
	PaymentTerms                            string       `boil:"PaymentTerms" json:"PaymentTerms" toml:"PaymentTerms" yaml:"PaymentTerms"`
	PaymentMethod                           string       `boil:"PaymentMethod" json:"PaymentMethod" toml:"PaymentMethod" yaml:"PaymentMethod"`
	Contract                                null.Int     `boil:"Contract" json:"Contract,omitempty" toml:"Contract" yaml:"Contract,omitempty"`
	ContractItem                            null.Int     `boil:"ContractItem" json:"ContractItem,omitempty" toml:"ContractItem" yaml:"ContractItem,omitempty"`
	Project                                 null.Int     `boil:"Project" json:"Project,omitempty" toml:"Project" yaml:"Project,omitempty"`
	WBSElement                              null.Int     `boil:"WBSElement" json:"WBSElement,omitempty" toml:"WBSElement" yaml:"WBSElement,omitempty"`
	AccountingExchangeRate                  null.Float32 `boil:"AccountingExchangeRate" json:"AccountingExchangeRate,omitempty" toml:"AccountingExchangeRate" yaml:"AccountingExchangeRate,omitempty"`
	ReferenceDocument                       null.Int     `boil:"ReferenceDocument" json:"ReferenceDocument,omitempty" toml:"ReferenceDocument" yaml:"ReferenceDocument,omitempty"`
	ReferenceDocumentItem                   null.Int     `boil:"ReferenceDocumentItem" json:"ReferenceDocumentItem,omitempty" toml:"ReferenceDocumentItem" yaml:"ReferenceDocumentItem,omitempty"`
	TaxCode                                 null.String  `boil:"TaxCode" json:"TaxCode,omitempty" toml:"TaxCode" yaml:"TaxCode,omitempty"`
	TaxRate                                 null.Float32 `boil:"TaxRate" json:"TaxRate,omitempty" toml:"TaxRate" yaml:"TaxRate,omitempty"`
	CountryOfOrigin                         null.String  `boil:"CountryOfOrigin" json:"CountryOfOrigin,omitempty" toml:"CountryOfOrigin" yaml:"CountryOfOrigin,omitempty"`
	CountryOfOriginLanguage                 null.String  `boil:"CountryOfOriginLanguage" json:"CountryOfOriginLanguage,omitempty" toml:"CountryOfOriginLanguage" yaml:"CountryOfOriginLanguage,omitempty"`
	ItemBlockStatus                         null.Bool    `boil:"ItemBlockStatus" json:"ItemBlockStatus,omitempty" toml:"ItemBlockStatus" yaml:"ItemBlockStatus,omitempty"`
	ExternalReferenceDocument               null.String  `boil:"ExternalReferenceDocument" json:"ExternalReferenceDocument,omitempty" toml:"ExternalReferenceDocument" yaml:"ExternalReferenceDocument,omitempty"`
	ExternalReferenceDocumentItem           null.String  `boil:"ExternalReferenceDocumentItem" json:"ExternalReferenceDocumentItem,omitempty" toml:"ExternalReferenceDocumentItem" yaml:"ExternalReferenceDocumentItem,omitempty"`
	CreationDate                            string       `boil:"CreationDate" json:"CreationDate" toml:"CreationDate" yaml:"CreationDate"`
	LastChangeDate                          string       `boil:"LastChangeDate" json:"LastChangeDate" toml:"LastChangeDate" yaml:"LastChangeDate"`
	IsCancelled                             null.Bool    `boil:"IsCancelled" json:"IsCancelled,omitempty" toml:"IsCancelled" yaml:"IsCancelled,omitempty"`
	IsMarkedForDeletion                     null.Bool    `boil:"IsMarkedForDeletion" json:"IsMarkedForDeletion,omitempty" toml:"IsMarkedForDeletion" yaml:"IsMarkedForDeletion,omitempty"`
	InspectionPlantBusinessPartner          null.Int     `boil:"InspectionPlantBusinessPartner" json:"InspectionPlantBusinessPartner,omitempty" toml:"InspectionPlantBusinessPartner" yaml:"InspectionPlantBusinessPartner,omitempty"`
	InspectionPlant                         null.String  `boil:"InspectionPlant" json:"InspectionPlant,omitempty" toml:"InspectionPlant" yaml:"InspectionPlant,omitempty"`
	InspectionPlan                          null.Int     `boil:"InspectionPlan" json:"InspectionPlan,omitempty" toml:"InspectionPlan" yaml:"InspectionPlan,omitempty"`
	InspectionLot                           null.Int     `boil:"InspectionLot" json:"InspectionLot,omitempty" toml:"InspectionLot" yaml:"InspectionLot,omitempty"`

	R *dataPlatformQuotationsItemDatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dataPlatformQuotationsItemDatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DataPlatformQuotationsItemDatumColumns = struct {
	Quotation                               string
	QuotationItem                           string
	QuotationItemCategory                   string
	SupplyChainRelationshipID               string
	Buyer                                   string
	Seller                                  string
	QuotationItemText                       string
	QuotationItemTextByBuyer                string
	QuotationItemTextBySeller               string
	Product                                 string
	SizeOrDimensionText                     string
	ProductStandardID                       string
	ProductGroup                            string
	ProductSpecification                    string
	MarkingOfMaterial                       string
	BaseUnit                                string
	PricingDate                             string
	PriceDetnExchangeRate                   string
	RequestedDeliveryDate                   string
	DeliveryUnit                            string
	ServicesRenderingDate                   string
	QuotationQuantityInBaseUnit             string
	QuotationQuantityInDeliveryUnit         string
	ItemWeightUnit                          string
	ProductGrossWeight                      string
	ItemGrossWeight                         string
	ProductNetWeight                        string
	ItemNetWeight                           string
	InternalCapacityQuantity                string
	InternalCapacityQuantityUnit            string
	NetAmount                               string
	TaxAmount                               string
	GrossAmount                             string
	Incoterms                               string
	TransactionTaxClassification            string
	ProductTaxClassificationBillToCountry   string
	ProductTaxClassificationBillFromCountry string
	DefinedTaxClassification                string
	AccountAssignmentGroup                  string
	ProductAccountAssignmentGroup           string
	PaymentTerms                            string
	PaymentMethod                           string
	Contract                                string
	ContractItem                            string
	Project                                 string
	WBSElement                              string
	AccountingExchangeRate                  string
	ReferenceDocument                       string
	ReferenceDocumentItem                   string
	TaxCode                                 string
	TaxRate                                 string
	CountryOfOrigin                         string
	CountryOfOriginLanguage                 string
	ItemBlockStatus                         string
	ExternalReferenceDocument               string
	ExternalReferenceDocumentItem           string
	CreationDate                            string
	LastChangeDate                          string
	IsCancelled                             string
	IsMarkedForDeletion                     string
	InspectionPlantBusinessPartner          string
	InspectionPlant                         string
	InspectionPlan                          string
	InspectionLot                           string
}{
	Quotation:                               "Quotation",
	QuotationItem:                           "QuotationItem",
	QuotationItemCategory:                   "QuotationItemCategory",
	SupplyChainRelationshipID:               "SupplyChainRelationshipID",
	Buyer:                                   "Buyer",
	Seller:                                  "Seller",
	QuotationItemText:                       "QuotationItemText",
	QuotationItemTextByBuyer:                "QuotationItemTextByBuyer",
	QuotationItemTextBySeller:               "QuotationItemTextBySeller",
	Product:                                 "Product",
	SizeOrDimensionText:                     "SizeOrDimensionText",
	ProductStandardID:                       "ProductStandardID",
	ProductGroup:                            "ProductGroup",
	ProductSpecification:                    "ProductSpecification",
	MarkingOfMaterial:                       "MarkingOfMaterial",
	BaseUnit:                                "BaseUnit",
	PricingDate:                             "PricingDate",
	PriceDetnExchangeRate:                   "PriceDetnExchangeRate",
	RequestedDeliveryDate:                   "RequestedDeliveryDate",
	DeliveryUnit:                            "DeliveryUnit",
	ServicesRenderingDate:                   "ServicesRenderingDate",
	QuotationQuantityInBaseUnit:             "QuotationQuantityInBaseUnit",
	QuotationQuantityInDeliveryUnit:         "QuotationQuantityInDeliveryUnit",
	ItemWeightUnit:                          "ItemWeightUnit",
	ProductGrossWeight:                      "ProductGrossWeight",
	ItemGrossWeight:                         "ItemGrossWeight",
	ProductNetWeight:                        "ProductNetWeight",
	ItemNetWeight:                           "ItemNetWeight",
	InternalCapacityQuantity:                "InternalCapacityQuantity",
	InternalCapacityQuantityUnit:            "InternalCapacityQuantityUnit",
	NetAmount:                               "NetAmount",
	TaxAmount:                               "TaxAmount",
	GrossAmount:                             "GrossAmount",
	Incoterms:                               "Incoterms",
	TransactionTaxClassification:            "TransactionTaxClassification",
	ProductTaxClassificationBillToCountry:   "ProductTaxClassificationBillToCountry",
	ProductTaxClassificationBillFromCountry: "ProductTaxClassificationBillFromCountry",
	DefinedTaxClassification:                "DefinedTaxClassification",
	AccountAssignmentGroup:                  "AccountAssignmentGroup",
	ProductAccountAssignmentGroup:           "ProductAccountAssignmentGroup",
	PaymentTerms:                            "PaymentTerms",
	PaymentMethod:                           "PaymentMethod",
	Contract:                                "Contract",
	ContractItem:                            "ContractItem",
	Project:                                 "Project",
	WBSElement:                              "WBSElement",
	AccountingExchangeRate:                  "AccountingExchangeRate",
	ReferenceDocument:                       "ReferenceDocument",
	ReferenceDocumentItem:                   "ReferenceDocumentItem",
	TaxCode:                                 "TaxCode",
	TaxRate:                                 "TaxRate",
	CountryOfOrigin:                         "CountryOfOrigin",
	CountryOfOriginLanguage:                 "CountryOfOriginLanguage",
	ItemBlockStatus:                         "ItemBlockStatus",
	ExternalReferenceDocument:               "ExternalReferenceDocument",
	ExternalReferenceDocumentItem:           "ExternalReferenceDocumentItem",
	CreationDate:                            "CreationDate",
	LastChangeDate:                          "LastChangeDate",
	IsCancelled:                             "IsCancelled",
	IsMarkedForDeletion:                     "IsMarkedForDeletion",
	InspectionPlantBusinessPartner:          "InspectionPlantBusinessPartner",
	InspectionPlant:                         "InspectionPlant",
	InspectionPlan:                          "InspectionPlan",
	InspectionLot:                           "InspectionLot",
}

var DataPlatformQuotationsItemDatumTableColumns = struct {
	Quotation                               string
	QuotationItem                           string
	QuotationItemCategory                   string
	SupplyChainRelationshipID               string
	Buyer                                   string
	Seller                                  string
	QuotationItemText                       string
	QuotationItemTextByBuyer                string
	QuotationItemTextBySeller               string
	Product                                 string
	SizeOrDimensionText                     string
	ProductStandardID                       string
	ProductGroup                            string
	ProductSpecification                    string
	MarkingOfMaterial                       string
	BaseUnit                                string
	PricingDate                             string
	PriceDetnExchangeRate                   string
	RequestedDeliveryDate                   string
	DeliveryUnit                            string
	ServicesRenderingDate                   string
	QuotationQuantityInBaseUnit             string
	QuotationQuantityInDeliveryUnit         string
	ItemWeightUnit                          string
	ProductGrossWeight                      string
	ItemGrossWeight                         string
	ProductNetWeight                        string
	ItemNetWeight                           string
	InternalCapacityQuantity                string
	InternalCapacityQuantityUnit            string
	NetAmount                               string
	TaxAmount                               string
	GrossAmount                             string
	Incoterms                               string
	TransactionTaxClassification            string
	ProductTaxClassificationBillToCountry   string
	ProductTaxClassificationBillFromCountry string
	DefinedTaxClassification                string
	AccountAssignmentGroup                  string
	ProductAccountAssignmentGroup           string
	PaymentTerms                            string
	PaymentMethod                           string
	Contract                                string
	ContractItem                            string
	Project                                 string
	WBSElement                              string
	AccountingExchangeRate                  string
	ReferenceDocument                       string
	ReferenceDocumentItem                   string
	TaxCode                                 string
	TaxRate                                 string
	CountryOfOrigin                         string
	CountryOfOriginLanguage                 string
	ItemBlockStatus                         string
	ExternalReferenceDocument               string
	ExternalReferenceDocumentItem           string
	CreationDate                            string
	LastChangeDate                          string
	IsCancelled                             string
	IsMarkedForDeletion                     string
	InspectionPlantBusinessPartner          string
	InspectionPlant                         string
	InspectionPlan                          string
	InspectionLot                           string
}{
	Quotation:                               "data_platform_quotations_item_data.Quotation",
	QuotationItem:                           "data_platform_quotations_item_data.QuotationItem",
	QuotationItemCategory:                   "data_platform_quotations_item_data.QuotationItemCategory",
	SupplyChainRelationshipID:               "data_platform_quotations_item_data.SupplyChainRelationshipID",
	Buyer:                                   "data_platform_quotations_item_data.Buyer",
	Seller:                                  "data_platform_quotations_item_data.Seller",
	QuotationItemText:                       "data_platform_quotations_item_data.QuotationItemText",
	QuotationItemTextByBuyer:                "data_platform_quotations_item_data.QuotationItemTextByBuyer",
	QuotationItemTextBySeller:               "data_platform_quotations_item_data.QuotationItemTextBySeller",
	Product:                                 "data_platform_quotations_item_data.Product",
	SizeOrDimensionText:                     "data_platform_quotations_item_data.SizeOrDimensionText",
	ProductStandardID:                       "data_platform_quotations_item_data.ProductStandardID",
	ProductGroup:                            "data_platform_quotations_item_data.ProductGroup",
	ProductSpecification:                    "data_platform_quotations_item_data.ProductSpecification",
	MarkingOfMaterial:                       "data_platform_quotations_item_data.MarkingOfMaterial",
	BaseUnit:                                "data_platform_quotations_item_data.BaseUnit",
	PricingDate:                             "data_platform_quotations_item_data.PricingDate",
	PriceDetnExchangeRate:                   "data_platform_quotations_item_data.PriceDetnExchangeRate",
	RequestedDeliveryDate:                   "data_platform_quotations_item_data.RequestedDeliveryDate",
	DeliveryUnit:                            "data_platform_quotations_item_data.DeliveryUnit",
	ServicesRenderingDate:                   "data_platform_quotations_item_data.ServicesRenderingDate",
	QuotationQuantityInBaseUnit:             "data_platform_quotations_item_data.QuotationQuantityInBaseUnit",
	QuotationQuantityInDeliveryUnit:         "data_platform_quotations_item_data.QuotationQuantityInDeliveryUnit",
	ItemWeightUnit:                          "data_platform_quotations_item_data.ItemWeightUnit",
	ProductGrossWeight:                      "data_platform_quotations_item_data.ProductGrossWeight",
	ItemGrossWeight:                         "data_platform_quotations_item_data.ItemGrossWeight",
	ProductNetWeight:                        "data_platform_quotations_item_data.ProductNetWeight",
	ItemNetWeight:                           "data_platform_quotations_item_data.ItemNetWeight",
	InternalCapacityQuantity:                "data_platform_quotations_item_data.InternalCapacityQuantity",
	InternalCapacityQuantityUnit:            "data_platform_quotations_item_data.InternalCapacityQuantityUnit",
	NetAmount:                               "data_platform_quotations_item_data.NetAmount",
	TaxAmount:                               "data_platform_quotations_item_data.TaxAmount",
	GrossAmount:                             "data_platform_quotations_item_data.GrossAmount",
	Incoterms:                               "data_platform_quotations_item_data.Incoterms",
	TransactionTaxClassification:            "data_platform_quotations_item_data.TransactionTaxClassification",
	ProductTaxClassificationBillToCountry:   "data_platform_quotations_item_data.ProductTaxClassificationBillToCountry",
	ProductTaxClassificationBillFromCountry: "data_platform_quotations_item_data.ProductTaxClassificationBillFromCountry",
	DefinedTaxClassification:                "data_platform_quotations_item_data.DefinedTaxClassification",
	AccountAssignmentGroup:                  "data_platform_quotations_item_data.AccountAssignmentGroup",
	ProductAccountAssignmentGroup:           "data_platform_quotations_item_data.ProductAccountAssignmentGroup",
	PaymentTerms:                            "data_platform_quotations_item_data.PaymentTerms",
	PaymentMethod:                           "data_platform_quotations_item_data.PaymentMethod",
	Contract:                                "data_platform_quotations_item_data.Contract",
	ContractItem:                            "data_platform_quotations_item_data.ContractItem",
	Project:                                 "data_platform_quotations_item_data.Project",
	WBSElement:                              "data_platform_quotations_item_data.WBSElement",
	AccountingExchangeRate:                  "data_platform_quotations_item_data.AccountingExchangeRate",
	ReferenceDocument:                       "data_platform_quotations_item_data.ReferenceDocument",
	ReferenceDocumentItem:                   "data_platform_quotations_item_data.ReferenceDocumentItem",
	TaxCode:                                 "data_platform_quotations_item_data.TaxCode",
	TaxRate:                                 "data_platform_quotations_item_data.TaxRate",
	CountryOfOrigin:                         "data_platform_quotations_item_data.CountryOfOrigin",
	CountryOfOriginLanguage:                 "data_platform_quotations_item_data.CountryOfOriginLanguage",
	ItemBlockStatus:                         "data_platform_quotations_item_data.ItemBlockStatus",
	ExternalReferenceDocument:               "data_platform_quotations_item_data.ExternalReferenceDocument",
	ExternalReferenceDocumentItem:           "data_platform_quotations_item_data.ExternalReferenceDocumentItem",
	CreationDate:                            "data_platform_quotations_item_data.CreationDate",
	LastChangeDate:                          "data_platform_quotations_item_data.LastChangeDate",
	IsCancelled:                             "data_platform_quotations_item_data.IsCancelled",
	IsMarkedForDeletion:                     "data_platform_quotations_item_data.IsMarkedForDeletion",
	InspectionPlantBusinessPartner:          "data_platform_quotations_item_data.InspectionPlantBusinessPartner",
	InspectionPlant:                         "data_platform_quotations_item_data.InspectionPlant",
	InspectionPlan:                          "data_platform_quotations_item_data.InspectionPlan",
	InspectionLot:                           "data_platform_quotations_item_data.InspectionLot",
}

// Generated where

var DataPlatformQuotationsItemDatumWhere = struct {
	Quotation                               whereHelperint
	QuotationItem                           whereHelperint
	QuotationItemCategory                   whereHelperstring
	SupplyChainRelationshipID               whereHelperint
	Buyer                                   whereHelperint
	Seller                                  whereHelperint
	QuotationItemText                       whereHelperstring
	QuotationItemTextByBuyer                whereHelperstring
	QuotationItemTextBySeller               whereHelperstring
	Product                                 whereHelperstring
	SizeOrDimensionText                     whereHelpernull_String
	ProductStandardID                       whereHelpernull_String
	ProductGroup                            whereHelpernull_String
	ProductSpecification                    whereHelpernull_String
	MarkingOfMaterial                       whereHelpernull_String
	BaseUnit                                whereHelperstring
	PricingDate                             whereHelperstring
	PriceDetnExchangeRate                   whereHelpernull_Float32
	RequestedDeliveryDate                   whereHelperstring
	DeliveryUnit                            whereHelperstring
	ServicesRenderingDate                   whereHelpernull_String
	QuotationQuantityInBaseUnit             whereHelperfloat32
	QuotationQuantityInDeliveryUnit         whereHelperfloat32
	ItemWeightUnit                          whereHelpernull_String
	ProductGrossWeight                      whereHelpernull_Float32
	ItemGrossWeight                         whereHelpernull_Float32
	ProductNetWeight                        whereHelpernull_Float32
	ItemNetWeight                           whereHelpernull_Float32
	InternalCapacityQuantity                whereHelpernull_Float32
	InternalCapacityQuantityUnit            whereHelpernull_String
	NetAmount                               whereHelperfloat32
	TaxAmount                               whereHelperfloat32
	GrossAmount                             whereHelperfloat32
	Incoterms                               whereHelpernull_String
	TransactionTaxClassification            whereHelperstring
	ProductTaxClassificationBillToCountry   whereHelpernull_String
	ProductTaxClassificationBillFromCountry whereHelpernull_String
	DefinedTaxClassification                whereHelpernull_String
	AccountAssignmentGroup                  whereHelperstring
	ProductAccountAssignmentGroup           whereHelperstring
	PaymentTerms                            whereHelperstring
	PaymentMethod                           whereHelperstring
	Contract                                whereHelpernull_Int
	ContractItem                            whereHelpernull_Int
	Project                                 whereHelpernull_Int
	WBSElement                              whereHelpernull_Int
	AccountingExchangeRate                  whereHelpernull_Float32
	ReferenceDocument                       whereHelpernull_Int
	ReferenceDocumentItem                   whereHelpernull_Int
	TaxCode                                 whereHelpernull_String
	TaxRate                                 whereHelpernull_Float32
	CountryOfOrigin                         whereHelpernull_String
	CountryOfOriginLanguage                 whereHelpernull_String
	ItemBlockStatus                         whereHelpernull_Bool
	ExternalReferenceDocument               whereHelpernull_String
	ExternalReferenceDocumentItem           whereHelpernull_String
	CreationDate                            whereHelperstring
	LastChangeDate                          whereHelperstring
	IsCancelled                             whereHelpernull_Bool
	IsMarkedForDeletion                     whereHelpernull_Bool
	InspectionPlantBusinessPartner          whereHelpernull_Int
	InspectionPlant                         whereHelpernull_String
	InspectionPlan                          whereHelpernull_Int
	InspectionLot                           whereHelpernull_Int
}{
	Quotation:                               whereHelperint{field: "`data_platform_quotations_item_data`.`Quotation`"},
	QuotationItem:                           whereHelperint{field: "`data_platform_quotations_item_data`.`QuotationItem`"},
	QuotationItemCategory:                   whereHelperstring{field: "`data_platform_quotations_item_data`.`QuotationItemCategory`"},
	SupplyChainRelationshipID:               whereHelperint{field: "`data_platform_quotations_item_data`.`SupplyChainRelationshipID`"},
	Buyer:                                   whereHelperint{field: "`data_platform_quotations_item_data`.`Buyer`"},
	Seller:                                  whereHelperint{field: "`data_platform_quotations_item_data`.`Seller`"},
	QuotationItemText:                       whereHelperstring{field: "`data_platform_quotations_item_data`.`QuotationItemText`"},
	QuotationItemTextByBuyer:                whereHelperstring{field: "`data_platform_quotations_item_data`.`QuotationItemTextByBuyer`"},
	QuotationItemTextBySeller:               whereHelperstring{field: "`data_platform_quotations_item_data`.`QuotationItemTextBySeller`"},
	Product:                                 whereHelperstring{field: "`data_platform_quotations_item_data`.`Product`"},
	SizeOrDimensionText:                     whereHelpernull_String{field: "`data_platform_quotations_item_data`.`SizeOrDimensionText`"},
	ProductStandardID:                       whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ProductStandardID`"},
	ProductGroup:                            whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ProductGroup`"},
	ProductSpecification:                    whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ProductSpecification`"},
	MarkingOfMaterial:                       whereHelpernull_String{field: "`data_platform_quotations_item_data`.`MarkingOfMaterial`"},
	BaseUnit:                                whereHelperstring{field: "`data_platform_quotations_item_data`.`BaseUnit`"},
	PricingDate:                             whereHelperstring{field: "`data_platform_quotations_item_data`.`PricingDate`"},
	PriceDetnExchangeRate:                   whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`PriceDetnExchangeRate`"},
	RequestedDeliveryDate:                   whereHelperstring{field: "`data_platform_quotations_item_data`.`RequestedDeliveryDate`"},
	DeliveryUnit:                            whereHelperstring{field: "`data_platform_quotations_item_data`.`DeliveryUnit`"},
	ServicesRenderingDate:                   whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ServicesRenderingDate`"},
	QuotationQuantityInBaseUnit:             whereHelperfloat32{field: "`data_platform_quotations_item_data`.`QuotationQuantityInBaseUnit`"},
	QuotationQuantityInDeliveryUnit:         whereHelperfloat32{field: "`data_platform_quotations_item_data`.`QuotationQuantityInDeliveryUnit`"},
	ItemWeightUnit:                          whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ItemWeightUnit`"},
	ProductGrossWeight:                      whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`ProductGrossWeight`"},
	ItemGrossWeight:                         whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`ItemGrossWeight`"},
	ProductNetWeight:                        whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`ProductNetWeight`"},
	ItemNetWeight:                           whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`ItemNetWeight`"},
	InternalCapacityQuantity:                whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`InternalCapacityQuantity`"},
	InternalCapacityQuantityUnit:            whereHelpernull_String{field: "`data_platform_quotations_item_data`.`InternalCapacityQuantityUnit`"},
	NetAmount:                               whereHelperfloat32{field: "`data_platform_quotations_item_data`.`NetAmount`"},
	TaxAmount:                               whereHelperfloat32{field: "`data_platform_quotations_item_data`.`TaxAmount`"},
	GrossAmount:                             whereHelperfloat32{field: "`data_platform_quotations_item_data`.`GrossAmount`"},
	Incoterms:                               whereHelpernull_String{field: "`data_platform_quotations_item_data`.`Incoterms`"},
	TransactionTaxClassification:            whereHelperstring{field: "`data_platform_quotations_item_data`.`TransactionTaxClassification`"},
	ProductTaxClassificationBillToCountry:   whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ProductTaxClassificationBillToCountry`"},
	ProductTaxClassificationBillFromCountry: whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ProductTaxClassificationBillFromCountry`"},
	DefinedTaxClassification:                whereHelpernull_String{field: "`data_platform_quotations_item_data`.`DefinedTaxClassification`"},
	AccountAssignmentGroup:                  whereHelperstring{field: "`data_platform_quotations_item_data`.`AccountAssignmentGroup`"},
	ProductAccountAssignmentGroup:           whereHelperstring{field: "`data_platform_quotations_item_data`.`ProductAccountAssignmentGroup`"},
	PaymentTerms:                            whereHelperstring{field: "`data_platform_quotations_item_data`.`PaymentTerms`"},
	PaymentMethod:                           whereHelperstring{field: "`data_platform_quotations_item_data`.`PaymentMethod`"},
	Contract:                                whereHelpernull_Int{field: "`data_platform_quotations_item_data`.`Contract`"},
	ContractItem:                            whereHelpernull_Int{field: "`data_platform_quotations_item_data`.`ContractItem`"},
	Project:                                 whereHelpernull_Int{field: "`data_platform_quotations_item_data`.`Project`"},
	WBSElement:                              whereHelpernull_Int{field: "`data_platform_quotations_item_data`.`WBSElement`"},
	AccountingExchangeRate:                  whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`AccountingExchangeRate`"},
	ReferenceDocument:                       whereHelpernull_Int{field: "`data_platform_quotations_item_data`.`ReferenceDocument`"},
	ReferenceDocumentItem:                   whereHelpernull_Int{field: "`data_platform_quotations_item_data`.`ReferenceDocumentItem`"},
	TaxCode:                                 whereHelpernull_String{field: "`data_platform_quotations_item_data`.`TaxCode`"},
	TaxRate:                                 whereHelpernull_Float32{field: "`data_platform_quotations_item_data`.`TaxRate`"},
	CountryOfOrigin:                         whereHelpernull_String{field: "`data_platform_quotations_item_data`.`CountryOfOrigin`"},
	CountryOfOriginLanguage:                 whereHelpernull_String{field: "`data_platform_quotations_item_data`.`CountryOfOriginLanguage`"},
	ItemBlockStatus:                         whereHelpernull_Bool{field: "`data_platform_quotations_item_data`.`ItemBlockStatus`"},
	ExternalReferenceDocument:               whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ExternalReferenceDocument`"},
	ExternalReferenceDocumentItem:           whereHelpernull_String{field: "`data_platform_quotations_item_data`.`ExternalReferenceDocumentItem`"},
	CreationDate:                            whereHelperstring{field: "`data_platform_quotations_item_data`.`CreationDate`"},
	LastChangeDate:                          whereHelperstring{field: "`data_platform_quotations_item_data`.`LastChangeDate`"},
	IsCancelled:                             whereHelpernull_Bool{field: "`data_platform_quotations_item_data`.`IsCancelled`"},
	IsMarkedForDeletion:                     whereHelpernull_Bool{field: "`data_platform_quotations_item_data`.`IsMarkedForDeletion`"},
	InspectionPlantBusinessPartner:          whereHelpernull_Int{field: "`data_platform_quotations_item_data`.`InspectionPlantBusinessPartner`"},
	InspectionPlant:                         whereHelpernull_String{field: "`data_platform_quotations_item_data`.`InspectionPlant`"},
	InspectionPlan:                          whereHelpernull_Int{field: "`data_platform_quotations_item_data`.`InspectionPlan`"},
	InspectionLot:                           whereHelpernull_Int{field: "`data_platform_quotations_item_data`.`InspectionLot`"},
}

// DataPlatformQuotationsItemDatumRels is where relationship names are stored.
var DataPlatformQuotationsItemDatumRels = struct {
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum                     string
	ContractDataPlatformContractItemDatum                                 string
	ContractDataPlatformContractHeaderDatum                               string
	CountryOfOriginLanguageDataPlatformLanguageLanguageDatum              string
	CountryOfOriginDataPlatformCountryCountryDatum                        string
	DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum                 string
	Incoterm                                                              string
	InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum string
	ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum               string
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum              string
	ProductGroupDataPlatformProductGroupProductGroupDatum                 string
	ProjectDataPlatformProjectProjectDatum                                string
	ProjectDataPlatformProjectWBSElementDatum                             string
	QuotationDataPlatformQuotationsHeaderDatum                            string
	BuyerDataPlatformSCRGeneralDatum                                      string
}{
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum:        "BaseUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ContractDataPlatformContractItemDatum:                    "ContractDataPlatformContractItemDatum",
	ContractDataPlatformContractHeaderDatum:                  "ContractDataPlatformContractHeaderDatum",
	CountryOfOriginLanguageDataPlatformLanguageLanguageDatum: "CountryOfOriginLanguageDataPlatformLanguageLanguageDatum",
	CountryOfOriginDataPlatformCountryCountryDatum:           "CountryOfOriginDataPlatformCountryCountryDatum",
	DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum:    "DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum",
	Incoterm: "Incoterm",
	InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum: "InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum",
	ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum:               "ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum",
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum:              "PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum",
	ProductGroupDataPlatformProductGroupProductGroupDatum:                 "ProductGroupDataPlatformProductGroupProductGroupDatum",
	ProjectDataPlatformProjectProjectDatum:                                "ProjectDataPlatformProjectProjectDatum",
	ProjectDataPlatformProjectWBSElementDatum:                             "ProjectDataPlatformProjectWBSElementDatum",
	QuotationDataPlatformQuotationsHeaderDatum:                            "QuotationDataPlatformQuotationsHeaderDatum",
	BuyerDataPlatformSCRGeneralDatum:                                      "BuyerDataPlatformSCRGeneralDatum",
}

// dataPlatformQuotationsItemDatumR is where relationships are stored.
type dataPlatformQuotationsItemDatumR struct {
	BaseUnitDataPlatformQuantityUnitQuantityUnitDatum                     *DataPlatformQuantityUnitQuantityUnitDatum   `boil:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"BaseUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ContractDataPlatformContractItemDatum                                 *DataPlatformContractItemDatum               `boil:"ContractDataPlatformContractItemDatum" json:"ContractDataPlatformContractItemDatum" toml:"ContractDataPlatformContractItemDatum" yaml:"ContractDataPlatformContractItemDatum"`
	ContractDataPlatformContractHeaderDatum                               *DataPlatformContractHeaderDatum             `boil:"ContractDataPlatformContractHeaderDatum" json:"ContractDataPlatformContractHeaderDatum" toml:"ContractDataPlatformContractHeaderDatum" yaml:"ContractDataPlatformContractHeaderDatum"`
	CountryOfOriginLanguageDataPlatformLanguageLanguageDatum              *DataPlatformLanguageLanguageDatum           `boil:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum" json:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum" toml:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum" yaml:"CountryOfOriginLanguageDataPlatformLanguageLanguageDatum"`
	CountryOfOriginDataPlatformCountryCountryDatum                        *DataPlatformCountryCountryDatum             `boil:"CountryOfOriginDataPlatformCountryCountryDatum" json:"CountryOfOriginDataPlatformCountryCountryDatum" toml:"CountryOfOriginDataPlatformCountryCountryDatum" yaml:"CountryOfOriginDataPlatformCountryCountryDatum"`
	DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum                 *DataPlatformQuantityUnitQuantityUnitDatum   `boil:"DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	Incoterm                                                              *DataPlatformIncotermsIncotermsDatum         `boil:"Incoterm" json:"Incoterm" toml:"Incoterm" yaml:"Incoterm"`
	InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum *DataPlatformQuantityUnitQuantityUnitDatum   `boil:"InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum               *DataPlatformQuantityUnitQuantityUnitDatum   `boil:"ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum" json:"ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum" toml:"ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum" yaml:"ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum"`
	PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum              *DataPlatformPaymentMethodPaymentMethodDatum `boil:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" json:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" toml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum" yaml:"PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum"`
	ProductGroupDataPlatformProductGroupProductGroupDatum                 *DataPlatformProductGroupProductGroupDatum   `boil:"ProductGroupDataPlatformProductGroupProductGroupDatum" json:"ProductGroupDataPlatformProductGroupProductGroupDatum" toml:"ProductGroupDataPlatformProductGroupProductGroupDatum" yaml:"ProductGroupDataPlatformProductGroupProductGroupDatum"`
	ProjectDataPlatformProjectProjectDatum                                *DataPlatformProjectProjectDatum             `boil:"ProjectDataPlatformProjectProjectDatum" json:"ProjectDataPlatformProjectProjectDatum" toml:"ProjectDataPlatformProjectProjectDatum" yaml:"ProjectDataPlatformProjectProjectDatum"`
	ProjectDataPlatformProjectWBSElementDatum                             *DataPlatformProjectWBSElementDatum          `boil:"ProjectDataPlatformProjectWBSElementDatum" json:"ProjectDataPlatformProjectWBSElementDatum" toml:"ProjectDataPlatformProjectWBSElementDatum" yaml:"ProjectDataPlatformProjectWBSElementDatum"`
	QuotationDataPlatformQuotationsHeaderDatum                            *DataPlatformQuotationsHeaderDatum           `boil:"QuotationDataPlatformQuotationsHeaderDatum" json:"QuotationDataPlatformQuotationsHeaderDatum" toml:"QuotationDataPlatformQuotationsHeaderDatum" yaml:"QuotationDataPlatformQuotationsHeaderDatum"`
	BuyerDataPlatformSCRGeneralDatum                                      *DataPlatformSCRGeneralDatum                 `boil:"BuyerDataPlatformSCRGeneralDatum" json:"BuyerDataPlatformSCRGeneralDatum" toml:"BuyerDataPlatformSCRGeneralDatum" yaml:"BuyerDataPlatformSCRGeneralDatum"`
}

// NewStruct creates a new relationship struct
func (*dataPlatformQuotationsItemDatumR) NewStruct() *dataPlatformQuotationsItemDatumR {
	return &dataPlatformQuotationsItemDatumR{}
}

func (r *dataPlatformQuotationsItemDatumR) GetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetContractDataPlatformContractItemDatum() *DataPlatformContractItemDatum {
	if r == nil {
		return nil
	}
	return r.ContractDataPlatformContractItemDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetContractDataPlatformContractHeaderDatum() *DataPlatformContractHeaderDatum {
	if r == nil {
		return nil
	}
	return r.ContractDataPlatformContractHeaderDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetCountryOfOriginLanguageDataPlatformLanguageLanguageDatum() *DataPlatformLanguageLanguageDatum {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetCountryOfOriginDataPlatformCountryCountryDatum() *DataPlatformCountryCountryDatum {
	if r == nil {
		return nil
	}
	return r.CountryOfOriginDataPlatformCountryCountryDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetIncoterm() *DataPlatformIncotermsIncotermsDatum {
	if r == nil {
		return nil
	}
	return r.Incoterm
}

func (r *dataPlatformQuotationsItemDatumR) GetInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum() *DataPlatformQuantityUnitQuantityUnitDatum {
	if r == nil {
		return nil
	}
	return r.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum() *DataPlatformPaymentMethodPaymentMethodDatum {
	if r == nil {
		return nil
	}
	return r.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetProductGroupDataPlatformProductGroupProductGroupDatum() *DataPlatformProductGroupProductGroupDatum {
	if r == nil {
		return nil
	}
	return r.ProductGroupDataPlatformProductGroupProductGroupDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetProjectDataPlatformProjectProjectDatum() *DataPlatformProjectProjectDatum {
	if r == nil {
		return nil
	}
	return r.ProjectDataPlatformProjectProjectDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetProjectDataPlatformProjectWBSElementDatum() *DataPlatformProjectWBSElementDatum {
	if r == nil {
		return nil
	}
	return r.ProjectDataPlatformProjectWBSElementDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetQuotationDataPlatformQuotationsHeaderDatum() *DataPlatformQuotationsHeaderDatum {
	if r == nil {
		return nil
	}
	return r.QuotationDataPlatformQuotationsHeaderDatum
}

func (r *dataPlatformQuotationsItemDatumR) GetBuyerDataPlatformSCRGeneralDatum() *DataPlatformSCRGeneralDatum {
	if r == nil {
		return nil
	}
	return r.BuyerDataPlatformSCRGeneralDatum
}

// dataPlatformQuotationsItemDatumL is where Load methods for each relationship are stored.
type dataPlatformQuotationsItemDatumL struct{}

var (
	dataPlatformQuotationsItemDatumAllColumns            = []string{"Quotation", "QuotationItem", "QuotationItemCategory", "SupplyChainRelationshipID", "Buyer", "Seller", "QuotationItemText", "QuotationItemTextByBuyer", "QuotationItemTextBySeller", "Product", "SizeOrDimensionText", "ProductStandardID", "ProductGroup", "ProductSpecification", "MarkingOfMaterial", "BaseUnit", "PricingDate", "PriceDetnExchangeRate", "RequestedDeliveryDate", "DeliveryUnit", "ServicesRenderingDate", "QuotationQuantityInBaseUnit", "QuotationQuantityInDeliveryUnit", "ItemWeightUnit", "ProductGrossWeight", "ItemGrossWeight", "ProductNetWeight", "ItemNetWeight", "InternalCapacityQuantity", "InternalCapacityQuantityUnit", "NetAmount", "TaxAmount", "GrossAmount", "Incoterms", "TransactionTaxClassification", "ProductTaxClassificationBillToCountry", "ProductTaxClassificationBillFromCountry", "DefinedTaxClassification", "AccountAssignmentGroup", "ProductAccountAssignmentGroup", "PaymentTerms", "PaymentMethod", "Contract", "ContractItem", "Project", "WBSElement", "AccountingExchangeRate", "ReferenceDocument", "ReferenceDocumentItem", "TaxCode", "TaxRate", "CountryOfOrigin", "CountryOfOriginLanguage", "ItemBlockStatus", "ExternalReferenceDocument", "ExternalReferenceDocumentItem", "CreationDate", "LastChangeDate", "IsCancelled", "IsMarkedForDeletion", "InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionLot"}
	dataPlatformQuotationsItemDatumColumnsWithoutDefault = []string{"Quotation", "QuotationItem", "QuotationItemCategory", "SupplyChainRelationshipID", "Buyer", "Seller", "QuotationItemText", "QuotationItemTextByBuyer", "QuotationItemTextBySeller", "Product", "SizeOrDimensionText", "ProductStandardID", "ProductGroup", "ProductSpecification", "MarkingOfMaterial", "BaseUnit", "PricingDate", "PriceDetnExchangeRate", "RequestedDeliveryDate", "DeliveryUnit", "ServicesRenderingDate", "QuotationQuantityInBaseUnit", "QuotationQuantityInDeliveryUnit", "ItemWeightUnit", "ProductGrossWeight", "ItemGrossWeight", "ProductNetWeight", "ItemNetWeight", "InternalCapacityQuantity", "InternalCapacityQuantityUnit", "NetAmount", "TaxAmount", "GrossAmount", "Incoterms", "TransactionTaxClassification", "ProductTaxClassificationBillToCountry", "ProductTaxClassificationBillFromCountry", "DefinedTaxClassification", "AccountAssignmentGroup", "ProductAccountAssignmentGroup", "PaymentTerms", "PaymentMethod", "Contract", "ContractItem", "Project", "WBSElement", "AccountingExchangeRate", "ReferenceDocument", "ReferenceDocumentItem", "TaxCode", "TaxRate", "CountryOfOrigin", "CountryOfOriginLanguage", "ItemBlockStatus", "ExternalReferenceDocument", "ExternalReferenceDocumentItem", "CreationDate", "LastChangeDate", "IsCancelled", "IsMarkedForDeletion", "InspectionPlantBusinessPartner", "InspectionPlant", "InspectionPlan", "InspectionLot"}
	dataPlatformQuotationsItemDatumColumnsWithDefault    = []string{}
	dataPlatformQuotationsItemDatumPrimaryKeyColumns     = []string{"Quotation", "QuotationItem"}
	dataPlatformQuotationsItemDatumGeneratedColumns      = []string{}
)

type (
	// DataPlatformQuotationsItemDatumSlice is an alias for a slice of pointers to DataPlatformQuotationsItemDatum.
	// This should almost always be used instead of []DataPlatformQuotationsItemDatum.
	DataPlatformQuotationsItemDatumSlice []*DataPlatformQuotationsItemDatum

	dataPlatformQuotationsItemDatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dataPlatformQuotationsItemDatumType                 = reflect.TypeOf(&DataPlatformQuotationsItemDatum{})
	dataPlatformQuotationsItemDatumMapping              = queries.MakeStructMapping(dataPlatformQuotationsItemDatumType)
	dataPlatformQuotationsItemDatumPrimaryKeyMapping, _ = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, dataPlatformQuotationsItemDatumPrimaryKeyColumns)
	dataPlatformQuotationsItemDatumInsertCacheMut       sync.RWMutex
	dataPlatformQuotationsItemDatumInsertCache          = make(map[string]insertCache)
	dataPlatformQuotationsItemDatumUpdateCacheMut       sync.RWMutex
	dataPlatformQuotationsItemDatumUpdateCache          = make(map[string]updateCache)
	dataPlatformQuotationsItemDatumUpsertCacheMut       sync.RWMutex
	dataPlatformQuotationsItemDatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dataPlatformQuotationsItemDatum record from the query.
func (q dataPlatformQuotationsItemDatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DataPlatformQuotationsItemDatum, error) {
	o := &DataPlatformQuotationsItemDatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for data_platform_quotations_item_data")
	}

	return o, nil
}

// All returns all DataPlatformQuotationsItemDatum records from the query.
func (q dataPlatformQuotationsItemDatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (DataPlatformQuotationsItemDatumSlice, error) {
	var o []*DataPlatformQuotationsItemDatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DataPlatformQuotationsItemDatum slice")
	}

	return o, nil
}

// Count returns the count of all DataPlatformQuotationsItemDatum records in the query.
func (q dataPlatformQuotationsItemDatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count data_platform_quotations_item_data rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dataPlatformQuotationsItemDatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if data_platform_quotations_item_data exists")
	}

	return count > 0, nil
}

// BaseUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) BaseUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.BaseUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ContractDataPlatformContractItemDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) ContractDataPlatformContractItemDatum(mods ...qm.QueryMod) dataPlatformContractItemDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Contract` = ?", o.Contract),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformContractItemData(queryMods...)
}

// ContractDataPlatformContractHeaderDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) ContractDataPlatformContractHeaderDatum(mods ...qm.QueryMod) dataPlatformContractHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Contract` = ?", o.Contract),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformContractHeaderData(queryMods...)
}

// CountryOfOriginLanguageDataPlatformLanguageLanguageDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) CountryOfOriginLanguageDataPlatformLanguageLanguageDatum(mods ...qm.QueryMod) dataPlatformLanguageLanguageDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Language` = ?", o.CountryOfOriginLanguage),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformLanguageLanguageData(queryMods...)
}

// CountryOfOriginDataPlatformCountryCountryDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) CountryOfOriginDataPlatformCountryCountryDatum(mods ...qm.QueryMod) dataPlatformCountryCountryDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Country` = ?", o.CountryOfOrigin),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformCountryCountryData(queryMods...)
}

// DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.DeliveryUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// Incoterm pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) Incoterm(mods ...qm.QueryMod) dataPlatformIncotermsIncotermsDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Incoterms` = ?", o.Incoterms),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformIncotermsIncotermsData(queryMods...)
}

// InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.InternalCapacityQuantityUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum(mods ...qm.QueryMod) dataPlatformQuantityUnitQuantityUnitDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`QuantityUnit` = ?", o.ItemWeightUnit),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuantityUnitQuantityUnitData(queryMods...)
}

// PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(mods ...qm.QueryMod) dataPlatformPaymentMethodPaymentMethodDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`PaymentMethod` = ?", o.PaymentMethod),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformPaymentMethodPaymentMethodData(queryMods...)
}

// ProductGroupDataPlatformProductGroupProductGroupDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) ProductGroupDataPlatformProductGroupProductGroupDatum(mods ...qm.QueryMod) dataPlatformProductGroupProductGroupDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`ProductGroup` = ?", o.ProductGroup),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProductGroupProductGroupData(queryMods...)
}

// ProjectDataPlatformProjectProjectDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) ProjectDataPlatformProjectProjectDatum(mods ...qm.QueryMod) dataPlatformProjectProjectDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Project` = ?", o.Project),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProjectProjectData(queryMods...)
}

// ProjectDataPlatformProjectWBSElementDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) ProjectDataPlatformProjectWBSElementDatum(mods ...qm.QueryMod) dataPlatformProjectWBSElementDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Project` = ?", o.Project),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformProjectWBSElementData(queryMods...)
}

// QuotationDataPlatformQuotationsHeaderDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) QuotationDataPlatformQuotationsHeaderDatum(mods ...qm.QueryMod) dataPlatformQuotationsHeaderDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Quotation` = ?", o.Quotation),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformQuotationsHeaderData(queryMods...)
}

// BuyerDataPlatformSCRGeneralDatum pointed to by the foreign key.
func (o *DataPlatformQuotationsItemDatum) BuyerDataPlatformSCRGeneralDatum(mods ...qm.QueryMod) dataPlatformSCRGeneralDatumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`Buyer` = ?", o.Buyer),
	}

	queryMods = append(queryMods, mods...)

	return DataPlatformSCRGeneralData(queryMods...)
}

// LoadBaseUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		args = append(args, object.BaseUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if a == obj.BaseUnit {
					continue Outer
				}
			}

			args = append(args, obj.BaseUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BaseUnit == foreign.QuantityUnit {
				local.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadContractDataPlatformContractItemDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadContractDataPlatformContractItemDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		if !queries.IsNil(object.Contract) {
			args = append(args, object.Contract)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Contract) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Contract) {
				args = append(args, obj.Contract)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_contract_item_data`),
		qm.WhereIn(`data_platform_contract_item_data.Contract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformContractItemDatum")
	}

	var resultSlice []*DataPlatformContractItemDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformContractItemDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_contract_item_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_contract_item_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContractDataPlatformContractItemDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Contract, foreign.Contract) {
				local.R.ContractDataPlatformContractItemDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadContractDataPlatformContractHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadContractDataPlatformContractHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		if !queries.IsNil(object.Contract) {
			args = append(args, object.Contract)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Contract) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Contract) {
				args = append(args, obj.Contract)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_contract_header_data`),
		qm.WhereIn(`data_platform_contract_header_data.Contract in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformContractHeaderDatum")
	}

	var resultSlice []*DataPlatformContractHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformContractHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_contract_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_contract_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContractDataPlatformContractHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Contract, foreign.Contract) {
				local.R.ContractDataPlatformContractHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginLanguageDataPlatformLanguageLanguageDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadCountryOfOriginLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		if !queries.IsNil(object.CountryOfOriginLanguage) {
			args = append(args, object.CountryOfOriginLanguage)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CountryOfOriginLanguage) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CountryOfOriginLanguage) {
				args = append(args, obj.CountryOfOriginLanguage)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_language_language_data`),
		qm.WhereIn(`data_platform_language_language_data.Language in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformLanguageLanguageDatum")
	}

	var resultSlice []*DataPlatformLanguageLanguageDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformLanguageLanguageDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_language_language_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_language_language_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CountryOfOriginLanguage, foreign.Language) {
				local.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadCountryOfOriginDataPlatformCountryCountryDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadCountryOfOriginDataPlatformCountryCountryDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		if !queries.IsNil(object.CountryOfOrigin) {
			args = append(args, object.CountryOfOrigin)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CountryOfOrigin) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CountryOfOrigin) {
				args = append(args, obj.CountryOfOrigin)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_country_country_data`),
		qm.WhereIn(`data_platform_country_country_data.Country in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformCountryCountryDatum")
	}

	var resultSlice []*DataPlatformCountryCountryDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformCountryCountryDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_country_country_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_country_country_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CountryOfOriginDataPlatformCountryCountryDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CountryOfOrigin, foreign.Country) {
				local.R.CountryOfOriginDataPlatformCountryCountryDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		args = append(args, object.DeliveryUnit)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if a == obj.DeliveryUnit {
					continue Outer
				}
			}

			args = append(args, obj.DeliveryUnit)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeliveryUnit == foreign.QuantityUnit {
				local.R.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadIncoterm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadIncoterm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		if !queries.IsNil(object.Incoterms) {
			args = append(args, object.Incoterms)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Incoterms) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Incoterms) {
				args = append(args, obj.Incoterms)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_incoterms_incoterms_data`),
		qm.WhereIn(`data_platform_incoterms_incoterms_data.Incoterms in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformIncotermsIncotermsDatum")
	}

	var resultSlice []*DataPlatformIncotermsIncotermsDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformIncotermsIncotermsDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_incoterms_incoterms_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_incoterms_incoterms_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Incoterm = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Incoterms, foreign.Incoterms) {
				local.R.Incoterm = foreign
				break
			}
		}
	}

	return nil
}

// LoadInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		if !queries.IsNil(object.InternalCapacityQuantityUnit) {
			args = append(args, object.InternalCapacityQuantityUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.InternalCapacityQuantityUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.InternalCapacityQuantityUnit) {
				args = append(args, obj.InternalCapacityQuantityUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.InternalCapacityQuantityUnit, foreign.QuantityUnit) {
				local.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		if !queries.IsNil(object.ItemWeightUnit) {
			args = append(args, object.ItemWeightUnit)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ItemWeightUnit) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ItemWeightUnit) {
				args = append(args, obj.ItemWeightUnit)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quantity_unit_quantity_unit_data`),
		qm.WhereIn(`data_platform_quantity_unit_quantity_unit_data.QuantityUnit in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuantityUnitQuantityUnitDatum")
	}

	var resultSlice []*DataPlatformQuantityUnitQuantityUnitDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuantityUnitQuantityUnitDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quantity_unit_quantity_unit_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quantity_unit_quantity_unit_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ItemWeightUnit, foreign.QuantityUnit) {
				local.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		args = append(args, object.PaymentMethod)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if a == obj.PaymentMethod {
					continue Outer
				}
			}

			args = append(args, obj.PaymentMethod)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_payment_method_payment_method_data`),
		qm.WhereIn(`data_platform_payment_method_payment_method_data.PaymentMethod in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformPaymentMethodPaymentMethodDatum")
	}

	var resultSlice []*DataPlatformPaymentMethodPaymentMethodDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformPaymentMethodPaymentMethodDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_payment_method_payment_method_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_payment_method_payment_method_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PaymentMethod == foreign.PaymentMethod {
				local.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProductGroupDataPlatformProductGroupProductGroupDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadProductGroupDataPlatformProductGroupProductGroupDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		if !queries.IsNil(object.ProductGroup) {
			args = append(args, object.ProductGroup)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductGroup) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductGroup) {
				args = append(args, obj.ProductGroup)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_product_group_product_group_data`),
		qm.WhereIn(`data_platform_product_group_product_group_data.ProductGroup in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProductGroupProductGroupDatum")
	}

	var resultSlice []*DataPlatformProductGroupProductGroupDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProductGroupProductGroupDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_product_group_product_group_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_product_group_product_group_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductGroupDataPlatformProductGroupProductGroupDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductGroup, foreign.ProductGroup) {
				local.R.ProductGroupDataPlatformProductGroupProductGroupDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProjectDataPlatformProjectProjectDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadProjectDataPlatformProjectProjectDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		if !queries.IsNil(object.Project) {
			args = append(args, object.Project)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Project) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Project) {
				args = append(args, obj.Project)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_project_project_data`),
		qm.WhereIn(`data_platform_project_project_data.Project in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProjectProjectDatum")
	}

	var resultSlice []*DataPlatformProjectProjectDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProjectProjectDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_project_project_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_project_project_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProjectDataPlatformProjectProjectDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Project, foreign.Project) {
				local.R.ProjectDataPlatformProjectProjectDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadProjectDataPlatformProjectWBSElementDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadProjectDataPlatformProjectWBSElementDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		if !queries.IsNil(object.Project) {
			args = append(args, object.Project)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Project) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Project) {
				args = append(args, obj.Project)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_project_wbs_element_data`),
		qm.WhereIn(`data_platform_project_wbs_element_data.Project in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformProjectWBSElementDatum")
	}

	var resultSlice []*DataPlatformProjectWBSElementDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformProjectWBSElementDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_project_wbs_element_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_project_wbs_element_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProjectDataPlatformProjectWBSElementDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Project, foreign.Project) {
				local.R.ProjectDataPlatformProjectWBSElementDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadQuotationDataPlatformQuotationsHeaderDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadQuotationDataPlatformQuotationsHeaderDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		args = append(args, object.Quotation)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Quotation {
					continue Outer
				}
			}

			args = append(args, obj.Quotation)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_quotations_header_data`),
		qm.WhereIn(`data_platform_quotations_header_data.Quotation in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformQuotationsHeaderDatum")
	}

	var resultSlice []*DataPlatformQuotationsHeaderDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformQuotationsHeaderDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_quotations_header_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_quotations_header_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.QuotationDataPlatformQuotationsHeaderDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Quotation == foreign.Quotation {
				local.R.QuotationDataPlatformQuotationsHeaderDatum = foreign
				break
			}
		}
	}

	return nil
}

// LoadBuyerDataPlatformSCRGeneralDatum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dataPlatformQuotationsItemDatumL) LoadBuyerDataPlatformSCRGeneralDatum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDataPlatformQuotationsItemDatum interface{}, mods queries.Applicator) error {
	var slice []*DataPlatformQuotationsItemDatum
	var object *DataPlatformQuotationsItemDatum

	if singular {
		var ok bool
		object, ok = maybeDataPlatformQuotationsItemDatum.(*DataPlatformQuotationsItemDatum)
		if !ok {
			object = new(DataPlatformQuotationsItemDatum)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDataPlatformQuotationsItemDatum))
			}
		}
	} else {
		s, ok := maybeDataPlatformQuotationsItemDatum.(*[]*DataPlatformQuotationsItemDatum)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDataPlatformQuotationsItemDatum)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDataPlatformQuotationsItemDatum))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dataPlatformQuotationsItemDatumR{}
		}
		args = append(args, object.Buyer)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dataPlatformQuotationsItemDatumR{}
			}

			for _, a := range args {
				if a == obj.Buyer {
					continue Outer
				}
			}

			args = append(args, obj.Buyer)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`data_platform_scr_general_data`),
		qm.WhereIn(`data_platform_scr_general_data.Buyer in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DataPlatformSCRGeneralDatum")
	}

	var resultSlice []*DataPlatformSCRGeneralDatum
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DataPlatformSCRGeneralDatum")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for data_platform_scr_general_data")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for data_platform_scr_general_data")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BuyerDataPlatformSCRGeneralDatum = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Buyer == foreign.Buyer {
				local.R.BuyerDataPlatformSCRGeneralDatum = foreign
				break
			}
		}
	}

	return nil
}

// SetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetBaseUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"BaseUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BaseUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			BaseUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.BaseUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetContractDataPlatformContractItemDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.ContractDataPlatformContractItemDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetContractDataPlatformContractItemDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformContractItemDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Contract"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Contract, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Contract, related.Contract)
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			ContractDataPlatformContractItemDatum: related,
		}
	} else {
		o.R.ContractDataPlatformContractItemDatum = related
	}

	return nil
}

// RemoveContractDataPlatformContractItemDatum relationship.
// Sets o.R.ContractDataPlatformContractItemDatum to nil.
func (o *DataPlatformQuotationsItemDatum) RemoveContractDataPlatformContractItemDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformContractItemDatum) error {
	var err error

	queries.SetScanner(&o.Contract, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Contract")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ContractDataPlatformContractItemDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetContractDataPlatformContractHeaderDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.ContractDataPlatformContractHeaderDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetContractDataPlatformContractHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformContractHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Contract"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Contract, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Contract, related.Contract)
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			ContractDataPlatformContractHeaderDatum: related,
		}
	} else {
		o.R.ContractDataPlatformContractHeaderDatum = related
	}

	return nil
}

// RemoveContractDataPlatformContractHeaderDatum relationship.
// Sets o.R.ContractDataPlatformContractHeaderDatum to nil.
func (o *DataPlatformQuotationsItemDatum) RemoveContractDataPlatformContractHeaderDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformContractHeaderDatum) error {
	var err error

	queries.SetScanner(&o.Contract, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Contract")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ContractDataPlatformContractHeaderDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetCountryOfOriginLanguageDataPlatformLanguageLanguageDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetCountryOfOriginLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformLanguageLanguageDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOriginLanguage"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Language, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CountryOfOriginLanguage, related.Language)
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			CountryOfOriginLanguageDataPlatformLanguageLanguageDatum: related,
		}
	} else {
		o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = related
	}

	return nil
}

// RemoveCountryOfOriginLanguageDataPlatformLanguageLanguageDatum relationship.
// Sets o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum to nil.
func (o *DataPlatformQuotationsItemDatum) RemoveCountryOfOriginLanguageDataPlatformLanguageLanguageDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformLanguageLanguageDatum) error {
	var err error

	queries.SetScanner(&o.CountryOfOriginLanguage, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("CountryOfOriginLanguage")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CountryOfOriginLanguageDataPlatformLanguageLanguageDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetCountryOfOriginDataPlatformCountryCountryDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.CountryOfOriginDataPlatformCountryCountryDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetCountryOfOriginDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformCountryCountryDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"CountryOfOrigin"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Country, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CountryOfOrigin, related.Country)
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			CountryOfOriginDataPlatformCountryCountryDatum: related,
		}
	} else {
		o.R.CountryOfOriginDataPlatformCountryCountryDatum = related
	}

	return nil
}

// RemoveCountryOfOriginDataPlatformCountryCountryDatum relationship.
// Sets o.R.CountryOfOriginDataPlatformCountryCountryDatum to nil.
func (o *DataPlatformQuotationsItemDatum) RemoveCountryOfOriginDataPlatformCountryCountryDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformCountryCountryDatum) error {
	var err error

	queries.SetScanner(&o.CountryOfOrigin, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("CountryOfOrigin")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CountryOfOriginDataPlatformCountryCountryDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetDeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"DeliveryUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeliveryUnit = related.QuantityUnit
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.DeliveryUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// SetIncoterm of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.Incoterm to related.
func (o *DataPlatformQuotationsItemDatum) SetIncoterm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformIncotermsIncotermsDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Incoterms"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Incoterms, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Incoterms, related.Incoterms)
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			Incoterm: related,
		}
	} else {
		o.R.Incoterm = related
	}

	return nil
}

// RemoveIncoterm relationship.
// Sets o.R.Incoterm to nil.
func (o *DataPlatformQuotationsItemDatum) RemoveIncoterm(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformIncotermsIncotermsDatum) error {
	var err error

	queries.SetScanner(&o.Incoterms, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Incoterms")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Incoterm = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"InternalCapacityQuantityUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.InternalCapacityQuantityUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformQuotationsItemDatum) RemoveInternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.InternalCapacityQuantityUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("InternalCapacityQuantityUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.InternalCapacityQuantityUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ItemWeightUnit"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.QuantityUnit, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ItemWeightUnit, related.QuantityUnit)
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum: related,
		}
	} else {
		o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = related
	}

	return nil
}

// RemoveItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum relationship.
// Sets o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum to nil.
func (o *DataPlatformQuotationsItemDatum) RemoveItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformQuantityUnitQuantityUnitDatum) error {
	var err error

	queries.SetScanner(&o.ItemWeightUnit, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ItemWeightUnit")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ItemWeightUnitDataPlatformQuantityUnitQuantityUnitDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetPaymentMethodDataPlatformPaymentMethodPaymentMethodDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformPaymentMethodPaymentMethodDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"PaymentMethod"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.PaymentMethod, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PaymentMethod = related.PaymentMethod
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum: related,
		}
	} else {
		o.R.PaymentMethodDataPlatformPaymentMethodPaymentMethodDatum = related
	}

	return nil
}

// SetProductGroupDataPlatformProductGroupProductGroupDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetProductGroupDataPlatformProductGroupProductGroupDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProductGroupProductGroupDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"ProductGroup"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.ProductGroup, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductGroup, related.ProductGroup)
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			ProductGroupDataPlatformProductGroupProductGroupDatum: related,
		}
	} else {
		o.R.ProductGroupDataPlatformProductGroupProductGroupDatum = related
	}

	return nil
}

// RemoveProductGroupDataPlatformProductGroupProductGroupDatum relationship.
// Sets o.R.ProductGroupDataPlatformProductGroupProductGroupDatum to nil.
func (o *DataPlatformQuotationsItemDatum) RemoveProductGroupDataPlatformProductGroupProductGroupDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProductGroupProductGroupDatum) error {
	var err error

	queries.SetScanner(&o.ProductGroup, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("ProductGroup")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductGroupDataPlatformProductGroupProductGroupDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProjectDataPlatformProjectProjectDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.ProjectDataPlatformProjectProjectDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetProjectDataPlatformProjectProjectDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProjectProjectDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Project"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Project, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Project, related.Project)
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			ProjectDataPlatformProjectProjectDatum: related,
		}
	} else {
		o.R.ProjectDataPlatformProjectProjectDatum = related
	}

	return nil
}

// RemoveProjectDataPlatformProjectProjectDatum relationship.
// Sets o.R.ProjectDataPlatformProjectProjectDatum to nil.
func (o *DataPlatformQuotationsItemDatum) RemoveProjectDataPlatformProjectProjectDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProjectProjectDatum) error {
	var err error

	queries.SetScanner(&o.Project, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Project")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProjectDataPlatformProjectProjectDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetProjectDataPlatformProjectWBSElementDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.ProjectDataPlatformProjectWBSElementDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetProjectDataPlatformProjectWBSElementDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformProjectWBSElementDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Project"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Project, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Project, related.Project)
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			ProjectDataPlatformProjectWBSElementDatum: related,
		}
	} else {
		o.R.ProjectDataPlatformProjectWBSElementDatum = related
	}

	return nil
}

// RemoveProjectDataPlatformProjectWBSElementDatum relationship.
// Sets o.R.ProjectDataPlatformProjectWBSElementDatum to nil.
func (o *DataPlatformQuotationsItemDatum) RemoveProjectDataPlatformProjectWBSElementDatum(ctx context.Context, exec boil.ContextExecutor, related *DataPlatformProjectWBSElementDatum) error {
	var err error

	queries.SetScanner(&o.Project, nil)
	if err = o.Update(ctx, exec, boil.Whitelist("Project")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProjectDataPlatformProjectWBSElementDatum = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	return nil
}

// SetQuotationDataPlatformQuotationsHeaderDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.QuotationDataPlatformQuotationsHeaderDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetQuotationDataPlatformQuotationsHeaderDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformQuotationsHeaderDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Quotation"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Quotation, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Quotation = related.Quotation
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			QuotationDataPlatformQuotationsHeaderDatum: related,
		}
	} else {
		o.R.QuotationDataPlatformQuotationsHeaderDatum = related
	}

	return nil
}

// SetBuyerDataPlatformSCRGeneralDatum of the dataPlatformQuotationsItemDatum to the related item.
// Sets o.R.BuyerDataPlatformSCRGeneralDatum to related.
func (o *DataPlatformQuotationsItemDatum) SetBuyerDataPlatformSCRGeneralDatum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DataPlatformSCRGeneralDatum) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"Buyer"}),
		strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
	)
	values := []interface{}{related.Buyer, o.Quotation, o.QuotationItem}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Buyer = related.Buyer
	if o.R == nil {
		o.R = &dataPlatformQuotationsItemDatumR{
			BuyerDataPlatformSCRGeneralDatum: related,
		}
	} else {
		o.R.BuyerDataPlatformSCRGeneralDatum = related
	}

	return nil
}

// DataPlatformQuotationsItemData retrieves all the records using an executor.
func DataPlatformQuotationsItemData(mods ...qm.QueryMod) dataPlatformQuotationsItemDatumQuery {
	mods = append(mods, qm.From("`data_platform_quotations_item_data`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`data_platform_quotations_item_data`.*"})
	}

	return dataPlatformQuotationsItemDatumQuery{q}
}

// FindDataPlatformQuotationsItemDatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDataPlatformQuotationsItemDatum(ctx context.Context, exec boil.ContextExecutor, quotation int, quotationItem int, selectCols ...string) (*DataPlatformQuotationsItemDatum, error) {
	dataPlatformQuotationsItemDatumObj := &DataPlatformQuotationsItemDatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `data_platform_quotations_item_data` where `Quotation`=? AND `QuotationItem`=?", sel,
	)

	q := queries.Raw(query, quotation, quotationItem)

	err := q.Bind(ctx, exec, dataPlatformQuotationsItemDatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from data_platform_quotations_item_data")
	}

	return dataPlatformQuotationsItemDatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DataPlatformQuotationsItemDatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_item_data provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsItemDatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dataPlatformQuotationsItemDatumInsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsItemDatumInsertCache[key]
	dataPlatformQuotationsItemDatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dataPlatformQuotationsItemDatumAllColumns,
			dataPlatformQuotationsItemDatumColumnsWithDefault,
			dataPlatformQuotationsItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `data_platform_quotations_item_data` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `data_platform_quotations_item_data` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `data_platform_quotations_item_data` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into data_platform_quotations_item_data")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Quotation,
		o.QuotationItem,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsItemDatumInsertCacheMut.Lock()
		dataPlatformQuotationsItemDatumInsertCache[key] = cache
		dataPlatformQuotationsItemDatumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DataPlatformQuotationsItemDatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DataPlatformQuotationsItemDatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	dataPlatformQuotationsItemDatumUpdateCacheMut.RLock()
	cache, cached := dataPlatformQuotationsItemDatumUpdateCache[key]
	dataPlatformQuotationsItemDatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dataPlatformQuotationsItemDatumAllColumns,
			dataPlatformQuotationsItemDatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update data_platform_quotations_item_data, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, append(wl, dataPlatformQuotationsItemDatumPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update data_platform_quotations_item_data row")
	}

	if !cached {
		dataPlatformQuotationsItemDatumUpdateCacheMut.Lock()
		dataPlatformQuotationsItemDatumUpdateCache[key] = cache
		dataPlatformQuotationsItemDatumUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAll updates all rows with the specified column values.
func (q dataPlatformQuotationsItemDatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for data_platform_quotations_item_data")
	}

	return nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DataPlatformQuotationsItemDatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `data_platform_quotations_item_data` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in dataPlatformQuotationsItemDatum slice")
	}

	return nil
}

var mySQLDataPlatformQuotationsItemDatumUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DataPlatformQuotationsItemDatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no data_platform_quotations_item_data provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dataPlatformQuotationsItemDatumColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDataPlatformQuotationsItemDatumUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dataPlatformQuotationsItemDatumUpsertCacheMut.RLock()
	cache, cached := dataPlatformQuotationsItemDatumUpsertCache[key]
	dataPlatformQuotationsItemDatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dataPlatformQuotationsItemDatumAllColumns,
			dataPlatformQuotationsItemDatumColumnsWithDefault,
			dataPlatformQuotationsItemDatumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			dataPlatformQuotationsItemDatumAllColumns,
			dataPlatformQuotationsItemDatumPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert data_platform_quotations_item_data, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`data_platform_quotations_item_data`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `data_platform_quotations_item_data` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for data_platform_quotations_item_data")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(dataPlatformQuotationsItemDatumType, dataPlatformQuotationsItemDatumMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for data_platform_quotations_item_data")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for data_platform_quotations_item_data")
	}

CacheNoHooks:
	if !cached {
		dataPlatformQuotationsItemDatumUpsertCacheMut.Lock()
		dataPlatformQuotationsItemDatumUpsertCache[key] = cache
		dataPlatformQuotationsItemDatumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DataPlatformQuotationsItemDatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DataPlatformQuotationsItemDatum) Delete(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil {
		return errors.New("models: no DataPlatformQuotationsItemDatum provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dataPlatformQuotationsItemDatumPrimaryKeyMapping)
	sql := "DELETE FROM `data_platform_quotations_item_data` WHERE `Quotation`=? AND `QuotationItem`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from data_platform_quotations_item_data")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q dataPlatformQuotationsItemDatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if q.Query == nil {
		return errors.New("models: no dataPlatformQuotationsItemDatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from data_platform_quotations_item_data")
	}

	return nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DataPlatformQuotationsItemDatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `data_platform_quotations_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	_, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from dataPlatformQuotationsItemDatum slice")
	}

	return nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DataPlatformQuotationsItemDatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDataPlatformQuotationsItemDatum(ctx, exec, o.Quotation, o.QuotationItem)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DataPlatformQuotationsItemDatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DataPlatformQuotationsItemDatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dataPlatformQuotationsItemDatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `data_platform_quotations_item_data`.* FROM `data_platform_quotations_item_data` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, dataPlatformQuotationsItemDatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DataPlatformQuotationsItemDatumSlice")
	}

	*o = slice

	return nil
}

// DataPlatformQuotationsItemDatumExists checks if the DataPlatformQuotationsItemDatum row exists.
func DataPlatformQuotationsItemDatumExists(ctx context.Context, exec boil.ContextExecutor, quotation int, quotationItem int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `data_platform_quotations_item_data` where `Quotation`=? AND `QuotationItem`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, quotation, quotationItem)
	}
	row := exec.QueryRowContext(ctx, sql, quotation, quotationItem)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if data_platform_quotations_item_data exists")
	}

	return exists, nil
}

// Exists checks if the DataPlatformQuotationsItemDatum row exists.
func (o *DataPlatformQuotationsItemDatum) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DataPlatformQuotationsItemDatumExists(ctx, exec, o.Quotation, o.QuotationItem)
}
